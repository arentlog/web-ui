//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 7622 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Web.Http;
using ServiceInterfaceClient.BaseClasses;
    
namespace Infor.Sxe.Web.FrontEnd.Controllers.WebAPI.Data.SA
{  
   using Sxe.SA.Data.Models.PdsContext;
   using Sxe.SA.Data.Models.Pdssasj;
   using Sxe.SA.Data.Models.Pdsjournallookup;
   using Sxe.SA.Data.Models.Complex;
   using Sxe.SA.Data.Repositories;
    
   [RoutePrefix("api/sa/sasj")]
   public partial class SasjApiController : ApiControllerBase
   {
      private readonly SasjRepository repository;
    
      public SasjApiController(SasjRepository repository)
      {
         this.repository = repository;
         this.OnCreated();
      }
    
      partial void OnCreated();
    
    
      [HttpGet]
      [Route("getbyrowid/{rowid:maxLength(30)}")]
      public Sasj GetByRowId(string rowid, string fldlist = "")
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return null;
         }
         return this.repository.GetByRowId(rowid, fldlist);
      }
      
      [HttpPost]
      [Route("listbyrowids")]      
      public IEnumerable<Sasj> GetListByRowIdList(List<string> rowids, string fldlist = "")
      {
         if (rowids == null || rowids.Count == 0)
         {
            return new List<Sasj>();
         }
         return this.repository.GetListByRowIdList(rowids, rowids.Count, fldlist);
      }
        
      [HttpGet]
      [Route("")]
      public IEnumerable<Sasj> GetListAllByCono(int batchsize = 0, string fldlist = "")
      {  
         return this.repository.GetListAllByCono(0, batchsize, fldlist);
      }
      [HttpGet]
      [Route("getbypk")]
      public Sasj Get(int jrnlno = 0, string fldlist = "")
      {
         return this.repository.Get(0, jrnlno, 1, fldlist);
      }
        
      [HttpGet]
      [Route("existsbypk")]
      public bool Exists(int jrnlno = 0)
      {
         return (this.repository.Get(0, jrnlno, 1, string.Empty) != null);
      }

      [HttpGet]
      [Route("existsbyrowid/{rowid:maxLength(30)}")]
      public bool ExistsByRowId(string rowid)
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return false;
         }
         return (this.repository.GetByRowId(rowid, string.Empty) != null);
      }
	  

      [HttpGet]
      [Route("listbybal")]
      public IEnumerable<Sasj> GetListByBal(string ourproc = "", bool balancefl = false, DateTime? opendt = null, int jrnlno = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByBal(0, ourproc, balancefl, opendt, jrnlno, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyclose")]
      public IEnumerable<Sasj> GetListByClose(string oper2 = "", bool closefl = false, bool batchfl = false,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByClose(0, oper2, closefl, batchfl, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyinq")]
      public IEnumerable<Sasj> GetListByInq(string oper2 = "", int jrnlno = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByInq(0, oper2, jrnlno, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyinqd")]
      public IEnumerable<Sasj> GetListByInqd(int jrnlno = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByInqd(0, jrnlno, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyintellexdt")]
      public IEnumerable<Sasj> GetListByIntellexdt(DateTime? intellexdt = null, DateTime? opendt = null,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByIntellexdt(0, intellexdt, opendt, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyprint")]
      public IEnumerable<Sasj> GetListByPrint(bool printfl = false, int jrnlno = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByPrint(0, printfl, jrnlno, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyproc")]
      public IEnumerable<Sasj> GetListByProc(string currproc = "", bool closefl = false,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByProc(0, currproc, closefl, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbysmmerge")]
      public IEnumerable<Sasj> GetListBySmmerge(bool smmergedfl = false, string ourproc = "", int jrnlno = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListBySmmerge(0, smmergedfl, ourproc, jrnlno, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbytransdttmz")]
      public IEnumerable<Sasj> GetListByTransdttmz(DateTime? transdttmz = null,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByTransdttmz(transdttmz, batchsize, fldlist);
      }

      [HttpPost]
      [Route("")]
      public Sasj Insert(Sasj record)
      {
         return this.repository.Insert(record);
      }
      
      [HttpPut]
      [Route("")]
      public Sasj Update(Sasj record)
      {
         return this.repository.Update(record);
      }
      
      [HttpDelete]
      [Route("")]
      public void Delete(Sasj record)
      {
         this.repository.Delete(record);
      }
  
      [HttpDelete]
      [Route("deletelistbyrowids")]
      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds == null || rowIds.Count == 0)
         {
            return;
         }
         this.repository.DeleteListByRowIds(rowIds);
      }
	  
      
      [Route("lookup")]
      [HttpPost]
      public SasjLookupResponseAPI Lookup(Journallookupcriteria journallookupcriteria)
      {
         return this.repository.Lookup(journallookupcriteria);
      } 
  
      protected override void Dispose(bool disposing)
      {
         if (!disposing)
         {
            return;
         }
         this.repository?.Dispose();
         base.Dispose(true);
      }
   }   
}
#pragma warning restore 1591
  