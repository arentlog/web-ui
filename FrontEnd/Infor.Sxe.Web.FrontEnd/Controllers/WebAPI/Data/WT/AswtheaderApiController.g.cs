//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 7622 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Web.Http;
using ServiceInterfaceClient.BaseClasses;
    
namespace Infor.Sxe.Web.FrontEnd.Controllers.WebAPI.Data.WT
{  
   using Sxe.WT.Data.Models.PdsContext;
   using Sxe.WT.Data.Models.Pdswthdr;
   using Sxe.WT.Data.Models.Pdsmessaging;
   using Sxe.WT.Data.Models.Pdswtheaderretrieve;
   using Sxe.WT.Data.Models.Pdswlstatus;
   using Sxe.WT.Data.Models.Pdswtheaderfinish;
   using Sxe.WT.Data.Models.Pdswtprint;
   using Sxe.WT.Data.Models.Pdswtetcopy;
   using Sxe.WT.Data.Models.Pdswtdelete;
   using Sxe.WT.Data.Models.Pdscalcsubtotals;
   using Sxe.WT.Data.Models.Pdswtetprint;
   using Sxe.WT.Data.Models.Pdsprintersettings;
   using Sxe.WT.Data.Models.Pdswtimportfile;
   using Sxe.WT.Data.Models.Pdswtimportdata;
   using Sxe.WT.Data.Models.Complex;
   using Sxe.WT.Data.Repositories;
    
   [RoutePrefix("api/wt/aswtheader")]
   public partial class AswtheaderApiController : ApiControllerBase
   {
      private readonly AswtheaderRepository repository;
    
      public AswtheaderApiController(AswtheaderRepository repository)
      {
         this.repository = repository;
         this.OnCreated();
      }
    
      partial void OnCreated();
    
      
      [Route("wtetheadersoftlock/{iWTNo:int}/{iWTSuf:int}")]
      [HttpGet]
      public void WTETHeaderSoftLock(int iWTNo, int iWTSuf)
      {
         this.repository.WTETHeaderSoftLock(iWTNo, iWTSuf);
      } 
  
      
      [Route("wtetheadercreate")]
      [HttpPost]
      public AswtheaderWTETHeaderCreateResponseAPI WTETHeaderCreate(Wthdr wthdr)
      {
         return this.repository.WTETHeaderCreate(wthdr);
      } 
  
      
      [Route("wtetheaderupdate")]
      [HttpPost]
      public IEnumerable<Messaging> WTETHeaderUpdate(Wthdr wthdr)
      {
         return this.repository.WTETHeaderUpdate(wthdr);
      } 
  
      
      [Route("wtetheaderretrieve")]
      [HttpPost]
      public AswtheaderWTETHeaderRetrieveResponseAPI WTETHeaderRetrieve(Wtheaderretrievecriteria wtheaderretrievecriteria)
      {
         return this.repository.WTETHeaderRetrieve(wtheaderretrievecriteria);
      } 
  
      
      [Route("wtetremovesoftlock/{iWTNo:int}/{iWTSuf:int}")]
      [HttpGet]
      public void WTETRemoveSoftLock(int iWTNo, int iWTSuf)
      {
         this.repository.WTETRemoveSoftLock(iWTNo, iWTSuf);
      } 
  
      
      [Route("wtetheaderfinish")]
      [HttpPost]
      public AswtheaderWTETHeaderFinishResponseAPI WTETHeaderFinish(Wtheaderfinishcriteria wtheaderfinishcriteria)
      {
         return this.repository.WTETHeaderFinish(wtheaderfinishcriteria);
      } 
  
      
      [Route("wtprint")]
      [HttpPost]
      public IEnumerable<Messaging> WTPrint(Wtprintcriteria wtprintcriteria)
      {
         return this.repository.WTPrint(wtprintcriteria);
      } 
  
      
      [Route("wtdefaultprinter/{iWTNo:int}/{iWTSuf:int}")]
      [HttpGet]
      public AswtheaderWTDefaultPrinterResponseAPI WTDefaultPrinter(int iWTNo, int iWTSuf)
      {
         return this.repository.WTDefaultPrinter(iWTNo, iWTSuf);
      } 
  
      
      [Route("wtetcopyupdate")]
      [HttpPost]
      public AswtheaderWTETCopyUpdateResponseAPI WTETCopyUpdate(Wtetcopy wtetcopy)
      {
         return this.repository.WTETCopyUpdate(wtetcopy);
      } 
  
      
      [Route("wtetorderdelete")]
      [HttpPost]
      public IEnumerable<Messaging> WTETOrderDelete(Wtdeletecriteria wtdeletecriteria)
      {
         return this.repository.WTETOrderDelete(wtdeletecriteria);
      } 
  
      
      [Route("calculaterunningsubtotals")]
      [HttpPost]
      public Calcsubtotalsresults CalculateRunningSubTotals(Calcsubtotalscriteria calcsubtotalscriteria)
      {
         return this.repository.CalculateRunningSubTotals(calcsubtotalscriteria);
      } 
  
      
      [Route("wtetprintinitialize")]
      [HttpPost]
      public Wtetprint WTETPrintInitialize(Wtetprint wtetprint)
      {
         return this.repository.WTETPrintInitialize(wtetprint);
      } 
  
      
      [Route("wtetprintrun")]
      [HttpPost]
      public Wtetprint WTETPrintRun(AswtheaderWTETPrintRunRequestAPI AswtheaderWTETPrintRunRequestAPI)
      {
         return this.repository.WTETPrintRun(AswtheaderWTETPrintRunRequestAPI);
      } 
  
      
      [Route("wtetcopyinitialize")]
      [HttpGet]
      public Wtetcopy WTETCopyInitialize()
      {
         return this.repository.WTETCopyInitialize();
      } 
  
      
      [Route("wtetcopycontinue")]
      [HttpPost]
      public AswtheaderWTETCopyContinueResponseAPI WTETCopyContinue(Wtetcopy wtetcopy)
      {
         return this.repository.WTETCopyContinue(wtetcopy);
      } 
  
      
      [Route("wtimportload")]
      [HttpPost]
      public AswtheaderWTImportLoadResponseAPI WTImportLoad(AswtheaderWTImportLoadRequestAPI AswtheaderWTImportLoadRequestAPI)
      {
         return this.repository.WTImportLoad(AswtheaderWTImportLoadRequestAPI);
      } 
  
      
      [Route("wtimportupdate")]
      [HttpPost]
      public IEnumerable<Messaging> WTImportUpdate(AswtheaderWTImportUpdateRequestAPI AswtheaderWTImportUpdateRequestAPI)
      {
         return this.repository.WTImportUpdate(AswtheaderWTImportUpdateRequestAPI);
      } 
  
      
      [Route("wtimportvalidate")]
      [HttpPost]
      public AswtheaderWTImportValidateResponseAPI WTImportValidate(IEnumerable<Wtimportdata> wtimportdata)
      {
         return this.repository.WTImportValidate(wtimportdata);
      } 
  
      
      [Route("wtrecalcaddons/{pvWtno:int}/{pvWtsuf:int}")]
      [HttpGet]
      public void WTRecalcAddons(int pvWtno, int pvWtsuf)
      {
         this.repository.WTRecalcAddons(pvWtno, pvWtsuf);
      } 
  
      protected override void Dispose(bool disposing)
      {
         if (!disposing)
         {
            return;
         }
         this.repository?.Dispose();
         base.Dispose(true);
      }
   }   
}
#pragma warning restore 1591
  