//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 7622 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Web.Http;
using ServiceInterfaceClient.BaseClasses;
    
namespace Infor.Sxe.Web.FrontEnd.Controllers.WebAPI.Data.TWL
{  
   using Sxe.TWL.Data.Models.PdsContext;
   using Sxe.TWL.Data.Models.Pdsinventory;
   using Sxe.TWL.Data.Repositories;
    
   [RoutePrefix("api/twl/inventory")]
   public partial class InventoryApiController : ApiControllerBase
   {
      private readonly InventoryRepository repository;
    
      public InventoryApiController(InventoryRepository repository)
      {
         this.repository = repository;
         this.OnCreated();
      }
    
      partial void OnCreated();
    
    
      [HttpGet]
      [Route("getbyrowid/{rowid:maxLength(30)}")]
      public Inventory GetByRowId(string rowid, string fldlist = "")
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return null;
         }
         return this.repository.GetByRowId(rowid, fldlist);
      }
      
      [HttpPost]
      [Route("listbyrowids")]      
      public IEnumerable<Inventory> GetListByRowIdList(List<string> rowids, string fldlist = "")
      {
         if (rowids == null || rowids.Count == 0)
         {
            return new List<Inventory>();
         }
         return this.repository.GetListByRowIdList(rowids, rowids.Count, fldlist);
      }
        
      [HttpGet]
      [Route("getbypk")]
      public Inventory Get(string coNum = "", string whNum = "", string absNum = "", string dateTime = "", string fldlist = "")
      {
         return this.repository.Get(coNum, whNum, absNum, dateTime, 1, fldlist);
      }
        
      [HttpGet]
      [Route("existsbypk")]
      public bool Exists(string coNum = "", string whNum = "", string absNum = "", string dateTime = "")
      {
         return (this.repository.Get(coNum, whNum, absNum, dateTime, 1, string.Empty) != null);
      }

      [HttpGet]
      [Route("existsbyrowid/{rowid:maxLength(30)}")]
      public bool ExistsByRowId(string rowid)
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return false;
         }
         return (this.repository.GetByRowId(rowid, string.Empty) != null);
      }
	  

      [HttpGet]
      [Route("listbycargocontrol")]
      public IEnumerable<Inventory> GetListByCargocontrol(string cargoControl = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCargocontrol(cargoControl, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabsbin")]
      public IEnumerable<Inventory> GetListByCoWhAbsBin(string coNum = "", string whNum = "", string absNum = "", string binNum = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsBin(coNum, whNum, absNum, binNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabslotexpirationqty")]
      public IEnumerable<Inventory> GetListByCoWhAbsLotExpirationQty(string coNum = "", string whNum = "", string absNum = "", string lot = "", DateTime? expiration = null, decimal totalQty = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsLotExpirationQty(coNum, whNum, absNum, lot, expiration, totalQty, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabslotqty")]
      public IEnumerable<Inventory> GetListByCoWhAbsLotQty(string coNum = "", string whNum = "", string absNum = "", string lot = "", decimal totalQty = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsLotQty(coNum, whNum, absNum, lot, totalQty, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabsqtyfifo")]
      public IEnumerable<Inventory> GetListByCoWhAbsQtyFifo(string coNum = "", string whNum = "", string absNum = "", decimal totalQty = 0, string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsQtyFifo(coNum, whNum, absNum, totalQty, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbinabs")]
      public IEnumerable<Inventory> GetListByCoWhBinAbs(string coNum = "", string whNum = "", string binNum = "", string absNum = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBinAbs(coNum, whNum, binNum, absNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbinpalletabslot")]
      public IEnumerable<Inventory> GetListByCoWhBinPalletAbsLot(string coNum = "", string whNum = "", string binNum = "", string palletId = "", string absNum = "", string lot = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBinPalletAbsLot(coNum, whNum, binNum, palletId, absNum, lot, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbinrtnfull")]
      public IEnumerable<Inventory> GetListByCoWhBinRtnFull(string coNum = "", string whNum = "", string binNum = "", string rtnCategory = "", bool rtnPalletFull = false,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBinRtnFull(coNum, whNum, binNum, rtnCategory, rtnPalletFull, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhcyclecount")]
      public IEnumerable<Inventory> GetListByCoWhCyclecount(string coNum = "", string whNum = "", bool cycleFlag = false, int cycleId = 0, string binNum = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhCyclecount(coNum, whNum, cycleFlag, cycleId, binNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhpallet")]
      public IEnumerable<Inventory> GetListByCoWhPallet(string coNum = "", string whNum = "", string palletId = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhPallet(coNum, whNum, palletId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhstatusabslot")]
      public IEnumerable<Inventory> GetListByCoWhStatusAbsLot(string coNum = "", string whNum = "", string stockStat = "", string absNum = "", string lot = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhStatusAbsLot(coNum, whNum, stockStat, absNum, lot, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhtask")]
      public IEnumerable<Inventory> GetListByCoWhTask(string coNum = "", string whNum = "", int taskId = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhTask(coNum, whNum, taskId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyid")]
      public IEnumerable<Inventory> GetListById(int id = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListById(id, batchsize, fldlist);
      }

      [HttpPost]
      [Route("")]
      public Inventory Insert(Inventory record)
      {
         return this.repository.Insert(record);
      }
      
      [HttpPut]
      [Route("")]
      public Inventory Update(Inventory record)
      {
         return this.repository.Update(record);
      }
      
      [HttpDelete]
      [Route("")]
      public void Delete(Inventory record)
      {
         this.repository.Delete(record);
      }
  
      [HttpDelete]
      [Route("deletelistbyrowids")]
      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds == null || rowIds.Count == 0)
         {
            return;
         }
         this.repository.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (!disposing)
         {
            return;
         }
         this.repository?.Dispose();
         base.Dispose(true);
      }
   }   
}
#pragma warning restore 1591
  