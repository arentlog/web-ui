//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 7622 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Web.Http;
using ServiceInterfaceClient.BaseClasses;
    
namespace Infor.Sxe.Web.FrontEnd.Controllers.WebAPI.Data.TWL
{  
   using Sxe.TWL.Data.Models.PdsContext;
   using Sxe.TWL.Data.Models.Pdstransactions;
   using Sxe.TWL.Data.Repositories;
    
   [RoutePrefix("api/twl/transactions")]
   public partial class TransactionsApiController : ApiControllerBase
   {
      private readonly TransactionsRepository repository;
    
      public TransactionsApiController(TransactionsRepository repository)
      {
         this.repository = repository;
         this.OnCreated();
      }
    
      partial void OnCreated();
    
    
      [HttpGet]
      [Route("getbyrowid/{rowid:maxLength(30)}")]
      public Transactions GetByRowId(string rowid, string fldlist = "")
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return null;
         }
         return this.repository.GetByRowId(rowid, fldlist);
      }
      
      [HttpPost]
      [Route("listbyrowids")]      
      public IEnumerable<Transactions> GetListByRowIdList(List<string> rowids, string fldlist = "")
      {
         if (rowids == null || rowids.Count == 0)
         {
            return new List<Transactions>();
         }
         return this.repository.GetListByRowIdList(rowids, rowids.Count, fldlist);
      }
        
      [HttpGet]
      [Route("getbypk")]
      public Transactions Get(string coNum = "", string whNum = "", string dateTime = "", string fldlist = "")
      {
         return this.repository.Get(coNum, whNum, dateTime, 1, fldlist);
      }
        
      [HttpGet]
      [Route("existsbypk")]
      public bool Exists(string coNum = "", string whNum = "", string dateTime = "")
      {
         return (this.repository.Get(coNum, whNum, dateTime, 1, string.Empty) != null);
      }

      [HttpGet]
      [Route("existsbyrowid/{rowid:maxLength(30)}")]
      public bool ExistsByRowId(string rowid)
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return false;
         }
         return (this.repository.GetByRowId(rowid, string.Empty) != null);
      }
	  

      [HttpGet]
      [Route("listbycargocontrol")]
      public IEnumerable<Transactions> GetListByCargocontrol(string cargoControl = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCargocontrol(cargoControl, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabstime")]
      public IEnumerable<Transactions> GetListByCoWhAbsTime(string coNum = "", string whNum = "", string absNum = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsTime(coNum, whNum, absNum, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbatch")]
      public IEnumerable<Transactions> GetListByCoWhBatch(string coNum = "", string whNum = "", int batch = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBatch(coNum, whNum, batch, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbintime")]
      public IEnumerable<Transactions> GetListByCoWhBinTime(string coNum = "", string whNum = "", string binNum = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBinTime(coNum, whNum, binNum, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhcartonid")]
      public IEnumerable<Transactions> GetListByCoWhCartonId(string coNum = "", string whNum = "", string cartonId = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhCartonId(coNum, whNum, cartonId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhccid")]
      public IEnumerable<Transactions> GetListByCoWhCcid(string coNum = "", string whNum = "", int ccId = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhCcid(coNum, whNum, ccId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhcctype")]
      public IEnumerable<Transactions> GetListByCoWhCctype(string coNum = "", string whNum = "", string ccType = "", string ccString = "", int ccId = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhCctype(coNum, whNum, ccType, ccString, ccId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhdepttypetime")]
      public IEnumerable<Transactions> GetListByCoWhDeptTypeTime(string coNum = "", string whNum = "", int deptNum = 0, string transType = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhDeptTypeTime(coNum, whNum, deptNum, transType, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhdocid")]
      public IEnumerable<Transactions> GetListByCoWhDocid(string coNum = "", string whNum = "", string docId = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhDocid(coNum, whNum, docId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhemptime")]
      public IEnumerable<Transactions> GetListByCoWhEmpTime(string coNum = "", string whNum = "", string empNum = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhEmpTime(coNum, whNum, empNum, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhlotdatetime")]
      public IEnumerable<Transactions> GetListByCoWhLotDatetime(string coNum = "", string whNum = "", string lot = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhLotDatetime(coNum, whNum, lot, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhpalletfromabs")]
      public IEnumerable<Transactions> GetListByCoWhPalletfromAbs(string coNum = "", string whNum = "", string palletIdFrom = "", string absNum = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhPalletfromAbs(coNum, whNum, palletIdFrom, absNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhpallettime")]
      public IEnumerable<Transactions> GetListByCoWhPalletTime(string coNum = "", string whNum = "", string palletId = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhPalletTime(coNum, whNum, palletId, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhposuftime")]
      public IEnumerable<Transactions> GetListByCoWhPoSufTime(string coNum = "", string whNum = "", string poNumber = "", string poSuffix = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhPoSufTime(coNum, whNum, poNumber, poSuffix, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhrttime")]
      public IEnumerable<Transactions> GetListByCoWhRtTime(string coNum = "", string whNum = "", string rtNum = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhRtTime(coNum, whNum, rtNum, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhserialnumdatetime")]
      public IEnumerable<Transactions> GetListByCoWhSerialNumDatetime(string coNum = "", string whNum = "", string serialNum = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhSerialNumDatetime(coNum, whNum, serialNum, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhshftypetime")]
      public IEnumerable<Transactions> GetListByCoWhShfTypeTime(string coNum = "", string whNum = "", int shfNum = 0, string transType = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhShfTypeTime(coNum, whNum, shfNum, transType, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhtaskdatetime")]
      public IEnumerable<Transactions> GetListByCoWhTaskDatetime(string coNum = "", string whNum = "", int taskId = 0, string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhTaskDatetime(coNum, whNum, taskId, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhtypestatus")]
      public IEnumerable<Transactions> GetListByCoWhTypeStatus(string coNum = "", string whNum = "", string transType = "", string rowStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhTypeStatus(coNum, whNum, transType, rowStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhtypetime")]
      public IEnumerable<Transactions> GetListByCoWhTypeTime(string coNum = "", string whNum = "", string transType = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhTypeTime(coNum, whNum, transType, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyreleaseid")]
      public IEnumerable<Transactions> GetListByReleaseid(string releaseId = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByReleaseid(releaseId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbystatuschrono")]
      public IEnumerable<Transactions> GetListByStatusChrono(string rowStatus = "", string dateTime = "", int transSecTime = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByStatusChrono(rowStatus, dateTime, transSecTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbystatustypetime")]
      public IEnumerable<Transactions> GetListByStatusTypeTime(string rowStatus = "", string transType = "", string dateTime = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByStatusTypeTime(rowStatus, transType, dateTime, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbytlink")]
      public IEnumerable<Transactions> GetListByTlink(int transLink = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByTlink(transLink, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbytransnum")]
      public IEnumerable<Transactions> GetListByTransNum(int transNum = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByTransNum(transNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbytypetransmission")]
      public IEnumerable<Transactions> GetListByTypeTransmission(string transType = "", int transmission = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByTypeTransmission(transType, transmission, batchsize, fldlist);
      }

      [HttpPost]
      [Route("")]
      public Transactions Insert(Transactions record)
      {
         return this.repository.Insert(record);
      }
      
      [HttpPut]
      [Route("")]
      public Transactions Update(Transactions record)
      {
         return this.repository.Update(record);
      }
      
      [HttpDelete]
      [Route("")]
      public void Delete(Transactions record)
      {
         this.repository.Delete(record);
      }
  
      [HttpDelete]
      [Route("deletelistbyrowids")]
      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds == null || rowIds.Count == 0)
         {
            return;
         }
         this.repository.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (!disposing)
         {
            return;
         }
         this.repository?.Dispose();
         base.Dispose(true);
      }
   }   
}
#pragma warning restore 1591
  