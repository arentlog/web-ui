//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 7622 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Web.Http;
using ServiceInterfaceClient.BaseClasses;
    
namespace Infor.Sxe.Web.FrontEnd.Controllers.WebAPI.Data.TWL
{  
   using Sxe.TWL.Data.Models.PdsContext;
   using Sxe.TWL.Data.Models.Pdspick;
   using Sxe.TWL.Data.Repositories;
    
   [RoutePrefix("api/twl/pick")]
   public partial class PickApiController : ApiControllerBase
   {
      private readonly PickRepository repository;
    
      public PickApiController(PickRepository repository)
      {
         this.repository = repository;
         this.OnCreated();
      }
    
      partial void OnCreated();
    
    
      [HttpGet]
      [Route("getbyrowid/{rowid:maxLength(30)}")]
      public Pick GetByRowId(string rowid, string fldlist = "")
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return null;
         }
         return this.repository.GetByRowId(rowid, fldlist);
      }
      
      [HttpPost]
      [Route("listbyrowids")]      
      public IEnumerable<Pick> GetListByRowIdList(List<string> rowids, string fldlist = "")
      {
         if (rowids == null || rowids.Count == 0)
         {
            return new List<Pick>();
         }
         return this.repository.GetListByRowIdList(rowids, rowids.Count, fldlist);
      }
        
      [HttpGet]
      [Route("getbypk")]
      public Pick Get(string coNum = "", string whNum = "", int batch = 0, int pickSequence = 0, string binNum = "", string fldlist = "")
      {
         return this.repository.Get(coNum, whNum, batch, pickSequence, binNum, 1, fldlist);
      }
        
      [HttpGet]
      [Route("existsbypk")]
      public bool Exists(string coNum = "", string whNum = "", int batch = 0, int pickSequence = 0, string binNum = "")
      {
         return (this.repository.Get(coNum, whNum, batch, pickSequence, binNum, 1, string.Empty) != null);
      }

      [HttpGet]
      [Route("existsbyrowid/{rowid:maxLength(30)}")]
      public bool ExistsByRowId(string rowid)
      {
         if (string.IsNullOrEmpty(rowid))
         {
            return false;
         }
         return (this.repository.GetByRowId(rowid, string.Empty) != null);
      }
	  

      [HttpGet]
      [Route("listbycoaltwhabsstatus")]
      public IEnumerable<Pick> GetListByCoAltwhAbsStatus(string coNum = "", string altwhse = "", string absNum = "", string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoAltwhAbsStatus(coNum, altwhse, absNum, pickStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhabsstatus")]
      public IEnumerable<Pick> GetListByCoWhAbsStatus(string coNum = "", string whNum = "", string absNum = "", string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhAbsStatus(coNum, whNum, absNum, pickStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhbinabsstatus")]
      public IEnumerable<Pick> GetListByCoWhBinAbsStatus(string coNum = "", string whNum = "", string binNum = "", string absNum = "", string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhBinAbsStatus(coNum, whNum, binNum, absNum, pickStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhcarton")]
      public IEnumerable<Pick> GetListByCoWhCarton(string coNum = "", string whNum = "", string cartonId = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhCarton(coNum, whNum, cartonId, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhoslsstatus")]
      public IEnumerable<Pick> GetListByCoWhOSLSStatus(string coNum = "", string whNum = "", string order = "", string orderSuffix = "", int line = 0, int lineSequence = 0, string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhOSLSStatus(coNum, whNum, order, orderSuffix, line, lineSequence, pickStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhstatus")]
      public IEnumerable<Pick> GetListByCoWhStatus(string coNum = "", string whNum = "", string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhStatus(coNum, whNum, pickStatus, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbycowhzoneaislebin")]
      public IEnumerable<Pick> GetListByCoWhZoneAisleBin(string coNum = "", string whNum = "", string whZone = "", int aisle = 0, string binNum = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByCoWhZoneAisleBin(coNum, whNum, whZone, aisle, binNum, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyid")]
      public IEnumerable<Pick> GetListById(int id = 0,  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListById(id, batchsize, fldlist);
      }

      [HttpGet]
      [Route("listbyoslsstatus")]
      public IEnumerable<Pick> GetListByOSLSStatus(string order = "", string orderSuffix = "", int line = 0, int lineSequence = 0, string pickStatus = "",  int batchsize = 0, string fldlist = "")
      {
         return this.repository.GetListByOSLSStatus(order, orderSuffix, line, lineSequence, pickStatus, batchsize, fldlist);
      }

      [HttpPost]
      [Route("")]
      public Pick Insert(Pick record)
      {
         return this.repository.Insert(record);
      }
      
      [HttpPut]
      [Route("")]
      public Pick Update(Pick record)
      {
         return this.repository.Update(record);
      }
      
      [HttpDelete]
      [Route("")]
      public void Delete(Pick record)
      {
         this.repository.Delete(record);
      }
  
      [HttpDelete]
      [Route("deletelistbyrowids")]
      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds == null || rowIds.Count == 0)
         {
            return;
         }
         this.repository.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (!disposing)
         {
            return;
         }
         this.repository?.Dispose();
         base.Dispose(true);
      }
   }   
}
#pragma warning restore 1591
  