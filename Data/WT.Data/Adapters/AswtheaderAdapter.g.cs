//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WT.Data.Adapters
{
   using com.infor.sxproxy.wtproxy;
   using com.infor.sxproxy.wtproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdswthdr;
   using Models.Pdsmessaging;
   using Models.Pdswtheaderretrieve;
   using Models.Pdswlstatus;
   using Models.Pdswtheaderfinish;
   using Models.Pdswtprint;
   using Models.Pdswtetcopy;
   using Models.Pdswtdelete;
   using Models.Pdscalcsubtotals;
   using Models.Pdswtetprint;
   using Models.Pdsprintersettings;
   using Models.Pdswtimportfile;
   using Models.Pdswtimportdata;
   using Models.Complex;

   public partial class AswtheaderAdapter : AdapterBase<pdsContextDataSet>
   {
      private WTProxyAppObject proxyAppObject;
      
      public AswtheaderAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswtheaderAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void WTETHeaderSoftLock(int iWTNo, int iWTSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETHeaderSoftLock - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETHeaderSoftLock(ref pdsContext,  iWTNo,  iWTSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETHeaderSoftLock - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AswtheaderWTETHeaderCreateResponseAPI WTETHeaderCreate(Wthdr wthdr)
      {   
         var result = new AswtheaderWTETHeaderCreateResponseAPI();
         
         var pdswthdr = new pdswthdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwthdrCriteria = pdswthdr.ttblwthdr.NewttblwthdrRow();
         Wthdr.UpdateRowFromWthdr(ref ttblwthdrCriteria, wthdr);
         pdswthdr.ttblwthdr.AddttblwthdrRow((pdswthdrDataSet.ttblwthdrRow)ttblwthdrCriteria);
            
         int iNewWTNo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETHeaderCreate - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETHeaderCreate(ref pdsContext,  pdswthdr, out pdsmessaging, out iNewWTNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETHeaderCreate - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswthdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.iNewWTNo = iNewWTNo;
          
         return result;
          
      }

      public IEnumerable<Messaging> WTETHeaderUpdate(Wthdr wthdr)
      {   
         var results = new List<Messaging>();
         
         var pdswthdr = new pdswthdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwthdrCriteria = pdswthdr.ttblwthdr.NewttblwthdrRow();
         Wthdr.UpdateRowFromWthdr(ref ttblwthdrCriteria, wthdr);
         pdswthdr.ttblwthdr.AddttblwthdrRow((pdswthdrDataSet.ttblwthdrRow)ttblwthdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETHeaderUpdate - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETHeaderUpdate(ref pdsContext,  pdswthdr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETHeaderUpdate - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswthdr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtheaderWTETHeaderRetrieveResponseAPI WTETHeaderRetrieve(Wtheaderretrievecriteria wtheaderretrievecriteria)
      {   
         var result = new AswtheaderWTETHeaderRetrieveResponseAPI();
         
         var pdswtheaderretrieve = new pdswtheaderretrieveDataSet();
            
         var pdswthdr = new pdswthdrDataSet();
            
         var pdswlstatus = new pdswlstatusDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtheaderretrievecriteriaCriteria = pdswtheaderretrieve.ttblwtheaderretrievecriteria.NewttblwtheaderretrievecriteriaRow();
         Wtheaderretrievecriteria.UpdateRowFromWtheaderretrievecriteria(ref ttblwtheaderretrievecriteriaCriteria, wtheaderretrievecriteria);
         pdswtheaderretrieve.ttblwtheaderretrievecriteria.AddttblwtheaderretrievecriteriaRow((pdswtheaderretrieveDataSet.ttblwtheaderretrievecriteriaRow)ttblwtheaderretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETHeaderRetrieve - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETHeaderRetrieve(ref pdsContext,  pdswtheaderretrieve, out pdswthdr, out pdswlstatus, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETHeaderRetrieve - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtheaderretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswlstatus.ttblwlstatus.Count > 0)
         {
            result.wlstatus = Wlstatus.BuildWlstatusFromRow(pdswlstatus.ttblwlstatus[0]);
         }
                    
         if (pdswthdr.ttblwthdr.Count > 0)
         {
            result.wthdr = Wthdr.BuildWthdrFromRow(pdswthdr.ttblwthdr[0]);
         }
                    
          
         return result;
          
      }

      public void WTETRemoveSoftLock(int iWTNo, int iWTSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETRemoveSoftLock - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETRemoveSoftLock(ref pdsContext,  iWTNo,  iWTSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETRemoveSoftLock - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AswtheaderWTETHeaderFinishResponseAPI WTETHeaderFinish(Wtheaderfinishcriteria wtheaderfinishcriteria)
      {   
         var result = new AswtheaderWTETHeaderFinishResponseAPI();
         
         var pdswtheaderfinish = new pdswtheaderfinishDataSet();
            
         DataRow ttblwtheaderfinishcriteriaCriteria = pdswtheaderfinish.ttblwtheaderfinishcriteria.NewttblwtheaderfinishcriteriaRow();
         Wtheaderfinishcriteria.UpdateRowFromWtheaderfinishcriteria(ref ttblwtheaderfinishcriteriaCriteria, wtheaderfinishcriteria);
         pdswtheaderfinish.ttblwtheaderfinishcriteria.AddttblwtheaderfinishcriteriaRow((pdswtheaderfinishDataSet.ttblwtheaderfinishcriteriaRow)ttblwtheaderfinishcriteriaCriteria);
            
         bool lForcePrintFl = false;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETHeaderFinish - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETHeaderFinish(ref pdsContext,  pdswtheaderfinish, out lForcePrintFl, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("WTETHeaderFinish - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtheaderfinish); 
    
         result.lForcePrintFl = lForcePrintFl;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Messaging> WTPrint(Wtprintcriteria wtprintcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdswtprint = new pdswtprintDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtprintcriteriaCriteria = pdswtprint.ttblwtprintcriteria.NewttblwtprintcriteriaRow();
         Wtprintcriteria.UpdateRowFromWtprintcriteria(ref ttblwtprintcriteriaCriteria, wtprintcriteria);
         pdswtprint.ttblwtprintcriteria.AddttblwtprintcriteriaRow((pdswtprintDataSet.ttblwtprintcriteriaRow)ttblwtprintcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTPrint - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTPrint(ref pdsContext,  pdswtprint, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTPrint - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtprint); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtheaderWTDefaultPrinterResponseAPI WTDefaultPrinter(int iWTNo, int iWTSuf)
      {   
         var result = new AswtheaderWTDefaultPrinterResponseAPI();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cDefaultPrinter = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTDefaultPrinter - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTDefaultPrinter(ref pdsContext,  iWTNo,  iWTSuf, out cDefaultPrinter, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTDefaultPrinter - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.cDefaultPrinter = cDefaultPrinter;
          
         return result;
          
      }

      public AswtheaderWTETCopyUpdateResponseAPI WTETCopyUpdate(Wtetcopy wtetcopy)
      {   
         var result = new AswtheaderWTETCopyUpdateResponseAPI();
         
         var pdswtetcopy = new pdswtetcopyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtetcopyCriteria = pdswtetcopy.ttblwtetcopy.NewttblwtetcopyRow();
         Wtetcopy.UpdateRowFromWtetcopy(ref ttblwtetcopyCriteria, wtetcopy);
         pdswtetcopy.ttblwtetcopy.AddttblwtetcopyRow((pdswtetcopyDataSet.ttblwtetcopyRow)ttblwtetcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETCopyUpdate - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETCopyUpdate(ref pdsContext, ref pdswtetcopy, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETCopyUpdate - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtetcopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtetcopy.ttblwtetcopy.Count > 0)
         {
            result.wtetcopy = Wtetcopy.BuildWtetcopyFromRow(pdswtetcopy.ttblwtetcopy[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> WTETOrderDelete(Wtdeletecriteria wtdeletecriteria)
      {   
         var results = new List<Messaging>();
         
         var pdswtdelete = new pdswtdeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtdeletecriteriaCriteria = pdswtdelete.ttblwtdeletecriteria.NewttblwtdeletecriteriaRow();
         Wtdeletecriteria.UpdateRowFromWtdeletecriteria(ref ttblwtdeletecriteriaCriteria, wtdeletecriteria);
         pdswtdelete.ttblwtdeletecriteria.AddttblwtdeletecriteriaRow((pdswtdeleteDataSet.ttblwtdeletecriteriaRow)ttblwtdeletecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETOrderDelete - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETOrderDelete(ref pdsContext,  pdswtdelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETOrderDelete - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtdelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Calcsubtotalsresults CalculateRunningSubTotals(Calcsubtotalscriteria calcsubtotalscriteria)
      {   
         var result = new Calcsubtotalsresults();
         
         var pdscalcsubtotals = new pdscalcsubtotalsDataSet();
            
         DataRow ttblcalcsubtotalscriteriaCriteria = pdscalcsubtotals.ttblcalcsubtotalscriteria.NewttblcalcsubtotalscriteriaRow();
         Calcsubtotalscriteria.UpdateRowFromCalcsubtotalscriteria(ref ttblcalcsubtotalscriteriaCriteria, calcsubtotalscriteria);
         pdscalcsubtotals.ttblcalcsubtotalscriteria.AddttblcalcsubtotalscriteriaRow((pdscalcsubtotalsDataSet.ttblcalcsubtotalscriteriaRow)ttblcalcsubtotalscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CalculateRunningSubTotals - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.CalculateRunningSubTotals(ref pdsContext, ref pdscalcsubtotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CalculateRunningSubTotals - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscalcsubtotals); 
    
         if (pdscalcsubtotals.ttblcalcsubtotalsresults.Count > 0) 
         { 
             result = Calcsubtotalsresults.BuildCalcsubtotalsresultsFromRow(pdscalcsubtotals.ttblcalcsubtotalsresults[0]);
         } 
              
          
         return result;
          
      }

      public Wtetprint WTETPrintInitialize(Wtetprint wtetprint)
      {   
         var result = new Wtetprint();
         
         var pdswtetprint = new pdswtetprintDataSet();
            
         DataRow ttblwtetprintCriteria = pdswtetprint.ttblwtetprint.NewttblwtetprintRow();
         Wtetprint.UpdateRowFromWtetprint(ref ttblwtetprintCriteria, wtetprint);
         pdswtetprint.ttblwtetprint.AddttblwtetprintRow((pdswtetprintDataSet.ttblwtetprintRow)ttblwtetprintCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETPrintInitialize - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETPrintInitialize(ref pdsContext, ref pdswtetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETPrintInitialize - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtetprint); 
    
         if (pdswtetprint.ttblwtetprint.Count > 0) 
         { 
             result = Wtetprint.BuildWtetprintFromRow(pdswtetprint.ttblwtetprint[0]);
         } 
              
          
         return result;
          
      }

      public Wtetprint WTETPrintRun(AswtheaderWTETPrintRunRequestAPI AswtheaderWTETPrintRunRequestAPI)
      {   
         var result = new Wtetprint();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdswtetprint = new pdswtetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AswtheaderWTETPrintRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         DataRow ttblwtetprintRow = pdswtetprint.ttblwtetprint.NewttblwtetprintRow();
         Wtetprint.UpdateRowFromWtetprint(ref ttblwtetprintRow, AswtheaderWTETPrintRunRequestAPI.wtetprint);
         pdswtetprint.ttblwtetprint.AddttblwtetprintRow((pdswtetprintDataSet.ttblwtetprintRow)ttblwtetprintRow);
          
         
         NLogLoggerP.Trace("WTETPrintRun - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETPrintRun(ref pdsContext,  pdsprintersettings, ref pdswtetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETPrintRun - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         if (pdswtetprint.ttblwtetprint.Count > 0) 
         { 
             result = Wtetprint.BuildWtetprintFromRow(pdswtetprint.ttblwtetprint[0]);
         } 
              
          
         return result;
          
      }

      public Wtetcopy WTETCopyInitialize()
      {   
         var result = new Wtetcopy();
         
         var pdswtetcopy = new pdswtetcopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETCopyInitialize - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETCopyInitialize(ref pdsContext, out pdswtetcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETCopyInitialize - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtetcopy); 
    
         if (pdswtetcopy.ttblwtetcopy.Count > 0) 
         { 
             result = Wtetcopy.BuildWtetcopyFromRow(pdswtetcopy.ttblwtetcopy[0]);
         } 
              
          
         return result;
          
      }

      public AswtheaderWTETCopyContinueResponseAPI WTETCopyContinue(Wtetcopy wtetcopy)
      {   
         var result = new AswtheaderWTETCopyContinueResponseAPI();
         
         var pdswtetcopy = new pdswtetcopyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtetcopyCriteria = pdswtetcopy.ttblwtetcopy.NewttblwtetcopyRow();
         Wtetcopy.UpdateRowFromWtetcopy(ref ttblwtetcopyCriteria, wtetcopy);
         pdswtetcopy.ttblwtetcopy.AddttblwtetcopyRow((pdswtetcopyDataSet.ttblwtetcopyRow)ttblwtetcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETCopyContinue - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTETCopyContinue(ref pdsContext, ref pdswtetcopy, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETCopyContinue - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtetcopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtetcopy.ttblwtetcopy.Count > 0)
         {
            result.wtetcopy = Wtetcopy.BuildWtetcopyFromRow(pdswtetcopy.ttblwtetcopy[0]);
         }
                    
          
         return result;
          
      }

      public AswtheaderWTImportLoadResponseAPI WTImportLoad(AswtheaderWTImportLoadRequestAPI AswtheaderWTImportLoadRequestAPI)
      {   
         var result = new AswtheaderWTImportLoadResponseAPI();
         
         var pdswtimportfile = new pdswtimportfileDataSet();
            
         var pdswtimportdata = new pdswtimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtheaderWTImportLoadRequestAPI.wtimportfile)
         {
            DataRow ttblwtimportfileRow = pdswtimportfile.ttblwtimportfile.NewttblwtimportfileRow();
            Wtimportfile.UpdateRowFromWtimportfile(ref ttblwtimportfileRow, obj);
            pdswtimportfile.ttblwtimportfile.AddttblwtimportfileRow((pdswtimportfileDataSet.ttblwtimportfileRow)ttblwtimportfileRow);
         }
          
         var  iMaxLines = AswtheaderWTImportLoadRequestAPI.iMaxLines;
            
         
         NLogLoggerP.Trace("WTImportLoad - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTImportLoad(ref pdsContext,  iMaxLines,  pdswtimportfile, out pdswtimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTImportLoad - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtimportfile); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswtimportdata.ttblwtimportdata)
         {
            result.wtimportdata.Add(Wtimportdata.BuildWtimportdataFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> WTImportUpdate(AswtheaderWTImportUpdateRequestAPI AswtheaderWTImportUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdswtimportdata = new pdswtimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtheaderWTImportUpdateRequestAPI.wtimportdata)
         {
            DataRow ttblwtimportdataRow = pdswtimportdata.ttblwtimportdata.NewttblwtimportdataRow();
            Wtimportdata.UpdateRowFromWtimportdata(ref ttblwtimportdataRow, obj);
            pdswtimportdata.ttblwtimportdata.AddttblwtimportdataRow((pdswtimportdataDataSet.ttblwtimportdataRow)ttblwtimportdataRow);
         }
          
         var  iOrderNo = AswtheaderWTImportUpdateRequestAPI.iOrderNo;
            
         var  cOrderBreak = AswtheaderWTImportUpdateRequestAPI.cOrderBreak;
            
         
         NLogLoggerP.Trace("WTImportUpdate - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTImportUpdate(ref pdsContext,  iOrderNo,  cOrderBreak,  pdswtimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTImportUpdate - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtimportdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtheaderWTImportValidateResponseAPI WTImportValidate(IEnumerable<Wtimportdata> wtimportdata)
      {   
         var result = new AswtheaderWTImportValidateResponseAPI();
         
         var pdswtimportdata = new pdswtimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in wtimportdata)
         {
             DataRow row = pdswtimportdata.ttblwtimportdata.NewttblwtimportdataRow();
             Wtimportdata.UpdateRowFromWtimportdata(ref row, obj);
             pdswtimportdata.ttblwtimportdata.AddttblwtimportdataRow((pdswtimportdataDataSet.ttblwtimportdataRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTImportValidate - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTImportValidate(ref pdsContext, ref pdswtimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTImportValidate - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtimportdata); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswtimportdata.ttblwtimportdata)
         {
            result.wtimportdata.Add(Wtimportdata.BuildWtimportdataFromRow(row));
         }     
          
         return result;
          
      }

      public void WTRecalcAddons(int pvWtno, int pvWtsuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRecalcAddons - Aswtheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtheaderproxy = this.proxyAppObject.CreatePO_aswtheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtheaderproxy.WTRecalcAddons(ref pdsContext,  pvWtno,  pvWtsuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRecalcAddons - Aswtheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  