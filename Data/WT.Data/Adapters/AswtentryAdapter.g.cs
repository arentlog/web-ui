//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WT.Data.Adapters
{
   using com.infor.sxproxy.wtproxy;
   using com.infor.sxproxy.wtproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdswtrrarreptlist;
   using Models.Pdswtrrarreptheader;
   using Models.Pdswtrrarreptdelete;
   using Models.Pdswtrrarreptupdate;
   using Models.Pdswtrrarreptaddnew;
   using Models.Pdswtrrarreptadjmerge;
   using Models.Pdswtrrarreptnewreptrun;
   using Models.Pdsprintersettings;
   using Models.Pdswtrrarreptmergerun;
   using Models.Pdsmessaging;
   using Models.Pdswtrrarlinedspl;
   using Models.Pdswtrrarlinetotals;
   using Models.Pdswtrrarlinechange;
   using Models.Pdswtrrarlineaccept;
   using Models.Pdswtrrarlineextend;
   using Models.Pdswtrrarlineadd;
   using Models.Pdswtesbuildwtlist;
   using Models.Pdswtesdetailline;
   using Models.Pdswtesshiptransfer;
   using Models.Pdswthdr;
   using Models.Pdswtesfinalupdate;
   using Models.Pdswteiselectwt;
   using Models.Pdswteicancelreceipt;
   using Models.Pdswteidetailbanner;
   using Models.Pdswteitransferlist;
   using Models.Pdswteiupdate;
   using Models.Pdswteilinelist;
   using Models.Pdswteilineserlotchanges;
   using Models.Pdswteilineupdate;
   using Models.Pdswteslineserlotchanges;
   using Models.Pdswteedetaillogoff;
   using Models.Complex;

   public partial class AswtentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private WTProxyAppObject proxyAppObject;
      
      public AswtentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswtentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AswtentryWTRRARReportListResponseAPI WTRRARReportList(Wtrrarreptlistcriteria wtrrarreptlistcriteria)
      {   
         var result = new AswtentryWTRRARReportListResponseAPI();
         
         var pdswtrrarreptlist = new pdswtrrarreptlistDataSet();
            
         DataRow ttblwtrrarreptlistcriteriaCriteria = pdswtrrarreptlist.ttblwtrrarreptlistcriteria.NewttblwtrrarreptlistcriteriaRow();
         Wtrrarreptlistcriteria.UpdateRowFromWtrrarreptlistcriteria(ref ttblwtrrarreptlistcriteriaCriteria, wtrrarreptlistcriteria);
         pdswtrrarreptlist.ttblwtrrarreptlistcriteria.AddttblwtrrarreptlistcriteriaRow((pdswtrrarreptlistDataSet.ttblwtrrarreptlistcriteriaRow)ttblwtrrarreptlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTRRARReportList - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportList(ref pdsContext, ref pdswtrrarreptlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTRRARReportList - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptlist); 
    
         foreach (DataRow row in pdswtrrarreptlist.ttblwtrrarreptlistresults)
         {
            result.wtrrarreptlistresults.Add(Wtrrarreptlistresults.BuildWtrrarreptlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Wtrrarreptheader WTRRARReportHeaderRetrieve(int iReportNo)
      {   
         var result = new Wtrrarreptheader();
         
         var pdswtrrarreptheader = new pdswtrrarreptheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportHeaderRetrieve - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportHeaderRetrieve(ref pdsContext,  iReportNo, out pdswtrrarreptheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportHeaderRetrieve - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptheader); 
    
         if (pdswtrrarreptheader.ttblwtrrarreptheader.Count > 0) 
         { 
             result = Wtrrarreptheader.BuildWtrrarreptheaderFromRow(pdswtrrarreptheader.ttblwtrrarreptheader[0]);
         } 
              
          
         return result;
          
      }

      public void WTRRARReportDelete(IEnumerable<Wtrrarreptdeleterepts> wtrrarreptdeleterepts)
      {   
         
         var pdswtrrarreptdelete = new pdswtrrarreptdeleteDataSet();
            
         foreach (var obj in wtrrarreptdeleterepts)
         {
             DataRow row = pdswtrrarreptdelete.ttblwtrrarreptdeleterepts.NewttblwtrrarreptdeletereptsRow();
             Wtrrarreptdeleterepts.UpdateRowFromWtrrarreptdeleterepts(ref row, obj);
             pdswtrrarreptdelete.ttblwtrrarreptdeleterepts.AddttblwtrrarreptdeletereptsRow((pdswtrrarreptdeleteDataSet.ttblwtrrarreptdeletereptsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportDelete - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportDelete(ref pdsContext, ref pdswtrrarreptdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportDelete - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptdelete);
      }

      public void WTRRARReportUpdate(Wtrrarreptupdatesingle wtrrarreptupdatesingle)
      {   
         
         var pdswtrrarreptupdate = new pdswtrrarreptupdateDataSet();
            
         DataRow ttblwtrrarreptupdatesingleCriteria = pdswtrrarreptupdate.ttblwtrrarreptupdatesingle.NewttblwtrrarreptupdatesingleRow();
         Wtrrarreptupdatesingle.UpdateRowFromWtrrarreptupdatesingle(ref ttblwtrrarreptupdatesingleCriteria, wtrrarreptupdatesingle);
         pdswtrrarreptupdate.ttblwtrrarreptupdatesingle.AddttblwtrrarreptupdatesingleRow((pdswtrrarreptupdateDataSet.ttblwtrrarreptupdatesingleRow)ttblwtrrarreptupdatesingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportUpdate(ref pdsContext, ref pdswtrrarreptupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptupdate);
      }

      public Wtrrarreptaddnew WTRRARReportAddNew(Wtrrarreptaddnew wtrrarreptaddnew)
      {   
         var result = new Wtrrarreptaddnew();
         
         var pdswtrrarreptaddnew = new pdswtrrarreptaddnewDataSet();
            
         DataRow ttblwtrrarreptaddnewCriteria = pdswtrrarreptaddnew.ttblwtrrarreptaddnew.NewttblwtrrarreptaddnewRow();
         Wtrrarreptaddnew.UpdateRowFromWtrrarreptaddnew(ref ttblwtrrarreptaddnewCriteria, wtrrarreptaddnew);
         pdswtrrarreptaddnew.ttblwtrrarreptaddnew.AddttblwtrrarreptaddnewRow((pdswtrrarreptaddnewDataSet.ttblwtrrarreptaddnewRow)ttblwtrrarreptaddnewCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportAddNew - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportAddNew(ref pdsContext, ref pdswtrrarreptaddnew, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportAddNew - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptaddnew); 
    
         if (pdswtrrarreptaddnew.ttblwtrrarreptaddnew.Count > 0) 
         { 
             result = Wtrrarreptaddnew.BuildWtrrarreptaddnewFromRow(pdswtrrarreptaddnew.ttblwtrrarreptaddnew[0]);
         } 
              
          
         return result;
          
      }

      public void WTRRARReportAdjustMerge(IEnumerable<Wtrrarreptadjmergerepts> wtrrarreptadjmergerepts)
      {   
         
         var pdswtrrarreptadjmerge = new pdswtrrarreptadjmergeDataSet();
            
         foreach (var obj in wtrrarreptadjmergerepts)
         {
             DataRow row = pdswtrrarreptadjmerge.ttblwtrrarreptadjmergerepts.NewttblwtrrarreptadjmergereptsRow();
             Wtrrarreptadjmergerepts.UpdateRowFromWtrrarreptadjmergerepts(ref row, obj);
             pdswtrrarreptadjmerge.ttblwtrrarreptadjmergerepts.AddttblwtrrarreptadjmergereptsRow((pdswtrrarreptadjmergeDataSet.ttblwtrrarreptadjmergereptsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportAdjustMerge - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportAdjustMerge(ref pdsContext, ref pdswtrrarreptadjmerge, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportAdjustMerge - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptadjmerge);
      }

      public void WTRRARReportNewReptRun(AswtentryWTRRARReportNewReptRunRequestAPI AswtentryWTRRARReportNewReptRunRequestAPI)
      {   
         
         var pdswtrrarreptnewreptrun = new pdswtrrarreptnewreptrunDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AswtentryWTRRARReportNewReptRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         DataRow ttblwtrrarreptnewreptrunRow = pdswtrrarreptnewreptrun.ttblwtrrarreptnewreptrun.NewttblwtrrarreptnewreptrunRow();
         Wtrrarreptnewreptrun.UpdateRowFromWtrrarreptnewreptrun(ref ttblwtrrarreptnewreptrunRow, AswtentryWTRRARReportNewReptRunRequestAPI.wtrrarreptnewreptrun);
         pdswtrrarreptnewreptrun.ttblwtrrarreptnewreptrun.AddttblwtrrarreptnewreptrunRow((pdswtrrarreptnewreptrunDataSet.ttblwtrrarreptnewreptrunRow)ttblwtrrarreptnewreptrunRow);
          
         
         NLogLoggerP.Trace("WTRRARReportNewReptRun - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportNewReptRun(ref pdsContext, ref pdswtrrarreptnewreptrun,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportNewReptRun - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptnewreptrun);
      }

      public void WTRRARReportMergeRun(AswtentryWTRRARReportMergeRunRequestAPI AswtentryWTRRARReportMergeRunRequestAPI)
      {   
         
         var pdswtrrarreptmergerun = new pdswtrrarreptmergerunDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTRRARReportMergeRunRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         foreach (var obj in AswtentryWTRRARReportMergeRunRequestAPI.wtrrarreptmergerunrepts)
         {
            DataRow ttblwtrrarreptmergerunreptsRow = pdswtrrarreptmergerun.ttblwtrrarreptmergerunrepts.NewttblwtrrarreptmergerunreptsRow();
            Wtrrarreptmergerunrepts.UpdateRowFromWtrrarreptmergerunrepts(ref ttblwtrrarreptmergerunreptsRow, obj);
            pdswtrrarreptmergerun.ttblwtrrarreptmergerunrepts.AddttblwtrrarreptmergerunreptsRow((pdswtrrarreptmergerunDataSet.ttblwtrrarreptmergerunreptsRow)ttblwtrrarreptmergerunreptsRow);
         }
          
         DataRow ttblwtrrarreptmergerunsnglRow = pdswtrrarreptmergerun.ttblwtrrarreptmergerunsngl.NewttblwtrrarreptmergerunsnglRow();
         Wtrrarreptmergerunsngl.UpdateRowFromWtrrarreptmergerunsngl(ref ttblwtrrarreptmergerunsnglRow, AswtentryWTRRARReportMergeRunRequestAPI.wtrrarreptmergerunsngl);
         pdswtrrarreptmergerun.ttblwtrrarreptmergerunsngl.AddttblwtrrarreptmergerunsnglRow((pdswtrrarreptmergerunDataSet.ttblwtrrarreptmergerunsnglRow)ttblwtrrarreptmergerunsnglRow);
          
         
         NLogLoggerP.Trace("WTRRARReportMergeRun - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportMergeRun(ref pdsContext,  pdswtrrarreptmergerun,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportMergeRun - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptmergerun);
      }

      public IEnumerable<Messaging> WTRRARReportHeaderUpdate(Wtrrarreptheader wtrrarreptheader)
      {   
         var results = new List<Messaging>();
         
         var pdswtrrarreptheader = new pdswtrrarreptheaderDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtrrarreptheaderCriteria = pdswtrrarreptheader.ttblwtrrarreptheader.NewttblwtrrarreptheaderRow();
         Wtrrarreptheader.UpdateRowFromWtrrarreptheader(ref ttblwtrrarreptheaderCriteria, wtrrarreptheader);
         pdswtrrarreptheader.ttblwtrrarreptheader.AddttblwtrrarreptheaderRow((pdswtrrarreptheaderDataSet.ttblwtrrarreptheaderRow)ttblwtrrarreptheaderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportHeaderUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportHeaderUpdate(ref pdsContext, ref pdswtrrarreptheader, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportHeaderUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarreptheader); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtentryWTRRARLineDisplayResponseAPI WTRRARLineDisplay(int iReportNo)
      {   
         var result = new AswtentryWTRRARLineDisplayResponseAPI();
         
         var pdswtrrarlinedspl = new pdswtrrarlinedsplDataSet();
            
         var pdswtrrarlinetotals = new pdswtrrarlinetotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARLineDisplay - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineDisplay(ref pdsContext,  iReportNo, out pdswtrrarlinedspl, out pdswtrrarlinetotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineDisplay - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlinedspl); 
    
         foreach (DataRow row in pdswtrrarlinedspl.ttblwtrrarlinedsplline)
         {
            result.wtrrarlinedsplline.Add(Wtrrarlinedsplline.BuildWtrrarlinedspllineFromRow(row));
         }     
         if (pdswtrrarlinetotals.ttblwtrrarlinetotals.Count > 0)
         {
            result.wtrrarlinetotals = Wtrrarlinetotals.BuildWtrrarlinetotalsFromRow(pdswtrrarlinetotals.ttblwtrrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AswtentryWTRRARLineChangeResponseAPI WTRRARLineChange(Wtrrarlinechange wtrrarlinechange)
      {   
         var result = new AswtentryWTRRARLineChangeResponseAPI();
         
         var pdswtrrarlinechange = new pdswtrrarlinechangeDataSet();
            
         var pdswtrrarlinetotals = new pdswtrrarlinetotalsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtrrarlinechangeCriteria = pdswtrrarlinechange.ttblwtrrarlinechange.NewttblwtrrarlinechangeRow();
         Wtrrarlinechange.UpdateRowFromWtrrarlinechange(ref ttblwtrrarlinechangeCriteria, wtrrarlinechange);
         pdswtrrarlinechange.ttblwtrrarlinechange.AddttblwtrrarlinechangeRow((pdswtrrarlinechangeDataSet.ttblwtrrarlinechangeRow)ttblwtrrarlinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARLineChange - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineChange(ref pdsContext, ref pdswtrrarlinechange, out pdswtrrarlinetotals, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineChange - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlinechange); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtrrarlinetotals.ttblwtrrarlinetotals.Count > 0)
         {
            result.wtrrarlinetotals = Wtrrarlinetotals.BuildWtrrarlinetotalsFromRow(pdswtrrarlinetotals.ttblwtrrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AswtentryWTRRARLineAcceptResponseAPI WTRRARLineAccept(AswtentryWTRRARLineAcceptRequestAPI AswtentryWTRRARLineAcceptRequestAPI)
      {   
         var result = new AswtentryWTRRARLineAcceptResponseAPI();
         
         var pdswtrrarlineaccept = new pdswtrrarlineacceptDataSet();
            
         var pdswtrrarlinetotals = new pdswtrrarlinetotalsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTRRARLineAcceptRequestAPI.wtrrarlineaccept)
         {
            DataRow ttblwtrrarlineacceptRow = pdswtrrarlineaccept.ttblwtrrarlineaccept.NewttblwtrrarlineacceptRow();
            Wtrrarlineaccept.UpdateRowFromWtrrarlineaccept(ref ttblwtrrarlineacceptRow, obj);
            pdswtrrarlineaccept.ttblwtrrarlineaccept.AddttblwtrrarlineacceptRow((pdswtrrarlineacceptDataSet.ttblwtrrarlineacceptRow)ttblwtrrarlineacceptRow);
         }
          
         var  cAcceptType = AswtentryWTRRARLineAcceptRequestAPI.cAcceptType;
            
         
         NLogLoggerP.Trace("WTRRARLineAccept - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineAccept(ref pdsContext,  cAcceptType, ref pdswtrrarlineaccept, out pdswtrrarlinetotals, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineAccept - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlineaccept); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtrrarlinetotals.ttblwtrrarlinetotals.Count > 0)
         {
            result.wtrrarlinetotals = Wtrrarlinetotals.BuildWtrrarlinetotalsFromRow(pdswtrrarlinetotals.ttblwtrrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public Wtrrarlineextend WTRRARLineExtendRetrieve(Wtrrarlineextend wtrrarlineextend)
      {   
         var result = new Wtrrarlineextend();
         
         var pdswtrrarlineextend = new pdswtrrarlineextendDataSet();
            
         DataRow ttblwtrrarlineextendCriteria = pdswtrrarlineextend.ttblwtrrarlineextend.NewttblwtrrarlineextendRow();
         Wtrrarlineextend.UpdateRowFromWtrrarlineextend(ref ttblwtrrarlineextendCriteria, wtrrarlineextend);
         pdswtrrarlineextend.ttblwtrrarlineextend.AddttblwtrrarlineextendRow((pdswtrrarlineextendDataSet.ttblwtrrarlineextendRow)ttblwtrrarlineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARLineExtendRetrieve - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineExtendRetrieve(ref pdsContext, ref pdswtrrarlineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineExtendRetrieve - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlineextend); 
    
         if (pdswtrrarlineextend.ttblwtrrarlineextend.Count > 0) 
         { 
             result = Wtrrarlineextend.BuildWtrrarlineextendFromRow(pdswtrrarlineextend.ttblwtrrarlineextend[0]);
         } 
              
          
         return result;
          
      }

      public Wtrrarlineextend WTRRARLineExtendUpdate(Wtrrarlineextend wtrrarlineextend)
      {   
         var result = new Wtrrarlineextend();
         
         var pdswtrrarlineextend = new pdswtrrarlineextendDataSet();
            
         DataRow ttblwtrrarlineextendCriteria = pdswtrrarlineextend.ttblwtrrarlineextend.NewttblwtrrarlineextendRow();
         Wtrrarlineextend.UpdateRowFromWtrrarlineextend(ref ttblwtrrarlineextendCriteria, wtrrarlineextend);
         pdswtrrarlineextend.ttblwtrrarlineextend.AddttblwtrrarlineextendRow((pdswtrrarlineextendDataSet.ttblwtrrarlineextendRow)ttblwtrrarlineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARLineExtendUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineExtendUpdate(ref pdsContext, ref pdswtrrarlineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineExtendUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlineextend); 
    
         if (pdswtrrarlineextend.ttblwtrrarlineextend.Count > 0) 
         { 
             result = Wtrrarlineextend.BuildWtrrarlineextendFromRow(pdswtrrarlineextend.ttblwtrrarlineextend[0]);
         } 
              
          
         return result;
          
      }

      public string WTRRARReportCheckDrilldownAccess(int iReportNo)
      {   
          
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARReportCheckDrilldownAccess - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARReportCheckDrilldownAccess(ref pdsContext,  iReportNo, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARReportCheckDrilldownAccess - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public AswtentryWTRRARLineAddLeaveFieldResponseAPI WTRRARLineAddLeaveField(AswtentryWTRRARLineAddLeaveFieldRequestAPI AswtentryWTRRARLineAddLeaveFieldRequestAPI)
      {   
         var result = new AswtentryWTRRARLineAddLeaveFieldResponseAPI();
         
         var pdswtrrarlineadd = new pdswtrrarlineaddDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtrrarlineaddRow = pdswtrrarlineadd.ttblwtrrarlineadd.NewttblwtrrarlineaddRow();
         Wtrrarlineadd.UpdateRowFromWtrrarlineadd(ref ttblwtrrarlineaddRow, AswtentryWTRRARLineAddLeaveFieldRequestAPI.wtrrarlineadd);
         pdswtrrarlineadd.ttblwtrrarlineadd.AddttblwtrrarlineaddRow((pdswtrrarlineaddDataSet.ttblwtrrarlineaddRow)ttblwtrrarlineaddRow);
          
         var  cFieldName = AswtentryWTRRARLineAddLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("WTRRARLineAddLeaveField - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineAddLeaveField(ref pdsContext,  cFieldName, ref pdswtrrarlineadd, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineAddLeaveField - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlineadd); 
    
         if (pdswtrrarlineadd.ttblwtrrarlineadd.Count > 0)
         {
            result.wtrrarlineadd = Wtrrarlineadd.BuildWtrrarlineaddFromRow(pdswtrrarlineadd.ttblwtrrarlineadd[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AswtentryWTRRARLineAddCreateResponseAPI WTRRARLineAddCreate(Wtrrarlineadd wtrrarlineadd)
      {   
         var result = new AswtentryWTRRARLineAddCreateResponseAPI();
         
         var pdswtrrarlineadd = new pdswtrrarlineaddDataSet();
            
         var pdswtrrarlinetotals = new pdswtrrarlinetotalsDataSet();
            
         var pdswtrrarlinedspl = new pdswtrrarlinedsplDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtrrarlineaddCriteria = pdswtrrarlineadd.ttblwtrrarlineadd.NewttblwtrrarlineaddRow();
         Wtrrarlineadd.UpdateRowFromWtrrarlineadd(ref ttblwtrrarlineaddCriteria, wtrrarlineadd);
         pdswtrrarlineadd.ttblwtrrarlineadd.AddttblwtrrarlineaddRow((pdswtrrarlineaddDataSet.ttblwtrrarlineaddRow)ttblwtrrarlineaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTRRARLineAddCreate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTRRARLineAddCreate(ref pdsContext, ref pdswtrrarlineadd, out pdswtrrarlinetotals, out pdswtrrarlinedspl, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTRRARLineAddCreate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtrrarlineadd); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtrrarlineadd.ttblwtrrarlineadd.Count > 0)
         {
            result.wtrrarlineadd = Wtrrarlineadd.BuildWtrrarlineaddFromRow(pdswtrrarlineadd.ttblwtrrarlineadd[0]);
         }
                    
         if (pdswtrrarlinedspl.ttblwtrrarlinedsplline.Count > 0)
         {
            result.wtrrarlinedsplline = Wtrrarlinedsplline.BuildWtrrarlinedspllineFromRow(pdswtrrarlinedspl.ttblwtrrarlinedsplline[0]);
         }
                    
         if (pdswtrrarlinetotals.ttblwtrrarlinetotals.Count > 0)
         {
            result.wtrrarlinetotals = Wtrrarlinetotals.BuildWtrrarlinetotalsFromRow(pdswtrrarlinetotals.ttblwtrrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AswtentryWTESBuildWTListResponseAPI WTESBuildWTList(Wtesbuildwtlistcriteria wtesbuildwtlistcriteria)
      {   
         var result = new AswtentryWTESBuildWTListResponseAPI();
         
         var pdswtesbuildwtlist = new pdswtesbuildwtlistDataSet();
            
         DataRow ttblwtesbuildwtlistcriteriaCriteria = pdswtesbuildwtlist.ttblwtesbuildwtlistcriteria.NewttblwtesbuildwtlistcriteriaRow();
         Wtesbuildwtlistcriteria.UpdateRowFromWtesbuildwtlistcriteria(ref ttblwtesbuildwtlistcriteriaCriteria, wtesbuildwtlistcriteria);
         pdswtesbuildwtlist.ttblwtesbuildwtlistcriteria.AddttblwtesbuildwtlistcriteriaRow((pdswtesbuildwtlistDataSet.ttblwtesbuildwtlistcriteriaRow)ttblwtesbuildwtlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTESBuildWTList - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESBuildWTList(ref pdsContext, ref pdswtesbuildwtlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTESBuildWTList - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesbuildwtlist); 
    
         foreach (DataRow row in pdswtesbuildwtlist.ttblwtesbuildwtlistresults)
         {
            result.wtesbuildwtlistresults.Add(Wtesbuildwtlistresults.BuildWtesbuildwtlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Wtesdetailline> WTESBuildWTLineList(int pvJournalno, int pvWtno, int pvWtsuf)
      {   
         var results = new List<Wtesdetailline>();
         
         var pdswtesdetailline = new pdswtesdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTESBuildWTLineList - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESBuildWTLineList(ref pdsContext,  pvJournalno,  pvWtno,  pvWtsuf, out pdswtesdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESBuildWTLineList - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesdetailline); 
    
            foreach (DataRow row in pdswtesdetailline.ttblwtesdetailline)
            {
                results.Add(Wtesdetailline.BuildWtesdetaillineFromRow(row));
            }
            return results;
        
      }

      public AswtentryWTESCancelShipResponseAPI WTESCancelShip(AswtentryWTESCancelShipRequestAPI AswtentryWTESCancelShipRequestAPI)
      {   
         var result = new AswtentryWTESCancelShipResponseAPI();
         
         var pdswtesshiptransfer = new pdswtesshiptransferDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTESCancelShipRequestAPI.wtesautorcv)
         {
            DataRow ttblwtesautorcvRow = pdswtesshiptransfer.ttblwtesautorcv.NewttblwtesautorcvRow();
            Wtesautorcv.UpdateRowFromWtesautorcv(ref ttblwtesautorcvRow, obj);
            pdswtesshiptransfer.ttblwtesautorcv.AddttblwtesautorcvRow((pdswtesshiptransferDataSet.ttblwtesautorcvRow)ttblwtesautorcvRow);
         }
          
         foreach (var obj in AswtentryWTESCancelShipRequestAPI.wtesshiptransfer)
         {
            DataRow ttblwtesshiptransferRow = pdswtesshiptransfer.ttblwtesshiptransfer.NewttblwtesshiptransferRow();
            Wtesshiptransfer.UpdateRowFromWtesshiptransfer(ref ttblwtesshiptransferRow, obj);
            pdswtesshiptransfer.ttblwtesshiptransfer.AddttblwtesshiptransferRow((pdswtesshiptransferDataSet.ttblwtesshiptransferRow)ttblwtesshiptransferRow);
         }
          
         
         NLogLoggerP.Trace("WTESCancelShip - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESCancelShip(ref pdsContext, ref pdswtesshiptransfer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESCancelShip - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesshiptransfer); 
    
         foreach (DataRow row in pdswtesshiptransfer.ttblwtesautorcv)
         {
            result.wtesautorcv.Add(Wtesautorcv.BuildWtesautorcvFromRow(row));
         }     
         foreach (DataRow row in pdswtesshiptransfer.ttblwtesshiptransfer)
         {
            result.wtesshiptransfer.Add(Wtesshiptransfer.BuildWtesshiptransferFromRow(row));
         }     
          
         return result;
          
      }

      public Wthdr WTESHeaderRetrieve(int pvWtno, int pvWtsuf)
      {   
         var result = new Wthdr();
         
         var pdswthdr = new pdswthdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTESHeaderRetrieve - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESHeaderRetrieve(ref pdsContext,  pvWtno,  pvWtsuf, out pdswthdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESHeaderRetrieve - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswthdr); 
    
         if (pdswthdr.ttblwthdr.Count > 0) 
         { 
             result = Wthdr.BuildWthdrFromRow(pdswthdr.ttblwthdr[0]);
         } 
              
          
         return result;
          
      }

      public AswtentryWTESHeaderUpdateResponseAPI WTESHeaderUpdate(AswtentryWTESHeaderUpdateRequestAPI AswtentryWTESHeaderUpdateRequestAPI)
      {   
         var result = new AswtentryWTESHeaderUpdateResponseAPI();
         
         var pdswthdr = new pdswthdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwthdrRow = pdswthdr.ttblwthdr.NewttblwthdrRow();
         Wthdr.UpdateRowFromWthdr(ref ttblwthdrRow, AswtentryWTESHeaderUpdateRequestAPI.wthdr);
         pdswthdr.ttblwthdr.AddttblwthdrRow((pdswthdrDataSet.ttblwthdrRow)ttblwthdrRow);
          
         var  cFunctionName = AswtentryWTESHeaderUpdateRequestAPI.cFunctionName;
            
         
         NLogLoggerP.Trace("WTESHeaderUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESHeaderUpdate(ref pdsContext,  cFunctionName, ref pdswthdr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESHeaderUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswthdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswthdr.ttblwthdr.Count > 0)
         {
            result.wthdr = Wthdr.BuildWthdrFromRow(pdswthdr.ttblwthdr[0]);
         }
                    
          
         return result;
          
      }

      public AswtentryWTESShipTransferResponseAPI WTESShipTransfer(AswtentryWTESShipTransferRequestAPI AswtentryWTESShipTransferRequestAPI)
      {   
         var result = new AswtentryWTESShipTransferResponseAPI();
         
         var pdswtesshiptransfer = new pdswtesshiptransferDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTESShipTransferRequestAPI.wtesautorcv)
         {
            DataRow ttblwtesautorcvRow = pdswtesshiptransfer.ttblwtesautorcv.NewttblwtesautorcvRow();
            Wtesautorcv.UpdateRowFromWtesautorcv(ref ttblwtesautorcvRow, obj);
            pdswtesshiptransfer.ttblwtesautorcv.AddttblwtesautorcvRow((pdswtesshiptransferDataSet.ttblwtesautorcvRow)ttblwtesautorcvRow);
         }
          
         foreach (var obj in AswtentryWTESShipTransferRequestAPI.wtesshiptransfer)
         {
            DataRow ttblwtesshiptransferRow = pdswtesshiptransfer.ttblwtesshiptransfer.NewttblwtesshiptransferRow();
            Wtesshiptransfer.UpdateRowFromWtesshiptransfer(ref ttblwtesshiptransferRow, obj);
            pdswtesshiptransfer.ttblwtesshiptransfer.AddttblwtesshiptransferRow((pdswtesshiptransferDataSet.ttblwtesshiptransferRow)ttblwtesshiptransferRow);
         }
          
         
         NLogLoggerP.Trace("WTESShipTransfer - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESShipTransfer(ref pdsContext, ref pdswtesshiptransfer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESShipTransfer - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesshiptransfer); 
    
         foreach (DataRow row in pdswtesshiptransfer.ttblwtesautorcv)
         {
            result.wtesautorcv.Add(Wtesautorcv.BuildWtesautorcvFromRow(row));
         }     
         foreach (DataRow row in pdswtesshiptransfer.ttblwtesshiptransfer)
         {
            result.wtesshiptransfer.Add(Wtesshiptransfer.BuildWtesshiptransferFromRow(row));
         }     
          
         return result;
          
      }

      public AswtentryWTESLineUpdateResponseAPI WTESLineUpdate(AswtentryWTESLineUpdateRequestAPI AswtentryWTESLineUpdateRequestAPI)
      {   
         var result = new AswtentryWTESLineUpdateResponseAPI();
         
         var pdswtesdetailline = new pdswtesdetaillineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lSelectNextRow = false;
         bool lSelectPrevRow = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTESLineUpdateRequestAPI.wtesdetailline)
         {
            DataRow ttblwtesdetaillineRow = pdswtesdetailline.ttblwtesdetailline.NewttblwtesdetaillineRow();
            Wtesdetailline.UpdateRowFromWtesdetailline(ref ttblwtesdetaillineRow, obj);
            pdswtesdetailline.ttblwtesdetailline.AddttblwtesdetaillineRow((pdswtesdetaillineDataSet.ttblwtesdetaillineRow)ttblwtesdetaillineRow);
         }
          
         var  iLineNo = AswtentryWTESLineUpdateRequestAPI.iLineNo;
            
         var  dNewQtyShip = AswtentryWTESLineUpdateRequestAPI.dNewQtyShip;
            
         var  lNewBoFL = AswtentryWTESLineUpdateRequestAPI.lNewBoFL;
            
         var  lPromptsPresented = AswtentryWTESLineUpdateRequestAPI.lPromptsPresented;
            
         var  lReqCountFl = AswtentryWTESLineUpdateRequestAPI.lReqCountFl;
            
         
         NLogLoggerP.Trace("WTESLineUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESLineUpdate(ref pdsContext,  iLineNo,  dNewQtyShip,  lNewBoFL,  lPromptsPresented,  lReqCountFl, ref pdswtesdetailline, out lSelectNextRow, out lSelectPrevRow, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESLineUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesdetailline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswtesdetailline.ttblwtesdetailline)
         {
            result.wtesdetailline.Add(Wtesdetailline.BuildWtesdetaillineFromRow(row));
         }     
         result.lSelectNextRow = lSelectNextRow;
         result.lSelectPrevRow = lSelectPrevRow;
          
         return result;
          
      }

      public AswtentryWTESFinalUpdateResponseAPI WTESFinalUpdate(int iJournalno)
      {   
         var result = new AswtentryWTESFinalUpdateResponseAPI();
         
         var pdswtesfinalupdate = new pdswtesfinalupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTESFinalUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESFinalUpdate(ref pdsContext,  iJournalno, out pdswtesfinalupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESFinalUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesfinalupdate); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtesfinalupdate.ttblwtesfinalupdate.Count > 0)
         {
            result.wtesfinalupdate = Wtesfinalupdate.BuildWtesfinalupdateFromRow(pdswtesfinalupdate.ttblwtesfinalupdate[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> WTESDetailLogOff(int iWTno, int iWTsuf, int iJrnlNo)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTESDetailLogOff - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESDetailLogOff(ref pdsContext,  iWTno,  iWTsuf,  iJrnlNo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESDetailLogOff - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Wteiselectwt WTEIAllowDetailAccess(Wteiselectwt wteiselectwt)
      {   
         var result = new Wteiselectwt();
         
         var pdswteiselectwt = new pdswteiselectwtDataSet();
            
         DataRow ttblwteiselectwtCriteria = pdswteiselectwt.ttblwteiselectwt.NewttblwteiselectwtRow();
         Wteiselectwt.UpdateRowFromWteiselectwt(ref ttblwteiselectwtCriteria, wteiselectwt);
         pdswteiselectwt.ttblwteiselectwt.AddttblwteiselectwtRow((pdswteiselectwtDataSet.ttblwteiselectwtRow)ttblwteiselectwtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIAllowDetailAccess - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIAllowDetailAccess(ref pdsContext, ref pdswteiselectwt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIAllowDetailAccess - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteiselectwt); 
    
         if (pdswteiselectwt.ttblwteiselectwt.Count > 0) 
         { 
             result = Wteiselectwt.BuildWteiselectwtFromRow(pdswteiselectwt.ttblwteiselectwt[0]);
         } 
              
          
         return result;
          
      }

      public Wteiselectwt WTEICheckAccess(int iWTno, int iWTsuf)
      {   
         var result = new Wteiselectwt();
         
         var pdswteiselectwt = new pdswteiselectwtDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEICheckAccess - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEICheckAccess(ref pdsContext,  iWTno,  iWTsuf, out pdswteiselectwt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEICheckAccess - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteiselectwt); 
    
         if (pdswteiselectwt.ttblwteiselectwt.Count > 0) 
         { 
             result = Wteiselectwt.BuildWteiselectwtFromRow(pdswteiselectwt.ttblwteiselectwt[0]);
         } 
              
          
         return result;
          
      }

      public AswtentryWTEICancelReceiptResponseAPI WTEICancelReceipt(AswtentryWTEICancelReceiptRequestAPI AswtentryWTEICancelReceiptRequestAPI)
      {   
         var result = new AswtentryWTEICancelReceiptResponseAPI();
         
         var pdswteicancelreceipt = new pdswteicancelreceiptDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtentryWTEICancelReceiptRequestAPI.wteicancelreceipt)
         {
            DataRow ttblwteicancelreceiptRow = pdswteicancelreceipt.ttblwteicancelreceipt.NewttblwteicancelreceiptRow();
            Wteicancelreceipt.UpdateRowFromWteicancelreceipt(ref ttblwteicancelreceiptRow, obj);
            pdswteicancelreceipt.ttblwteicancelreceipt.AddttblwteicancelreceiptRow((pdswteicancelreceiptDataSet.ttblwteicancelreceiptRow)ttblwteicancelreceiptRow);
         }
          
         var  iJrnlNo = AswtentryWTEICancelReceiptRequestAPI.iJrnlNo;
            
         
         NLogLoggerP.Trace("WTEICancelReceipt - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEICancelReceipt(ref pdsContext,  iJrnlNo, ref pdswteicancelreceipt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEICancelReceipt - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteicancelreceipt); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswteicancelreceipt.ttblwteicancelreceipt)
         {
            result.wteicancelreceipt.Add(Wteicancelreceipt.BuildWteicancelreceiptFromRow(row));
         }     
          
         return result;
          
      }

      public Wteidetailbanner WTEIDetailBanner(int iWTno, int iWTsuf, int iJrnlNo)
      {   
         var result = new Wteidetailbanner();
         
         var pdswteidetailbanner = new pdswteidetailbannerDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIDetailBanner - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIDetailBanner(ref pdsContext,  iWTno,  iWTsuf,  iJrnlNo, out pdswteidetailbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIDetailBanner - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteidetailbanner); 
    
         if (pdswteidetailbanner.ttblwteidetailbanner.Count > 0) 
         { 
             result = Wteidetailbanner.BuildWteidetailbannerFromRow(pdswteidetailbanner.ttblwteidetailbanner[0]);
         } 
              
          
         return result;
          
      }

      public void WTEIDetailLogOff(int iWTno, int iWTsuf, int iJrnlNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIDetailLogOff - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIDetailLogOff(ref pdsContext,  iWTno,  iWTsuf,  iJrnlNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIDetailLogOff - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AswtentryWTEIFullReceiptResponseAPI WTEIFullReceipt(IEnumerable<Wteiselectwt> wteiselectwt)
      {   
         var result = new AswtentryWTEIFullReceiptResponseAPI();
         
         var pdswteiselectwt = new pdswteiselectwtDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in wteiselectwt)
         {
             DataRow row = pdswteiselectwt.ttblwteiselectwt.NewttblwteiselectwtRow();
             Wteiselectwt.UpdateRowFromWteiselectwt(ref row, obj);
             pdswteiselectwt.ttblwteiselectwt.AddttblwteiselectwtRow((pdswteiselectwtDataSet.ttblwteiselectwtRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIFullReceipt - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIFullReceipt(ref pdsContext, ref pdswteiselectwt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIFullReceipt - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteiselectwt); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswteiselectwt.ttblwteiselectwt)
         {
            result.wteiselectwt.Add(Wteiselectwt.BuildWteiselectwtFromRow(row));
         }     
          
         return result;
          
      }

      public AswtentryWTEITransferListResponseAPI WTEITransferList(Wteireceivelistcriteria wteireceivelistcriteria)
      {   
         var result = new AswtentryWTEITransferListResponseAPI();
         
         var pdswteitransferlist = new pdswteitransferlistDataSet();
            
         DataRow ttblwteireceivelistcriteriaCriteria = pdswteitransferlist.ttblwteireceivelistcriteria.NewttblwteireceivelistcriteriaRow();
         Wteireceivelistcriteria.UpdateRowFromWteireceivelistcriteria(ref ttblwteireceivelistcriteriaCriteria, wteireceivelistcriteria);
         pdswteitransferlist.ttblwteireceivelistcriteria.AddttblwteireceivelistcriteriaRow((pdswteitransferlistDataSet.ttblwteireceivelistcriteriaRow)ttblwteireceivelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTEITransferList - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEITransferList(ref pdsContext, ref pdswteitransferlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTEITransferList - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteitransferlist); 
    
         foreach (DataRow row in pdswteitransferlist.ttblwteireceivelistresults)
         {
            result.wteireceivelistresults.Add(Wteireceivelistresults.BuildWteireceivelistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Wteiupdate WTEIUpdateInit(int iJrnlNo, string cWhse)
      {   
         var result = new Wteiupdate();
         
         var pdswteiupdate = new pdswteiupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIUpdateInit - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIUpdateInit(ref pdsContext,  iJrnlNo,  cWhse, out pdswteiupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIUpdateInit - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteiupdate); 
    
         if (pdswteiupdate.ttblwteiupdate.Count > 0) 
         { 
             result = Wteiupdate.BuildWteiupdateFromRow(pdswteiupdate.ttblwteiupdate[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> WTEIUpdateFinal(Wteiupdate wteiupdate)
      {   
         var results = new List<Messaging>();
         
         var pdswteiupdate = new pdswteiupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwteiupdateCriteria = pdswteiupdate.ttblwteiupdate.NewttblwteiupdateRow();
         Wteiupdate.UpdateRowFromWteiupdate(ref ttblwteiupdateCriteria, wteiupdate);
         pdswteiupdate.ttblwteiupdate.AddttblwteiupdateRow((pdswteiupdateDataSet.ttblwteiupdateRow)ttblwteiupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIUpdateFinal - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIUpdateFinal(ref pdsContext,  pdswteiupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIUpdateFinal - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteiupdate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Wteilinelist> WTEILineList(int iWTno, int iWTsuf, int iJrnlNo)
      {   
         var results = new List<Wteilinelist>();
         
         var pdswteilinelist = new pdswteilinelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEILineList - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEILineList(ref pdsContext,  iWTno,  iWTsuf,  iJrnlNo, out pdswteilinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEILineList - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteilinelist); 
    
            foreach (DataRow row in pdswteilinelist.ttblwteilinelist)
            {
                results.Add(Wteilinelist.BuildWteilinelistFromRow(row));
            }
            return results;
        
      }

      public Wteilineserlotchanges WTEILineGetSerialLotChanges(int iWTno, int iWTsuf, int iJrnlNo, int iLineNo)
      {   
         var result = new Wteilineserlotchanges();
         
         var pdswteilineserlotchanges = new pdswteilineserlotchangesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEILineGetSerialLotChanges - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEILineGetSerialLotChanges(ref pdsContext,  iWTno,  iWTsuf,  iJrnlNo,  iLineNo, out pdswteilineserlotchanges, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEILineGetSerialLotChanges - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteilineserlotchanges); 
    
         if (pdswteilineserlotchanges.ttblwteilineserlotchanges.Count > 0) 
         { 
             result = Wteilineserlotchanges.BuildWteilineserlotchangesFromRow(pdswteilineserlotchanges.ttblwteilineserlotchanges[0]);
         } 
              
          
         return result;
          
      }

      public AswtentryWTEILineExtendUpdateResponseAPI WTEILineExtendUpdate(Wteilineupdate wteilineupdate)
      {   
         var result = new AswtentryWTEILineExtendUpdateResponseAPI();
         
         var pdswteilineupdate = new pdswteilineupdateDataSet();
            
         DataRow ttblwteilineupdateCriteria = pdswteilineupdate.ttblwteilineupdate.NewttblwteilineupdateRow();
         Wteilineupdate.UpdateRowFromWteilineupdate(ref ttblwteilineupdateCriteria, wteilineupdate);
         pdswteilineupdate.ttblwteilineupdate.AddttblwteilineupdateRow((pdswteilineupdateDataSet.ttblwteilineupdateRow)ttblwteilineupdateCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEILineExtendUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEILineExtendUpdate(ref pdsContext, ref pdswteilineupdate, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEILineExtendUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteilineupdate); 
    
         if (pdswteilineupdate.ttblwteilineupdate.Count > 0)
         {
            result.wteilineupdate = Wteilineupdate.BuildWteilineupdateFromRow(pdswteilineupdate.ttblwteilineupdate[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public string WTEILineUpdate(Wteilineupdate wteilineupdate)
      {   
          
         var pdswteilineupdate = new pdswteilineupdateDataSet();
            
         DataRow ttblwteilineupdateCriteria = pdswteilineupdate.ttblwteilineupdate.NewttblwteilineupdateRow();
         Wteilineupdate.UpdateRowFromWteilineupdate(ref ttblwteilineupdateCriteria, wteilineupdate);
         pdswteilineupdate.ttblwteilineupdate.AddttblwteilineupdateRow((pdswteilineupdateDataSet.ttblwteilineupdateRow)ttblwteilineupdateCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEILineUpdate - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEILineUpdate(ref pdsContext,  pdswteilineupdate, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEILineUpdate - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteilineupdate); 
    
         return cWarningMessage;
      
      }

      public AswtentryWTESDetailLineCheckSerLotResponseAPI WTESDetailLineCheckSerLot(AswtentryWTESDetailLineCheckSerLotRequestAPI AswtentryWTESDetailLineCheckSerLotRequestAPI)
      {   
         var result = new AswtentryWTESDetailLineCheckSerLotResponseAPI();
         
         var pdswtesdetailline = new pdswtesdetaillineDataSet();
            
         bool lLaunchFl = false;
         decimal dNoSNLots = 0;
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtesdetaillineRow = pdswtesdetailline.ttblwtesdetailline.NewttblwtesdetaillineRow();
         Wtesdetailline.UpdateRowFromWtesdetailline(ref ttblwtesdetaillineRow, AswtentryWTESDetailLineCheckSerLotRequestAPI.wtesdetailline);
         pdswtesdetailline.ttblwtesdetailline.AddttblwtesdetaillineRow((pdswtesdetaillineDataSet.ttblwtesdetaillineRow)ttblwtesdetaillineRow);
          
         var  iLineNo = AswtentryWTESDetailLineCheckSerLotRequestAPI.iLineNo;
            
         var  cShipFmWhse = AswtentryWTESDetailLineCheckSerLotRequestAPI.cShipFmWhse;
            
         var  lIsFromMenu = AswtentryWTESDetailLineCheckSerLotRequestAPI.lIsFromMenu;
            
         
         NLogLoggerP.Trace("WTESDetailLineCheckSerLot - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESDetailLineCheckSerLot(ref pdsContext,  iLineNo,  cShipFmWhse,  lIsFromMenu,  pdswtesdetailline, out lLaunchFl, out dNoSNLots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESDetailLineCheckSerLot - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtesdetailline); 
    
         result.lLaunchFl = lLaunchFl;
         result.dNoSNLots = dNoSNLots;
          
         return result;
          
      }

      public AswtentryWTEIDetailLineCheckSerLotResponseAPI WTEIDetailLineCheckSerLot(int iWtno, int iWtsuf, int iLineno, string cSerlottype, bool lIcsnpofl, decimal dStkqtyrcv, bool lIsFromMenu)
      {   
         var result = new AswtentryWTEIDetailLineCheckSerLotResponseAPI();
         
         bool lLaunchFl = false;
         decimal dNoSNLots = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEIDetailLineCheckSerLot - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEIDetailLineCheckSerLot(ref pdsContext,  iWtno,  iWtsuf,  iLineno,  cSerlottype,  lIcsnpofl,  dStkqtyrcv,  lIsFromMenu, out lLaunchFl, out dNoSNLots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEIDetailLineCheckSerLot - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.lLaunchFl = lLaunchFl;
         result.dNoSNLots = dNoSNLots;
          
         return result;
          
      }

      public Wteslineserlotchanges WTESLineGetSerialLotChanges(int iWTno, int iWTsuf, int iLineNo)
      {   
         var result = new Wteslineserlotchanges();
         
         var pdswteslineserlotchanges = new pdswteslineserlotchangesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTESLineGetSerialLotChanges - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTESLineGetSerialLotChanges(ref pdsContext,  iWTno,  iWTsuf,  iLineNo, out pdswteslineserlotchanges, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTESLineGetSerialLotChanges - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteslineserlotchanges); 
    
         if (pdswteslineserlotchanges.ttblwteslineserlotchanges.Count > 0) 
         { 
             result = Wteslineserlotchanges.BuildWteslineserlotchangesFromRow(pdswteslineserlotchanges.ttblwteslineserlotchanges[0]);
         } 
              
          
         return result;
          
      }

      public void WTEEDetailLogOff(Wteedetaillogoff wteedetaillogoff)
      {   
         
         var pdswteedetaillogoff = new pdswteedetaillogoffDataSet();
            
         DataRow ttblwteedetaillogoffCriteria = pdswteedetaillogoff.ttblwteedetaillogoff.NewttblwteedetaillogoffRow();
         Wteedetaillogoff.UpdateRowFromWteedetaillogoff(ref ttblwteedetaillogoffCriteria, wteedetaillogoff);
         pdswteedetaillogoff.ttblwteedetaillogoff.AddttblwteedetaillogoffRow((pdswteedetaillogoffDataSet.ttblwteedetaillogoffRow)ttblwteedetaillogoffCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEEDetailLogOff - Aswtentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtentryproxy = this.proxyAppObject.CreatePO_aswtentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtentryproxy.WTEEDetailLogOff(ref pdsContext,  pdswteedetaillogoff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEEDetailLogOff - Aswtentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteedetaillogoff);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  