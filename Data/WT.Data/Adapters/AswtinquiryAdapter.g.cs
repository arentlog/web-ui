//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WT.Data.Adapters
{
   using com.infor.sxproxy.wtproxy;
   using com.infor.sxproxy.wtproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsloadwtlinedetail;
   using Models.Pdsloadwtlineext;
   using Models.Pdsloadwtlinehistory;
   using Models.Pdsloadwtlinenonstock;
   using Models.Pdsloadwtquickview;
   using Models.Pdsloadwtquickviewties;
   using Models.Pdswtitbuildwtlnlist;
   using Models.Pdswtitbuildwtlist;
   using Models.Pdswtitbuildwttracklist;
   using Models.Pdsloadwtee;
   using Models.Pdsmessaging;
   using Models.Pdswtiareptlist;
   using Models.Pdswtiareptapprove;
   using Models.Pdswtialine;
   using Models.Pdswtialineupdate;
   using Models.Pdswtsainitialize;
   using Models.Pdswtsaaddchg;
   using Models.Pdswtsaload;
   using Models.Pdswtsacancel;
   using Models.Pdswtsasearch;
   using Models.Complex;

   public partial class AswtinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private WTProxyAppObject proxyAppObject;
      
      public AswtinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswtinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Loadwtlinedetailresults> LoadWTLineDetail(Loadwtlinedetailcriteria loadwtlinedetailcriteria)
      {   
         var results = new List<Loadwtlinedetailresults>();
         
         var pdsloadwtlinedetail = new pdsloadwtlinedetailDataSet();
            
         DataRow ttblloadwtlinedetailcriteriaCriteria = pdsloadwtlinedetail.ttblloadwtlinedetailcriteria.NewttblloadwtlinedetailcriteriaRow();
         Loadwtlinedetailcriteria.UpdateRowFromLoadwtlinedetailcriteria(ref ttblloadwtlinedetailcriteriaCriteria, loadwtlinedetailcriteria);
         pdsloadwtlinedetail.ttblloadwtlinedetailcriteria.AddttblloadwtlinedetailcriteriaRow((pdsloadwtlinedetailDataSet.ttblloadwtlinedetailcriteriaRow)ttblloadwtlinedetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTLineDetail - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTLineDetail(ref pdsContext, ref pdsloadwtlinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTLineDetail - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtlinedetail); 
    
            foreach (DataRow row in pdsloadwtlinedetail.ttblloadwtlinedetailresults)
            {
                results.Add(Loadwtlinedetailresults.BuildLoadwtlinedetailresultsFromRow(row));
            }
            return results;
        
      }

      public Loadwtlineextresults LoadWTLineExtended(Loadwtlineextcriteria loadwtlineextcriteria)
      {   
         var result = new Loadwtlineextresults();
         
         var pdsloadwtlineext = new pdsloadwtlineextDataSet();
            
         DataRow ttblloadwtlineextcriteriaCriteria = pdsloadwtlineext.ttblloadwtlineextcriteria.NewttblloadwtlineextcriteriaRow();
         Loadwtlineextcriteria.UpdateRowFromLoadwtlineextcriteria(ref ttblloadwtlineextcriteriaCriteria, loadwtlineextcriteria);
         pdsloadwtlineext.ttblloadwtlineextcriteria.AddttblloadwtlineextcriteriaRow((pdsloadwtlineextDataSet.ttblloadwtlineextcriteriaRow)ttblloadwtlineextcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTLineExtended - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTLineExtended(ref pdsContext, ref pdsloadwtlineext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTLineExtended - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtlineext); 
    
         if (pdsloadwtlineext.ttblloadwtlineextresults.Count > 0) 
         { 
             result = Loadwtlineextresults.BuildLoadwtlineextresultsFromRow(pdsloadwtlineext.ttblloadwtlineextresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Loadwtlinehistoryresults> LoadWTLineHistory(Loadwtlinehistorycriteria loadwtlinehistorycriteria)
      {   
         var results = new List<Loadwtlinehistoryresults>();
         
         var pdsloadwtlinehistory = new pdsloadwtlinehistoryDataSet();
            
         DataRow ttblloadwtlinehistorycriteriaCriteria = pdsloadwtlinehistory.ttblloadwtlinehistorycriteria.NewttblloadwtlinehistorycriteriaRow();
         Loadwtlinehistorycriteria.UpdateRowFromLoadwtlinehistorycriteria(ref ttblloadwtlinehistorycriteriaCriteria, loadwtlinehistorycriteria);
         pdsloadwtlinehistory.ttblloadwtlinehistorycriteria.AddttblloadwtlinehistorycriteriaRow((pdsloadwtlinehistoryDataSet.ttblloadwtlinehistorycriteriaRow)ttblloadwtlinehistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTLineHistory - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTLineHistory(ref pdsContext, ref pdsloadwtlinehistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTLineHistory - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtlinehistory); 
    
            foreach (DataRow row in pdsloadwtlinehistory.ttblloadwtlinehistoryresults)
            {
                results.Add(Loadwtlinehistoryresults.BuildLoadwtlinehistoryresultsFromRow(row));
            }
            return results;
        
      }

      public Loadwtlinenonstockresults LoadWTLineNonstock(Loadwtlinenonstockcriteria loadwtlinenonstockcriteria)
      {   
         var result = new Loadwtlinenonstockresults();
         
         var pdsloadwtlinenonstock = new pdsloadwtlinenonstockDataSet();
            
         DataRow ttblloadwtlinenonstockcriteriaCriteria = pdsloadwtlinenonstock.ttblloadwtlinenonstockcriteria.NewttblloadwtlinenonstockcriteriaRow();
         Loadwtlinenonstockcriteria.UpdateRowFromLoadwtlinenonstockcriteria(ref ttblloadwtlinenonstockcriteriaCriteria, loadwtlinenonstockcriteria);
         pdsloadwtlinenonstock.ttblloadwtlinenonstockcriteria.AddttblloadwtlinenonstockcriteriaRow((pdsloadwtlinenonstockDataSet.ttblloadwtlinenonstockcriteriaRow)ttblloadwtlinenonstockcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTLineNonstock - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTLineNonstock(ref pdsContext, ref pdsloadwtlinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTLineNonstock - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtlinenonstock); 
    
         if (pdsloadwtlinenonstock.ttblloadwtlinenonstockresults.Count > 0) 
         { 
             result = Loadwtlinenonstockresults.BuildLoadwtlinenonstockresultsFromRow(pdsloadwtlinenonstock.ttblloadwtlinenonstockresults[0]);
         } 
              
          
         return result;
          
      }

      public AswtinquiryLoadWTQuickViewResponseAPI LoadWTQuickView(Loadwtquickviewcriteria loadwtquickviewcriteria)
      {   
         var result = new AswtinquiryLoadWTQuickViewResponseAPI();
         
         var pdsloadwtquickview = new pdsloadwtquickviewDataSet();
            
         DataRow ttblloadwtquickviewcriteriaCriteria = pdsloadwtquickview.ttblloadwtquickviewcriteria.NewttblloadwtquickviewcriteriaRow();
         Loadwtquickviewcriteria.UpdateRowFromLoadwtquickviewcriteria(ref ttblloadwtquickviewcriteriaCriteria, loadwtquickviewcriteria);
         pdsloadwtquickview.ttblloadwtquickviewcriteria.AddttblloadwtquickviewcriteriaRow((pdsloadwtquickviewDataSet.ttblloadwtquickviewcriteriaRow)ttblloadwtquickviewcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTQuickView - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTQuickView(ref pdsContext, ref pdsloadwtquickview, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTQuickView - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtquickview); 
    
         foreach (DataRow row in pdsloadwtquickview.ttblloadwtquickviewresults)
         {
            result.loadwtquickviewresults.Add(Loadwtquickviewresults.BuildLoadwtquickviewresultsFromRow(row));
         }     
         if (pdsloadwtquickview.ttblloadwtquickviewsingle.Count > 0)
         {
            result.loadwtquickviewsingle = Loadwtquickviewsingle.BuildLoadwtquickviewsingleFromRow(pdsloadwtquickview.ttblloadwtquickviewsingle[0]);
         }
                    
          
         return result;
          
      }

      public AswtinquiryLoadWTQuickViewTiesResponseAPI LoadWTQuickViewTies(Loadwtquickviewtiescriteria loadwtquickviewtiescriteria)
      {   
         var result = new AswtinquiryLoadWTQuickViewTiesResponseAPI();
         
         var pdsloadwtquickviewties = new pdsloadwtquickviewtiesDataSet();
            
         DataRow ttblloadwtquickviewtiescriteriaCriteria = pdsloadwtquickviewties.ttblloadwtquickviewtiescriteria.NewttblloadwtquickviewtiescriteriaRow();
         Loadwtquickviewtiescriteria.UpdateRowFromLoadwtquickviewtiescriteria(ref ttblloadwtquickviewtiescriteriaCriteria, loadwtquickviewtiescriteria);
         pdsloadwtquickviewties.ttblloadwtquickviewtiescriteria.AddttblloadwtquickviewtiescriteriaRow((pdsloadwtquickviewtiesDataSet.ttblloadwtquickviewtiescriteriaRow)ttblloadwtquickviewtiescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTQuickViewTies - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTQuickViewTies(ref pdsContext, ref pdsloadwtquickviewties, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTQuickViewTies - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtquickviewties); 
    
         foreach (DataRow row in pdsloadwtquickviewties.ttblloadwtquickviewtiesresults)
         {
            result.loadwtquickviewtiesresults.Add(Loadwtquickviewtiesresults.BuildLoadwtquickviewtiesresultsFromRow(row));
         }     
         if (pdsloadwtquickviewties.ttblloadwtquickviewtiessingle.Count > 0)
         {
            result.loadwtquickviewtiessingle = Loadwtquickviewtiessingle.BuildLoadwtquickviewtiessingleFromRow(pdsloadwtquickviewties.ttblloadwtquickviewtiessingle[0]);
         }
                    
          
         return result;
          
      }

      public AswtinquiryWTITBuildWTLineListResponseAPI WTITBuildWTLineList(Wtitbuildwtlnlistcriteria wtitbuildwtlnlistcriteria)
      {   
         var result = new AswtinquiryWTITBuildWTLineListResponseAPI();
         
         var pdswtitbuildwtlnlist = new pdswtitbuildwtlnlistDataSet();
            
         DataRow ttblwtitbuildwtlnlistcriteriaCriteria = pdswtitbuildwtlnlist.ttblwtitbuildwtlnlistcriteria.NewttblwtitbuildwtlnlistcriteriaRow();
         Wtitbuildwtlnlistcriteria.UpdateRowFromWtitbuildwtlnlistcriteria(ref ttblwtitbuildwtlnlistcriteriaCriteria, wtitbuildwtlnlistcriteria);
         pdswtitbuildwtlnlist.ttblwtitbuildwtlnlistcriteria.AddttblwtitbuildwtlnlistcriteriaRow((pdswtitbuildwtlnlistDataSet.ttblwtitbuildwtlnlistcriteriaRow)ttblwtitbuildwtlnlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTITBuildWTLineList - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTITBuildWTLineList(ref pdsContext, ref pdswtitbuildwtlnlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTITBuildWTLineList - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtitbuildwtlnlist); 
    
         foreach (DataRow row in pdswtitbuildwtlnlist.ttblwtitbuildwtlnhdrresults)
         {
            result.wtitbuildwtlnhdrresults.Add(Wtitbuildwtlnhdrresults.BuildWtitbuildwtlnhdrresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AswtinquiryWTITBuildWTListResponseAPI WTITBuildWTList(Wtitbuildwtlistcriteria wtitbuildwtlistcriteria)
      {   
         var result = new AswtinquiryWTITBuildWTListResponseAPI();
         
         var pdswtitbuildwtlist = new pdswtitbuildwtlistDataSet();
            
         DataRow ttblwtitbuildwtlistcriteriaCriteria = pdswtitbuildwtlist.ttblwtitbuildwtlistcriteria.NewttblwtitbuildwtlistcriteriaRow();
         Wtitbuildwtlistcriteria.UpdateRowFromWtitbuildwtlistcriteria(ref ttblwtitbuildwtlistcriteriaCriteria, wtitbuildwtlistcriteria);
         pdswtitbuildwtlist.ttblwtitbuildwtlistcriteria.AddttblwtitbuildwtlistcriteriaRow((pdswtitbuildwtlistDataSet.ttblwtitbuildwtlistcriteriaRow)ttblwtitbuildwtlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTITBuildWTList - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTITBuildWTList(ref pdsContext, ref pdswtitbuildwtlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTITBuildWTList - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtitbuildwtlist); 
    
         foreach (DataRow row in pdswtitbuildwtlist.ttblwtitbuildwtlistresults)
         {
            result.wtitbuildwtlistresults.Add(Wtitbuildwtlistresults.BuildWtitbuildwtlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AswtinquiryWTITBuildWTTrackListResponseAPI WTITBuildWTTrackList(Wtitbuildwttracklistcriteria wtitbuildwttracklistcriteria)
      {   
         var result = new AswtinquiryWTITBuildWTTrackListResponseAPI();
         
         var pdswtitbuildwttracklist = new pdswtitbuildwttracklistDataSet();
            
         DataRow ttblwtitbuildwttracklistcriteriaCriteria = pdswtitbuildwttracklist.ttblwtitbuildwttracklistcriteria.NewttblwtitbuildwttracklistcriteriaRow();
         Wtitbuildwttracklistcriteria.UpdateRowFromWtitbuildwttracklistcriteria(ref ttblwtitbuildwttracklistcriteriaCriteria, wtitbuildwttracklistcriteria);
         pdswtitbuildwttracklist.ttblwtitbuildwttracklistcriteria.AddttblwtitbuildwttracklistcriteriaRow((pdswtitbuildwttracklistDataSet.ttblwtitbuildwttracklistcriteriaRow)ttblwtitbuildwttracklistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTITBuildWTTrackList - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTITBuildWTTrackList(ref pdsContext, ref pdswtitbuildwttracklist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTITBuildWTTrackList - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtitbuildwttracklist); 
    
         foreach (DataRow row in pdswtitbuildwttracklist.ttblwtitbuildwttracklistresults)
         {
            result.wtitbuildwttracklistresults.Add(Wtitbuildwttracklistresults.BuildWtitbuildwttracklistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AswtinquiryLoadWTEEResponseAPI LoadWTEE(Loadwteecriteria loadwteecriteria)
      {   
         var result = new AswtinquiryLoadWTEEResponseAPI();
         
         var pdsloadwtee = new pdsloadwteeDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblloadwteecriteriaCriteria = pdsloadwtee.ttblloadwteecriteria.NewttblloadwteecriteriaRow();
         Loadwteecriteria.UpdateRowFromLoadwteecriteria(ref ttblloadwteecriteriaCriteria, loadwteecriteria);
         pdsloadwtee.ttblloadwteecriteria.AddttblloadwteecriteriaRow((pdsloadwteeDataSet.ttblloadwteecriteriaRow)ttblloadwteecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LoadWTEE - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.LoadWTEE(ref pdsContext, ref pdsloadwtee, out pdsmessaging, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LoadWTEE - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtee); 
    
         foreach (DataRow row in pdsloadwtee.ttblloadwteeresults)
         {
            result.loadwteeresults.Add(Loadwteeresults.BuildLoadwteeresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AswtinquiryWTIAReportlistResponseAPI WTIAReportlist(Wtiareptlistcriteria wtiareptlistcriteria)
      {   
         var result = new AswtinquiryWTIAReportlistResponseAPI();
         
         var pdswtiareptlist = new pdswtiareptlistDataSet();
            
         DataRow ttblwtiareptlistcriteriaCriteria = pdswtiareptlist.ttblwtiareptlistcriteria.NewttblwtiareptlistcriteriaRow();
         Wtiareptlistcriteria.UpdateRowFromWtiareptlistcriteria(ref ttblwtiareptlistcriteriaCriteria, wtiareptlistcriteria);
         pdswtiareptlist.ttblwtiareptlistcriteria.AddttblwtiareptlistcriteriaRow((pdswtiareptlistDataSet.ttblwtiareptlistcriteriaRow)ttblwtiareptlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTIAReportlist - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTIAReportlist(ref pdsContext, ref pdswtiareptlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTIAReportlist - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtiareptlist); 
    
         foreach (DataRow row in pdswtiareptlist.ttblwtiareptlistresults)
         {
            result.wtiareptlistresults.Add(Wtiareptlistresults.BuildWtiareptlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public string WTIAReportApprove(Wtiareptapprove wtiareptapprove)
      {   
          
         var pdswtiareptapprove = new pdswtiareptapproveDataSet();
            
         DataRow ttblwtiareptapproveCriteria = pdswtiareptapprove.ttblwtiareptapprove.NewttblwtiareptapproveRow();
         Wtiareptapprove.UpdateRowFromWtiareptapprove(ref ttblwtiareptapproveCriteria, wtiareptapprove);
         pdswtiareptapprove.ttblwtiareptapprove.AddttblwtiareptapproveRow((pdswtiareptapproveDataSet.ttblwtiareptapproveRow)ttblwtiareptapproveCriteria);
            
         string cErrorMessage = string.Empty;
         string cPrintMess = string.Empty;
   
         
         NLogLoggerP.Trace("WTIAReportApprove - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTIAReportApprove(ref pdsContext,  pdswtiareptapprove, out cErrorMessage, out cPrintMess);
               }
            });
         NLogLoggerP.Info("WTIAReportApprove - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtiareptapprove); 
    
         return cPrintMess;
      
      }

      public IEnumerable<Wtialineresults> WTIALine(Wtialinecriteria wtialinecriteria)
      {   
         var results = new List<Wtialineresults>();
         
         var pdswtialine = new pdswtialineDataSet();
            
         DataRow ttblwtialinecriteriaCriteria = pdswtialine.ttblwtialinecriteria.NewttblwtialinecriteriaRow();
         Wtialinecriteria.UpdateRowFromWtialinecriteria(ref ttblwtialinecriteriaCriteria, wtialinecriteria);
         pdswtialine.ttblwtialinecriteria.AddttblwtialinecriteriaRow((pdswtialineDataSet.ttblwtialinecriteriaRow)ttblwtialinecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTIALine - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTIALine(ref pdsContext, ref pdswtialine, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTIALine - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtialine); 
    
            foreach (DataRow row in pdswtialine.ttblwtialineresults)
            {
                results.Add(Wtialineresults.BuildWtialineresultsFromRow(row));
            }
            return results;
        
      }

      public void WTIALineUpdate(Wtialineupdatecriteria wtialineupdatecriteria)
      {   
         
         var pdswtialineupdate = new pdswtialineupdateDataSet();
            
         DataRow ttblwtialineupdatecriteriaCriteria = pdswtialineupdate.ttblwtialineupdatecriteria.NewttblwtialineupdatecriteriaRow();
         Wtialineupdatecriteria.UpdateRowFromWtialineupdatecriteria(ref ttblwtialineupdatecriteriaCriteria, wtialineupdatecriteria);
         pdswtialineupdate.ttblwtialineupdatecriteria.AddttblwtialineupdatecriteriaRow((pdswtialineupdateDataSet.ttblwtialineupdatecriteriaRow)ttblwtialineupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTIALineUpdate - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTIALineUpdate(ref pdsContext,  pdswtialineupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTIALineUpdate - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtialineupdate);
      }

      public AswtinquiryWTITSimpleSearchListResponseAPI WTITSimpleSearchList(int iBatchSize, string cSearchString)
      {   
         var result = new AswtinquiryWTITSimpleSearchListResponseAPI();
         
         var pdswtitbuildwtlist = new pdswtitbuildwtlistDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WTITSimpleSearchList - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTITSimpleSearchList(ref pdsContext,  iBatchSize,  cSearchString, out pdswtitbuildwtlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WTITSimpleSearchList - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtitbuildwtlist); 
    
         foreach (DataRow row in pdswtitbuildwtlist.ttblwtitbuildwtlistresults)
         {
            result.wtitbuildwtlistresults.Add(Wtitbuildwtlistresults.BuildWtitbuildwtlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Wtsainitialize WTSAInitialize()
      {   
         var result = new Wtsainitialize();
         
         var pdswtsainitialize = new pdswtsainitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTSAInitialize - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSAInitialize(ref pdsContext, out pdswtsainitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSAInitialize - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsainitialize); 
    
         if (pdswtsainitialize.ttblwtsainitialize.Count > 0) 
         { 
             result = Wtsainitialize.BuildWtsainitializeFromRow(pdswtsainitialize.ttblwtsainitialize[0]);
         } 
              
          
         return result;
          
      }

      public Wtsainitialize WTSALeaveField(AswtinquiryWTSALeaveFieldRequestAPI AswtinquiryWTSALeaveFieldRequestAPI)
      {   
         var result = new Wtsainitialize();
         
         var pdswtsainitialize = new pdswtsainitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtsainitializeRow = pdswtsainitialize.ttblwtsainitialize.NewttblwtsainitializeRow();
         Wtsainitialize.UpdateRowFromWtsainitialize(ref ttblwtsainitializeRow, AswtinquiryWTSALeaveFieldRequestAPI.wtsainitialize);
         pdswtsainitialize.ttblwtsainitialize.AddttblwtsainitializeRow((pdswtsainitializeDataSet.ttblwtsainitializeRow)ttblwtsainitializeRow);
          
         var  pvType = AswtinquiryWTSALeaveFieldRequestAPI.pvType;
            
         
         NLogLoggerP.Trace("WTSALeaveField - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSALeaveField(ref pdsContext,  pvType, ref pdswtsainitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSALeaveField - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsainitialize); 
    
         if (pdswtsainitialize.ttblwtsainitialize.Count > 0) 
         { 
             result = Wtsainitialize.BuildWtsainitializeFromRow(pdswtsainitialize.ttblwtsainitialize[0]);
         } 
              
          
         return result;
          
      }

      public AswtinquiryWTSAUpdateResponseAPI WTSAUpdate(Wtsaaddchg wtsaaddchg)
      {   
         var result = new AswtinquiryWTSAUpdateResponseAPI();
         
         var pdswtsaaddchg = new pdswtsaaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtsaaddchgCriteria = pdswtsaaddchg.ttblwtsaaddchg.NewttblwtsaaddchgRow();
         Wtsaaddchg.UpdateRowFromWtsaaddchg(ref ttblwtsaaddchgCriteria, wtsaaddchg);
         pdswtsaaddchg.ttblwtsaaddchg.AddttblwtsaaddchgRow((pdswtsaaddchgDataSet.ttblwtsaaddchgRow)ttblwtsaaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTSAUpdate - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSAUpdate(ref pdsContext, ref pdswtsaaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSAUpdate - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsaaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtsaaddchg.ttblwtsaaddchg.Count > 0)
         {
            result.wtsaaddchg = Wtsaaddchg.BuildWtsaaddchgFromRow(pdswtsaaddchg.ttblwtsaaddchg[0]);
         }
                    
          
         return result;
          
      }

      public Wtsaaddchg WTSALoad(Wtsaload wtsaload)
      {   
         var result = new Wtsaaddchg();
         
         var pdswtsaload = new pdswtsaloadDataSet();
            
         var pdswtsaaddchg = new pdswtsaaddchgDataSet();
            
         DataRow ttblwtsaloadCriteria = pdswtsaload.ttblwtsaload.NewttblwtsaloadRow();
         Wtsaload.UpdateRowFromWtsaload(ref ttblwtsaloadCriteria, wtsaload);
         pdswtsaload.ttblwtsaload.AddttblwtsaloadRow((pdswtsaloadDataSet.ttblwtsaloadRow)ttblwtsaloadCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTSALoad - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSALoad(ref pdsContext,  pdswtsaload, out pdswtsaaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSALoad - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsaload); 
    
         if (pdswtsaaddchg.ttblwtsaaddchg.Count > 0) 
         { 
             result = Wtsaaddchg.BuildWtsaaddchgFromRow(pdswtsaaddchg.ttblwtsaaddchg[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> WTSACancel(Wtsacancel wtsacancel)
      {   
         var results = new List<Messaging>();
         
         var pdswtsacancel = new pdswtsacancelDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtsacancelCriteria = pdswtsacancel.ttblwtsacancel.NewttblwtsacancelRow();
         Wtsacancel.UpdateRowFromWtsacancel(ref ttblwtsacancelCriteria, wtsacancel);
         pdswtsacancel.ttblwtsacancel.AddttblwtsacancelRow((pdswtsacancelDataSet.ttblwtsacancelRow)ttblwtsacancelCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTSACancel - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSACancel(ref pdsContext,  pdswtsacancel, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSACancel - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsacancel); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtinquiryWTSASearchResponseAPI WTSASearch(Wtsasearchcriteria wtsasearchcriteria)
      {   
         var result = new AswtinquiryWTSASearchResponseAPI();
         
         var pdswtsasearch = new pdswtsasearchDataSet();
            
         DataRow ttblwtsasearchcriteriaCriteria = pdswtsasearch.ttblwtsasearchcriteria.NewttblwtsasearchcriteriaRow();
         Wtsasearchcriteria.UpdateRowFromWtsasearchcriteria(ref ttblwtsasearchcriteriaCriteria, wtsasearchcriteria);
         pdswtsasearch.ttblwtsasearchcriteria.AddttblwtsasearchcriteriaRow((pdswtsasearchDataSet.ttblwtsasearchcriteriaRow)ttblwtsasearchcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTSASearch - Aswtinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtinquiryproxy = this.proxyAppObject.CreatePO_aswtinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtinquiryproxy.WTSASearch(ref pdsContext, ref pdswtsasearch, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTSASearch - Aswtinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtsasearch); 
    
         foreach (DataRow row in pdswtsasearch.ttblwtsasearchresults)
         {
            result.wtsasearchresults.Add(Wtsasearchresults.BuildWtsasearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  