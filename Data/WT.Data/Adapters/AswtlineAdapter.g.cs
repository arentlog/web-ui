//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WT.Data.Adapters
{
   using com.infor.sxproxy.wtproxy;
   using com.infor.sxproxy.wtproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsloadwtlinesettings;
   using Models.Pdswtlinecancelchange;
   using Models.Pdswtlineretrieve;
   using Models.Pdswtline;
   using Models.Pdsmessaging;
   using Models.Pdswtlineinitialize;
   using Models.Pdswtserlot;
   using Models.Pdswtlinelist;
   using Models.Pdswteelines;
   using Models.Pdsoelinexrefprod;
   using Models.Pdswtlinenonstockhdr;
   using Models.Pdswtlinenonstock;
   using Models.Complex;

   public partial class AswtlineAdapter : AdapterBase<pdsContextDataSet>
   {
      private WTProxyAppObject proxyAppObject;
      
      public AswtlineAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswtlineAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Loadwtlinesettings LoadWTLineSettings()
      {   
         var result = new Loadwtlinesettings();
         
         var pdsloadwtlinesettings = new pdsloadwtlinesettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWTLineSettings - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.LoadWTLineSettings(ref pdsContext, out pdsloadwtlinesettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWTLineSettings - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadwtlinesettings); 
    
         if (pdsloadwtlinesettings.ttblloadwtlinesettings.Count > 0) 
         { 
             result = Loadwtlinesettings.BuildLoadwtlinesettingsFromRow(pdsloadwtlinesettings.ttblloadwtlinesettings[0]);
         } 
              
          
         return result;
          
      }

      public void WTLineCancelChange(Wtlinecancelchangecriteria wtlinecancelchangecriteria)
      {   
         
         var pdswtlinecancelchange = new pdswtlinecancelchangeDataSet();
            
         DataRow ttblwtlinecancelchangecriteriaCriteria = pdswtlinecancelchange.ttblwtlinecancelchangecriteria.NewttblwtlinecancelchangecriteriaRow();
         Wtlinecancelchangecriteria.UpdateRowFromWtlinecancelchangecriteria(ref ttblwtlinecancelchangecriteriaCriteria, wtlinecancelchangecriteria);
         pdswtlinecancelchange.ttblwtlinecancelchangecriteria.AddttblwtlinecancelchangecriteriaRow((pdswtlinecancelchangeDataSet.ttblwtlinecancelchangecriteriaRow)ttblwtlinecancelchangecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTLineCancelChange - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineCancelChange(ref pdsContext,  pdswtlinecancelchange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineCancelChange - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtlinecancelchange);
      }

      public AswtlineWTLineRetrieveResponseAPI WTLineRetrieve(Wtlineretrievecriteria wtlineretrievecriteria)
      {   
         var result = new AswtlineWTLineRetrieveResponseAPI();
         
         var pdswtlineretrieve = new pdswtlineretrieveDataSet();
            
         var pdswtline = new pdswtlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtlineretrievecriteriaCriteria = pdswtlineretrieve.ttblwtlineretrievecriteria.NewttblwtlineretrievecriteriaRow();
         Wtlineretrievecriteria.UpdateRowFromWtlineretrievecriteria(ref ttblwtlineretrievecriteriaCriteria, wtlineretrievecriteria);
         pdswtlineretrieve.ttblwtlineretrievecriteria.AddttblwtlineretrievecriteriaRow((pdswtlineretrieveDataSet.ttblwtlineretrievecriteriaRow)ttblwtlineretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTLineRetrieve - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineRetrieve(ref pdsContext,  pdswtlineretrieve, out pdswtline, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("WTLineRetrieve - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtlineretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtline.ttblwtline.Count > 0)
         {
            result.wtline = Wtline.BuildWtlineFromRow(pdswtline.ttblwtline[0]);
         }
                    
         foreach (DataRow row in pdswtline.ttblwtlnties)
         {
            result.wtlnties.Add(Wtlnties.BuildWtlntiesFromRow(row));
         }     
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AswtlineWTLineCreateResponseAPI WTLineCreate(AswtlineWTLineCreateRequestAPI AswtlineWTLineCreateRequestAPI)
      {   
         var result = new AswtlineWTLineCreateResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineCreateRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinecriteriaRow = pdswtline.ttblwtlinecriteria.NewttblwtlinecriteriaRow();
         Wtlinecriteria.UpdateRowFromWtlinecriteria(ref ttblwtlinecriteriaRow, AswtlineWTLineCreateRequestAPI.wtlinecriteria);
         pdswtline.ttblwtlinecriteria.AddttblwtlinecriteriaRow((pdswtlineDataSet.ttblwtlinecriteriaRow)ttblwtlinecriteriaRow);
          
         foreach (var obj in AswtlineWTLineCreateRequestAPI.wtlnties)
         {
            DataRow ttblwtlntiesRow = pdswtline.ttblwtlnties.NewttblwtlntiesRow();
            Wtlnties.UpdateRowFromWtlnties(ref ttblwtlntiesRow, obj);
            pdswtline.ttblwtlnties.AddttblwtlntiesRow((pdswtlineDataSet.ttblwtlntiesRow)ttblwtlntiesRow);
         }
          
         var  lMaintMode = AswtlineWTLineCreateRequestAPI.lMaintMode;
            
         var  cChangeList = AswtlineWTLineCreateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("WTLineCreate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineCreate(ref pdsContext,  lMaintMode,  cChangeList, ref pdswtline, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("WTLineCreate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtline.ttblwtline.Count > 0)
         {
            result.wtline = Wtline.BuildWtlineFromRow(pdswtline.ttblwtline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AswtlineWTLineUpdateResponseAPI WTLineUpdate(AswtlineWTLineUpdateRequestAPI AswtlineWTLineUpdateRequestAPI)
      {   
         var result = new AswtlineWTLineUpdateResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineUpdateRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         foreach (var obj in AswtlineWTLineUpdateRequestAPI.wtlnties)
         {
            DataRow ttblwtlntiesRow = pdswtline.ttblwtlnties.NewttblwtlntiesRow();
            Wtlnties.UpdateRowFromWtlnties(ref ttblwtlntiesRow, obj);
            pdswtline.ttblwtlnties.AddttblwtlntiesRow((pdswtlineDataSet.ttblwtlntiesRow)ttblwtlntiesRow);
         }
          
         var  lMaintMode = AswtlineWTLineUpdateRequestAPI.lMaintMode;
            
         var  cChangeList = AswtlineWTLineUpdateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("WTLineUpdate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineUpdate(ref pdsContext,  lMaintMode,  cChangeList, ref pdswtline, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("WTLineUpdate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtline.ttblwtline.Count > 0)
         {
            result.wtline = Wtline.BuildWtlineFromRow(pdswtline.ttblwtline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public IEnumerable<Messaging> WTETLineDelete(AswtlineWTETLineDeleteRequestAPI AswtlineWTETLineDeleteRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTETLineDeleteRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         foreach (var obj in AswtlineWTETLineDeleteRequestAPI.wtlinecriteria)
         {
            DataRow ttblwtlinecriteriaRow = pdswtline.ttblwtlinecriteria.NewttblwtlinecriteriaRow();
            Wtlinecriteria.UpdateRowFromWtlinecriteria(ref ttblwtlinecriteriaRow, obj);
            pdswtline.ttblwtlinecriteria.AddttblwtlinecriteriaRow((pdswtlineDataSet.ttblwtlinecriteriaRow)ttblwtlinecriteriaRow);
         }
          
         DataRow ttblwtlntiesRow = pdswtline.ttblwtlnties.NewttblwtlntiesRow();
         Wtlnties.UpdateRowFromWtlnties(ref ttblwtlntiesRow, AswtlineWTETLineDeleteRequestAPI.wtlnties);
         pdswtline.ttblwtlnties.AddttblwtlntiesRow((pdswtlineDataSet.ttblwtlntiesRow)ttblwtlntiesRow);
          
         
         NLogLoggerP.Trace("WTETLineDelete - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTETLineDelete(ref pdsContext,  pdswtline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETLineDelete - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtlineWTLineInitializeResponseAPI WTLineInitialize(Wtlineinitializecriteria wtlineinitializecriteria)
      {   
         var result = new AswtlineWTLineInitializeResponseAPI();
         
         var pdswtlineinitialize = new pdswtlineinitializeDataSet();
            
         var pdswtline = new pdswtlineDataSet();
            
         DataRow ttblwtlineinitializecriteriaCriteria = pdswtlineinitialize.ttblwtlineinitializecriteria.NewttblwtlineinitializecriteriaRow();
         Wtlineinitializecriteria.UpdateRowFromWtlineinitializecriteria(ref ttblwtlineinitializecriteriaCriteria, wtlineinitializecriteria);
         pdswtlineinitialize.ttblwtlineinitializecriteria.AddttblwtlineinitializecriteriaRow((pdswtlineinitializeDataSet.ttblwtlineinitializecriteriaRow)ttblwtlineinitializecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTLineInitialize - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineInitialize(ref pdsContext,  pdswtlineinitialize, out pdswtline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineInitialize - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtlineinitialize); 
    
         if (pdswtline.ttblwtline.Count > 0)
         {
            result.wtline = Wtline.BuildWtlineFromRow(pdswtline.ttblwtline[0]);
         }
                    
         if (pdswtline.ttblwtlinecriteria.Count > 0)
         {
            result.wtlinecriteria = Wtlinecriteria.BuildWtlinecriteriaFromRow(pdswtline.ttblwtlinecriteria[0]);
         }
                    
         foreach (DataRow row in pdswtline.ttblwtlnties)
         {
            result.wtlnties.Add(Wtlnties.BuildWtlntiesFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> WTETLineSerialLotRemove(Wtserlotcriteria wtserlotcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdswtserlot = new pdswtserlotDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtserlotcriteriaCriteria = pdswtserlot.ttblwtserlotcriteria.NewttblwtserlotcriteriaRow();
         Wtserlotcriteria.UpdateRowFromWtserlotcriteria(ref ttblwtserlotcriteriaCriteria, wtserlotcriteria);
         pdswtserlot.ttblwtserlotcriteria.AddttblwtserlotcriteriaRow((pdswtserlotDataSet.ttblwtserlotcriteriaRow)ttblwtserlotcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETLineSerialLotRemove - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTETLineSerialLotRemove(ref pdsContext,  pdswtserlot, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETLineSerialLotRemove - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtserlot); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AswtlineWTETRetrieveLinesResponseAPI WTETRetrieveLines(Wtlnlistcriteria wtlnlistcriteria)
      {   
         var result = new AswtlineWTETRetrieveLinesResponseAPI();
         
         var pdswtlinelist = new pdswtlinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwtlnlistcriteriaCriteria = pdswtlinelist.ttblwtlnlistcriteria.NewttblwtlnlistcriteriaRow();
         Wtlnlistcriteria.UpdateRowFromWtlnlistcriteria(ref ttblwtlnlistcriteriaCriteria, wtlnlistcriteria);
         pdswtlinelist.ttblwtlnlistcriteria.AddttblwtlnlistcriteriaRow((pdswtlinelistDataSet.ttblwtlnlistcriteriaRow)ttblwtlnlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTETRetrieveLines - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTETRetrieveLines(ref pdsContext, ref pdswtlinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTETRetrieveLines - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtlinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswtlinelist.ttblwtlines)
         {
            result.wtlines.Add(Wtlines.BuildWtlinesFromRow(row));
         }     
          
         return result;
          
      }

      public AswtlineWTEELinesRetrieveResponseAPI WTEELinesRetrieve(int iWtNo, int iWtSuf, int iJrnlNo)
      {   
         var result = new AswtlineWTEELinesRetrieveResponseAPI();
         
         var pdswteelines = new pdswteelinesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WTEELinesRetrieve - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTEELinesRetrieve(ref pdsContext,  iWtNo,  iWtSuf,  iJrnlNo, out pdswteelines, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEELinesRetrieve - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteelines); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswteelines.ttblwteelines)
         {
            result.wteelines.Add(Wteelines.BuildWteelinesFromRow(row));
         }     
         if (pdswteelines.ttblwteelinesummary.Count > 0)
         {
            result.wteelinesummary = Wteelinesummary.BuildWteelinesummaryFromRow(pdswteelines.ttblwteelinesummary[0]);
         }
                    
          
         return result;
          
      }

      public AswtlineWTEELineUpdateResponseAPI WTEELineUpdate(AswtlineWTEELineUpdateRequestAPI AswtlineWTEELineUpdateRequestAPI)
      {   
         var result = new AswtlineWTEELineUpdateResponseAPI();
         
         var pdswteelines = new pdswteelinesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AswtlineWTEELineUpdateRequestAPI.wteelines)
         {
            DataRow ttblwteelinesRow = pdswteelines.ttblwteelines.NewttblwteelinesRow();
            Wteelines.UpdateRowFromWteelines(ref ttblwteelinesRow, obj);
            pdswteelines.ttblwteelines.AddttblwteelinesRow((pdswteelinesDataSet.ttblwteelinesRow)ttblwteelinesRow);
         }
          
         DataRow ttblwteelinesummaryRow = pdswteelines.ttblwteelinesummary.NewttblwteelinesummaryRow();
         Wteelinesummary.UpdateRowFromWteelinesummary(ref ttblwteelinesummaryRow, AswtlineWTEELineUpdateRequestAPI.wteelinesummary);
         pdswteelines.ttblwteelinesummary.AddttblwteelinesummaryRow((pdswteelinesDataSet.ttblwteelinesummaryRow)ttblwteelinesummaryRow);
          
         var  cActionType = AswtlineWTEELineUpdateRequestAPI.cActionType;
            
         var  cReasUnAvTy = AswtlineWTEELineUpdateRequestAPI.cReasUnAvTy;
            
         
         NLogLoggerP.Trace("WTEELineUpdate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTEELineUpdate(ref pdsContext,  cActionType,  cReasUnAvTy, ref pdswteelines, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTEELineUpdate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswteelines); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdswteelines.ttblwteelines)
         {
            result.wteelines.Add(Wteelines.BuildWteelinesFromRow(row));
         }     
         if (pdswteelines.ttblwteelinesummary.Count > 0)
         {
            result.wteelinesummary = Wteelinesummary.BuildWteelinesummaryFromRow(pdswteelines.ttblwteelinesummary[0]);
         }
                    
          
         return result;
          
      }

      public AswtlineWTLineValidateResponseAPI WTLineValidate(AswtlineWTLineValidateRequestAPI AswtlineWTLineValidateRequestAPI)
      {   
         var result = new AswtlineWTLineValidateResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdsoelinexrefprod = new pdsoelinexrefprodDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineValidateRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinecriteriaRow = pdswtline.ttblwtlinecriteria.NewttblwtlinecriteriaRow();
         Wtlinecriteria.UpdateRowFromWtlinecriteria(ref ttblwtlinecriteriaRow, AswtlineWTLineValidateRequestAPI.wtlinecriteria);
         pdswtline.ttblwtlinecriteria.AddttblwtlinecriteriaRow((pdswtlineDataSet.ttblwtlinecriteriaRow)ttblwtlinecriteriaRow);
          
         foreach (var obj in AswtlineWTLineValidateRequestAPI.wtlnties)
         {
            DataRow ttblwtlntiesRow = pdswtline.ttblwtlnties.NewttblwtlntiesRow();
            Wtlnties.UpdateRowFromWtlnties(ref ttblwtlntiesRow, obj);
            pdswtline.ttblwtlnties.AddttblwtlntiesRow((pdswtlineDataSet.ttblwtlntiesRow)ttblwtlntiesRow);
         }
          
         var  lMaintMode = AswtlineWTLineValidateRequestAPI.lMaintMode;
            
         var  cChangeList = AswtlineWTLineValidateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("WTLineValidate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineValidate(ref pdsContext,  lMaintMode,  cChangeList, ref pdswtline, out pdsoelinexrefprod, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("WTLineValidate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinexrefprod.ttbloelinexrefprodlist)
         {
            result.oelinexrefprodlist.Add(Oelinexrefprodlist.BuildOelinexrefprodlistFromRow(row));
         }     
         if (pdswtline.ttblwtline.Count > 0)
         {
            result.wtline = Wtline.BuildWtlineFromRow(pdswtline.ttblwtline[0]);
         }
                    
         foreach (DataRow row in pdswtline.ttblwtlnties)
         {
            result.wtlnties.Add(Wtlnties.BuildWtlntiesFromRow(row));
         }     
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AswtlineWTLineNonStockRetrieveResponseAPI WTLineNonStockRetrieve(AswtlineWTLineNonStockRetrieveRequestAPI AswtlineWTLineNonStockRetrieveRequestAPI)
      {   
         var result = new AswtlineWTLineNonStockRetrieveResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdswtlinenonstockhdr = new pdswtlinenonstockhdrDataSet();
            
         var pdswtlinenonstock = new pdswtlinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineNonStockRetrieveRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinenonstockhdrRow = pdswtlinenonstockhdr.ttblwtlinenonstockhdr.NewttblwtlinenonstockhdrRow();
         Wtlinenonstockhdr.UpdateRowFromWtlinenonstockhdr(ref ttblwtlinenonstockhdrRow, AswtlineWTLineNonStockRetrieveRequestAPI.wtlinenonstockhdr);
         pdswtlinenonstockhdr.ttblwtlinenonstockhdr.AddttblwtlinenonstockhdrRow((pdswtlinenonstockhdrDataSet.ttblwtlinenonstockhdrRow)ttblwtlinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("WTLineNonStockRetrieve - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineNonStockRetrieve(ref pdsContext,  pdswtline,  pdswtlinenonstockhdr, out pdswtlinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineNonStockRetrieve - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtlinenonstock.ttblwtlinenonstock.Count > 0)
         {
            result.wtlinenonstock = Wtlinenonstock.BuildWtlinenonstockFromRow(pdswtlinenonstock.ttblwtlinenonstock[0]);
         }
                    
          
         return result;
          
      }

      public AswtlineWTLineNonStockValidateResponseAPI WTLineNonStockValidate(AswtlineWTLineNonStockValidateRequestAPI AswtlineWTLineNonStockValidateRequestAPI)
      {   
         var result = new AswtlineWTLineNonStockValidateResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdswtlinenonstockhdr = new pdswtlinenonstockhdrDataSet();
            
         var pdswtlinenonstock = new pdswtlinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineNonStockValidateRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinenonstockRow = pdswtlinenonstock.ttblwtlinenonstock.NewttblwtlinenonstockRow();
         Wtlinenonstock.UpdateRowFromWtlinenonstock(ref ttblwtlinenonstockRow, AswtlineWTLineNonStockValidateRequestAPI.wtlinenonstock);
         pdswtlinenonstock.ttblwtlinenonstock.AddttblwtlinenonstockRow((pdswtlinenonstockDataSet.ttblwtlinenonstockRow)ttblwtlinenonstockRow);
          
         DataRow ttblwtlinenonstockhdrRow = pdswtlinenonstockhdr.ttblwtlinenonstockhdr.NewttblwtlinenonstockhdrRow();
         Wtlinenonstockhdr.UpdateRowFromWtlinenonstockhdr(ref ttblwtlinenonstockhdrRow, AswtlineWTLineNonStockValidateRequestAPI.wtlinenonstockhdr);
         pdswtlinenonstockhdr.ttblwtlinenonstockhdr.AddttblwtlinenonstockhdrRow((pdswtlinenonstockhdrDataSet.ttblwtlinenonstockhdrRow)ttblwtlinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("WTLineNonStockValidate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineNonStockValidate(ref pdsContext,  pdswtline,  pdswtlinenonstockhdr, ref pdswtlinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineNonStockValidate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtlinenonstock.ttblwtlinenonstock.Count > 0)
         {
            result.wtlinenonstock = Wtlinenonstock.BuildWtlinenonstockFromRow(pdswtlinenonstock.ttblwtlinenonstock[0]);
         }
                    
          
         return result;
          
      }

      public AswtlineWTLineNonStockFinalResponseAPI WTLineNonStockFinal(AswtlineWTLineNonStockFinalRequestAPI AswtlineWTLineNonStockFinalRequestAPI)
      {   
         var result = new AswtlineWTLineNonStockFinalResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdswtlinenonstockhdr = new pdswtlinenonstockhdrDataSet();
            
         var pdswtlinenonstock = new pdswtlinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineNonStockFinalRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinenonstockRow = pdswtlinenonstock.ttblwtlinenonstock.NewttblwtlinenonstockRow();
         Wtlinenonstock.UpdateRowFromWtlinenonstock(ref ttblwtlinenonstockRow, AswtlineWTLineNonStockFinalRequestAPI.wtlinenonstock);
         pdswtlinenonstock.ttblwtlinenonstock.AddttblwtlinenonstockRow((pdswtlinenonstockDataSet.ttblwtlinenonstockRow)ttblwtlinenonstockRow);
          
         DataRow ttblwtlinenonstockhdrRow = pdswtlinenonstockhdr.ttblwtlinenonstockhdr.NewttblwtlinenonstockhdrRow();
         Wtlinenonstockhdr.UpdateRowFromWtlinenonstockhdr(ref ttblwtlinenonstockhdrRow, AswtlineWTLineNonStockFinalRequestAPI.wtlinenonstockhdr);
         pdswtlinenonstockhdr.ttblwtlinenonstockhdr.AddttblwtlinenonstockhdrRow((pdswtlinenonstockhdrDataSet.ttblwtlinenonstockhdrRow)ttblwtlinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("WTLineNonStockFinal - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineNonStockFinal(ref pdsContext,  pdswtline,  pdswtlinenonstockhdr, ref pdswtlinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineNonStockFinal - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtlinenonstock.ttblwtlinenonstock.Count > 0)
         {
            result.wtlinenonstock = Wtlinenonstock.BuildWtlinenonstockFromRow(pdswtlinenonstock.ttblwtlinenonstock[0]);
         }
                    
          
         return result;
          
      }

      public AswtlineWTLineNonStockLeaveFieldResponseAPI WTLineNonStockLeaveField(AswtlineWTLineNonStockLeaveFieldRequestAPI AswtlineWTLineNonStockLeaveFieldRequestAPI)
      {   
         var result = new AswtlineWTLineNonStockLeaveFieldResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdswtlinenonstockhdr = new pdswtlinenonstockhdrDataSet();
            
         var pdswtlinenonstock = new pdswtlinenonstockDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineNonStockLeaveFieldRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinenonstockRow = pdswtlinenonstock.ttblwtlinenonstock.NewttblwtlinenonstockRow();
         Wtlinenonstock.UpdateRowFromWtlinenonstock(ref ttblwtlinenonstockRow, AswtlineWTLineNonStockLeaveFieldRequestAPI.wtlinenonstock);
         pdswtlinenonstock.ttblwtlinenonstock.AddttblwtlinenonstockRow((pdswtlinenonstockDataSet.ttblwtlinenonstockRow)ttblwtlinenonstockRow);
          
         DataRow ttblwtlinenonstockhdrRow = pdswtlinenonstockhdr.ttblwtlinenonstockhdr.NewttblwtlinenonstockhdrRow();
         Wtlinenonstockhdr.UpdateRowFromWtlinenonstockhdr(ref ttblwtlinenonstockhdrRow, AswtlineWTLineNonStockLeaveFieldRequestAPI.wtlinenonstockhdr);
         pdswtlinenonstockhdr.ttblwtlinenonstockhdr.AddttblwtlinenonstockhdrRow((pdswtlinenonstockhdrDataSet.ttblwtlinenonstockhdrRow)ttblwtlinenonstockhdrRow);
          
         var  cFieldName = AswtlineWTLineNonStockLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("WTLineNonStockLeaveField - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineNonStockLeaveField(ref pdsContext,  cFieldName,  pdswtline,  pdswtlinenonstockhdr, ref pdswtlinenonstock, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("WTLineNonStockLeaveField - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         if (pdswtlinenonstock.ttblwtlinenonstock.Count > 0)
         {
            result.wtlinenonstock = Wtlinenonstock.BuildWtlinenonstockFromRow(pdswtlinenonstock.ttblwtlinenonstock[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AswtlineWTLineTieValidateResponseAPI WTLineTieValidate(AswtlineWTLineTieValidateRequestAPI AswtlineWTLineTieValidateRequestAPI)
      {   
         var result = new AswtlineWTLineTieValidateResponseAPI();
         
         var pdswtline = new pdswtlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwtlineRow = pdswtline.ttblwtline.NewttblwtlineRow();
         Wtline.UpdateRowFromWtline(ref ttblwtlineRow, AswtlineWTLineTieValidateRequestAPI.wtline);
         pdswtline.ttblwtline.AddttblwtlineRow((pdswtlineDataSet.ttblwtlineRow)ttblwtlineRow);
          
         DataRow ttblwtlinecriteriaRow = pdswtline.ttblwtlinecriteria.NewttblwtlinecriteriaRow();
         Wtlinecriteria.UpdateRowFromWtlinecriteria(ref ttblwtlinecriteriaRow, AswtlineWTLineTieValidateRequestAPI.wtlinecriteria);
         pdswtline.ttblwtlinecriteria.AddttblwtlinecriteriaRow((pdswtlineDataSet.ttblwtlinecriteriaRow)ttblwtlinecriteriaRow);
          
         DataRow ttblwtlntiesRow = pdswtline.ttblwtlnties.NewttblwtlntiesRow();
         Wtlnties.UpdateRowFromWtlnties(ref ttblwtlntiesRow, AswtlineWTLineTieValidateRequestAPI.wtlnties);
         pdswtline.ttblwtlnties.AddttblwtlntiesRow((pdswtlineDataSet.ttblwtlntiesRow)ttblwtlntiesRow);
          
         
         NLogLoggerP.Trace("WTLineTieValidate - Aswtline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswtlineproxy = this.proxyAppObject.CreatePO_aswtlineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswtlineproxy.WTLineTieValidate(ref pdsContext, ref pdswtline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WTLineTieValidate - Aswtline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswtline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswtline.ttblwtlnties.Count > 0)
         {
            result.wtlnties = Wtlnties.BuildWtlntiesFromRow(pdswtline.ttblwtlnties[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  