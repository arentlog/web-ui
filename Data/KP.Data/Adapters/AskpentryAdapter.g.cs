//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.KP.Data.Adapters
{
   using com.infor.sxproxy.kpproxy;
   using com.infor.sxproxy.kpproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsoelinelinetiehdr;
   using Models.Pdsoelinelinetie;
   using Models.Pdsmessaging;
   using Models.Pdskpewselected;
   using Models.Pdsicentrylots;
   using Models.Pdsicentryserials;
   using Models.Pdskpewload;
   using Models.Pdskpewextend;
   using Models.Pdskpewfinal;
   using Models.Pdskpewprint;
   using Models.Pdsprintersettings;
   using Models.Pdskpewactions;
   using Models.Pdskpewavail;
   using Models.Pdskpewties;
   using Models.Pdskpewupdate;
   using Models.Pdskpeuupdate;
   using Models.Pdskpworkorder;
   using Models.Pdskpqentry;
   using Models.Pdskpworkorderlist;
   using Models.Pdsmultilinesourcing;
   using Models.Pdsloadtcomps;
   using Models.Pdskitcreatedetailstt;
   using Models.Complex;

   public partial class AskpentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private KPProxyAppObject proxyAppObject;
      
      public AskpentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new KPProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AskpentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AskpentryKPCompTieLeaveFieldResponseAPI KPCompTieLeaveField(AskpentryKPCompTieLeaveFieldRequestAPI AskpentryKPCompTieLeaveFieldRequestAPI)
      {   
         var result = new AskpentryKPCompTieLeaveFieldResponseAPI();
         
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AskpentryKPCompTieLeaveFieldRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompTieLeaveFieldRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         var  cFieldName = AskpentryKPCompTieLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("KPCompTieLeaveField - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompTieLeaveField(ref pdsContext,  cFieldName,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompTieLeaveField - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelinetiehdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Oelinelinetie> KPCompTieRetrieve(Oelinelinetiehdr oelinelinetiehdr)
      {   
         var results = new List<Oelinelinetie>();
         
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         DataRow ttbloelinelinetiehdrCriteria = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrCriteria, oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPCompTieRetrieve - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompTieRetrieve(ref pdsContext,  pdsoelinelinetiehdr, out pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompTieRetrieve - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelinetiehdr); 
    
            foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
            {
                results.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> KPCompTieUpdate(AskpentryKPCompTieUpdateRequestAPI AskpentryKPCompTieUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AskpentryKPCompTieUpdateRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompTieUpdateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("KPCompTieUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompTieUpdate(ref pdsContext,  pdsoelinelinetiehdr,  pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompTieUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelinetiehdr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AskpentryKPCompTieValidateResponseAPI KPCompTieValidate(AskpentryKPCompTieValidateRequestAPI AskpentryKPCompTieValidateRequestAPI)
      {   
         var result = new AskpentryKPCompTieValidateResponseAPI();
         
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AskpentryKPCompTieValidateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompTieValidateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("KPCompTieValidate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompTieValidate(ref pdsContext,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompTieValidate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelinetiehdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public Icentrylotscriteria KPEWBuildLotCriteria(Kpewselected kpewselected)
      {   
         var result = new Icentrylotscriteria();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWBuildLotCriteria - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWBuildLotCriteria(ref pdsContext,  pdskpewselected, out pdsicentrylots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWBuildLotCriteria - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0) 
         { 
             result = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         } 
              
          
         return result;
          
      }

      public Icentryserialscriteria KPEWBuildSerialCriteria(Kpewselected kpewselected)
      {   
         var result = new Icentryserialscriteria();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWBuildSerialCriteria - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWBuildSerialCriteria(ref pdsContext,  pdskpewselected, out pdsicentryserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWBuildSerialCriteria - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0) 
         { 
             result = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         } 
              
          
         return result;
          
      }

      public AskpentryKPEWLoadTTResponseAPI KPEWLoadTT(Kpewloadcriteria kpewloadcriteria)
      {   
         var result = new AskpentryKPEWLoadTTResponseAPI();
         
         var pdskpewload = new pdskpewloadDataSet();
            
         DataRow ttblkpewloadcriteriaCriteria = pdskpewload.ttblkpewloadcriteria.NewttblkpewloadcriteriaRow();
         Kpewloadcriteria.UpdateRowFromKpewloadcriteria(ref ttblkpewloadcriteriaCriteria, kpewloadcriteria);
         pdskpewload.ttblkpewloadcriteria.AddttblkpewloadcriteriaRow((pdskpewloadDataSet.ttblkpewloadcriteriaRow)ttblkpewloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("KPEWLoadTT - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWLoadTT(ref pdsContext, ref pdskpewload, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("KPEWLoadTT - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewload); 
    
         foreach (DataRow row in pdskpewload.ttblkpewloadresults)
         {
            result.kpewloadresults.Add(Kpewloadresults.BuildKpewloadresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Kpewextend KPEWExtendInit(Kpewselected kpewselected)
      {   
         var result = new Kpewextend();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdskpewextend = new pdskpewextendDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWExtendInit - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWExtendInit(ref pdsContext,  pdskpewselected, out pdskpewextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWExtendInit - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdskpewextend.ttblkpewextend.Count > 0) 
         { 
             result = Kpewextend.BuildKpewextendFromRow(pdskpewextend.ttblkpewextend[0]);
         } 
              
          
         return result;
          
      }

      public Kpewextend KPEWExtendUpdt(Kpewextend kpewextend)
      {   
         var result = new Kpewextend();
         
         var pdskpewextend = new pdskpewextendDataSet();
            
         DataRow ttblkpewextendCriteria = pdskpewextend.ttblkpewextend.NewttblkpewextendRow();
         Kpewextend.UpdateRowFromKpewextend(ref ttblkpewextendCriteria, kpewextend);
         pdskpewextend.ttblkpewextend.AddttblkpewextendRow((pdskpewextendDataSet.ttblkpewextendRow)ttblkpewextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWExtendUpdt - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWExtendUpdt(ref pdsContext, ref pdskpewextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWExtendUpdt - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewextend); 
    
         if (pdskpewextend.ttblkpewextend.Count > 0) 
         { 
             result = Kpewextend.BuildKpewextendFromRow(pdskpewextend.ttblkpewextend[0]);
         } 
              
          
         return result;
          
      }

      public Kpewfinal KPEWFinalInit(Kpewfinal kpewfinal)
      {   
         var result = new Kpewfinal();
         
         var pdskpewfinal = new pdskpewfinalDataSet();
            
         DataRow ttblkpewfinalCriteria = pdskpewfinal.ttblkpewfinal.NewttblkpewfinalRow();
         Kpewfinal.UpdateRowFromKpewfinal(ref ttblkpewfinalCriteria, kpewfinal);
         pdskpewfinal.ttblkpewfinal.AddttblkpewfinalRow((pdskpewfinalDataSet.ttblkpewfinalRow)ttblkpewfinalCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWFinalInit - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWFinalInit(ref pdsContext, ref pdskpewfinal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWFinalInit - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewfinal); 
    
         if (pdskpewfinal.ttblkpewfinal.Count > 0) 
         { 
             result = Kpewfinal.BuildKpewfinalFromRow(pdskpewfinal.ttblkpewfinal[0]);
         } 
              
          
         return result;
          
      }

      public Kpewfinal KPEWFinalUpdt(Kpewfinal kpewfinal)
      {   
         var result = new Kpewfinal();
         
         var pdskpewfinal = new pdskpewfinalDataSet();
            
         DataRow ttblkpewfinalCriteria = pdskpewfinal.ttblkpewfinal.NewttblkpewfinalRow();
         Kpewfinal.UpdateRowFromKpewfinal(ref ttblkpewfinalCriteria, kpewfinal);
         pdskpewfinal.ttblkpewfinal.AddttblkpewfinalRow((pdskpewfinalDataSet.ttblkpewfinalRow)ttblkpewfinalCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWFinalUpdt - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWFinalUpdt(ref pdsContext, ref pdskpewfinal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWFinalUpdt - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewfinal); 
    
         if (pdskpewfinal.ttblkpewfinal.Count > 0) 
         { 
             result = Kpewfinal.BuildKpewfinalFromRow(pdskpewfinal.ttblkpewfinal[0]);
         } 
              
          
         return result;
          
      }

      public Kpewprint KPEWPrintInit(Kpewprint kpewprint)
      {   
         var result = new Kpewprint();
         
         var pdskpewprint = new pdskpewprintDataSet();
            
         DataRow ttblkpewprintCriteria = pdskpewprint.ttblkpewprint.NewttblkpewprintRow();
         Kpewprint.UpdateRowFromKpewprint(ref ttblkpewprintCriteria, kpewprint);
         pdskpewprint.ttblkpewprint.AddttblkpewprintRow((pdskpewprintDataSet.ttblkpewprintRow)ttblkpewprintCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWPrintInit - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWPrintInit(ref pdsContext, ref pdskpewprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWPrintInit - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewprint); 
    
         if (pdskpewprint.ttblkpewprint.Count > 0) 
         { 
             result = Kpewprint.BuildKpewprintFromRow(pdskpewprint.ttblkpewprint[0]);
         } 
              
          
         return result;
          
      }

      public Kpewprint KPEWPrintRun(AskpentryKPEWPrintRunRequestAPI AskpentryKPEWPrintRunRequestAPI)
      {   
         var result = new Kpewprint();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdskpewprint = new pdskpewprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkpewprintRow = pdskpewprint.ttblkpewprint.NewttblkpewprintRow();
         Kpewprint.UpdateRowFromKpewprint(ref ttblkpewprintRow, AskpentryKPEWPrintRunRequestAPI.kpewprint);
         pdskpewprint.ttblkpewprint.AddttblkpewprintRow((pdskpewprintDataSet.ttblkpewprintRow)ttblkpewprintRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AskpentryKPEWPrintRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("KPEWPrintRun - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWPrintRun(ref pdsContext,  pdsprintersettings, ref pdskpewprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWPrintRun - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         if (pdskpewprint.ttblkpewprint.Count > 0) 
         { 
             result = Kpewprint.BuildKpewprintFromRow(pdskpewprint.ttblkpewprint[0]);
         } 
              
          
         return result;
          
      }

      public AskpentryKPEWRowSelectedResponseAPI KPEWRowSelected(Kpewselected kpewselected)
      {   
         var result = new AskpentryKPEWRowSelectedResponseAPI();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdskpewactions = new pdskpewactionsDataSet();
            
         var pdskpewavail = new pdskpewavailDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWRowSelected - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWRowSelected(ref pdsContext,  pdskpewselected, out pdskpewactions, out pdskpewavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWRowSelected - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdskpewactions.ttblkpewactions.Count > 0)
         {
            result.kpewactions = Kpewactions.BuildKpewactionsFromRow(pdskpewactions.ttblkpewactions[0]);
         }
                    
         if (pdskpewavail.ttblkpewavail.Count > 0)
         {
            result.kpewavail = Kpewavail.BuildKpewavailFromRow(pdskpewavail.ttblkpewavail[0]);
         }
                    
          
         return result;
          
      }

      public AskpentryKPEWTiesResponseAPI KPEWTies(Kpewselected kpewselected)
      {   
         var result = new AskpentryKPEWTiesResponseAPI();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdskpewties = new pdskpewtiesDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWTies - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWTies(ref pdsContext,  pdskpewselected, out pdskpewties, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWTies - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdskpewties.ttblkpewtie.Count > 0)
         {
            result.kpewtie = Kpewtie.BuildKpewtieFromRow(pdskpewties.ttblkpewtie[0]);
         }
                    
         foreach (DataRow row in pdskpewties.ttblkpewtiesresults)
         {
            result.kpewtiesresults.Add(Kpewtiesresults.BuildKpewtiesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AskpentryKPEWUpdateResponseAPI KPEWUpdate(Kpewselected kpewselected)
      {   
         var result = new AskpentryKPEWUpdateResponseAPI();
         
         var pdskpewselected = new pdskpewselectedDataSet();
            
         var pdskpewupdate = new pdskpewupdateDataSet();
            
         var pdskpewavail = new pdskpewavailDataSet();
            
         DataRow ttblkpewselectedCriteria = pdskpewselected.ttblkpewselected.NewttblkpewselectedRow();
         Kpewselected.UpdateRowFromKpewselected(ref ttblkpewselectedCriteria, kpewselected);
         pdskpewselected.ttblkpewselected.AddttblkpewselectedRow((pdskpewselectedDataSet.ttblkpewselectedRow)ttblkpewselectedCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEWUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEWUpdate(ref pdsContext,  pdskpewselected, out pdskpewupdate, out pdskpewavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEWUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpewselected); 
    
         if (pdskpewavail.ttblkpewavail.Count > 0)
         {
            result.kpewavail = Kpewavail.BuildKpewavailFromRow(pdskpewavail.ttblkpewavail[0]);
         }
                    
         if (pdskpewupdate.ttblkpewupdate.Count > 0)
         {
            result.kpewupdate = Kpewupdate.BuildKpewupdateFromRow(pdskpewupdate.ttblkpewupdate[0]);
         }
                    
          
         return result;
          
      }

      public AskpentryKPEULoadTTResponseAPI KPEULoadTT(string cKitProd)
      {   
         var result = new AskpentryKPEULoadTTResponseAPI();
         
         var pdskpeuupdate = new pdskpeuupdateDataSet();
            
         int iVerNo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEULoadTT - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEULoadTT(ref pdsContext,  cKitProd, out pdskpeuupdate, out iVerNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEULoadTT - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpeuupdate); 
    
         foreach (DataRow row in pdskpeuupdate.ttblkpeuupdate)
         {
            result.kpeuupdate.Add(Kpeuupdate.BuildKpeuupdateFromRow(row));
         }     
         result.iVerNo = iVerNo;
          
         return result;
          
      }

      public void KPEUUpdate(Kpeuupdate kpeuupdate)
      {   
         
         var pdskpeuupdate = new pdskpeuupdateDataSet();
            
         DataRow ttblkpeuupdateCriteria = pdskpeuupdate.ttblkpeuupdate.NewttblkpeuupdateRow();
         Kpeuupdate.UpdateRowFromKpeuupdate(ref ttblkpeuupdateCriteria, kpeuupdate);
         pdskpeuupdate.ttblkpeuupdate.AddttblkpeuupdateRow((pdskpeuupdateDataSet.ttblkpeuupdateRow)ttblkpeuupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPEUUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPEUUpdate(ref pdsContext,  pdskpeuupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPEUUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpeuupdate);
      }

      public Kpworkorder KPWorkOrderCancel(Kpworkorder kpworkorder)
      {   
         var result = new Kpworkorder();
         
         var pdskpworkorder = new pdskpworkorderDataSet();
            
         DataRow ttblkpworkorderCriteria = pdskpworkorder.ttblkpworkorder.NewttblkpworkorderRow();
         Kpworkorder.UpdateRowFromKpworkorder(ref ttblkpworkorderCriteria, kpworkorder);
         pdskpworkorder.ttblkpworkorder.AddttblkpworkorderRow((pdskpworkorderDataSet.ttblkpworkorderRow)ttblkpworkorderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPWorkOrderCancel - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPWorkOrderCancel(ref pdsContext, ref pdskpworkorder, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPWorkOrderCancel - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpworkorder); 
    
         if (pdskpworkorder.ttblkpworkorder.Count > 0) 
         { 
             result = Kpworkorder.BuildKpworkorderFromRow(pdskpworkorder.ttblkpworkorder[0]);
         } 
              
          
         return result;
          
      }

      public AskpentryKPWorkOrderCreateResponseAPI KPWorkOrderCreate(Kpqentrycriteria kpqentrycriteria)
      {   
         var result = new AskpentryKPWorkOrderCreateResponseAPI();
         
         var pdskpqentry = new pdskpqentryDataSet();
            
         var pdskpworkorder = new pdskpworkorderDataSet();
            
         var pdskpewavail = new pdskpewavailDataSet();
            
         DataRow ttblkpqentrycriteriaCriteria = pdskpqentry.ttblkpqentrycriteria.NewttblkpqentrycriteriaRow();
         Kpqentrycriteria.UpdateRowFromKpqentrycriteria(ref ttblkpqentrycriteriaCriteria, kpqentrycriteria);
         pdskpqentry.ttblkpqentrycriteria.AddttblkpqentrycriteriaRow((pdskpqentryDataSet.ttblkpqentrycriteriaRow)ttblkpqentrycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPWorkOrderCreate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPWorkOrderCreate(ref pdsContext, ref pdskpqentry, out pdskpworkorder, out pdskpewavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPWorkOrderCreate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpqentry); 
    
         if (pdskpewavail.ttblkpewavail.Count > 0)
         {
            result.kpewavail = Kpewavail.BuildKpewavailFromRow(pdskpewavail.ttblkpewavail[0]);
         }
                    
         if (pdskpqentry.ttblkpqentryresults.Count > 0)
         {
            result.kpqentryresults = Kpqentryresults.BuildKpqentryresultsFromRow(pdskpqentry.ttblkpqentryresults[0]);
         }
                    
         if (pdskpworkorder.ttblkpworkorder.Count > 0)
         {
            result.kpworkorder = Kpworkorder.BuildKpworkorderFromRow(pdskpworkorder.ttblkpworkorder[0]);
         }
                    
          
         return result;
          
      }

      public AskpentryKPWorkOrderUpdateResponseAPI KPWorkOrderUpdate(AskpentryKPWorkOrderUpdateRequestAPI AskpentryKPWorkOrderUpdateRequestAPI)
      {   
         var result = new AskpentryKPWorkOrderUpdateResponseAPI();
         
         var pdskpworkorder = new pdskpworkorderDataSet();
            
         var pdskpworkorderlist = new pdskpworkorderlistDataSet();
            
         var pdskpewavail = new pdskpewavailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkpworkorderRow = pdskpworkorder.ttblkpworkorder.NewttblkpworkorderRow();
         Kpworkorder.UpdateRowFromKpworkorder(ref ttblkpworkorderRow, AskpentryKPWorkOrderUpdateRequestAPI.kpworkorder);
         pdskpworkorder.ttblkpworkorder.AddttblkpworkorderRow((pdskpworkorderDataSet.ttblkpworkorderRow)ttblkpworkorderRow);
          
         foreach (var obj in AskpentryKPWorkOrderUpdateRequestAPI.kpworkorderlist)
         {
            DataRow ttblkpworkorderlistRow = pdskpworkorderlist.ttblkpworkorderlist.NewttblkpworkorderlistRow();
            Kpworkorderlist.UpdateRowFromKpworkorderlist(ref ttblkpworkorderlistRow, obj);
            pdskpworkorderlist.ttblkpworkorderlist.AddttblkpworkorderlistRow((pdskpworkorderlistDataSet.ttblkpworkorderlistRow)ttblkpworkorderlistRow);
         }
          
         
         NLogLoggerP.Trace("KPWorkOrderUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPWorkOrderUpdate(ref pdsContext, ref pdskpworkorder, ref pdskpworkorderlist, out pdskpewavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPWorkOrderUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpworkorder); 
    
         if (pdskpewavail.ttblkpewavail.Count > 0)
         {
            result.kpewavail = Kpewavail.BuildKpewavailFromRow(pdskpewavail.ttblkpewavail[0]);
         }
                    
         if (pdskpworkorder.ttblkpworkorder.Count > 0)
         {
            result.kpworkorder = Kpworkorder.BuildKpworkorderFromRow(pdskpworkorder.ttblkpworkorder[0]);
         }
                    
         foreach (DataRow row in pdskpworkorderlist.ttblkpworkorderlist)
         {
            result.kpworkorderlist.Add(Kpworkorderlist.BuildKpworkorderlistFromRow(row));
         }     
          
         return result;
          
      }

      public Multilinesourcing KPMultiCompSourcingPreValidate(AskpentryKPMultiCompSourcingPreValidateRequestAPI AskpentryKPMultiCompSourcingPreValidateRequestAPI)
      {   
         var result = new Multilinesourcing();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AskpentryKPMultiCompSourcingPreValidateRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         DataRow ttblloadtcompssingleRow = pdsloadtcomps.ttblloadtcompssingle.NewttblloadtcompssingleRow();
         Loadtcompssingle.UpdateRowFromLoadtcompssingle(ref ttblloadtcompssingleRow, AskpentryKPMultiCompSourcingPreValidateRequestAPI.loadtcompssingle);
         pdsloadtcomps.ttblloadtcompssingle.AddttblloadtcompssingleRow((pdsloadtcompsDataSet.ttblloadtcompssingleRow)ttblloadtcompssingleRow);
          
         foreach (var obj in AskpentryKPMultiCompSourcingPreValidateRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AskpentryKPMultiCompSourcingPreValidateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         
         NLogLoggerP.Trace("KPMultiCompSourcingPreValidate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPMultiCompSourcingPreValidate(ref pdsContext, ref pdsmultilinesourcing,  pdsloadtcomps, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPMultiCompSourcingPreValidate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
         if (pdsmultilinesourcing.ttblmultilinesourcing.Count > 0) 
         { 
             result = Multilinesourcing.BuildMultilinesourcingFromRow(pdsmultilinesourcing.ttblmultilinesourcing[0]);
         } 
              
          
         return result;
          
      }

      public AskpentryKPMultiCompSourcingUpdateResponseAPI KPMultiCompSourcingUpdate(AskpentryKPMultiCompSourcingUpdateRequestAPI AskpentryKPMultiCompSourcingUpdateRequestAPI)
      {   
         var result = new AskpentryKPMultiCompSourcingUpdateResponseAPI();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AskpentryKPMultiCompSourcingUpdateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         foreach (var obj in AskpentryKPMultiCompSourcingUpdateRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         
         NLogLoggerP.Trace("KPMultiCompSourcingUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPMultiCompSourcingUpdate(ref pdsContext,  pdsmultilinesourcing, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPMultiCompSourcingUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AskpentryKPCompAddTieLeaveFieldResponseAPI KPCompAddTieLeaveField(AskpentryKPCompAddTieLeaveFieldRequestAPI AskpentryKPCompAddTieLeaveFieldRequestAPI)
      {   
         var result = new AskpentryKPCompAddTieLeaveFieldResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AskpentryKPCompAddTieLeaveFieldRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AskpentryKPCompAddTieLeaveFieldRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AskpentryKPCompAddTieLeaveFieldRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompAddTieLeaveFieldRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         var  cFieldName = AskpentryKPCompAddTieLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("KPCompAddTieLeaveField - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompAddTieLeaveField(ref pdsContext,  cFieldName,  pdskitcreatedetailstt,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompAddTieLeaveField - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AskpentryKPCompAddTieValidateResponseAPI KPCompAddTieValidate(AskpentryKPCompAddTieValidateRequestAPI AskpentryKPCompAddTieValidateRequestAPI)
      {   
         var result = new AskpentryKPCompAddTieValidateResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AskpentryKPCompAddTieValidateRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AskpentryKPCompAddTieValidateRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AskpentryKPCompAddTieValidateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompAddTieValidateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("KPCompAddTieValidate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompAddTieValidate(ref pdsContext,  pdskitcreatedetailstt,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompAddTieValidate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public Oelinelinetie KPCompAddUpdate(AskpentryKPCompAddUpdateRequestAPI AskpentryKPCompAddUpdateRequestAPI)
      {   
         var result = new Oelinelinetie();
         
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AskpentryKPCompAddUpdateRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         DataRow ttblloadtcompssingleRow = pdsloadtcomps.ttblloadtcompssingle.NewttblloadtcompssingleRow();
         Loadtcompssingle.UpdateRowFromLoadtcompssingle(ref ttblloadtcompssingleRow, AskpentryKPCompAddUpdateRequestAPI.loadtcompssingle);
         pdsloadtcomps.ttblloadtcompssingle.AddttblloadtcompssingleRow((pdsloadtcompsDataSet.ttblloadtcompssingleRow)ttblloadtcompssingleRow);
          
         foreach (var obj in AskpentryKPCompAddUpdateRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AskpentryKPCompAddUpdateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AskpentryKPCompAddUpdateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("KPCompAddUpdate - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPCompAddUpdate(ref pdsContext,  pdsloadtcomps,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCompAddUpdate - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadtcomps); 
    
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0) 
         { 
             result = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         } 
              
          
         return result;
          
      }

      public Kpworkorder KPWOCreateFieldLeave(AskpentryKPWOCreateFieldLeaveRequestAPI AskpentryKPWOCreateFieldLeaveRequestAPI)
      {   
         var result = new Kpworkorder();
         
         var pdskpworkorder = new pdskpworkorderDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkpworkorderRow = pdskpworkorder.ttblkpworkorder.NewttblkpworkorderRow();
         Kpworkorder.UpdateRowFromKpworkorder(ref ttblkpworkorderRow, AskpentryKPWOCreateFieldLeaveRequestAPI.kpworkorder);
         pdskpworkorder.ttblkpworkorder.AddttblkpworkorderRow((pdskpworkorderDataSet.ttblkpworkorderRow)ttblkpworkorderRow);
          
         var  cFieldName = AskpentryKPWOCreateFieldLeaveRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("KPWOCreateFieldLeave - Askpentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpentryproxy = this.proxyAppObject.CreatePO_askpentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpentryproxy.KPWOCreateFieldLeave(ref pdsContext,  cFieldName, ref pdskpworkorder, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPWOCreateFieldLeave - Askpentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpworkorder); 
    
         if (pdskpworkorder.ttblkpworkorder.Count > 0) 
         { 
             result = Kpworkorder.BuildKpworkorderFromRow(pdskpworkorder.ttblkpworkorder[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  