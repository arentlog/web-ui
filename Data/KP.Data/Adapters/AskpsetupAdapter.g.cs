//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.KP.Data.Adapters
{
   using com.infor.sxproxy.kpproxy;
   using com.infor.sxproxy.kpproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdskpcomponentprocess;
   using Models.Pdsmessaging;
   using Models.Complex;

   public partial class AskpsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private KPProxyAppObject proxyAppObject;
      
      public AskpsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new KPProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AskpsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void KPCopySubstitutes(AskpsetupKPCopySubstitutesRequestAPI AskpsetupKPCopySubstitutesRequestAPI)
      {   
         
         string cErrorMessage = string.Empty;
   
         var  cProduct = AskpsetupKPCopySubstitutesRequestAPI.cProduct;
            
         var  iChoice = AskpsetupKPCopySubstitutesRequestAPI.iChoice;
            
         
         NLogLoggerP.Trace("KPCopySubstitutes - Askpsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpsetupproxy = this.proxyAppObject.CreatePO_askpsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpsetupproxy.KPCopySubstitutes(ref pdsContext,  cProduct,  iChoice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCopySubstitutes - Askpsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AskpsetupKPCreateUpdateComponentResponseAPI KPCreateUpdateComponent(IEnumerable<Kpcomponentprocess> kpcomponentprocess)
      {   
         var result = new AskpsetupKPCreateUpdateComponentResponseAPI();
         
         var pdskpcomponentprocess = new pdskpcomponentprocessDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in kpcomponentprocess)
         {
             DataRow row = pdskpcomponentprocess.ttblkpcomponentprocess.NewttblkpcomponentprocessRow();
             Kpcomponentprocess.UpdateRowFromKpcomponentprocess(ref row, obj);
             pdskpcomponentprocess.ttblkpcomponentprocess.AddttblkpcomponentprocessRow((pdskpcomponentprocessDataSet.ttblkpcomponentprocessRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPCreateUpdateComponent - Askpsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpsetupproxy = this.proxyAppObject.CreatePO_askpsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpsetupproxy.KPCreateUpdateComponent(ref pdsContext, ref pdskpcomponentprocess, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCreateUpdateComponent - Askpsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskpcomponentprocess); 
    
         foreach (DataRow row in pdskpcomponentprocess.ttblkpcomponentprocess)
         {
            result.kpcomponentprocess.Add(Kpcomponentprocess.BuildKpcomponentprocessFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public int KPCreateNewVersion(string pvProd, int pvOldverno)
      {   
          
         int pvNewverno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KPCreateNewVersion - Askpsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpsetupproxy = this.proxyAppObject.CreatePO_askpsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpsetupproxy.KPCreateNewVersion(ref pdsContext,  pvProd,  pvOldverno, out pvNewverno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPCreateNewVersion - Askpsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvNewverno;
      
      }

      public int KPGetLastVerno(AskpsetupKPGetLastVernoRequestAPI AskpsetupKPGetLastVernoRequestAPI)
      {   
          
         int iLastVerNo = 0;
         string cErrorMessage = string.Empty;
   
         var  cKitProd = AskpsetupKPGetLastVernoRequestAPI.cKitProd;
            
         
         NLogLoggerP.Trace("KPGetLastVerno - Askpsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAskpsetupproxy = this.proxyAppObject.CreatePO_askpsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAskpsetupproxy.KPGetLastVerno(ref pdsContext,  cKitProd, out iLastVerNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KPGetLastVerno - Askpsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return iLastVerNo;
      
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  