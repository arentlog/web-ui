//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OT.Data.Adapters
{
   using com.infor.sxproxy.otproxy;
   using com.infor.sxproxy.otproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsotivvessellist;
   using Models.Pdsotivvessellinelist;
   using Models.Pdsotittracklist;
   using Models.Pdsotittrackbanner;
   using Models.Pdsotittrackheader;
   using Models.Pdsotittracktotals;
   using Models.Pdsotittrackline;
   using Models.Complex;

   public partial class AsotinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private OTProxyAppObject proxyAppObject;
      
      public AsotinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsotinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Otivvesselresults> OTIVBuildVesselList(Otivvesselcriteria otivvesselcriteria)
      {   
         var results = new List<Otivvesselresults>();
         
         var pdsotivvessellist = new pdsotivvessellistDataSet();
            
         DataRow ttblotivvesselcriteriaCriteria = pdsotivvessellist.ttblotivvesselcriteria.NewttblotivvesselcriteriaRow();
         Otivvesselcriteria.UpdateRowFromOtivvesselcriteria(ref ttblotivvesselcriteriaCriteria, otivvesselcriteria);
         pdsotivvessellist.ttblotivvesselcriteria.AddttblotivvesselcriteriaRow((pdsotivvessellistDataSet.ttblotivvesselcriteriaRow)ttblotivvesselcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTIVBuildVesselList - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTIVBuildVesselList(ref pdsContext, ref pdsotivvessellist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTIVBuildVesselList - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotivvessellist); 
    
            foreach (DataRow row in pdsotivvessellist.ttblotivvesselresults)
            {
                results.Add(Otivvesselresults.BuildOtivvesselresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Otivvesselline> OTIVBuildVesselLineList(int iVesselno)
      {   
         var results = new List<Otivvesselline>();
         
         var pdsotivvessellinelist = new pdsotivvessellinelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTIVBuildVesselLineList - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTIVBuildVesselLineList(ref pdsContext,  iVesselno, out pdsotivvessellinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTIVBuildVesselLineList - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotivvessellinelist); 
    
            foreach (DataRow row in pdsotivvessellinelist.ttblotivvesselline)
            {
                results.Add(Otivvesselline.BuildOtivvessellineFromRow(row));
            }
            return results;
        
      }

      public AsotinquiryOTITBuildTrackListResponseAPI OTITBuildTrackList(Otittrackcriteria otittrackcriteria)
      {   
         var result = new AsotinquiryOTITBuildTrackListResponseAPI();
         
         var pdsotittracklist = new pdsotittracklistDataSet();
            
         DataRow ttblotittrackcriteriaCriteria = pdsotittracklist.ttblotittrackcriteria.NewttblotittrackcriteriaRow();
         Otittrackcriteria.UpdateRowFromOtittrackcriteria(ref ttblotittrackcriteriaCriteria, otittrackcriteria);
         pdsotittracklist.ttblotittrackcriteria.AddttblotittrackcriteriaRow((pdsotittracklistDataSet.ttblotittrackcriteriaRow)ttblotittrackcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTITBuildTrackList - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTITBuildTrackList(ref pdsContext, ref pdsotittracklist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTITBuildTrackList - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotittracklist); 
    
         foreach (DataRow row in pdsotittracklist.ttblotittrackresults1)
         {
            result.otittrackresults1.Add(Otittrackresults1.BuildOtittrackresults1FromRow(row));
         }     
         foreach (DataRow row in pdsotittracklist.ttblotittrackresults2)
         {
            result.otittrackresults2.Add(Otittrackresults2.BuildOtittrackresults2FromRow(row));
         }     
         foreach (DataRow row in pdsotittracklist.ttblotittrackresults3)
         {
            result.otittrackresults3.Add(Otittrackresults3.BuildOtittrackresults3FromRow(row));
         }     
          
         return result;
          
      }

      public Otittrackbanner OTITTrackBannerLoad(int iTrackNo)
      {   
         var result = new Otittrackbanner();
         
         var pdsotittrackbanner = new pdsotittrackbannerDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTITTrackBannerLoad - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTITTrackBannerLoad(ref pdsContext,  iTrackNo, out pdsotittrackbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTITTrackBannerLoad - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotittrackbanner); 
    
         if (pdsotittrackbanner.ttblotittrackbanner.Count > 0) 
         { 
             result = Otittrackbanner.BuildOtittrackbannerFromRow(pdsotittrackbanner.ttblotittrackbanner[0]);
         } 
              
          
         return result;
          
      }

      public Otittrackheader OTITTrackHeaderLoad(int iTrackNo)
      {   
         var result = new Otittrackheader();
         
         var pdsotittrackheader = new pdsotittrackheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTITTrackHeaderLoad - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTITTrackHeaderLoad(ref pdsContext,  iTrackNo, out pdsotittrackheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTITTrackHeaderLoad - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotittrackheader); 
    
         if (pdsotittrackheader.ttblotittrackheader.Count > 0) 
         { 
             result = Otittrackheader.BuildOtittrackheaderFromRow(pdsotittrackheader.ttblotittrackheader[0]);
         } 
              
          
         return result;
          
      }

      public Otittracktotals OTITTrackTotalsLoad(int iTrackNo)
      {   
         var result = new Otittracktotals();
         
         var pdsotittracktotals = new pdsotittracktotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTITTrackTotalsLoad - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTITTrackTotalsLoad(ref pdsContext,  iTrackNo, out pdsotittracktotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTITTrackTotalsLoad - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotittracktotals); 
    
         if (pdsotittracktotals.ttblotittracktotals.Count > 0) 
         { 
             result = Otittracktotals.BuildOtittracktotalsFromRow(pdsotittracktotals.ttblotittracktotals[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Otittrackline> OTITTrackLineLoad(int iTrackNo)
      {   
         var results = new List<Otittrackline>();
         
         var pdsotittrackline = new pdsotittracklineDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTITTrackLineLoad - Asotinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotinquiryproxy = this.proxyAppObject.CreatePO_asotinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotinquiryproxy.OTITTrackLineLoad(ref pdsContext,  iTrackNo, out pdsotittrackline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTITTrackLineLoad - Asotinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotittrackline); 
    
            foreach (DataRow row in pdsotittrackline.ttblotittrackline)
            {
                results.Add(Otittrackline.BuildOtittracklineFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  