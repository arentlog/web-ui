//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OT.Data.Adapters
{
   using com.infor.sxproxy.otproxy;
   using com.infor.sxproxy.otproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsotevvesselcriteria;
   using Models.Pdsotevvesseldata;
   using Models.Pdsotevvesselheader;
   using Models.Pdsmessaging;
   using Models.Pdsotivvessellinelist;
   using Models.Pdsotettrackcriteria;
   using Models.Pdsotettrackdata;
   using Models.Pdsotettrackdetail;
   using Models.Pdsotaddons;
   using Models.Pdsotettrackdelete;
   using Models.Pdsotetaddpoheader;
   using Models.Pdsotetaddpolines;
   using Models.Pdsotittrackline;
   using Models.Pdsaddotaddon;
   using Models.Complex;

   public partial class AsotentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private OTProxyAppObject proxyAppObject;
      
      public AsotentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OTProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsotentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Otevvesseldata> OTEVBuildVesselList(Otevvesselcriteria otevvesselcriteria)
      {   
         var results = new List<Otevvesseldata>();
         
         var pdsotevvesselcriteria = new pdsotevvesselcriteriaDataSet();
            
         var pdsotevvesseldata = new pdsotevvesseldataDataSet();
            
         DataRow ttblotevvesselcriteriaCriteria = pdsotevvesselcriteria.ttblotevvesselcriteria.NewttblotevvesselcriteriaRow();
         Otevvesselcriteria.UpdateRowFromOtevvesselcriteria(ref ttblotevvesselcriteriaCriteria, otevvesselcriteria);
         pdsotevvesselcriteria.ttblotevvesselcriteria.AddttblotevvesselcriteriaRow((pdsotevvesselcriteriaDataSet.ttblotevvesselcriteriaRow)ttblotevvesselcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVBuildVesselList - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVBuildVesselList(ref pdsContext,  pdsotevvesselcriteria, out pdsotevvesseldata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVBuildVesselList - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotevvesselcriteria); 
    
            foreach (DataRow row in pdsotevvesseldata.ttblotevvesseldata)
            {
                results.Add(Otevvesseldata.BuildOtevvesseldataFromRow(row));
            }
            return results;
        
      }

      public Otevvesselheader OTEVVesselHeaderLoad(int iVesselNo)
      {   
         var result = new Otevvesselheader();
         
         var pdsotevvesselheader = new pdsotevvesselheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVVesselHeaderLoad - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVVesselHeaderLoad(ref pdsContext,  iVesselNo, out pdsotevvesselheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVVesselHeaderLoad - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotevvesselheader); 
    
         if (pdsotevvesselheader.ttblotevvesselheader.Count > 0) 
         { 
             result = Otevvesselheader.BuildOtevvesselheaderFromRow(pdsotevvesselheader.ttblotevvesselheader[0]);
         } 
              
          
         return result;
          
      }

      public AsotentryOTEVVesselHeaderUpdateResponseAPI OTEVVesselHeaderUpdate(AsotentryOTEVVesselHeaderUpdateRequestAPI AsotentryOTEVVesselHeaderUpdateRequestAPI)
      {   
         var result = new AsotentryOTEVVesselHeaderUpdateResponseAPI();
         
         var pdsotevvesselheader = new pdsotevvesselheaderDataSet();
            
         var pdsotevvesseldata = new pdsotevvesseldataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblotevvesseldataRow = pdsotevvesseldata.ttblotevvesseldata.NewttblotevvesseldataRow();
         Otevvesseldata.UpdateRowFromOtevvesseldata(ref ttblotevvesseldataRow, AsotentryOTEVVesselHeaderUpdateRequestAPI.otevvesseldata);
         pdsotevvesseldata.ttblotevvesseldata.AddttblotevvesseldataRow((pdsotevvesseldataDataSet.ttblotevvesseldataRow)ttblotevvesseldataRow);
          
         DataRow ttblotevvesselheaderRow = pdsotevvesselheader.ttblotevvesselheader.NewttblotevvesselheaderRow();
         Otevvesselheader.UpdateRowFromOtevvesselheader(ref ttblotevvesselheaderRow, AsotentryOTEVVesselHeaderUpdateRequestAPI.otevvesselheader);
         pdsotevvesselheader.ttblotevvesselheader.AddttblotevvesselheaderRow((pdsotevvesselheaderDataSet.ttblotevvesselheaderRow)ttblotevvesselheaderRow);
          
         
         NLogLoggerP.Trace("OTEVVesselHeaderUpdate - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVVesselHeaderUpdate(ref pdsContext, ref pdsotevvesselheader, ref pdsotevvesseldata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVVesselHeaderUpdate - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotevvesselheader); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsotevvesseldata.ttblotevvesseldata.Count > 0)
         {
            result.otevvesseldata = Otevvesseldata.BuildOtevvesseldataFromRow(pdsotevvesseldata.ttblotevvesseldata[0]);
         }
                    
         if (pdsotevvesselheader.ttblotevvesselheader.Count > 0)
         {
            result.otevvesselheader = Otevvesselheader.BuildOtevvesselheaderFromRow(pdsotevvesselheader.ttblotevvesselheader[0]);
         }
                    
          
         return result;
          
      }

      public AsotentryOTEVAddVesselResponseAPI OTEVAddVessel()
      {   
         var result = new AsotentryOTEVAddVesselResponseAPI();
         
         var pdsotevvesseldata = new pdsotevvesseldataDataSet();
            
         int iVesselNo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVAddVessel - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVAddVessel(ref pdsContext, out iVesselNo, out pdsotevvesseldata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVAddVessel - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotevvesseldata); 
    
         if (pdsotevvesseldata.ttblotevvesseldata.Count > 0)
         {
            result.otevvesseldata = Otevvesseldata.BuildOtevvesseldataFromRow(pdsotevvesseldata.ttblotevvesseldata[0]);
         }
                    
         result.iVesselNo = iVesselNo;
          
         return result;
          
      }

      public void OTEVDeleteVessel(int iVesselNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVDeleteVessel - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVDeleteVessel(ref pdsContext,  iVesselNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVDeleteVessel - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Otivvesselline OTEVAddVesselLine(int iVesselNo, int iTrackNo)
      {   
         var result = new Otivvesselline();
         
         var pdsotivvessellinelist = new pdsotivvessellinelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVAddVesselLine - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVAddVesselLine(ref pdsContext,  iVesselNo,  iTrackNo, out pdsotivvessellinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVAddVesselLine - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotivvessellinelist); 
    
         if (pdsotivvessellinelist.ttblotivvesselline.Count > 0) 
         { 
             result = Otivvesselline.BuildOtivvessellineFromRow(pdsotivvessellinelist.ttblotivvesselline[0]);
         } 
              
          
         return result;
          
      }

      public void OTEVDeleteVesselLine(int iVesselNo, int iLineNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTEVDeleteVesselLine - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVDeleteVesselLine(ref pdsContext,  iVesselNo,  iLineNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTEVDeleteVesselLine - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AsotentryOTEVUpdateVesselStageResponseAPI OTEVUpdateVesselStage(AsotentryOTEVUpdateVesselStageRequestAPI AsotentryOTEVUpdateVesselStageRequestAPI)
      {   
         var result = new AsotentryOTEVUpdateVesselStageResponseAPI();
         
         var pdsotevvesseldata = new pdsotevvesseldataDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblotevvesseldataRow = pdsotevvesseldata.ttblotevvesseldata.NewttblotevvesseldataRow();
         Otevvesseldata.UpdateRowFromOtevvesseldata(ref ttblotevvesseldataRow, AsotentryOTEVUpdateVesselStageRequestAPI.otevvesseldata);
         pdsotevvesseldata.ttblotevvesseldata.AddttblotevvesseldataRow((pdsotevvesseldataDataSet.ttblotevvesseldataRow)ttblotevvesseldataRow);
          
         var  iNewStage = AsotentryOTEVUpdateVesselStageRequestAPI.iNewStage;
            
         
         NLogLoggerP.Trace("OTEVUpdateVesselStage - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTEVUpdateVesselStage(ref pdsContext,  iNewStage, ref pdsotevvesseldata, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OTEVUpdateVesselStage - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotevvesseldata); 
    
         if (pdsotevvesseldata.ttblotevvesseldata.Count > 0)
         {
            result.otevvesseldata = Otevvesseldata.BuildOtevvesseldataFromRow(pdsotevvesseldata.ttblotevvesseldata[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Otettrackdata> OTETBuildTrackList(Otettrackcriteria otettrackcriteria)
      {   
         var results = new List<Otettrackdata>();
         
         var pdsotettrackcriteria = new pdsotettrackcriteriaDataSet();
            
         var pdsotettrackdata = new pdsotettrackdataDataSet();
            
         DataRow ttblotettrackcriteriaCriteria = pdsotettrackcriteria.ttblotettrackcriteria.NewttblotettrackcriteriaRow();
         Otettrackcriteria.UpdateRowFromOtettrackcriteria(ref ttblotettrackcriteriaCriteria, otettrackcriteria);
         pdsotettrackcriteria.ttblotettrackcriteria.AddttblotettrackcriteriaRow((pdsotettrackcriteriaDataSet.ttblotettrackcriteriaRow)ttblotettrackcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETBuildTrackList - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETBuildTrackList(ref pdsContext,  pdsotettrackcriteria, out pdsotettrackdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETBuildTrackList - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackcriteria); 
    
            foreach (DataRow row in pdsotettrackdata.ttblotettrackdata)
            {
                results.Add(Otettrackdata.BuildOtettrackdataFromRow(row));
            }
            return results;
        
      }

      public AsotentryOTETAddTrackNoResponseAPI OTETAddTrackNo()
      {   
         var result = new AsotentryOTETAddTrackNoResponseAPI();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         int iTrackNo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETAddTrackNo - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETAddTrackNo(ref pdsContext, out iTrackNo, out pdsotettrackdetail, out pdsotaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETAddTrackNo - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         foreach (DataRow row in pdsotaddons.ttblotaddons)
         {
            result.otaddons.Add(Otaddons.BuildOtaddonsFromRow(row));
         }     
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0)
         {
            result.otettrackdetail = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         }
                    
         result.iTrackNo = iTrackNo;
          
         return result;
          
      }

      public AsotentryOTETTrackDetailInitializeResponseAPI OTETTrackDetailInitialize(int iTrackNo)
      {   
         var result = new AsotentryOTETTrackDetailInitializeResponseAPI();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETTrackDetailInitialize - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETTrackDetailInitialize(ref pdsContext,  iTrackNo, out pdsotettrackdetail, out pdsotaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETTrackDetailInitialize - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         foreach (DataRow row in pdsotaddons.ttblotaddons)
         {
            result.otaddons.Add(Otaddons.BuildOtaddonsFromRow(row));
         }     
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0)
         {
            result.otettrackdetail = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         }
                    
          
         return result;
          
      }

      public Otettrackdata OTETTrackDetailLeave(int iTrackNo)
      {   
         var result = new Otettrackdata();
         
         var pdsotettrackdata = new pdsotettrackdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETTrackDetailLeave - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETTrackDetailLeave(ref pdsContext,  iTrackNo, out pdsotettrackdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETTrackDetailLeave - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdata); 
    
         if (pdsotettrackdata.ttblotettrackdata.Count > 0) 
         { 
             result = Otettrackdata.BuildOtettrackdataFromRow(pdsotettrackdata.ttblotettrackdata[0]);
         } 
              
          
         return result;
          
      }

      public Otettrackdelete OTETDeleteTrackNo(Otettrackdelete otettrackdelete)
      {   
         var result = new Otettrackdelete();
         
         var pdsotettrackdelete = new pdsotettrackdeleteDataSet();
            
         DataRow ttblotettrackdeleteCriteria = pdsotettrackdelete.ttblotettrackdelete.NewttblotettrackdeleteRow();
         Otettrackdelete.UpdateRowFromOtettrackdelete(ref ttblotettrackdeleteCriteria, otettrackdelete);
         pdsotettrackdelete.ttblotettrackdelete.AddttblotettrackdeleteRow((pdsotettrackdeleteDataSet.ttblotettrackdeleteRow)ttblotettrackdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETDeleteTrackNo - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETDeleteTrackNo(ref pdsContext, ref pdsotettrackdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETDeleteTrackNo - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdelete); 
    
         if (pdsotettrackdelete.ttblotettrackdelete.Count > 0) 
         { 
             result = Otettrackdelete.BuildOtettrackdeleteFromRow(pdsotettrackdelete.ttblotettrackdelete[0]);
         } 
              
          
         return result;
          
      }

      public Otettrackdata OTETUpdateTrackStage(int iTrackNo, int iNewStage)
      {   
         var result = new Otettrackdata();
         
         var pdsotettrackdata = new pdsotettrackdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETUpdateTrackStage - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETUpdateTrackStage(ref pdsContext,  iTrackNo,  iNewStage, out pdsotettrackdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETUpdateTrackStage - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdata); 
    
         if (pdsotettrackdata.ttblotettrackdata.Count > 0) 
         { 
             result = Otettrackdata.BuildOtettrackdataFromRow(pdsotettrackdata.ttblotettrackdata[0]);
         } 
              
          
         return result;
          
      }

      public Otettrackdetail OTETTrackDetailFieldLeave(AsotentryOTETTrackDetailFieldLeaveRequestAPI AsotentryOTETTrackDetailFieldLeaveRequestAPI)
      {   
         var result = new Otettrackdetail();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblotettrackdetailRow = pdsotettrackdetail.ttblotettrackdetail.NewttblotettrackdetailRow();
         Otettrackdetail.UpdateRowFromOtettrackdetail(ref ttblotettrackdetailRow, AsotentryOTETTrackDetailFieldLeaveRequestAPI.otettrackdetail);
         pdsotettrackdetail.ttblotettrackdetail.AddttblotettrackdetailRow((pdsotettrackdetailDataSet.ttblotettrackdetailRow)ttblotettrackdetailRow);
          
         var  cFieldName = AsotentryOTETTrackDetailFieldLeaveRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("OTETTrackDetailFieldLeave - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETTrackDetailFieldLeave(ref pdsContext,  cFieldName, ref pdsotettrackdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETTrackDetailFieldLeave - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0) 
         { 
             result = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         } 
              
          
         return result;
          
      }

      public Otettrackdetail OTETTrackHeaderUpdate(Otettrackdetail otettrackdetail)
      {   
         var result = new Otettrackdetail();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         DataRow ttblotettrackdetailCriteria = pdsotettrackdetail.ttblotettrackdetail.NewttblotettrackdetailRow();
         Otettrackdetail.UpdateRowFromOtettrackdetail(ref ttblotettrackdetailCriteria, otettrackdetail);
         pdsotettrackdetail.ttblotettrackdetail.AddttblotettrackdetailRow((pdsotettrackdetailDataSet.ttblotettrackdetailRow)ttblotettrackdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETTrackHeaderUpdate - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETTrackHeaderUpdate(ref pdsContext, ref pdsotettrackdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETTrackHeaderUpdate - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0) 
         { 
             result = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         } 
              
          
         return result;
          
      }

      public AsotentryOTETTrackTotalUpdateResponseAPI OTETTrackTotalUpdate(AsotentryOTETTrackTotalUpdateRequestAPI AsotentryOTETTrackTotalUpdateRequestAPI)
      {   
         var result = new AsotentryOTETTrackTotalUpdateResponseAPI();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsotentryOTETTrackTotalUpdateRequestAPI.otaddons)
         {
            DataRow ttblotaddonsRow = pdsotaddons.ttblotaddons.NewttblotaddonsRow();
            Otaddons.UpdateRowFromOtaddons(ref ttblotaddonsRow, obj);
            pdsotaddons.ttblotaddons.AddttblotaddonsRow((pdsotaddonsDataSet.ttblotaddonsRow)ttblotaddonsRow);
         }
          
         DataRow ttblotettrackdetailRow = pdsotettrackdetail.ttblotettrackdetail.NewttblotettrackdetailRow();
         Otettrackdetail.UpdateRowFromOtettrackdetail(ref ttblotettrackdetailRow, AsotentryOTETTrackTotalUpdateRequestAPI.otettrackdetail);
         pdsotettrackdetail.ttblotettrackdetail.AddttblotettrackdetailRow((pdsotettrackdetailDataSet.ttblotettrackdetailRow)ttblotettrackdetailRow);
          
         
         NLogLoggerP.Trace("OTETTrackTotalUpdate - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETTrackTotalUpdate(ref pdsContext, ref pdsotettrackdetail,  pdsotaddons, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETTrackTotalUpdate - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0)
         {
            result.otettrackdetail = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         }
                    
          
         return result;
          
      }

      public AsotentryOTETAddPOLineInitResponseAPI OTETAddPOLineInit(Otetaddpoheader otetaddpoheader)
      {   
         var result = new AsotentryOTETAddPOLineInitResponseAPI();
         
         var pdsotetaddpoheader = new pdsotetaddpoheaderDataSet();
            
         var pdsotetaddpolines = new pdsotetaddpolinesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblotetaddpoheaderCriteria = pdsotetaddpoheader.ttblotetaddpoheader.NewttblotetaddpoheaderRow();
         Otetaddpoheader.UpdateRowFromOtetaddpoheader(ref ttblotetaddpoheaderCriteria, otetaddpoheader);
         pdsotetaddpoheader.ttblotetaddpoheader.AddttblotetaddpoheaderRow((pdsotetaddpoheaderDataSet.ttblotetaddpoheaderRow)ttblotetaddpoheaderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OTETAddPOLineInit - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETAddPOLineInit(ref pdsContext, ref pdsotetaddpoheader, out pdsotetaddpolines, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETAddPOLineInit - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotetaddpoheader); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsotetaddpoheader.ttblotetaddpoheader.Count > 0)
         {
            result.otetaddpoheader = Otetaddpoheader.BuildOtetaddpoheaderFromRow(pdsotetaddpoheader.ttblotetaddpoheader[0]);
         }
                    
         foreach (DataRow row in pdsotetaddpolines.ttblotetaddpolines)
         {
            result.otetaddpolines.Add(Otetaddpolines.BuildOtetaddpolinesFromRow(row));
         }     
          
         return result;
          
      }

      public AsotentryOTETAddPOLineUpdateResponseAPI OTETAddPOLineUpdate(AsotentryOTETAddPOLineUpdateRequestAPI AsotentryOTETAddPOLineUpdateRequestAPI)
      {   
         var result = new AsotentryOTETAddPOLineUpdateResponseAPI();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         var pdsotetaddpolines = new pdsotetaddpolinesDataSet();
            
         var pdsotittrackline = new pdsotittracklineDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsotentryOTETAddPOLineUpdateRequestAPI.otetaddpolines)
         {
            DataRow ttblotetaddpolinesRow = pdsotetaddpolines.ttblotetaddpolines.NewttblotetaddpolinesRow();
            Otetaddpolines.UpdateRowFromOtetaddpolines(ref ttblotetaddpolinesRow, obj);
            pdsotetaddpolines.ttblotetaddpolines.AddttblotetaddpolinesRow((pdsotetaddpolinesDataSet.ttblotetaddpolinesRow)ttblotetaddpolinesRow);
         }
          
         DataRow ttblotettrackdetailRow = pdsotettrackdetail.ttblotettrackdetail.NewttblotettrackdetailRow();
         Otettrackdetail.UpdateRowFromOtettrackdetail(ref ttblotettrackdetailRow, AsotentryOTETAddPOLineUpdateRequestAPI.otettrackdetail);
         pdsotettrackdetail.ttblotettrackdetail.AddttblotettrackdetailRow((pdsotettrackdetailDataSet.ttblotettrackdetailRow)ttblotettrackdetailRow);
          
         
         NLogLoggerP.Trace("OTETAddPOLineUpdate - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETAddPOLineUpdate(ref pdsContext, ref pdsotettrackdetail,  pdsotetaddpolines, out pdsotittrackline, out pdsotaddons, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETAddPOLineUpdate - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsotaddons.ttblotaddons)
         {
            result.otaddons.Add(Otaddons.BuildOtaddonsFromRow(row));
         }     
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0)
         {
            result.otettrackdetail = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         }
                    
         foreach (DataRow row in pdsotittrackline.ttblotittrackline)
         {
            result.otittrackline.Add(Otittrackline.BuildOtittracklineFromRow(row));
         }     
          
         return result;
          
      }

      public Otettrackdetail OTETDeletePOLine(AsotentryOTETDeletePOLineRequestAPI AsotentryOTETDeletePOLineRequestAPI)
      {   
         var result = new Otettrackdetail();
         
         var pdsotettrackdetail = new pdsotettrackdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblotettrackdetailRow = pdsotettrackdetail.ttblotettrackdetail.NewttblotettrackdetailRow();
         Otettrackdetail.UpdateRowFromOtettrackdetail(ref ttblotettrackdetailRow, AsotentryOTETDeletePOLineRequestAPI.otettrackdetail);
         pdsotettrackdetail.ttblotettrackdetail.AddttblotettrackdetailRow((pdsotettrackdetailDataSet.ttblotettrackdetailRow)ttblotettrackdetailRow);
          
         var  iLineNo = AsotentryOTETDeletePOLineRequestAPI.iLineNo;
            
         
         NLogLoggerP.Trace("OTETDeletePOLine - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.OTETDeletePOLine(ref pdsContext, ref pdsotettrackdetail,  iLineNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OTETDeletePOLine - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotettrackdetail); 
    
         if (pdsotettrackdetail.ttblotettrackdetail.Count > 0) 
         { 
             result = Otettrackdetail.BuildOtettrackdetailFromRow(pdsotettrackdetail.ttblotettrackdetail[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Otaddons> AddOTAddon(AsotentryAddOTAddonRequestAPI AsotentryAddOTAddonRequestAPI)
      {   
         var results = new List<Otaddons>();
         
         var pdsaddotaddon = new pdsaddotaddonDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbladdotaddoncriteriaRow = pdsaddotaddon.ttbladdotaddoncriteria.NewttbladdotaddoncriteriaRow();
         Addotaddoncriteria.UpdateRowFromAddotaddoncriteria(ref ttbladdotaddoncriteriaRow, AsotentryAddOTAddonRequestAPI.addotaddoncriteria);
         pdsaddotaddon.ttbladdotaddoncriteria.AddttbladdotaddoncriteriaRow((pdsaddotaddonDataSet.ttbladdotaddoncriteriaRow)ttbladdotaddoncriteriaRow);
          
         foreach (var obj in AsotentryAddOTAddonRequestAPI.otaddons)
         {
            DataRow ttblotaddonsRow = pdsotaddons.ttblotaddons.NewttblotaddonsRow();
            Otaddons.UpdateRowFromOtaddons(ref ttblotaddonsRow, obj);
            pdsotaddons.ttblotaddons.AddttblotaddonsRow((pdsotaddonsDataSet.ttblotaddonsRow)ttblotaddonsRow);
         }
          
         
         NLogLoggerP.Trace("AddOTAddon - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.AddOTAddon(ref pdsContext,  pdsaddotaddon, ref pdsotaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AddOTAddon - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaddotaddon); 
    
            foreach (DataRow row in pdsotaddons.ttblotaddons)
            {
                results.Add(Otaddons.BuildOtaddonsFromRow(row));
            }
            return results;
        
      }

      public AsotentryAddOTAddonFieldLeaveResponseAPI AddOTAddonFieldLeave(AsotentryAddOTAddonFieldLeaveRequestAPI AsotentryAddOTAddonFieldLeaveRequestAPI)
      {   
         var result = new AsotentryAddOTAddonFieldLeaveResponseAPI();
         
         var pdsaddotaddon = new pdsaddotaddonDataSet();
            
         var pdsotaddons = new pdsotaddonsDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbladdotaddoncriteriaRow = pdsaddotaddon.ttbladdotaddoncriteria.NewttbladdotaddoncriteriaRow();
         Addotaddoncriteria.UpdateRowFromAddotaddoncriteria(ref ttbladdotaddoncriteriaRow, AsotentryAddOTAddonFieldLeaveRequestAPI.addotaddoncriteria);
         pdsaddotaddon.ttbladdotaddoncriteria.AddttbladdotaddoncriteriaRow((pdsaddotaddonDataSet.ttbladdotaddoncriteriaRow)ttbladdotaddoncriteriaRow);
          
         foreach (var obj in AsotentryAddOTAddonFieldLeaveRequestAPI.otaddons)
         {
            DataRow ttblotaddonsRow = pdsotaddons.ttblotaddons.NewttblotaddonsRow();
            Otaddons.UpdateRowFromOtaddons(ref ttblotaddonsRow, obj);
            pdsotaddons.ttblotaddons.AddttblotaddonsRow((pdsotaddonsDataSet.ttblotaddonsRow)ttblotaddonsRow);
         }
          
         var  pvFieldname = AsotentryAddOTAddonFieldLeaveRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("AddOTAddonFieldLeave - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.AddOTAddonFieldLeave(ref pdsContext,  pvFieldname, ref pdsaddotaddon,  pdsotaddons, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("AddOTAddonFieldLeave - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaddotaddon); 
    
         if (pdsaddotaddon.ttbladdotaddoncriteria.Count > 0)
         {
            result.addotaddoncriteria = Addotaddoncriteria.BuildAddotaddoncriteriaFromRow(pdsaddotaddon.ttbladdotaddoncriteria[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsotentryChangeOTAddonFieldLeaveResponseAPI ChangeOTAddonFieldLeave(AsotentryChangeOTAddonFieldLeaveRequestAPI AsotentryChangeOTAddonFieldLeaveRequestAPI)
      {   
         var result = new AsotentryChangeOTAddonFieldLeaveResponseAPI();
         
         var pdsotaddons = new pdsotaddonsDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         foreach (var obj in AsotentryChangeOTAddonFieldLeaveRequestAPI.otaddons)
         {
            DataRow ttblotaddonsRow = pdsotaddons.ttblotaddons.NewttblotaddonsRow();
            Otaddons.UpdateRowFromOtaddons(ref ttblotaddonsRow, obj);
            pdsotaddons.ttblotaddons.AddttblotaddonsRow((pdsotaddonsDataSet.ttblotaddonsRow)ttblotaddonsRow);
         }
          
         var  pvSeqno = AsotentryChangeOTAddonFieldLeaveRequestAPI.pvSeqno;
            
         var  pvFieldname = AsotentryChangeOTAddonFieldLeaveRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("ChangeOTAddonFieldLeave - Asotentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsotentryproxy = this.proxyAppObject.CreatePO_asotentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsotentryproxy.ChangeOTAddonFieldLeave(ref pdsContext,  pvSeqno,  pvFieldname, ref pdsotaddons, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ChangeOTAddonFieldLeave - Asotentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsotaddons); 
    
         foreach (DataRow row in pdsotaddons.ttblotaddons)
         {
            result.otaddons.Add(Otaddons.BuildOtaddonsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  