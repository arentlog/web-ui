//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.EDI.Data.Adapters
{
   using com.infor.sxproxy.ediproxy;
   using com.infor.sxproxy.ediproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsetccdropdown;
   using Models.Pdsetccdoclistcomcriteria;
   using Models.Pdsetccdocliststdcriteria;
   using Models.Pdsetccdoclistresults;
   using Models.Pdsetccdoclistpocriteria;
   using Models.Pdsetccdoclistoecriteria;
   using Models.Pdsetccrowids;
   using Models.Pdsmessaging;
   using Models.Pdsetccdetailbanner;
   using Models.Pdsetccdeterrorscriteria;
   using Models.Pdsetccdeterrorsresults;
   using Models.Pdsetccdeterrorstotals;
   using Models.Pdsetccdeterrorscorrection;
   using Models.Pdsetccdetdatacriteria;
   using Models.Pdsetccdetdata849ihdr;
   using Models.Pdsetccdetdata849iline;
   using Models.Pdsetccdetdata855ihdr;
   using Models.Pdsetccdetdata855iline;
   using Models.Pdsetccdetdata855inotes;
   using Models.Pdsedsvsearch;
   using Models.Complex;

   public partial class AsedientryAdapter : AdapterBase<pdsContextDataSet>
   {
      private EDIProxyAppObject proxyAppObject;
      
      public AsedientryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new EDIProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsedientryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Etccdropdown> ETCCModuleDropDown()
      {   
         var results = new List<Etccdropdown>();
         
         var pdsetccdropdown = new pdsetccdropdownDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCModuleDropDown - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCModuleDropDown(ref pdsContext, out pdsetccdropdown, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCModuleDropDown - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdropdown); 
    
            foreach (DataRow row in pdsetccdropdown.ttbletccdropdown)
            {
                results.Add(Etccdropdown.BuildEtccdropdownFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Etccdropdown> ETCCTransStatusDropDown()
      {   
         var results = new List<Etccdropdown>();
         
         var pdsetccdropdown = new pdsetccdropdownDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCTransStatusDropDown - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCTransStatusDropDown(ref pdsContext, out pdsetccdropdown, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCTransStatusDropDown - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdropdown); 
    
            foreach (DataRow row in pdsetccdropdown.ttbletccdropdown)
            {
                results.Add(Etccdropdown.BuildEtccdropdownFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Etccdropdown> ETCCUpdateStatusDropDown()
      {   
         var results = new List<Etccdropdown>();
         
         var pdsetccdropdown = new pdsetccdropdownDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCUpdateStatusDropDown - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCUpdateStatusDropDown(ref pdsContext, out pdsetccdropdown, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCUpdateStatusDropDown - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdropdown); 
    
            foreach (DataRow row in pdsetccdropdown.ttbletccdropdown)
            {
                results.Add(Etccdropdown.BuildEtccdropdownFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Etccdropdown> ETCCProcessTypeDropDown(AsedientryETCCProcessTypeDropDownRequestAPI AsedientryETCCProcessTypeDropDownRequestAPI)
      {   
         var results = new List<Etccdropdown>();
         
         var pdsetccdropdown = new pdsetccdropdownDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cModule = AsedientryETCCProcessTypeDropDownRequestAPI.cModule;
            
         
         NLogLoggerP.Trace("ETCCProcessTypeDropDown - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCProcessTypeDropDown(ref pdsContext,  cModule, out pdsetccdropdown, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCProcessTypeDropDown - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdropdown); 
    
            foreach (DataRow row in pdsetccdropdown.ttbletccdropdown)
            {
                results.Add(Etccdropdown.BuildEtccdropdownFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Etccdropdown> ETCCTransactionTypeDropDown(AsedientryETCCTransactionTypeDropDownRequestAPI AsedientryETCCTransactionTypeDropDownRequestAPI)
      {   
         var results = new List<Etccdropdown>();
         
         var pdsetccdropdown = new pdsetccdropdownDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cModule = AsedientryETCCTransactionTypeDropDownRequestAPI.cModule;
            
         var  cProcType = AsedientryETCCTransactionTypeDropDownRequestAPI.cProcType;
            
         
         NLogLoggerP.Trace("ETCCTransactionTypeDropDown - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCTransactionTypeDropDown(ref pdsContext,  cModule,  cProcType, out pdsetccdropdown, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCTransactionTypeDropDown - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdropdown); 
    
            foreach (DataRow row in pdsetccdropdown.ttbletccdropdown)
            {
                results.Add(Etccdropdown.BuildEtccdropdownFromRow(row));
            }
            return results;
        
      }

      public string ETCCChooseScreenGrid(AsedientryETCCChooseScreenGridRequestAPI AsedientryETCCChooseScreenGridRequestAPI)
      {   
          
         string cErrorMessage = string.Empty;
         string cScreenGrid = string.Empty;
   
         var  cModule = AsedientryETCCChooseScreenGridRequestAPI.cModule;
            
         var  cTransType = AsedientryETCCChooseScreenGridRequestAPI.cTransType;
            
         var  cTransTypeDesc = AsedientryETCCChooseScreenGridRequestAPI.cTransTypeDesc;
            
         
         NLogLoggerP.Trace("ETCCChooseScreenGrid - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCChooseScreenGrid(ref pdsContext,  cModule,  cTransType,  cTransTypeDesc, out cErrorMessage, out cScreenGrid);
               }
            });
         NLogLoggerP.Info("ETCCChooseScreenGrid - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cScreenGrid;
      
      }

      public AsedientryETCCGetDocumentListStdResponseAPI ETCCGetDocumentListStd(AsedientryETCCGetDocumentListStdRequestAPI AsedientryETCCGetDocumentListStdRequestAPI)
      {   
         var result = new AsedientryETCCGetDocumentListStdResponseAPI();
         
         var pdsetccdoclistcomcriteria = new pdsetccdoclistcomcriteriaDataSet();
            
         var pdsetccdocliststdcriteria = new pdsetccdocliststdcriteriaDataSet();
            
         var pdsetccdoclistresults = new pdsetccdoclistresultsDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         DataRow ttbletccdoclistcomcriteriaRow = pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.NewttbletccdoclistcomcriteriaRow();
         Etccdoclistcomcriteria.UpdateRowFromEtccdoclistcomcriteria(ref ttbletccdoclistcomcriteriaRow, AsedientryETCCGetDocumentListStdRequestAPI.etccdoclistcomcriteria);
         pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.AddttbletccdoclistcomcriteriaRow((pdsetccdoclistcomcriteriaDataSet.ttbletccdoclistcomcriteriaRow)ttbletccdoclistcomcriteriaRow);
          
         DataRow ttbletccdocliststdcriteriaRow = pdsetccdocliststdcriteria.ttbletccdocliststdcriteria.NewttbletccdocliststdcriteriaRow();
         Etccdocliststdcriteria.UpdateRowFromEtccdocliststdcriteria(ref ttbletccdocliststdcriteriaRow, AsedientryETCCGetDocumentListStdRequestAPI.etccdocliststdcriteria);
         pdsetccdocliststdcriteria.ttbletccdocliststdcriteria.AddttbletccdocliststdcriteriaRow((pdsetccdocliststdcriteriaDataSet.ttbletccdocliststdcriteriaRow)ttbletccdocliststdcriteriaRow);
          
         
         NLogLoggerP.Trace("ETCCGetDocumentListStd - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCGetDocumentListStd(ref pdsContext,  pdsetccdoclistcomcriteria,  pdsetccdocliststdcriteria, out pdsetccdoclistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ETCCGetDocumentListStd - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdoclistcomcriteria); 
    
         foreach (DataRow row in pdsetccdoclistresults.ttbletccdoclistresults)
         {
            result.etccdoclistresults.Add(Etccdoclistresults.BuildEtccdoclistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsedientryETCCGetDocumentListPOResponseAPI ETCCGetDocumentListPO(AsedientryETCCGetDocumentListPORequestAPI AsedientryETCCGetDocumentListPORequestAPI)
      {   
         var result = new AsedientryETCCGetDocumentListPOResponseAPI();
         
         var pdsetccdoclistcomcriteria = new pdsetccdoclistcomcriteriaDataSet();
            
         var pdsetccdoclistpocriteria = new pdsetccdoclistpocriteriaDataSet();
            
         var pdsetccdoclistresults = new pdsetccdoclistresultsDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         DataRow ttbletccdoclistcomcriteriaRow = pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.NewttbletccdoclistcomcriteriaRow();
         Etccdoclistcomcriteria.UpdateRowFromEtccdoclistcomcriteria(ref ttbletccdoclistcomcriteriaRow, AsedientryETCCGetDocumentListPORequestAPI.etccdoclistcomcriteria);
         pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.AddttbletccdoclistcomcriteriaRow((pdsetccdoclistcomcriteriaDataSet.ttbletccdoclistcomcriteriaRow)ttbletccdoclistcomcriteriaRow);
          
         DataRow ttbletccdoclistpocriteriaRow = pdsetccdoclistpocriteria.ttbletccdoclistpocriteria.NewttbletccdoclistpocriteriaRow();
         Etccdoclistpocriteria.UpdateRowFromEtccdoclistpocriteria(ref ttbletccdoclistpocriteriaRow, AsedientryETCCGetDocumentListPORequestAPI.etccdoclistpocriteria);
         pdsetccdoclistpocriteria.ttbletccdoclistpocriteria.AddttbletccdoclistpocriteriaRow((pdsetccdoclistpocriteriaDataSet.ttbletccdoclistpocriteriaRow)ttbletccdoclistpocriteriaRow);
          
         
         NLogLoggerP.Trace("ETCCGetDocumentListPO - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCGetDocumentListPO(ref pdsContext,  pdsetccdoclistcomcriteria,  pdsetccdoclistpocriteria, out pdsetccdoclistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ETCCGetDocumentListPO - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdoclistcomcriteria); 
    
         foreach (DataRow row in pdsetccdoclistresults.ttbletccdoclistresults)
         {
            result.etccdoclistresults.Add(Etccdoclistresults.BuildEtccdoclistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsedientryETCCGetDocumentListOEResponseAPI ETCCGetDocumentListOE(AsedientryETCCGetDocumentListOERequestAPI AsedientryETCCGetDocumentListOERequestAPI)
      {   
         var result = new AsedientryETCCGetDocumentListOEResponseAPI();
         
         var pdsetccdoclistcomcriteria = new pdsetccdoclistcomcriteriaDataSet();
            
         var pdsetccdoclistoecriteria = new pdsetccdoclistoecriteriaDataSet();
            
         var pdsetccdoclistresults = new pdsetccdoclistresultsDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         DataRow ttbletccdoclistcomcriteriaRow = pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.NewttbletccdoclistcomcriteriaRow();
         Etccdoclistcomcriteria.UpdateRowFromEtccdoclistcomcriteria(ref ttbletccdoclistcomcriteriaRow, AsedientryETCCGetDocumentListOERequestAPI.etccdoclistcomcriteria);
         pdsetccdoclistcomcriteria.ttbletccdoclistcomcriteria.AddttbletccdoclistcomcriteriaRow((pdsetccdoclistcomcriteriaDataSet.ttbletccdoclistcomcriteriaRow)ttbletccdoclistcomcriteriaRow);
          
         DataRow ttbletccdoclistoecriteriaRow = pdsetccdoclistoecriteria.ttbletccdoclistoecriteria.NewttbletccdoclistoecriteriaRow();
         Etccdoclistoecriteria.UpdateRowFromEtccdoclistoecriteria(ref ttbletccdoclistoecriteriaRow, AsedientryETCCGetDocumentListOERequestAPI.etccdoclistoecriteria);
         pdsetccdoclistoecriteria.ttbletccdoclistoecriteria.AddttbletccdoclistoecriteriaRow((pdsetccdoclistoecriteriaDataSet.ttbletccdoclistoecriteriaRow)ttbletccdoclistoecriteriaRow);
          
         
         NLogLoggerP.Trace("ETCCGetDocumentListOE - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCGetDocumentListOE(ref pdsContext,  pdsetccdoclistcomcriteria,  pdsetccdoclistoecriteria, out pdsetccdoclistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ETCCGetDocumentListOE - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdoclistcomcriteria); 
    
         foreach (DataRow row in pdsetccdoclistresults.ttbletccdoclistresults)
         {
            result.etccdoclistresults.Add(Etccdoclistresults.BuildEtccdoclistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void ETCCDocumentDelete(IEnumerable<Etccrowids> etccrowids)
      {   
         
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         foreach (var obj in etccrowids)
         {
             DataRow row = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
             Etccrowids.UpdateRowFromEtccrowids(ref row, obj);
             pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDocumentDelete - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDocumentDelete(ref pdsContext,  pdsetccrowids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDocumentDelete - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids);
      }

      public Etccrowids ETCCPlaceOnEHold(Etccrowids etccrowids)
      {   
         var result = new Etccrowids();
         
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         DataRow ttbletccrowidsCriteria = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
         Etccrowids.UpdateRowFromEtccrowids(ref ttbletccrowidsCriteria, etccrowids);
         pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)ttbletccrowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCPlaceOnEHold - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCPlaceOnEHold(ref pdsContext, ref pdsetccrowids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCPlaceOnEHold - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids); 
    
         if (pdsetccrowids.ttbletccrowids.Count > 0) 
         { 
             result = Etccrowids.BuildEtccrowidsFromRow(pdsetccrowids.ttbletccrowids[0]);
         } 
              
          
         return result;
          
      }

      public AsedientryETCCApproveTransactionsResponseAPI ETCCApproveTransactions(IEnumerable<Etccrowids> etccrowids)
      {   
         var result = new AsedientryETCCApproveTransactionsResponseAPI();
         
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in etccrowids)
         {
             DataRow row = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
             Etccrowids.UpdateRowFromEtccrowids(ref row, obj);
             pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
         bool lRefresh = false;
   
         
         NLogLoggerP.Trace("ETCCApproveTransactions - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCApproveTransactions(ref pdsContext,  pdsetccrowids, out pdsmessaging, out cErrorMessage, out lRefresh);
               }
            });
         NLogLoggerP.Info("ETCCApproveTransactions - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lRefresh = lRefresh;
          
         return result;
          
      }

      public bool ETCCUpdateTransactions(AsedientryETCCUpdateTransactionsRequestAPI AsedientryETCCUpdateTransactionsRequestAPI)
      {   
          
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         string cErrorMessage = string.Empty;
         bool lRefresh = false;
   
         foreach (var obj in AsedientryETCCUpdateTransactionsRequestAPI.etccrowids)
         {
            DataRow ttbletccrowidsRow = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
            Etccrowids.UpdateRowFromEtccrowids(ref ttbletccrowidsRow, obj);
            pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)ttbletccrowidsRow);
         }
          
         var  lApproveAll = AsedientryETCCUpdateTransactionsRequestAPI.lApproveAll;
            
         var  cProcType = AsedientryETCCUpdateTransactionsRequestAPI.cProcType;
            
         
         NLogLoggerP.Trace("ETCCUpdateTransactions - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCUpdateTransactions(ref pdsContext,  pdsetccrowids,  lApproveAll,  cProcType, out cErrorMessage, out lRefresh);
               }
            });
         NLogLoggerP.Info("ETCCUpdateTransactions - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids); 
    
         return lRefresh;
      
      }

      public bool ETCCCancelTransactions(IEnumerable<Etccrowids> etccrowids)
      {   
          
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         foreach (var obj in etccrowids)
         {
             DataRow row = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
             Etccrowids.UpdateRowFromEtccrowids(ref row, obj);
             pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
         bool lRefresh = false;
   
         
         NLogLoggerP.Trace("ETCCCancelTransactions - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCCancelTransactions(ref pdsContext,  pdsetccrowids, out cErrorMessage, out lRefresh);
               }
            });
         NLogLoggerP.Info("ETCCCancelTransactions - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids); 
    
         return lRefresh;
      
      }

      public void ETCCCheckDrilldownAccess(Etccrowids etccrowids)
      {   
         
         var pdsetccrowids = new pdsetccrowidsDataSet();
            
         DataRow ttbletccrowidsCriteria = pdsetccrowids.ttbletccrowids.NewttbletccrowidsRow();
         Etccrowids.UpdateRowFromEtccrowids(ref ttbletccrowidsCriteria, etccrowids);
         pdsetccrowids.ttbletccrowids.AddttbletccrowidsRow((pdsetccrowidsDataSet.ttbletccrowidsRow)ttbletccrowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCCheckDrilldownAccess - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCCheckDrilldownAccess(ref pdsContext,  pdsetccrowids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCCheckDrilldownAccess - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccrowids);
      }

      public Etccdetailbanner ETCCDetailBanner(Etccdetailbanner etccdetailbanner)
      {   
         var result = new Etccdetailbanner();
         
         var pdsetccdetailbanner = new pdsetccdetailbannerDataSet();
            
         DataRow ttbletccdetailbannerCriteria = pdsetccdetailbanner.ttbletccdetailbanner.NewttbletccdetailbannerRow();
         Etccdetailbanner.UpdateRowFromEtccdetailbanner(ref ttbletccdetailbannerCriteria, etccdetailbanner);
         pdsetccdetailbanner.ttbletccdetailbanner.AddttbletccdetailbannerRow((pdsetccdetailbannerDataSet.ttbletccdetailbannerRow)ttbletccdetailbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailBanner - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailBanner(ref pdsContext, ref pdsetccdetailbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailBanner - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetailbanner); 
    
         if (pdsetccdetailbanner.ttbletccdetailbanner.Count > 0) 
         { 
             result = Etccdetailbanner.BuildEtccdetailbannerFromRow(pdsetccdetailbanner.ttbletccdetailbanner[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Etccdeterrorsresults> ETCCDetailGetErrorsList(AsedientryETCCDetailGetErrorsListRequestAPI AsedientryETCCDetailGetErrorsListRequestAPI)
      {   
         var results = new List<Etccdeterrorsresults>();
         
         var pdsetccdeterrorscriteria = new pdsetccdeterrorscriteriaDataSet();
            
         var pdsetccdeterrorsresults = new pdsetccdeterrorsresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdeterrorscriteriaRow = pdsetccdeterrorscriteria.ttbletccdeterrorscriteria.NewttbletccdeterrorscriteriaRow();
         Etccdeterrorscriteria.UpdateRowFromEtccdeterrorscriteria(ref ttbletccdeterrorscriteriaRow, AsedientryETCCDetailGetErrorsListRequestAPI.etccdeterrorscriteria);
         pdsetccdeterrorscriteria.ttbletccdeterrorscriteria.AddttbletccdeterrorscriteriaRow((pdsetccdeterrorscriteriaDataSet.ttbletccdeterrorscriteriaRow)ttbletccdeterrorscriteriaRow);
          
         foreach (var obj in AsedientryETCCDetailGetErrorsListRequestAPI.etccdeterrorsresults)
         {
            DataRow ttbletccdeterrorsresultsRow = pdsetccdeterrorsresults.ttbletccdeterrorsresults.NewttbletccdeterrorsresultsRow();
            Etccdeterrorsresults.UpdateRowFromEtccdeterrorsresults(ref ttbletccdeterrorsresultsRow, obj);
            pdsetccdeterrorsresults.ttbletccdeterrorsresults.AddttbletccdeterrorsresultsRow((pdsetccdeterrorsresultsDataSet.ttbletccdeterrorsresultsRow)ttbletccdeterrorsresultsRow);
         }
          
         
         NLogLoggerP.Trace("ETCCDetailGetErrorsList - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailGetErrorsList(ref pdsContext,  pdsetccdeterrorscriteria, ref pdsetccdeterrorsresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailGetErrorsList - Asedientry - After Call");

         
         this.ReportErrors(pdsetccdeterrorsresults);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdeterrorscriteria); 
    
            foreach (DataRow row in pdsetccdeterrorsresults.ttbletccdeterrorsresults)
            {
                results.Add(Etccdeterrorsresults.BuildEtccdeterrorsresultsFromRow(row));
            }
            return results;
        
      }

      public Etccdeterrorstotals ETCCDetailGetErrorsTotals(Etccdetailbanner etccdetailbanner)
      {   
         var result = new Etccdeterrorstotals();
         
         var pdsetccdetailbanner = new pdsetccdetailbannerDataSet();
            
         var pdsetccdeterrorstotals = new pdsetccdeterrorstotalsDataSet();
            
         DataRow ttbletccdetailbannerCriteria = pdsetccdetailbanner.ttbletccdetailbanner.NewttbletccdetailbannerRow();
         Etccdetailbanner.UpdateRowFromEtccdetailbanner(ref ttbletccdetailbannerCriteria, etccdetailbanner);
         pdsetccdetailbanner.ttbletccdetailbanner.AddttbletccdetailbannerRow((pdsetccdetailbannerDataSet.ttbletccdetailbannerRow)ttbletccdetailbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailGetErrorsTotals - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailGetErrorsTotals(ref pdsContext,  pdsetccdetailbanner, out pdsetccdeterrorstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailGetErrorsTotals - Asedientry - After Call");

         
         this.ReportErrors(pdsetccdeterrorstotals);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetailbanner); 
    
         if (pdsetccdeterrorstotals.ttbletccdeterrorstotals.Count > 0) 
         { 
             result = Etccdeterrorstotals.BuildEtccdeterrorstotalsFromRow(pdsetccdeterrorstotals.ttbletccdeterrorstotals[0]);
         } 
              
          
         return result;
          
      }

      public AsedientryETCCDetailErrorsCorrectionResponseAPI ETCCDetailErrorsCorrection(Etccdeterrorscorrection etccdeterrorscorrection)
      {   
         var result = new AsedientryETCCDetailErrorsCorrectionResponseAPI();
         
         var pdsetccdeterrorscorrection = new pdsetccdeterrorscorrectionDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbletccdeterrorscorrectionCriteria = pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.NewttbletccdeterrorscorrectionRow();
         Etccdeterrorscorrection.UpdateRowFromEtccdeterrorscorrection(ref ttbletccdeterrorscorrectionCriteria, etccdeterrorscorrection);
         pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.AddttbletccdeterrorscorrectionRow((pdsetccdeterrorscorrectionDataSet.ttbletccdeterrorscorrectionRow)ttbletccdeterrorscorrectionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailErrorsCorrection - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailErrorsCorrection(ref pdsContext, ref pdsetccdeterrorscorrection, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailErrorsCorrection - Asedientry - After Call");

         
         this.ReportErrors(pdsetccdeterrorscorrection);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdeterrorscorrection); 
    
         if (pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.Count > 0)
         {
            result.etccdeterrorscorrection = Etccdeterrorscorrection.BuildEtccdeterrorscorrectionFromRow(pdsetccdeterrorscorrection.ttbletccdeterrorscorrection[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsedientryETCCDetailErrorsApproveTranResponseAPI ETCCDetailErrorsApproveTran(Etccdeterrorscorrection etccdeterrorscorrection)
      {   
         var result = new AsedientryETCCDetailErrorsApproveTranResponseAPI();
         
         var pdsetccdeterrorscorrection = new pdsetccdeterrorscorrectionDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbletccdeterrorscorrectionCriteria = pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.NewttbletccdeterrorscorrectionRow();
         Etccdeterrorscorrection.UpdateRowFromEtccdeterrorscorrection(ref ttbletccdeterrorscorrectionCriteria, etccdeterrorscorrection);
         pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.AddttbletccdeterrorscorrectionRow((pdsetccdeterrorscorrectionDataSet.ttbletccdeterrorscorrectionRow)ttbletccdeterrorscorrectionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailErrorsApproveTran - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailErrorsApproveTran(ref pdsContext, ref pdsetccdeterrorscorrection, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailErrorsApproveTran - Asedientry - After Call");

         
         this.ReportErrors(pdsetccdeterrorscorrection);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdeterrorscorrection); 
    
         if (pdsetccdeterrorscorrection.ttbletccdeterrorscorrection.Count > 0)
         {
            result.etccdeterrorscorrection = Etccdeterrorscorrection.BuildEtccdeterrorscorrectionFromRow(pdsetccdeterrorscorrection.ttbletccdeterrorscorrection[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsedientryETCCDetailGetDataListResponseAPI ETCCDetailGetDataList(Etccdetdatacriteria etccdetdatacriteria)
      {   
         var result = new AsedientryETCCDetailGetDataListResponseAPI();
         
         var pdsetccdetdatacriteria = new pdsetccdetdatacriteriaDataSet();
            
         var pdsetccdetdata849ihdr = new pdsetccdetdata849ihdrDataSet();
            
         var pdsetccdetdata849iline = new pdsetccdetdata849ilineDataSet();
            
         var pdsetccdetdata855ihdr = new pdsetccdetdata855ihdrDataSet();
            
         var pdsetccdetdata855iline = new pdsetccdetdata855ilineDataSet();
            
         DataRow ttbletccdetdatacriteriaCriteria = pdsetccdetdatacriteria.ttbletccdetdatacriteria.NewttbletccdetdatacriteriaRow();
         Etccdetdatacriteria.UpdateRowFromEtccdetdatacriteria(ref ttbletccdetdatacriteriaCriteria, etccdetdatacriteria);
         pdsetccdetdatacriteria.ttbletccdetdatacriteria.AddttbletccdetdatacriteriaRow((pdsetccdetdatacriteriaDataSet.ttbletccdetdatacriteriaRow)ttbletccdetdatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailGetDataList - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailGetDataList(ref pdsContext,  pdsetccdetdatacriteria, out pdsetccdetdata849ihdr, out pdsetccdetdata849iline, out pdsetccdetdata855ihdr, out pdsetccdetdata855iline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailGetDataList - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdatacriteria); 
    
         foreach (DataRow row in pdsetccdetdata849ihdr.ttbletccdetdata849ihdr)
         {
            result.etccdetdata849ihdr.Add(Etccdetdata849ihdr.BuildEtccdetdata849ihdrFromRow(row));
         }     
         foreach (DataRow row in pdsetccdetdata849iline.ttbletccdetdata849iline)
         {
            result.etccdetdata849iline.Add(Etccdetdata849iline.BuildEtccdetdata849ilineFromRow(row));
         }     
         foreach (DataRow row in pdsetccdetdata855ihdr.ttbletccdetdata855ihdr)
         {
            result.etccdetdata855ihdr.Add(Etccdetdata855ihdr.BuildEtccdetdata855ihdrFromRow(row));
         }     
         foreach (DataRow row in pdsetccdetdata855iline.ttbletccdetdata855iline)
         {
            result.etccdetdata855iline.Add(Etccdetdata855iline.BuildEtccdetdata855ilineFromRow(row));
         }     
          
         return result;
          
      }

      public void ETCCDetailDataCreateHdrOverride(AsedientryETCCDetailDataCreateHdrOverrideRequestAPI AsedientryETCCDetailDataCreateHdrOverrideRequestAPI)
      {   
         
         var pdsetccdetdata849ihdr = new pdsetccdetdata849ihdrDataSet();
            
         var pdsetccdetdata855ihdr = new pdsetccdetdata855ihdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ihdrRow = pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Newttbletccdetdata849ihdrRow();
         Etccdetdata849ihdr.UpdateRowFromEtccdetdata849ihdr(ref ttbletccdetdata849ihdrRow, AsedientryETCCDetailDataCreateHdrOverrideRequestAPI.etccdetdata849ihdr);
         pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Addttbletccdetdata849ihdrRow((pdsetccdetdata849ihdrDataSet.ttbletccdetdata849ihdrRow)ttbletccdetdata849ihdrRow);
          
         DataRow ttbletccdetdata855ihdrRow = pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Newttbletccdetdata855ihdrRow();
         Etccdetdata855ihdr.UpdateRowFromEtccdetdata855ihdr(ref ttbletccdetdata855ihdrRow, AsedientryETCCDetailDataCreateHdrOverrideRequestAPI.etccdetdata855ihdr);
         pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Addttbletccdetdata855ihdrRow((pdsetccdetdata855ihdrDataSet.ttbletccdetdata855ihdrRow)ttbletccdetdata855ihdrRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataCreateHdrOverride - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataCreateHdrOverride(ref pdsContext,  pdsetccdetdata849ihdr,  pdsetccdetdata855ihdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataCreateHdrOverride - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849ihdr);
      }

      public void ETCCDetailDataCancelHdrOverride(AsedientryETCCDetailDataCancelHdrOverrideRequestAPI AsedientryETCCDetailDataCancelHdrOverrideRequestAPI)
      {   
         
         var pdsetccdetdata849ihdr = new pdsetccdetdata849ihdrDataSet();
            
         var pdsetccdetdata855ihdr = new pdsetccdetdata855ihdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ihdrRow = pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Newttbletccdetdata849ihdrRow();
         Etccdetdata849ihdr.UpdateRowFromEtccdetdata849ihdr(ref ttbletccdetdata849ihdrRow, AsedientryETCCDetailDataCancelHdrOverrideRequestAPI.etccdetdata849ihdr);
         pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Addttbletccdetdata849ihdrRow((pdsetccdetdata849ihdrDataSet.ttbletccdetdata849ihdrRow)ttbletccdetdata849ihdrRow);
          
         DataRow ttbletccdetdata855ihdrRow = pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Newttbletccdetdata855ihdrRow();
         Etccdetdata855ihdr.UpdateRowFromEtccdetdata855ihdr(ref ttbletccdetdata855ihdrRow, AsedientryETCCDetailDataCancelHdrOverrideRequestAPI.etccdetdata855ihdr);
         pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Addttbletccdetdata855ihdrRow((pdsetccdetdata855ihdrDataSet.ttbletccdetdata855ihdrRow)ttbletccdetdata855ihdrRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataCancelHdrOverride - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataCancelHdrOverride(ref pdsContext,  pdsetccdetdata849ihdr,  pdsetccdetdata855ihdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataCancelHdrOverride - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849ihdr);
      }

      public void ETCCDetailDataHdrOverrideUpdt(AsedientryETCCDetailDataHdrOverrideUpdtRequestAPI AsedientryETCCDetailDataHdrOverrideUpdtRequestAPI)
      {   
         
         var pdsetccdetdata849ihdr = new pdsetccdetdata849ihdrDataSet();
            
         var pdsetccdetdata855ihdr = new pdsetccdetdata855ihdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ihdrRow = pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Newttbletccdetdata849ihdrRow();
         Etccdetdata849ihdr.UpdateRowFromEtccdetdata849ihdr(ref ttbletccdetdata849ihdrRow, AsedientryETCCDetailDataHdrOverrideUpdtRequestAPI.etccdetdata849ihdr);
         pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Addttbletccdetdata849ihdrRow((pdsetccdetdata849ihdrDataSet.ttbletccdetdata849ihdrRow)ttbletccdetdata849ihdrRow);
          
         DataRow ttbletccdetdata855ihdrRow = pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Newttbletccdetdata855ihdrRow();
         Etccdetdata855ihdr.UpdateRowFromEtccdetdata855ihdr(ref ttbletccdetdata855ihdrRow, AsedientryETCCDetailDataHdrOverrideUpdtRequestAPI.etccdetdata855ihdr);
         pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Addttbletccdetdata855ihdrRow((pdsetccdetdata855ihdrDataSet.ttbletccdetdata855ihdrRow)ttbletccdetdata855ihdrRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataHdrOverrideUpdt - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataHdrOverrideUpdt(ref pdsContext,  pdsetccdetdata849ihdr,  pdsetccdetdata855ihdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataHdrOverrideUpdt - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849ihdr);
      }

      public void ETCCDetailDataCreateLineOverride(AsedientryETCCDetailDataCreateLineOverrideRequestAPI AsedientryETCCDetailDataCreateLineOverrideRequestAPI)
      {   
         
         var pdsetccdetdata849iline = new pdsetccdetdata849ilineDataSet();
            
         var pdsetccdetdata855iline = new pdsetccdetdata855ilineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ilineRow = pdsetccdetdata849iline.ttbletccdetdata849iline.Newttbletccdetdata849ilineRow();
         Etccdetdata849iline.UpdateRowFromEtccdetdata849iline(ref ttbletccdetdata849ilineRow, AsedientryETCCDetailDataCreateLineOverrideRequestAPI.etccdetdata849iline);
         pdsetccdetdata849iline.ttbletccdetdata849iline.Addttbletccdetdata849ilineRow((pdsetccdetdata849ilineDataSet.ttbletccdetdata849ilineRow)ttbletccdetdata849ilineRow);
          
         DataRow ttbletccdetdata855ilineRow = pdsetccdetdata855iline.ttbletccdetdata855iline.Newttbletccdetdata855ilineRow();
         Etccdetdata855iline.UpdateRowFromEtccdetdata855iline(ref ttbletccdetdata855ilineRow, AsedientryETCCDetailDataCreateLineOverrideRequestAPI.etccdetdata855iline);
         pdsetccdetdata855iline.ttbletccdetdata855iline.Addttbletccdetdata855ilineRow((pdsetccdetdata855ilineDataSet.ttbletccdetdata855ilineRow)ttbletccdetdata855ilineRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataCreateLineOverride - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataCreateLineOverride(ref pdsContext,  pdsetccdetdata849iline,  pdsetccdetdata855iline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataCreateLineOverride - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849iline);
      }

      public void ETCCDetailDataCancelLineOverride(AsedientryETCCDetailDataCancelLineOverrideRequestAPI AsedientryETCCDetailDataCancelLineOverrideRequestAPI)
      {   
         
         var pdsetccdetdata849iline = new pdsetccdetdata849ilineDataSet();
            
         var pdsetccdetdata855iline = new pdsetccdetdata855ilineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ilineRow = pdsetccdetdata849iline.ttbletccdetdata849iline.Newttbletccdetdata849ilineRow();
         Etccdetdata849iline.UpdateRowFromEtccdetdata849iline(ref ttbletccdetdata849ilineRow, AsedientryETCCDetailDataCancelLineOverrideRequestAPI.etccdetdata849iline);
         pdsetccdetdata849iline.ttbletccdetdata849iline.Addttbletccdetdata849ilineRow((pdsetccdetdata849ilineDataSet.ttbletccdetdata849ilineRow)ttbletccdetdata849ilineRow);
          
         DataRow ttbletccdetdata855ilineRow = pdsetccdetdata855iline.ttbletccdetdata855iline.Newttbletccdetdata855ilineRow();
         Etccdetdata855iline.UpdateRowFromEtccdetdata855iline(ref ttbletccdetdata855ilineRow, AsedientryETCCDetailDataCancelLineOverrideRequestAPI.etccdetdata855iline);
         pdsetccdetdata855iline.ttbletccdetdata855iline.Addttbletccdetdata855ilineRow((pdsetccdetdata855ilineDataSet.ttbletccdetdata855ilineRow)ttbletccdetdata855ilineRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataCancelLineOverride - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataCancelLineOverride(ref pdsContext,  pdsetccdetdata849iline,  pdsetccdetdata855iline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataCancelLineOverride - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849iline);
      }

      public void ETCCDetailDataLineOverrideUpdt(AsedientryETCCDetailDataLineOverrideUpdtRequestAPI AsedientryETCCDetailDataLineOverrideUpdtRequestAPI)
      {   
         
         var pdsetccdetdata849iline = new pdsetccdetdata849ilineDataSet();
            
         var pdsetccdetdata855iline = new pdsetccdetdata855ilineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbletccdetdata849ilineRow = pdsetccdetdata849iline.ttbletccdetdata849iline.Newttbletccdetdata849ilineRow();
         Etccdetdata849iline.UpdateRowFromEtccdetdata849iline(ref ttbletccdetdata849ilineRow, AsedientryETCCDetailDataLineOverrideUpdtRequestAPI.etccdetdata849iline);
         pdsetccdetdata849iline.ttbletccdetdata849iline.Addttbletccdetdata849ilineRow((pdsetccdetdata849ilineDataSet.ttbletccdetdata849ilineRow)ttbletccdetdata849ilineRow);
          
         DataRow ttbletccdetdata855ilineRow = pdsetccdetdata855iline.ttbletccdetdata855iline.Newttbletccdetdata855ilineRow();
         Etccdetdata855iline.UpdateRowFromEtccdetdata855iline(ref ttbletccdetdata855ilineRow, AsedientryETCCDetailDataLineOverrideUpdtRequestAPI.etccdetdata855iline);
         pdsetccdetdata855iline.ttbletccdetdata855iline.Addttbletccdetdata855ilineRow((pdsetccdetdata855ilineDataSet.ttbletccdetdata855ilineRow)ttbletccdetdata855ilineRow);
          
         
         NLogLoggerP.Trace("ETCCDetailDataLineOverrideUpdt - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataLineOverrideUpdt(ref pdsContext,  pdsetccdetdata849iline,  pdsetccdetdata855iline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataLineOverrideUpdt - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849iline);
      }

      public Etccdetdata855inotes ETCCDetailDataGetNotes(Etccdetdata855inotes etccdetdata855inotes)
      {   
         var result = new Etccdetdata855inotes();
         
         var pdsetccdetdata855inotes = new pdsetccdetdata855inotesDataSet();
            
         DataRow ttbletccdetdata855inotesCriteria = pdsetccdetdata855inotes.ttbletccdetdata855inotes.Newttbletccdetdata855inotesRow();
         Etccdetdata855inotes.UpdateRowFromEtccdetdata855inotes(ref ttbletccdetdata855inotesCriteria, etccdetdata855inotes);
         pdsetccdetdata855inotes.ttbletccdetdata855inotes.Addttbletccdetdata855inotesRow((pdsetccdetdata855inotesDataSet.ttbletccdetdata855inotesRow)ttbletccdetdata855inotesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailDataGetNotes - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataGetNotes(ref pdsContext, ref pdsetccdetdata855inotes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataGetNotes - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata855inotes); 
    
         if (pdsetccdetdata855inotes.ttbletccdetdata855inotes.Count > 0) 
         { 
             result = Etccdetdata855inotes.BuildEtccdetdata855inotesFromRow(pdsetccdetdata855inotes.ttbletccdetdata855inotes[0]);
         } 
              
          
         return result;
          
      }

      public string ETCCDetailDataNotesUpdate(Etccdetdata855inotes etccdetdata855inotes)
      {   
          
         var pdsetccdetdata855inotes = new pdsetccdetdata855inotesDataSet();
            
         DataRow ttbletccdetdata855inotesCriteria = pdsetccdetdata855inotes.ttbletccdetdata855inotes.Newttbletccdetdata855inotesRow();
         Etccdetdata855inotes.UpdateRowFromEtccdetdata855inotes(ref ttbletccdetdata855inotesCriteria, etccdetdata855inotes);
         pdsetccdetdata855inotes.ttbletccdetdata855inotes.Addttbletccdetdata855inotesRow((pdsetccdetdata855inotesDataSet.ttbletccdetdata855inotesRow)ttbletccdetdata855inotesCriteria);
            
         string cErrorMessage = string.Empty;
         string cMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ETCCDetailDataNotesUpdate - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataNotesUpdate(ref pdsContext,  pdsetccdetdata855inotes, out cErrorMessage, out cMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataNotesUpdate - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata855inotes); 
    
         return cMessage;
      
      }

      public IEnumerable<Edsvsearchresults> EDSVsearch(Edsvsearchcriteria edsvsearchcriteria)
      {   
         var results = new List<Edsvsearchresults>();
         
         var pdsedsvsearch = new pdsedsvsearchDataSet();
            
         DataRow ttbledsvsearchcriteriaCriteria = pdsedsvsearch.ttbledsvsearchcriteria.NewttbledsvsearchcriteriaRow();
         Edsvsearchcriteria.UpdateRowFromEdsvsearchcriteria(ref ttbledsvsearchcriteriaCriteria, edsvsearchcriteria);
         pdsedsvsearch.ttbledsvsearchcriteria.AddttbledsvsearchcriteriaRow((pdsedsvsearchDataSet.ttbledsvsearchcriteriaRow)ttbledsvsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("EDSVsearch - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.EDSVsearch(ref pdsContext, ref pdsedsvsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("EDSVsearch - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsedsvsearch); 
    
            foreach (DataRow row in pdsedsvsearch.ttbledsvsearchresults)
            {
                results.Add(Edsvsearchresults.BuildEdsvsearchresultsFromRow(row));
            }
            return results;
        
      }

      public string ETCCDetailDataHeaderApprove(AsedientryETCCDetailDataHeaderApproveRequestAPI AsedientryETCCDetailDataHeaderApproveRequestAPI)
      {   
          
         var pdsetccdetdata849ihdr = new pdsetccdetdata849ihdrDataSet();
            
         var pdsetccdetdata855ihdr = new pdsetccdetdata855ihdrDataSet();
            
         string cErrorMessage = string.Empty;
         string cMessage = string.Empty;
   
         foreach (var obj in AsedientryETCCDetailDataHeaderApproveRequestAPI.etccdetdata849ihdr)
         {
            DataRow ttbletccdetdata849ihdrRow = pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Newttbletccdetdata849ihdrRow();
            Etccdetdata849ihdr.UpdateRowFromEtccdetdata849ihdr(ref ttbletccdetdata849ihdrRow, obj);
            pdsetccdetdata849ihdr.ttbletccdetdata849ihdr.Addttbletccdetdata849ihdrRow((pdsetccdetdata849ihdrDataSet.ttbletccdetdata849ihdrRow)ttbletccdetdata849ihdrRow);
         }
          
         foreach (var obj in AsedientryETCCDetailDataHeaderApproveRequestAPI.etccdetdata855ihdr)
         {
            DataRow ttbletccdetdata855ihdrRow = pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Newttbletccdetdata855ihdrRow();
            Etccdetdata855ihdr.UpdateRowFromEtccdetdata855ihdr(ref ttbletccdetdata855ihdrRow, obj);
            pdsetccdetdata855ihdr.ttbletccdetdata855ihdr.Addttbletccdetdata855ihdrRow((pdsetccdetdata855ihdrDataSet.ttbletccdetdata855ihdrRow)ttbletccdetdata855ihdrRow);
         }
          
         var  cApproveType = AsedientryETCCDetailDataHeaderApproveRequestAPI.cApproveType;
            
         
         NLogLoggerP.Trace("ETCCDetailDataHeaderApprove - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataHeaderApprove(ref pdsContext,  cApproveType,  pdsetccdetdata849ihdr,  pdsetccdetdata855ihdr, out cErrorMessage, out cMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataHeaderApprove - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849ihdr); 
    
         return cMessage;
      
      }

      public string ETCCDetailDataLineApprove(AsedientryETCCDetailDataLineApproveRequestAPI AsedientryETCCDetailDataLineApproveRequestAPI)
      {   
          
         var pdsetccdetdata849iline = new pdsetccdetdata849ilineDataSet();
            
         var pdsetccdetdata855iline = new pdsetccdetdata855ilineDataSet();
            
         string cErrorMessage = string.Empty;
         string cMessage = string.Empty;
   
         foreach (var obj in AsedientryETCCDetailDataLineApproveRequestAPI.etccdetdata849iline)
         {
            DataRow ttbletccdetdata849ilineRow = pdsetccdetdata849iline.ttbletccdetdata849iline.Newttbletccdetdata849ilineRow();
            Etccdetdata849iline.UpdateRowFromEtccdetdata849iline(ref ttbletccdetdata849ilineRow, obj);
            pdsetccdetdata849iline.ttbletccdetdata849iline.Addttbletccdetdata849ilineRow((pdsetccdetdata849ilineDataSet.ttbletccdetdata849ilineRow)ttbletccdetdata849ilineRow);
         }
          
         foreach (var obj in AsedientryETCCDetailDataLineApproveRequestAPI.etccdetdata855iline)
         {
            DataRow ttbletccdetdata855ilineRow = pdsetccdetdata855iline.ttbletccdetdata855iline.Newttbletccdetdata855ilineRow();
            Etccdetdata855iline.UpdateRowFromEtccdetdata855iline(ref ttbletccdetdata855ilineRow, obj);
            pdsetccdetdata855iline.ttbletccdetdata855iline.Addttbletccdetdata855ilineRow((pdsetccdetdata855ilineDataSet.ttbletccdetdata855ilineRow)ttbletccdetdata855ilineRow);
         }
          
         var  cApproveType = AsedientryETCCDetailDataLineApproveRequestAPI.cApproveType;
            
         
         NLogLoggerP.Trace("ETCCDetailDataLineApprove - Asedientry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsedientryproxy = this.proxyAppObject.CreatePO_asedientryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsedientryproxy.ETCCDetailDataLineApprove(ref pdsContext,  cApproveType,  pdsetccdetdata849iline,  pdsetccdetdata855iline, out cErrorMessage, out cMessage);
               }
            });
         NLogLoggerP.Info("ETCCDetailDataLineApprove - Asedientry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsetccdetdata849iline); 
    
         return cMessage;
      
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  