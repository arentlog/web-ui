//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscontactscrt;
   using Models.Pdscamsubject;
   using Models.Pdscamcontactlist;
   using Models.Pdscamcontact;
   using Models.Pdsmessaging;
   using Models.Pdscammethodtypes;
   using Models.Pdscamcontactsearch;
   using Models.Pdscamcontactties;
   using Models.Complex;

   public partial class AscamAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AscamAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AscamAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Contactscrt> ContactCreate(IEnumerable<Contactscrt> contactscrt)
      {   
         var results = new List<Contactscrt>();
         
         var pdscontactscrt = new pdscontactscrtDataSet();
            
         foreach (var obj in contactscrt)
         {
             DataRow row = pdscontactscrt.ttblcontactscrt.NewttblcontactscrtRow();
             Contactscrt.UpdateRowFromContactscrt(ref row, obj);
             pdscontactscrt.ttblcontactscrt.AddttblcontactscrtRow((pdscontactscrtDataSet.ttblcontactscrtRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ContactCreate - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.ContactCreate(ref pdsContext, ref pdscontactscrt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ContactCreate - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscontactscrt); 
    
            foreach (DataRow row in pdscontactscrt.ttblcontactscrt)
            {
                results.Add(Contactscrt.BuildContactscrtFromRow(row));
            }
            return results;
        
      }

      public Contactscrt ContactUpdate(Contactscrt contactscrt)
      {   
         var result = new Contactscrt();
         
         var pdscontactscrt = new pdscontactscrtDataSet();
            
         DataRow ttblcontactscrtCriteria = pdscontactscrt.ttblcontactscrt.NewttblcontactscrtRow();
         Contactscrt.UpdateRowFromContactscrt(ref ttblcontactscrtCriteria, contactscrt);
         pdscontactscrt.ttblcontactscrt.AddttblcontactscrtRow((pdscontactscrtDataSet.ttblcontactscrtRow)ttblcontactscrtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ContactUpdate - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.ContactUpdate(ref pdsContext, ref pdscontactscrt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ContactUpdate - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscontactscrt); 
    
         if (pdscontactscrt.ttblcontactscrt.Count > 0) 
         { 
             result = Contactscrt.BuildContactscrtFromRow(pdscontactscrt.ttblcontactscrt[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Camcontactlist> CAMBuildContactList(Camsubject camsubject)
      {   
         var results = new List<Camcontactlist>();
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         var pdscamcontactlist = new pdscamcontactlistDataSet();
            
         DataRow ttblcamsubjectCriteria = pdscamsubject.ttblcamsubject.NewttblcamsubjectRow();
         Camsubject.UpdateRowFromCamsubject(ref ttblcamsubjectCriteria, camsubject);
         pdscamsubject.ttblcamsubject.AddttblcamsubjectRow((pdscamsubjectDataSet.ttblcamsubjectRow)ttblcamsubjectCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMBuildContactList - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMBuildContactList(ref pdsContext,  pdscamsubject, out pdscamcontactlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMBuildContactList - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject); 
    
            foreach (DataRow row in pdscamcontactlist.ttblcamcontactlist)
            {
                results.Add(Camcontactlist.BuildCamcontactlistFromRow(row));
            }
            return results;
        
      }

      public void CAMContactDelete(decimal dContactid)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMContactDelete - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactDelete(ref pdsContext,  dContactid, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactDelete - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AscamCAMContactInitializeResponseAPI CAMContactInitialize(AscamCAMContactInitializeRequestAPI AscamCAMContactInitializeRequestAPI)
      {   
         var result = new AscamCAMContactInitializeResponseAPI();
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         var pdscamcontact = new pdscamcontactDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcamsubjectRow = pdscamsubject.ttblcamsubject.NewttblcamsubjectRow();
         Camsubject.UpdateRowFromCamsubject(ref ttblcamsubjectRow, AscamCAMContactInitializeRequestAPI.camsubject);
         pdscamsubject.ttblcamsubject.AddttblcamsubjectRow((pdscamsubjectDataSet.ttblcamsubjectRow)ttblcamsubjectRow);
          
         var  dContactID = AscamCAMContactInitializeRequestAPI.dContactID;
            
         
         NLogLoggerP.Trace("CAMContactInitialize - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactInitialize(ref pdsContext,  dContactID,  pdscamsubject, out pdscamcontact, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactInitialize - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject); 
    
         if (pdscamcontact.ttblcamcontact.Count > 0)
         {
            result.camcontact = Camcontact.BuildCamcontactFromRow(pdscamcontact.ttblcamcontact[0]);
         }
                    
         foreach (DataRow row in pdscamcontact.ttblcamcontactmethods)
         {
            result.camcontactmethods.Add(Camcontactmethods.BuildCamcontactmethodsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public void CAMContactAddToSubject(AscamCAMContactAddToSubjectRequestAPI AscamCAMContactAddToSubjectRequestAPI)
      {   
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcamsubjectRow = pdscamsubject.ttblcamsubject.NewttblcamsubjectRow();
         Camsubject.UpdateRowFromCamsubject(ref ttblcamsubjectRow, AscamCAMContactAddToSubjectRequestAPI.camsubject);
         pdscamsubject.ttblcamsubject.AddttblcamsubjectRow((pdscamsubjectDataSet.ttblcamsubjectRow)ttblcamsubjectRow);
          
         var  dContactid = AscamCAMContactAddToSubjectRequestAPI.dContactid;
            
         
         NLogLoggerP.Trace("CAMContactAddToSubject - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactAddToSubject(ref pdsContext,  dContactid,  pdscamsubject, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactAddToSubject - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject);
      }

      public void CAMContactRemoveFromSubject(AscamCAMContactRemoveFromSubjectRequestAPI AscamCAMContactRemoveFromSubjectRequestAPI)
      {   
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcamsubjectRow = pdscamsubject.ttblcamsubject.NewttblcamsubjectRow();
         Camsubject.UpdateRowFromCamsubject(ref ttblcamsubjectRow, AscamCAMContactRemoveFromSubjectRequestAPI.camsubject);
         pdscamsubject.ttblcamsubject.AddttblcamsubjectRow((pdscamsubjectDataSet.ttblcamsubjectRow)ttblcamsubjectRow);
          
         var  dContactid = AscamCAMContactRemoveFromSubjectRequestAPI.dContactid;
            
         
         NLogLoggerP.Trace("CAMContactRemoveFromSubject - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactRemoveFromSubject(ref pdsContext,  dContactid,  pdscamsubject, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactRemoveFromSubject - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject);
      }

      public bool CAMContactSearchDupName(string cFirstName, string cLastName)
      {   
          
         bool lDuplicate = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMContactSearchDupName - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactSearchDupName(ref pdsContext,  cFirstName,  cLastName, out lDuplicate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactSearchDupName - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lDuplicate;
      
      }

      public AscamCAMContactUpdateResponseAPI CAMContactUpdate(AscamCAMContactUpdateRequestAPI AscamCAMContactUpdateRequestAPI)
      {   
         var result = new AscamCAMContactUpdateResponseAPI();
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         var pdscamcontact = new pdscamcontactDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcamcontactRow = pdscamcontact.ttblcamcontact.NewttblcamcontactRow();
         Camcontact.UpdateRowFromCamcontact(ref ttblcamcontactRow, AscamCAMContactUpdateRequestAPI.camcontact);
         pdscamcontact.ttblcamcontact.AddttblcamcontactRow((pdscamcontactDataSet.ttblcamcontactRow)ttblcamcontactRow);
          
         foreach (var obj in AscamCAMContactUpdateRequestAPI.camcontactmethods)
         {
            DataRow ttblcamcontactmethodsRow = pdscamcontact.ttblcamcontactmethods.NewttblcamcontactmethodsRow();
            Camcontactmethods.UpdateRowFromCamcontactmethods(ref ttblcamcontactmethodsRow, obj);
            pdscamcontact.ttblcamcontactmethods.AddttblcamcontactmethodsRow((pdscamcontactDataSet.ttblcamcontactmethodsRow)ttblcamcontactmethodsRow);
         }
          
         DataRow ttblcamsubjectRow = pdscamsubject.ttblcamsubject.NewttblcamsubjectRow();
         Camsubject.UpdateRowFromCamsubject(ref ttblcamsubjectRow, AscamCAMContactUpdateRequestAPI.camsubject);
         pdscamsubject.ttblcamsubject.AddttblcamsubjectRow((pdscamsubjectDataSet.ttblcamsubjectRow)ttblcamsubjectRow);
          
         
         NLogLoggerP.Trace("CAMContactUpdate - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactUpdate(ref pdsContext,  pdscamsubject, ref pdscamcontact, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactUpdate - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject); 
    
         if (pdscamcontact.ttblcamcontact.Count > 0)
         {
            result.camcontact = Camcontact.BuildCamcontactFromRow(pdscamcontact.ttblcamcontact[0]);
         }
                    
         foreach (DataRow row in pdscamcontact.ttblcamcontactmethods)
         {
            result.camcontactmethods.Add(Camcontactmethods.BuildCamcontactmethodsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Cammethodtypes> CAMMethodTypesRetrieve()
      {   
         var results = new List<Cammethodtypes>();
         
         var pdscammethodtypes = new pdscammethodtypesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMMethodTypesRetrieve - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMMethodTypesRetrieve(ref pdsContext, out pdscammethodtypes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMMethodTypesRetrieve - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscammethodtypes); 
    
            foreach (DataRow row in pdscammethodtypes.ttblcammethodtypes)
            {
                results.Add(Cammethodtypes.BuildCammethodtypesFromRow(row));
            }
            return results;
        
      }

      public Camsubject CAMRetrieveSubjectForOrder(string pvOrdertype, int pvOrderno, int pvOrdersuf)
      {   
         var result = new Camsubject();
         
         var pdscamsubject = new pdscamsubjectDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMRetrieveSubjectForOrder - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMRetrieveSubjectForOrder(ref pdsContext,  pvOrdertype,  pvOrderno,  pvOrdersuf, out pdscamsubject, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMRetrieveSubjectForOrder - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamsubject); 
    
         if (pdscamsubject.ttblcamsubject.Count > 0) 
         { 
             result = Camsubject.BuildCamsubjectFromRow(pdscamsubject.ttblcamsubject[0]);
         } 
              
          
         return result;
          
      }

      public AscamCAMContactSearchResponseAPI CAMContactSearch(Camcontactcriteria camcontactcriteria)
      {   
         var result = new AscamCAMContactSearchResponseAPI();
         
         var pdscamcontactsearch = new pdscamcontactsearchDataSet();
            
         DataRow ttblcamcontactcriteriaCriteria = pdscamcontactsearch.ttblcamcontactcriteria.NewttblcamcontactcriteriaRow();
         Camcontactcriteria.UpdateRowFromCamcontactcriteria(ref ttblcamcontactcriteriaCriteria, camcontactcriteria);
         pdscamcontactsearch.ttblcamcontactcriteria.AddttblcamcontactcriteriaRow((pdscamcontactsearchDataSet.ttblcamcontactcriteriaRow)ttblcamcontactcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMContactSearch - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactSearch(ref pdsContext, ref pdscamcontactsearch, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactSearch - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamcontactsearch); 
    
         foreach (DataRow row in pdscamcontactsearch.ttblcamcontactsearchlist)
         {
            result.camcontactsearchlist.Add(Camcontactsearchlist.BuildCamcontactsearchlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Camcontactties> CAMContactGetTies(decimal dContactid)
      {   
         var results = new List<Camcontactties>();
         
         var pdscamcontactties = new pdscamcontacttiesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CAMContactGetTies - Ascam - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscamproxy = this.proxyAppObject.CreatePO_ascamproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscamproxy.CAMContactGetTies(ref pdsContext,  dContactid, out pdscamcontactties, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CAMContactGetTies - Ascam - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscamcontactties); 
    
            foreach (DataRow row in pdscamcontactties.ttblcamcontactties)
            {
                results.Add(Camcontactties.BuildCamcontacttiesFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  