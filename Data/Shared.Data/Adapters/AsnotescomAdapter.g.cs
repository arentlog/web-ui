//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsnotesmnt;
   using Models.Pdscommentsmnt;
   using Models.Pdsgetnotelist;
   using Models.Pdsnotecreatetext;
   using Models.Pdsnotecreatefile;
   using Models.Pdsnotecreateurl;
   using Models.Pdsnoteupdatetext;
   using Models.Pdsnoteupdatefile;
   using Models.Pdsnoteupdateurl;
   using Models.Pdsnoteflagsettings;
   using Models.Pdsnotemovepageno;
   using Models.Pdsgeticetnotesidbyrowid;
   using Models.Complex;

   public partial class AsnotescomAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AsnotescomAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsnotescomAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Notesmnt> NotesCreate(IEnumerable<Notesmnt> notesmnt)
      {   
         var results = new List<Notesmnt>();
         
         var pdsnotesmnt = new pdsnotesmntDataSet();
            
         foreach (var obj in notesmnt)
         {
             DataRow row = pdsnotesmnt.ttblnotesmnt.NewttblnotesmntRow();
             Notesmnt.UpdateRowFromNotesmnt(ref row, obj);
             pdsnotesmnt.ttblnotesmnt.AddttblnotesmntRow((pdsnotesmntDataSet.ttblnotesmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NotesCreate - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NotesCreate(ref pdsContext, ref pdsnotesmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NotesCreate - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotesmnt); 
    
            foreach (DataRow row in pdsnotesmnt.ttblnotesmnt)
            {
                results.Add(Notesmnt.BuildNotesmntFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Notesmnt> NotesUpdate(IEnumerable<Notesmnt> notesmnt)
      {   
         var results = new List<Notesmnt>();
         
         var pdsnotesmnt = new pdsnotesmntDataSet();
            
         foreach (var obj in notesmnt)
         {
             DataRow row = pdsnotesmnt.ttblnotesmnt.NewttblnotesmntRow();
             Notesmnt.UpdateRowFromNotesmnt(ref row, obj);
             pdsnotesmnt.ttblnotesmnt.AddttblnotesmntRow((pdsnotesmntDataSet.ttblnotesmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NotesUpdate - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NotesUpdate(ref pdsContext, ref pdsnotesmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NotesUpdate - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotesmnt); 
    
            foreach (DataRow row in pdsnotesmnt.ttblnotesmnt)
            {
                results.Add(Notesmnt.BuildNotesmntFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Notesmnt> NotesDelete(IEnumerable<Notesmnt> notesmnt)
      {   
         var results = new List<Notesmnt>();
         
         var pdsnotesmnt = new pdsnotesmntDataSet();
            
         foreach (var obj in notesmnt)
         {
             DataRow row = pdsnotesmnt.ttblnotesmnt.NewttblnotesmntRow();
             Notesmnt.UpdateRowFromNotesmnt(ref row, obj);
             pdsnotesmnt.ttblnotesmnt.AddttblnotesmntRow((pdsnotesmntDataSet.ttblnotesmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NotesDelete - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NotesDelete(ref pdsContext, ref pdsnotesmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NotesDelete - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotesmnt); 
    
            foreach (DataRow row in pdsnotesmnt.ttblnotesmnt)
            {
                results.Add(Notesmnt.BuildNotesmntFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Commentsmnt> CommentsCreate(IEnumerable<Commentsmnt> commentsmnt)
      {   
         var results = new List<Commentsmnt>();
         
         var pdscommentsmnt = new pdscommentsmntDataSet();
            
         foreach (var obj in commentsmnt)
         {
             DataRow row = pdscommentsmnt.ttblcommentsmnt.NewttblcommentsmntRow();
             Commentsmnt.UpdateRowFromCommentsmnt(ref row, obj);
             pdscommentsmnt.ttblcommentsmnt.AddttblcommentsmntRow((pdscommentsmntDataSet.ttblcommentsmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CommentsCreate - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.CommentsCreate(ref pdsContext, ref pdscommentsmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CommentsCreate - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscommentsmnt); 
    
            foreach (DataRow row in pdscommentsmnt.ttblcommentsmnt)
            {
                results.Add(Commentsmnt.BuildCommentsmntFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Commentsmnt> CommentsUpdate(IEnumerable<Commentsmnt> commentsmnt)
      {   
         var results = new List<Commentsmnt>();
         
         var pdscommentsmnt = new pdscommentsmntDataSet();
            
         foreach (var obj in commentsmnt)
         {
             DataRow row = pdscommentsmnt.ttblcommentsmnt.NewttblcommentsmntRow();
             Commentsmnt.UpdateRowFromCommentsmnt(ref row, obj);
             pdscommentsmnt.ttblcommentsmnt.AddttblcommentsmntRow((pdscommentsmntDataSet.ttblcommentsmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CommentsUpdate - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.CommentsUpdate(ref pdsContext, ref pdscommentsmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CommentsUpdate - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscommentsmnt); 
    
            foreach (DataRow row in pdscommentsmnt.ttblcommentsmnt)
            {
                results.Add(Commentsmnt.BuildCommentsmntFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Commentsmnt> CommentsDelete(IEnumerable<Commentsmnt> commentsmnt)
      {   
         var results = new List<Commentsmnt>();
         
         var pdscommentsmnt = new pdscommentsmntDataSet();
            
         foreach (var obj in commentsmnt)
         {
             DataRow row = pdscommentsmnt.ttblcommentsmnt.NewttblcommentsmntRow();
             Commentsmnt.UpdateRowFromCommentsmnt(ref row, obj);
             pdscommentsmnt.ttblcommentsmnt.AddttblcommentsmntRow((pdscommentsmntDataSet.ttblcommentsmntRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CommentsDelete - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.CommentsDelete(ref pdsContext, ref pdscommentsmnt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CommentsDelete - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscommentsmnt); 
    
            foreach (DataRow row in pdscommentsmnt.ttblcommentsmnt)
            {
                results.Add(Commentsmnt.BuildCommentsmntFromRow(row));
            }
            return results;
        
      }

      public AsnotescomGetNoteListResponseAPI GetNoteList(Getnotelistcriteria getnotelistcriteria)
      {   
         var result = new AsnotescomGetNoteListResponseAPI();
         
         var pdsgetnotelist = new pdsgetnotelistDataSet();
            
         DataRow ttblgetnotelistcriteriaCriteria = pdsgetnotelist.ttblgetnotelistcriteria.NewttblgetnotelistcriteriaRow();
         Getnotelistcriteria.UpdateRowFromGetnotelistcriteria(ref ttblgetnotelistcriteriaCriteria, getnotelistcriteria);
         pdsgetnotelist.ttblgetnotelistcriteria.AddttblgetnotelistcriteriaRow((pdsgetnotelistDataSet.ttblgetnotelistcriteriaRow)ttblgetnotelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetNoteList - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.GetNoteList(ref pdsContext, ref pdsgetnotelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetNoteList - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetnotelist); 
    
         if (pdsgetnotelist.ttblgetnotelistcriteria.Count > 0)
         {
            result.getnotelistcriteria = Getnotelistcriteria.BuildGetnotelistcriteriaFromRow(pdsgetnotelist.ttblgetnotelistcriteria[0]);
         }
                    
         foreach (DataRow row in pdsgetnotelist.ttblgetnotelistresults)
         {
            result.getnotelistresults.Add(Getnotelistresults.BuildGetnotelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void NoteCreateText(Notecreatetext notecreatetext)
      {   
         
         var pdsnotecreatetext = new pdsnotecreatetextDataSet();
            
         DataRow ttblnotecreatetextCriteria = pdsnotecreatetext.ttblnotecreatetext.NewttblnotecreatetextRow();
         Notecreatetext.UpdateRowFromNotecreatetext(ref ttblnotecreatetextCriteria, notecreatetext);
         pdsnotecreatetext.ttblnotecreatetext.AddttblnotecreatetextRow((pdsnotecreatetextDataSet.ttblnotecreatetextRow)ttblnotecreatetextCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteCreateText - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteCreateText(ref pdsContext, ref pdsnotecreatetext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteCreateText - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotecreatetext);
      }

      public void NoteCreateFile(IEnumerable<Notecreatefile> notecreatefile)
      {   
         
         var pdsnotecreatefile = new pdsnotecreatefileDataSet();
            
         foreach (var obj in notecreatefile)
         {
             DataRow row = pdsnotecreatefile.ttblnotecreatefile.NewttblnotecreatefileRow();
             Notecreatefile.UpdateRowFromNotecreatefile(ref row, obj);
             pdsnotecreatefile.ttblnotecreatefile.AddttblnotecreatefileRow((pdsnotecreatefileDataSet.ttblnotecreatefileRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteCreateFile - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteCreateFile(ref pdsContext, ref pdsnotecreatefile, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteCreateFile - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotecreatefile);
      }

      public void NoteCreateURL(Notecreateurl notecreateurl)
      {   
         
         var pdsnotecreateurl = new pdsnotecreateurlDataSet();
            
         DataRow ttblnotecreateurlCriteria = pdsnotecreateurl.ttblnotecreateurl.NewttblnotecreateurlRow();
         Notecreateurl.UpdateRowFromNotecreateurl(ref ttblnotecreateurlCriteria, notecreateurl);
         pdsnotecreateurl.ttblnotecreateurl.AddttblnotecreateurlRow((pdsnotecreateurlDataSet.ttblnotecreateurlRow)ttblnotecreateurlCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteCreateURL - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteCreateURL(ref pdsContext, ref pdsnotecreateurl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteCreateURL - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotecreateurl);
      }

      public void NoteUpdateText(Noteupdatetext noteupdatetext)
      {   
         
         var pdsnoteupdatetext = new pdsnoteupdatetextDataSet();
            
         DataRow ttblnoteupdatetextCriteria = pdsnoteupdatetext.ttblnoteupdatetext.NewttblnoteupdatetextRow();
         Noteupdatetext.UpdateRowFromNoteupdatetext(ref ttblnoteupdatetextCriteria, noteupdatetext);
         pdsnoteupdatetext.ttblnoteupdatetext.AddttblnoteupdatetextRow((pdsnoteupdatetextDataSet.ttblnoteupdatetextRow)ttblnoteupdatetextCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteUpdateText - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteUpdateText(ref pdsContext, ref pdsnoteupdatetext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteUpdateText - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnoteupdatetext);
      }

      public void NoteUpdateFile(Noteupdatefile noteupdatefile)
      {   
         
         var pdsnoteupdatefile = new pdsnoteupdatefileDataSet();
            
         DataRow ttblnoteupdatefileCriteria = pdsnoteupdatefile.ttblnoteupdatefile.NewttblnoteupdatefileRow();
         Noteupdatefile.UpdateRowFromNoteupdatefile(ref ttblnoteupdatefileCriteria, noteupdatefile);
         pdsnoteupdatefile.ttblnoteupdatefile.AddttblnoteupdatefileRow((pdsnoteupdatefileDataSet.ttblnoteupdatefileRow)ttblnoteupdatefileCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteUpdateFile - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteUpdateFile(ref pdsContext, ref pdsnoteupdatefile, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteUpdateFile - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnoteupdatefile);
      }

      public void NoteUpdateURL(Noteupdateurl noteupdateurl)
      {   
         
         var pdsnoteupdateurl = new pdsnoteupdateurlDataSet();
            
         DataRow ttblnoteupdateurlCriteria = pdsnoteupdateurl.ttblnoteupdateurl.NewttblnoteupdateurlRow();
         Noteupdateurl.UpdateRowFromNoteupdateurl(ref ttblnoteupdateurlCriteria, noteupdateurl);
         pdsnoteupdateurl.ttblnoteupdateurl.AddttblnoteupdateurlRow((pdsnoteupdateurlDataSet.ttblnoteupdateurlRow)ttblnoteupdateurlCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteUpdateURL - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteUpdateURL(ref pdsContext, ref pdsnoteupdateurl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteUpdateURL - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnoteupdateurl);
      }

      public void NoteDeleteAllTypes(Noteupdatetext noteupdatetext)
      {   
         
         var pdsnoteupdatetext = new pdsnoteupdatetextDataSet();
            
         DataRow ttblnoteupdatetextCriteria = pdsnoteupdatetext.ttblnoteupdatetext.NewttblnoteupdatetextRow();
         Noteupdatetext.UpdateRowFromNoteupdatetext(ref ttblnoteupdatetextCriteria, noteupdatetext);
         pdsnoteupdatetext.ttblnoteupdatetext.AddttblnoteupdatetextRow((pdsnoteupdatetextDataSet.ttblnoteupdatetextRow)ttblnoteupdatetextCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteDeleteAllTypes - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteDeleteAllTypes(ref pdsContext,  pdsnoteupdatetext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteDeleteAllTypes - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnoteupdatetext);
      }

      public Noteflagsettings NoteGetFlagSettings(Noteflagsettings noteflagsettings)
      {   
         var result = new Noteflagsettings();
         
         var pdsnoteflagsettings = new pdsnoteflagsettingsDataSet();
            
         DataRow ttblnoteflagsettingsCriteria = pdsnoteflagsettings.ttblnoteflagsettings.NewttblnoteflagsettingsRow();
         Noteflagsettings.UpdateRowFromNoteflagsettings(ref ttblnoteflagsettingsCriteria, noteflagsettings);
         pdsnoteflagsettings.ttblnoteflagsettings.AddttblnoteflagsettingsRow((pdsnoteflagsettingsDataSet.ttblnoteflagsettingsRow)ttblnoteflagsettingsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteGetFlagSettings - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteGetFlagSettings(ref pdsContext, ref pdsnoteflagsettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteGetFlagSettings - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnoteflagsettings); 
    
         if (pdsnoteflagsettings.ttblnoteflagsettings.Count > 0) 
         { 
             result = Noteflagsettings.BuildNoteflagsettingsFromRow(pdsnoteflagsettings.ttblnoteflagsettings[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Notemovepagenoresults> NoteMovePageNumber(Notemovepageno notemovepageno)
      {   
         var results = new List<Notemovepagenoresults>();
         
         var pdsnotemovepageno = new pdsnotemovepagenoDataSet();
            
         DataRow ttblnotemovepagenoCriteria = pdsnotemovepageno.ttblnotemovepageno.NewttblnotemovepagenoRow();
         Notemovepageno.UpdateRowFromNotemovepageno(ref ttblnotemovepagenoCriteria, notemovepageno);
         pdsnotemovepageno.ttblnotemovepageno.AddttblnotemovepagenoRow((pdsnotemovepagenoDataSet.ttblnotemovepagenoRow)ttblnotemovepagenoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("NoteMovePageNumber - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.NoteMovePageNumber(ref pdsContext, ref pdsnotemovepageno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("NoteMovePageNumber - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotemovepageno); 
    
            foreach (DataRow row in pdsnotemovepageno.ttblnotemovepagenoresults)
            {
                results.Add(Notemovepagenoresults.BuildNotemovepagenoresultsFromRow(row));
            }
            return results;
        
      }

      public int GetIcetNotesId(string cIcetRowId, bool lCreateNoteIdFl)
      {   
          
         string cErrorMessage = string.Empty;
         int iIcetNotesId = 0;
   
         
         NLogLoggerP.Trace("GetIcetNotesId - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.GetIcetNotesId(ref pdsContext,  cIcetRowId,  lCreateNoteIdFl, out cErrorMessage, out iIcetNotesId);
               }
            });
         NLogLoggerP.Info("GetIcetNotesId - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return iIcetNotesId;
      
      }

      public Geticetnotesidbyrowid GetIcetNotesIdByRowId(Geticetnotesidbyrowid geticetnotesidbyrowid)
      {   
         var result = new Geticetnotesidbyrowid();
         
         var pdsgeticetnotesidbyrowid = new pdsgeticetnotesidbyrowidDataSet();
            
         DataRow ttblgeticetnotesidbyrowidCriteria = pdsgeticetnotesidbyrowid.ttblgeticetnotesidbyrowid.NewttblgeticetnotesidbyrowidRow();
         Geticetnotesidbyrowid.UpdateRowFromGeticetnotesidbyrowid(ref ttblgeticetnotesidbyrowidCriteria, geticetnotesidbyrowid);
         pdsgeticetnotesidbyrowid.ttblgeticetnotesidbyrowid.AddttblgeticetnotesidbyrowidRow((pdsgeticetnotesidbyrowidDataSet.ttblgeticetnotesidbyrowidRow)ttblgeticetnotesidbyrowidCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetIcetNotesIdByRowId - Asnotescom - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsnotescomproxy = this.proxyAppObject.CreatePO_asnotescomproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsnotescomproxy.GetIcetNotesIdByRowId(ref pdsContext, ref pdsgeticetnotesidbyrowid, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetIcetNotesIdByRowId - Asnotescom - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgeticetnotesidbyrowid); 
    
         if (pdsgeticetnotesidbyrowid.ttblgeticetnotesidbyrowid.Count > 0) 
         { 
             result = Geticetnotesidbyrowid.BuildGeticetnotesidbyrowidFromRow(pdsgeticetnotesidbyrowid.ttblgeticetnotesidbyrowid[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  