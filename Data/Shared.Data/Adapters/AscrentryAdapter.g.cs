//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscrec;
   using Models.Pdscrectrans;
   using Models.Pdscrecqc;
   using Models.Pdscrectransap;
   using Models.Pdscrectransar;
   using Models.Pdscrecqe;
   using Models.Pdsmessaging;
   using Models.Pdscrecqevoid;
   using Models.Complex;

   public partial class AscrentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AscrentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AscrentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AscrentryCRECReconcileResponseAPI CRECReconcile(Creccriteria creccriteria)
      {   
         var result = new AscrentryCRECReconcileResponseAPI();
         
         var pdscrec = new pdscrecDataSet();
            
         DataRow ttblcreccriteriaCriteria = pdscrec.ttblcreccriteria.NewttblcreccriteriaRow();
         Creccriteria.UpdateRowFromCreccriteria(ref ttblcreccriteriaCriteria, creccriteria);
         pdscrec.ttblcreccriteria.AddttblcreccriteriaRow((pdscrecDataSet.ttblcreccriteriaRow)ttblcreccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("CRECReconcile - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECReconcile(ref pdsContext, ref pdscrec, out cErrorMessage, out lMoreRecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("CRECReconcile - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrec); 
    
         foreach (DataRow row in pdscrec.ttblcrecreconcile)
         {
            result.crecreconcile.Add(Crecreconcile.BuildCrecreconcileFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AscrentryCRECTransResponseAPI CRECTrans(Crectranscriteria crectranscriteria)
      {   
         var result = new AscrentryCRECTransResponseAPI();
         
         var pdscrectrans = new pdscrectransDataSet();
            
         DataRow ttblcrectranscriteriaCriteria = pdscrectrans.ttblcrectranscriteria.NewttblcrectranscriteriaRow();
         Crectranscriteria.UpdateRowFromCrectranscriteria(ref ttblcrectranscriteriaCriteria, crectranscriteria);
         pdscrectrans.ttblcrectranscriteria.AddttblcrectranscriteriaRow((pdscrectransDataSet.ttblcrectranscriteriaRow)ttblcrectranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("CRECTrans - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECTrans(ref pdsContext, ref pdscrectrans, out cErrorMessage, out lMoreRecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("CRECTrans - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrectrans); 
    
         foreach (DataRow row in pdscrectrans.ttblcrectrans)
         {
            result.crectrans.Add(Crectrans.BuildCrectransFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public IEnumerable<Crecreconcile> CRECClearReset(AscrentryCRECClearResetRequestAPI AscrentryCRECClearResetRequestAPI)
      {   
         var results = new List<Crecreconcile>();
         
         var pdscrec = new pdscrecDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AscrentryCRECClearResetRequestAPI.crecreconcile)
         {
            DataRow ttblcrecreconcileRow = pdscrec.ttblcrecreconcile.NewttblcrecreconcileRow();
            Crecreconcile.UpdateRowFromCrecreconcile(ref ttblcrecreconcileRow, obj);
            pdscrec.ttblcrecreconcile.AddttblcrecreconcileRow((pdscrecDataSet.ttblcrecreconcileRow)ttblcrecreconcileRow);
         }
          
         var  cClearResetType = AscrentryCRECClearResetRequestAPI.cClearResetType;
            
         var  dtcleared = AscrentryCRECClearResetRequestAPI.dtcleared;
            
         
         NLogLoggerP.Trace("CRECClearReset - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECClearReset(ref pdsContext,  cClearResetType,  dtcleared ?? DateTime.MinValue, ref pdscrec, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECClearReset - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrec); 
    
            foreach (DataRow row in pdscrec.ttblcrecreconcile)
            {
                results.Add(Crecreconcile.BuildCrecreconcileFromRow(row));
            }
            return results;
        
      }

      public Crecqc CRECQuickClear(Crecqc crecqc)
      {   
         var result = new Crecqc();
         
         var pdscrecqc = new pdscrecqcDataSet();
            
         DataRow ttblcrecqcCriteria = pdscrecqc.ttblcrecqc.NewttblcrecqcRow();
         Crecqc.UpdateRowFromCrecqc(ref ttblcrecqcCriteria, crecqc);
         pdscrecqc.ttblcrecqc.AddttblcrecqcRow((pdscrecqcDataSet.ttblcrecqcRow)ttblcrecqcCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECQuickClear - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQuickClear(ref pdsContext, ref pdscrecqc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQuickClear - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqc); 
    
         if (pdscrecqc.ttblcrecqc.Count > 0) 
         { 
             result = Crecqc.BuildCrecqcFromRow(pdscrecqc.ttblcrecqc[0]);
         } 
              
          
         return result;
          
      }

      public Crecqc CRECCretInfo(Crecqc crecqc)
      {   
         var result = new Crecqc();
         
         var pdscrecqc = new pdscrecqcDataSet();
            
         DataRow ttblcrecqcCriteria = pdscrecqc.ttblcrecqc.NewttblcrecqcRow();
         Crecqc.UpdateRowFromCrecqc(ref ttblcrecqcCriteria, crecqc);
         pdscrecqc.ttblcrecqc.AddttblcrecqcRow((pdscrecqcDataSet.ttblcrecqcRow)ttblcrecqcCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECCretInfo - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECCretInfo(ref pdsContext, ref pdscrecqc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECCretInfo - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqc); 
    
         if (pdscrecqc.ttblcrecqc.Count > 0) 
         { 
             result = Crecqc.BuildCrecqcFromRow(pdscrecqc.ttblcrecqc[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Crectransap> CRECTransAP(int iJrnlno, int iSetno)
      {   
         var results = new List<Crectransap>();
         
         var pdscrectransap = new pdscrectransapDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECTransAP - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECTransAP(ref pdsContext,  iJrnlno,  iSetno, out pdscrectransap, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECTransAP - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrectransap); 
    
            foreach (DataRow row in pdscrectransap.ttblcrectransap)
            {
                results.Add(Crectransap.BuildCrectransapFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Crectransar> CRECTransAR(int iJrnlno, int iSetno)
      {   
         var results = new List<Crectransar>();
         
         var pdscrectransar = new pdscrectransarDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECTransAR - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECTransAR(ref pdsContext,  iJrnlno,  iSetno, out pdscrectransar, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECTransAR - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrectransar); 
    
            foreach (DataRow row in pdscrectransar.ttblcrectransar)
            {
                results.Add(Crectransar.BuildCrectransarFromRow(row));
            }
            return results;
        
      }

      public Crecqe CRECQEinit(AscrentryCRECQEinitRequestAPI AscrentryCRECQEinitRequestAPI)
      {   
         var result = new Crecqe();
         
         var pdscrecqe = new pdscrecqeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcrecqeRow = pdscrecqe.ttblcrecqe.NewttblcrecqeRow();
         Crecqe.UpdateRowFromCrecqe(ref ttblcrecqeRow, AscrentryCRECQEinitRequestAPI.crecqe);
         pdscrecqe.ttblcrecqe.AddttblcrecqeRow((pdscrecqeDataSet.ttblcrecqeRow)ttblcrecqeRow);
          
         var  lEnable = AscrentryCRECQEinitRequestAPI.lEnable;
            
         
         NLogLoggerP.Trace("CRECQEinit - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQEinit(ref pdsContext,  lEnable, ref pdscrecqe, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQEinit - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqe); 
    
         if (pdscrecqe.ttblcrecqe.Count > 0) 
         { 
             result = Crecqe.BuildCrecqeFromRow(pdscrecqe.ttblcrecqe[0]);
         } 
              
          
         return result;
          
      }

      public AscrentryCRECQEchecknoResponseAPI CRECQEcheckno(Crecqe crecqe)
      {   
         var result = new AscrentryCRECQEchecknoResponseAPI();
         
         var pdscrecqe = new pdscrecqeDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblcrecqeCriteria = pdscrecqe.ttblcrecqe.NewttblcrecqeRow();
         Crecqe.UpdateRowFromCrecqe(ref ttblcrecqeCriteria, crecqe);
         pdscrecqe.ttblcrecqe.AddttblcrecqeRow((pdscrecqeDataSet.ttblcrecqeRow)ttblcrecqeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECQEcheckno - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQEcheckno(ref pdsContext, ref pdscrecqe, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQEcheckno - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqe); 
    
         if (pdscrecqe.ttblcrecqe.Count > 0)
         {
            result.crecqe = Crecqe.BuildCrecqeFromRow(pdscrecqe.ttblcrecqe[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AscrentryCRECQEupdateResponseAPI CRECQEupdate(Crecqe crecqe)
      {   
         var result = new AscrentryCRECQEupdateResponseAPI();
         
         var pdscrecqe = new pdscrecqeDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblcrecqeCriteria = pdscrecqe.ttblcrecqe.NewttblcrecqeRow();
         Crecqe.UpdateRowFromCrecqe(ref ttblcrecqeCriteria, crecqe);
         pdscrecqe.ttblcrecqe.AddttblcrecqeRow((pdscrecqeDataSet.ttblcrecqeRow)ttblcrecqeCriteria);
            
         bool lSuccess = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECQEupdate - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQEupdate(ref pdsContext, ref pdscrecqe, out lSuccess, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQEupdate - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqe); 
    
         if (pdscrecqe.ttblcrecqe.Count > 0)
         {
            result.crecqe = Crecqe.BuildCrecqeFromRow(pdscrecqe.ttblcrecqe[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lSuccess = lSuccess;
          
         return result;
          
      }

      public AscrentryCRECQEVOIDinitResponseAPI CRECQEVOIDinit(Crecqevoidcriteria crecqevoidcriteria)
      {   
         var result = new AscrentryCRECQEVOIDinitResponseAPI();
         
         var pdscrecqevoid = new pdscrecqevoidDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblcrecqevoidcriteriaCriteria = pdscrecqevoid.ttblcrecqevoidcriteria.NewttblcrecqevoidcriteriaRow();
         Crecqevoidcriteria.UpdateRowFromCrecqevoidcriteria(ref ttblcrecqevoidcriteriaCriteria, crecqevoidcriteria);
         pdscrecqevoid.ttblcrecqevoidcriteria.AddttblcrecqevoidcriteriaRow((pdscrecqevoidDataSet.ttblcrecqevoidcriteriaRow)ttblcrecqevoidcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRECQEVOIDinit - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQEVOIDinit(ref pdsContext, ref pdscrecqevoid, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQEVOIDinit - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqevoid); 
    
         if (pdscrecqevoid.ttblcrecqevoidcriteria.Count > 0)
         {
            result.crecqevoidcriteria = Crecqevoidcriteria.BuildCrecqevoidcriteriaFromRow(pdscrecqevoid.ttblcrecqevoidcriteria[0]);
         }
                    
         foreach (DataRow row in pdscrecqevoid.ttblcrecqevoidresults)
         {
            result.crecqevoidresults.Add(Crecqevoidresults.BuildCrecqevoidresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AscrentryCRECQEVOIDupdateResponseAPI CRECQEVOIDupdate(AscrentryCRECQEVOIDupdateRequestAPI AscrentryCRECQEVOIDupdateRequestAPI)
      {   
         var result = new AscrentryCRECQEVOIDupdateResponseAPI();
         
         var pdscrecqevoid = new pdscrecqevoidDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcrecqevoidcriteriaRow = pdscrecqevoid.ttblcrecqevoidcriteria.NewttblcrecqevoidcriteriaRow();
         Crecqevoidcriteria.UpdateRowFromCrecqevoidcriteria(ref ttblcrecqevoidcriteriaRow, AscrentryCRECQEVOIDupdateRequestAPI.crecqevoidcriteria);
         pdscrecqevoid.ttblcrecqevoidcriteria.AddttblcrecqevoidcriteriaRow((pdscrecqevoidDataSet.ttblcrecqevoidcriteriaRow)ttblcrecqevoidcriteriaRow);
          
         foreach (var obj in AscrentryCRECQEVOIDupdateRequestAPI.crecqevoidresults)
         {
            DataRow ttblcrecqevoidresultsRow = pdscrecqevoid.ttblcrecqevoidresults.NewttblcrecqevoidresultsRow();
            Crecqevoidresults.UpdateRowFromCrecqevoidresults(ref ttblcrecqevoidresultsRow, obj);
            pdscrecqevoid.ttblcrecqevoidresults.AddttblcrecqevoidresultsRow((pdscrecqevoidDataSet.ttblcrecqevoidresultsRow)ttblcrecqevoidresultsRow);
         }
          
         
         NLogLoggerP.Trace("CRECQEVOIDupdate - Ascrentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrentryproxy = this.proxyAppObject.CreatePO_ascrentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrentryproxy.CRECQEVOIDupdate(ref pdsContext, ref pdscrecqevoid, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRECQEVOIDupdate - Ascrentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrecqevoid); 
    
         foreach (DataRow row in pdscrecqevoid.ttblcrecqevoidresults)
         {
            result.crecqevoidresults.Add(Crecqevoidresults.BuildCrecqevoidresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  