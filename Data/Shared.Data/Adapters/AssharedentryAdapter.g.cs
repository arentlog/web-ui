//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsaosystemusertable;
   using Models.Pdsaosystemuserflds;
   using Models.Pdsmessaging;
   using Models.Pdsaosystemfunctyp;
   using Models.Pdsaosystemlanguage;
   using Models.Pdsaosystemmenuitem;
   using Models.Pdsaosystemmenuitemrectyp;
   using Models.Pdsaosystemmenuitemnew;
   using Models.Pdsaosystemrptitem;
   using Models.Pdsaosystemrptitemnew;
   using Models.Pdsaologistics;
   using Models.Pdsaologisticswlloc;
   using Models.Pdsaointegrations;
   using Models.Pdswebsettingdetails;
   using Models.Pdswebsettingload;
   using Models.Pdsreporttransfer;
   using Models.Pdswebmodrecord;
   using Models.Pdswebmodcriteria;
   using Models.Pdswebmodlistcriteria;
   using Models.Pdswebmodlistresults;
   using Models.Pdswebnoterecord;
   using Models.Pdswebnotecriteria;
   using Models.Pdswebnotelistcriteria;
   using Models.Pdswebnotelistresults;
   using Models.Pdsnotemovepageno;
   using Models.Pdsvendorcurrency;
   using Models.Pdsgeocodelookup;
   using Models.Pdsmenusecurity;
   using Models.Pdsprinterinitialize;
   using Models.Pdsprintervalidate;
   using Models.Pdsreptgrouplookup;
   using Models.Pdsreportsecurity;
   using Models.Pdsreptwizarddefn;
   using Models.Pdsreptwizardlistproc;
   using Models.Pdsreptwizardenablesapbs;
   using Models.Pdsreptwizardfinish;
   using Models.Pdsprintersettings;
   using Models.Pdsreptwizardvalsapbo;
   using Models.Pdsreptwizardvalsapbp;
   using Models.Pdsreptwizardvalsapbs;
   using Models.Pdsreptwizardvalsapbva;
   using Models.Pdsreptwizardvalsapbw;
   using Models.Pdsreptwizardlstprcapinv;
   using Models.Pdssharedcommentcriteria;
   using Models.Pdssharedcommentresults;
   using Models.Pdssharedpvregistry;
   using Models.Pdsshoplistchange;
   using Models.Pdsshoplistdelete;
   using Models.Pdsshoplistpopulate;
   using Models.Pdsshoplistprepare;
   using Models.Pdsshoplistupdate;
   using Models.Pdsauthpointtrans;
   using Models.Pdsauthpointsecurity;
   using Models.Pdsauthpointsecurityupdate;
   using Models.Pdspvrecoveryrecord;
   using Models.Pdsopervalidate;
   using Models.Pdsaocustomer;
   using Models.Pdsaovendor;
   using Models.Pdsaoproduct;
   using Models.Pdsaokitproduction;
   using Models.Pdsaosalesorders;
   using Models.Pdsaoarscl;
   using Models.Pdsaopurchaseorders;
   using Models.Pdsaojobmanagement;
   using Models.Pdsaowarehousetransfers;
   using Models.Pdsaoservicewarranty;
   using Models.Pdsaovalueadd;
   using Models.Pdsaofinancials;
   using Models.Pdsaosaleshistory;
   using Models.Pdsaosystem;
   using Models.Complex;

   public partial class AssharedentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AssharedentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssharedentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Aosystemusertable> AOSystemUserTableLoad()
      {   
         var results = new List<Aosystemusertable>();
         
         var pdsaosystemusertable = new pdsaosystemusertableDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemUserTableLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemUserTableLoad(ref pdsContext, out pdsaosystemusertable, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemUserTableLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemusertable); 
    
            foreach (DataRow row in pdsaosystemusertable.ttblaosystemusertable)
            {
                results.Add(Aosystemusertable.BuildAosystemusertableFromRow(row));
            }
            return results;
        
      }

      public Aosystemuserflds AOSystemUserFldsLoad(Aosystemuserflds aosystemuserflds)
      {   
         var result = new Aosystemuserflds();
         
         var pdsaosystemuserflds = new pdsaosystemuserfldsDataSet();
            
         DataRow ttblaosystemuserfldsCriteria = pdsaosystemuserflds.ttblaosystemuserflds.NewttblaosystemuserfldsRow();
         Aosystemuserflds.UpdateRowFromAosystemuserflds(ref ttblaosystemuserfldsCriteria, aosystemuserflds);
         pdsaosystemuserflds.ttblaosystemuserflds.AddttblaosystemuserfldsRow((pdsaosystemuserfldsDataSet.ttblaosystemuserfldsRow)ttblaosystemuserfldsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemUserFldsLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemUserFldsLoad(ref pdsContext, ref pdsaosystemuserflds, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemUserFldsLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemuserflds); 
    
         if (pdsaosystemuserflds.ttblaosystemuserflds.Count > 0) 
         { 
             result = Aosystemuserflds.BuildAosystemuserfldsFromRow(pdsaosystemuserflds.ttblaosystemuserflds[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSystemUserFldsSave(Aosystemuserflds aosystemuserflds)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemuserflds = new pdsaosystemuserfldsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemuserfldsCriteria = pdsaosystemuserflds.ttblaosystemuserflds.NewttblaosystemuserfldsRow();
         Aosystemuserflds.UpdateRowFromAosystemuserflds(ref ttblaosystemuserfldsCriteria, aosystemuserflds);
         pdsaosystemuserflds.ttblaosystemuserflds.AddttblaosystemuserfldsRow((pdsaosystemuserfldsDataSet.ttblaosystemuserfldsRow)ttblaosystemuserfldsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemUserFldsSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemUserFldsSave(ref pdsContext,  pdsaosystemuserflds, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemUserFldsSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemuserflds); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Aosystemfunctyp> AOSystemFuncTypLoad()
      {   
         var results = new List<Aosystemfunctyp>();
         
         var pdsaosystemfunctyp = new pdsaosystemfunctypDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemFuncTypLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemFuncTypLoad(ref pdsContext, out pdsaosystemfunctyp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemFuncTypLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemfunctyp); 
    
            foreach (DataRow row in pdsaosystemfunctyp.ttblaosystemfunctyp)
            {
                results.Add(Aosystemfunctyp.BuildAosystemfunctypFromRow(row));
            }
            return results;
        
      }

      public AssharedentryAOSystemFuncTypSaveResponseAPI AOSystemFuncTypSave(Aosystemfunctyp aosystemfunctyp)
      {   
         var result = new AssharedentryAOSystemFuncTypSaveResponseAPI();
         
         var pdsaosystemfunctyp = new pdsaosystemfunctypDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemfunctypCriteria = pdsaosystemfunctyp.ttblaosystemfunctyp.NewttblaosystemfunctypRow();
         Aosystemfunctyp.UpdateRowFromAosystemfunctyp(ref ttblaosystemfunctypCriteria, aosystemfunctyp);
         pdsaosystemfunctyp.ttblaosystemfunctyp.AddttblaosystemfunctypRow((pdsaosystemfunctypDataSet.ttblaosystemfunctypRow)ttblaosystemfunctypCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemFuncTypSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemFuncTypSave(ref pdsContext, ref pdsaosystemfunctyp, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemFuncTypSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemfunctyp); 
    
         if (pdsaosystemfunctyp.ttblaosystemfunctyp.Count > 0)
         {
            result.aosystemfunctyp = Aosystemfunctyp.BuildAosystemfunctypFromRow(pdsaosystemfunctyp.ttblaosystemfunctyp[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSystemFuncTypDelete(Aosystemfunctyp aosystemfunctyp)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemfunctyp = new pdsaosystemfunctypDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemfunctypCriteria = pdsaosystemfunctyp.ttblaosystemfunctyp.NewttblaosystemfunctypRow();
         Aosystemfunctyp.UpdateRowFromAosystemfunctyp(ref ttblaosystemfunctypCriteria, aosystemfunctyp);
         pdsaosystemfunctyp.ttblaosystemfunctyp.AddttblaosystemfunctypRow((pdsaosystemfunctypDataSet.ttblaosystemfunctypRow)ttblaosystemfunctypCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemFuncTypDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemFuncTypDelete(ref pdsContext,  pdsaosystemfunctyp, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemFuncTypDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemfunctyp); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AssharedentryAOSystemLanguageLoadResponseAPI AOSystemLanguageLoad()
      {   
         var result = new AssharedentryAOSystemLanguageLoadResponseAPI();
         
         var pdsaosystemlanguage = new pdsaosystemlanguageDataSet();
            
         bool lMultLangSASCFl = false;
         string cCurrentLanguage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemLanguageLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemLanguageLoad(ref pdsContext, out pdsaosystemlanguage, out lMultLangSASCFl, out cCurrentLanguage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemLanguageLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemlanguage); 
    
         foreach (DataRow row in pdsaosystemlanguage.ttblaosystemlanguage)
         {
            result.aosystemlanguage.Add(Aosystemlanguage.BuildAosystemlanguageFromRow(row));
         }     
         result.lMultLangSASCFl = lMultLangSASCFl;
         result.cCurrentLanguage = cCurrentLanguage;
          
         return result;
          
      }

      public AssharedentryAOSystemMenuItemLoadResponseAPI AOSystemMenuItemLoad(Aosystemmenuitem aosystemmenuitem)
      {   
         var result = new AssharedentryAOSystemMenuItemLoadResponseAPI();
         
         var pdsaosystemmenuitem = new pdsaosystemmenuitemDataSet();
            
         DataRow ttblaosystemmenuitemCriteria = pdsaosystemmenuitem.ttblaosystemmenuitem.NewttblaosystemmenuitemRow();
         Aosystemmenuitem.UpdateRowFromAosystemmenuitem(ref ttblaosystemmenuitemCriteria, aosystemmenuitem);
         pdsaosystemmenuitem.ttblaosystemmenuitem.AddttblaosystemmenuitemRow((pdsaosystemmenuitemDataSet.ttblaosystemmenuitemRow)ttblaosystemmenuitemCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemMenuItemLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemMenuItemLoad(ref pdsContext, ref pdsaosystemmenuitem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemMenuItemLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemmenuitem); 
    
         if (pdsaosystemmenuitem.ttblaosystemmenuitem.Count > 0)
         {
            result.aosystemmenuitem = Aosystemmenuitem.BuildAosystemmenuitemFromRow(pdsaosystemmenuitem.ttblaosystemmenuitem[0]);
         }
                    
         foreach (DataRow row in pdsaosystemmenuitem.ttblaosystemmenuitemext)
         {
            result.aosystemmenuitemext.Add(Aosystemmenuitemext.BuildAosystemmenuitemextFromRow(row));
         }     
          
         return result;
          
      }

      public Aosystemmenuitemrectyp AOSystemMenuItemRecTypLoad(Aosystemmenuitemrectyp aosystemmenuitemrectyp)
      {   
         var result = new Aosystemmenuitemrectyp();
         
         var pdsaosystemmenuitemrectyp = new pdsaosystemmenuitemrectypDataSet();
            
         DataRow ttblaosystemmenuitemrectypCriteria = pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp.NewttblaosystemmenuitemrectypRow();
         Aosystemmenuitemrectyp.UpdateRowFromAosystemmenuitemrectyp(ref ttblaosystemmenuitemrectypCriteria, aosystemmenuitemrectyp);
         pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp.AddttblaosystemmenuitemrectypRow((pdsaosystemmenuitemrectypDataSet.ttblaosystemmenuitemrectypRow)ttblaosystemmenuitemrectypCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemMenuItemRecTypLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemMenuItemRecTypLoad(ref pdsContext, ref pdsaosystemmenuitemrectyp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemMenuItemRecTypLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemmenuitemrectyp); 
    
         if (pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp.Count > 0) 
         { 
             result = Aosystemmenuitemrectyp.BuildAosystemmenuitemrectypFromRow(pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSystemMenuItemNewSave(Aosystemmenuitemnew aosystemmenuitemnew)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemmenuitemnew = new pdsaosystemmenuitemnewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemmenuitemnewCriteria = pdsaosystemmenuitemnew.ttblaosystemmenuitemnew.NewttblaosystemmenuitemnewRow();
         Aosystemmenuitemnew.UpdateRowFromAosystemmenuitemnew(ref ttblaosystemmenuitemnewCriteria, aosystemmenuitemnew);
         pdsaosystemmenuitemnew.ttblaosystemmenuitemnew.AddttblaosystemmenuitemnewRow((pdsaosystemmenuitemnewDataSet.ttblaosystemmenuitemnewRow)ttblaosystemmenuitemnewCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemMenuItemNewSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemMenuItemNewSave(ref pdsContext,  pdsaosystemmenuitemnew, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemMenuItemNewSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemmenuitemnew); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOSystemMenuItemSave(AssharedentryAOSystemMenuItemSaveRequestAPI AssharedentryAOSystemMenuItemSaveRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemmenuitem = new pdsaosystemmenuitemDataSet();
            
         var pdsaosystemmenuitemrectyp = new pdsaosystemmenuitemrectypDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblaosystemmenuitemRow = pdsaosystemmenuitem.ttblaosystemmenuitem.NewttblaosystemmenuitemRow();
         Aosystemmenuitem.UpdateRowFromAosystemmenuitem(ref ttblaosystemmenuitemRow, AssharedentryAOSystemMenuItemSaveRequestAPI.aosystemmenuitem);
         pdsaosystemmenuitem.ttblaosystemmenuitem.AddttblaosystemmenuitemRow((pdsaosystemmenuitemDataSet.ttblaosystemmenuitemRow)ttblaosystemmenuitemRow);
          
         foreach (var obj in AssharedentryAOSystemMenuItemSaveRequestAPI.aosystemmenuitemext)
         {
            DataRow ttblaosystemmenuitemextRow = pdsaosystemmenuitem.ttblaosystemmenuitemext.NewttblaosystemmenuitemextRow();
            Aosystemmenuitemext.UpdateRowFromAosystemmenuitemext(ref ttblaosystemmenuitemextRow, obj);
            pdsaosystemmenuitem.ttblaosystemmenuitemext.AddttblaosystemmenuitemextRow((pdsaosystemmenuitemDataSet.ttblaosystemmenuitemextRow)ttblaosystemmenuitemextRow);
         }
          
         DataRow ttblaosystemmenuitemrectypRow = pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp.NewttblaosystemmenuitemrectypRow();
         Aosystemmenuitemrectyp.UpdateRowFromAosystemmenuitemrectyp(ref ttblaosystemmenuitemrectypRow, AssharedentryAOSystemMenuItemSaveRequestAPI.aosystemmenuitemrectyp);
         pdsaosystemmenuitemrectyp.ttblaosystemmenuitemrectyp.AddttblaosystemmenuitemrectypRow((pdsaosystemmenuitemrectypDataSet.ttblaosystemmenuitemrectypRow)ttblaosystemmenuitemrectypRow);
          
         
         NLogLoggerP.Trace("AOSystemMenuItemSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemMenuItemSave(ref pdsContext,  pdsaosystemmenuitem,  pdsaosystemmenuitemrectyp, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemMenuItemSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemmenuitem); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOSystemMenuItemDelete(AssharedentryAOSystemMenuItemDeleteRequestAPI AssharedentryAOSystemMenuItemDeleteRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemmenuitem = new pdsaosystemmenuitemDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblaosystemmenuitemRow = pdsaosystemmenuitem.ttblaosystemmenuitem.NewttblaosystemmenuitemRow();
         Aosystemmenuitem.UpdateRowFromAosystemmenuitem(ref ttblaosystemmenuitemRow, AssharedentryAOSystemMenuItemDeleteRequestAPI.aosystemmenuitem);
         pdsaosystemmenuitem.ttblaosystemmenuitem.AddttblaosystemmenuitemRow((pdsaosystemmenuitemDataSet.ttblaosystemmenuitemRow)ttblaosystemmenuitemRow);
          
         foreach (var obj in AssharedentryAOSystemMenuItemDeleteRequestAPI.aosystemmenuitemext)
         {
            DataRow ttblaosystemmenuitemextRow = pdsaosystemmenuitem.ttblaosystemmenuitemext.NewttblaosystemmenuitemextRow();
            Aosystemmenuitemext.UpdateRowFromAosystemmenuitemext(ref ttblaosystemmenuitemextRow, obj);
            pdsaosystemmenuitem.ttblaosystemmenuitemext.AddttblaosystemmenuitemextRow((pdsaosystemmenuitemDataSet.ttblaosystemmenuitemextRow)ttblaosystemmenuitemextRow);
         }
          
         
         NLogLoggerP.Trace("AOSystemMenuItemDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemMenuItemDelete(ref pdsContext,  pdsaosystemmenuitem, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemMenuItemDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemmenuitem); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AssharedentryAOSystemRptItemLoadResponseAPI AOSystemRptItemLoad(IEnumerable<Aosystemrptitem> aosystemrptitem)
      {   
         var result = new AssharedentryAOSystemRptItemLoadResponseAPI();
         
         var pdsaosystemrptitem = new pdsaosystemrptitemDataSet();
            
         foreach (var obj in aosystemrptitem)
         {
             DataRow row = pdsaosystemrptitem.ttblaosystemrptitem.NewttblaosystemrptitemRow();
             Aosystemrptitem.UpdateRowFromAosystemrptitem(ref row, obj);
             pdsaosystemrptitem.ttblaosystemrptitem.AddttblaosystemrptitemRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemRptItemLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemRptItemLoad(ref pdsContext, ref pdsaosystemrptitem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemRptItemLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemrptitem); 
    
         foreach (DataRow row in pdsaosystemrptitem.ttblaosystemrptitem)
         {
            result.aosystemrptitem.Add(Aosystemrptitem.BuildAosystemrptitemFromRow(row));
         }     
         foreach (DataRow row in pdsaosystemrptitem.ttblaosystemrptitemo)
         {
            result.aosystemrptitemo.Add(Aosystemrptitemo.BuildAosystemrptitemoFromRow(row));
         }     
         foreach (DataRow row in pdsaosystemrptitem.ttblaosystemrptitemr)
         {
            result.aosystemrptitemr.Add(Aosystemrptitemr.BuildAosystemrptitemrFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSystemRptItemNewSave(Aosystemrptitemnew aosystemrptitemnew)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemrptitemnew = new pdsaosystemrptitemnewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemrptitemnewCriteria = pdsaosystemrptitemnew.ttblaosystemrptitemnew.NewttblaosystemrptitemnewRow();
         Aosystemrptitemnew.UpdateRowFromAosystemrptitemnew(ref ttblaosystemrptitemnewCriteria, aosystemrptitemnew);
         pdsaosystemrptitemnew.ttblaosystemrptitemnew.AddttblaosystemrptitemnewRow((pdsaosystemrptitemnewDataSet.ttblaosystemrptitemnewRow)ttblaosystemrptitemnewCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemRptItemNewSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemRptItemNewSave(ref pdsContext,  pdsaosystemrptitemnew, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemRptItemNewSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemrptitemnew); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOSystemRptItemSave(AssharedentryAOSystemRptItemSaveRequestAPI AssharedentryAOSystemRptItemSaveRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemrptitem = new pdsaosystemrptitemDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblaosystemrptitemRow = pdsaosystemrptitem.ttblaosystemrptitem.NewttblaosystemrptitemRow();
         Aosystemrptitem.UpdateRowFromAosystemrptitem(ref ttblaosystemrptitemRow, AssharedentryAOSystemRptItemSaveRequestAPI.aosystemrptitem);
         pdsaosystemrptitem.ttblaosystemrptitem.AddttblaosystemrptitemRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemRow)ttblaosystemrptitemRow);
          
         foreach (var obj in AssharedentryAOSystemRptItemSaveRequestAPI.aosystemrptitemo)
         {
            DataRow ttblaosystemrptitemoRow = pdsaosystemrptitem.ttblaosystemrptitemo.NewttblaosystemrptitemoRow();
            Aosystemrptitemo.UpdateRowFromAosystemrptitemo(ref ttblaosystemrptitemoRow, obj);
            pdsaosystemrptitem.ttblaosystemrptitemo.AddttblaosystemrptitemoRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemoRow)ttblaosystemrptitemoRow);
         }
          
         foreach (var obj in AssharedentryAOSystemRptItemSaveRequestAPI.aosystemrptitemr)
         {
            DataRow ttblaosystemrptitemrRow = pdsaosystemrptitem.ttblaosystemrptitemr.NewttblaosystemrptitemrRow();
            Aosystemrptitemr.UpdateRowFromAosystemrptitemr(ref ttblaosystemrptitemrRow, obj);
            pdsaosystemrptitem.ttblaosystemrptitemr.AddttblaosystemrptitemrRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemrRow)ttblaosystemrptitemrRow);
         }
          
         
         NLogLoggerP.Trace("AOSystemRptItemSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemRptItemSave(ref pdsContext,  pdsaosystemrptitem, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemRptItemSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemrptitem); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOSystemRptItemDelete(AssharedentryAOSystemRptItemDeleteRequestAPI AssharedentryAOSystemRptItemDeleteRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystemrptitem = new pdsaosystemrptitemDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblaosystemrptitemRow = pdsaosystemrptitem.ttblaosystemrptitem.NewttblaosystemrptitemRow();
         Aosystemrptitem.UpdateRowFromAosystemrptitem(ref ttblaosystemrptitemRow, AssharedentryAOSystemRptItemDeleteRequestAPI.aosystemrptitem);
         pdsaosystemrptitem.ttblaosystemrptitem.AddttblaosystemrptitemRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemRow)ttblaosystemrptitemRow);
          
         foreach (var obj in AssharedentryAOSystemRptItemDeleteRequestAPI.aosystemrptitemo)
         {
            DataRow ttblaosystemrptitemoRow = pdsaosystemrptitem.ttblaosystemrptitemo.NewttblaosystemrptitemoRow();
            Aosystemrptitemo.UpdateRowFromAosystemrptitemo(ref ttblaosystemrptitemoRow, obj);
            pdsaosystemrptitem.ttblaosystemrptitemo.AddttblaosystemrptitemoRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemoRow)ttblaosystemrptitemoRow);
         }
          
         foreach (var obj in AssharedentryAOSystemRptItemDeleteRequestAPI.aosystemrptitemr)
         {
            DataRow ttblaosystemrptitemrRow = pdsaosystemrptitem.ttblaosystemrptitemr.NewttblaosystemrptitemrRow();
            Aosystemrptitemr.UpdateRowFromAosystemrptitemr(ref ttblaosystemrptitemrRow, obj);
            pdsaosystemrptitem.ttblaosystemrptitemr.AddttblaosystemrptitemrRow((pdsaosystemrptitemDataSet.ttblaosystemrptitemrRow)ttblaosystemrptitemrRow);
         }
          
         
         NLogLoggerP.Trace("AOSystemRptItemDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemRptItemDelete(ref pdsContext,  pdsaosystemrptitem, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemRptItemDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystemrptitem); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOSystemRSActive(bool lRSActivefl)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemRSActive - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemRSActive(ref pdsContext,  lRSActivefl, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemRSActive - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aologistics AOLogisticsLoad()
      {   
         var result = new Aologistics();
         
         var pdsaologistics = new pdsaologisticsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOLogisticsLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOLogisticsLoad(ref pdsContext, out pdsaologistics, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOLogisticsLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaologistics); 
    
         if (pdsaologistics.ttblaologistics.Count > 0) 
         { 
             result = Aologistics.BuildAologisticsFromRow(pdsaologistics.ttblaologistics[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOLogisticsSave(Aologistics aologistics)
      {   
         var results = new List<Messaging>();
         
         var pdsaologistics = new pdsaologisticsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaologisticsCriteria = pdsaologistics.ttblaologistics.NewttblaologisticsRow();
         Aologistics.UpdateRowFromAologistics(ref ttblaologisticsCriteria, aologistics);
         pdsaologistics.ttblaologistics.AddttblaologisticsRow((pdsaologisticsDataSet.ttblaologisticsRow)ttblaologisticsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOLogisticsSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOLogisticsSave(ref pdsContext,  pdsaologistics, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOLogisticsSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaologistics); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aologisticswlloc AOLogisticsWLLocLoad(Aologisticswlloc aologisticswlloc)
      {   
         var result = new Aologisticswlloc();
         
         var pdsaologisticswlloc = new pdsaologisticswllocDataSet();
            
         DataRow ttblaologisticswllocCriteria = pdsaologisticswlloc.ttblaologisticswlloc.NewttblaologisticswllocRow();
         Aologisticswlloc.UpdateRowFromAologisticswlloc(ref ttblaologisticswllocCriteria, aologisticswlloc);
         pdsaologisticswlloc.ttblaologisticswlloc.AddttblaologisticswllocRow((pdsaologisticswllocDataSet.ttblaologisticswllocRow)ttblaologisticswllocCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOLogisticsWLLocLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOLogisticsWLLocLoad(ref pdsContext, ref pdsaologisticswlloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOLogisticsWLLocLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaologisticswlloc); 
    
         if (pdsaologisticswlloc.ttblaologisticswlloc.Count > 0) 
         { 
             result = Aologisticswlloc.BuildAologisticswllocFromRow(pdsaologisticswlloc.ttblaologisticswlloc[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOLogisticsWLLocSave(Aologisticswlloc aologisticswlloc)
      {   
         var results = new List<Messaging>();
         
         var pdsaologisticswlloc = new pdsaologisticswllocDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaologisticswllocCriteria = pdsaologisticswlloc.ttblaologisticswlloc.NewttblaologisticswllocRow();
         Aologisticswlloc.UpdateRowFromAologisticswlloc(ref ttblaologisticswllocCriteria, aologisticswlloc);
         pdsaologisticswlloc.ttblaologisticswlloc.AddttblaologisticswllocRow((pdsaologisticswllocDataSet.ttblaologisticswllocRow)ttblaologisticswllocCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOLogisticsWLLocSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOLogisticsWLLocSave(ref pdsContext,  pdsaologisticswlloc, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOLogisticsWLLocSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaologisticswlloc); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AOLogisticsWLLocDelete(Aologisticswlloc aologisticswlloc)
      {   
         var results = new List<Messaging>();
         
         var pdsaologisticswlloc = new pdsaologisticswllocDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaologisticswllocCriteria = pdsaologisticswlloc.ttblaologisticswlloc.NewttblaologisticswllocRow();
         Aologisticswlloc.UpdateRowFromAologisticswlloc(ref ttblaologisticswllocCriteria, aologisticswlloc);
         pdsaologisticswlloc.ttblaologisticswlloc.AddttblaologisticswllocRow((pdsaologisticswllocDataSet.ttblaologisticswllocRow)ttblaologisticswllocCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOLogisticsWLLocDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOLogisticsWLLocDelete(ref pdsContext,  pdsaologisticswlloc, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOLogisticsWLLocDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaologisticswlloc); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aointegrations AOIntegrationsLoad()
      {   
         var result = new Aointegrations();
         
         var pdsaointegrations = new pdsaointegrationsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOIntegrationsLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOIntegrationsLoad(ref pdsContext, out pdsaointegrations, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOIntegrationsLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaointegrations); 
    
         if (pdsaointegrations.ttblaointegrations.Count > 0) 
         { 
             result = Aointegrations.BuildAointegrationsFromRow(pdsaointegrations.ttblaointegrations[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOIntegrationsSave(Aointegrations aointegrations)
      {   
         var results = new List<Messaging>();
         
         var pdsaointegrations = new pdsaointegrationsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaointegrationsCriteria = pdsaointegrations.ttblaointegrations.NewttblaointegrationsRow();
         Aointegrations.UpdateRowFromAointegrations(ref ttblaointegrationsCriteria, aointegrations);
         pdsaointegrations.ttblaointegrations.AddttblaointegrationsRow((pdsaointegrationsDataSet.ttblaointegrationsRow)ttblaointegrationsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOIntegrationsSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOIntegrationsSave(ref pdsContext,  pdsaointegrations, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOIntegrationsSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaointegrations); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Websettingdetails> RetrieveWebSetting(AssharedentryRetrieveWebSettingRequestAPI AssharedentryRetrieveWebSettingRequestAPI)
      {   
         var results = new List<Websettingdetails>();
         
         var pdswebsettingdetails = new pdswebsettingdetailsDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cFunctionName = AssharedentryRetrieveWebSettingRequestAPI.cFunctionName;
            
         var  cScreenName = AssharedentryRetrieveWebSettingRequestAPI.cScreenName;
            
         var  cSettingName = AssharedentryRetrieveWebSettingRequestAPI.cSettingName;
            
         
         NLogLoggerP.Trace("RetrieveWebSetting - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.RetrieveWebSetting(ref pdsContext,  cFunctionName,  cScreenName,  cSettingName, out pdswebsettingdetails, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RetrieveWebSetting - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebsettingdetails); 
    
            foreach (DataRow row in pdswebsettingdetails.ttblwebsettingdetails)
            {
                results.Add(Websettingdetails.BuildWebsettingdetailsFromRow(row));
            }
            return results;
        
      }

      public void SaveWebSetting(IEnumerable<Websettingdetails> websettingdetails)
      {   
         
         var pdswebsettingdetails = new pdswebsettingdetailsDataSet();
            
         foreach (var obj in websettingdetails)
         {
             DataRow row = pdswebsettingdetails.ttblwebsettingdetails.NewttblwebsettingdetailsRow();
             Websettingdetails.UpdateRowFromWebsettingdetails(ref row, obj);
             pdswebsettingdetails.ttblwebsettingdetails.AddttblwebsettingdetailsRow((pdswebsettingdetailsDataSet.ttblwebsettingdetailsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SaveWebSetting - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SaveWebSetting(ref pdsContext,  pdswebsettingdetails, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SaveWebSetting - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebsettingdetails);
      }

      public IEnumerable<Websettingdetails> LoadWebSetting(Websettingload websettingload)
      {   
         var results = new List<Websettingdetails>();
         
         var pdswebsettingload = new pdswebsettingloadDataSet();
            
         var pdswebsettingdetails = new pdswebsettingdetailsDataSet();
            
         DataRow ttblwebsettingloadCriteria = pdswebsettingload.ttblwebsettingload.NewttblwebsettingloadRow();
         Websettingload.UpdateRowFromWebsettingload(ref ttblwebsettingloadCriteria, websettingload);
         pdswebsettingload.ttblwebsettingload.AddttblwebsettingloadRow((pdswebsettingloadDataSet.ttblwebsettingloadRow)ttblwebsettingloadCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadWebSetting - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.LoadWebSetting(ref pdsContext,  pdswebsettingload, out pdswebsettingdetails, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadWebSetting - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebsettingload); 
    
            foreach (DataRow row in pdswebsettingdetails.ttblwebsettingdetails)
            {
                results.Add(Websettingdetails.BuildWebsettingdetailsFromRow(row));
            }
            return results;
        
      }

      public void FileTransfer(AssharedentryFileTransferRequestAPI AssharedentryFileTransferRequestAPI)
      {   
         
         var pdsreporttransfer = new pdsreporttransferDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblreporttransferRow = pdsreporttransfer.ttblreporttransfer.NewttblreporttransferRow();
         Reporttransfer.UpdateRowFromReporttransfer(ref ttblreporttransferRow, AssharedentryFileTransferRequestAPI.reporttransfer);
         pdsreporttransfer.ttblreporttransfer.AddttblreporttransferRow((pdsreporttransferDataSet.ttblreporttransferRow)ttblreporttransferRow);
          
         var  cFileName = AssharedentryFileTransferRequestAPI.cFileName;
            
         var  cTargetType = AssharedentryFileTransferRequestAPI.cTargetType;
            
         
         NLogLoggerP.Trace("FileTransfer - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.FileTransfer(ref pdsContext,  cFileName,  cTargetType,  pdsreporttransfer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FileTransfer - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreporttransfer);
      }

      public Webmodrecord WebModificationCreate(Webmodrecord webmodrecord)
      {   
         var result = new Webmodrecord();
         
         var pdswebmodrecord = new pdswebmodrecordDataSet();
            
         DataRow ttblwebmodrecordCriteria = pdswebmodrecord.ttblwebmodrecord.NewttblwebmodrecordRow();
         Webmodrecord.UpdateRowFromWebmodrecord(ref ttblwebmodrecordCriteria, webmodrecord);
         pdswebmodrecord.ttblwebmodrecord.AddttblwebmodrecordRow((pdswebmodrecordDataSet.ttblwebmodrecordRow)ttblwebmodrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebModificationCreate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebModificationCreate(ref pdsContext, ref pdswebmodrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebModificationCreate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodrecord); 
    
         if (pdswebmodrecord.ttblwebmodrecord.Count > 0) 
         { 
             result = Webmodrecord.BuildWebmodrecordFromRow(pdswebmodrecord.ttblwebmodrecord[0]);
         } 
              
          
         return result;
          
      }

      public void WebModificationDelete(IEnumerable<Webmodcriteria> webmodcriteria)
      {   
         
         var pdswebmodcriteria = new pdswebmodcriteriaDataSet();
            
         foreach (var obj in webmodcriteria)
         {
             DataRow row = pdswebmodcriteria.ttblwebmodcriteria.NewttblwebmodcriteriaRow();
             Webmodcriteria.UpdateRowFromWebmodcriteria(ref row, obj);
             pdswebmodcriteria.ttblwebmodcriteria.AddttblwebmodcriteriaRow((pdswebmodcriteriaDataSet.ttblwebmodcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebModificationDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebModificationDelete(ref pdsContext,  pdswebmodcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebModificationDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodcriteria);
      }

      public AssharedentryGetWebModificationListResponseAPI GetWebModificationList(Webmodlistcriteria webmodlistcriteria)
      {   
         var result = new AssharedentryGetWebModificationListResponseAPI();
         
         var pdswebmodlistcriteria = new pdswebmodlistcriteriaDataSet();
            
         var pdswebmodlistresults = new pdswebmodlistresultsDataSet();
            
         DataRow ttblwebmodlistcriteriaCriteria = pdswebmodlistcriteria.ttblwebmodlistcriteria.NewttblwebmodlistcriteriaRow();
         Webmodlistcriteria.UpdateRowFromWebmodlistcriteria(ref ttblwebmodlistcriteriaCriteria, webmodlistcriteria);
         pdswebmodlistcriteria.ttblwebmodlistcriteria.AddttblwebmodlistcriteriaRow((pdswebmodlistcriteriaDataSet.ttblwebmodlistcriteriaRow)ttblwebmodlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetWebModificationList - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.GetWebModificationList(ref pdsContext,  pdswebmodlistcriteria, out pdswebmodlistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetWebModificationList - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodlistcriteria); 
    
         foreach (DataRow row in pdswebmodlistresults.ttblwebmodlistresults)
         {
            result.webmodlistresults.Add(Webmodlistresults.BuildWebmodlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Webmodlistresults GetActiveWebModification(Webmodlistcriteria webmodlistcriteria)
      {   
         var result = new Webmodlistresults();
         
         var pdswebmodlistcriteria = new pdswebmodlistcriteriaDataSet();
            
         var pdswebmodlistresults = new pdswebmodlistresultsDataSet();
            
         DataRow ttblwebmodlistcriteriaCriteria = pdswebmodlistcriteria.ttblwebmodlistcriteria.NewttblwebmodlistcriteriaRow();
         Webmodlistcriteria.UpdateRowFromWebmodlistcriteria(ref ttblwebmodlistcriteriaCriteria, webmodlistcriteria);
         pdswebmodlistcriteria.ttblwebmodlistcriteria.AddttblwebmodlistcriteriaRow((pdswebmodlistcriteriaDataSet.ttblwebmodlistcriteriaRow)ttblwebmodlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetActiveWebModification - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.GetActiveWebModification(ref pdsContext,  pdswebmodlistcriteria, out pdswebmodlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetActiveWebModification - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodlistcriteria); 
    
         if (pdswebmodlistresults.ttblwebmodlistresults.Count > 0) 
         { 
             result = Webmodlistresults.BuildWebmodlistresultsFromRow(pdswebmodlistresults.ttblwebmodlistresults[0]);
         } 
              
          
         return result;
          
      }

      public Webmodrecord WebModificationRead(Webmodcriteria webmodcriteria)
      {   
         var result = new Webmodrecord();
         
         var pdswebmodcriteria = new pdswebmodcriteriaDataSet();
            
         var pdswebmodrecord = new pdswebmodrecordDataSet();
            
         DataRow ttblwebmodcriteriaCriteria = pdswebmodcriteria.ttblwebmodcriteria.NewttblwebmodcriteriaRow();
         Webmodcriteria.UpdateRowFromWebmodcriteria(ref ttblwebmodcriteriaCriteria, webmodcriteria);
         pdswebmodcriteria.ttblwebmodcriteria.AddttblwebmodcriteriaRow((pdswebmodcriteriaDataSet.ttblwebmodcriteriaRow)ttblwebmodcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebModificationRead - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebModificationRead(ref pdsContext,  pdswebmodcriteria, out pdswebmodrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebModificationRead - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodcriteria); 
    
         if (pdswebmodrecord.ttblwebmodrecord.Count > 0) 
         { 
             result = Webmodrecord.BuildWebmodrecordFromRow(pdswebmodrecord.ttblwebmodrecord[0]);
         } 
              
          
         return result;
          
      }

      public void WebModificationUpdate(Webmodrecord webmodrecord)
      {   
         
         var pdswebmodrecord = new pdswebmodrecordDataSet();
            
         DataRow ttblwebmodrecordCriteria = pdswebmodrecord.ttblwebmodrecord.NewttblwebmodrecordRow();
         Webmodrecord.UpdateRowFromWebmodrecord(ref ttblwebmodrecordCriteria, webmodrecord);
         pdswebmodrecord.ttblwebmodrecord.AddttblwebmodrecordRow((pdswebmodrecordDataSet.ttblwebmodrecordRow)ttblwebmodrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebModificationUpdate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebModificationUpdate(ref pdsContext,  pdswebmodrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebModificationUpdate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebmodrecord);
      }

      public Webnoterecord WebNoteCreate(Webnoterecord webnoterecord)
      {   
         var result = new Webnoterecord();
         
         var pdswebnoterecord = new pdswebnoterecordDataSet();
            
         DataRow ttblwebnoterecordCriteria = pdswebnoterecord.ttblwebnoterecord.NewttblwebnoterecordRow();
         Webnoterecord.UpdateRowFromWebnoterecord(ref ttblwebnoterecordCriteria, webnoterecord);
         pdswebnoterecord.ttblwebnoterecord.AddttblwebnoterecordRow((pdswebnoterecordDataSet.ttblwebnoterecordRow)ttblwebnoterecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebNoteCreate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebNoteCreate(ref pdsContext, ref pdswebnoterecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebNoteCreate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebnoterecord); 
    
         if (pdswebnoterecord.ttblwebnoterecord.Count > 0) 
         { 
             result = Webnoterecord.BuildWebnoterecordFromRow(pdswebnoterecord.ttblwebnoterecord[0]);
         } 
              
          
         return result;
          
      }

      public void WebNoteDelete(IEnumerable<Webnotecriteria> webnotecriteria)
      {   
         
         var pdswebnotecriteria = new pdswebnotecriteriaDataSet();
            
         foreach (var obj in webnotecriteria)
         {
             DataRow row = pdswebnotecriteria.ttblwebnotecriteria.NewttblwebnotecriteriaRow();
             Webnotecriteria.UpdateRowFromWebnotecriteria(ref row, obj);
             pdswebnotecriteria.ttblwebnotecriteria.AddttblwebnotecriteriaRow((pdswebnotecriteriaDataSet.ttblwebnotecriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebNoteDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebNoteDelete(ref pdsContext,  pdswebnotecriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebNoteDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebnotecriteria);
      }

      public AssharedentryGetWebNoteListResponseAPI GetWebNoteList(Webnotelistcriteria webnotelistcriteria)
      {   
         var result = new AssharedentryGetWebNoteListResponseAPI();
         
         var pdswebnotelistcriteria = new pdswebnotelistcriteriaDataSet();
            
         var pdswebnotelistresults = new pdswebnotelistresultsDataSet();
            
         DataRow ttblwebnotelistcriteriaCriteria = pdswebnotelistcriteria.ttblwebnotelistcriteria.NewttblwebnotelistcriteriaRow();
         Webnotelistcriteria.UpdateRowFromWebnotelistcriteria(ref ttblwebnotelistcriteriaCriteria, webnotelistcriteria);
         pdswebnotelistcriteria.ttblwebnotelistcriteria.AddttblwebnotelistcriteriaRow((pdswebnotelistcriteriaDataSet.ttblwebnotelistcriteriaRow)ttblwebnotelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetWebNoteList - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.GetWebNoteList(ref pdsContext,  pdswebnotelistcriteria, out pdswebnotelistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetWebNoteList - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebnotelistcriteria); 
    
         foreach (DataRow row in pdswebnotelistresults.ttblwebnotelistresults)
         {
            result.webnotelistresults.Add(Webnotelistresults.BuildWebnotelistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Webnoterecord WebNoteRead(Webnotecriteria webnotecriteria)
      {   
         var result = new Webnoterecord();
         
         var pdswebnotecriteria = new pdswebnotecriteriaDataSet();
            
         var pdswebnoterecord = new pdswebnoterecordDataSet();
            
         DataRow ttblwebnotecriteriaCriteria = pdswebnotecriteria.ttblwebnotecriteria.NewttblwebnotecriteriaRow();
         Webnotecriteria.UpdateRowFromWebnotecriteria(ref ttblwebnotecriteriaCriteria, webnotecriteria);
         pdswebnotecriteria.ttblwebnotecriteria.AddttblwebnotecriteriaRow((pdswebnotecriteriaDataSet.ttblwebnotecriteriaRow)ttblwebnotecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebNoteRead - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebNoteRead(ref pdsContext,  pdswebnotecriteria, out pdswebnoterecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebNoteRead - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebnotecriteria); 
    
         if (pdswebnoterecord.ttblwebnoterecord.Count > 0) 
         { 
             result = Webnoterecord.BuildWebnoterecordFromRow(pdswebnoterecord.ttblwebnoterecord[0]);
         } 
              
          
         return result;
          
      }

      public void WebNoteUpdate(Webnoterecord webnoterecord)
      {   
         
         var pdswebnoterecord = new pdswebnoterecordDataSet();
            
         DataRow ttblwebnoterecordCriteria = pdswebnoterecord.ttblwebnoterecord.NewttblwebnoterecordRow();
         Webnoterecord.UpdateRowFromWebnoterecord(ref ttblwebnoterecordCriteria, webnoterecord);
         pdswebnoterecord.ttblwebnoterecord.AddttblwebnoterecordRow((pdswebnoterecordDataSet.ttblwebnoterecordRow)ttblwebnoterecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebNoteUpdate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebNoteUpdate(ref pdsContext,  pdswebnoterecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebNoteUpdate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebnoterecord);
      }

      public IEnumerable<Notemovepagenoresults> WebNoteMovePageNumber(Notemovepageno notemovepageno)
      {   
         var results = new List<Notemovepagenoresults>();
         
         var pdsnotemovepageno = new pdsnotemovepagenoDataSet();
            
         DataRow ttblnotemovepagenoCriteria = pdsnotemovepageno.ttblnotemovepageno.NewttblnotemovepagenoRow();
         Notemovepageno.UpdateRowFromNotemovepageno(ref ttblnotemovepagenoCriteria, notemovepageno);
         pdsnotemovepageno.ttblnotemovepageno.AddttblnotemovepagenoRow((pdsnotemovepagenoDataSet.ttblnotemovepagenoRow)ttblnotemovepagenoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebNoteMovePageNumber - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.WebNoteMovePageNumber(ref pdsContext, ref pdsnotemovepageno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebNoteMovePageNumber - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnotemovepageno); 
    
            foreach (DataRow row in pdsnotemovepageno.ttblnotemovepagenoresults)
            {
                results.Add(Notemovepagenoresults.BuildNotemovepagenoresultsFromRow(row));
            }
            return results;
        
      }

      public void IONIMSPingTest()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("IONIMSPingTest - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.IONIMSPingTest(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IONIMSPingTest - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Vendorcurrencysingle CalculateVendorCurrency(Vendorcurrencycriteria vendorcurrencycriteria)
      {   
         var result = new Vendorcurrencysingle();
         
         var pdsvendorcurrency = new pdsvendorcurrencyDataSet();
            
         DataRow ttblvendorcurrencycriteriaCriteria = pdsvendorcurrency.ttblvendorcurrencycriteria.NewttblvendorcurrencycriteriaRow();
         Vendorcurrencycriteria.UpdateRowFromVendorcurrencycriteria(ref ttblvendorcurrencycriteriaCriteria, vendorcurrencycriteria);
         pdsvendorcurrency.ttblvendorcurrencycriteria.AddttblvendorcurrencycriteriaRow((pdsvendorcurrencyDataSet.ttblvendorcurrencycriteriaRow)ttblvendorcurrencycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CalculateVendorCurrency - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.CalculateVendorCurrency(ref pdsContext, ref pdsvendorcurrency, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CalculateVendorCurrency - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvendorcurrency); 
    
         if (pdsvendorcurrency.ttblvendorcurrencysingle.Count > 0) 
         { 
             result = Vendorcurrencysingle.BuildVendorcurrencysingleFromRow(pdsvendorcurrency.ttblvendorcurrencysingle[0]);
         } 
              
          
         return result;
          
      }

      public void ClearShoppingList()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ClearShoppingList - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ClearShoppingList(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ClearShoppingList - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Geocodelookupresults> GEOCodeLookup(Geocodelookupcriteria geocodelookupcriteria)
      {   
         var results = new List<Geocodelookupresults>();
         
         var pdsgeocodelookup = new pdsgeocodelookupDataSet();
            
         DataRow ttblgeocodelookupcriteriaCriteria = pdsgeocodelookup.ttblgeocodelookupcriteria.NewttblgeocodelookupcriteriaRow();
         Geocodelookupcriteria.UpdateRowFromGeocodelookupcriteria(ref ttblgeocodelookupcriteriaCriteria, geocodelookupcriteria);
         pdsgeocodelookup.ttblgeocodelookupcriteria.AddttblgeocodelookupcriteriaRow((pdsgeocodelookupDataSet.ttblgeocodelookupcriteriaRow)ttblgeocodelookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GEOCodeLookup - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.GEOCodeLookup(ref pdsContext, ref pdsgeocodelookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GEOCodeLookup - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgeocodelookup); 
    
            foreach (DataRow row in pdsgeocodelookup.ttblgeocodelookupresults)
            {
                results.Add(Geocodelookupresults.BuildGeocodelookupresultsFromRow(row));
            }
            return results;
        
      }

      public AssharedentryMenuFunctionSecuritySettingsResponseAPI MenuFunctionSecuritySettings(string cSecurityRoles)
      {   
         var result = new AssharedentryMenuFunctionSecuritySettingsResponseAPI();
         
         var pdsmenusecurity = new pdsmenusecurityDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("MenuFunctionSecuritySettings - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.MenuFunctionSecuritySettings(ref pdsContext,  cSecurityRoles, out pdsmenusecurity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("MenuFunctionSecuritySettings - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmenusecurity); 
    
         foreach (DataRow row in pdsmenusecurity.ttblmenusecurityfunction)
         {
            result.menusecurityfunction.Add(Menusecurityfunction.BuildMenusecurityfunctionFromRow(row));
         }     
         foreach (DataRow row in pdsmenusecurity.ttblmenusecuritymenu)
         {
            result.menusecuritymenu.Add(Menusecuritymenu.BuildMenusecuritymenuFromRow(row));
         }     
         foreach (DataRow row in pdsmenusecurity.ttblmenusecuritytop)
         {
            result.menusecuritytop.Add(Menusecuritytop.BuildMenusecuritytopFromRow(row));
         }     
          
         return result;
          
      }

      public Printerinitialize PrinterInitialize(AssharedentryPrinterInitializeRequestAPI AssharedentryPrinterInitializeRequestAPI)
      {   
         var result = new Printerinitialize();
         
         var pdsprinterinitialize = new pdsprinterinitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cFunctionName = AssharedentryPrinterInitializeRequestAPI.cFunctionName;
            
         var  cSubFunction = AssharedentryPrinterInitializeRequestAPI.cSubFunction;
            
         var  cReportName = AssharedentryPrinterInitializeRequestAPI.cReportName;
            
         
         NLogLoggerP.Trace("PrinterInitialize - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.PrinterInitialize(ref pdsContext,  cFunctionName,  cSubFunction,  cReportName, out pdsprinterinitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PrinterInitialize - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprinterinitialize); 
    
         if (pdsprinterinitialize.ttblprinterinitialize.Count > 0) 
         { 
             result = Printerinitialize.BuildPrinterinitializeFromRow(pdsprinterinitialize.ttblprinterinitialize[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> PrinterValidate(Printervalidate printervalidate)
      {   
         var results = new List<Messaging>();
         
         var pdsprintervalidate = new pdsprintervalidateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblprintervalidateCriteria = pdsprintervalidate.ttblprintervalidate.NewttblprintervalidateRow();
         Printervalidate.UpdateRowFromPrintervalidate(ref ttblprintervalidateCriteria, printervalidate);
         pdsprintervalidate.ttblprintervalidate.AddttblprintervalidateRow((pdsprintervalidateDataSet.ttblprintervalidateRow)ttblprintervalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PrinterValidate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.PrinterValidate(ref pdsContext,  pdsprintervalidate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PrinterValidate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintervalidate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Reptgrouplookupresults> ReportGroupLookup(Reptgrouplookupcriteria reptgrouplookupcriteria)
      {   
         var results = new List<Reptgrouplookupresults>();
         
         var pdsreptgrouplookup = new pdsreptgrouplookupDataSet();
            
         DataRow ttblreptgrouplookupcriteriaCriteria = pdsreptgrouplookup.ttblreptgrouplookupcriteria.NewttblreptgrouplookupcriteriaRow();
         Reptgrouplookupcriteria.UpdateRowFromReptgrouplookupcriteria(ref ttblreptgrouplookupcriteriaCriteria, reptgrouplookupcriteria);
         pdsreptgrouplookup.ttblreptgrouplookupcriteria.AddttblreptgrouplookupcriteriaRow((pdsreptgrouplookupDataSet.ttblreptgrouplookupcriteriaRow)ttblreptgrouplookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportGroupLookup - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportGroupLookup(ref pdsContext, ref pdsreptgrouplookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportGroupLookup - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptgrouplookup); 
    
            foreach (DataRow row in pdsreptgrouplookup.ttblreptgrouplookupresults)
            {
                results.Add(Reptgrouplookupresults.BuildReptgrouplookupresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Reportsecurity> ReportSecuritySettings(AssharedentryReportSecuritySettingsRequestAPI AssharedentryReportSecuritySettingsRequestAPI)
      {   
         var results = new List<Reportsecurity>();
         
         var pdsreportsecurity = new pdsreportsecurityDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cParentMenu = AssharedentryReportSecuritySettingsRequestAPI.cParentMenu;
            
         
         NLogLoggerP.Trace("ReportSecuritySettings - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportSecuritySettings(ref pdsContext,  cParentMenu, out pdsreportsecurity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportSecuritySettings - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreportsecurity); 
    
            foreach (DataRow row in pdsreportsecurity.ttblreportsecurity)
            {
                results.Add(Reportsecurity.BuildReportsecurityFromRow(row));
            }
            return results;
        
      }

      public void ReportSend(string cReportName, string cUsersList)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportSend - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportSend(ref pdsContext,  cReportName,  cUsersList, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportSend - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Reporttransfer ReportTransfer(string cReportName, string cFileName)
      {   
         var result = new Reporttransfer();
         
         var pdsreporttransfer = new pdsreporttransferDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportTransfer - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportTransfer(ref pdsContext,  cReportName,  cFileName, out pdsreporttransfer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportTransfer - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreporttransfer); 
    
         if (pdsreporttransfer.ttblreporttransfer.Count > 0) 
         { 
             result = Reporttransfer.BuildReporttransferFromRow(pdsreporttransfer.ttblreporttransfer[0]);
         } 
              
          
         return result;
          
      }

      public AssharedentryReportWizardDefinitionResponseAPI ReportWizardDefinition(Reptwizarddefncriteria reptwizarddefncriteria)
      {   
         var result = new AssharedentryReportWizardDefinitionResponseAPI();
         
         var pdsreptwizarddefn = new pdsreptwizarddefnDataSet();
            
         var pdsreptwizardlistproc = new pdsreptwizardlistprocDataSet();
            
         DataRow ttblreptwizarddefncriteriaCriteria = pdsreptwizarddefn.ttblreptwizarddefncriteria.NewttblreptwizarddefncriteriaRow();
         Reptwizarddefncriteria.UpdateRowFromReptwizarddefncriteria(ref ttblreptwizarddefncriteriaCriteria, reptwizarddefncriteria);
         pdsreptwizarddefn.ttblreptwizarddefncriteria.AddttblreptwizarddefncriteriaRow((pdsreptwizarddefnDataSet.ttblreptwizarddefncriteriaRow)ttblreptwizarddefncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardDefinition - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardDefinition(ref pdsContext, ref pdsreptwizarddefn, out pdsreptwizardlistproc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardDefinition - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizarddefn); 
    
         if (pdsreptwizarddefn.ttblreptwizarddefnheader.Count > 0)
         {
            result.reptwizarddefnheader = Reptwizarddefnheader.BuildReptwizarddefnheaderFromRow(pdsreptwizarddefn.ttblreptwizarddefnheader[0]);
         }
                    
         foreach (DataRow row in pdsreptwizarddefn.ttblreptwizarddefnoptions)
         {
            result.reptwizarddefnoptions.Add(Reptwizarddefnoptions.BuildReptwizarddefnoptionsFromRow(row));
         }     
         foreach (DataRow row in pdsreptwizarddefn.ttblreptwizarddefnranges)
         {
            result.reptwizarddefnranges.Add(Reptwizarddefnranges.BuildReptwizarddefnrangesFromRow(row));
         }     
         foreach (DataRow row in pdsreptwizardlistproc.ttblreptwizardlistproc)
         {
            result.reptwizardlistproc.Add(Reptwizardlistproc.BuildReptwizardlistprocFromRow(row));
         }     
          
         return result;
          
      }

      public void ReportWizardDeleteReport(string cReportName)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardDeleteReport - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardDeleteReport(ref pdsContext,  cReportName, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardDeleteReport - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Reptwizardenablesapbs ReportWizardEnableSAPBS(Reptwizardenablesapbs reptwizardenablesapbs)
      {   
         var result = new Reptwizardenablesapbs();
         
         var pdsreptwizardenablesapbs = new pdsreptwizardenablesapbsDataSet();
            
         DataRow ttblreptwizardenablesapbsCriteria = pdsreptwizardenablesapbs.ttblreptwizardenablesapbs.NewttblreptwizardenablesapbsRow();
         Reptwizardenablesapbs.UpdateRowFromReptwizardenablesapbs(ref ttblreptwizardenablesapbsCriteria, reptwizardenablesapbs);
         pdsreptwizardenablesapbs.ttblreptwizardenablesapbs.AddttblreptwizardenablesapbsRow((pdsreptwizardenablesapbsDataSet.ttblreptwizardenablesapbsRow)ttblreptwizardenablesapbsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardEnableSAPBS - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardEnableSAPBS(ref pdsContext, ref pdsreptwizardenablesapbs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardEnableSAPBS - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardenablesapbs); 
    
         if (pdsreptwizardenablesapbs.ttblreptwizardenablesapbs.Count > 0) 
         { 
             result = Reptwizardenablesapbs.BuildReptwizardenablesapbsFromRow(pdsreptwizardenablesapbs.ttblreptwizardenablesapbs[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> ReportWizardFinish(AssharedentryReportWizardFinishRequestAPI AssharedentryReportWizardFinishRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsreptwizardfinish = new pdsreptwizardfinishDataSet();
            
         var pdsreptwizardlistproc = new pdsreptwizardlistprocDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssharedentryReportWizardFinishRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         DataRow ttblreptwizardfinishcriteriaRow = pdsreptwizardfinish.ttblreptwizardfinishcriteria.NewttblreptwizardfinishcriteriaRow();
         Reptwizardfinishcriteria.UpdateRowFromReptwizardfinishcriteria(ref ttblreptwizardfinishcriteriaRow, AssharedentryReportWizardFinishRequestAPI.reptwizardfinishcriteria);
         pdsreptwizardfinish.ttblreptwizardfinishcriteria.AddttblreptwizardfinishcriteriaRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishcriteriaRow)ttblreptwizardfinishcriteriaRow);
          
         foreach (var obj in AssharedentryReportWizardFinishRequestAPI.reptwizardfinishoptions)
         {
            DataRow ttblreptwizardfinishoptionsRow = pdsreptwizardfinish.ttblreptwizardfinishoptions.NewttblreptwizardfinishoptionsRow();
            Reptwizardfinishoptions.UpdateRowFromReptwizardfinishoptions(ref ttblreptwizardfinishoptionsRow, obj);
            pdsreptwizardfinish.ttblreptwizardfinishoptions.AddttblreptwizardfinishoptionsRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishoptionsRow)ttblreptwizardfinishoptionsRow);
         }
          
         foreach (var obj in AssharedentryReportWizardFinishRequestAPI.reptwizardfinishranges)
         {
            DataRow ttblreptwizardfinishrangesRow = pdsreptwizardfinish.ttblreptwizardfinishranges.NewttblreptwizardfinishrangesRow();
            Reptwizardfinishranges.UpdateRowFromReptwizardfinishranges(ref ttblreptwizardfinishrangesRow, obj);
            pdsreptwizardfinish.ttblreptwizardfinishranges.AddttblreptwizardfinishrangesRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishrangesRow)ttblreptwizardfinishrangesRow);
         }
          
         foreach (var obj in AssharedentryReportWizardFinishRequestAPI.reptwizardlistproc)
         {
            DataRow ttblreptwizardlistprocRow = pdsreptwizardlistproc.ttblreptwizardlistproc.NewttblreptwizardlistprocRow();
            Reptwizardlistproc.UpdateRowFromReptwizardlistproc(ref ttblreptwizardlistprocRow, obj);
            pdsreptwizardlistproc.ttblreptwizardlistproc.AddttblreptwizardlistprocRow((pdsreptwizardlistprocDataSet.ttblreptwizardlistprocRow)ttblreptwizardlistprocRow);
         }
          
         
         NLogLoggerP.Trace("ReportWizardFinish - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardFinish(ref pdsContext, ref pdsreptwizardfinish,  pdsreptwizardlistproc,  pdsprintersettings, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardFinish - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardfinish); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void ReportWizardLockReportRecord(string cReportName)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardLockReportRecord - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardLockReportRecord(ref pdsContext,  cReportName, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardLockReportRecord - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public string ReportWizardNextReportName()
      {   
          
         string cReportName = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardNextReportName - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardNextReportName(ref pdsContext, out cReportName, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardNextReportName - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cReportName;
      
      }

      public void ReportWizardUnlockReportRecord(string cReportName)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardUnlockReportRecord - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardUnlockReportRecord(ref pdsContext,  cReportName, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardUnlockReportRecord - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Messaging> ReportWizardValidateOptions(AssharedentryReportWizardValidateOptionsRequestAPI AssharedentryReportWizardValidateOptionsRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsreptwizardfinish = new pdsreptwizardfinishDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblreptwizardfinishcriteriaRow = pdsreptwizardfinish.ttblreptwizardfinishcriteria.NewttblreptwizardfinishcriteriaRow();
         Reptwizardfinishcriteria.UpdateRowFromReptwizardfinishcriteria(ref ttblreptwizardfinishcriteriaRow, AssharedentryReportWizardValidateOptionsRequestAPI.reptwizardfinishcriteria);
         pdsreptwizardfinish.ttblreptwizardfinishcriteria.AddttblreptwizardfinishcriteriaRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishcriteriaRow)ttblreptwizardfinishcriteriaRow);
          
         foreach (var obj in AssharedentryReportWizardValidateOptionsRequestAPI.reptwizardfinishoptions)
         {
            DataRow ttblreptwizardfinishoptionsRow = pdsreptwizardfinish.ttblreptwizardfinishoptions.NewttblreptwizardfinishoptionsRow();
            Reptwizardfinishoptions.UpdateRowFromReptwizardfinishoptions(ref ttblreptwizardfinishoptionsRow, obj);
            pdsreptwizardfinish.ttblreptwizardfinishoptions.AddttblreptwizardfinishoptionsRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishoptionsRow)ttblreptwizardfinishoptionsRow);
         }
          
         
         NLogLoggerP.Trace("ReportWizardValidateOptions - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateOptions(ref pdsContext,  pdsreptwizardfinish, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateOptions - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardfinish); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> ReportWizardValidateRanges(AssharedentryReportWizardValidateRangesRequestAPI AssharedentryReportWizardValidateRangesRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsreptwizardfinish = new pdsreptwizardfinishDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblreptwizardfinishcriteriaRow = pdsreptwizardfinish.ttblreptwizardfinishcriteria.NewttblreptwizardfinishcriteriaRow();
         Reptwizardfinishcriteria.UpdateRowFromReptwizardfinishcriteria(ref ttblreptwizardfinishcriteriaRow, AssharedentryReportWizardValidateRangesRequestAPI.reptwizardfinishcriteria);
         pdsreptwizardfinish.ttblreptwizardfinishcriteria.AddttblreptwizardfinishcriteriaRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishcriteriaRow)ttblreptwizardfinishcriteriaRow);
          
         foreach (var obj in AssharedentryReportWizardValidateRangesRequestAPI.reptwizardfinishranges)
         {
            DataRow ttblreptwizardfinishrangesRow = pdsreptwizardfinish.ttblreptwizardfinishranges.NewttblreptwizardfinishrangesRow();
            Reptwizardfinishranges.UpdateRowFromReptwizardfinishranges(ref ttblreptwizardfinishrangesRow, obj);
            pdsreptwizardfinish.ttblreptwizardfinishranges.AddttblreptwizardfinishrangesRow((pdsreptwizardfinishDataSet.ttblreptwizardfinishrangesRow)ttblreptwizardfinishrangesRow);
         }
          
         
         NLogLoggerP.Trace("ReportWizardValidateRanges - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateRanges(ref pdsContext,  pdsreptwizardfinish, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateRanges - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardfinish); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void ReportWizardValidateSAPBO(Reptwizardvalsapbo reptwizardvalsapbo)
      {   
         
         var pdsreptwizardvalsapbo = new pdsreptwizardvalsapboDataSet();
            
         DataRow ttblreptwizardvalsapboCriteria = pdsreptwizardvalsapbo.ttblreptwizardvalsapbo.NewttblreptwizardvalsapboRow();
         Reptwizardvalsapbo.UpdateRowFromReptwizardvalsapbo(ref ttblreptwizardvalsapboCriteria, reptwizardvalsapbo);
         pdsreptwizardvalsapbo.ttblreptwizardvalsapbo.AddttblreptwizardvalsapboRow((pdsreptwizardvalsapboDataSet.ttblreptwizardvalsapboRow)ttblreptwizardvalsapboCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardValidateSAPBO - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateSAPBO(ref pdsContext,  pdsreptwizardvalsapbo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateSAPBO - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardvalsapbo);
      }

      public void ReportWizardValidateSAPBP(Reptwizardvalsapbp reptwizardvalsapbp)
      {   
         
         var pdsreptwizardvalsapbp = new pdsreptwizardvalsapbpDataSet();
            
         DataRow ttblreptwizardvalsapbpCriteria = pdsreptwizardvalsapbp.ttblreptwizardvalsapbp.NewttblreptwizardvalsapbpRow();
         Reptwizardvalsapbp.UpdateRowFromReptwizardvalsapbp(ref ttblreptwizardvalsapbpCriteria, reptwizardvalsapbp);
         pdsreptwizardvalsapbp.ttblreptwizardvalsapbp.AddttblreptwizardvalsapbpRow((pdsreptwizardvalsapbpDataSet.ttblreptwizardvalsapbpRow)ttblreptwizardvalsapbpCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardValidateSAPBP - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateSAPBP(ref pdsContext,  pdsreptwizardvalsapbp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateSAPBP - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardvalsapbp);
      }

      public Reptwizardvalsapbs ReportWizardValidateSAPBS(Reptwizardvalsapbs reptwizardvalsapbs)
      {   
         var result = new Reptwizardvalsapbs();
         
         var pdsreptwizardvalsapbs = new pdsreptwizardvalsapbsDataSet();
            
         DataRow ttblreptwizardvalsapbsCriteria = pdsreptwizardvalsapbs.ttblreptwizardvalsapbs.NewttblreptwizardvalsapbsRow();
         Reptwizardvalsapbs.UpdateRowFromReptwizardvalsapbs(ref ttblreptwizardvalsapbsCriteria, reptwizardvalsapbs);
         pdsreptwizardvalsapbs.ttblreptwizardvalsapbs.AddttblreptwizardvalsapbsRow((pdsreptwizardvalsapbsDataSet.ttblreptwizardvalsapbsRow)ttblreptwizardvalsapbsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardValidateSAPBS - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateSAPBS(ref pdsContext, ref pdsreptwizardvalsapbs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateSAPBS - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardvalsapbs); 
    
         if (pdsreptwizardvalsapbs.ttblreptwizardvalsapbs.Count > 0) 
         { 
             result = Reptwizardvalsapbs.BuildReptwizardvalsapbsFromRow(pdsreptwizardvalsapbs.ttblreptwizardvalsapbs[0]);
         } 
              
          
         return result;
          
      }

      public Reptwizardvalsapbva ReportWizardValidateSAPBVA(Reptwizardvalsapbva reptwizardvalsapbva)
      {   
         var result = new Reptwizardvalsapbva();
         
         var pdsreptwizardvalsapbva = new pdsreptwizardvalsapbvaDataSet();
            
         DataRow ttblreptwizardvalsapbvaCriteria = pdsreptwizardvalsapbva.ttblreptwizardvalsapbva.NewttblreptwizardvalsapbvaRow();
         Reptwizardvalsapbva.UpdateRowFromReptwizardvalsapbva(ref ttblreptwizardvalsapbvaCriteria, reptwizardvalsapbva);
         pdsreptwizardvalsapbva.ttblreptwizardvalsapbva.AddttblreptwizardvalsapbvaRow((pdsreptwizardvalsapbvaDataSet.ttblreptwizardvalsapbvaRow)ttblreptwizardvalsapbvaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardValidateSAPBVA - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateSAPBVA(ref pdsContext, ref pdsreptwizardvalsapbva, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateSAPBVA - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardvalsapbva); 
    
         if (pdsreptwizardvalsapbva.ttblreptwizardvalsapbva.Count > 0) 
         { 
             result = Reptwizardvalsapbva.BuildReptwizardvalsapbvaFromRow(pdsreptwizardvalsapbva.ttblreptwizardvalsapbva[0]);
         } 
              
          
         return result;
          
      }

      public void ReportWizardValidateSAPBW(Reptwizardvalsapbw reptwizardvalsapbw)
      {   
         
         var pdsreptwizardvalsapbw = new pdsreptwizardvalsapbwDataSet();
            
         DataRow ttblreptwizardvalsapbwCriteria = pdsreptwizardvalsapbw.ttblreptwizardvalsapbw.NewttblreptwizardvalsapbwRow();
         Reptwizardvalsapbw.UpdateRowFromReptwizardvalsapbw(ref ttblreptwizardvalsapbwCriteria, reptwizardvalsapbw);
         pdsreptwizardvalsapbw.ttblreptwizardvalsapbw.AddttblreptwizardvalsapbwRow((pdsreptwizardvalsapbwDataSet.ttblreptwizardvalsapbwRow)ttblreptwizardvalsapbwCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportWizardValidateSAPBW - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardValidateSAPBW(ref pdsContext,  pdsreptwizardvalsapbw, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardValidateSAPBW - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardvalsapbw);
      }

      public IEnumerable<Reptwizardlstprcapinvlst> ReportWizardListProcAPInvList(AssharedentryReportWizardListProcAPInvListRequestAPI AssharedentryReportWizardListProcAPInvListRequestAPI)
      {   
         var results = new List<Reptwizardlstprcapinvlst>();
         
         var pdsreptwizardlstprcapinv = new pdsreptwizardlstprcapinvDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssharedentryReportWizardListProcAPInvListRequestAPI.reptwizardlstprcapinvin)
         {
            DataRow ttblreptwizardlstprcapinvinRow = pdsreptwizardlstprcapinv.ttblreptwizardlstprcapinvin.NewttblreptwizardlstprcapinvinRow();
            Reptwizardlstprcapinvin.UpdateRowFromReptwizardlstprcapinvin(ref ttblreptwizardlstprcapinvinRow, obj);
            pdsreptwizardlstprcapinv.ttblreptwizardlstprcapinvin.AddttblreptwizardlstprcapinvinRow((pdsreptwizardlstprcapinvDataSet.ttblreptwizardlstprcapinvinRow)ttblreptwizardlstprcapinvinRow);
         }
          
         var  dVendNo = AssharedentryReportWizardListProcAPInvListRequestAPI.dVendNo;
            
         
         NLogLoggerP.Trace("ReportWizardListProcAPInvList - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ReportWizardListProcAPInvList(ref pdsContext, ref pdsreptwizardlstprcapinv,  dVendNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportWizardListProcAPInvList - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreptwizardlstprcapinv); 
    
            foreach (DataRow row in pdsreptwizardlstprcapinv.ttblreptwizardlstprcapinvlst)
            {
                results.Add(Reptwizardlstprcapinvlst.BuildReptwizardlstprcapinvlstFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sharedcommentresults> SharedCommentLoad(Sharedcommentcriteria sharedcommentcriteria)
      {   
         var results = new List<Sharedcommentresults>();
         
         var pdssharedcommentcriteria = new pdssharedcommentcriteriaDataSet();
            
         var pdssharedcommentresults = new pdssharedcommentresultsDataSet();
            
         DataRow ttblsharedcommentcriteriaCriteria = pdssharedcommentcriteria.ttblsharedcommentcriteria.NewttblsharedcommentcriteriaRow();
         Sharedcommentcriteria.UpdateRowFromSharedcommentcriteria(ref ttblsharedcommentcriteriaCriteria, sharedcommentcriteria);
         pdssharedcommentcriteria.ttblsharedcommentcriteria.AddttblsharedcommentcriteriaRow((pdssharedcommentcriteriaDataSet.ttblsharedcommentcriteriaRow)ttblsharedcommentcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SharedCommentLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SharedCommentLoad(ref pdsContext,  pdssharedcommentcriteria, out pdssharedcommentresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SharedCommentLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssharedcommentcriteria); 
    
            foreach (DataRow row in pdssharedcommentresults.ttblsharedcommentresults)
            {
                results.Add(Sharedcommentresults.BuildSharedcommentresultsFromRow(row));
            }
            return results;
        
      }

      public AssharedentrySharedCommentSaveResponseAPI SharedCommentSave(IEnumerable<Sharedcommentresults> sharedcommentresults)
      {   
         var result = new AssharedentrySharedCommentSaveResponseAPI();
         
         var pdssharedcommentresults = new pdssharedcommentresultsDataSet();
            
         foreach (var obj in sharedcommentresults)
         {
             DataRow row = pdssharedcommentresults.ttblsharedcommentresults.NewttblsharedcommentresultsRow();
             Sharedcommentresults.UpdateRowFromSharedcommentresults(ref row, obj);
             pdssharedcommentresults.ttblsharedcommentresults.AddttblsharedcommentresultsRow((pdssharedcommentresultsDataSet.ttblsharedcommentresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SharedCommentSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SharedCommentSave(ref pdsContext, ref pdssharedcommentresults, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("SharedCommentSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssharedcommentresults); 
    
         foreach (DataRow row in pdssharedcommentresults.ttblsharedcommentresults)
         {
            result.sharedcommentresults.Add(Sharedcommentresults.BuildSharedcommentresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AssharedentrySharedCommentDeleteResponseAPI SharedCommentDelete(IEnumerable<Sharedcommentresults> sharedcommentresults)
      {   
         var result = new AssharedentrySharedCommentDeleteResponseAPI();
         
         var pdssharedcommentresults = new pdssharedcommentresultsDataSet();
            
         foreach (var obj in sharedcommentresults)
         {
             DataRow row = pdssharedcommentresults.ttblsharedcommentresults.NewttblsharedcommentresultsRow();
             Sharedcommentresults.UpdateRowFromSharedcommentresults(ref row, obj);
             pdssharedcommentresults.ttblsharedcommentresults.AddttblsharedcommentresultsRow((pdssharedcommentresultsDataSet.ttblsharedcommentresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SharedCommentDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SharedCommentDelete(ref pdsContext, ref pdssharedcommentresults, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("SharedCommentDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssharedcommentresults); 
    
         foreach (DataRow row in pdssharedcommentresults.ttblsharedcommentresults)
         {
            result.sharedcommentresults.Add(Sharedcommentresults.BuildSharedcommentresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Sharedpvregistry> SharedPVRegistryLoad(IEnumerable<Sharedpvregistry> sharedpvregistry)
      {   
         var results = new List<Sharedpvregistry>();
         
         var pdssharedpvregistry = new pdssharedpvregistryDataSet();
            
         foreach (var obj in sharedpvregistry)
         {
             DataRow row = pdssharedpvregistry.ttblsharedpvregistry.NewttblsharedpvregistryRow();
             Sharedpvregistry.UpdateRowFromSharedpvregistry(ref row, obj);
             pdssharedpvregistry.ttblsharedpvregistry.AddttblsharedpvregistryRow((pdssharedpvregistryDataSet.ttblsharedpvregistryRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SharedPVRegistryLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SharedPVRegistryLoad(ref pdsContext, ref pdssharedpvregistry, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SharedPVRegistryLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssharedpvregistry); 
    
            foreach (DataRow row in pdssharedpvregistry.ttblsharedpvregistry)
            {
                results.Add(Sharedpvregistry.BuildSharedpvregistryFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sharedpvregistry> SharedPVRegistrySave(IEnumerable<Sharedpvregistry> sharedpvregistry)
      {   
         var results = new List<Sharedpvregistry>();
         
         var pdssharedpvregistry = new pdssharedpvregistryDataSet();
            
         foreach (var obj in sharedpvregistry)
         {
             DataRow row = pdssharedpvregistry.ttblsharedpvregistry.NewttblsharedpvregistryRow();
             Sharedpvregistry.UpdateRowFromSharedpvregistry(ref row, obj);
             pdssharedpvregistry.ttblsharedpvregistry.AddttblsharedpvregistryRow((pdssharedpvregistryDataSet.ttblsharedpvregistryRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SharedPVRegistrySave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.SharedPVRegistrySave(ref pdsContext, ref pdssharedpvregistry, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SharedPVRegistrySave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssharedpvregistry); 
    
            foreach (DataRow row in pdssharedpvregistry.ttblsharedpvregistry)
            {
                results.Add(Sharedpvregistry.BuildSharedpvregistryFromRow(row));
            }
            return results;
        
      }

      public Shoplistchangetotals ShoppingListChange(AssharedentryShoppingListChangeRequestAPI AssharedentryShoppingListChangeRequestAPI)
      {   
         var result = new Shoplistchangetotals();
         
         var pdsshoplistchange = new pdsshoplistchangeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblshoplistchangecriteriaRow = pdsshoplistchange.ttblshoplistchangecriteria.NewttblshoplistchangecriteriaRow();
         Shoplistchangecriteria.UpdateRowFromShoplistchangecriteria(ref ttblshoplistchangecriteriaRow, AssharedentryShoppingListChangeRequestAPI.shoplistchangecriteria);
         pdsshoplistchange.ttblshoplistchangecriteria.AddttblshoplistchangecriteriaRow((pdsshoplistchangeDataSet.ttblshoplistchangecriteriaRow)ttblshoplistchangecriteriaRow);
          
         DataRow ttblshoplistchangetotalsRow = pdsshoplistchange.ttblshoplistchangetotals.NewttblshoplistchangetotalsRow();
         Shoplistchangetotals.UpdateRowFromShoplistchangetotals(ref ttblshoplistchangetotalsRow, AssharedentryShoppingListChangeRequestAPI.shoplistchangetotals);
         pdsshoplistchange.ttblshoplistchangetotals.AddttblshoplistchangetotalsRow((pdsshoplistchangeDataSet.ttblshoplistchangetotalsRow)ttblshoplistchangetotalsRow);
          
         
         NLogLoggerP.Trace("ShoppingListChange - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListChange(ref pdsContext, ref pdsshoplistchange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListChange - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistchange); 
    
         if (pdsshoplistchange.ttblshoplistchangetotals.Count > 0) 
         { 
             result = Shoplistchangetotals.BuildShoplistchangetotalsFromRow(pdsshoplistchange.ttblshoplistchangetotals[0]);
         } 
              
          
         return result;
          
      }

      public Shoplistdeletetotals ShoppingListDelete(AssharedentryShoppingListDeleteRequestAPI AssharedentryShoppingListDeleteRequestAPI)
      {   
         var result = new Shoplistdeletetotals();
         
         var pdsshoplistdelete = new pdsshoplistdeleteDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssharedentryShoppingListDeleteRequestAPI.shoplistdeleteprods)
         {
            DataRow ttblshoplistdeleteprodsRow = pdsshoplistdelete.ttblshoplistdeleteprods.NewttblshoplistdeleteprodsRow();
            Shoplistdeleteprods.UpdateRowFromShoplistdeleteprods(ref ttblshoplistdeleteprodsRow, obj);
            pdsshoplistdelete.ttblshoplistdeleteprods.AddttblshoplistdeleteprodsRow((pdsshoplistdeleteDataSet.ttblshoplistdeleteprodsRow)ttblshoplistdeleteprodsRow);
         }
          
         DataRow ttblshoplistdeletetotalsRow = pdsshoplistdelete.ttblshoplistdeletetotals.NewttblshoplistdeletetotalsRow();
         Shoplistdeletetotals.UpdateRowFromShoplistdeletetotals(ref ttblshoplistdeletetotalsRow, AssharedentryShoppingListDeleteRequestAPI.shoplistdeletetotals);
         pdsshoplistdelete.ttblshoplistdeletetotals.AddttblshoplistdeletetotalsRow((pdsshoplistdeleteDataSet.ttblshoplistdeletetotalsRow)ttblshoplistdeletetotalsRow);
          
         
         NLogLoggerP.Trace("ShoppingListDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListDelete(ref pdsContext, ref pdsshoplistdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistdelete); 
    
         if (pdsshoplistdelete.ttblshoplistdeletetotals.Count > 0) 
         { 
             result = Shoplistdeletetotals.BuildShoplistdeletetotalsFromRow(pdsshoplistdelete.ttblshoplistdeletetotals[0]);
         } 
              
          
         return result;
          
      }

      public Shoplistpopulatetotals ShoppingListPopulate(AssharedentryShoppingListPopulateRequestAPI AssharedentryShoppingListPopulateRequestAPI)
      {   
         var result = new Shoplistpopulatetotals();
         
         var pdsshoplistpopulate = new pdsshoplistpopulateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblshoplistpopulatecriteriaRow = pdsshoplistpopulate.ttblshoplistpopulatecriteria.NewttblshoplistpopulatecriteriaRow();
         Shoplistpopulatecriteria.UpdateRowFromShoplistpopulatecriteria(ref ttblshoplistpopulatecriteriaRow, AssharedentryShoppingListPopulateRequestAPI.shoplistpopulatecriteria);
         pdsshoplistpopulate.ttblshoplistpopulatecriteria.AddttblshoplistpopulatecriteriaRow((pdsshoplistpopulateDataSet.ttblshoplistpopulatecriteriaRow)ttblshoplistpopulatecriteriaRow);
          
         DataRow ttblshoplistpopulatetotalsRow = pdsshoplistpopulate.ttblshoplistpopulatetotals.NewttblshoplistpopulatetotalsRow();
         Shoplistpopulatetotals.UpdateRowFromShoplistpopulatetotals(ref ttblshoplistpopulatetotalsRow, AssharedentryShoppingListPopulateRequestAPI.shoplistpopulatetotals);
         pdsshoplistpopulate.ttblshoplistpopulatetotals.AddttblshoplistpopulatetotalsRow((pdsshoplistpopulateDataSet.ttblshoplistpopulatetotalsRow)ttblshoplistpopulatetotalsRow);
          
         
         NLogLoggerP.Trace("ShoppingListPopulate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListPopulate(ref pdsContext, ref pdsshoplistpopulate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListPopulate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistpopulate); 
    
         if (pdsshoplistpopulate.ttblshoplistpopulatetotals.Count > 0) 
         { 
             result = Shoplistpopulatetotals.BuildShoplistpopulatetotalsFromRow(pdsshoplistpopulate.ttblshoplistpopulatetotals[0]);
         } 
              
          
         return result;
          
      }

      public Shoplistpreparetotals ShoppingListPrepare(Shoplistpreparecriteria shoplistpreparecriteria)
      {   
         var result = new Shoplistpreparetotals();
         
         var pdsshoplistprepare = new pdsshoplistprepareDataSet();
            
         DataRow ttblshoplistpreparecriteriaCriteria = pdsshoplistprepare.ttblshoplistpreparecriteria.NewttblshoplistpreparecriteriaRow();
         Shoplistpreparecriteria.UpdateRowFromShoplistpreparecriteria(ref ttblshoplistpreparecriteriaCriteria, shoplistpreparecriteria);
         pdsshoplistprepare.ttblshoplistpreparecriteria.AddttblshoplistpreparecriteriaRow((pdsshoplistprepareDataSet.ttblshoplistpreparecriteriaRow)ttblshoplistpreparecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ShoppingListPrepare - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListPrepare(ref pdsContext, ref pdsshoplistprepare, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListPrepare - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistprepare); 
    
         if (pdsshoplistprepare.ttblshoplistpreparetotals.Count > 0) 
         { 
             result = Shoplistpreparetotals.BuildShoplistpreparetotalsFromRow(pdsshoplistprepare.ttblshoplistpreparetotals[0]);
         } 
              
          
         return result;
          
      }

      public AssharedentryShoppingListUpdateAllResponseAPI ShoppingListUpdateAll(AssharedentryShoppingListUpdateAllRequestAPI AssharedentryShoppingListUpdateAllRequestAPI)
      {   
         var result = new AssharedentryShoppingListUpdateAllResponseAPI();
         
         var pdsshoplistupdate = new pdsshoplistupdateDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblshoplistupdatecriteriaRow = pdsshoplistupdate.ttblshoplistupdatecriteria.NewttblshoplistupdatecriteriaRow();
         Shoplistupdatecriteria.UpdateRowFromShoplistupdatecriteria(ref ttblshoplistupdatecriteriaRow, AssharedentryShoppingListUpdateAllRequestAPI.shoplistupdatecriteria);
         pdsshoplistupdate.ttblshoplistupdatecriteria.AddttblshoplistupdatecriteriaRow((pdsshoplistupdateDataSet.ttblshoplistupdatecriteriaRow)ttblshoplistupdatecriteriaRow);
          
         foreach (var obj in AssharedentryShoppingListUpdateAllRequestAPI.shoplistupdateprods)
         {
            DataRow ttblshoplistupdateprodsRow = pdsshoplistupdate.ttblshoplistupdateprods.NewttblshoplistupdateprodsRow();
            Shoplistupdateprods.UpdateRowFromShoplistupdateprods(ref ttblshoplistupdateprodsRow, obj);
            pdsshoplistupdate.ttblshoplistupdateprods.AddttblshoplistupdateprodsRow((pdsshoplistupdateDataSet.ttblshoplistupdateprodsRow)ttblshoplistupdateprodsRow);
         }
          
         DataRow ttblshoplistupdatetotalsRow = pdsshoplistupdate.ttblshoplistupdatetotals.NewttblshoplistupdatetotalsRow();
         Shoplistupdatetotals.UpdateRowFromShoplistupdatetotals(ref ttblshoplistupdatetotalsRow, AssharedentryShoppingListUpdateAllRequestAPI.shoplistupdatetotals);
         pdsshoplistupdate.ttblshoplistupdatetotals.AddttblshoplistupdatetotalsRow((pdsshoplistupdateDataSet.ttblshoplistupdatetotalsRow)ttblshoplistupdatetotalsRow);
          
         
         NLogLoggerP.Trace("ShoppingListUpdateAll - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListUpdateAll(ref pdsContext, ref pdsshoplistupdate, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListUpdateAll - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistupdate); 
    
         if (pdsshoplistupdate.ttblshoplistupdatetotals.Count > 0)
         {
            result.shoplistupdatetotals = Shoplistupdatetotals.BuildShoplistupdatetotalsFromRow(pdsshoplistupdate.ttblshoplistupdatetotals[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AssharedentryShoppingListUpdateFromListResponseAPI ShoppingListUpdateFromList(AssharedentryShoppingListUpdateFromListRequestAPI AssharedentryShoppingListUpdateFromListRequestAPI)
      {   
         var result = new AssharedentryShoppingListUpdateFromListResponseAPI();
         
         var pdsshoplistupdate = new pdsshoplistupdateDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblshoplistupdatecriteriaRow = pdsshoplistupdate.ttblshoplistupdatecriteria.NewttblshoplistupdatecriteriaRow();
         Shoplistupdatecriteria.UpdateRowFromShoplistupdatecriteria(ref ttblshoplistupdatecriteriaRow, AssharedentryShoppingListUpdateFromListRequestAPI.shoplistupdatecriteria);
         pdsshoplistupdate.ttblshoplistupdatecriteria.AddttblshoplistupdatecriteriaRow((pdsshoplistupdateDataSet.ttblshoplistupdatecriteriaRow)ttblshoplistupdatecriteriaRow);
          
         foreach (var obj in AssharedentryShoppingListUpdateFromListRequestAPI.shoplistupdateprods)
         {
            DataRow ttblshoplistupdateprodsRow = pdsshoplistupdate.ttblshoplistupdateprods.NewttblshoplistupdateprodsRow();
            Shoplistupdateprods.UpdateRowFromShoplistupdateprods(ref ttblshoplistupdateprodsRow, obj);
            pdsshoplistupdate.ttblshoplistupdateprods.AddttblshoplistupdateprodsRow((pdsshoplistupdateDataSet.ttblshoplistupdateprodsRow)ttblshoplistupdateprodsRow);
         }
          
         DataRow ttblshoplistupdatetotalsRow = pdsshoplistupdate.ttblshoplistupdatetotals.NewttblshoplistupdatetotalsRow();
         Shoplistupdatetotals.UpdateRowFromShoplistupdatetotals(ref ttblshoplistupdatetotalsRow, AssharedentryShoppingListUpdateFromListRequestAPI.shoplistupdatetotals);
         pdsshoplistupdate.ttblshoplistupdatetotals.AddttblshoplistupdatetotalsRow((pdsshoplistupdateDataSet.ttblshoplistupdatetotalsRow)ttblshoplistupdatetotalsRow);
          
         
         NLogLoggerP.Trace("ShoppingListUpdateFromList - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.ShoppingListUpdateFromList(ref pdsContext, ref pdsshoplistupdate, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ShoppingListUpdateFromList - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsshoplistupdate); 
    
         if (pdsshoplistupdate.ttblshoplistupdatetotals.Count > 0)
         {
            result.shoplistupdatetotals = Shoplistupdatetotals.BuildShoplistupdatetotalsFromRow(pdsshoplistupdate.ttblshoplistupdatetotals[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void AuthPointTransCancel(Authpointtrans authpointtrans)
      {   
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         DataRow ttblauthpointtransCriteria = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
         Authpointtrans.UpdateRowFromAuthpointtrans(ref ttblauthpointtransCriteria, authpointtrans);
         pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)ttblauthpointtransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointTransCancel - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransCancel(ref pdsContext,  pdsauthpointtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointTransCancel - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans);
      }

      public AssharedentryAuthPointTransAuthCheckResponseAPI AuthPointTransAuthCheck(Authpointtrans authpointtrans)
      {   
         var result = new AssharedentryAuthPointTransAuthCheckResponseAPI();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         DataRow ttblauthpointtransCriteria = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
         Authpointtrans.UpdateRowFromAuthpointtrans(ref ttblauthpointtransCriteria, authpointtrans);
         pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)ttblauthpointtransCriteria);
            
         string cErrorMessage = string.Empty;
         bool lAuthorized = false;
   
         
         NLogLoggerP.Trace("AuthPointTransAuthCheck - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransAuthCheck(ref pdsContext, ref pdsauthpointtrans, out cErrorMessage, out lAuthorized);
               }
            });
         NLogLoggerP.Info("AuthPointTransAuthCheck - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
         if (pdsauthpointtrans.ttblauthpointtrans.Count > 0)
         {
            result.authpointtrans = Authpointtrans.BuildAuthpointtransFromRow(pdsauthpointtrans.ttblauthpointtrans[0]);
         }
                    
         result.lAuthorized = lAuthorized;
          
         return result;
          
      }

      public AssharedentryAuthPointTransValidateResponseAPI AuthPointTransValidate(Authpointtrans authpointtrans)
      {   
         var result = new AssharedentryAuthPointTransValidateResponseAPI();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         DataRow ttblauthpointtransCriteria = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
         Authpointtrans.UpdateRowFromAuthpointtrans(ref ttblauthpointtransCriteria, authpointtrans);
         pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)ttblauthpointtransCriteria);
            
         string cErrorMessage = string.Empty;
         bool lAuthorized = false;
         bool lDenied = false;
   
         
         NLogLoggerP.Trace("AuthPointTransValidate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransValidate(ref pdsContext,  pdsauthpointtrans, out cErrorMessage, out lAuthorized, out lDenied);
               }
            });
         NLogLoggerP.Info("AuthPointTransValidate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
         result.lAuthorized = lAuthorized;
         result.lDenied = lDenied;
          
         return result;
          
      }

      public IEnumerable<Authpointtrans> AuthPointTransRetrieve(AssharedentryAuthPointTransRetrieveRequestAPI AssharedentryAuthPointTransRetrieveRequestAPI)
      {   
         var results = new List<Authpointtrans>();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cRetrieveOperator = AssharedentryAuthPointTransRetrieveRequestAPI.cRetrieveOperator;
            
         
         NLogLoggerP.Trace("AuthPointTransRetrieve - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransRetrieve(ref pdsContext,  cRetrieveOperator, out pdsauthpointtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointTransRetrieve - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
            foreach (DataRow row in pdsauthpointtrans.ttblauthpointtrans)
            {
                results.Add(Authpointtrans.BuildAuthpointtransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Authpointtrans> AuthPointTransGrant(IEnumerable<Authpointtrans> authpointtrans)
      {   
         var results = new List<Authpointtrans>();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         foreach (var obj in authpointtrans)
         {
             DataRow row = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
             Authpointtrans.UpdateRowFromAuthpointtrans(ref row, obj);
             pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointTransGrant - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransGrant(ref pdsContext, ref pdsauthpointtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointTransGrant - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
            foreach (DataRow row in pdsauthpointtrans.ttblauthpointtrans)
            {
                results.Add(Authpointtrans.BuildAuthpointtransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Authpointtrans> AuthPointTransDeny(IEnumerable<Authpointtrans> authpointtrans)
      {   
         var results = new List<Authpointtrans>();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         foreach (var obj in authpointtrans)
         {
             DataRow row = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
             Authpointtrans.UpdateRowFromAuthpointtrans(ref row, obj);
             pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointTransDeny - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransDeny(ref pdsContext, ref pdsauthpointtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointTransDeny - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
            foreach (DataRow row in pdsauthpointtrans.ttblauthpointtrans)
            {
                results.Add(Authpointtrans.BuildAuthpointtransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Authpointtrans> AuthPointTransReset(IEnumerable<Authpointtrans> authpointtrans)
      {   
         var results = new List<Authpointtrans>();
         
         var pdsauthpointtrans = new pdsauthpointtransDataSet();
            
         foreach (var obj in authpointtrans)
         {
             DataRow row = pdsauthpointtrans.ttblauthpointtrans.NewttblauthpointtransRow();
             Authpointtrans.UpdateRowFromAuthpointtrans(ref row, obj);
             pdsauthpointtrans.ttblauthpointtrans.AddttblauthpointtransRow((pdsauthpointtransDataSet.ttblauthpointtransRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointTransReset - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointTransReset(ref pdsContext, ref pdsauthpointtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointTransReset - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointtrans); 
    
            foreach (DataRow row in pdsauthpointtrans.ttblauthpointtrans)
            {
                results.Add(Authpointtrans.BuildAuthpointtransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Authpointsecurityresults> AuthPointSecurityRetrieve(Authpointsecuritycriteria authpointsecuritycriteria)
      {   
         var results = new List<Authpointsecurityresults>();
         
         var pdsauthpointsecurity = new pdsauthpointsecurityDataSet();
            
         DataRow ttblauthpointsecuritycriteriaCriteria = pdsauthpointsecurity.ttblauthpointsecuritycriteria.NewttblauthpointsecuritycriteriaRow();
         Authpointsecuritycriteria.UpdateRowFromAuthpointsecuritycriteria(ref ttblauthpointsecuritycriteriaCriteria, authpointsecuritycriteria);
         pdsauthpointsecurity.ttblauthpointsecuritycriteria.AddttblauthpointsecuritycriteriaRow((pdsauthpointsecurityDataSet.ttblauthpointsecuritycriteriaRow)ttblauthpointsecuritycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointSecurityRetrieve - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointSecurityRetrieve(ref pdsContext, ref pdsauthpointsecurity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointSecurityRetrieve - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointsecurity); 
    
            foreach (DataRow row in pdsauthpointsecurity.ttblauthpointsecurityresults)
            {
                results.Add(Authpointsecurityresults.BuildAuthpointsecurityresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Authpointsecurityupdate> AuthPointSetSecurity(IEnumerable<Authpointsecurityupdate> authpointsecurityupdate)
      {   
         var results = new List<Authpointsecurityupdate>();
         
         var pdsauthpointsecurityupdate = new pdsauthpointsecurityupdateDataSet();
            
         foreach (var obj in authpointsecurityupdate)
         {
             DataRow row = pdsauthpointsecurityupdate.ttblauthpointsecurityupdate.NewttblauthpointsecurityupdateRow();
             Authpointsecurityupdate.UpdateRowFromAuthpointsecurityupdate(ref row, obj);
             pdsauthpointsecurityupdate.ttblauthpointsecurityupdate.AddttblauthpointsecurityupdateRow((pdsauthpointsecurityupdateDataSet.ttblauthpointsecurityupdateRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthPointSetSecurity - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AuthPointSetSecurity(ref pdsContext, ref pdsauthpointsecurityupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthPointSetSecurity - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauthpointsecurityupdate); 
    
            foreach (DataRow row in pdsauthpointsecurityupdate.ttblauthpointsecurityupdate)
            {
                results.Add(Authpointsecurityupdate.BuildAuthpointsecurityupdateFromRow(row));
            }
            return results;
        
      }

      public void PVRecoveryRecord(Pvrecoveryrecord pvrecoveryrecord)
      {   
         
         var pdspvrecoveryrecord = new pdspvrecoveryrecordDataSet();
            
         DataRow ttblpvrecoveryrecordCriteria = pdspvrecoveryrecord.ttblpvrecoveryrecord.NewttblpvrecoveryrecordRow();
         Pvrecoveryrecord.UpdateRowFromPvrecoveryrecord(ref ttblpvrecoveryrecordCriteria, pvrecoveryrecord);
         pdspvrecoveryrecord.ttblpvrecoveryrecord.AddttblpvrecoveryrecordRow((pdspvrecoveryrecordDataSet.ttblpvrecoveryrecordRow)ttblpvrecoveryrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PVRecoveryRecord - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.PVRecoveryRecord(ref pdsContext,  pdspvrecoveryrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PVRecoveryRecord - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspvrecoveryrecord);
      }

      public void OperatorValidate(Opervalidate opervalidate)
      {   
         
         var pdsopervalidate = new pdsopervalidateDataSet();
            
         DataRow ttblopervalidateCriteria = pdsopervalidate.ttblopervalidate.NewttblopervalidateRow();
         Opervalidate.UpdateRowFromOpervalidate(ref ttblopervalidateCriteria, opervalidate);
         pdsopervalidate.ttblopervalidate.AddttblopervalidateRow((pdsopervalidateDataSet.ttblopervalidateRow)ttblopervalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OperatorValidate - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.OperatorValidate(ref pdsContext,  pdsopervalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OperatorValidate - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsopervalidate);
      }

      public Aocustomer AOCustomerLoad()
      {   
         var result = new Aocustomer();
         
         var pdsaocustomer = new pdsaocustomerDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOCustomerLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOCustomerLoad(ref pdsContext, out pdsaocustomer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOCustomerLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaocustomer); 
    
         if (pdsaocustomer.ttblaocustomer.Count > 0) 
         { 
             result = Aocustomer.BuildAocustomerFromRow(pdsaocustomer.ttblaocustomer[0]);
         } 
              
          
         return result;
          
      }

      public Aocustomer AOCustomerLoadSCType(Aocustomer aocustomer)
      {   
         var result = new Aocustomer();
         
         var pdsaocustomer = new pdsaocustomerDataSet();
            
         DataRow ttblaocustomerCriteria = pdsaocustomer.ttblaocustomer.NewttblaocustomerRow();
         Aocustomer.UpdateRowFromAocustomer(ref ttblaocustomerCriteria, aocustomer);
         pdsaocustomer.ttblaocustomer.AddttblaocustomerRow((pdsaocustomerDataSet.ttblaocustomerRow)ttblaocustomerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOCustomerLoadSCType - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOCustomerLoadSCType(ref pdsContext, ref pdsaocustomer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOCustomerLoadSCType - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaocustomer); 
    
         if (pdsaocustomer.ttblaocustomer.Count > 0) 
         { 
             result = Aocustomer.BuildAocustomerFromRow(pdsaocustomer.ttblaocustomer[0]);
         } 
              
          
         return result;
          
      }

      public Aocustomer AOCustSetPerMonth(Aocustomer aocustomer)
      {   
         var result = new Aocustomer();
         
         var pdsaocustomer = new pdsaocustomerDataSet();
            
         DataRow ttblaocustomerCriteria = pdsaocustomer.ttblaocustomer.NewttblaocustomerRow();
         Aocustomer.UpdateRowFromAocustomer(ref ttblaocustomerCriteria, aocustomer);
         pdsaocustomer.ttblaocustomer.AddttblaocustomerRow((pdsaocustomerDataSet.ttblaocustomerRow)ttblaocustomerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOCustSetPerMonth - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOCustSetPerMonth(ref pdsContext, ref pdsaocustomer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOCustSetPerMonth - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaocustomer); 
    
         if (pdsaocustomer.ttblaocustomer.Count > 0) 
         { 
             result = Aocustomer.BuildAocustomerFromRow(pdsaocustomer.ttblaocustomer[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOCustomerSave(Aocustomer aocustomer)
      {   
         var results = new List<Messaging>();
         
         var pdsaocustomer = new pdsaocustomerDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaocustomerCriteria = pdsaocustomer.ttblaocustomer.NewttblaocustomerRow();
         Aocustomer.UpdateRowFromAocustomer(ref ttblaocustomerCriteria, aocustomer);
         pdsaocustomer.ttblaocustomer.AddttblaocustomerRow((pdsaocustomerDataSet.ttblaocustomerRow)ttblaocustomerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOCustomerSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOCustomerSave(ref pdsContext,  pdsaocustomer, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOCustomerSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaocustomer); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aovendor AOVendorLoad()
      {   
         var result = new Aovendor();
         
         var pdsaovendor = new pdsaovendorDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOVendorLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOVendorLoad(ref pdsContext, out pdsaovendor, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOVendorLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaovendor); 
    
         if (pdsaovendor.ttblaovendor.Count > 0) 
         { 
             result = Aovendor.BuildAovendorFromRow(pdsaovendor.ttblaovendor[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOVendorSave(Aovendor aovendor)
      {   
         var results = new List<Messaging>();
         
         var pdsaovendor = new pdsaovendorDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaovendorCriteria = pdsaovendor.ttblaovendor.NewttblaovendorRow();
         Aovendor.UpdateRowFromAovendor(ref ttblaovendorCriteria, aovendor);
         pdsaovendor.ttblaovendor.AddttblaovendorRow((pdsaovendorDataSet.ttblaovendorRow)ttblaovendorCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOVendorSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOVendorSave(ref pdsContext,  pdsaovendor, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOVendorSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaovendor); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aoproduct AOProductLoad()
      {   
         var result = new Aoproduct();
         
         var pdsaoproduct = new pdsaoproductDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOProductLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOProductLoad(ref pdsContext, out pdsaoproduct, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOProductLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaoproduct); 
    
         if (pdsaoproduct.ttblaoproduct.Count > 0) 
         { 
             result = Aoproduct.BuildAoproductFromRow(pdsaoproduct.ttblaoproduct[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOProductSave(Aoproduct aoproduct)
      {   
         var results = new List<Messaging>();
         
         var pdsaoproduct = new pdsaoproductDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaoproductCriteria = pdsaoproduct.ttblaoproduct.NewttblaoproductRow();
         Aoproduct.UpdateRowFromAoproduct(ref ttblaoproductCriteria, aoproduct);
         pdsaoproduct.ttblaoproduct.AddttblaoproductRow((pdsaoproductDataSet.ttblaoproductRow)ttblaoproductCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOProductSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOProductSave(ref pdsContext,  pdsaoproduct, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOProductSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaoproduct); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aokitproduction AOKitProductionLoad()
      {   
         var result = new Aokitproduction();
         
         var pdsaokitproduction = new pdsaokitproductionDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOKitProductionLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOKitProductionLoad(ref pdsContext, out pdsaokitproduction, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOKitProductionLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaokitproduction); 
    
         if (pdsaokitproduction.ttblaokitproduction.Count > 0) 
         { 
             result = Aokitproduction.BuildAokitproductionFromRow(pdsaokitproduction.ttblaokitproduction[0]);
         } 
              
          
         return result;
          
      }

      public void AOKitProductionSave(Aokitproduction aokitproduction)
      {   
         
         var pdsaokitproduction = new pdsaokitproductionDataSet();
            
         DataRow ttblaokitproductionCriteria = pdsaokitproduction.ttblaokitproduction.NewttblaokitproductionRow();
         Aokitproduction.UpdateRowFromAokitproduction(ref ttblaokitproductionCriteria, aokitproduction);
         pdsaokitproduction.ttblaokitproduction.AddttblaokitproductionRow((pdsaokitproductionDataSet.ttblaokitproductionRow)ttblaokitproductionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOKitProductionSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOKitProductionSave(ref pdsContext,  pdsaokitproduction, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOKitProductionSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaokitproduction);
      }

      public Aosalesorders AOSalesOrdersLoad()
      {   
         var result = new Aosalesorders();
         
         var pdsaosalesorders = new pdsaosalesordersDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSalesOrdersLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSalesOrdersLoad(ref pdsContext, out pdsaosalesorders, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSalesOrdersLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosalesorders); 
    
         if (pdsaosalesorders.ttblaosalesorders.Count > 0) 
         { 
             result = Aosalesorders.BuildAosalesordersFromRow(pdsaosalesorders.ttblaosalesorders[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSalesOrdersSave(Aosalesorders aosalesorders)
      {   
         var results = new List<Messaging>();
         
         var pdsaosalesorders = new pdsaosalesordersDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosalesordersCriteria = pdsaosalesorders.ttblaosalesorders.NewttblaosalesordersRow();
         Aosalesorders.UpdateRowFromAosalesorders(ref ttblaosalesordersCriteria, aosalesorders);
         pdsaosalesorders.ttblaosalesorders.AddttblaosalesordersRow((pdsaosalesordersDataSet.ttblaosalesordersRow)ttblaosalesordersCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSalesOrdersSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSalesOrdersSave(ref pdsContext,  pdsaosalesorders, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSalesOrdersSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosalesorders); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Aoarscl> AOarsclLoad()
      {   
         var results = new List<Aoarscl>();
         
         var pdsaoarscl = new pdsaoarsclDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOarsclLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOarsclLoad(ref pdsContext, out pdsaoarscl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOarsclLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaoarscl); 
    
            foreach (DataRow row in pdsaoarscl.ttblaoarscl)
            {
                results.Add(Aoarscl.BuildAoarsclFromRow(row));
            }
            return results;
        
      }

      public void AOarsclSave(decimal pvCustno)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOarsclSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOarsclSave(ref pdsContext,  pvCustno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOarsclSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void AOarsclDelete(decimal pvCustno)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOarsclDelete - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOarsclDelete(ref pdsContext,  pvCustno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOarsclDelete - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Aopurchaseorders AOPurchaseOrdersLoad()
      {   
         var result = new Aopurchaseorders();
         
         var pdsaopurchaseorders = new pdsaopurchaseordersDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOPurchaseOrdersLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOPurchaseOrdersLoad(ref pdsContext, out pdsaopurchaseorders, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOPurchaseOrdersLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaopurchaseorders); 
    
         if (pdsaopurchaseorders.ttblaopurchaseorders.Count > 0) 
         { 
             result = Aopurchaseorders.BuildAopurchaseordersFromRow(pdsaopurchaseorders.ttblaopurchaseorders[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOPurchaseOrdersSave(Aopurchaseorders aopurchaseorders)
      {   
         var results = new List<Messaging>();
         
         var pdsaopurchaseorders = new pdsaopurchaseordersDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaopurchaseordersCriteria = pdsaopurchaseorders.ttblaopurchaseorders.NewttblaopurchaseordersRow();
         Aopurchaseorders.UpdateRowFromAopurchaseorders(ref ttblaopurchaseordersCriteria, aopurchaseorders);
         pdsaopurchaseorders.ttblaopurchaseorders.AddttblaopurchaseordersRow((pdsaopurchaseordersDataSet.ttblaopurchaseordersRow)ttblaopurchaseordersCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOPurchaseOrdersSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOPurchaseOrdersSave(ref pdsContext,  pdsaopurchaseorders, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOPurchaseOrdersSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaopurchaseorders); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aojobmanagement AOJobManagementLoad()
      {   
         var result = new Aojobmanagement();
         
         var pdsaojobmanagement = new pdsaojobmanagementDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOJobManagementLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOJobManagementLoad(ref pdsContext, out pdsaojobmanagement, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOJobManagementLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaojobmanagement); 
    
         if (pdsaojobmanagement.ttblaojobmanagement.Count > 0) 
         { 
             result = Aojobmanagement.BuildAojobmanagementFromRow(pdsaojobmanagement.ttblaojobmanagement[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOJobManagementSave(Aojobmanagement aojobmanagement)
      {   
         var results = new List<Messaging>();
         
         var pdsaojobmanagement = new pdsaojobmanagementDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaojobmanagementCriteria = pdsaojobmanagement.ttblaojobmanagement.NewttblaojobmanagementRow();
         Aojobmanagement.UpdateRowFromAojobmanagement(ref ttblaojobmanagementCriteria, aojobmanagement);
         pdsaojobmanagement.ttblaojobmanagement.AddttblaojobmanagementRow((pdsaojobmanagementDataSet.ttblaojobmanagementRow)ttblaojobmanagementCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOJobManagementSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOJobManagementSave(ref pdsContext,  pdsaojobmanagement, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOJobManagementSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaojobmanagement); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aowarehousetransfers AOWarehouseTransfersLoad()
      {   
         var result = new Aowarehousetransfers();
         
         var pdsaowarehousetransfers = new pdsaowarehousetransfersDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOWarehouseTransfersLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOWarehouseTransfersLoad(ref pdsContext, out pdsaowarehousetransfers, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOWarehouseTransfersLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaowarehousetransfers); 
    
         if (pdsaowarehousetransfers.ttblaowarehousetransfers.Count > 0) 
         { 
             result = Aowarehousetransfers.BuildAowarehousetransfersFromRow(pdsaowarehousetransfers.ttblaowarehousetransfers[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOWarehouseTransfersSave(Aowarehousetransfers aowarehousetransfers)
      {   
         var results = new List<Messaging>();
         
         var pdsaowarehousetransfers = new pdsaowarehousetransfersDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaowarehousetransfersCriteria = pdsaowarehousetransfers.ttblaowarehousetransfers.NewttblaowarehousetransfersRow();
         Aowarehousetransfers.UpdateRowFromAowarehousetransfers(ref ttblaowarehousetransfersCriteria, aowarehousetransfers);
         pdsaowarehousetransfers.ttblaowarehousetransfers.AddttblaowarehousetransfersRow((pdsaowarehousetransfersDataSet.ttblaowarehousetransfersRow)ttblaowarehousetransfersCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOWarehouseTransfersSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOWarehouseTransfersSave(ref pdsContext,  pdsaowarehousetransfers, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOWarehouseTransfersSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaowarehousetransfers); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aoservicewarranty AOServiceWarrantyLoad()
      {   
         var result = new Aoservicewarranty();
         
         var pdsaoservicewarranty = new pdsaoservicewarrantyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOServiceWarrantyLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOServiceWarrantyLoad(ref pdsContext, out pdsaoservicewarranty, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOServiceWarrantyLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaoservicewarranty); 
    
         if (pdsaoservicewarranty.ttblaoservicewarranty.Count > 0) 
         { 
             result = Aoservicewarranty.BuildAoservicewarrantyFromRow(pdsaoservicewarranty.ttblaoservicewarranty[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOServiceWarrantySave(Aoservicewarranty aoservicewarranty)
      {   
         var results = new List<Messaging>();
         
         var pdsaoservicewarranty = new pdsaoservicewarrantyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaoservicewarrantyCriteria = pdsaoservicewarranty.ttblaoservicewarranty.NewttblaoservicewarrantyRow();
         Aoservicewarranty.UpdateRowFromAoservicewarranty(ref ttblaoservicewarrantyCriteria, aoservicewarranty);
         pdsaoservicewarranty.ttblaoservicewarranty.AddttblaoservicewarrantyRow((pdsaoservicewarrantyDataSet.ttblaoservicewarrantyRow)ttblaoservicewarrantyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOServiceWarrantySave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOServiceWarrantySave(ref pdsContext,  pdsaoservicewarranty, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOServiceWarrantySave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaoservicewarranty); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aovalueadd AOValueAddLoad()
      {   
         var result = new Aovalueadd();
         
         var pdsaovalueadd = new pdsaovalueaddDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOValueAddLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOValueAddLoad(ref pdsContext, out pdsaovalueadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOValueAddLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaovalueadd); 
    
         if (pdsaovalueadd.ttblaovalueadd.Count > 0) 
         { 
             result = Aovalueadd.BuildAovalueaddFromRow(pdsaovalueadd.ttblaovalueadd[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOValueAddSave(Aovalueadd aovalueadd)
      {   
         var results = new List<Messaging>();
         
         var pdsaovalueadd = new pdsaovalueaddDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaovalueaddCriteria = pdsaovalueadd.ttblaovalueadd.NewttblaovalueaddRow();
         Aovalueadd.UpdateRowFromAovalueadd(ref ttblaovalueaddCriteria, aovalueadd);
         pdsaovalueadd.ttblaovalueadd.AddttblaovalueaddRow((pdsaovalueaddDataSet.ttblaovalueaddRow)ttblaovalueaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOValueAddSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOValueAddSave(ref pdsContext,  pdsaovalueadd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOValueAddSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaovalueadd); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aofinancials AOFinancialsLoad()
      {   
         var result = new Aofinancials();
         
         var pdsaofinancials = new pdsaofinancialsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOFinancialsLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOFinancialsLoad(ref pdsContext, out pdsaofinancials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOFinancialsLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaofinancials); 
    
         if (pdsaofinancials.ttblaofinancials.Count > 0) 
         { 
             result = Aofinancials.BuildAofinancialsFromRow(pdsaofinancials.ttblaofinancials[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOFinancialsSave(Aofinancials aofinancials)
      {   
         var results = new List<Messaging>();
         
         var pdsaofinancials = new pdsaofinancialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaofinancialsCriteria = pdsaofinancials.ttblaofinancials.NewttblaofinancialsRow();
         Aofinancials.UpdateRowFromAofinancials(ref ttblaofinancialsCriteria, aofinancials);
         pdsaofinancials.ttblaofinancials.AddttblaofinancialsRow((pdsaofinancialsDataSet.ttblaofinancialsRow)ttblaofinancialsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOFinancialsSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOFinancialsSave(ref pdsContext,  pdsaofinancials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOFinancialsSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaofinancials); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aosaleshistory AOSalesHistoryLoad()
      {   
         var result = new Aosaleshistory();
         
         var pdsaosaleshistory = new pdsaosaleshistoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSalesHistoryLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSalesHistoryLoad(ref pdsContext, out pdsaosaleshistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSalesHistoryLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosaleshistory); 
    
         if (pdsaosaleshistory.ttblaosaleshistory.Count > 0) 
         { 
             result = Aosaleshistory.BuildAosaleshistoryFromRow(pdsaosaleshistory.ttblaosaleshistory[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSalesHistorySave(Aosaleshistory aosaleshistory)
      {   
         var results = new List<Messaging>();
         
         var pdsaosaleshistory = new pdsaosaleshistoryDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosaleshistoryCriteria = pdsaosaleshistory.ttblaosaleshistory.NewttblaosaleshistoryRow();
         Aosaleshistory.UpdateRowFromAosaleshistory(ref ttblaosaleshistoryCriteria, aosaleshistory);
         pdsaosaleshistory.ttblaosaleshistory.AddttblaosaleshistoryRow((pdsaosaleshistoryDataSet.ttblaosaleshistoryRow)ttblaosaleshistoryCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSalesHistorySave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSalesHistorySave(ref pdsContext,  pdsaosaleshistory, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSalesHistorySave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosaleshistory); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Aosystem AOSystemLoad()
      {   
         var result = new Aosystem();
         
         var pdsaosystem = new pdsaosystemDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemLoad - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemLoad(ref pdsContext, out pdsaosystem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemLoad - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystem); 
    
         if (pdsaosystem.ttblaosystem.Count > 0) 
         { 
             result = Aosystem.BuildAosystemFromRow(pdsaosystem.ttblaosystem[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> AOSystemSave(Aosystem aosystem)
      {   
         var results = new List<Messaging>();
         
         var pdsaosystem = new pdsaosystemDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaosystemCriteria = pdsaosystem.ttblaosystem.NewttblaosystemRow();
         Aosystem.UpdateRowFromAosystem(ref ttblaosystemCriteria, aosystem);
         pdsaosystem.ttblaosystem.AddttblaosystemRow((pdsaosystemDataSet.ttblaosystemRow)ttblaosystemCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AOSystemSave - Assharedentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedentryproxy = this.proxyAppObject.CreatePO_assharedentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedentryproxy.AOSystemSave(ref pdsContext,  pdsaosystem, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AOSystemSave - Assharedentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaosystem); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  