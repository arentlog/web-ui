//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsibprint;
   using Models.Pdsprintersettings;
   using Models.Complex;

   public partial class AsibentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AsibentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsibentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsibentryIBRIRInitializeResponseAPI IBRIRInitialize(AsibentryIBRIRInitializeRequestAPI AsibentryIBRIRInitializeRequestAPI)
      {   
         var result = new AsibentryIBRIRInitializeResponseAPI();
         
         var pdsibprint = new pdsibprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRIRInitializeRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRIRInitializeRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         
         NLogLoggerP.Trace("IBRIRInitialize - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRIRInitialize(ref pdsContext, ref pdsibprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRIRInitialize - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint); 
    
         foreach (DataRow row in pdsibprint.ttblibordersresults)
         {
            result.ibordersresults.Add(Ibordersresults.BuildIbordersresultsFromRow(row));
         }     
         if (pdsibprint.ttblibprintsingle.Count > 0)
         {
            result.ibprintsingle = Ibprintsingle.BuildIbprintsingleFromRow(pdsibprint.ttblibprintsingle[0]);
         }
                    
          
         return result;
          
      }

      public void IBRIRDemandPrint(AsibentryIBRIRDemandPrintRequestAPI AsibentryIBRIRDemandPrintRequestAPI)
      {   
         
         var pdsibprint = new pdsibprintDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRIRDemandPrintRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRIRDemandPrintRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsibentryIBRIRDemandPrintRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("IBRIRDemandPrint - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRIRDemandPrint(ref pdsContext,  pdsibprint,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRIRDemandPrint - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint);
      }

      public AsibentryIBRCInitializeResponseAPI IBRCInitialize(AsibentryIBRCInitializeRequestAPI AsibentryIBRCInitializeRequestAPI)
      {   
         var result = new AsibentryIBRCInitializeResponseAPI();
         
         var pdsibprint = new pdsibprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRCInitializeRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRCInitializeRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         
         NLogLoggerP.Trace("IBRCInitialize - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRCInitialize(ref pdsContext, ref pdsibprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRCInitialize - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint); 
    
         foreach (DataRow row in pdsibprint.ttblibordersresults)
         {
            result.ibordersresults.Add(Ibordersresults.BuildIbordersresultsFromRow(row));
         }     
         if (pdsibprint.ttblibprintsingle.Count > 0)
         {
            result.ibprintsingle = Ibprintsingle.BuildIbprintsingleFromRow(pdsibprint.ttblibprintsingle[0]);
         }
                    
          
         return result;
          
      }

      public void IBRCDemandPrint(AsibentryIBRCDemandPrintRequestAPI AsibentryIBRCDemandPrintRequestAPI)
      {   
         
         var pdsibprint = new pdsibprintDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRCDemandPrintRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRCDemandPrintRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsibentryIBRCDemandPrintRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("IBRCDemandPrint - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRCDemandPrint(ref pdsContext,  pdsibprint,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRCDemandPrint - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint);
      }

      public AsibentryIBRSInitializeResponseAPI IBRSInitialize(AsibentryIBRSInitializeRequestAPI AsibentryIBRSInitializeRequestAPI)
      {   
         var result = new AsibentryIBRSInitializeResponseAPI();
         
         var pdsibprint = new pdsibprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRSInitializeRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRSInitializeRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         
         NLogLoggerP.Trace("IBRSInitialize - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRSInitialize(ref pdsContext, ref pdsibprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRSInitialize - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint); 
    
         foreach (DataRow row in pdsibprint.ttblibordersresults)
         {
            result.ibordersresults.Add(Ibordersresults.BuildIbordersresultsFromRow(row));
         }     
         if (pdsibprint.ttblibprintsingle.Count > 0)
         {
            result.ibprintsingle = Ibprintsingle.BuildIbprintsingleFromRow(pdsibprint.ttblibprintsingle[0]);
         }
                    
          
         return result;
          
      }

      public void IBRSDemandPrint(AsibentryIBRSDemandPrintRequestAPI AsibentryIBRSDemandPrintRequestAPI)
      {   
         
         var pdsibprint = new pdsibprintDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsibentryIBRSDemandPrintRequestAPI.ibordersresults)
         {
            DataRow ttblibordersresultsRow = pdsibprint.ttblibordersresults.NewttblibordersresultsRow();
            Ibordersresults.UpdateRowFromIbordersresults(ref ttblibordersresultsRow, obj);
            pdsibprint.ttblibordersresults.AddttblibordersresultsRow((pdsibprintDataSet.ttblibordersresultsRow)ttblibordersresultsRow);
         }
          
         DataRow ttblibprintsingleRow = pdsibprint.ttblibprintsingle.NewttblibprintsingleRow();
         Ibprintsingle.UpdateRowFromIbprintsingle(ref ttblibprintsingleRow, AsibentryIBRSDemandPrintRequestAPI.ibprintsingle);
         pdsibprint.ttblibprintsingle.AddttblibprintsingleRow((pdsibprintDataSet.ttblibprintsingleRow)ttblibprintsingleRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsibentryIBRSDemandPrintRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("IBRSDemandPrint - Asibentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsibentryproxy = this.proxyAppObject.CreatePO_asibentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsibentryproxy.IBRSDemandPrint(ref pdsContext,  pdsibprint,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IBRSDemandPrint - Asibentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsibprint);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  