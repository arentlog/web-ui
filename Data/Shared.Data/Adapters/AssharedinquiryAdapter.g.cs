//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscoresretorddet;
   using Models.Pdsgetaddrcontact;
   using Models.Pdsuserfieldsdefn;
   using Models.Pdstablecodealpha;
   using Models.Pdstablecodenumeric;
   using Models.Pdsuserlist;
   using Models.Pdsthirdpartyverify;
   using Models.Pdstiatcaddress;
   using Models.Pdstiatctax;
   using Models.Pdstiatdaddress;
   using Models.Pdscenposvars;
   using Models.Pdsccrecoversingle;
   using Models.Pdsdcaosrecord;
   using Models.Pdswebextendrecord;
   using Models.Pdswebextendcriteria;
   using Models.Pdswebextendupdatestatus;
   using Models.Complex;

   public partial class AssharedinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AssharedinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssharedinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public bool CenPOSCheckRecord()
      {   
          
         bool lResponse = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CenPOSCheckRecord - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CenPOSCheckRecord(ref pdsContext, out lResponse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CenPOSCheckRecord - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lResponse;
      
      }

      public void CenPOSClearRecord()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CenPOSClearRecord - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CenPOSClearRecord(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CenPOSClearRecord - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void CenPOSLogURL(string cURL)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CenPOSLogURL - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CenPOSLogURL(ref pdsContext,  cURL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CenPOSLogURL - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void CenPOSLogTimeout()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CenPOSLogTimeout - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CenPOSLogTimeout(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CenPOSLogTimeout - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Coresretorddetresults> CoresReturnOrderDetails(Coresretorddetcriteria coresretorddetcriteria)
      {   
         var results = new List<Coresretorddetresults>();
         
         var pdscoresretorddet = new pdscoresretorddetDataSet();
            
         DataRow ttblcoresretorddetcriteriaCriteria = pdscoresretorddet.ttblcoresretorddetcriteria.NewttblcoresretorddetcriteriaRow();
         Coresretorddetcriteria.UpdateRowFromCoresretorddetcriteria(ref ttblcoresretorddetcriteriaCriteria, coresretorddetcriteria);
         pdscoresretorddet.ttblcoresretorddetcriteria.AddttblcoresretorddetcriteriaRow((pdscoresretorddetDataSet.ttblcoresretorddetcriteriaRow)ttblcoresretorddetcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoresReturnOrderDetails - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CoresReturnOrderDetails(ref pdsContext, ref pdscoresretorddet, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoresReturnOrderDetails - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoresretorddet); 
    
            foreach (DataRow row in pdscoresretorddet.ttblcoresretorddetresults)
            {
                results.Add(Coresretorddetresults.BuildCoresretorddetresultsFromRow(row));
            }
            return results;
        
      }

      public Getaddrcontactresults GetAddressContact(Getaddrcontactcriteria getaddrcontactcriteria)
      {   
         var result = new Getaddrcontactresults();
         
         var pdsgetaddrcontact = new pdsgetaddrcontactDataSet();
            
         DataRow ttblgetaddrcontactcriteriaCriteria = pdsgetaddrcontact.ttblgetaddrcontactcriteria.NewttblgetaddrcontactcriteriaRow();
         Getaddrcontactcriteria.UpdateRowFromGetaddrcontactcriteria(ref ttblgetaddrcontactcriteriaCriteria, getaddrcontactcriteria);
         pdsgetaddrcontact.ttblgetaddrcontactcriteria.AddttblgetaddrcontactcriteriaRow((pdsgetaddrcontactDataSet.ttblgetaddrcontactcriteriaRow)ttblgetaddrcontactcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetAddressContact - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetAddressContact(ref pdsContext, ref pdsgetaddrcontact, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetAddressContact - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetaddrcontact); 
    
         if (pdsgetaddrcontact.ttblgetaddrcontactresults.Count > 0) 
         { 
             result = Getaddrcontactresults.BuildGetaddrcontactresultsFromRow(pdsgetaddrcontact.ttblgetaddrcontactresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Userfieldsdefnresults> GetUserFieldsMetaData(Userfieldsdefncriteria userfieldsdefncriteria)
      {   
         var results = new List<Userfieldsdefnresults>();
         
         var pdsuserfieldsdefn = new pdsuserfieldsdefnDataSet();
            
         DataRow ttbluserfieldsdefncriteriaCriteria = pdsuserfieldsdefn.ttbluserfieldsdefncriteria.NewttbluserfieldsdefncriteriaRow();
         Userfieldsdefncriteria.UpdateRowFromUserfieldsdefncriteria(ref ttbluserfieldsdefncriteriaCriteria, userfieldsdefncriteria);
         pdsuserfieldsdefn.ttbluserfieldsdefncriteria.AddttbluserfieldsdefncriteriaRow((pdsuserfieldsdefnDataSet.ttbluserfieldsdefncriteriaRow)ttbluserfieldsdefncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetUserFieldsMetaData - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetUserFieldsMetaData(ref pdsContext, ref pdsuserfieldsdefn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetUserFieldsMetaData - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsuserfieldsdefn); 
    
            foreach (DataRow row in pdsuserfieldsdefn.ttbluserfieldsdefnresults)
            {
                results.Add(Userfieldsdefnresults.BuildUserfieldsdefnresultsFromRow(row));
            }
            return results;
        
      }

      public void SendDrillBackRequest(string cIONUserID, string cDrillBackString)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SendDrillBackRequest - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.SendDrillBackRequest(ref pdsContext,  cIONUserID,  cDrillBackString, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SendDrillBackRequest - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Tablecodealpha> TableCodeAlphanumeric(string cCodeType)
      {   
         var results = new List<Tablecodealpha>();
         
         var pdstablecodealpha = new pdstablecodealphaDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TableCodeAlphanumeric - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TableCodeAlphanumeric(ref pdsContext,  cCodeType, out pdstablecodealpha, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TableCodeAlphanumeric - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstablecodealpha); 
    
            foreach (DataRow row in pdstablecodealpha.ttbltablecodealpha)
            {
                results.Add(Tablecodealpha.BuildTablecodealphaFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Tablecodenumeric> TableCodeNumeric(string cCodeType)
      {   
         var results = new List<Tablecodenumeric>();
         
         var pdstablecodenumeric = new pdstablecodenumericDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TableCodeNumeric - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TableCodeNumeric(ref pdsContext,  cCodeType, out pdstablecodenumeric, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TableCodeNumeric - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstablecodenumeric); 
    
            foreach (DataRow row in pdstablecodenumeric.ttbltablecodenumeric)
            {
                results.Add(Tablecodenumeric.BuildTablecodenumericFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Userlist> GetUserList(string cOperBegins, string cNameBegins, string cDeptBegins)
      {   
         var results = new List<Userlist>();
         
         var pdsuserlist = new pdsuserlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetUserList - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetUserList(ref pdsContext,  cOperBegins,  cNameBegins,  cDeptBegins, out pdsuserlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetUserList - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsuserlist); 
    
            foreach (DataRow row in pdsuserlist.ttbluserlist)
            {
                results.Add(Userlist.BuildUserlistFromRow(row));
            }
            return results;
        
      }

      public Userlist GetSingleUser(string cUserid)
      {   
         var result = new Userlist();
         
         var pdsuserlist = new pdsuserlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSingleUser - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetSingleUser(ref pdsContext,  cUserid, out pdsuserlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSingleUser - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsuserlist); 
    
         if (pdsuserlist.ttbluserlist.Count > 0) 
         { 
             result = Userlist.BuildUserlistFromRow(pdsuserlist.ttbluserlist[0]);
         } 
              
          
         return result;
          
      }

      public AssharedinquiryGetSXVersionNumbersResponseAPI GetSXVersionNumbers()
      {   
         var result = new AssharedinquiryGetSXVersionNumbersResponseAPI();
         
         string cErrorMessage = string.Empty;
         string cDisplayVersion = string.Empty;
         string cInternalVersion = string.Empty;
         string cESBVersion = string.Empty;
         string cSIVersion = string.Empty;
   
         
         NLogLoggerP.Trace("GetSXVersionNumbers - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetSXVersionNumbers(ref pdsContext, out cErrorMessage, out cDisplayVersion, out cInternalVersion, out cESBVersion, out cSIVersion);
               }
            });
         NLogLoggerP.Info("GetSXVersionNumbers - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cDisplayVersion = cDisplayVersion;
         result.cInternalVersion = cInternalVersion;
         result.cESBVersion = cESBVersion;
         result.cSIVersion = cSIVersion;
          
         return result;
          
      }

      public Thirdpartyverify ThirdPartyVerify(Thirdpartyverify thirdpartyverify)
      {   
         var result = new Thirdpartyverify();
         
         var pdsthirdpartyverify = new pdsthirdpartyverifyDataSet();
            
         DataRow ttblthirdpartyverifyCriteria = pdsthirdpartyverify.ttblthirdpartyverify.NewttblthirdpartyverifyRow();
         Thirdpartyverify.UpdateRowFromThirdpartyverify(ref ttblthirdpartyverifyCriteria, thirdpartyverify);
         pdsthirdpartyverify.ttblthirdpartyverify.AddttblthirdpartyverifyRow((pdsthirdpartyverifyDataSet.ttblthirdpartyverifyRow)ttblthirdpartyverifyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ThirdPartyVerify - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.ThirdPartyVerify(ref pdsContext, ref pdsthirdpartyverify, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ThirdPartyVerify - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsthirdpartyverify); 
    
         if (pdsthirdpartyverify.ttblthirdpartyverify.Count > 0) 
         { 
             result = Thirdpartyverify.BuildThirdpartyverifyFromRow(pdsthirdpartyverify.ttblthirdpartyverify[0]);
         } 
              
          
         return result;
          
      }

      public Tiatctax TIATCCalculate(Tiatcaddress tiatcaddress)
      {   
         var result = new Tiatctax();
         
         var pdstiatcaddress = new pdstiatcaddressDataSet();
            
         var pdstiatctax = new pdstiatctaxDataSet();
            
         DataRow ttbltiatcaddressCriteria = pdstiatcaddress.ttbltiatcaddress.NewttbltiatcaddressRow();
         Tiatcaddress.UpdateRowFromTiatcaddress(ref ttbltiatcaddressCriteria, tiatcaddress);
         pdstiatcaddress.ttbltiatcaddress.AddttbltiatcaddressRow((pdstiatcaddressDataSet.ttbltiatcaddressRow)ttbltiatcaddressCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TIATCCalculate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TIATCCalculate(ref pdsContext,  pdstiatcaddress, out pdstiatctax, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TIATCCalculate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiatcaddress); 
    
         if (pdstiatctax.ttbltiatctax.Count > 0) 
         { 
             result = Tiatctax.BuildTiatctaxFromRow(pdstiatctax.ttbltiatctax[0]);
         } 
              
          
         return result;
          
      }

      public Tiatcaddress TIATCLoad()
      {   
         var result = new Tiatcaddress();
         
         var pdstiatcaddress = new pdstiatcaddressDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TIATCLoad - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TIATCLoad(ref pdsContext, out pdstiatcaddress, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TIATCLoad - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiatcaddress); 
    
         if (pdstiatcaddress.ttbltiatcaddress.Count > 0) 
         { 
             result = Tiatcaddress.BuildTiatcaddressFromRow(pdstiatcaddress.ttbltiatcaddress[0]);
         } 
              
          
         return result;
          
      }

      public Tiatctax TIATDCalculate(Tiatdaddress tiatdaddress)
      {   
         var result = new Tiatctax();
         
         var pdstiatdaddress = new pdstiatdaddressDataSet();
            
         var pdstiatctax = new pdstiatctaxDataSet();
            
         DataRow ttbltiatdaddressCriteria = pdstiatdaddress.ttbltiatdaddress.NewttbltiatdaddressRow();
         Tiatdaddress.UpdateRowFromTiatdaddress(ref ttbltiatdaddressCriteria, tiatdaddress);
         pdstiatdaddress.ttbltiatdaddress.AddttbltiatdaddressRow((pdstiatdaddressDataSet.ttbltiatdaddressRow)ttbltiatdaddressCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TIATDCalculate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TIATDCalculate(ref pdsContext,  pdstiatdaddress, out pdstiatctax, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TIATDCalculate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiatdaddress); 
    
         if (pdstiatctax.ttbltiatctax.Count > 0) 
         { 
             result = Tiatctax.BuildTiatctaxFromRow(pdstiatctax.ttbltiatctax[0]);
         } 
              
          
         return result;
          
      }

      public Tiatdaddress TIATDFieldChange(AssharedinquiryTIATDFieldChangeRequestAPI AssharedinquiryTIATDFieldChangeRequestAPI)
      {   
         var result = new Tiatdaddress();
         
         var pdstiatdaddress = new pdstiatdaddressDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbltiatdaddressRow = pdstiatdaddress.ttbltiatdaddress.NewttbltiatdaddressRow();
         Tiatdaddress.UpdateRowFromTiatdaddress(ref ttbltiatdaddressRow, AssharedinquiryTIATDFieldChangeRequestAPI.tiatdaddress);
         pdstiatdaddress.ttbltiatdaddress.AddttbltiatdaddressRow((pdstiatdaddressDataSet.ttbltiatdaddressRow)ttbltiatdaddressRow);
          
         var  cFieldName = AssharedinquiryTIATDFieldChangeRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("TIATDFieldChange - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TIATDFieldChange(ref pdsContext,  cFieldName, ref pdstiatdaddress, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TIATDFieldChange - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiatdaddress); 
    
         if (pdstiatdaddress.ttbltiatdaddress.Count > 0) 
         { 
             result = Tiatdaddress.BuildTiatdaddressFromRow(pdstiatdaddress.ttbltiatdaddress[0]);
         } 
              
          
         return result;
          
      }

      public Tiatdaddress TIATDLoad()
      {   
         var result = new Tiatdaddress();
         
         var pdstiatdaddress = new pdstiatdaddressDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TIATDLoad - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.TIATDLoad(ref pdsContext, out pdstiatdaddress, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TIATDLoad - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiatdaddress); 
    
         if (pdstiatdaddress.ttbltiatdaddress.Count > 0) 
         { 
             result = Tiatdaddress.BuildTiatdaddressFromRow(pdstiatdaddress.ttbltiatdaddress[0]);
         } 
              
          
         return result;
          
      }

      public void CenPOSTokenGenerate(Cenposvars cenposvars)
      {   
         
         var pdscenposvars = new pdscenposvarsDataSet();
            
         DataRow ttblcenposvarsCriteria = pdscenposvars.ttblcenposvars.NewttblcenposvarsRow();
         Cenposvars.UpdateRowFromCenposvars(ref ttblcenposvarsCriteria, cenposvars);
         pdscenposvars.ttblcenposvars.AddttblcenposvarsRow((pdscenposvarsDataSet.ttblcenposvarsRow)ttblcenposvarsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CenPOSTokenGenerate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CenPOSTokenGenerate(ref pdsContext,  pdscenposvars, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CenPOSTokenGenerate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscenposvars);
      }

      public long GetNextSequence(string cSequenceName)
      {   
          
         long iSequence = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetNextSequence - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetNextSequence(ref pdsContext,  cSequenceName, out iSequence, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetNextSequence - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return iSequence;
      
      }

      public long GetCurrentSequence(string cSequenceName)
      {   
          
         long iSequence = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCurrentSequence - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetCurrentSequence(ref pdsContext,  cSequenceName, out iSequence, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCurrentSequence - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return iSequence;
      
      }

      public void CCRecoverCreate(Ccrecoversingle ccrecoversingle)
      {   
         
         var pdsccrecoversingle = new pdsccrecoversingleDataSet();
            
         DataRow ttblccrecoversingleCriteria = pdsccrecoversingle.ttblccrecoversingle.NewttblccrecoversingleRow();
         Ccrecoversingle.UpdateRowFromCcrecoversingle(ref ttblccrecoversingleCriteria, ccrecoversingle);
         pdsccrecoversingle.ttblccrecoversingle.AddttblccrecoversingleRow((pdsccrecoversingleDataSet.ttblccrecoversingleRow)ttblccrecoversingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CCRecoverCreate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CCRecoverCreate(ref pdsContext,  pdsccrecoversingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CCRecoverCreate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccrecoversingle);
      }

      public void CCRecoverDelete()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CCRecoverDelete - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CCRecoverDelete(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CCRecoverDelete - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void CCRecoverCheck()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CCRecoverCheck - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.CCRecoverCheck(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CCRecoverCheck - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Dcaosrecord> DCAOSSearch(string cAdminID)
      {   
         var results = new List<Dcaosrecord>();
         
         var pdsdcaosrecord = new pdsdcaosrecordDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DCAOSSearch - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.DCAOSSearch(ref pdsContext,  cAdminID, out pdsdcaosrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DCAOSSearch - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdcaosrecord); 
    
            foreach (DataRow row in pdsdcaosrecord.ttbldcaosrecord)
            {
                results.Add(Dcaosrecord.BuildDcaosrecordFromRow(row));
            }
            return results;
        
      }

      public Dcaosrecord DCAOSCreate(Dcaosrecord dcaosrecord)
      {   
         var result = new Dcaosrecord();
         
         var pdsdcaosrecord = new pdsdcaosrecordDataSet();
            
         DataRow ttbldcaosrecordCriteria = pdsdcaosrecord.ttbldcaosrecord.NewttbldcaosrecordRow();
         Dcaosrecord.UpdateRowFromDcaosrecord(ref ttbldcaosrecordCriteria, dcaosrecord);
         pdsdcaosrecord.ttbldcaosrecord.AddttbldcaosrecordRow((pdsdcaosrecordDataSet.ttbldcaosrecordRow)ttbldcaosrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DCAOSCreate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.DCAOSCreate(ref pdsContext, ref pdsdcaosrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DCAOSCreate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdcaosrecord); 
    
         if (pdsdcaosrecord.ttbldcaosrecord.Count > 0) 
         { 
             result = Dcaosrecord.BuildDcaosrecordFromRow(pdsdcaosrecord.ttbldcaosrecord[0]);
         } 
              
          
         return result;
          
      }

      public Dcaosrecord DCAOSRetrieve(Dcaosrecord dcaosrecord)
      {   
         var result = new Dcaosrecord();
         
         var pdsdcaosrecord = new pdsdcaosrecordDataSet();
            
         DataRow ttbldcaosrecordCriteria = pdsdcaosrecord.ttbldcaosrecord.NewttbldcaosrecordRow();
         Dcaosrecord.UpdateRowFromDcaosrecord(ref ttbldcaosrecordCriteria, dcaosrecord);
         pdsdcaosrecord.ttbldcaosrecord.AddttbldcaosrecordRow((pdsdcaosrecordDataSet.ttbldcaosrecordRow)ttbldcaosrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DCAOSRetrieve - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.DCAOSRetrieve(ref pdsContext, ref pdsdcaosrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DCAOSRetrieve - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdcaosrecord); 
    
         if (pdsdcaosrecord.ttbldcaosrecord.Count > 0) 
         { 
             result = Dcaosrecord.BuildDcaosrecordFromRow(pdsdcaosrecord.ttbldcaosrecord[0]);
         } 
              
          
         return result;
          
      }

      public Dcaosrecord DCAOSDelete(Dcaosrecord dcaosrecord)
      {   
         var result = new Dcaosrecord();
         
         var pdsdcaosrecord = new pdsdcaosrecordDataSet();
            
         DataRow ttbldcaosrecordCriteria = pdsdcaosrecord.ttbldcaosrecord.NewttbldcaosrecordRow();
         Dcaosrecord.UpdateRowFromDcaosrecord(ref ttbldcaosrecordCriteria, dcaosrecord);
         pdsdcaosrecord.ttbldcaosrecord.AddttbldcaosrecordRow((pdsdcaosrecordDataSet.ttbldcaosrecordRow)ttbldcaosrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DCAOSDelete - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.DCAOSDelete(ref pdsContext, ref pdsdcaosrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DCAOSDelete - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdcaosrecord); 
    
         if (pdsdcaosrecord.ttbldcaosrecord.Count > 0) 
         { 
             result = Dcaosrecord.BuildDcaosrecordFromRow(pdsdcaosrecord.ttbldcaosrecord[0]);
         } 
              
          
         return result;
          
      }

      public Dcaosrecord DCAOSUpdate(Dcaosrecord dcaosrecord)
      {   
         var result = new Dcaosrecord();
         
         var pdsdcaosrecord = new pdsdcaosrecordDataSet();
            
         DataRow ttbldcaosrecordCriteria = pdsdcaosrecord.ttbldcaosrecord.NewttbldcaosrecordRow();
         Dcaosrecord.UpdateRowFromDcaosrecord(ref ttbldcaosrecordCriteria, dcaosrecord);
         pdsdcaosrecord.ttbldcaosrecord.AddttbldcaosrecordRow((pdsdcaosrecordDataSet.ttbldcaosrecordRow)ttbldcaosrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DCAOSUpdate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.DCAOSUpdate(ref pdsContext, ref pdsdcaosrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DCAOSUpdate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdcaosrecord); 
    
         if (pdsdcaosrecord.ttbldcaosrecord.Count > 0) 
         { 
             result = Dcaosrecord.BuildDcaosrecordFromRow(pdsdcaosrecord.ttbldcaosrecord[0]);
         } 
              
          
         return result;
          
      }

      public Webextendrecord WebExtensionCreate(Webextendrecord webextendrecord)
      {   
         var result = new Webextendrecord();
         
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendrecordCriteria = pdswebextendrecord.ttblwebextendrecord.NewttblwebextendrecordRow();
         Webextendrecord.UpdateRowFromWebextendrecord(ref ttblwebextendrecordCriteria, webextendrecord);
         pdswebextendrecord.ttblwebextendrecord.AddttblwebextendrecordRow((pdswebextendrecordDataSet.ttblwebextendrecordRow)ttblwebextendrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionCreate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionCreate(ref pdsContext, ref pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionCreate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendrecord); 
    
         if (pdswebextendrecord.ttblwebextendrecord.Count > 0) 
         { 
             result = Webextendrecord.BuildWebextendrecordFromRow(pdswebextendrecord.ttblwebextendrecord[0]);
         } 
              
          
         return result;
          
      }

      public Webextendrecord GetActiveWebExtension(Webextendcriteria webextendcriteria)
      {   
         var result = new Webextendrecord();
         
         var pdswebextendcriteria = new pdswebextendcriteriaDataSet();
            
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendcriteriaCriteria = pdswebextendcriteria.ttblwebextendcriteria.NewttblwebextendcriteriaRow();
         Webextendcriteria.UpdateRowFromWebextendcriteria(ref ttblwebextendcriteriaCriteria, webextendcriteria);
         pdswebextendcriteria.ttblwebextendcriteria.AddttblwebextendcriteriaRow((pdswebextendcriteriaDataSet.ttblwebextendcriteriaRow)ttblwebextendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetActiveWebExtension - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetActiveWebExtension(ref pdsContext,  pdswebextendcriteria, out pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetActiveWebExtension - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendcriteria); 
    
         if (pdswebextendrecord.ttblwebextendrecord.Count > 0) 
         { 
             result = Webextendrecord.BuildWebextendrecordFromRow(pdswebextendrecord.ttblwebextendrecord[0]);
         } 
              
          
         return result;
          
      }

      public void WebExtensionDelete(IEnumerable<Webextendrecord> webextendrecord)
      {   
         
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         foreach (var obj in webextendrecord)
         {
             DataRow row = pdswebextendrecord.ttblwebextendrecord.NewttblwebextendrecordRow();
             Webextendrecord.UpdateRowFromWebextendrecord(ref row, obj);
             pdswebextendrecord.ttblwebextendrecord.AddttblwebextendrecordRow((pdswebextendrecordDataSet.ttblwebextendrecordRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionDelete - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionDelete(ref pdsContext,  pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionDelete - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendrecord);
      }

      public void WebExtensionUpdate(Webextendrecord webextendrecord)
      {   
         
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendrecordCriteria = pdswebextendrecord.ttblwebextendrecord.NewttblwebextendrecordRow();
         Webextendrecord.UpdateRowFromWebextendrecord(ref ttblwebextendrecordCriteria, webextendrecord);
         pdswebextendrecord.ttblwebextendrecord.AddttblwebextendrecordRow((pdswebextendrecordDataSet.ttblwebextendrecordRow)ttblwebextendrecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionUpdate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionUpdate(ref pdsContext,  pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionUpdate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendrecord);
      }

      public AssharedinquiryGetWebExtensionListResponseAPI GetWebExtensionList(Webextendcriteria webextendcriteria)
      {   
         var result = new AssharedinquiryGetWebExtensionListResponseAPI();
         
         var pdswebextendcriteria = new pdswebextendcriteriaDataSet();
            
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendcriteriaCriteria = pdswebextendcriteria.ttblwebextendcriteria.NewttblwebextendcriteriaRow();
         Webextendcriteria.UpdateRowFromWebextendcriteria(ref ttblwebextendcriteriaCriteria, webextendcriteria);
         pdswebextendcriteria.ttblwebextendcriteria.AddttblwebextendcriteriaRow((pdswebextendcriteriaDataSet.ttblwebextendcriteriaRow)ttblwebextendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetWebExtensionList - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetWebExtensionList(ref pdsContext,  pdswebextendcriteria, out pdswebextendrecord, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetWebExtensionList - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendcriteria); 
    
         foreach (DataRow row in pdswebextendrecord.ttblwebextendrecord)
         {
            result.webextendrecord.Add(Webextendrecord.BuildWebextendrecordFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Webextendrecord WebExtensionRetrieve(Webextendcriteria webextendcriteria)
      {   
         var result = new Webextendrecord();
         
         var pdswebextendcriteria = new pdswebextendcriteriaDataSet();
            
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendcriteriaCriteria = pdswebextendcriteria.ttblwebextendcriteria.NewttblwebextendcriteriaRow();
         Webextendcriteria.UpdateRowFromWebextendcriteria(ref ttblwebextendcriteriaCriteria, webextendcriteria);
         pdswebextendcriteria.ttblwebextendcriteria.AddttblwebextendcriteriaRow((pdswebextendcriteriaDataSet.ttblwebextendcriteriaRow)ttblwebextendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionRetrieve - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionRetrieve(ref pdsContext,  pdswebextendcriteria, out pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionRetrieve - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendcriteria); 
    
         if (pdswebextendrecord.ttblwebextendrecord.Count > 0) 
         { 
             result = Webextendrecord.BuildWebextendrecordFromRow(pdswebextendrecord.ttblwebextendrecord[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Webextendrecord> GetActiveJavaScriptWebExtension(Webextendcriteria webextendcriteria)
      {   
         var results = new List<Webextendrecord>();
         
         var pdswebextendcriteria = new pdswebextendcriteriaDataSet();
            
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendcriteriaCriteria = pdswebextendcriteria.ttblwebextendcriteria.NewttblwebextendcriteriaRow();
         Webextendcriteria.UpdateRowFromWebextendcriteria(ref ttblwebextendcriteriaCriteria, webextendcriteria);
         pdswebextendcriteria.ttblwebextendcriteria.AddttblwebextendcriteriaRow((pdswebextendcriteriaDataSet.ttblwebextendcriteriaRow)ttblwebextendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetActiveJavaScriptWebExtension - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.GetActiveJavaScriptWebExtension(ref pdsContext,  pdswebextendcriteria, out pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetActiveJavaScriptWebExtension - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendcriteria); 
    
            foreach (DataRow row in pdswebextendrecord.ttblwebextendrecord)
            {
                results.Add(Webextendrecord.BuildWebextendrecordFromRow(row));
            }
            return results;
        
      }

      public Webextendrecord WebExtensionCreateRevision(Webextendcriteria webextendcriteria)
      {   
         var result = new Webextendrecord();
         
         var pdswebextendcriteria = new pdswebextendcriteriaDataSet();
            
         var pdswebextendrecord = new pdswebextendrecordDataSet();
            
         DataRow ttblwebextendcriteriaCriteria = pdswebextendcriteria.ttblwebextendcriteria.NewttblwebextendcriteriaRow();
         Webextendcriteria.UpdateRowFromWebextendcriteria(ref ttblwebextendcriteriaCriteria, webextendcriteria);
         pdswebextendcriteria.ttblwebextendcriteria.AddttblwebextendcriteriaRow((pdswebextendcriteriaDataSet.ttblwebextendcriteriaRow)ttblwebextendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionCreateRevision - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionCreateRevision(ref pdsContext,  pdswebextendcriteria, out pdswebextendrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionCreateRevision - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendcriteria); 
    
         if (pdswebextendrecord.ttblwebextendrecord.Count > 0) 
         { 
             result = Webextendrecord.BuildWebextendrecordFromRow(pdswebextendrecord.ttblwebextendrecord[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Webextendupdatestatus> WebExtensionStatusUpdate(IEnumerable<Webextendupdatestatus> webextendupdatestatus)
      {   
         var results = new List<Webextendupdatestatus>();
         
         var pdswebextendupdatestatus = new pdswebextendupdatestatusDataSet();
            
         foreach (var obj in webextendupdatestatus)
         {
             DataRow row = pdswebextendupdatestatus.ttblwebextendupdatestatus.NewttblwebextendupdatestatusRow();
             Webextendupdatestatus.UpdateRowFromWebextendupdatestatus(ref row, obj);
             pdswebextendupdatestatus.ttblwebextendupdatestatus.AddttblwebextendupdatestatusRow((pdswebextendupdatestatusDataSet.ttblwebextendupdatestatusRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WebExtensionStatusUpdate - Assharedinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssharedinquiryproxy = this.proxyAppObject.CreatePO_assharedinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssharedinquiryproxy.WebExtensionStatusUpdate(ref pdsContext, ref pdswebextendupdatestatus, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WebExtensionStatusUpdate - Assharedinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswebextendupdatestatus); 
    
            foreach (DataRow row in pdswebextendupdatestatus.ttblwebextendupdatestatus)
            {
                results.Add(Webextendupdatestatus.BuildWebextendupdatestatusFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  