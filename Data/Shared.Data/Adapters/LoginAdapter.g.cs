//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.PdsUserLogin;
   using Models.Pdschangepassword;
   using Models.Pdcrtsasoofromifs;
   using Models.Complex;

   public partial class LoginAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public LoginAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in LoginAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public LoginLoginResponseAPI Login(UserLogin UserLogin)
      {   
         var result = new LoginLoginResponseAPI();
         
         var pdsUserLogin = new pdsUserLoginDataSet();
            
         DataRow ttblUserLoginCriteria = pdsUserLogin.ttblUserLogin.NewttblUserLoginRow();
         UserLogin.UpdateRowFromUserLogin(ref ttblUserLoginCriteria, UserLogin);
         pdsUserLogin.ttblUserLogin.AddttblUserLoginRow((pdsUserLoginDataSet.ttblUserLoginRow)ttblUserLoginCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("Login - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.Login(ref pdsContext, ref pdsUserLogin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("Login - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsUserLogin); 
    
         foreach (DataRow row in pdsUserLogin.ttblAvailUsers)
         {
            result.availUsers.Add(AvailUsers.BuildAvailUsersFromRow(row));
         }     
         if (pdsUserLogin.ttblUserLogin.Count > 0)
         {
            result.userLogin = UserLogin.BuildUserLoginFromRow(pdsUserLogin.ttblUserLogin[0]);
         }
                    
          
         return result;
          
      }

      public void Logout()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("Logout - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.Logout(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("Logout - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void RenewSession()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RenewSession - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.RenewSession(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RenewSession - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void ClearCoreSession(int iCompanyNumber, string cOperator)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ClearCoreSession - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.ClearCoreSession(ref pdsContext,  iCompanyNumber,  cOperator, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ClearCoreSession - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void ChangePassword(LoginChangePasswordRequestAPI LoginChangePasswordRequestAPI)
      {   
         
         var pdschangepassword = new pdschangepasswordDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblchangepasswordRow = pdschangepassword.ttblchangepassword.NewttblchangepasswordRow();
         Changepassword.UpdateRowFromChangepassword(ref ttblchangepasswordRow, LoginChangePasswordRequestAPI.changepassword);
         pdschangepassword.ttblchangepassword.AddttblchangepasswordRow((pdschangepasswordDataSet.ttblchangepasswordRow)ttblchangepasswordRow);
          
         var  iCompanyNumber = LoginChangePasswordRequestAPI.iCompanyNumber;
            
         
         NLogLoggerP.Trace("ChangePassword - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.ChangePassword(ref pdsContext,  iCompanyNumber,  pdschangepassword, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ChangePassword - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdschangepassword);
      }

      public Crtsasoofromifs CreateSASOOFromIFS(Crtsasoofromifs crtsasoofromifs)
      {   
         var result = new Crtsasoofromifs();
         
         var pdcrtsasoofromifs = new pdcrtsasoofromifsDataSet();
            
         DataRow ttblcrtsasoofromifsCriteria = pdcrtsasoofromifs.ttblcrtsasoofromifs.NewttblcrtsasoofromifsRow();
         Crtsasoofromifs.UpdateRowFromCrtsasoofromifs(ref ttblcrtsasoofromifsCriteria, crtsasoofromifs);
         pdcrtsasoofromifs.ttblcrtsasoofromifs.AddttblcrtsasoofromifsRow((pdcrtsasoofromifsDataSet.ttblcrtsasoofromifsRow)ttblcrtsasoofromifsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateSASOOFromIFS - Login - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poLoginproxy = this.proxyAppObject.CreatePO_loginproxy())
               {
                   this.SetRequiredContextParameters();
                   poLoginproxy.CreateSASOOFromIFS(ref pdsContext, ref pdcrtsasoofromifs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateSASOOFromIFS - Login - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdcrtsasoofromifs); 
    
         if (pdcrtsasoofromifs.ttblcrtsasoofromifs.Count > 0) 
         { 
             result = Crtsasoofromifs.BuildCrtsasoofromifsFromRow(pdcrtsasoofromifs.ttblcrtsasoofromifs[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  