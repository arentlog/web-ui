//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.Shared.Data.Adapters
{
   using com.infor.sxproxy.sharedproxy;
   using com.infor.sxproxy.sharedproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscrbankglfetch;
   using Models.Pdscrbankglsave;
   using Models.Pdscrbankcopy;
   using Models.Pdscrbankclearchkrun;

   public partial class AscrsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private SharedProxyAppObject proxyAppObject;
      
      public AscrsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SharedProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AscrsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Crbankglfetchresults CRBankGLFetch(Crbankglfetchcriteria crbankglfetchcriteria)
      {   
         var result = new Crbankglfetchresults();
         
         var pdscrbankglfetch = new pdscrbankglfetchDataSet();
            
         DataRow ttblcrbankglfetchcriteriaCriteria = pdscrbankglfetch.ttblcrbankglfetchcriteria.NewttblcrbankglfetchcriteriaRow();
         Crbankglfetchcriteria.UpdateRowFromCrbankglfetchcriteria(ref ttblcrbankglfetchcriteriaCriteria, crbankglfetchcriteria);
         pdscrbankglfetch.ttblcrbankglfetchcriteria.AddttblcrbankglfetchcriteriaRow((pdscrbankglfetchDataSet.ttblcrbankglfetchcriteriaRow)ttblcrbankglfetchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRBankGLFetch - Ascrsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrsetupproxy = this.proxyAppObject.CreatePO_ascrsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrsetupproxy.CRBankGLFetch(ref pdsContext, ref pdscrbankglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRBankGLFetch - Ascrsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrbankglfetch); 
    
         if (pdscrbankglfetch.ttblcrbankglfetchresults.Count > 0) 
         { 
             result = Crbankglfetchresults.BuildCrbankglfetchresultsFromRow(pdscrbankglfetch.ttblcrbankglfetchresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Crbankglsave> CRBankGLSave(IEnumerable<Crbankglsave> crbankglsave)
      {   
         var results = new List<Crbankglsave>();
         
         var pdscrbankglsave = new pdscrbankglsaveDataSet();
            
         foreach (var obj in crbankglsave)
         {
             DataRow row = pdscrbankglsave.ttblcrbankglsave.NewttblcrbankglsaveRow();
             Crbankglsave.UpdateRowFromCrbankglsave(ref row, obj);
             pdscrbankglsave.ttblcrbankglsave.AddttblcrbankglsaveRow((pdscrbankglsaveDataSet.ttblcrbankglsaveRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRBankGLSave - Ascrsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrsetupproxy = this.proxyAppObject.CreatePO_ascrsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrsetupproxy.CRBankGLSave(ref pdsContext, ref pdscrbankglsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRBankGLSave - Ascrsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrbankglsave); 
    
            foreach (DataRow row in pdscrbankglsave.ttblcrbankglsave)
            {
                results.Add(Crbankglsave.BuildCrbankglsaveFromRow(row));
            }
            return results;
        
      }

      public string ValidateGLAccount(string cGLAccount)
      {   
          
         string cErrorMessage = string.Empty;
         string cGLAccountDesc = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateGLAccount - Ascrsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrsetupproxy = this.proxyAppObject.CreatePO_ascrsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrsetupproxy.ValidateGLAccount(ref pdsContext,  cGLAccount, out cErrorMessage, out cGLAccountDesc);
               }
            });
         NLogLoggerP.Info("ValidateGLAccount - Ascrsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cGLAccountDesc;
      
      }

      public IEnumerable<Crbankcopy> CRBankCopy(IEnumerable<Crbankcopy> crbankcopy)
      {   
         var results = new List<Crbankcopy>();
         
         var pdscrbankcopy = new pdscrbankcopyDataSet();
            
         foreach (var obj in crbankcopy)
         {
             DataRow row = pdscrbankcopy.ttblcrbankcopy.NewttblcrbankcopyRow();
             Crbankcopy.UpdateRowFromCrbankcopy(ref row, obj);
             pdscrbankcopy.ttblcrbankcopy.AddttblcrbankcopyRow((pdscrbankcopyDataSet.ttblcrbankcopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CRBankCopy - Ascrsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrsetupproxy = this.proxyAppObject.CreatePO_ascrsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrsetupproxy.CRBankCopy(ref pdsContext, ref pdscrbankcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CRBankCopy - Ascrsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrbankcopy); 
    
            foreach (DataRow row in pdscrbankcopy.ttblcrbankcopy)
            {
                results.Add(Crbankcopy.BuildCrbankcopyFromRow(row));
            }
            return results;
        
      }

      public Crbankclearchkrun ClearCheckRun(Crbankclearchkrun crbankclearchkrun)
      {   
         var result = new Crbankclearchkrun();
         
         var pdscrbankclearchkrun = new pdscrbankclearchkrunDataSet();
            
         DataRow ttblcrbankclearchkrunCriteria = pdscrbankclearchkrun.ttblcrbankclearchkrun.NewttblcrbankclearchkrunRow();
         Crbankclearchkrun.UpdateRowFromCrbankclearchkrun(ref ttblcrbankclearchkrunCriteria, crbankclearchkrun);
         pdscrbankclearchkrun.ttblcrbankclearchkrun.AddttblcrbankclearchkrunRow((pdscrbankclearchkrunDataSet.ttblcrbankclearchkrunRow)ttblcrbankclearchkrunCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ClearCheckRun - Ascrsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscrsetupproxy = this.proxyAppObject.CreatePO_ascrsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscrsetupproxy.ClearCheckRun(ref pdsContext, ref pdscrbankclearchkrun, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ClearCheckRun - Ascrsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrbankclearchkrun); 
    
         if (pdscrbankclearchkrun.ttblcrbankclearchkrun.Count > 0) 
         { 
             result = Crbankclearchkrun.BuildCrbankclearchkrunFromRow(pdscrbankclearchkrun.ttblcrbankclearchkrun[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  