//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.CM.Data.Adapters
{
   using com.infor.sxproxy.cmproxy;
   using com.infor.sxproxy.cmproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsprospectcopy;
   using Models.Complex;

   public partial class AscminquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private CMProxyAppObject proxyAppObject;
      
      public AscminquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new CMProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AscminquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Prospectcopy ProspectCopy(Prospectcopy prospectcopy)
      {   
         var result = new Prospectcopy();
         
         var pdsprospectcopy = new pdsprospectcopyDataSet();
            
         DataRow ttblprospectcopyCriteria = pdsprospectcopy.ttblprospectcopy.NewttblprospectcopyRow();
         Prospectcopy.UpdateRowFromProspectcopy(ref ttblprospectcopyCriteria, prospectcopy);
         pdsprospectcopy.ttblprospectcopy.AddttblprospectcopyRow((pdsprospectcopyDataSet.ttblprospectcopyRow)ttblprospectcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ProspectCopy - Ascminquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscminquiryproxy = this.proxyAppObject.CreatePO_ascminquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscminquiryproxy.ProspectCopy(ref pdsContext, ref pdsprospectcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ProspectCopy - Ascminquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprospectcopy); 
    
         if (pdsprospectcopy.ttblprospectcopy.Count > 0) 
         { 
             result = Prospectcopy.BuildProspectcopyFromRow(pdsprospectcopy.ttblprospectcopy[0]);
         } 
              
          
         return result;
          
      }

      public AscminquiryGetProspectUserLabelsResponseAPI GetProspectUserLabels(string cProspectType)
      {   
         var result = new AscminquiryGetProspectUserLabelsResponseAPI();
         
         string cErrorMessage = string.Empty;
         string cUserType1Label = string.Empty;
         string cUserType2Label = string.Empty;
         string cUserCode1Label = string.Empty;
         string cUserCode2Label = string.Empty;
   
         
         NLogLoggerP.Trace("GetProspectUserLabels - Ascminquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAscminquiryproxy = this.proxyAppObject.CreatePO_ascminquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAscminquiryproxy.GetProspectUserLabels(ref pdsContext,  cProspectType, out cErrorMessage, out cUserType1Label, out cUserType2Label, out cUserCode1Label, out cUserCode2Label);
               }
            });
         NLogLoggerP.Info("GetProspectUserLabels - Ascminquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cUserType1Label = cUserType1Label;
         result.cUserType2Label = cUserType2Label;
         result.cUserCode1Label = cUserCode1Label;
         result.cUserCode2Label = cUserCode2Label;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  