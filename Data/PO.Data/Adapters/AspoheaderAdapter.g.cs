//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PO.Data.Adapters
{
   using com.infor.sxproxy.poproxy;
   using com.infor.sxproxy.poproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspoetprintlaunchcriteria;
   using Models.Pdsprintersettings;
   using Models.Pdspoetprint;
   using Models.Pdspoetprintloadcriteria;
   using Models.Pdspoetprintglobals;
   using Models.Pdspoheaderretrieve;
   using Models.Pdspohdr;
   using Models.Pdswlstatus;
   using Models.Pdsmessaging;
   using Models.Pdspoloadtranstypes;
   using Models.Pdspoheaderfinish;
   using Models.Pdspoordercancel;
   using Models.Pdspoordercopy;
   using Models.Pdspovendorcredit;
   using Models.Pdspoimportfile;
   using Models.Pdspoimportdata;
   using Models.Complex;

   public partial class AspoheaderAdapter : AdapterBase<pdsContextDataSet>
   {
      private POProxyAppObject proxyAppObject;
      
      public AspoheaderAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new POProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspoheaderAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void POETPrintLaunch(AspoheaderPOETPrintLaunchRequestAPI AspoheaderPOETPrintLaunchRequestAPI)
      {   
         
         var pdspoetprintlaunchcriteria = new pdspoetprintlaunchcriteriaDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdspoetprint = new pdspoetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOETPrintLaunchRequestAPI.poetprintreportlist)
         {
            DataRow ttblpoetprintreportlistRow = pdspoetprint.ttblpoetprintreportlist.NewttblpoetprintreportlistRow();
            Poetprintreportlist.UpdateRowFromPoetprintreportlist(ref ttblpoetprintreportlistRow, obj);
            pdspoetprint.ttblpoetprintreportlist.AddttblpoetprintreportlistRow((pdspoetprintDataSet.ttblpoetprintreportlistRow)ttblpoetprintreportlistRow);
         }
          
         DataRow ttblpoetprintscreensingleRow = pdspoetprint.ttblpoetprintscreensingle.NewttblpoetprintscreensingleRow();
         Poetprintscreensingle.UpdateRowFromPoetprintscreensingle(ref ttblpoetprintscreensingleRow, AspoheaderPOETPrintLaunchRequestAPI.poetprintscreensingle);
         pdspoetprint.ttblpoetprintscreensingle.AddttblpoetprintscreensingleRow((pdspoetprintDataSet.ttblpoetprintscreensingleRow)ttblpoetprintscreensingleRow);
          
         DataRow ttblpoetprintlaunchcriteriaRow = pdspoetprintlaunchcriteria.ttblpoetprintlaunchcriteria.NewttblpoetprintlaunchcriteriaRow();
         Poetprintlaunchcriteria.UpdateRowFromPoetprintlaunchcriteria(ref ttblpoetprintlaunchcriteriaRow, AspoheaderPOETPrintLaunchRequestAPI.poetprintlaunchcriteria);
         pdspoetprintlaunchcriteria.ttblpoetprintlaunchcriteria.AddttblpoetprintlaunchcriteriaRow((pdspoetprintlaunchcriteriaDataSet.ttblpoetprintlaunchcriteriaRow)ttblpoetprintlaunchcriteriaRow);
          
         foreach (var obj in AspoheaderPOETPrintLaunchRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         
         NLogLoggerP.Trace("POETPrintLaunch - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POETPrintLaunch(ref pdsContext,  pdspoetprintlaunchcriteria,  pdsprintersettings,  pdspoetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETPrintLaunch - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoetprintlaunchcriteria);
      }

      public AspoheaderPOETPrintLoadResponseAPI POETPrintLoad(AspoheaderPOETPrintLoadRequestAPI AspoheaderPOETPrintLoadRequestAPI)
      {   
         var result = new AspoheaderPOETPrintLoadResponseAPI();
         
         var pdspoetprintloadcriteria = new pdspoetprintloadcriteriaDataSet();
            
         var pdspoetprintglobals = new pdspoetprintglobalsDataSet();
            
         var pdspoetprint = new pdspoetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoetprintglobalsRow = pdspoetprintglobals.ttblpoetprintglobals.NewttblpoetprintglobalsRow();
         Poetprintglobals.UpdateRowFromPoetprintglobals(ref ttblpoetprintglobalsRow, AspoheaderPOETPrintLoadRequestAPI.poetprintglobals);
         pdspoetprintglobals.ttblpoetprintglobals.AddttblpoetprintglobalsRow((pdspoetprintglobalsDataSet.ttblpoetprintglobalsRow)ttblpoetprintglobalsRow);
          
         DataRow ttblpoetprintloadcriteriaRow = pdspoetprintloadcriteria.ttblpoetprintloadcriteria.NewttblpoetprintloadcriteriaRow();
         Poetprintloadcriteria.UpdateRowFromPoetprintloadcriteria(ref ttblpoetprintloadcriteriaRow, AspoheaderPOETPrintLoadRequestAPI.poetprintloadcriteria);
         pdspoetprintloadcriteria.ttblpoetprintloadcriteria.AddttblpoetprintloadcriteriaRow((pdspoetprintloadcriteriaDataSet.ttblpoetprintloadcriteriaRow)ttblpoetprintloadcriteriaRow);
          
         
         NLogLoggerP.Trace("POETPrintLoad - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POETPrintLoad(ref pdsContext,  pdspoetprintloadcriteria, ref pdspoetprintglobals, out pdspoetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETPrintLoad - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoetprintloadcriteria); 
    
         foreach (DataRow row in pdspoetprint.ttblpoetprintreportlist)
         {
            result.poetprintreportlist.Add(Poetprintreportlist.BuildPoetprintreportlistFromRow(row));
         }     
         if (pdspoetprint.ttblpoetprintscreensingle.Count > 0)
         {
            result.poetprintscreensingle = Poetprintscreensingle.BuildPoetprintscreensingleFromRow(pdspoetprint.ttblpoetprintscreensingle[0]);
         }
                    
         if (pdspoetprintglobals.ttblpoetprintglobals.Count > 0)
         {
            result.poetprintglobals = Poetprintglobals.BuildPoetprintglobalsFromRow(pdspoetprintglobals.ttblpoetprintglobals[0]);
         }
                    
          
         return result;
          
      }

      public AspoheaderPOETPrintLoadChangeOrderResponseAPI POETPrintLoadChangeOrder(AspoheaderPOETPrintLoadChangeOrderRequestAPI AspoheaderPOETPrintLoadChangeOrderRequestAPI)
      {   
         var result = new AspoheaderPOETPrintLoadChangeOrderResponseAPI();
         
         var pdspoetprintloadcriteria = new pdspoetprintloadcriteriaDataSet();
            
         var pdspoetprintglobals = new pdspoetprintglobalsDataSet();
            
         var pdspoetprint = new pdspoetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOETPrintLoadChangeOrderRequestAPI.poetprintreportlist)
         {
            DataRow ttblpoetprintreportlistRow = pdspoetprint.ttblpoetprintreportlist.NewttblpoetprintreportlistRow();
            Poetprintreportlist.UpdateRowFromPoetprintreportlist(ref ttblpoetprintreportlistRow, obj);
            pdspoetprint.ttblpoetprintreportlist.AddttblpoetprintreportlistRow((pdspoetprintDataSet.ttblpoetprintreportlistRow)ttblpoetprintreportlistRow);
         }
          
         DataRow ttblpoetprintscreensingleRow = pdspoetprint.ttblpoetprintscreensingle.NewttblpoetprintscreensingleRow();
         Poetprintscreensingle.UpdateRowFromPoetprintscreensingle(ref ttblpoetprintscreensingleRow, AspoheaderPOETPrintLoadChangeOrderRequestAPI.poetprintscreensingle);
         pdspoetprint.ttblpoetprintscreensingle.AddttblpoetprintscreensingleRow((pdspoetprintDataSet.ttblpoetprintscreensingleRow)ttblpoetprintscreensingleRow);
          
         DataRow ttblpoetprintglobalsRow = pdspoetprintglobals.ttblpoetprintglobals.NewttblpoetprintglobalsRow();
         Poetprintglobals.UpdateRowFromPoetprintglobals(ref ttblpoetprintglobalsRow, AspoheaderPOETPrintLoadChangeOrderRequestAPI.poetprintglobals);
         pdspoetprintglobals.ttblpoetprintglobals.AddttblpoetprintglobalsRow((pdspoetprintglobalsDataSet.ttblpoetprintglobalsRow)ttblpoetprintglobalsRow);
          
         DataRow ttblpoetprintloadcriteriaRow = pdspoetprintloadcriteria.ttblpoetprintloadcriteria.NewttblpoetprintloadcriteriaRow();
         Poetprintloadcriteria.UpdateRowFromPoetprintloadcriteria(ref ttblpoetprintloadcriteriaRow, AspoheaderPOETPrintLoadChangeOrderRequestAPI.poetprintloadcriteria);
         pdspoetprintloadcriteria.ttblpoetprintloadcriteria.AddttblpoetprintloadcriteriaRow((pdspoetprintloadcriteriaDataSet.ttblpoetprintloadcriteriaRow)ttblpoetprintloadcriteriaRow);
          
         
         NLogLoggerP.Trace("POETPrintLoadChangeOrder - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POETPrintLoadChangeOrder(ref pdsContext,  pdspoetprintloadcriteria, ref pdspoetprintglobals, ref pdspoetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETPrintLoadChangeOrder - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoetprintloadcriteria); 
    
         foreach (DataRow row in pdspoetprint.ttblpoetprintreportlist)
         {
            result.poetprintreportlist.Add(Poetprintreportlist.BuildPoetprintreportlistFromRow(row));
         }     
         if (pdspoetprint.ttblpoetprintscreensingle.Count > 0)
         {
            result.poetprintscreensingle = Poetprintscreensingle.BuildPoetprintscreensingleFromRow(pdspoetprint.ttblpoetprintscreensingle[0]);
         }
                    
         if (pdspoetprintglobals.ttblpoetprintglobals.Count > 0)
         {
            result.poetprintglobals = Poetprintglobals.BuildPoetprintglobalsFromRow(pdspoetprintglobals.ttblpoetprintglobals[0]);
         }
                    
          
         return result;
          
      }

      public Poetprintscreensingle POETPrintValidate(AspoheaderPOETPrintValidateRequestAPI AspoheaderPOETPrintValidateRequestAPI)
      {   
         var result = new Poetprintscreensingle();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdspoetprint = new pdspoetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOETPrintValidateRequestAPI.poetprintreportlist)
         {
            DataRow ttblpoetprintreportlistRow = pdspoetprint.ttblpoetprintreportlist.NewttblpoetprintreportlistRow();
            Poetprintreportlist.UpdateRowFromPoetprintreportlist(ref ttblpoetprintreportlistRow, obj);
            pdspoetprint.ttblpoetprintreportlist.AddttblpoetprintreportlistRow((pdspoetprintDataSet.ttblpoetprintreportlistRow)ttblpoetprintreportlistRow);
         }
          
         DataRow ttblpoetprintscreensingleRow = pdspoetprint.ttblpoetprintscreensingle.NewttblpoetprintscreensingleRow();
         Poetprintscreensingle.UpdateRowFromPoetprintscreensingle(ref ttblpoetprintscreensingleRow, AspoheaderPOETPrintValidateRequestAPI.poetprintscreensingle);
         pdspoetprint.ttblpoetprintscreensingle.AddttblpoetprintscreensingleRow((pdspoetprintDataSet.ttblpoetprintscreensingleRow)ttblpoetprintscreensingleRow);
          
         foreach (var obj in AspoheaderPOETPrintValidateRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  iPoNo = AspoheaderPOETPrintValidateRequestAPI.iPoNo;
            
         var  iPoSuf = AspoheaderPOETPrintValidateRequestAPI.iPoSuf;
            
         
         NLogLoggerP.Trace("POETPrintValidate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POETPrintValidate(ref pdsContext,  iPoNo,  iPoSuf,  pdsprintersettings, ref pdspoetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETPrintValidate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         if (pdspoetprint.ttblpoetprintscreensingle.Count > 0) 
         { 
             result = Poetprintscreensingle.BuildPoetprintscreensingleFromRow(pdspoetprint.ttblpoetprintscreensingle[0]);
         } 
              
          
         return result;
          
      }

      public AspoheaderPOHeaderRetrieveResponseAPI POHeaderRetrieve(Poheaderretrievecriteria poheaderretrievecriteria)
      {   
         var result = new AspoheaderPOHeaderRetrieveResponseAPI();
         
         var pdspoheaderretrieve = new pdspoheaderretrieveDataSet();
            
         var pdspohdr = new pdspohdrDataSet();
            
         var pdswlstatus = new pdswlstatusDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpoheaderretrievecriteriaCriteria = pdspoheaderretrieve.ttblpoheaderretrievecriteria.NewttblpoheaderretrievecriteriaRow();
         Poheaderretrievecriteria.UpdateRowFromPoheaderretrievecriteria(ref ttblpoheaderretrievecriteriaCriteria, poheaderretrievecriteria);
         pdspoheaderretrieve.ttblpoheaderretrievecriteria.AddttblpoheaderretrievecriteriaRow((pdspoheaderretrieveDataSet.ttblpoheaderretrievecriteriaRow)ttblpoheaderretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POHeaderRetrieve - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POHeaderRetrieve(ref pdsContext,  pdspoheaderretrieve, out pdspohdr, out pdswlstatus, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POHeaderRetrieve - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoheaderretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspohdr.ttblpohdr.Count > 0)
         {
            result.pohdr = Pohdr.BuildPohdrFromRow(pdspohdr.ttblpohdr[0]);
         }
                    
         if (pdswlstatus.ttblwlstatus.Count > 0)
         {
            result.wlstatus = Wlstatus.BuildWlstatusFromRow(pdswlstatus.ttblwlstatus[0]);
         }
                    
          
         return result;
          
      }

      public AspoheaderPOLoadBannerWhseResponseAPI POLoadBannerWhse()
      {   
         var result = new AspoheaderPOLoadBannerWhseResponseAPI();
         
         string cWhse = string.Empty;
         bool lWhseSensitive = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLoadBannerWhse - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POLoadBannerWhse(ref pdsContext, out cWhse, out lWhseSensitive, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLoadBannerWhse - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cWhse = cWhse;
         result.lWhseSensitive = lWhseSensitive;
          
         return result;
          
      }

      public IEnumerable<Poloadtranstypes> POLoadTransTypes(bool lCheckSecurity, string cSpecial)
      {   
         var results = new List<Poloadtranstypes>();
         
         var pdspoloadtranstypes = new pdspoloadtranstypesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLoadTransTypes - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POLoadTransTypes(ref pdsContext,  lCheckSecurity,  cSpecial, out pdspoloadtranstypes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLoadTransTypes - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoloadtranstypes); 
    
            foreach (DataRow row in pdspoloadtranstypes.ttblpoloadtranstypes)
            {
                results.Add(Poloadtranstypes.BuildPoloadtranstypesFromRow(row));
            }
            return results;
        
      }

      public AspoheaderPOHeaderCreateResponseAPI POHeaderCreate(Pohdr pohdr)
      {   
         var result = new AspoheaderPOHeaderCreateResponseAPI();
         
         var pdspohdr = new pdspohdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpohdrCriteria = pdspohdr.ttblpohdr.NewttblpohdrRow();
         Pohdr.UpdateRowFromPohdr(ref ttblpohdrCriteria, pohdr);
         pdspohdr.ttblpohdr.AddttblpohdrRow((pdspohdrDataSet.ttblpohdrRow)ttblpohdrCriteria);
            
         int iNewPONo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POHeaderCreate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POHeaderCreate(ref pdsContext,  pdspohdr, out pdsmessaging, out iNewPONo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POHeaderCreate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspohdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.iNewPONo = iNewPONo;
          
         return result;
          
      }

      public AspoheaderPOHeaderFieldLeaveResponseAPI POHeaderFieldLeave(AspoheaderPOHeaderFieldLeaveRequestAPI AspoheaderPOHeaderFieldLeaveRequestAPI)
      {   
         var result = new AspoheaderPOHeaderFieldLeaveResponseAPI();
         
         var pdspohdr = new pdspohdrDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblpohdrRow = pdspohdr.ttblpohdr.NewttblpohdrRow();
         Pohdr.UpdateRowFromPohdr(ref ttblpohdrRow, AspoheaderPOHeaderFieldLeaveRequestAPI.pohdr);
         pdspohdr.ttblpohdr.AddttblpohdrRow((pdspohdrDataSet.ttblpohdrRow)ttblpohdrRow);
          
         var  cField = AspoheaderPOHeaderFieldLeaveRequestAPI.cField;
            
         
         NLogLoggerP.Trace("POHeaderFieldLeave - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POHeaderFieldLeave(ref pdsContext,  cField, ref pdspohdr, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POHeaderFieldLeave - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspohdr); 
    
         if (pdspohdr.ttblpohdr.Count > 0)
         {
            result.pohdr = Pohdr.BuildPohdrFromRow(pdspohdr.ttblpohdr[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public string POHeaderFinish(Poheaderfinishcriteria poheaderfinishcriteria)
      {   
          
         var pdspoheaderfinish = new pdspoheaderfinishDataSet();
            
         DataRow ttblpoheaderfinishcriteriaCriteria = pdspoheaderfinish.ttblpoheaderfinishcriteria.NewttblpoheaderfinishcriteriaRow();
         Poheaderfinishcriteria.UpdateRowFromPoheaderfinishcriteria(ref ttblpoheaderfinishcriteriaCriteria, poheaderfinishcriteria);
         pdspoheaderfinish.ttblpoheaderfinishcriteria.AddttblpoheaderfinishcriteriaRow((pdspoheaderfinishDataSet.ttblpoheaderfinishcriteriaRow)ttblpoheaderfinishcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POHeaderFinish - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POHeaderFinish(ref pdsContext,  pdspoheaderfinish, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POHeaderFinish - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoheaderfinish); 
    
         return cWarningMessage;
      
      }

      public IEnumerable<Messaging> POHeaderUpdate(AspoheaderPOHeaderUpdateRequestAPI AspoheaderPOHeaderUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspohdr = new pdspohdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpohdrRow = pdspohdr.ttblpohdr.NewttblpohdrRow();
         Pohdr.UpdateRowFromPohdr(ref ttblpohdrRow, AspoheaderPOHeaderUpdateRequestAPI.pohdr);
         pdspohdr.ttblpohdr.AddttblpohdrRow((pdspohdrDataSet.ttblpohdrRow)ttblpohdrRow);
          
         var  cType = AspoheaderPOHeaderUpdateRequestAPI.cType;
            
         
         NLogLoggerP.Trace("POHeaderUpdate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POHeaderUpdate(ref pdsContext,  cType,  pdspohdr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POHeaderUpdate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspohdr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public string POOrderCancel(Poordercancel poordercancel)
      {   
          
         var pdspoordercancel = new pdspoordercancelDataSet();
            
         DataRow ttblpoordercancelCriteria = pdspoordercancel.ttblpoordercancel.NewttblpoordercancelRow();
         Poordercancel.UpdateRowFromPoordercancel(ref ttblpoordercancelCriteria, poordercancel);
         pdspoordercancel.ttblpoordercancel.AddttblpoordercancelRow((pdspoordercancelDataSet.ttblpoordercancelRow)ttblpoordercancelCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POOrderCancel - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POOrderCancel(ref pdsContext,  pdspoordercancel, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POOrderCancel - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoordercancel); 
    
         return cWarningMessage;
      
      }

      public Poordercopy POOrderCopyInitiate(int iSecure)
      {   
         var result = new Poordercopy();
         
         var pdspoordercopy = new pdspoordercopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POOrderCopyInitiate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POOrderCopyInitiate(ref pdsContext,  iSecure, out pdspoordercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POOrderCopyInitiate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoordercopy); 
    
         if (pdspoordercopy.ttblpoordercopy.Count > 0) 
         { 
             result = Poordercopy.BuildPoordercopyFromRow(pdspoordercopy.ttblpoordercopy[0]);
         } 
              
          
         return result;
          
      }

      public AspoheaderPOOrderCopyFieldLeaveResponseAPI POOrderCopyFieldLeave(AspoheaderPOOrderCopyFieldLeaveRequestAPI AspoheaderPOOrderCopyFieldLeaveRequestAPI)
      {   
         var result = new AspoheaderPOOrderCopyFieldLeaveResponseAPI();
         
         var pdspoordercopy = new pdspoordercopyDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblpoordercopyRow = pdspoordercopy.ttblpoordercopy.NewttblpoordercopyRow();
         Poordercopy.UpdateRowFromPoordercopy(ref ttblpoordercopyRow, AspoheaderPOOrderCopyFieldLeaveRequestAPI.poordercopy);
         pdspoordercopy.ttblpoordercopy.AddttblpoordercopyRow((pdspoordercopyDataSet.ttblpoordercopyRow)ttblpoordercopyRow);
          
         var  cField = AspoheaderPOOrderCopyFieldLeaveRequestAPI.cField;
            
         
         NLogLoggerP.Trace("POOrderCopyFieldLeave - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POOrderCopyFieldLeave(ref pdsContext,  cField, ref pdspoordercopy, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POOrderCopyFieldLeave - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoordercopy); 
    
         if (pdspoordercopy.ttblpoordercopy.Count > 0)
         {
            result.poordercopy = Poordercopy.BuildPoordercopyFromRow(pdspoordercopy.ttblpoordercopy[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspoheaderPOOrderCopyUpdateResponseAPI POOrderCopyUpdate(Poordercopy poordercopy)
      {   
         var result = new AspoheaderPOOrderCopyUpdateResponseAPI();
         
         var pdspoordercopy = new pdspoordercopyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpoordercopyCriteria = pdspoordercopy.ttblpoordercopy.NewttblpoordercopyRow();
         Poordercopy.UpdateRowFromPoordercopy(ref ttblpoordercopyCriteria, poordercopy);
         pdspoordercopy.ttblpoordercopy.AddttblpoordercopyRow((pdspoordercopyDataSet.ttblpoordercopyRow)ttblpoordercopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POOrderCopyUpdate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POOrderCopyUpdate(ref pdsContext, ref pdspoordercopy, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POOrderCopyUpdate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoordercopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoordercopy.ttblpoordercopy.Count > 0)
         {
            result.poordercopy = Poordercopy.BuildPoordercopyFromRow(pdspoordercopy.ttblpoordercopy[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Povendorcredit> POVendorCreditRetrieve(decimal pvVendno)
      {   
         var results = new List<Povendorcredit>();
         
         var pdspovendorcredit = new pdspovendorcreditDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POVendorCreditRetrieve - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POVendorCreditRetrieve(ref pdsContext,  pvVendno, out pdspovendorcredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POVendorCreditRetrieve - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspovendorcredit); 
    
            foreach (DataRow row in pdspovendorcredit.ttblpovendorcredit)
            {
                results.Add(Povendorcredit.BuildPovendorcreditFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Povendorcredit> POVendorCreditFieldLeave(AspoheaderPOVendorCreditFieldLeaveRequestAPI AspoheaderPOVendorCreditFieldLeaveRequestAPI)
      {   
         var results = new List<Povendorcredit>();
         
         var pdspovendorcredit = new pdspovendorcreditDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOVendorCreditFieldLeaveRequestAPI.povendorcredit)
         {
            DataRow ttblpovendorcreditRow = pdspovendorcredit.ttblpovendorcredit.NewttblpovendorcreditRow();
            Povendorcredit.UpdateRowFromPovendorcredit(ref ttblpovendorcreditRow, obj);
            pdspovendorcredit.ttblpovendorcredit.AddttblpovendorcreditRow((pdspovendorcreditDataSet.ttblpovendorcreditRow)ttblpovendorcreditRow);
         }
          
         var  pvFieldname = AspoheaderPOVendorCreditFieldLeaveRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("POVendorCreditFieldLeave - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POVendorCreditFieldLeave(ref pdsContext,  pvFieldname, ref pdspovendorcredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POVendorCreditFieldLeave - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspovendorcredit); 
    
            foreach (DataRow row in pdspovendorcredit.ttblpovendorcredit)
            {
                results.Add(Povendorcredit.BuildPovendorcreditFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Povendorcredit> POVendorCreditUpdate(IEnumerable<Povendorcredit> povendorcredit)
      {   
         var results = new List<Povendorcredit>();
         
         var pdspovendorcredit = new pdspovendorcreditDataSet();
            
         foreach (var obj in povendorcredit)
         {
             DataRow row = pdspovendorcredit.ttblpovendorcredit.NewttblpovendorcreditRow();
             Povendorcredit.UpdateRowFromPovendorcredit(ref row, obj);
             pdspovendorcredit.ttblpovendorcredit.AddttblpovendorcreditRow((pdspovendorcreditDataSet.ttblpovendorcreditRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POVendorCreditUpdate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POVendorCreditUpdate(ref pdsContext, ref pdspovendorcredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POVendorCreditUpdate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspovendorcredit); 
    
            foreach (DataRow row in pdspovendorcredit.ttblpovendorcredit)
            {
                results.Add(Povendorcredit.BuildPovendorcreditFromRow(row));
            }
            return results;
        
      }

      public void PORemoveSoftLock(int iPONo, int iPOSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORemoveSoftLock - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.PORemoveSoftLock(ref pdsContext,  iPONo,  iPOSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORemoveSoftLock - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AspoheaderPOImportLoadResponseAPI POImportLoad(AspoheaderPOImportLoadRequestAPI AspoheaderPOImportLoadRequestAPI)
      {   
         var result = new AspoheaderPOImportLoadResponseAPI();
         
         var pdspoimportfile = new pdspoimportfileDataSet();
            
         var pdspoimportdata = new pdspoimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOImportLoadRequestAPI.poimportfile)
         {
            DataRow ttblpoimportfileRow = pdspoimportfile.ttblpoimportfile.NewttblpoimportfileRow();
            Poimportfile.UpdateRowFromPoimportfile(ref ttblpoimportfileRow, obj);
            pdspoimportfile.ttblpoimportfile.AddttblpoimportfileRow((pdspoimportfileDataSet.ttblpoimportfileRow)ttblpoimportfileRow);
         }
          
         var  iMaxLines = AspoheaderPOImportLoadRequestAPI.iMaxLines;
            
         
         NLogLoggerP.Trace("POImportLoad - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POImportLoad(ref pdsContext,  iMaxLines,  pdspoimportfile, out pdspoimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POImportLoad - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoimportfile); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspoimportdata.ttblpoimportdata)
         {
            result.poimportdata.Add(Poimportdata.BuildPoimportdataFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> POImportUpdate(AspoheaderPOImportUpdateRequestAPI AspoheaderPOImportUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspoimportdata = new pdspoimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoheaderPOImportUpdateRequestAPI.poimportdata)
         {
            DataRow ttblpoimportdataRow = pdspoimportdata.ttblpoimportdata.NewttblpoimportdataRow();
            Poimportdata.UpdateRowFromPoimportdata(ref ttblpoimportdataRow, obj);
            pdspoimportdata.ttblpoimportdata.AddttblpoimportdataRow((pdspoimportdataDataSet.ttblpoimportdataRow)ttblpoimportdataRow);
         }
          
         var  iOrderNo = AspoheaderPOImportUpdateRequestAPI.iOrderNo;
            
         var  cOrderBreak = AspoheaderPOImportUpdateRequestAPI.cOrderBreak;
            
         
         NLogLoggerP.Trace("POImportUpdate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POImportUpdate(ref pdsContext,  iOrderNo,  cOrderBreak,  pdspoimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POImportUpdate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoimportdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AspoheaderPOImportValidateResponseAPI POImportValidate(IEnumerable<Poimportdata> poimportdata)
      {   
         var result = new AspoheaderPOImportValidateResponseAPI();
         
         var pdspoimportdata = new pdspoimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in poimportdata)
         {
             DataRow row = pdspoimportdata.ttblpoimportdata.NewttblpoimportdataRow();
             Poimportdata.UpdateRowFromPoimportdata(ref row, obj);
             pdspoimportdata.ttblpoimportdata.AddttblpoimportdataRow((pdspoimportdataDataSet.ttblpoimportdataRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POImportValidate - Aspoheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoheaderproxy = this.proxyAppObject.CreatePO_aspoheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoheaderproxy.POImportValidate(ref pdsContext, ref pdspoimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POImportValidate - Aspoheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoimportdata); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspoimportdata.ttblpoimportdata)
         {
            result.poimportdata.Add(Poimportdata.BuildPoimportdataFromRow(row));
         }     
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  