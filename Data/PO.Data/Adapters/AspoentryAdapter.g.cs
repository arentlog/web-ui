//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PO.Data.Adapters
{
   using com.infor.sxproxy.poproxy;
   using com.infor.sxproxy.poproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspoeidrilldown;
   using Models.Pdspoeidetailfinish;
   using Models.Pdspoeivaproportion;
   using Models.Pdspoeidetailaddons;
   using Models.Pdspoeilineaddons;
   using Models.Pdspoeilineadd;
   using Models.Pdsmessaging;
   using Models.Pdspononstockresults;
   using Models.Pdspoeiaddonsva;
   using Models.Pdspoeireceiverno;
   using Models.Pdspoeilinedetail;
   using Models.Pdsicentryserials;
   using Models.Pdspoeidetailtotal;
   using Models.Pdsicentrylots;
   using Models.Pdsporrarlineprogbuy;
   using Models.Pdsporrarlineprogbuycriteria;
   using Models.Pdsporrarvendcredit;
   using Models.Pdsloadpotally;
   using Models.Pdspotallycomponent;
   using Models.Pdspobundles;
   using Models.Pdspoline;
   using Models.Pdsloadpoea;
   using Models.Pdsupdatepoea;
   using Models.Pdspoebtdeletebatch;
   using Models.Pdspoebtgetdata;
   using Models.Pdspoebtqueueputawayreport;
   using Models.Pdsprintersettings;
   using Models.Pdspoebtupdatedata;
   using Models.Pdsporrarreptlist;
   using Models.Pdsporrarrepttotals;
   using Models.Pdsporrarreptdelete;
   using Models.Pdsporrarreptadjmerge;
   using Models.Pdsporrarreptupdate;
   using Models.Pdsporrarreptvendchg;
   using Models.Pdsporrarreptaddnew;
   using Models.Pdsporrarreptrefreshdoc;
   using Models.Pdsporrarreptheader;
   using Models.Pdsporrarreptcombinq;
   using Models.Pdsporrarreptadjretrieve;
   using Models.Pdsporrarreptadjcalc;
   using Models.Pdsporrarreptadjdaysinit;
   using Models.Pdsporrarreptadjdaysupdt;
   using Models.Pdsporrarreptnewreptinit;
   using Models.Pdsporrarreptnewreptrun;
   using Models.Pdsporrarreptmergeinit;
   using Models.Pdsporrarreptmergerun;
   using Models.Pdspoblanket;
   using Models.Pdspoblanketcheckshipfmno;
   using Models.Pdspoblanketupdate;
   using Models.Pdspoblanketdelete;
   using Models.Pdspoblanketrelease;
   using Models.Pdspoblanketbanner;
   using Models.Pdspoblanketheader;
   using Models.Pdspoblanketlines;
   using Models.Pdspoblanketupdbyrelease;
   using Models.Pdsporrarlinedspl;
   using Models.Pdsporrarlinetotals;
   using Models.Pdsporrarlineadd;
   using Models.Pdsporrarlinechange;
   using Models.Pdsporrarlineaccept;
   using Models.Pdsporrarlineextend;
   using Models.Pdsporrarlineqtybreak;
   using Models.Pdsporrarlinemsg;
   using Models.Pdsporrarreptfullrefreshrun;
   using Models.Pdspoeilist;
   using Models.Pdspoeicancelwork;
   using Models.Pdspoeifullreceipt;
   using Models.Pdsporeceiptreport;
   using Models.Pdspoeifinalinit;
   using Models.Pdspoeifinalupdate;
   using Models.Pdspoeidetailheader;
   using Models.Pdspoeilinesubsuper;
   using Models.Pdspoeilineextend;
   using Models.Pdspoeilinereprice;
   using Models.Complex;

   public partial class AspoentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private POProxyAppObject proxyAppObject;
      
      public AspoentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new POProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspoentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AspoentryPOEIDetailFinishResponseAPI POEIDetailFinish(Poeidrilldown poeidrilldown)
      {   
         var result = new AspoentryPOEIDetailFinishResponseAPI();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeidetailfinish = new pdspoeidetailfinishDataSet();
            
         var pdspoeivaproportion = new pdspoeivaproportionDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIDetailFinish - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIDetailFinish(ref pdsContext,  pdspoeidrilldown, out pdspoeidetailfinish, out pdspoeivaproportion, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEIDetailFinish - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         if (pdspoeidetailfinish.ttblpoeidetailfinish.Count > 0)
         {
            result.poeidetailfinish = Poeidetailfinish.BuildPoeidetailfinishFromRow(pdspoeidetailfinish.ttblpoeidetailfinish[0]);
         }
                    
         if (pdspoeivaproportion.ttblpoeivaproportion.Count > 0)
         {
            result.poeivaproportion = Poeivaproportion.BuildPoeivaproportionFromRow(pdspoeivaproportion.ttblpoeivaproportion[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Poeidetailaddons POEIInitializeAddons(Poeidrilldown poeidrilldown)
      {   
         var result = new Poeidetailaddons();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeidetailaddons = new pdspoeidetailaddonsDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeAddons - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeAddons(ref pdsContext,  pdspoeidrilldown, out pdspoeidetailaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeAddons - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         if (pdspoeidetailaddons.ttblpoeidetailaddons.Count > 0) 
         { 
             result = Poeidetailaddons.BuildPoeidetailaddonsFromRow(pdspoeidetailaddons.ttblpoeidetailaddons[0]);
         } 
              
          
         return result;
          
      }

      public Poeidetailaddons POEIAddonLeaveField(AspoentryPOEIAddonLeaveFieldRequestAPI AspoentryPOEIAddonLeaveFieldRequestAPI)
      {   
         var result = new Poeidetailaddons();
         
         var pdspoeidetailaddons = new pdspoeidetailaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeidetailaddonsRow = pdspoeidetailaddons.ttblpoeidetailaddons.NewttblpoeidetailaddonsRow();
         Poeidetailaddons.UpdateRowFromPoeidetailaddons(ref ttblpoeidetailaddonsRow, AspoentryPOEIAddonLeaveFieldRequestAPI.poeidetailaddons);
         pdspoeidetailaddons.ttblpoeidetailaddons.AddttblpoeidetailaddonsRow((pdspoeidetailaddonsDataSet.ttblpoeidetailaddonsRow)ttblpoeidetailaddonsRow);
          
         var  pvFieldname = AspoentryPOEIAddonLeaveFieldRequestAPI.pvFieldname;
            
         var  pvAddonno = AspoentryPOEIAddonLeaveFieldRequestAPI.pvAddonno;
            
         
         NLogLoggerP.Trace("POEIAddonLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIAddonLeaveField(ref pdsContext,  pvFieldname,  pvAddonno, ref pdspoeidetailaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIAddonLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidetailaddons); 
    
         if (pdspoeidetailaddons.ttblpoeidetailaddons.Count > 0) 
         { 
             result = Poeidetailaddons.BuildPoeidetailaddonsFromRow(pdspoeidetailaddons.ttblpoeidetailaddons[0]);
         } 
              
          
         return result;
          
      }

      public void POEIUpdateAddons(Poeidetailaddons poeidetailaddons)
      {   
         
         var pdspoeidetailaddons = new pdspoeidetailaddonsDataSet();
            
         DataRow ttblpoeidetailaddonsCriteria = pdspoeidetailaddons.ttblpoeidetailaddons.NewttblpoeidetailaddonsRow();
         Poeidetailaddons.UpdateRowFromPoeidetailaddons(ref ttblpoeidetailaddonsCriteria, poeidetailaddons);
         pdspoeidetailaddons.ttblpoeidetailaddons.AddttblpoeidetailaddonsRow((pdspoeidetailaddonsDataSet.ttblpoeidetailaddonsRow)ttblpoeidetailaddonsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIUpdateAddons - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIUpdateAddons(ref pdsContext,  pdspoeidetailaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIUpdateAddons - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidetailaddons);
      }

      public Poeilineaddons POEIInitializeLineAddons(Poeilineaddons poeilineaddons)
      {   
         var result = new Poeilineaddons();
         
         var pdspoeilineaddons = new pdspoeilineaddonsDataSet();
            
         DataRow ttblpoeilineaddonsCriteria = pdspoeilineaddons.ttblpoeilineaddons.NewttblpoeilineaddonsRow();
         Poeilineaddons.UpdateRowFromPoeilineaddons(ref ttblpoeilineaddonsCriteria, poeilineaddons);
         pdspoeilineaddons.ttblpoeilineaddons.AddttblpoeilineaddonsRow((pdspoeilineaddonsDataSet.ttblpoeilineaddonsRow)ttblpoeilineaddonsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeLineAddons - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeLineAddons(ref pdsContext, ref pdspoeilineaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeLineAddons - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineaddons); 
    
         if (pdspoeilineaddons.ttblpoeilineaddons.Count > 0) 
         { 
             result = Poeilineaddons.BuildPoeilineaddonsFromRow(pdspoeilineaddons.ttblpoeilineaddons[0]);
         } 
              
          
         return result;
          
      }

      public Poeilineaddons POEILineAddonLeaveField(AspoentryPOEILineAddonLeaveFieldRequestAPI AspoentryPOEILineAddonLeaveFieldRequestAPI)
      {   
         var result = new Poeilineaddons();
         
         var pdspoeilineaddons = new pdspoeilineaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeilineaddonsRow = pdspoeilineaddons.ttblpoeilineaddons.NewttblpoeilineaddonsRow();
         Poeilineaddons.UpdateRowFromPoeilineaddons(ref ttblpoeilineaddonsRow, AspoentryPOEILineAddonLeaveFieldRequestAPI.poeilineaddons);
         pdspoeilineaddons.ttblpoeilineaddons.AddttblpoeilineaddonsRow((pdspoeilineaddonsDataSet.ttblpoeilineaddonsRow)ttblpoeilineaddonsRow);
          
         var  pvFieldname = AspoentryPOEILineAddonLeaveFieldRequestAPI.pvFieldname;
            
         var  pvAddonno = AspoentryPOEILineAddonLeaveFieldRequestAPI.pvAddonno;
            
         
         NLogLoggerP.Trace("POEILineAddonLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineAddonLeaveField(ref pdsContext,  pvFieldname,  pvAddonno, ref pdspoeilineaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineAddonLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineaddons); 
    
         if (pdspoeilineaddons.ttblpoeilineaddons.Count > 0) 
         { 
             result = Poeilineaddons.BuildPoeilineaddonsFromRow(pdspoeilineaddons.ttblpoeilineaddons[0]);
         } 
              
          
         return result;
          
      }

      public void POEIUpdateLineAddons(Poeilineaddons poeilineaddons)
      {   
         
         var pdspoeilineaddons = new pdspoeilineaddonsDataSet();
            
         DataRow ttblpoeilineaddonsCriteria = pdspoeilineaddons.ttblpoeilineaddons.NewttblpoeilineaddonsRow();
         Poeilineaddons.UpdateRowFromPoeilineaddons(ref ttblpoeilineaddonsCriteria, poeilineaddons);
         pdspoeilineaddons.ttblpoeilineaddons.AddttblpoeilineaddonsRow((pdspoeilineaddonsDataSet.ttblpoeilineaddonsRow)ttblpoeilineaddonsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIUpdateLineAddons - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIUpdateLineAddons(ref pdsContext,  pdspoeilineaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIUpdateLineAddons - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineaddons);
      }

      public Poeilineadd POEILineAddInitialize(Poeidrilldown poeidrilldown)
      {   
         var result = new Poeilineadd();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeilineadd = new pdspoeilineaddDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineAddInitialize - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineAddInitialize(ref pdsContext,  pdspoeidrilldown, out pdspoeilineadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineAddInitialize - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         if (pdspoeilineadd.ttblpoeilineadd.Count > 0) 
         { 
             result = Poeilineadd.BuildPoeilineaddFromRow(pdspoeilineadd.ttblpoeilineadd[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> POEILineAddNewItem(Poeilineadd poeilineadd)
      {   
         var results = new List<Messaging>();
         
         var pdspoeilineadd = new pdspoeilineaddDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpoeilineaddCriteria = pdspoeilineadd.ttblpoeilineadd.NewttblpoeilineaddRow();
         Poeilineadd.UpdateRowFromPoeilineadd(ref ttblpoeilineaddCriteria, poeilineadd);
         pdspoeilineadd.ttblpoeilineadd.AddttblpoeilineaddRow((pdspoeilineaddDataSet.ttblpoeilineaddRow)ttblpoeilineaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineAddNewItem - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineAddNewItem(ref pdsContext,  pdspoeilineadd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineAddNewItem - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineadd); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AspoentryPOEILineAddLeaveFieldResponseAPI POEILineAddLeaveField(AspoentryPOEILineAddLeaveFieldRequestAPI AspoentryPOEILineAddLeaveFieldRequestAPI)
      {   
         var result = new AspoentryPOEILineAddLeaveFieldResponseAPI();
         
         var pdspoeilineadd = new pdspoeilineaddDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         var pdspononstockresults = new pdspononstockresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeilineaddRow = pdspoeilineadd.ttblpoeilineadd.NewttblpoeilineaddRow();
         Poeilineadd.UpdateRowFromPoeilineadd(ref ttblpoeilineaddRow, AspoentryPOEILineAddLeaveFieldRequestAPI.poeilineadd);
         pdspoeilineadd.ttblpoeilineadd.AddttblpoeilineaddRow((pdspoeilineaddDataSet.ttblpoeilineaddRow)ttblpoeilineaddRow);
          
         var  pvFieldname = AspoentryPOEILineAddLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("POEILineAddLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineAddLeaveField(ref pdsContext,  pvFieldname, ref pdspoeilineadd, out pdsmessaging, out pdspononstockresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineAddLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineadd); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoeilineadd.ttblpoeilineadd.Count > 0)
         {
            result.poeilineadd = Poeilineadd.BuildPoeilineaddFromRow(pdspoeilineadd.ttblpoeilineadd[0]);
         }
                    
         if (pdspononstockresults.ttblpononstockresults.Count > 0)
         {
            result.pononstockresults = Pononstockresults.BuildPononstockresultsFromRow(pdspononstockresults.ttblpononstockresults[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPOEIInitializeAddonsVAResponseAPI POEIInitializeAddonsVA(int iPoNo, int iPoSuf)
      {   
         var result = new AspoentryPOEIInitializeAddonsVAResponseAPI();
         
         var pdspoeiaddonsva = new pdspoeiaddonsvaDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeAddonsVA - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeAddonsVA(ref pdsContext,  iPoNo,  iPoSuf, out pdspoeiaddonsva, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeAddonsVA - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeiaddonsva); 
    
         if (pdspoeiaddonsva.ttblpoeiaddonvaheader.Count > 0)
         {
            result.poeiaddonvaheader = Poeiaddonvaheader.BuildPoeiaddonvaheaderFromRow(pdspoeiaddonsva.ttblpoeiaddonvaheader[0]);
         }
                    
         foreach (DataRow row in pdspoeiaddonsva.ttblpoeiaddonvaline)
         {
            result.poeiaddonvaline.Add(Poeiaddonvaline.BuildPoeiaddonvalineFromRow(row));
         }     
          
         return result;
          
      }

      public void POEIUpdateAddonsVA(AspoentryPOEIUpdateAddonsVARequestAPI AspoentryPOEIUpdateAddonsVARequestAPI)
      {   
         
         var pdspoeiaddonsva = new pdspoeiaddonsvaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeiaddonvaheaderRow = pdspoeiaddonsva.ttblpoeiaddonvaheader.NewttblpoeiaddonvaheaderRow();
         Poeiaddonvaheader.UpdateRowFromPoeiaddonvaheader(ref ttblpoeiaddonvaheaderRow, AspoentryPOEIUpdateAddonsVARequestAPI.poeiaddonvaheader);
         pdspoeiaddonsva.ttblpoeiaddonvaheader.AddttblpoeiaddonvaheaderRow((pdspoeiaddonsvaDataSet.ttblpoeiaddonvaheaderRow)ttblpoeiaddonvaheaderRow);
          
         foreach (var obj in AspoentryPOEIUpdateAddonsVARequestAPI.poeiaddonvaline)
         {
            DataRow ttblpoeiaddonvalineRow = pdspoeiaddonsva.ttblpoeiaddonvaline.NewttblpoeiaddonvalineRow();
            Poeiaddonvaline.UpdateRowFromPoeiaddonvaline(ref ttblpoeiaddonvalineRow, obj);
            pdspoeiaddonsva.ttblpoeiaddonvaline.AddttblpoeiaddonvalineRow((pdspoeiaddonsvaDataSet.ttblpoeiaddonvalineRow)ttblpoeiaddonvalineRow);
         }
          
         
         NLogLoggerP.Trace("POEIUpdateAddonsVA - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIUpdateAddonsVA(ref pdsContext,  pdspoeiaddonsva, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIUpdateAddonsVA - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeiaddonsva);
      }

      public string POEIInitializeVaSurplus(Poeidrilldown poeidrilldown)
      {   
          
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string pvLinenolist = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeVaSurplus - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeVaSurplus(ref pdsContext,  pdspoeidrilldown, out pvLinenolist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeVaSurplus - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         return pvLinenolist;
      
      }

      public Poeireceiverno POEIInitializeReceiverNo(Poeidrilldown poeidrilldown)
      {   
         var result = new Poeireceiverno();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeireceiverno = new pdspoeireceivernoDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeReceiverNo - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeReceiverNo(ref pdsContext,  pdspoeidrilldown, out pdspoeireceiverno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeReceiverNo - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         if (pdspoeireceiverno.ttblpoeireceiverno.Count > 0) 
         { 
             result = Poeireceiverno.BuildPoeireceivernoFromRow(pdspoeireceiverno.ttblpoeireceiverno[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOEIReceiverLeaveFieldResponseAPI POEIReceiverLeaveField(AspoentryPOEIReceiverLeaveFieldRequestAPI AspoentryPOEIReceiverLeaveFieldRequestAPI)
      {   
         var result = new AspoentryPOEIReceiverLeaveFieldResponseAPI();
         
         var pdspoeireceiverno = new pdspoeireceivernoDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblpoeireceivernoRow = pdspoeireceiverno.ttblpoeireceiverno.NewttblpoeireceivernoRow();
         Poeireceiverno.UpdateRowFromPoeireceiverno(ref ttblpoeireceivernoRow, AspoentryPOEIReceiverLeaveFieldRequestAPI.poeireceiverno);
         pdspoeireceiverno.ttblpoeireceiverno.AddttblpoeireceivernoRow((pdspoeireceivernoDataSet.ttblpoeireceivernoRow)ttblpoeireceivernoRow);
          
         var  cFieldname = AspoentryPOEIReceiverLeaveFieldRequestAPI.cFieldname;
            
         
         NLogLoggerP.Trace("POEIReceiverLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIReceiverLeaveField(ref pdsContext,  cFieldname, ref pdspoeireceiverno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEIReceiverLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeireceiverno); 
    
         if (pdspoeireceiverno.ttblpoeireceiverno.Count > 0)
         {
            result.poeireceiverno = Poeireceiverno.BuildPoeireceivernoFromRow(pdspoeireceiverno.ttblpoeireceiverno[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void POEIUpdateReceiverNo(Poeireceiverno poeireceiverno)
      {   
         
         var pdspoeireceiverno = new pdspoeireceivernoDataSet();
            
         DataRow ttblpoeireceivernoCriteria = pdspoeireceiverno.ttblpoeireceiverno.NewttblpoeireceivernoRow();
         Poeireceiverno.UpdateRowFromPoeireceiverno(ref ttblpoeireceivernoCriteria, poeireceiverno);
         pdspoeireceiverno.ttblpoeireceiverno.AddttblpoeireceivernoRow((pdspoeireceivernoDataSet.ttblpoeireceivernoRow)ttblpoeireceivernoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIUpdateReceiverNo - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIUpdateReceiverNo(ref pdsContext,  pdspoeireceiverno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIUpdateReceiverNo - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeireceiverno);
      }

      public AspoentryPOEILineBeforeSerialResponseAPI POEILineBeforeSerial(Poeilinedetail poeilinedetail)
      {   
         var result = new AspoentryPOEILineBeforeSerialResponseAPI();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         DataRow ttblpoeilinedetailCriteria = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailCriteria, poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineBeforeSerial - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineBeforeSerial(ref pdsContext,  pdspoeilinedetail, out pdsicentryserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineBeforeSerial - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOEILineUpdateSerialResponseAPI POEILineUpdateSerial(AspoentryPOEILineUpdateSerialRequestAPI AspoentryPOEILineUpdateSerialRequestAPI)
      {   
         var result = new AspoentryPOEILineUpdateSerialResponseAPI();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdspoeidetailtotal = new pdspoeidetailtotalDataSet();
            
         bool lQtyChgFl = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AspoentryPOEILineUpdateSerialRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AspoentryPOEILineUpdateSerialRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         DataRow ttblpoeilinedetailRow = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailRow, AspoentryPOEILineUpdateSerialRequestAPI.poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailRow);
          
         
         NLogLoggerP.Trace("POEILineUpdateSerial - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineUpdateSerial(ref pdsContext, ref pdspoeilinedetail,  pdsicentryserials, out lQtyChgFl, out pdspoeidetailtotal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineUpdateSerial - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdspoeidetailtotal.ttblpoeidetailtotal.Count > 0)
         {
            result.poeidetailtotal = Poeidetailtotal.BuildPoeidetailtotalFromRow(pdspoeidetailtotal.ttblpoeidetailtotal[0]);
         }
                    
         if (pdspoeilinedetail.ttblpoeilinedetail.Count > 0)
         {
            result.poeilinedetail = Poeilinedetail.BuildPoeilinedetailFromRow(pdspoeilinedetail.ttblpoeilinedetail[0]);
         }
                    
         result.lQtyChgFl = lQtyChgFl;
          
         return result;
          
      }

      public AspoentryPOEILineBeforeLotResponseAPI POEILineBeforeLot(Poeilinedetail poeilinedetail)
      {   
         var result = new AspoentryPOEILineBeforeLotResponseAPI();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         DataRow ttblpoeilinedetailCriteria = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailCriteria, poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineBeforeLot - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineBeforeLot(ref pdsContext,  pdspoeilinedetail, out pdsicentrylots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineBeforeLot - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOEILineUpdateLotResponseAPI POEILineUpdateLot(AspoentryPOEILineUpdateLotRequestAPI AspoentryPOEILineUpdateLotRequestAPI)
      {   
         var result = new AspoentryPOEILineUpdateLotResponseAPI();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdspoeidetailtotal = new pdspoeidetailtotalDataSet();
            
         bool lQtyChgFl = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AspoentryPOEILineUpdateLotRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AspoentryPOEILineUpdateLotRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         DataRow ttblpoeilinedetailRow = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailRow, AspoentryPOEILineUpdateLotRequestAPI.poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailRow);
          
         
         NLogLoggerP.Trace("POEILineUpdateLot - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineUpdateLot(ref pdsContext, ref pdspoeilinedetail,  pdsicentrylots, out lQtyChgFl, out pdspoeidetailtotal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineUpdateLot - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdspoeidetailtotal.ttblpoeidetailtotal.Count > 0)
         {
            result.poeidetailtotal = Poeidetailtotal.BuildPoeidetailtotalFromRow(pdspoeidetailtotal.ttblpoeidetailtotal[0]);
         }
                    
         if (pdspoeilinedetail.ttblpoeilinedetail.Count > 0)
         {
            result.poeilinedetail = Poeilinedetail.BuildPoeilinedetailFromRow(pdspoeilinedetail.ttblpoeilinedetail[0]);
         }
                    
         result.lQtyChgFl = lQtyChgFl;
          
         return result;
          
      }

      public void POEILeaveTrackNo(int iTrackNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILeaveTrackNo - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILeaveTrackNo(ref pdsContext,  iTrackNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILeaveTrackNo - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AspoentryPORRARLineProgBuyAddWhseResponseAPI PORRARLineProgBuyAddWhse(AspoentryPORRARLineProgBuyAddWhseRequestAPI AspoentryPORRARLineProgBuyAddWhseRequestAPI)
      {   
         var result = new AspoentryPORRARLineProgBuyAddWhseResponseAPI();
         
         var pdsporrarlineprogbuy = new pdsporrarlineprogbuyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarlineprogbuyRow = pdsporrarlineprogbuy.ttblporrarlineprogbuy.NewttblporrarlineprogbuyRow();
         Porrarlineprogbuy.UpdateRowFromPorrarlineprogbuy(ref ttblporrarlineprogbuyRow, AspoentryPORRARLineProgBuyAddWhseRequestAPI.porrarlineprogbuy);
         pdsporrarlineprogbuy.ttblporrarlineprogbuy.AddttblporrarlineprogbuyRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuyRow)ttblporrarlineprogbuyRow);
          
         foreach (var obj in AspoentryPORRARLineProgBuyAddWhseRequestAPI.porrarlineprogbuywhses)
         {
            DataRow ttblporrarlineprogbuywhsesRow = pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.NewttblporrarlineprogbuywhsesRow();
            Porrarlineprogbuywhses.UpdateRowFromPorrarlineprogbuywhses(ref ttblporrarlineprogbuywhsesRow, obj);
            pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.AddttblporrarlineprogbuywhsesRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuywhsesRow)ttblporrarlineprogbuywhsesRow);
         }
          
         var  cNewWhse = AspoentryPORRARLineProgBuyAddWhseRequestAPI.cNewWhse;
            
         
         NLogLoggerP.Trace("PORRARLineProgBuyAddWhse - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineProgBuyAddWhse(ref pdsContext,  cNewWhse, ref pdsporrarlineprogbuy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineProgBuyAddWhse - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineprogbuy); 
    
         if (pdsporrarlineprogbuy.ttblporrarlineprogbuy.Count > 0)
         {
            result.porrarlineprogbuy = Porrarlineprogbuy.BuildPorrarlineprogbuyFromRow(pdsporrarlineprogbuy.ttblporrarlineprogbuy[0]);
         }
                    
         foreach (DataRow row in pdsporrarlineprogbuy.ttblporrarlineprogbuywhses)
         {
            result.porrarlineprogbuywhses.Add(Porrarlineprogbuywhses.BuildPorrarlineprogbuywhsesFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPORRARLineProgBuyChgWhseQtyResponseAPI PORRARLineProgBuyChgWhseQty(AspoentryPORRARLineProgBuyChgWhseQtyRequestAPI AspoentryPORRARLineProgBuyChgWhseQtyRequestAPI)
      {   
         var result = new AspoentryPORRARLineProgBuyChgWhseQtyResponseAPI();
         
         var pdsporrarlineprogbuy = new pdsporrarlineprogbuyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarlineprogbuyRow = pdsporrarlineprogbuy.ttblporrarlineprogbuy.NewttblporrarlineprogbuyRow();
         Porrarlineprogbuy.UpdateRowFromPorrarlineprogbuy(ref ttblporrarlineprogbuyRow, AspoentryPORRARLineProgBuyChgWhseQtyRequestAPI.porrarlineprogbuy);
         pdsporrarlineprogbuy.ttblporrarlineprogbuy.AddttblporrarlineprogbuyRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuyRow)ttblporrarlineprogbuyRow);
          
         foreach (var obj in AspoentryPORRARLineProgBuyChgWhseQtyRequestAPI.porrarlineprogbuywhses)
         {
            DataRow ttblporrarlineprogbuywhsesRow = pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.NewttblporrarlineprogbuywhsesRow();
            Porrarlineprogbuywhses.UpdateRowFromPorrarlineprogbuywhses(ref ttblporrarlineprogbuywhsesRow, obj);
            pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.AddttblporrarlineprogbuywhsesRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuywhsesRow)ttblporrarlineprogbuywhsesRow);
         }
          
         var  cWhse = AspoentryPORRARLineProgBuyChgWhseQtyRequestAPI.cWhse;
            
         
         NLogLoggerP.Trace("PORRARLineProgBuyChgWhseQty - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineProgBuyChgWhseQty(ref pdsContext,  cWhse, ref pdsporrarlineprogbuy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineProgBuyChgWhseQty - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineprogbuy); 
    
         if (pdsporrarlineprogbuy.ttblporrarlineprogbuy.Count > 0)
         {
            result.porrarlineprogbuy = Porrarlineprogbuy.BuildPorrarlineprogbuyFromRow(pdsporrarlineprogbuy.ttblporrarlineprogbuy[0]);
         }
                    
         foreach (DataRow row in pdsporrarlineprogbuy.ttblporrarlineprogbuywhses)
         {
            result.porrarlineprogbuywhses.Add(Porrarlineprogbuywhses.BuildPorrarlineprogbuywhsesFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPORRARLineProgBuyDeleteWhseResponseAPI PORRARLineProgBuyDeleteWhse(AspoentryPORRARLineProgBuyDeleteWhseRequestAPI AspoentryPORRARLineProgBuyDeleteWhseRequestAPI)
      {   
         var result = new AspoentryPORRARLineProgBuyDeleteWhseResponseAPI();
         
         var pdsporrarlineprogbuy = new pdsporrarlineprogbuyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarlineprogbuyRow = pdsporrarlineprogbuy.ttblporrarlineprogbuy.NewttblporrarlineprogbuyRow();
         Porrarlineprogbuy.UpdateRowFromPorrarlineprogbuy(ref ttblporrarlineprogbuyRow, AspoentryPORRARLineProgBuyDeleteWhseRequestAPI.porrarlineprogbuy);
         pdsporrarlineprogbuy.ttblporrarlineprogbuy.AddttblporrarlineprogbuyRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuyRow)ttblporrarlineprogbuyRow);
          
         foreach (var obj in AspoentryPORRARLineProgBuyDeleteWhseRequestAPI.porrarlineprogbuywhses)
         {
            DataRow ttblporrarlineprogbuywhsesRow = pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.NewttblporrarlineprogbuywhsesRow();
            Porrarlineprogbuywhses.UpdateRowFromPorrarlineprogbuywhses(ref ttblporrarlineprogbuywhsesRow, obj);
            pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.AddttblporrarlineprogbuywhsesRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuywhsesRow)ttblporrarlineprogbuywhsesRow);
         }
          
         var  cDeleteWhse = AspoentryPORRARLineProgBuyDeleteWhseRequestAPI.cDeleteWhse;
            
         
         NLogLoggerP.Trace("PORRARLineProgBuyDeleteWhse - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineProgBuyDeleteWhse(ref pdsContext,  cDeleteWhse, ref pdsporrarlineprogbuy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineProgBuyDeleteWhse - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineprogbuy); 
    
         if (pdsporrarlineprogbuy.ttblporrarlineprogbuy.Count > 0)
         {
            result.porrarlineprogbuy = Porrarlineprogbuy.BuildPorrarlineprogbuyFromRow(pdsporrarlineprogbuy.ttblporrarlineprogbuy[0]);
         }
                    
         foreach (DataRow row in pdsporrarlineprogbuy.ttblporrarlineprogbuywhses)
         {
            result.porrarlineprogbuywhses.Add(Porrarlineprogbuywhses.BuildPorrarlineprogbuywhsesFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPORRARLineProgBuyInitializeResponseAPI PORRARLineProgBuyInitialize(Porrarlineprogbuycriteria porrarlineprogbuycriteria)
      {   
         var result = new AspoentryPORRARLineProgBuyInitializeResponseAPI();
         
         var pdsporrarlineprogbuycriteria = new pdsporrarlineprogbuycriteriaDataSet();
            
         var pdsporrarlineprogbuy = new pdsporrarlineprogbuyDataSet();
            
         DataRow ttblporrarlineprogbuycriteriaCriteria = pdsporrarlineprogbuycriteria.ttblporrarlineprogbuycriteria.NewttblporrarlineprogbuycriteriaRow();
         Porrarlineprogbuycriteria.UpdateRowFromPorrarlineprogbuycriteria(ref ttblporrarlineprogbuycriteriaCriteria, porrarlineprogbuycriteria);
         pdsporrarlineprogbuycriteria.ttblporrarlineprogbuycriteria.AddttblporrarlineprogbuycriteriaRow((pdsporrarlineprogbuycriteriaDataSet.ttblporrarlineprogbuycriteriaRow)ttblporrarlineprogbuycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineProgBuyInitialize - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineProgBuyInitialize(ref pdsContext,  pdsporrarlineprogbuycriteria, out pdsporrarlineprogbuy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineProgBuyInitialize - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineprogbuycriteria); 
    
         if (pdsporrarlineprogbuy.ttblporrarlineprogbuy.Count > 0)
         {
            result.porrarlineprogbuy = Porrarlineprogbuy.BuildPorrarlineprogbuyFromRow(pdsporrarlineprogbuy.ttblporrarlineprogbuy[0]);
         }
                    
         foreach (DataRow row in pdsporrarlineprogbuy.ttblporrarlineprogbuywhses)
         {
            result.porrarlineprogbuywhses.Add(Porrarlineprogbuywhses.BuildPorrarlineprogbuywhsesFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPORRARLineProgBuySubmitResponseAPI PORRARLineProgBuySubmit(AspoentryPORRARLineProgBuySubmitRequestAPI AspoentryPORRARLineProgBuySubmitRequestAPI)
      {   
         var result = new AspoentryPORRARLineProgBuySubmitResponseAPI();
         
         var pdsporrarlineprogbuy = new pdsporrarlineprogbuyDataSet();
            
         decimal dQtyOrd = 0;
         bool lRedisplayLineItem = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarlineprogbuyRow = pdsporrarlineprogbuy.ttblporrarlineprogbuy.NewttblporrarlineprogbuyRow();
         Porrarlineprogbuy.UpdateRowFromPorrarlineprogbuy(ref ttblporrarlineprogbuyRow, AspoentryPORRARLineProgBuySubmitRequestAPI.porrarlineprogbuy);
         pdsporrarlineprogbuy.ttblporrarlineprogbuy.AddttblporrarlineprogbuyRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuyRow)ttblporrarlineprogbuyRow);
          
         foreach (var obj in AspoentryPORRARLineProgBuySubmitRequestAPI.porrarlineprogbuywhses)
         {
            DataRow ttblporrarlineprogbuywhsesRow = pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.NewttblporrarlineprogbuywhsesRow();
            Porrarlineprogbuywhses.UpdateRowFromPorrarlineprogbuywhses(ref ttblporrarlineprogbuywhsesRow, obj);
            pdsporrarlineprogbuy.ttblporrarlineprogbuywhses.AddttblporrarlineprogbuywhsesRow((pdsporrarlineprogbuyDataSet.ttblporrarlineprogbuywhsesRow)ttblporrarlineprogbuywhsesRow);
         }
          
         var  lAdjustFlag = AspoentryPORRARLineProgBuySubmitRequestAPI.lAdjustFlag;
            
         
         NLogLoggerP.Trace("PORRARLineProgBuySubmit - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineProgBuySubmit(ref pdsContext,  lAdjustFlag,  pdsporrarlineprogbuy, out dQtyOrd, out lRedisplayLineItem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineProgBuySubmit - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineprogbuy); 
    
         result.dQtyOrd = dQtyOrd;
         result.lRedisplayLineItem = lRedisplayLineItem;
          
         return result;
          
      }

      public IEnumerable<Porrarvendcredit> PORRARVendorCreditRetrieve(decimal dVendorNo)
      {   
         var results = new List<Porrarvendcredit>();
         
         var pdsporrarvendcredit = new pdsporrarvendcreditDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARVendorCreditRetrieve - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARVendorCreditRetrieve(ref pdsContext,  dVendorNo, out pdsporrarvendcredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARVendorCreditRetrieve - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarvendcredit); 
    
            foreach (DataRow row in pdsporrarvendcredit.ttblporrarvendcredit)
            {
                results.Add(Porrarvendcredit.BuildPorrarvendcreditFromRow(row));
            }
            return results;
        
      }

      public void PORRARVendorCreditUpdate(AspoentryPORRARVendorCreditUpdateRequestAPI AspoentryPORRARVendorCreditUpdateRequestAPI)
      {   
         
         var pdsporrarvendcredit = new pdsporrarvendcreditDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARVendorCreditUpdateRequestAPI.porrarvendcredit)
         {
            DataRow ttblporrarvendcreditRow = pdsporrarvendcredit.ttblporrarvendcredit.NewttblporrarvendcreditRow();
            Porrarvendcredit.UpdateRowFromPorrarvendcredit(ref ttblporrarvendcreditRow, obj);
            pdsporrarvendcredit.ttblporrarvendcredit.AddttblporrarvendcreditRow((pdsporrarvendcreditDataSet.ttblporrarvendcreditRow)ttblporrarvendcreditRow);
         }
          
         var  dVendorNo = AspoentryPORRARVendorCreditUpdateRequestAPI.dVendorNo;
            
         
         NLogLoggerP.Trace("PORRARVendorCreditUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARVendorCreditUpdate(ref pdsContext,  dVendorNo,  pdsporrarvendcredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARVendorCreditUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarvendcredit);
      }

      public AspoentryPOTallyLeaveFieldResponseAPI POTallyLeaveField(AspoentryPOTallyLeaveFieldRequestAPI AspoentryPOTallyLeaveFieldRequestAPI)
      {   
         var result = new AspoentryPOTallyLeaveFieldResponseAPI();
         
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyLeaveFieldRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         foreach (var obj in AspoentryPOTallyLeaveFieldRequestAPI.loadpotallyresults)
         {
            DataRow ttblloadpotallyresultsRow = pdsloadpotally.ttblloadpotallyresults.NewttblloadpotallyresultsRow();
            Loadpotallyresults.UpdateRowFromLoadpotallyresults(ref ttblloadpotallyresultsRow, obj);
            pdsloadpotally.ttblloadpotallyresults.AddttblloadpotallyresultsRow((pdsloadpotallyDataSet.ttblloadpotallyresultsRow)ttblloadpotallyresultsRow);
         }
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyLeaveFieldRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         var  cField = AspoentryPOTallyLeaveFieldRequestAPI.cField;
            
         
         NLogLoggerP.Trace("POTallyLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyLeaveField(ref pdsContext,  cField, ref pdsloadpotally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpotally); 
    
         foreach (DataRow row in pdsloadpotally.ttblloadpotallyresults)
         {
            result.loadpotallyresults.Add(Loadpotallyresults.BuildLoadpotallyresultsFromRow(row));
         }     
         if (pdsloadpotally.ttblloadpotallysingle.Count > 0)
         {
            result.loadpotallysingle = Loadpotallysingle.BuildLoadpotallysingleFromRow(pdsloadpotally.ttblloadpotallysingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPOTallyCalcNewMixResponseAPI POTallyCalcNewMix(AspoentryPOTallyCalcNewMixRequestAPI AspoentryPOTallyCalcNewMixRequestAPI)
      {   
         var result = new AspoentryPOTallyCalcNewMixResponseAPI();
         
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyCalcNewMixRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         foreach (var obj in AspoentryPOTallyCalcNewMixRequestAPI.loadpotallyresults)
         {
            DataRow ttblloadpotallyresultsRow = pdsloadpotally.ttblloadpotallyresults.NewttblloadpotallyresultsRow();
            Loadpotallyresults.UpdateRowFromLoadpotallyresults(ref ttblloadpotallyresultsRow, obj);
            pdsloadpotally.ttblloadpotallyresults.AddttblloadpotallyresultsRow((pdsloadpotallyDataSet.ttblloadpotallyresultsRow)ttblloadpotallyresultsRow);
         }
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyCalcNewMixRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         
         NLogLoggerP.Trace("POTallyCalcNewMix - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyCalcNewMix(ref pdsContext, ref pdsloadpotally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyCalcNewMix - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpotally); 
    
         foreach (DataRow row in pdsloadpotally.ttblloadpotallyresults)
         {
            result.loadpotallyresults.Add(Loadpotallyresults.BuildLoadpotallyresultsFromRow(row));
         }     
         if (pdsloadpotally.ttblloadpotallysingle.Count > 0)
         {
            result.loadpotallysingle = Loadpotallysingle.BuildLoadpotallysingleFromRow(pdsloadpotally.ttblloadpotallysingle[0]);
         }
                    
          
         return result;
          
      }

      public Loadpotallysingle POTallyDeleteComponent(AspoentryPOTallyDeleteComponentRequestAPI AspoentryPOTallyDeleteComponentRequestAPI)
      {   
         var result = new Loadpotallysingle();
         
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyDeleteComponentRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         foreach (var obj in AspoentryPOTallyDeleteComponentRequestAPI.loadpotallyresults)
         {
            DataRow ttblloadpotallyresultsRow = pdsloadpotally.ttblloadpotallyresults.NewttblloadpotallyresultsRow();
            Loadpotallyresults.UpdateRowFromLoadpotallyresults(ref ttblloadpotallyresultsRow, obj);
            pdsloadpotally.ttblloadpotallyresults.AddttblloadpotallyresultsRow((pdsloadpotallyDataSet.ttblloadpotallyresultsRow)ttblloadpotallyresultsRow);
         }
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyDeleteComponentRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         
         NLogLoggerP.Trace("POTallyDeleteComponent - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyDeleteComponent(ref pdsContext, ref pdsloadpotally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyDeleteComponent - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpotally); 
    
         if (pdsloadpotally.ttblloadpotallysingle.Count > 0) 
         { 
             result = Loadpotallysingle.BuildLoadpotallysingleFromRow(pdsloadpotally.ttblloadpotallysingle[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOTallyAddChangeComponentResponseAPI POTallyAddChangeComponent(AspoentryPOTallyAddChangeComponentRequestAPI AspoentryPOTallyAddChangeComponentRequestAPI)
      {   
         var result = new AspoentryPOTallyAddChangeComponentResponseAPI();
         
         var pdspotallycomponent = new pdspotallycomponentDataSet();
            
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyAddChangeComponentRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         foreach (var obj in AspoentryPOTallyAddChangeComponentRequestAPI.loadpotallyresults)
         {
            DataRow ttblloadpotallyresultsRow = pdsloadpotally.ttblloadpotallyresults.NewttblloadpotallyresultsRow();
            Loadpotallyresults.UpdateRowFromLoadpotallyresults(ref ttblloadpotallyresultsRow, obj);
            pdsloadpotally.ttblloadpotallyresults.AddttblloadpotallyresultsRow((pdsloadpotallyDataSet.ttblloadpotallyresultsRow)ttblloadpotallyresultsRow);
         }
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyAddChangeComponentRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         DataRow ttblpotallycomponentRow = pdspotallycomponent.ttblpotallycomponent.NewttblpotallycomponentRow();
         Potallycomponent.UpdateRowFromPotallycomponent(ref ttblpotallycomponentRow, AspoentryPOTallyAddChangeComponentRequestAPI.potallycomponent);
         pdspotallycomponent.ttblpotallycomponent.AddttblpotallycomponentRow((pdspotallycomponentDataSet.ttblpotallycomponentRow)ttblpotallycomponentRow);
          
         
         NLogLoggerP.Trace("POTallyAddChangeComponent - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyAddChangeComponent(ref pdsContext, ref pdspotallycomponent, ref pdsloadpotally, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyAddChangeComponent - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspotallycomponent); 
    
         foreach (DataRow row in pdsloadpotally.ttblloadpotallyresults)
         {
            result.loadpotallyresults.Add(Loadpotallyresults.BuildLoadpotallyresultsFromRow(row));
         }     
         if (pdsloadpotally.ttblloadpotallysingle.Count > 0)
         {
            result.loadpotallysingle = Loadpotallysingle.BuildLoadpotallysingleFromRow(pdsloadpotally.ttblloadpotallysingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspotallycomponent.ttblpotallycomponent.Count > 0)
         {
            result.potallycomponent = Potallycomponent.BuildPotallycomponentFromRow(pdspotallycomponent.ttblpotallycomponent[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPOTallyCompLeaveProdResponseAPI POTallyCompLeaveProd(AspoentryPOTallyCompLeaveProdRequestAPI AspoentryPOTallyCompLeaveProdRequestAPI)
      {   
         var result = new AspoentryPOTallyCompLeaveProdResponseAPI();
         
         var pdspotallycomponent = new pdspotallycomponentDataSet();
            
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyCompLeaveProdRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyCompLeaveProdRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         DataRow ttblpotallycomponentRow = pdspotallycomponent.ttblpotallycomponent.NewttblpotallycomponentRow();
         Potallycomponent.UpdateRowFromPotallycomponent(ref ttblpotallycomponentRow, AspoentryPOTallyCompLeaveProdRequestAPI.potallycomponent);
         pdspotallycomponent.ttblpotallycomponent.AddttblpotallycomponentRow((pdspotallycomponentDataSet.ttblpotallycomponentRow)ttblpotallycomponentRow);
          
         
         NLogLoggerP.Trace("POTallyCompLeaveProd - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyCompLeaveProd(ref pdsContext, ref pdspotallycomponent, ref pdsloadpotally, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyCompLeaveProd - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspotallycomponent); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspotallycomponent.ttblpotallycomponent.Count > 0)
         {
            result.potallycomponent = Potallycomponent.BuildPotallycomponentFromRow(pdspotallycomponent.ttblpotallycomponent[0]);
         }
                    
          
         return result;
          
      }

      public Loadpotallycriteria POTallyUpdate(AspoentryPOTallyUpdateRequestAPI AspoentryPOTallyUpdateRequestAPI)
      {   
         var result = new Loadpotallycriteria();
         
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadpotallycriteriaRow = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaRow, AspoentryPOTallyUpdateRequestAPI.loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaRow);
          
         foreach (var obj in AspoentryPOTallyUpdateRequestAPI.loadpotallyresults)
         {
            DataRow ttblloadpotallyresultsRow = pdsloadpotally.ttblloadpotallyresults.NewttblloadpotallyresultsRow();
            Loadpotallyresults.UpdateRowFromLoadpotallyresults(ref ttblloadpotallyresultsRow, obj);
            pdsloadpotally.ttblloadpotallyresults.AddttblloadpotallyresultsRow((pdsloadpotallyDataSet.ttblloadpotallyresultsRow)ttblloadpotallyresultsRow);
         }
          
         DataRow ttblloadpotallysingleRow = pdsloadpotally.ttblloadpotallysingle.NewttblloadpotallysingleRow();
         Loadpotallysingle.UpdateRowFromLoadpotallysingle(ref ttblloadpotallysingleRow, AspoentryPOTallyUpdateRequestAPI.loadpotallysingle);
         pdsloadpotally.ttblloadpotallysingle.AddttblloadpotallysingleRow((pdsloadpotallyDataSet.ttblloadpotallysingleRow)ttblloadpotallysingleRow);
          
         
         NLogLoggerP.Trace("POTallyUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POTallyUpdate(ref pdsContext, ref pdsloadpotally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POTallyUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpotally); 
    
         if (pdsloadpotally.ttblloadpotallycriteria.Count > 0) 
         { 
             result = Loadpotallycriteria.BuildLoadpotallycriteriaFromRow(pdsloadpotally.ttblloadpotallycriteria[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOBundlesDeleteResponseAPI POBundlesDelete(AspoentryPOBundlesDeleteRequestAPI AspoentryPOBundlesDeleteRequestAPI)
      {   
         var result = new AspoentryPOBundlesDeleteResponseAPI();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOBundlesDeleteRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOBundlesDeleteRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         var  cBundleID = AspoentryPOBundlesDeleteRequestAPI.cBundleID;
            
         
         NLogLoggerP.Trace("POBundlesDelete - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POBundlesDelete(ref pdsContext,  cBundleID, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundlesDelete - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescontrol.Count > 0)
         {
            result.pobundlescontrol = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdspobundles.ttblpobundlesresults)
         {
            result.pobundlesresults.Add(Pobundlesresults.BuildPobundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOBundlesAddResponseAPI POBundlesAdd(AspoentryPOBundlesAddRequestAPI AspoentryPOBundlesAddRequestAPI)
      {   
         var result = new AspoentryPOBundlesAddResponseAPI();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOBundlesAddRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOBundlesAddRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         var  cBundleID = AspoentryPOBundlesAddRequestAPI.cBundleID;
            
         
         NLogLoggerP.Trace("POBundlesAdd - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POBundlesAdd(ref pdsContext,  cBundleID, ref pdspobundles, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundlesAdd - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspobundles.ttblpobundlescontrol.Count > 0)
         {
            result.pobundlescontrol = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdspobundles.ttblpobundlesresults)
         {
            result.pobundlesresults.Add(Pobundlesresults.BuildPobundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOBundleIDLoadResponseAPI POBundleIDLoad(AspoentryPOBundleIDLoadRequestAPI AspoentryPOBundleIDLoadRequestAPI)
      {   
         var result = new AspoentryPOBundleIDLoadResponseAPI();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOBundleIDLoadRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOBundleIDLoadRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         var  cBundleID = AspoentryPOBundleIDLoadRequestAPI.cBundleID;
            
         
         NLogLoggerP.Trace("POBundleIDLoad - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POBundleIDLoad(ref pdsContext,  cBundleID, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundleIDLoad - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescontrol.Count > 0)
         {
            result.pobundlescontrol = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdspobundles.ttblpobundlesresults)
         {
            result.pobundlesresults.Add(Pobundlesresults.BuildPobundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOBundlesAfterDetailResponseAPI POBundlesAfterDetail(AspoentryPOBundlesAfterDetailRequestAPI AspoentryPOBundlesAfterDetailRequestAPI)
      {   
         var result = new AspoentryPOBundlesAfterDetailResponseAPI();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOBundlesAfterDetailRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOBundlesAfterDetailRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         
         NLogLoggerP.Trace("POBundlesAfterDetail - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POBundlesAfterDetail(ref pdsContext, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundlesAfterDetail - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescontrol.Count > 0)
         {
            result.pobundlescontrol = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdspobundles.ttblpobundlesresults)
         {
            result.pobundlesresults.Add(Pobundlesresults.BuildPobundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Pobundlescontrol POBundlesCalcAdjust(AspoentryPOBundlesCalcAdjustRequestAPI AspoentryPOBundlesCalcAdjustRequestAPI)
      {   
         var result = new Pobundlescontrol();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOBundlesCalcAdjustRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOBundlesCalcAdjustRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         
         NLogLoggerP.Trace("POBundlesCalcAdjust - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POBundlesCalcAdjust(ref pdsContext, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundlesCalcAdjust - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescontrol.Count > 0) 
         { 
             result = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         } 
              
          
         return result;
          
      }

      public Pobundlescriteria POEIBundlesDone(AspoentryPOEIBundlesDoneRequestAPI AspoentryPOEIBundlesDoneRequestAPI)
      {   
         var result = new Pobundlescriteria();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpobundlescontrolRow = pdspobundles.ttblpobundlescontrol.NewttblpobundlescontrolRow();
         Pobundlescontrol.UpdateRowFromPobundlescontrol(ref ttblpobundlescontrolRow, AspoentryPOEIBundlesDoneRequestAPI.pobundlescontrol);
         pdspobundles.ttblpobundlescontrol.AddttblpobundlescontrolRow((pdspobundlesDataSet.ttblpobundlescontrolRow)ttblpobundlescontrolRow);
          
         DataRow ttblpobundlescriteriaRow = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaRow, AspoentryPOEIBundlesDoneRequestAPI.pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaRow);
          
         
         NLogLoggerP.Trace("POEIBundlesDone - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIBundlesDone(ref pdsContext, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIBundlesDone - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescriteria.Count > 0) 
         { 
             result = Pobundlescriteria.BuildPobundlescriteriaFromRow(pdspobundles.ttblpobundlescriteria[0]);
         } 
              
          
         return result;
          
      }

      public Icentryserialscriteria POETLineBeforeSerial(AspoentryPOETLineBeforeSerialRequestAPI AspoentryPOETLineBeforeSerialRequestAPI)
      {   
         var result = new Icentryserialscriteria();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspoentryPOETLineBeforeSerialRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         var  iPoNo = AspoentryPOETLineBeforeSerialRequestAPI.iPoNo;
            
         var  iPoSuf = AspoentryPOETLineBeforeSerialRequestAPI.iPoSuf;
            
         
         NLogLoggerP.Trace("POETLineBeforeSerial - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POETLineBeforeSerial(ref pdsContext,  iPoNo,  iPoSuf,  pdspoline, out pdsicentryserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETLineBeforeSerial - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0) 
         { 
             result = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         } 
              
          
         return result;
          
      }

      public Icentrylotscriteria POETLineBeforeLot(AspoentryPOETLineBeforeLotRequestAPI AspoentryPOETLineBeforeLotRequestAPI)
      {   
         var result = new Icentrylotscriteria();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspoentryPOETLineBeforeLotRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         var  iPoNo = AspoentryPOETLineBeforeLotRequestAPI.iPoNo;
            
         var  iPoSuf = AspoentryPOETLineBeforeLotRequestAPI.iPoSuf;
            
         
         NLogLoggerP.Trace("POETLineBeforeLot - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POETLineBeforeLot(ref pdsContext,  iPoNo,  iPoSuf,  pdspoline, out pdsicentrylots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POETLineBeforeLot - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0) 
         { 
             result = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOEARetrieveResponseAPI POEARetrieve(Loadpoeacriteria loadpoeacriteria)
      {   
         var result = new AspoentryPOEARetrieveResponseAPI();
         
         var pdsloadpoea = new pdsloadpoeaDataSet();
            
         DataRow ttblloadpoeacriteriaCriteria = pdsloadpoea.ttblloadpoeacriteria.NewttblloadpoeacriteriaRow();
         Loadpoeacriteria.UpdateRowFromLoadpoeacriteria(ref ttblloadpoeacriteriaCriteria, loadpoeacriteria);
         pdsloadpoea.ttblloadpoeacriteria.AddttblloadpoeacriteriaRow((pdsloadpoeaDataSet.ttblloadpoeacriteriaRow)ttblloadpoeacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("POEARetrieve - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEARetrieve(ref pdsContext, ref pdsloadpoea, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("POEARetrieve - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoea); 
    
         foreach (DataRow row in pdsloadpoea.ttblloadpoearesults)
         {
            result.loadpoearesults.Add(Loadpoearesults.BuildLoadpoearesultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Messaging> POEAUpdt(IEnumerable<Updatepoea> updatepoea)
      {   
         var results = new List<Messaging>();
         
         var pdsupdatepoea = new pdsupdatepoeaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in updatepoea)
         {
             DataRow row = pdsupdatepoea.ttblupdatepoea.NewttblupdatepoeaRow();
             Updatepoea.UpdateRowFromUpdatepoea(ref row, obj);
             pdsupdatepoea.ttblupdatepoea.AddttblupdatepoeaRow((pdsupdatepoeaDataSet.ttblupdatepoeaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEAUpdt - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEAUpdt(ref pdsContext,  pdsupdatepoea, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEAUpdt - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsupdatepoea); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void POEBTDeleteBatch(Poebtdeletebatch poebtdeletebatch)
      {   
         
         var pdspoebtdeletebatch = new pdspoebtdeletebatchDataSet();
            
         DataRow ttblpoebtdeletebatchCriteria = pdspoebtdeletebatch.ttblpoebtdeletebatch.NewttblpoebtdeletebatchRow();
         Poebtdeletebatch.UpdateRowFromPoebtdeletebatch(ref ttblpoebtdeletebatchCriteria, poebtdeletebatch);
         pdspoebtdeletebatch.ttblpoebtdeletebatch.AddttblpoebtdeletebatchRow((pdspoebtdeletebatchDataSet.ttblpoebtdeletebatchRow)ttblpoebtdeletebatchCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEBTDeleteBatch - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEBTDeleteBatch(ref pdsContext,  pdspoebtdeletebatch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEBTDeleteBatch - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoebtdeletebatch);
      }

      public IEnumerable<Poebtgetdataresults> POEBTGetData(Poebtgetdatacriteria poebtgetdatacriteria)
      {   
         var results = new List<Poebtgetdataresults>();
         
         var pdspoebtgetdata = new pdspoebtgetdataDataSet();
            
         DataRow ttblpoebtgetdatacriteriaCriteria = pdspoebtgetdata.ttblpoebtgetdatacriteria.NewttblpoebtgetdatacriteriaRow();
         Poebtgetdatacriteria.UpdateRowFromPoebtgetdatacriteria(ref ttblpoebtgetdatacriteriaCriteria, poebtgetdatacriteria);
         pdspoebtgetdata.ttblpoebtgetdatacriteria.AddttblpoebtgetdatacriteriaRow((pdspoebtgetdataDataSet.ttblpoebtgetdatacriteriaRow)ttblpoebtgetdatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEBTGetData - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEBTGetData(ref pdsContext, ref pdspoebtgetdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEBTGetData - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoebtgetdata); 
    
            foreach (DataRow row in pdspoebtgetdata.ttblpoebtgetdataresults)
            {
                results.Add(Poebtgetdataresults.BuildPoebtgetdataresultsFromRow(row));
            }
            return results;
        
      }

      public void POEBTQueuePutAwayReport(AspoentryPOEBTQueuePutAwayReportRequestAPI AspoentryPOEBTQueuePutAwayReportRequestAPI)
      {   
         
         var pdspoebtqueueputawayreport = new pdspoebtqueueputawayreportDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPOEBTQueuePutAwayReportRequestAPI.poebtporiicriteriadetail)
         {
            DataRow ttblpoebtporiicriteriadetailRow = pdspoebtqueueputawayreport.ttblpoebtporiicriteriadetail.NewttblpoebtporiicriteriadetailRow();
            Poebtporiicriteriadetail.UpdateRowFromPoebtporiicriteriadetail(ref ttblpoebtporiicriteriadetailRow, obj);
            pdspoebtqueueputawayreport.ttblpoebtporiicriteriadetail.AddttblpoebtporiicriteriadetailRow((pdspoebtqueueputawayreportDataSet.ttblpoebtporiicriteriadetailRow)ttblpoebtporiicriteriadetailRow);
         }
          
         DataRow ttblpoebtporiicriteriaheaderRow = pdspoebtqueueputawayreport.ttblpoebtporiicriteriaheader.NewttblpoebtporiicriteriaheaderRow();
         Poebtporiicriteriaheader.UpdateRowFromPoebtporiicriteriaheader(ref ttblpoebtporiicriteriaheaderRow, AspoentryPOEBTQueuePutAwayReportRequestAPI.poebtporiicriteriaheader);
         pdspoebtqueueputawayreport.ttblpoebtporiicriteriaheader.AddttblpoebtporiicriteriaheaderRow((pdspoebtqueueputawayreportDataSet.ttblpoebtporiicriteriaheaderRow)ttblpoebtporiicriteriaheaderRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspoentryPOEBTQueuePutAwayReportRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("POEBTQueuePutAwayReport - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEBTQueuePutAwayReport(ref pdsContext,  pdspoebtqueueputawayreport,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEBTQueuePutAwayReport - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoebtqueueputawayreport);
      }

      public void POEBTUpdateData(Poebtupdatedata poebtupdatedata)
      {   
         
         var pdspoebtupdatedata = new pdspoebtupdatedataDataSet();
            
         DataRow ttblpoebtupdatedataCriteria = pdspoebtupdatedata.ttblpoebtupdatedata.NewttblpoebtupdatedataRow();
         Poebtupdatedata.UpdateRowFromPoebtupdatedata(ref ttblpoebtupdatedataCriteria, poebtupdatedata);
         pdspoebtupdatedata.ttblpoebtupdatedata.AddttblpoebtupdatedataRow((pdspoebtupdatedataDataSet.ttblpoebtupdatedataRow)ttblpoebtupdatedataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEBTUpdateData - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEBTUpdateData(ref pdsContext,  pdspoebtupdatedata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEBTUpdateData - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoebtupdatedata);
      }

      public AspoentryPORRARReportListResponseAPI PORRARReportList(Porrarreptlistcriteria porrarreptlistcriteria)
      {   
         var result = new AspoentryPORRARReportListResponseAPI();
         
         var pdsporrarreptlist = new pdsporrarreptlistDataSet();
            
         var pdsporrarrepttotals = new pdsporrarrepttotalsDataSet();
            
         DataRow ttblporrarreptlistcriteriaCriteria = pdsporrarreptlist.ttblporrarreptlistcriteria.NewttblporrarreptlistcriteriaRow();
         Porrarreptlistcriteria.UpdateRowFromPorrarreptlistcriteria(ref ttblporrarreptlistcriteriaCriteria, porrarreptlistcriteria);
         pdsporrarreptlist.ttblporrarreptlistcriteria.AddttblporrarreptlistcriteriaRow((pdsporrarreptlistDataSet.ttblporrarreptlistcriteriaRow)ttblporrarreptlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PORRARReportList - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportList(ref pdsContext, ref pdsporrarreptlist, out pdsporrarrepttotals, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PORRARReportList - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptlist); 
    
         foreach (DataRow row in pdsporrarreptlist.ttblporrarreptlistresults)
         {
            result.porrarreptlistresults.Add(Porrarreptlistresults.BuildPorrarreptlistresultsFromRow(row));
         }     
         if (pdsporrarrepttotals.ttblporrarrepttotals.Count > 0)
         {
            result.porrarrepttotals = Porrarrepttotals.BuildPorrarrepttotalsFromRow(pdsporrarrepttotals.ttblporrarrepttotals[0]);
         }
                    
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Porrarrepttotals PORRARReportDelete(AspoentryPORRARReportDeleteRequestAPI AspoentryPORRARReportDeleteRequestAPI)
      {   
         var result = new Porrarrepttotals();
         
         var pdsporrarreptdelete = new pdsporrarreptdeleteDataSet();
            
         var pdsporrarrepttotals = new pdsporrarrepttotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARReportDeleteRequestAPI.porrarreptdeleterepts)
         {
            DataRow ttblporrarreptdeletereptsRow = pdsporrarreptdelete.ttblporrarreptdeleterepts.NewttblporrarreptdeletereptsRow();
            Porrarreptdeleterepts.UpdateRowFromPorrarreptdeleterepts(ref ttblporrarreptdeletereptsRow, obj);
            pdsporrarreptdelete.ttblporrarreptdeleterepts.AddttblporrarreptdeletereptsRow((pdsporrarreptdeleteDataSet.ttblporrarreptdeletereptsRow)ttblporrarreptdeletereptsRow);
         }
          
         DataRow ttblporrarrepttotalsRow = pdsporrarrepttotals.ttblporrarrepttotals.NewttblporrarrepttotalsRow();
         Porrarrepttotals.UpdateRowFromPorrarrepttotals(ref ttblporrarrepttotalsRow, AspoentryPORRARReportDeleteRequestAPI.porrarrepttotals);
         pdsporrarrepttotals.ttblporrarrepttotals.AddttblporrarrepttotalsRow((pdsporrarrepttotalsDataSet.ttblporrarrepttotalsRow)ttblporrarrepttotalsRow);
          
         
         NLogLoggerP.Trace("PORRARReportDelete - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportDelete(ref pdsContext, ref pdsporrarreptdelete, ref pdsporrarrepttotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportDelete - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptdelete); 
    
         if (pdsporrarrepttotals.ttblporrarrepttotals.Count > 0) 
         { 
             result = Porrarrepttotals.BuildPorrarrepttotalsFromRow(pdsporrarrepttotals.ttblporrarrepttotals[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptadjmergetotals PORRARReportAdjustMerge(AspoentryPORRARReportAdjustMergeRequestAPI AspoentryPORRARReportAdjustMergeRequestAPI)
      {   
         var result = new Porrarreptadjmergetotals();
         
         var pdsporrarreptadjmerge = new pdsporrarreptadjmergeDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARReportAdjustMergeRequestAPI.porrarreptadjmergerepts)
         {
            DataRow ttblporrarreptadjmergereptsRow = pdsporrarreptadjmerge.ttblporrarreptadjmergerepts.NewttblporrarreptadjmergereptsRow();
            Porrarreptadjmergerepts.UpdateRowFromPorrarreptadjmergerepts(ref ttblporrarreptadjmergereptsRow, obj);
            pdsporrarreptadjmerge.ttblporrarreptadjmergerepts.AddttblporrarreptadjmergereptsRow((pdsporrarreptadjmergeDataSet.ttblporrarreptadjmergereptsRow)ttblporrarreptadjmergereptsRow);
         }
          
         DataRow ttblporrarreptadjmergetotalsRow = pdsporrarreptadjmerge.ttblporrarreptadjmergetotals.NewttblporrarreptadjmergetotalsRow();
         Porrarreptadjmergetotals.UpdateRowFromPorrarreptadjmergetotals(ref ttblporrarreptadjmergetotalsRow, AspoentryPORRARReportAdjustMergeRequestAPI.porrarreptadjmergetotals);
         pdsporrarreptadjmerge.ttblporrarreptadjmergetotals.AddttblporrarreptadjmergetotalsRow((pdsporrarreptadjmergeDataSet.ttblporrarreptadjmergetotalsRow)ttblporrarreptadjmergetotalsRow);
          
         
         NLogLoggerP.Trace("PORRARReportAdjustMerge - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustMerge(ref pdsContext, ref pdsporrarreptadjmerge, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustMerge - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjmerge); 
    
         if (pdsporrarreptadjmerge.ttblporrarreptadjmergetotals.Count > 0) 
         { 
             result = Porrarreptadjmergetotals.BuildPorrarreptadjmergetotalsFromRow(pdsporrarreptadjmerge.ttblporrarreptadjmergetotals[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptupdatetotals PORRARReportUpdate(AspoentryPORRARReportUpdateRequestAPI AspoentryPORRARReportUpdateRequestAPI)
      {   
         var result = new Porrarreptupdatetotals();
         
         var pdsporrarreptupdate = new pdsporrarreptupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarreptupdatesingleRow = pdsporrarreptupdate.ttblporrarreptupdatesingle.NewttblporrarreptupdatesingleRow();
         Porrarreptupdatesingle.UpdateRowFromPorrarreptupdatesingle(ref ttblporrarreptupdatesingleRow, AspoentryPORRARReportUpdateRequestAPI.porrarreptupdatesingle);
         pdsporrarreptupdate.ttblporrarreptupdatesingle.AddttblporrarreptupdatesingleRow((pdsporrarreptupdateDataSet.ttblporrarreptupdatesingleRow)ttblporrarreptupdatesingleRow);
          
         DataRow ttblporrarreptupdatetotalsRow = pdsporrarreptupdate.ttblporrarreptupdatetotals.NewttblporrarreptupdatetotalsRow();
         Porrarreptupdatetotals.UpdateRowFromPorrarreptupdatetotals(ref ttblporrarreptupdatetotalsRow, AspoentryPORRARReportUpdateRequestAPI.porrarreptupdatetotals);
         pdsporrarreptupdate.ttblporrarreptupdatetotals.AddttblporrarreptupdatetotalsRow((pdsporrarreptupdateDataSet.ttblporrarreptupdatetotalsRow)ttblporrarreptupdatetotalsRow);
          
         
         NLogLoggerP.Trace("PORRARReportUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportUpdate(ref pdsContext, ref pdsporrarreptupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptupdate); 
    
         if (pdsporrarreptupdate.ttblporrarreptupdatetotals.Count > 0) 
         { 
             result = Porrarreptupdatetotals.BuildPorrarreptupdatetotalsFromRow(pdsporrarreptupdate.ttblporrarreptupdatetotals[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPORRARReportVendorChangeResponseAPI PORRARReportVendorChange(AspoentryPORRARReportVendorChangeRequestAPI AspoentryPORRARReportVendorChangeRequestAPI)
      {   
         var result = new AspoentryPORRARReportVendorChangeResponseAPI();
         
         var pdsporrarreptvendchg = new pdsporrarreptvendchgDataSet();
            
         var pdsporrarrepttotals = new pdsporrarrepttotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarrepttotalsRow = pdsporrarrepttotals.ttblporrarrepttotals.NewttblporrarrepttotalsRow();
         Porrarrepttotals.UpdateRowFromPorrarrepttotals(ref ttblporrarrepttotalsRow, AspoentryPORRARReportVendorChangeRequestAPI.porrarrepttotals);
         pdsporrarrepttotals.ttblporrarrepttotals.AddttblporrarrepttotalsRow((pdsporrarrepttotalsDataSet.ttblporrarrepttotalsRow)ttblporrarrepttotalsRow);
          
         DataRow ttblporrarreptvendchgsingleRow = pdsporrarreptvendchg.ttblporrarreptvendchgsingle.NewttblporrarreptvendchgsingleRow();
         Porrarreptvendchgsingle.UpdateRowFromPorrarreptvendchgsingle(ref ttblporrarreptvendchgsingleRow, AspoentryPORRARReportVendorChangeRequestAPI.porrarreptvendchgsingle);
         pdsporrarreptvendchg.ttblporrarreptvendchgsingle.AddttblporrarreptvendchgsingleRow((pdsporrarreptvendchgDataSet.ttblporrarreptvendchgsingleRow)ttblporrarreptvendchgsingleRow);
          
         
         NLogLoggerP.Trace("PORRARReportVendorChange - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportVendorChange(ref pdsContext, ref pdsporrarreptvendchg, ref pdsporrarrepttotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportVendorChange - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptvendchg); 
    
         if (pdsporrarrepttotals.ttblporrarrepttotals.Count > 0)
         {
            result.porrarrepttotals = Porrarrepttotals.BuildPorrarrepttotalsFromRow(pdsporrarrepttotals.ttblporrarrepttotals[0]);
         }
                    
         if (pdsporrarreptvendchg.ttblporrarreptvendchgsingle.Count > 0)
         {
            result.porrarreptvendchgsingle = Porrarreptvendchgsingle.BuildPorrarreptvendchgsingleFromRow(pdsporrarreptvendchg.ttblporrarreptvendchgsingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Porrarreptaddnew> PORRARReportAddNew(IEnumerable<Porrarreptaddnew> porrarreptaddnew)
      {   
         var results = new List<Porrarreptaddnew>();
         
         var pdsporrarreptaddnew = new pdsporrarreptaddnewDataSet();
            
         foreach (var obj in porrarreptaddnew)
         {
             DataRow row = pdsporrarreptaddnew.ttblporrarreptaddnew.NewttblporrarreptaddnewRow();
             Porrarreptaddnew.UpdateRowFromPorrarreptaddnew(ref row, obj);
             pdsporrarreptaddnew.ttblporrarreptaddnew.AddttblporrarreptaddnewRow((pdsporrarreptaddnewDataSet.ttblporrarreptaddnewRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportAddNew - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAddNew(ref pdsContext, ref pdsporrarreptaddnew, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAddNew - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptaddnew); 
    
            foreach (DataRow row in pdsporrarreptaddnew.ttblporrarreptaddnew)
            {
                results.Add(Porrarreptaddnew.BuildPorrarreptaddnewFromRow(row));
            }
            return results;
        
      }

      public AspoentryPORRARReportRefreshDocumentsResponseAPI PORRARReportRefreshDocuments(AspoentryPORRARReportRefreshDocumentsRequestAPI AspoentryPORRARReportRefreshDocumentsRequestAPI)
      {   
         var result = new AspoentryPORRARReportRefreshDocumentsResponseAPI();
         
         var pdsporrarreptrefreshdoc = new pdsporrarreptrefreshdocDataSet();
            
         var pdsporrarrepttotals = new pdsporrarrepttotalsDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARReportRefreshDocumentsRequestAPI.porrarreptrefreshdocrepts)
         {
            DataRow ttblporrarreptrefreshdocreptsRow = pdsporrarreptrefreshdoc.ttblporrarreptrefreshdocrepts.NewttblporrarreptrefreshdocreptsRow();
            Porrarreptrefreshdocrepts.UpdateRowFromPorrarreptrefreshdocrepts(ref ttblporrarreptrefreshdocreptsRow, obj);
            pdsporrarreptrefreshdoc.ttblporrarreptrefreshdocrepts.AddttblporrarreptrefreshdocreptsRow((pdsporrarreptrefreshdocDataSet.ttblporrarreptrefreshdocreptsRow)ttblporrarreptrefreshdocreptsRow);
         }
          
         DataRow ttblporrarrepttotalsRow = pdsporrarrepttotals.ttblporrarrepttotals.NewttblporrarrepttotalsRow();
         Porrarrepttotals.UpdateRowFromPorrarrepttotals(ref ttblporrarrepttotalsRow, AspoentryPORRARReportRefreshDocumentsRequestAPI.porrarrepttotals);
         pdsporrarrepttotals.ttblporrarrepttotals.AddttblporrarrepttotalsRow((pdsporrarrepttotalsDataSet.ttblporrarrepttotalsRow)ttblporrarrepttotalsRow);
          
         
         NLogLoggerP.Trace("PORRARReportRefreshDocuments - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportRefreshDocuments(ref pdsContext, ref pdsporrarreptrefreshdoc, ref pdsporrarrepttotals, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportRefreshDocuments - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptrefreshdoc); 
    
         foreach (DataRow row in pdsporrarreptrefreshdoc.ttblporrarreptrefreshdocrepts)
         {
            result.porrarreptrefreshdocrepts.Add(Porrarreptrefreshdocrepts.BuildPorrarreptrefreshdocreptsFromRow(row));
         }     
         if (pdsporrarrepttotals.ttblporrarrepttotals.Count > 0)
         {
            result.porrarrepttotals = Porrarrepttotals.BuildPorrarrepttotalsFromRow(pdsporrarrepttotals.ttblporrarrepttotals[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Porrarreptheader PORRARReportHeaderLeaveField(AspoentryPORRARReportHeaderLeaveFieldRequestAPI AspoentryPORRARReportHeaderLeaveFieldRequestAPI)
      {   
         var result = new Porrarreptheader();
         
         var pdsporrarreptheader = new pdsporrarreptheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarreptheaderRow = pdsporrarreptheader.ttblporrarreptheader.NewttblporrarreptheaderRow();
         Porrarreptheader.UpdateRowFromPorrarreptheader(ref ttblporrarreptheaderRow, AspoentryPORRARReportHeaderLeaveFieldRequestAPI.porrarreptheader);
         pdsporrarreptheader.ttblporrarreptheader.AddttblporrarreptheaderRow((pdsporrarreptheaderDataSet.ttblporrarreptheaderRow)ttblporrarreptheaderRow);
          
         var  cFieldName = AspoentryPORRARReportHeaderLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("PORRARReportHeaderLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportHeaderLeaveField(ref pdsContext,  cFieldName, ref pdsporrarreptheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportHeaderLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptheader); 
    
         if (pdsporrarreptheader.ttblporrarreptheader.Count > 0) 
         { 
             result = Porrarreptheader.BuildPorrarreptheaderFromRow(pdsporrarreptheader.ttblporrarreptheader[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptheader PORRARReportHeaderRetrieve(int iReportNo)
      {   
         var result = new Porrarreptheader();
         
         var pdsporrarreptheader = new pdsporrarreptheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportHeaderRetrieve - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportHeaderRetrieve(ref pdsContext,  iReportNo, out pdsporrarreptheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportHeaderRetrieve - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptheader); 
    
         if (pdsporrarreptheader.ttblporrarreptheader.Count > 0) 
         { 
             result = Porrarreptheader.BuildPorrarreptheaderFromRow(pdsporrarreptheader.ttblporrarreptheader[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPORRARReportHeaderUpdateResponseAPI PORRARReportHeaderUpdate(Porrarreptheader porrarreptheader)
      {   
         var result = new AspoentryPORRARReportHeaderUpdateResponseAPI();
         
         var pdsporrarreptheader = new pdsporrarreptheaderDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblporrarreptheaderCriteria = pdsporrarreptheader.ttblporrarreptheader.NewttblporrarreptheaderRow();
         Porrarreptheader.UpdateRowFromPorrarreptheader(ref ttblporrarreptheaderCriteria, porrarreptheader);
         pdsporrarreptheader.ttblporrarreptheader.AddttblporrarreptheaderRow((pdsporrarreptheaderDataSet.ttblporrarreptheaderRow)ttblporrarreptheaderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportHeaderUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportHeaderUpdate(ref pdsContext, ref pdsporrarreptheader, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportHeaderUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptheader); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsporrarreptheader.ttblporrarreptheader.Count > 0)
         {
            result.porrarreptheader = Porrarreptheader.BuildPorrarreptheaderFromRow(pdsporrarreptheader.ttblporrarreptheader[0]);
         }
                    
          
         return result;
          
      }

      public void PORRARReportHeaderAcceptDenyAll(int iReportNo, bool lAccept)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportHeaderAcceptDenyAll - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportHeaderAcceptDenyAll(ref pdsContext,  iReportNo,  lAccept, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportHeaderAcceptDenyAll - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AspoentryPORRARReportCombineInqResponseAPI PORRARReportCombineInq(int iReportNo)
      {   
         var result = new AspoentryPORRARReportCombineInqResponseAPI();
         
         var pdsporrarreptcombinq = new pdsporrarreptcombinqDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportCombineInq - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportCombineInq(ref pdsContext,  iReportNo, out pdsporrarreptcombinq, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportCombineInq - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptcombinq); 
    
         foreach (DataRow row in pdsporrarreptcombinq.ttblporrarreptcombinqresults)
         {
            result.porrarreptcombinqresults.Add(Porrarreptcombinqresults.BuildPorrarreptcombinqresultsFromRow(row));
         }     
         if (pdsporrarreptcombinq.ttblporrarreptcombinqsingle.Count > 0)
         {
            result.porrarreptcombinqsingle = Porrarreptcombinqsingle.BuildPorrarreptcombinqsingleFromRow(pdsporrarreptcombinq.ttblporrarreptcombinqsingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPORRARReportAdjustRetrieveResponseAPI PORRARReportAdjustRetrieve(int iReportNo)
      {   
         var result = new AspoentryPORRARReportAdjustRetrieveResponseAPI();
         
         var pdsporrarreptadjretrieve = new pdsporrarreptadjretrieveDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportAdjustRetrieve - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustRetrieve(ref pdsContext,  iReportNo, out pdsporrarreptadjretrieve, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustRetrieve - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjretrieve); 
    
         if (pdsporrarreptadjretrieve.ttblporrarreptadjretrievehdr.Count > 0)
         {
            result.porrarreptadjretrievehdr = Porrarreptadjretrievehdr.BuildPorrarreptadjretrievehdrFromRow(pdsporrarreptadjretrieve.ttblporrarreptadjretrievehdr[0]);
         }
                    
         foreach (DataRow row in pdsporrarreptadjretrieve.ttblporrarreptadjretrievelns)
         {
            result.porrarreptadjretrievelns.Add(Porrarreptadjretrievelns.BuildPorrarreptadjretrievelnsFromRow(row));
         }     
         if (pdsporrarreptadjretrieve.ttblporrarreptadjretrievesng.Count > 0)
         {
            result.porrarreptadjretrievesng = Porrarreptadjretrievesng.BuildPorrarreptadjretrievesngFromRow(pdsporrarreptadjretrieve.ttblporrarreptadjretrievesng[0]);
         }
                    
          
         return result;
          
      }

      public void PORRARReportAdjustCancel(AspoentryPORRARReportAdjustCancelRequestAPI AspoentryPORRARReportAdjustCancelRequestAPI)
      {   
         
         var pdsporrarreptadjretrieve = new pdsporrarreptadjretrieveDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARReportAdjustCancelRequestAPI.porrarreptadjretrievehdr)
         {
            DataRow ttblporrarreptadjretrievehdrRow = pdsporrarreptadjretrieve.ttblporrarreptadjretrievehdr.NewttblporrarreptadjretrievehdrRow();
            Porrarreptadjretrievehdr.UpdateRowFromPorrarreptadjretrievehdr(ref ttblporrarreptadjretrievehdrRow, obj);
            pdsporrarreptadjretrieve.ttblporrarreptadjretrievehdr.AddttblporrarreptadjretrievehdrRow((pdsporrarreptadjretrieveDataSet.ttblporrarreptadjretrievehdrRow)ttblporrarreptadjretrievehdrRow);
         }
          
         foreach (var obj in AspoentryPORRARReportAdjustCancelRequestAPI.porrarreptadjretrievelns)
         {
            DataRow ttblporrarreptadjretrievelnsRow = pdsporrarreptadjretrieve.ttblporrarreptadjretrievelns.NewttblporrarreptadjretrievelnsRow();
            Porrarreptadjretrievelns.UpdateRowFromPorrarreptadjretrievelns(ref ttblporrarreptadjretrievelnsRow, obj);
            pdsporrarreptadjretrieve.ttblporrarreptadjretrievelns.AddttblporrarreptadjretrievelnsRow((pdsporrarreptadjretrieveDataSet.ttblporrarreptadjretrievelnsRow)ttblporrarreptadjretrievelnsRow);
         }
          
         DataRow ttblporrarreptadjretrievesngRow = pdsporrarreptadjretrieve.ttblporrarreptadjretrievesng.NewttblporrarreptadjretrievesngRow();
         Porrarreptadjretrievesng.UpdateRowFromPorrarreptadjretrievesng(ref ttblporrarreptadjretrievesngRow, AspoentryPORRARReportAdjustCancelRequestAPI.porrarreptadjretrievesng);
         pdsporrarreptadjretrieve.ttblporrarreptadjretrievesng.AddttblporrarreptadjretrievesngRow((pdsporrarreptadjretrieveDataSet.ttblporrarreptadjretrievesngRow)ttblporrarreptadjretrievesngRow);
          
         var  iReportNo = AspoentryPORRARReportAdjustCancelRequestAPI.iReportNo;
            
         
         NLogLoggerP.Trace("PORRARReportAdjustCancel - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustCancel(ref pdsContext,  iReportNo,  pdsporrarreptadjretrieve, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustCancel - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjretrieve);
      }

      public Porrarreptadjcalc PORRARReportAdjustCalc(Porrarreptadjcalc porrarreptadjcalc)
      {   
         var result = new Porrarreptadjcalc();
         
         var pdsporrarreptadjcalc = new pdsporrarreptadjcalcDataSet();
            
         DataRow ttblporrarreptadjcalcCriteria = pdsporrarreptadjcalc.ttblporrarreptadjcalc.NewttblporrarreptadjcalcRow();
         Porrarreptadjcalc.UpdateRowFromPorrarreptadjcalc(ref ttblporrarreptadjcalcCriteria, porrarreptadjcalc);
         pdsporrarreptadjcalc.ttblporrarreptadjcalc.AddttblporrarreptadjcalcRow((pdsporrarreptadjcalcDataSet.ttblporrarreptadjcalcRow)ttblporrarreptadjcalcCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportAdjustCalc - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustCalc(ref pdsContext, ref pdsporrarreptadjcalc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustCalc - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjcalc); 
    
         if (pdsporrarreptadjcalc.ttblporrarreptadjcalc.Count > 0) 
         { 
             result = Porrarreptadjcalc.BuildPorrarreptadjcalcFromRow(pdsporrarreptadjcalc.ttblporrarreptadjcalc[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptadjdaysinit PORRARReportAdjustDaysInit(Porrarreptadjdaysinit porrarreptadjdaysinit)
      {   
         var result = new Porrarreptadjdaysinit();
         
         var pdsporrarreptadjdaysinit = new pdsporrarreptadjdaysinitDataSet();
            
         DataRow ttblporrarreptadjdaysinitCriteria = pdsporrarreptadjdaysinit.ttblporrarreptadjdaysinit.NewttblporrarreptadjdaysinitRow();
         Porrarreptadjdaysinit.UpdateRowFromPorrarreptadjdaysinit(ref ttblporrarreptadjdaysinitCriteria, porrarreptadjdaysinit);
         pdsporrarreptadjdaysinit.ttblporrarreptadjdaysinit.AddttblporrarreptadjdaysinitRow((pdsporrarreptadjdaysinitDataSet.ttblporrarreptadjdaysinitRow)ttblporrarreptadjdaysinitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportAdjustDaysInit - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustDaysInit(ref pdsContext, ref pdsporrarreptadjdaysinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustDaysInit - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjdaysinit); 
    
         if (pdsporrarreptadjdaysinit.ttblporrarreptadjdaysinit.Count > 0) 
         { 
             result = Porrarreptadjdaysinit.BuildPorrarreptadjdaysinitFromRow(pdsporrarreptadjdaysinit.ttblporrarreptadjdaysinit[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptadjdaysupdt PORRARReportAdjustDaysUpdate(AspoentryPORRARReportAdjustDaysUpdateRequestAPI AspoentryPORRARReportAdjustDaysUpdateRequestAPI)
      {   
         var result = new Porrarreptadjdaysupdt();
         
         var pdsporrarreptadjdaysupdt = new pdsporrarreptadjdaysupdtDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarreptadjdaysupdtRow = pdsporrarreptadjdaysupdt.ttblporrarreptadjdaysupdt.NewttblporrarreptadjdaysupdtRow();
         Porrarreptadjdaysupdt.UpdateRowFromPorrarreptadjdaysupdt(ref ttblporrarreptadjdaysupdtRow, AspoentryPORRARReportAdjustDaysUpdateRequestAPI.porrarreptadjdaysupdt);
         pdsporrarreptadjdaysupdt.ttblporrarreptadjdaysupdt.AddttblporrarreptadjdaysupdtRow((pdsporrarreptadjdaysupdtDataSet.ttblporrarreptadjdaysupdtRow)ttblporrarreptadjdaysupdtRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspoentryPORRARReportAdjustDaysUpdateRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("PORRARReportAdjustDaysUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportAdjustDaysUpdate(ref pdsContext, ref pdsporrarreptadjdaysupdt,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportAdjustDaysUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptadjdaysupdt); 
    
         if (pdsporrarreptadjdaysupdt.ttblporrarreptadjdaysupdt.Count > 0) 
         { 
             result = Porrarreptadjdaysupdt.BuildPorrarreptadjdaysupdtFromRow(pdsporrarreptadjdaysupdt.ttblporrarreptadjdaysupdt[0]);
         } 
              
          
         return result;
          
      }

      public Porrarreptnewreptinit PORRARReportNewReptInit(string cBuyer)
      {   
         var result = new Porrarreptnewreptinit();
         
         var pdsporrarreptnewreptinit = new pdsporrarreptnewreptinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportNewReptInit - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportNewReptInit(ref pdsContext,  cBuyer, out pdsporrarreptnewreptinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportNewReptInit - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptnewreptinit); 
    
         if (pdsporrarreptnewreptinit.ttblporrarreptnewreptinit.Count > 0) 
         { 
             result = Porrarreptnewreptinit.BuildPorrarreptnewreptinitFromRow(pdsporrarreptnewreptinit.ttblporrarreptnewreptinit[0]);
         } 
              
          
         return result;
          
      }

      public void PORRARReportNewReptRun(AspoentryPORRARReportNewReptRunRequestAPI AspoentryPORRARReportNewReptRunRequestAPI)
      {   
         
         var pdsporrarreptnewreptrun = new pdsporrarreptnewreptrunDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarreptnewreptrunRow = pdsporrarreptnewreptrun.ttblporrarreptnewreptrun.NewttblporrarreptnewreptrunRow();
         Porrarreptnewreptrun.UpdateRowFromPorrarreptnewreptrun(ref ttblporrarreptnewreptrunRow, AspoentryPORRARReportNewReptRunRequestAPI.porrarreptnewreptrun);
         pdsporrarreptnewreptrun.ttblporrarreptnewreptrun.AddttblporrarreptnewreptrunRow((pdsporrarreptnewreptrunDataSet.ttblporrarreptnewreptrunRow)ttblporrarreptnewreptrunRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspoentryPORRARReportNewReptRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("PORRARReportNewReptRun - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportNewReptRun(ref pdsContext, ref pdsporrarreptnewreptrun,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportNewReptRun - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptnewreptrun);
      }

      public Porrarreptmergeinit PORRARReportMergeInit(string cBuyer)
      {   
         var result = new Porrarreptmergeinit();
         
         var pdsporrarreptmergeinit = new pdsporrarreptmergeinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportMergeInit - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportMergeInit(ref pdsContext,  cBuyer, out pdsporrarreptmergeinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportMergeInit - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptmergeinit); 
    
         if (pdsporrarreptmergeinit.ttblporrarreptmergeinit.Count > 0) 
         { 
             result = Porrarreptmergeinit.BuildPorrarreptmergeinitFromRow(pdsporrarreptmergeinit.ttblporrarreptmergeinit[0]);
         } 
              
          
         return result;
          
      }

      public void PORRARReportMergeRun(AspoentryPORRARReportMergeRunRequestAPI AspoentryPORRARReportMergeRunRequestAPI)
      {   
         
         var pdsporrarreptmergerun = new pdsporrarreptmergerunDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARReportMergeRunRequestAPI.porrarreptmergerunrepts)
         {
            DataRow ttblporrarreptmergerunreptsRow = pdsporrarreptmergerun.ttblporrarreptmergerunrepts.NewttblporrarreptmergerunreptsRow();
            Porrarreptmergerunrepts.UpdateRowFromPorrarreptmergerunrepts(ref ttblporrarreptmergerunreptsRow, obj);
            pdsporrarreptmergerun.ttblporrarreptmergerunrepts.AddttblporrarreptmergerunreptsRow((pdsporrarreptmergerunDataSet.ttblporrarreptmergerunreptsRow)ttblporrarreptmergerunreptsRow);
         }
          
         DataRow ttblporrarreptmergerunsnglRow = pdsporrarreptmergerun.ttblporrarreptmergerunsngl.NewttblporrarreptmergerunsnglRow();
         Porrarreptmergerunsngl.UpdateRowFromPorrarreptmergerunsngl(ref ttblporrarreptmergerunsnglRow, AspoentryPORRARReportMergeRunRequestAPI.porrarreptmergerunsngl);
         pdsporrarreptmergerun.ttblporrarreptmergerunsngl.AddttblporrarreptmergerunsnglRow((pdsporrarreptmergerunDataSet.ttblporrarreptmergerunsnglRow)ttblporrarreptmergerunsnglRow);
          
         foreach (var obj in AspoentryPORRARReportMergeRunRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  cBuyer = AspoentryPORRARReportMergeRunRequestAPI.cBuyer;
            
         
         NLogLoggerP.Trace("PORRARReportMergeRun - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportMergeRun(ref pdsContext,  cBuyer,  pdsporrarreptmergerun,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportMergeRun - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptmergerun);
      }

      public AspoentryPOERBValidateBlanketOrderResponseAPI POERBValidateBlanketOrder(AspoentryPOERBValidateBlanketOrderRequestAPI AspoentryPOERBValidateBlanketOrderRequestAPI)
      {   
         var result = new AspoentryPOERBValidateBlanketOrderResponseAPI();
         
         var pdspoblanket = new pdspoblanketDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketcriteriaRow = pdspoblanket.ttblpoblanketcriteria.NewttblpoblanketcriteriaRow();
         Poblanketcriteria.UpdateRowFromPoblanketcriteria(ref ttblpoblanketcriteriaRow, AspoentryPOERBValidateBlanketOrderRequestAPI.poblanketcriteria);
         pdspoblanket.ttblpoblanketcriteria.AddttblpoblanketcriteriaRow((pdspoblanketDataSet.ttblpoblanketcriteriaRow)ttblpoblanketcriteriaRow);
          
         foreach (var obj in AspoentryPOERBValidateBlanketOrderRequestAPI.poblanketresults)
         {
            DataRow ttblpoblanketresultsRow = pdspoblanket.ttblpoblanketresults.NewttblpoblanketresultsRow();
            Poblanketresults.UpdateRowFromPoblanketresults(ref ttblpoblanketresultsRow, obj);
            pdspoblanket.ttblpoblanketresults.AddttblpoblanketresultsRow((pdspoblanketDataSet.ttblpoblanketresultsRow)ttblpoblanketresultsRow);
         }
          
         
         NLogLoggerP.Trace("POERBValidateBlanketOrder - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBValidateBlanketOrder(ref pdsContext, ref pdspoblanket, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBValidateBlanketOrder - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanket); 
    
         foreach (DataRow row in pdspoblanket.ttblpoblanketresults)
         {
            result.poblanketresults.Add(Poblanketresults.BuildPoblanketresultsFromRow(row));
         }     
         if (pdspoblanket.ttblpoblanketvalidatesingle.Count > 0)
         {
            result.poblanketvalidatesingle = Poblanketvalidatesingle.BuildPoblanketvalidatesingleFromRow(pdspoblanket.ttblpoblanketvalidatesingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPOERBBuildBlanketTempTableResponseAPI POERBBuildBlanketTempTable(Poblanketcriteria poblanketcriteria)
      {   
         var result = new AspoentryPOERBBuildBlanketTempTableResponseAPI();
         
         var pdspoblanket = new pdspoblanketDataSet();
            
         DataRow ttblpoblanketcriteriaCriteria = pdspoblanket.ttblpoblanketcriteria.NewttblpoblanketcriteriaRow();
         Poblanketcriteria.UpdateRowFromPoblanketcriteria(ref ttblpoblanketcriteriaCriteria, poblanketcriteria);
         pdspoblanket.ttblpoblanketcriteria.AddttblpoblanketcriteriaRow((pdspoblanketDataSet.ttblpoblanketcriteriaRow)ttblpoblanketcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBBuildBlanketTempTable - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBBuildBlanketTempTable(ref pdsContext, ref pdspoblanket, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBBuildBlanketTempTable - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanket); 
    
         foreach (DataRow row in pdspoblanket.ttblpoblanketresults)
         {
            result.poblanketresults.Add(Poblanketresults.BuildPoblanketresultsFromRow(row));
         }     
         if (pdspoblanket.ttblpoblanketvalidatesingle.Count > 0)
         {
            result.poblanketvalidatesingle = Poblanketvalidatesingle.BuildPoblanketvalidatesingleFromRow(pdspoblanket.ttblpoblanketvalidatesingle[0]);
         }
                    
          
         return result;
          
      }

      public Poblanketcheckshipfmnosingle POERBCheckChangeOfShipFmNo(Poblanketcheckshipfmnocrit poblanketcheckshipfmnocrit)
      {   
         var result = new Poblanketcheckshipfmnosingle();
         
         var pdspoblanketcheckshipfmno = new pdspoblanketcheckshipfmnoDataSet();
            
         DataRow ttblpoblanketcheckshipfmnocritCriteria = pdspoblanketcheckshipfmno.ttblpoblanketcheckshipfmnocrit.NewttblpoblanketcheckshipfmnocritRow();
         Poblanketcheckshipfmnocrit.UpdateRowFromPoblanketcheckshipfmnocrit(ref ttblpoblanketcheckshipfmnocritCriteria, poblanketcheckshipfmnocrit);
         pdspoblanketcheckshipfmno.ttblpoblanketcheckshipfmnocrit.AddttblpoblanketcheckshipfmnocritRow((pdspoblanketcheckshipfmnoDataSet.ttblpoblanketcheckshipfmnocritRow)ttblpoblanketcheckshipfmnocritCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBCheckChangeOfShipFmNo - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBCheckChangeOfShipFmNo(ref pdsContext, ref pdspoblanketcheckshipfmno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBCheckChangeOfShipFmNo - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketcheckshipfmno); 
    
         if (pdspoblanketcheckshipfmno.ttblpoblanketcheckshipfmnosingle.Count > 0) 
         { 
             result = Poblanketcheckshipfmnosingle.BuildPoblanketcheckshipfmnosingleFromRow(pdspoblanketcheckshipfmno.ttblpoblanketcheckshipfmnosingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketupdateresults POERBUpdateExistingOrder(Poblanketupdatecriteria poblanketupdatecriteria)
      {   
         var result = new Poblanketupdateresults();
         
         var pdspoblanketupdate = new pdspoblanketupdateDataSet();
            
         DataRow ttblpoblanketupdatecriteriaCriteria = pdspoblanketupdate.ttblpoblanketupdatecriteria.NewttblpoblanketupdatecriteriaRow();
         Poblanketupdatecriteria.UpdateRowFromPoblanketupdatecriteria(ref ttblpoblanketupdatecriteriaCriteria, poblanketupdatecriteria);
         pdspoblanketupdate.ttblpoblanketupdatecriteria.AddttblpoblanketupdatecriteriaRow((pdspoblanketupdateDataSet.ttblpoblanketupdatecriteriaRow)ttblpoblanketupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBUpdateExistingOrder - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBUpdateExistingOrder(ref pdsContext, ref pdspoblanketupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBUpdateExistingOrder - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketupdate); 
    
         if (pdspoblanketupdate.ttblpoblanketupdateresults.Count > 0) 
         { 
             result = Poblanketupdateresults.BuildPoblanketupdateresultsFromRow(pdspoblanketupdate.ttblpoblanketupdateresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Poblanketdeleteresults> POERBDeleteBlanketReleases(AspoentryPOERBDeleteBlanketReleasesRequestAPI AspoentryPOERBDeleteBlanketReleasesRequestAPI)
      {   
         var results = new List<Poblanketdeleteresults>();
         
         var pdspoblanketdelete = new pdspoblanketdeleteDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketdeletecriteriaRow = pdspoblanketdelete.ttblpoblanketdeletecriteria.NewttblpoblanketdeletecriteriaRow();
         Poblanketdeletecriteria.UpdateRowFromPoblanketdeletecriteria(ref ttblpoblanketdeletecriteriaRow, AspoentryPOERBDeleteBlanketReleasesRequestAPI.poblanketdeletecriteria);
         pdspoblanketdelete.ttblpoblanketdeletecriteria.AddttblpoblanketdeletecriteriaRow((pdspoblanketdeleteDataSet.ttblpoblanketdeletecriteriaRow)ttblpoblanketdeletecriteriaRow);
          
         foreach (var obj in AspoentryPOERBDeleteBlanketReleasesRequestAPI.poblanketdeleteorders)
         {
            DataRow ttblpoblanketdeleteordersRow = pdspoblanketdelete.ttblpoblanketdeleteorders.NewttblpoblanketdeleteordersRow();
            Poblanketdeleteorders.UpdateRowFromPoblanketdeleteorders(ref ttblpoblanketdeleteordersRow, obj);
            pdspoblanketdelete.ttblpoblanketdeleteorders.AddttblpoblanketdeleteordersRow((pdspoblanketdeleteDataSet.ttblpoblanketdeleteordersRow)ttblpoblanketdeleteordersRow);
         }
          
         
         NLogLoggerP.Trace("POERBDeleteBlanketReleases - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBDeleteBlanketReleases(ref pdsContext, ref pdspoblanketdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBDeleteBlanketReleases - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketdelete); 
    
            foreach (DataRow row in pdspoblanketdelete.ttblpoblanketdeleteresults)
            {
                results.Add(Poblanketdeleteresults.BuildPoblanketdeleteresultsFromRow(row));
            }
            return results;
        
      }

      public Poblanketreleasesingle POERBSetupScreenForNextRelease(Poblanketreleasecriteria poblanketreleasecriteria)
      {   
         var result = new Poblanketreleasesingle();
         
         var pdspoblanketrelease = new pdspoblanketreleaseDataSet();
            
         DataRow ttblpoblanketreleasecriteriaCriteria = pdspoblanketrelease.ttblpoblanketreleasecriteria.NewttblpoblanketreleasecriteriaRow();
         Poblanketreleasecriteria.UpdateRowFromPoblanketreleasecriteria(ref ttblpoblanketreleasecriteriaCriteria, poblanketreleasecriteria);
         pdspoblanketrelease.ttblpoblanketreleasecriteria.AddttblpoblanketreleasecriteriaRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasecriteriaRow)ttblpoblanketreleasecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBSetupScreenForNextRelease - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBSetupScreenForNextRelease(ref pdsContext, ref pdspoblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBSetupScreenForNextRelease - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketrelease); 
    
         if (pdspoblanketrelease.ttblpoblanketreleasesingle.Count > 0) 
         { 
             result = Poblanketreleasesingle.BuildPoblanketreleasesingleFromRow(pdspoblanketrelease.ttblpoblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> POERBCreateNewBlanketRelease(AspoentryPOERBCreateNewBlanketReleaseRequestAPI AspoentryPOERBCreateNewBlanketReleaseRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspoblanketrelease = new pdspoblanketreleaseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketreleasecriteriaRow = pdspoblanketrelease.ttblpoblanketreleasecriteria.NewttblpoblanketreleasecriteriaRow();
         Poblanketreleasecriteria.UpdateRowFromPoblanketreleasecriteria(ref ttblpoblanketreleasecriteriaRow, AspoentryPOERBCreateNewBlanketReleaseRequestAPI.poblanketreleasecriteria);
         pdspoblanketrelease.ttblpoblanketreleasecriteria.AddttblpoblanketreleasecriteriaRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasecriteriaRow)ttblpoblanketreleasecriteriaRow);
          
         DataRow ttblpoblanketreleasesingleRow = pdspoblanketrelease.ttblpoblanketreleasesingle.NewttblpoblanketreleasesingleRow();
         Poblanketreleasesingle.UpdateRowFromPoblanketreleasesingle(ref ttblpoblanketreleasesingleRow, AspoentryPOERBCreateNewBlanketReleaseRequestAPI.poblanketreleasesingle);
         pdspoblanketrelease.ttblpoblanketreleasesingle.AddttblpoblanketreleasesingleRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasesingleRow)ttblpoblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("POERBCreateNewBlanketRelease - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBCreateNewBlanketRelease(ref pdsContext, ref pdspoblanketrelease, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBCreateNewBlanketRelease - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketrelease); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Poblanketreleasesingle POERBDisplayShipToInformation(AspoentryPOERBDisplayShipToInformationRequestAPI AspoentryPOERBDisplayShipToInformationRequestAPI)
      {   
         var result = new Poblanketreleasesingle();
         
         var pdspoblanketrelease = new pdspoblanketreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketreleasecriteriaRow = pdspoblanketrelease.ttblpoblanketreleasecriteria.NewttblpoblanketreleasecriteriaRow();
         Poblanketreleasecriteria.UpdateRowFromPoblanketreleasecriteria(ref ttblpoblanketreleasecriteriaRow, AspoentryPOERBDisplayShipToInformationRequestAPI.poblanketreleasecriteria);
         pdspoblanketrelease.ttblpoblanketreleasecriteria.AddttblpoblanketreleasecriteriaRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasecriteriaRow)ttblpoblanketreleasecriteriaRow);
          
         DataRow ttblpoblanketreleasesingleRow = pdspoblanketrelease.ttblpoblanketreleasesingle.NewttblpoblanketreleasesingleRow();
         Poblanketreleasesingle.UpdateRowFromPoblanketreleasesingle(ref ttblpoblanketreleasesingleRow, AspoentryPOERBDisplayShipToInformationRequestAPI.poblanketreleasesingle);
         pdspoblanketrelease.ttblpoblanketreleasesingle.AddttblpoblanketreleasesingleRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasesingleRow)ttblpoblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("POERBDisplayShipToInformation - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBDisplayShipToInformation(ref pdsContext, ref pdspoblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBDisplayShipToInformation - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketrelease); 
    
         if (pdspoblanketrelease.ttblpoblanketreleasesingle.Count > 0) 
         { 
             result = Poblanketreleasesingle.BuildPoblanketreleasesingleFromRow(pdspoblanketrelease.ttblpoblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketreleasesingle POERBDisplayBillToInformation(AspoentryPOERBDisplayBillToInformationRequestAPI AspoentryPOERBDisplayBillToInformationRequestAPI)
      {   
         var result = new Poblanketreleasesingle();
         
         var pdspoblanketrelease = new pdspoblanketreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketreleasecriteriaRow = pdspoblanketrelease.ttblpoblanketreleasecriteria.NewttblpoblanketreleasecriteriaRow();
         Poblanketreleasecriteria.UpdateRowFromPoblanketreleasecriteria(ref ttblpoblanketreleasecriteriaRow, AspoentryPOERBDisplayBillToInformationRequestAPI.poblanketreleasecriteria);
         pdspoblanketrelease.ttblpoblanketreleasecriteria.AddttblpoblanketreleasecriteriaRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasecriteriaRow)ttblpoblanketreleasecriteriaRow);
          
         DataRow ttblpoblanketreleasesingleRow = pdspoblanketrelease.ttblpoblanketreleasesingle.NewttblpoblanketreleasesingleRow();
         Poblanketreleasesingle.UpdateRowFromPoblanketreleasesingle(ref ttblpoblanketreleasesingleRow, AspoentryPOERBDisplayBillToInformationRequestAPI.poblanketreleasesingle);
         pdspoblanketrelease.ttblpoblanketreleasesingle.AddttblpoblanketreleasesingleRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasesingleRow)ttblpoblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("POERBDisplayBillToInformation - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBDisplayBillToInformation(ref pdsContext, ref pdspoblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBDisplayBillToInformation - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketrelease); 
    
         if (pdspoblanketrelease.ttblpoblanketreleasesingle.Count > 0) 
         { 
             result = Poblanketreleasesingle.BuildPoblanketreleasesingleFromRow(pdspoblanketrelease.ttblpoblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketreleasesingle POERBDisplayShipFmNoInformation(AspoentryPOERBDisplayShipFmNoInformationRequestAPI AspoentryPOERBDisplayShipFmNoInformationRequestAPI)
      {   
         var result = new Poblanketreleasesingle();
         
         var pdspoblanketrelease = new pdspoblanketreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketreleasecriteriaRow = pdspoblanketrelease.ttblpoblanketreleasecriteria.NewttblpoblanketreleasecriteriaRow();
         Poblanketreleasecriteria.UpdateRowFromPoblanketreleasecriteria(ref ttblpoblanketreleasecriteriaRow, AspoentryPOERBDisplayShipFmNoInformationRequestAPI.poblanketreleasecriteria);
         pdspoblanketrelease.ttblpoblanketreleasecriteria.AddttblpoblanketreleasecriteriaRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasecriteriaRow)ttblpoblanketreleasecriteriaRow);
          
         DataRow ttblpoblanketreleasesingleRow = pdspoblanketrelease.ttblpoblanketreleasesingle.NewttblpoblanketreleasesingleRow();
         Poblanketreleasesingle.UpdateRowFromPoblanketreleasesingle(ref ttblpoblanketreleasesingleRow, AspoentryPOERBDisplayShipFmNoInformationRequestAPI.poblanketreleasesingle);
         pdspoblanketrelease.ttblpoblanketreleasesingle.AddttblpoblanketreleasesingleRow((pdspoblanketreleaseDataSet.ttblpoblanketreleasesingleRow)ttblpoblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("POERBDisplayShipFmNoInformation - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBDisplayShipFmNoInformation(ref pdsContext, ref pdspoblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBDisplayShipFmNoInformation - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketrelease); 
    
         if (pdspoblanketrelease.ttblpoblanketreleasesingle.Count > 0) 
         { 
             result = Poblanketreleasesingle.BuildPoblanketreleasesingleFromRow(pdspoblanketrelease.ttblpoblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketbannersingle POERBInitializeBannner(Poblanketbannercriteria poblanketbannercriteria)
      {   
         var result = new Poblanketbannersingle();
         
         var pdspoblanketbanner = new pdspoblanketbannerDataSet();
            
         DataRow ttblpoblanketbannercriteriaCriteria = pdspoblanketbanner.ttblpoblanketbannercriteria.NewttblpoblanketbannercriteriaRow();
         Poblanketbannercriteria.UpdateRowFromPoblanketbannercriteria(ref ttblpoblanketbannercriteriaCriteria, poblanketbannercriteria);
         pdspoblanketbanner.ttblpoblanketbannercriteria.AddttblpoblanketbannercriteriaRow((pdspoblanketbannerDataSet.ttblpoblanketbannercriteriaRow)ttblpoblanketbannercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBInitializeBannner - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBInitializeBannner(ref pdsContext, ref pdspoblanketbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBInitializeBannner - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketbanner); 
    
         if (pdspoblanketbanner.ttblpoblanketbannersingle.Count > 0) 
         { 
             result = Poblanketbannersingle.BuildPoblanketbannersingleFromRow(pdspoblanketbanner.ttblpoblanketbannersingle[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOERBLogOffResponseAPI POERBLogOff(AspoentryPOERBLogOffRequestAPI AspoentryPOERBLogOffRequestAPI)
      {   
         var result = new AspoentryPOERBLogOffResponseAPI();
         
         var pdspoblanketbanner = new pdspoblanketbannerDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketbannercriteriaRow = pdspoblanketbanner.ttblpoblanketbannercriteria.NewttblpoblanketbannercriteriaRow();
         Poblanketbannercriteria.UpdateRowFromPoblanketbannercriteria(ref ttblpoblanketbannercriteriaRow, AspoentryPOERBLogOffRequestAPI.poblanketbannercriteria);
         pdspoblanketbanner.ttblpoblanketbannercriteria.AddttblpoblanketbannercriteriaRow((pdspoblanketbannerDataSet.ttblpoblanketbannercriteriaRow)ttblpoblanketbannercriteriaRow);
          
         DataRow ttblpoblanketbannersingleRow = pdspoblanketbanner.ttblpoblanketbannersingle.NewttblpoblanketbannersingleRow();
         Poblanketbannersingle.UpdateRowFromPoblanketbannersingle(ref ttblpoblanketbannersingleRow, AspoentryPOERBLogOffRequestAPI.poblanketbannersingle);
         pdspoblanketbanner.ttblpoblanketbannersingle.AddttblpoblanketbannersingleRow((pdspoblanketbannerDataSet.ttblpoblanketbannersingleRow)ttblpoblanketbannersingleRow);
          
         
         NLogLoggerP.Trace("POERBLogOff - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBLogOff(ref pdsContext, ref pdspoblanketbanner, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBLogOff - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketbanner); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoblanketbanner.ttblpoblanketbannersingle.Count > 0)
         {
            result.poblanketbannersingle = Poblanketbannersingle.BuildPoblanketbannersingleFromRow(pdspoblanketbanner.ttblpoblanketbannersingle[0]);
         }
                    
          
         return result;
          
      }

      public Poblanketheadersingle POERBDisplayBlanketHeader(Poblanketheadercriteria poblanketheadercriteria)
      {   
         var result = new Poblanketheadersingle();
         
         var pdspoblanketheader = new pdspoblanketheaderDataSet();
            
         DataRow ttblpoblanketheadercriteriaCriteria = pdspoblanketheader.ttblpoblanketheadercriteria.NewttblpoblanketheadercriteriaRow();
         Poblanketheadercriteria.UpdateRowFromPoblanketheadercriteria(ref ttblpoblanketheadercriteriaCriteria, poblanketheadercriteria);
         pdspoblanketheader.ttblpoblanketheadercriteria.AddttblpoblanketheadercriteriaRow((pdspoblanketheaderDataSet.ttblpoblanketheadercriteriaRow)ttblpoblanketheadercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBDisplayBlanketHeader - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBDisplayBlanketHeader(ref pdsContext, ref pdspoblanketheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBDisplayBlanketHeader - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketheader); 
    
         if (pdspoblanketheader.ttblpoblanketheadersingle.Count > 0) 
         { 
             result = Poblanketheadersingle.BuildPoblanketheadersingleFromRow(pdspoblanketheader.ttblpoblanketheadersingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketheadersingle POERBUpdateBlanketHeaderShipViaTy(AspoentryPOERBUpdateBlanketHeaderShipViaTyRequestAPI AspoentryPOERBUpdateBlanketHeaderShipViaTyRequestAPI)
      {   
         var result = new Poblanketheadersingle();
         
         var pdspoblanketheader = new pdspoblanketheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketheadercriteriaRow = pdspoblanketheader.ttblpoblanketheadercriteria.NewttblpoblanketheadercriteriaRow();
         Poblanketheadercriteria.UpdateRowFromPoblanketheadercriteria(ref ttblpoblanketheadercriteriaRow, AspoentryPOERBUpdateBlanketHeaderShipViaTyRequestAPI.poblanketheadercriteria);
         pdspoblanketheader.ttblpoblanketheadercriteria.AddttblpoblanketheadercriteriaRow((pdspoblanketheaderDataSet.ttblpoblanketheadercriteriaRow)ttblpoblanketheadercriteriaRow);
          
         DataRow ttblpoblanketheadersingleRow = pdspoblanketheader.ttblpoblanketheadersingle.NewttblpoblanketheadersingleRow();
         Poblanketheadersingle.UpdateRowFromPoblanketheadersingle(ref ttblpoblanketheadersingleRow, AspoentryPOERBUpdateBlanketHeaderShipViaTyRequestAPI.poblanketheadersingle);
         pdspoblanketheader.ttblpoblanketheadersingle.AddttblpoblanketheadersingleRow((pdspoblanketheaderDataSet.ttblpoblanketheadersingleRow)ttblpoblanketheadersingleRow);
          
         
         NLogLoggerP.Trace("POERBUpdateBlanketHeaderShipViaTy - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBUpdateBlanketHeaderShipViaTy(ref pdsContext, ref pdspoblanketheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBUpdateBlanketHeaderShipViaTy - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketheader); 
    
         if (pdspoblanketheader.ttblpoblanketheadersingle.Count > 0) 
         { 
             result = Poblanketheadersingle.BuildPoblanketheadersingleFromRow(pdspoblanketheader.ttblpoblanketheadersingle[0]);
         } 
              
          
         return result;
          
      }

      public Poblanketheadersingle POERBUpdateBlanketHeader(AspoentryPOERBUpdateBlanketHeaderRequestAPI AspoentryPOERBUpdateBlanketHeaderRequestAPI)
      {   
         var result = new Poblanketheadersingle();
         
         var pdspoblanketheader = new pdspoblanketheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketheadercriteriaRow = pdspoblanketheader.ttblpoblanketheadercriteria.NewttblpoblanketheadercriteriaRow();
         Poblanketheadercriteria.UpdateRowFromPoblanketheadercriteria(ref ttblpoblanketheadercriteriaRow, AspoentryPOERBUpdateBlanketHeaderRequestAPI.poblanketheadercriteria);
         pdspoblanketheader.ttblpoblanketheadercriteria.AddttblpoblanketheadercriteriaRow((pdspoblanketheaderDataSet.ttblpoblanketheadercriteriaRow)ttblpoblanketheadercriteriaRow);
          
         DataRow ttblpoblanketheadersingleRow = pdspoblanketheader.ttblpoblanketheadersingle.NewttblpoblanketheadersingleRow();
         Poblanketheadersingle.UpdateRowFromPoblanketheadersingle(ref ttblpoblanketheadersingleRow, AspoentryPOERBUpdateBlanketHeaderRequestAPI.poblanketheadersingle);
         pdspoblanketheader.ttblpoblanketheadersingle.AddttblpoblanketheadersingleRow((pdspoblanketheaderDataSet.ttblpoblanketheadersingleRow)ttblpoblanketheadersingleRow);
          
         
         NLogLoggerP.Trace("POERBUpdateBlanketHeader - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBUpdateBlanketHeader(ref pdsContext, ref pdspoblanketheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBUpdateBlanketHeader - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketheader); 
    
         if (pdspoblanketheader.ttblpoblanketheadersingle.Count > 0) 
         { 
             result = Poblanketheadersingle.BuildPoblanketheadersingleFromRow(pdspoblanketheader.ttblpoblanketheadersingle[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOERBBuildBlanketLinesResponseAPI POERBBuildBlanketLines(Poblanketlinescriteria poblanketlinescriteria)
      {   
         var result = new AspoentryPOERBBuildBlanketLinesResponseAPI();
         
         var pdspoblanketlines = new pdspoblanketlinesDataSet();
            
         DataRow ttblpoblanketlinescriteriaCriteria = pdspoblanketlines.ttblpoblanketlinescriteria.NewttblpoblanketlinescriteriaRow();
         Poblanketlinescriteria.UpdateRowFromPoblanketlinescriteria(ref ttblpoblanketlinescriteriaCriteria, poblanketlinescriteria);
         pdspoblanketlines.ttblpoblanketlinescriteria.AddttblpoblanketlinescriteriaRow((pdspoblanketlinesDataSet.ttblpoblanketlinescriteriaRow)ttblpoblanketlinescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBBuildBlanketLines - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBBuildBlanketLines(ref pdsContext, ref pdspoblanketlines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBBuildBlanketLines - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketlines); 
    
         foreach (DataRow row in pdspoblanketlines.ttblpoblanketlinesresults)
         {
            result.poblanketlinesresults.Add(Poblanketlinesresults.BuildPoblanketlinesresultsFromRow(row));
         }     
         if (pdspoblanketlines.ttblpoblanketlinessingle.Count > 0)
         {
            result.poblanketlinessingle = Poblanketlinessingle.BuildPoblanketlinessingleFromRow(pdspoblanketlines.ttblpoblanketlinessingle[0]);
         }
                    
         foreach (DataRow row in pdspoblanketlines.ttblpoblanketlinesupdateresults)
         {
            result.poblanketlinesupdateresults.Add(Poblanketlinesupdateresults.BuildPoblanketlinesupdateresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOERBUpdateBlanketLineResponseAPI POERBUpdateBlanketLine(AspoentryPOERBUpdateBlanketLineRequestAPI AspoentryPOERBUpdateBlanketLineRequestAPI)
      {   
         var result = new AspoentryPOERBUpdateBlanketLineResponseAPI();
         
         var pdspoblanketlines = new pdspoblanketlinesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketlinescriteriaRow = pdspoblanketlines.ttblpoblanketlinescriteria.NewttblpoblanketlinescriteriaRow();
         Poblanketlinescriteria.UpdateRowFromPoblanketlinescriteria(ref ttblpoblanketlinescriteriaRow, AspoentryPOERBUpdateBlanketLineRequestAPI.poblanketlinescriteria);
         pdspoblanketlines.ttblpoblanketlinescriteria.AddttblpoblanketlinescriteriaRow((pdspoblanketlinesDataSet.ttblpoblanketlinescriteriaRow)ttblpoblanketlinescriteriaRow);
          
         foreach (var obj in AspoentryPOERBUpdateBlanketLineRequestAPI.poblanketlinesresults)
         {
            DataRow ttblpoblanketlinesresultsRow = pdspoblanketlines.ttblpoblanketlinesresults.NewttblpoblanketlinesresultsRow();
            Poblanketlinesresults.UpdateRowFromPoblanketlinesresults(ref ttblpoblanketlinesresultsRow, obj);
            pdspoblanketlines.ttblpoblanketlinesresults.AddttblpoblanketlinesresultsRow((pdspoblanketlinesDataSet.ttblpoblanketlinesresultsRow)ttblpoblanketlinesresultsRow);
         }
          
         DataRow ttblpoblanketlinessingleRow = pdspoblanketlines.ttblpoblanketlinessingle.NewttblpoblanketlinessingleRow();
         Poblanketlinessingle.UpdateRowFromPoblanketlinessingle(ref ttblpoblanketlinessingleRow, AspoentryPOERBUpdateBlanketLineRequestAPI.poblanketlinessingle);
         pdspoblanketlines.ttblpoblanketlinessingle.AddttblpoblanketlinessingleRow((pdspoblanketlinesDataSet.ttblpoblanketlinessingleRow)ttblpoblanketlinessingleRow);
          
         
         NLogLoggerP.Trace("POERBUpdateBlanketLine - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBUpdateBlanketLine(ref pdsContext, ref pdspoblanketlines, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBUpdateBlanketLine - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketlines); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspoblanketlines.ttblpoblanketlinesresults)
         {
            result.poblanketlinesresults.Add(Poblanketlinesresults.BuildPoblanketlinesresultsFromRow(row));
         }     
         if (pdspoblanketlines.ttblpoblanketlinessingle.Count > 0)
         {
            result.poblanketlinessingle = Poblanketlinessingle.BuildPoblanketlinessingleFromRow(pdspoblanketlines.ttblpoblanketlinessingle[0]);
         }
                    
         foreach (DataRow row in pdspoblanketlines.ttblpoblanketlinesupdateresults)
         {
            result.poblanketlinesupdateresults.Add(Poblanketlinesupdateresults.BuildPoblanketlinesupdateresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOERBInitBlanketUpdByReleaseResponseAPI POERBInitBlanketUpdByRelease(Poblanketupdbyreleasecrit poblanketupdbyreleasecrit)
      {   
         var result = new AspoentryPOERBInitBlanketUpdByReleaseResponseAPI();
         
         var pdspoblanketupdbyrelease = new pdspoblanketupdbyreleaseDataSet();
            
         DataRow ttblpoblanketupdbyreleasecritCriteria = pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.NewttblpoblanketupdbyreleasecritRow();
         Poblanketupdbyreleasecrit.UpdateRowFromPoblanketupdbyreleasecrit(ref ttblpoblanketupdbyreleasecritCriteria, poblanketupdbyreleasecrit);
         pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.AddttblpoblanketupdbyreleasecritRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyreleasecritRow)ttblpoblanketupdbyreleasecritCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POERBInitBlanketUpdByRelease - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBInitBlanketUpdByRelease(ref pdsContext, ref pdspoblanketupdbyrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBInitBlanketUpdByRelease - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketupdbyrelease); 
    
         if (pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.Count > 0)
         {
            result.poblanketupdbyreleasesingle = Poblanketupdbyreleasesingle.BuildPoblanketupdbyreleasesingleFromRow(pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle[0]);
         }
                    
         foreach (DataRow row in pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults)
         {
            result.poblanketupdbyrelresults.Add(Poblanketupdbyrelresults.BuildPoblanketupdbyrelresultsFromRow(row));
         }     
         foreach (DataRow row in pdspoblanketupdbyrelease.ttblpoblanketupdbyrelupdresults)
         {
            result.poblanketupdbyrelupdresults.Add(Poblanketupdbyrelupdresults.BuildPoblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOERBBlanketUpdByReleaseUpdateResponseAPI POERBBlanketUpdByReleaseUpdate(AspoentryPOERBBlanketUpdByReleaseUpdateRequestAPI AspoentryPOERBBlanketUpdByReleaseUpdateRequestAPI)
      {   
         var result = new AspoentryPOERBBlanketUpdByReleaseUpdateResponseAPI();
         
         var pdspoblanketupdbyrelease = new pdspoblanketupdbyreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketupdbyreleasecritRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.NewttblpoblanketupdbyreleasecritRow();
         Poblanketupdbyreleasecrit.UpdateRowFromPoblanketupdbyreleasecrit(ref ttblpoblanketupdbyreleasecritRow, AspoentryPOERBBlanketUpdByReleaseUpdateRequestAPI.poblanketupdbyreleasecrit);
         pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.AddttblpoblanketupdbyreleasecritRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyreleasecritRow)ttblpoblanketupdbyreleasecritRow);
          
         DataRow ttblpoblanketupdbyreleasesingleRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.NewttblpoblanketupdbyreleasesingleRow();
         Poblanketupdbyreleasesingle.UpdateRowFromPoblanketupdbyreleasesingle(ref ttblpoblanketupdbyreleasesingleRow, AspoentryPOERBBlanketUpdByReleaseUpdateRequestAPI.poblanketupdbyreleasesingle);
         pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.AddttblpoblanketupdbyreleasesingleRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyreleasesingleRow)ttblpoblanketupdbyreleasesingleRow);
          
         foreach (var obj in AspoentryPOERBBlanketUpdByReleaseUpdateRequestAPI.poblanketupdbyrelresults)
         {
            DataRow ttblpoblanketupdbyrelresultsRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults.NewttblpoblanketupdbyrelresultsRow();
            Poblanketupdbyrelresults.UpdateRowFromPoblanketupdbyrelresults(ref ttblpoblanketupdbyrelresultsRow, obj);
            pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults.AddttblpoblanketupdbyrelresultsRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyrelresultsRow)ttblpoblanketupdbyrelresultsRow);
         }
          
         
         NLogLoggerP.Trace("POERBBlanketUpdByReleaseUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBBlanketUpdByReleaseUpdate(ref pdsContext, ref pdspoblanketupdbyrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBBlanketUpdByReleaseUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketupdbyrelease); 
    
         if (pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.Count > 0)
         {
            result.poblanketupdbyreleasesingle = Poblanketupdbyreleasesingle.BuildPoblanketupdbyreleasesingleFromRow(pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle[0]);
         }
                    
         foreach (DataRow row in pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults)
         {
            result.poblanketupdbyrelresults.Add(Poblanketupdbyrelresults.BuildPoblanketupdbyrelresultsFromRow(row));
         }     
         foreach (DataRow row in pdspoblanketupdbyrelease.ttblpoblanketupdbyrelupdresults)
         {
            result.poblanketupdbyrelupdresults.Add(Poblanketupdbyrelupdresults.BuildPoblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPOERBBlanketUpdByReleaseFinalUpdateResponseAPI POERBBlanketUpdByReleaseFinalUpdate(AspoentryPOERBBlanketUpdByReleaseFinalUpdateRequestAPI AspoentryPOERBBlanketUpdByReleaseFinalUpdateRequestAPI)
      {   
         var result = new AspoentryPOERBBlanketUpdByReleaseFinalUpdateResponseAPI();
         
         var pdspoblanketupdbyrelease = new pdspoblanketupdbyreleaseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoblanketupdbyreleasecritRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.NewttblpoblanketupdbyreleasecritRow();
         Poblanketupdbyreleasecrit.UpdateRowFromPoblanketupdbyreleasecrit(ref ttblpoblanketupdbyreleasecritRow, AspoentryPOERBBlanketUpdByReleaseFinalUpdateRequestAPI.poblanketupdbyreleasecrit);
         pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasecrit.AddttblpoblanketupdbyreleasecritRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyreleasecritRow)ttblpoblanketupdbyreleasecritRow);
          
         DataRow ttblpoblanketupdbyreleasesingleRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.NewttblpoblanketupdbyreleasesingleRow();
         Poblanketupdbyreleasesingle.UpdateRowFromPoblanketupdbyreleasesingle(ref ttblpoblanketupdbyreleasesingleRow, AspoentryPOERBBlanketUpdByReleaseFinalUpdateRequestAPI.poblanketupdbyreleasesingle);
         pdspoblanketupdbyrelease.ttblpoblanketupdbyreleasesingle.AddttblpoblanketupdbyreleasesingleRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyreleasesingleRow)ttblpoblanketupdbyreleasesingleRow);
          
         foreach (var obj in AspoentryPOERBBlanketUpdByReleaseFinalUpdateRequestAPI.poblanketupdbyrelresults)
         {
            DataRow ttblpoblanketupdbyrelresultsRow = pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults.NewttblpoblanketupdbyrelresultsRow();
            Poblanketupdbyrelresults.UpdateRowFromPoblanketupdbyrelresults(ref ttblpoblanketupdbyrelresultsRow, obj);
            pdspoblanketupdbyrelease.ttblpoblanketupdbyrelresults.AddttblpoblanketupdbyrelresultsRow((pdspoblanketupdbyreleaseDataSet.ttblpoblanketupdbyrelresultsRow)ttblpoblanketupdbyrelresultsRow);
         }
          
         
         NLogLoggerP.Trace("POERBBlanketUpdByReleaseFinalUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POERBBlanketUpdByReleaseFinalUpdate(ref pdsContext, ref pdspoblanketupdbyrelease, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POERBBlanketUpdByReleaseFinalUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoblanketupdbyrelease); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspoblanketupdbyrelease.ttblpoblanketupdbyrelupdresults)
         {
            result.poblanketupdbyrelupdresults.Add(Poblanketupdbyrelupdresults.BuildPoblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspoentryPORRARLineDisplayResponseAPI PORRARLineDisplay(int iReportNo)
      {   
         var result = new AspoentryPORRARLineDisplayResponseAPI();
         
         var pdsporrarlinedspl = new pdsporrarlinedsplDataSet();
            
         var pdsporrarlinetotals = new pdsporrarlinetotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineDisplay - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineDisplay(ref pdsContext,  iReportNo, out pdsporrarlinedspl, out pdsporrarlinetotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineDisplay - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlinedspl); 
    
         foreach (DataRow row in pdsporrarlinedspl.ttblporrarlinedsplline)
         {
            result.porrarlinedsplline.Add(Porrarlinedsplline.BuildPorrarlinedspllineFromRow(row));
         }     
         if (pdsporrarlinetotals.ttblporrarlinetotals.Count > 0)
         {
            result.porrarlinetotals = Porrarlinetotals.BuildPorrarlinetotalsFromRow(pdsporrarlinetotals.ttblporrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public Porrarlineadd PORRARLineAddLeaveField(AspoentryPORRARLineAddLeaveFieldRequestAPI AspoentryPORRARLineAddLeaveFieldRequestAPI)
      {   
         var result = new Porrarlineadd();
         
         var pdsporrarlineadd = new pdsporrarlineaddDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarlineaddRow = pdsporrarlineadd.ttblporrarlineadd.NewttblporrarlineaddRow();
         Porrarlineadd.UpdateRowFromPorrarlineadd(ref ttblporrarlineaddRow, AspoentryPORRARLineAddLeaveFieldRequestAPI.porrarlineadd);
         pdsporrarlineadd.ttblporrarlineadd.AddttblporrarlineaddRow((pdsporrarlineaddDataSet.ttblporrarlineaddRow)ttblporrarlineaddRow);
          
         var  cFieldName = AspoentryPORRARLineAddLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("PORRARLineAddLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineAddLeaveField(ref pdsContext,  cFieldName, ref pdsporrarlineadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineAddLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineadd); 
    
         if (pdsporrarlineadd.ttblporrarlineadd.Count > 0) 
         { 
             result = Porrarlineadd.BuildPorrarlineaddFromRow(pdsporrarlineadd.ttblporrarlineadd[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPORRARLineAddCreateResponseAPI PORRARLineAddCreate(Porrarlineadd porrarlineadd)
      {   
         var result = new AspoentryPORRARLineAddCreateResponseAPI();
         
         var pdsporrarlineadd = new pdsporrarlineaddDataSet();
            
         var pdsporrarlinetotals = new pdsporrarlinetotalsDataSet();
            
         var pdsporrarlinedspl = new pdsporrarlinedsplDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblporrarlineaddCriteria = pdsporrarlineadd.ttblporrarlineadd.NewttblporrarlineaddRow();
         Porrarlineadd.UpdateRowFromPorrarlineadd(ref ttblporrarlineaddCriteria, porrarlineadd);
         pdsporrarlineadd.ttblporrarlineadd.AddttblporrarlineaddRow((pdsporrarlineaddDataSet.ttblporrarlineaddRow)ttblporrarlineaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineAddCreate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineAddCreate(ref pdsContext, ref pdsporrarlineadd, out pdsporrarlinetotals, out pdsporrarlinedspl, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineAddCreate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineadd); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsporrarlineadd.ttblporrarlineadd.Count > 0)
         {
            result.porrarlineadd = Porrarlineadd.BuildPorrarlineaddFromRow(pdsporrarlineadd.ttblporrarlineadd[0]);
         }
                    
         if (pdsporrarlinedspl.ttblporrarlinedsplline.Count > 0)
         {
            result.porrarlinedsplline = Porrarlinedsplline.BuildPorrarlinedspllineFromRow(pdsporrarlinedspl.ttblporrarlinedsplline[0]);
         }
                    
         if (pdsporrarlinetotals.ttblporrarlinetotals.Count > 0)
         {
            result.porrarlinetotals = Porrarlinetotals.BuildPorrarlinetotalsFromRow(pdsporrarlinetotals.ttblporrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPORRARLineChangeResponseAPI PORRARLineChange(Porrarlinechange porrarlinechange)
      {   
         var result = new AspoentryPORRARLineChangeResponseAPI();
         
         var pdsporrarlinechange = new pdsporrarlinechangeDataSet();
            
         var pdsporrarlinetotals = new pdsporrarlinetotalsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblporrarlinechangeCriteria = pdsporrarlinechange.ttblporrarlinechange.NewttblporrarlinechangeRow();
         Porrarlinechange.UpdateRowFromPorrarlinechange(ref ttblporrarlinechangeCriteria, porrarlinechange);
         pdsporrarlinechange.ttblporrarlinechange.AddttblporrarlinechangeRow((pdsporrarlinechangeDataSet.ttblporrarlinechangeRow)ttblporrarlinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineChange - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineChange(ref pdsContext, ref pdsporrarlinechange, out pdsporrarlinetotals, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineChange - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlinechange); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsporrarlinechange.ttblporrarlinechange.Count > 0)
         {
            result.porrarlinechange = Porrarlinechange.BuildPorrarlinechangeFromRow(pdsporrarlinechange.ttblporrarlinechange[0]);
         }
                    
         if (pdsporrarlinetotals.ttblporrarlinetotals.Count > 0)
         {
            result.porrarlinetotals = Porrarlinetotals.BuildPorrarlinetotalsFromRow(pdsporrarlinetotals.ttblporrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPORRARLineAcceptResponseAPI PORRARLineAccept(AspoentryPORRARLineAcceptRequestAPI AspoentryPORRARLineAcceptRequestAPI)
      {   
         var result = new AspoentryPORRARLineAcceptResponseAPI();
         
         var pdsporrarlineaccept = new pdsporrarlineacceptDataSet();
            
         var pdsporrarlinetotals = new pdsporrarlinetotalsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoentryPORRARLineAcceptRequestAPI.porrarlineaccept)
         {
            DataRow ttblporrarlineacceptRow = pdsporrarlineaccept.ttblporrarlineaccept.NewttblporrarlineacceptRow();
            Porrarlineaccept.UpdateRowFromPorrarlineaccept(ref ttblporrarlineacceptRow, obj);
            pdsporrarlineaccept.ttblporrarlineaccept.AddttblporrarlineacceptRow((pdsporrarlineacceptDataSet.ttblporrarlineacceptRow)ttblporrarlineacceptRow);
         }
          
         var  cAcceptType = AspoentryPORRARLineAcceptRequestAPI.cAcceptType;
            
         
         NLogLoggerP.Trace("PORRARLineAccept - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineAccept(ref pdsContext,  cAcceptType, ref pdsporrarlineaccept, out pdsporrarlinetotals, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineAccept - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineaccept); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsporrarlineaccept.ttblporrarlineaccept)
         {
            result.porrarlineaccept.Add(Porrarlineaccept.BuildPorrarlineacceptFromRow(row));
         }     
         if (pdsporrarlinetotals.ttblporrarlinetotals.Count > 0)
         {
            result.porrarlinetotals = Porrarlinetotals.BuildPorrarlinetotalsFromRow(pdsporrarlinetotals.ttblporrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public AspoentryPORRARLineLockUnlockResponseAPI PORRARLineLockUnlock(IEnumerable<Porrarlineaccept> porrarlineaccept)
      {   
         var result = new AspoentryPORRARLineLockUnlockResponseAPI();
         
         var pdsporrarlineaccept = new pdsporrarlineacceptDataSet();
            
         var pdsporrarlinetotals = new pdsporrarlinetotalsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in porrarlineaccept)
         {
             DataRow row = pdsporrarlineaccept.ttblporrarlineaccept.NewttblporrarlineacceptRow();
             Porrarlineaccept.UpdateRowFromPorrarlineaccept(ref row, obj);
             pdsporrarlineaccept.ttblporrarlineaccept.AddttblporrarlineacceptRow((pdsporrarlineacceptDataSet.ttblporrarlineacceptRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineLockUnlock - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineLockUnlock(ref pdsContext, ref pdsporrarlineaccept, out pdsporrarlinetotals, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineLockUnlock - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineaccept); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsporrarlineaccept.ttblporrarlineaccept)
         {
            result.porrarlineaccept.Add(Porrarlineaccept.BuildPorrarlineacceptFromRow(row));
         }     
         if (pdsporrarlinetotals.ttblporrarlinetotals.Count > 0)
         {
            result.porrarlinetotals = Porrarlinetotals.BuildPorrarlinetotalsFromRow(pdsporrarlinetotals.ttblporrarlinetotals[0]);
         }
                    
          
         return result;
          
      }

      public Porrarlineextend PORRARLineExtendRetrieve(Porrarlineextend porrarlineextend)
      {   
         var result = new Porrarlineextend();
         
         var pdsporrarlineextend = new pdsporrarlineextendDataSet();
            
         DataRow ttblporrarlineextendCriteria = pdsporrarlineextend.ttblporrarlineextend.NewttblporrarlineextendRow();
         Porrarlineextend.UpdateRowFromPorrarlineextend(ref ttblporrarlineextendCriteria, porrarlineextend);
         pdsporrarlineextend.ttblporrarlineextend.AddttblporrarlineextendRow((pdsporrarlineextendDataSet.ttblporrarlineextendRow)ttblporrarlineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineExtendRetrieve - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineExtendRetrieve(ref pdsContext, ref pdsporrarlineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineExtendRetrieve - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineextend); 
    
         if (pdsporrarlineextend.ttblporrarlineextend.Count > 0) 
         { 
             result = Porrarlineextend.BuildPorrarlineextendFromRow(pdsporrarlineextend.ttblporrarlineextend[0]);
         } 
              
          
         return result;
          
      }

      public Porrarlineextend PORRARLineExtendUpdate(Porrarlineextend porrarlineextend)
      {   
         var result = new Porrarlineextend();
         
         var pdsporrarlineextend = new pdsporrarlineextendDataSet();
            
         DataRow ttblporrarlineextendCriteria = pdsporrarlineextend.ttblporrarlineextend.NewttblporrarlineextendRow();
         Porrarlineextend.UpdateRowFromPorrarlineextend(ref ttblporrarlineextendCriteria, porrarlineextend);
         pdsporrarlineextend.ttblporrarlineextend.AddttblporrarlineextendRow((pdsporrarlineextendDataSet.ttblporrarlineextendRow)ttblporrarlineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineExtendUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineExtendUpdate(ref pdsContext, ref pdsporrarlineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineExtendUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineextend); 
    
         if (pdsporrarlineextend.ttblporrarlineextend.Count > 0) 
         { 
             result = Porrarlineextend.BuildPorrarlineextendFromRow(pdsporrarlineextend.ttblporrarlineextend[0]);
         } 
              
          
         return result;
          
      }

      public Porrarlineqtybreak PORRARLineQtyBreak(Porrarlineqtybreak porrarlineqtybreak)
      {   
         var result = new Porrarlineqtybreak();
         
         var pdsporrarlineqtybreak = new pdsporrarlineqtybreakDataSet();
            
         DataRow ttblporrarlineqtybreakCriteria = pdsporrarlineqtybreak.ttblporrarlineqtybreak.NewttblporrarlineqtybreakRow();
         Porrarlineqtybreak.UpdateRowFromPorrarlineqtybreak(ref ttblporrarlineqtybreakCriteria, porrarlineqtybreak);
         pdsporrarlineqtybreak.ttblporrarlineqtybreak.AddttblporrarlineqtybreakRow((pdsporrarlineqtybreakDataSet.ttblporrarlineqtybreakRow)ttblporrarlineqtybreakCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineQtyBreak - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineQtyBreak(ref pdsContext, ref pdsporrarlineqtybreak, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineQtyBreak - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlineqtybreak); 
    
         if (pdsporrarlineqtybreak.ttblporrarlineqtybreak.Count > 0) 
         { 
             result = Porrarlineqtybreak.BuildPorrarlineqtybreakFromRow(pdsporrarlineqtybreak.ttblporrarlineqtybreak[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Porrarlinemsgresults> PORRARLineMessages(Porrarlinemsgcriteria porrarlinemsgcriteria)
      {   
         var results = new List<Porrarlinemsgresults>();
         
         var pdsporrarlinemsg = new pdsporrarlinemsgDataSet();
            
         DataRow ttblporrarlinemsgcriteriaCriteria = pdsporrarlinemsg.ttblporrarlinemsgcriteria.NewttblporrarlinemsgcriteriaRow();
         Porrarlinemsgcriteria.UpdateRowFromPorrarlinemsgcriteria(ref ttblporrarlinemsgcriteriaCriteria, porrarlinemsgcriteria);
         pdsporrarlinemsg.ttblporrarlinemsgcriteria.AddttblporrarlinemsgcriteriaRow((pdsporrarlinemsgDataSet.ttblporrarlinemsgcriteriaRow)ttblporrarlinemsgcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARLineMessages - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARLineMessages(ref pdsContext, ref pdsporrarlinemsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARLineMessages - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarlinemsg); 
    
            foreach (DataRow row in pdsporrarlinemsg.ttblporrarlinemsgresults)
            {
                results.Add(Porrarlinemsgresults.BuildPorrarlinemsgresultsFromRow(row));
            }
            return results;
        
      }

      public void PORRARReportFullRefreshRun(AspoentryPORRARReportFullRefreshRunRequestAPI AspoentryPORRARReportFullRefreshRunRequestAPI)
      {   
         
         var pdsporrarreptfullrefreshrun = new pdsporrarreptfullrefreshrunDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporrarreptfullrefreshrunRow = pdsporrarreptfullrefreshrun.ttblporrarreptfullrefreshrun.NewttblporrarreptfullrefreshrunRow();
         Porrarreptfullrefreshrun.UpdateRowFromPorrarreptfullrefreshrun(ref ttblporrarreptfullrefreshrunRow, AspoentryPORRARReportFullRefreshRunRequestAPI.porrarreptfullrefreshrun);
         pdsporrarreptfullrefreshrun.ttblporrarreptfullrefreshrun.AddttblporrarreptfullrefreshrunRow((pdsporrarreptfullrefreshrunDataSet.ttblporrarreptfullrefreshrunRow)ttblporrarreptfullrefreshrunRow);
          
         foreach (var obj in AspoentryPORRARReportFullRefreshRunRequestAPI.porrarreptfullrefreshrunrpts)
         {
            DataRow ttblporrarreptfullrefreshrunrptsRow = pdsporrarreptfullrefreshrun.ttblporrarreptfullrefreshrunrpts.NewttblporrarreptfullrefreshrunrptsRow();
            Porrarreptfullrefreshrunrpts.UpdateRowFromPorrarreptfullrefreshrunrpts(ref ttblporrarreptfullrefreshrunrptsRow, obj);
            pdsporrarreptfullrefreshrun.ttblporrarreptfullrefreshrunrpts.AddttblporrarreptfullrefreshrunrptsRow((pdsporrarreptfullrefreshrunDataSet.ttblporrarreptfullrefreshrunrptsRow)ttblporrarreptfullrefreshrunrptsRow);
         }
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspoentryPORRARReportFullRefreshRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("PORRARReportFullRefreshRun - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportFullRefreshRun(ref pdsContext,  pdsporrarreptfullrefreshrun,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportFullRefreshRun - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporrarreptfullrefreshrun);
      }

      public void PORRARReportCheckDrilldownAccess(int iReportNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportCheckDrilldownAccess - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportCheckDrilldownAccess(ref pdsContext,  iReportNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportCheckDrilldownAccess - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void PORRARReportUnlockHeader(int iReportNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PORRARReportUnlockHeader - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.PORRARReportUnlockHeader(ref pdsContext,  iReportNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PORRARReportUnlockHeader - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AspoentryPOEIRefreshDocumentsResponseAPI POEIRefreshDocuments(Poeilistcriteria poeilistcriteria)
      {   
         var result = new AspoentryPOEIRefreshDocumentsResponseAPI();
         
         var pdspoeilist = new pdspoeilistDataSet();
            
         DataRow ttblpoeilistcriteriaCriteria = pdspoeilist.ttblpoeilistcriteria.NewttblpoeilistcriteriaRow();
         Poeilistcriteria.UpdateRowFromPoeilistcriteria(ref ttblpoeilistcriteriaCriteria, poeilistcriteria);
         pdspoeilist.ttblpoeilistcriteria.AddttblpoeilistcriteriaRow((pdspoeilistDataSet.ttblpoeilistcriteriaRow)ttblpoeilistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("POEIRefreshDocuments - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIRefreshDocuments(ref pdsContext, ref pdspoeilist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("POEIRefreshDocuments - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilist); 
    
         foreach (DataRow row in pdspoeilist.ttblpoeilistresults)
         {
            result.poeilistresults.Add(Poeilistresults.BuildPoeilistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Poeicancelwork POEICancelWork(Poeicancelwork poeicancelwork)
      {   
         var result = new Poeicancelwork();
         
         var pdspoeicancelwork = new pdspoeicancelworkDataSet();
            
         DataRow ttblpoeicancelworkCriteria = pdspoeicancelwork.ttblpoeicancelwork.NewttblpoeicancelworkRow();
         Poeicancelwork.UpdateRowFromPoeicancelwork(ref ttblpoeicancelworkCriteria, poeicancelwork);
         pdspoeicancelwork.ttblpoeicancelwork.AddttblpoeicancelworkRow((pdspoeicancelworkDataSet.ttblpoeicancelworkRow)ttblpoeicancelworkCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEICancelWork - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEICancelWork(ref pdsContext, ref pdspoeicancelwork, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEICancelWork - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeicancelwork); 
    
         if (pdspoeicancelwork.ttblpoeicancelwork.Count > 0) 
         { 
             result = Poeicancelwork.BuildPoeicancelworkFromRow(pdspoeicancelwork.ttblpoeicancelwork[0]);
         } 
              
          
         return result;
          
      }

      public Poeifullreceipt POEIReceiptStart(AspoentryPOEIReceiptStartRequestAPI AspoentryPOEIReceiptStartRequestAPI)
      {   
         var result = new Poeifullreceipt();
         
         var pdspoeifullreceipt = new pdspoeifullreceiptDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeifullreceiptRow = pdspoeifullreceipt.ttblpoeifullreceipt.NewttblpoeifullreceiptRow();
         Poeifullreceipt.UpdateRowFromPoeifullreceipt(ref ttblpoeifullreceiptRow, AspoentryPOEIReceiptStartRequestAPI.poeifullreceipt);
         pdspoeifullreceipt.ttblpoeifullreceipt.AddttblpoeifullreceiptRow((pdspoeifullreceiptDataSet.ttblpoeifullreceiptRow)ttblpoeifullreceiptRow);
          
         var  cType = AspoentryPOEIReceiptStartRequestAPI.cType;
            
         
         NLogLoggerP.Trace("POEIReceiptStart - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIReceiptStart(ref pdsContext,  cType, ref pdspoeifullreceipt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIReceiptStart - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeifullreceipt); 
    
         if (pdspoeifullreceipt.ttblpoeifullreceipt.Count > 0) 
         { 
             result = Poeifullreceipt.BuildPoeifullreceiptFromRow(pdspoeifullreceipt.ttblpoeifullreceipt[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOEIReceiptFinishResponseAPI POEIReceiptFinish(Poeifullreceipt poeifullreceipt)
      {   
         var result = new AspoentryPOEIReceiptFinishResponseAPI();
         
         var pdspoeifullreceipt = new pdspoeifullreceiptDataSet();
            
         var pdspoeivaproportion = new pdspoeivaproportionDataSet();
            
         DataRow ttblpoeifullreceiptCriteria = pdspoeifullreceipt.ttblpoeifullreceipt.NewttblpoeifullreceiptRow();
         Poeifullreceipt.UpdateRowFromPoeifullreceipt(ref ttblpoeifullreceiptCriteria, poeifullreceipt);
         pdspoeifullreceipt.ttblpoeifullreceipt.AddttblpoeifullreceiptRow((pdspoeifullreceiptDataSet.ttblpoeifullreceiptRow)ttblpoeifullreceiptCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIReceiptFinish - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIReceiptFinish(ref pdsContext, ref pdspoeifullreceipt, out pdspoeivaproportion, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEIReceiptFinish - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeifullreceipt); 
    
         if (pdspoeifullreceipt.ttblpoeifullreceipt.Count > 0)
         {
            result.poeifullreceipt = Poeifullreceipt.BuildPoeifullreceiptFromRow(pdspoeifullreceipt.ttblpoeifullreceipt[0]);
         }
                    
         if (pdspoeivaproportion.ttblpoeivaproportion.Count > 0)
         {
            result.poeivaproportion = Poeivaproportion.BuildPoeivaproportionFromRow(pdspoeivaproportion.ttblpoeivaproportion[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void POEIReceiptReportPrint(AspoentryPOEIReceiptReportPrintRequestAPI AspoentryPOEIReceiptReportPrintRequestAPI)
      {   
         
         var pdsporeceiptreport = new pdsporeceiptreportDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblporeceiptreportRow = pdsporeceiptreport.ttblporeceiptreport.NewttblporeceiptreportRow();
         Poreceiptreport.UpdateRowFromPoreceiptreport(ref ttblporeceiptreportRow, AspoentryPOEIReceiptReportPrintRequestAPI.poreceiptreport);
         pdsporeceiptreport.ttblporeceiptreport.AddttblporeceiptreportRow((pdsporeceiptreportDataSet.ttblporeceiptreportRow)ttblporeceiptreportRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspoentryPOEIReceiptReportPrintRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         var  pvJrnlno = AspoentryPOEIReceiptReportPrintRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("POEIReceiptReportPrint - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIReceiptReportPrint(ref pdsContext,  pdsporeceiptreport,  pdsprintersettings,  pvJrnlno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIReceiptReportPrint - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsporeceiptreport);
      }

      public Poeifinalinit POEIFinalInit(int iJrnlNo, string cWhse)
      {   
         var result = new Poeifinalinit();
         
         var pdspoeifinalinit = new pdspoeifinalinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIFinalInit - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIFinalInit(ref pdsContext,  iJrnlNo,  cWhse, out pdspoeifinalinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIFinalInit - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeifinalinit); 
    
         if (pdspoeifinalinit.ttblpoeifinalinit.Count > 0) 
         { 
             result = Poeifinalinit.BuildPoeifinalinitFromRow(pdspoeifinalinit.ttblpoeifinalinit[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> POEIFinalUpdate(Poeifinalupdate poeifinalupdate)
      {   
         var results = new List<Messaging>();
         
         var pdspoeifinalupdate = new pdspoeifinalupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpoeifinalupdateCriteria = pdspoeifinalupdate.ttblpoeifinalupdate.NewttblpoeifinalupdateRow();
         Poeifinalupdate.UpdateRowFromPoeifinalupdate(ref ttblpoeifinalupdateCriteria, poeifinalupdate);
         pdspoeifinalupdate.ttblpoeifinalupdate.AddttblpoeifinalupdateRow((pdspoeifinalupdateDataSet.ttblpoeifinalupdateRow)ttblpoeifinalupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIFinalUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIFinalUpdate(ref pdsContext,  pdspoeifinalupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIFinalUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeifinalupdate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void POEIFinalUpdateAfter(int iJrnlNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIFinalUpdateAfter - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIFinalUpdateAfter(ref pdsContext,  iJrnlNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIFinalUpdateAfter - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public string POEICheckDrillDownAccess(Poeidrilldown poeidrilldown)
      {   
          
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEICheckDrillDownAccess - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEICheckDrillDownAccess(ref pdsContext,  pdspoeidrilldown, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEICheckDrillDownAccess - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         return cWarningMessage;
      
      }

      public AspoentryPOEIInitializeHeaderResponseAPI POEIInitializeHeader(Poeidrilldown poeidrilldown)
      {   
         var result = new AspoentryPOEIInitializeHeaderResponseAPI();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeidetailheader = new pdspoeidetailheaderDataSet();
            
         var pdspoeidetailtotal = new pdspoeidetailtotalDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIInitializeHeader - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIInitializeHeader(ref pdsContext,  pdspoeidrilldown, out pdspoeidetailheader, out pdspoeidetailtotal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIInitializeHeader - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
         if (pdspoeidetailheader.ttblpoeidetailheader.Count > 0)
         {
            result.poeidetailheader = Poeidetailheader.BuildPoeidetailheaderFromRow(pdspoeidetailheader.ttblpoeidetailheader[0]);
         }
                    
         if (pdspoeidetailtotal.ttblpoeidetailtotal.Count > 0)
         {
            result.poeidetailtotal = Poeidetailtotal.BuildPoeidetailtotalFromRow(pdspoeidetailtotal.ttblpoeidetailtotal[0]);
         }
                    
          
         return result;
          
      }

      public void POEIUpdateHeader(Poeidetailheader poeidetailheader)
      {   
         
         var pdspoeidetailheader = new pdspoeidetailheaderDataSet();
            
         DataRow ttblpoeidetailheaderCriteria = pdspoeidetailheader.ttblpoeidetailheader.NewttblpoeidetailheaderRow();
         Poeidetailheader.UpdateRowFromPoeidetailheader(ref ttblpoeidetailheaderCriteria, poeidetailheader);
         pdspoeidetailheader.ttblpoeidetailheader.AddttblpoeidetailheaderRow((pdspoeidetailheaderDataSet.ttblpoeidetailheaderRow)ttblpoeidetailheaderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIUpdateHeader - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIUpdateHeader(ref pdsContext,  pdspoeidetailheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIUpdateHeader - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidetailheader);
      }

      public IEnumerable<Poeilinedetail> POEIDisplayLines(Poeidrilldown poeidrilldown)
      {   
         var results = new List<Poeilinedetail>();
         
         var pdspoeidrilldown = new pdspoeidrilldownDataSet();
            
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         DataRow ttblpoeidrilldownCriteria = pdspoeidrilldown.ttblpoeidrilldown.NewttblpoeidrilldownRow();
         Poeidrilldown.UpdateRowFromPoeidrilldown(ref ttblpoeidrilldownCriteria, poeidrilldown);
         pdspoeidrilldown.ttblpoeidrilldown.AddttblpoeidrilldownRow((pdspoeidrilldownDataSet.ttblpoeidrilldownRow)ttblpoeidrilldownCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEIDisplayLines - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEIDisplayLines(ref pdsContext,  pdspoeidrilldown, out pdspoeilinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEIDisplayLines - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeidrilldown); 
    
            foreach (DataRow row in pdspoeilinedetail.ttblpoeilinedetail)
            {
                results.Add(Poeilinedetail.BuildPoeilinedetailFromRow(row));
            }
            return results;
        
      }

      public AspoentryPOEILineUpdateResponseAPI POEILineUpdate(Poeilinedetail poeilinedetail)
      {   
         var result = new AspoentryPOEILineUpdateResponseAPI();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         var pdspoeidetailtotal = new pdspoeidetailtotalDataSet();
            
         DataRow ttblpoeilinedetailCriteria = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailCriteria, poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineUpdate(ref pdsContext, ref pdspoeilinedetail, out pdspoeidetailtotal, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEILineUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdspoeidetailtotal.ttblpoeidetailtotal.Count > 0)
         {
            result.poeidetailtotal = Poeidetailtotal.BuildPoeidetailtotalFromRow(pdspoeidetailtotal.ttblpoeidetailtotal[0]);
         }
                    
         if (pdspoeilinedetail.ttblpoeilinedetail.Count > 0)
         {
            result.poeilinedetail = Poeilinedetail.BuildPoeilinedetailFromRow(pdspoeilinedetail.ttblpoeilinedetail[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Poeilinedetail POEILineLeaveField(AspoentryPOEILineLeaveFieldRequestAPI AspoentryPOEILineLeaveFieldRequestAPI)
      {   
         var result = new Poeilinedetail();
         
         var pdspoeilinedetail = new pdspoeilinedetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoeilinedetailRow = pdspoeilinedetail.ttblpoeilinedetail.NewttblpoeilinedetailRow();
         Poeilinedetail.UpdateRowFromPoeilinedetail(ref ttblpoeilinedetailRow, AspoentryPOEILineLeaveFieldRequestAPI.poeilinedetail);
         pdspoeilinedetail.ttblpoeilinedetail.AddttblpoeilinedetailRow((pdspoeilinedetailDataSet.ttblpoeilinedetailRow)ttblpoeilinedetailRow);
          
         var  pvFieldname = AspoentryPOEILineLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("POEILineLeaveField - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineLeaveField(ref pdsContext,  pvFieldname, ref pdspoeilinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineLeaveField - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinedetail); 
    
         if (pdspoeilinedetail.ttblpoeilinedetail.Count > 0) 
         { 
             result = Poeilinedetail.BuildPoeilinedetailFromRow(pdspoeilinedetail.ttblpoeilinedetail[0]);
         } 
              
          
         return result;
          
      }

      public AspoentryPOEILineSubSuperUpdateResponseAPI POEILineSubSuperUpdate(Poeilinesubsuper poeilinesubsuper)
      {   
         var result = new AspoentryPOEILineSubSuperUpdateResponseAPI();
         
         var pdspoeilinesubsuper = new pdspoeilinesubsuperDataSet();
            
         DataRow ttblpoeilinesubsuperCriteria = pdspoeilinesubsuper.ttblpoeilinesubsuper.NewttblpoeilinesubsuperRow();
         Poeilinesubsuper.UpdateRowFromPoeilinesubsuper(ref ttblpoeilinesubsuperCriteria, poeilinesubsuper);
         pdspoeilinesubsuper.ttblpoeilinesubsuper.AddttblpoeilinesubsuperRow((pdspoeilinesubsuperDataSet.ttblpoeilinesubsuperRow)ttblpoeilinesubsuperCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineSubSuperUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineSubSuperUpdate(ref pdsContext, ref pdspoeilinesubsuper, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POEILineSubSuperUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinesubsuper); 
    
         if (pdspoeilinesubsuper.ttblpoeilinesubsuper.Count > 0)
         {
            result.poeilinesubsuper = Poeilinesubsuper.BuildPoeilinesubsuperFromRow(pdspoeilinesubsuper.ttblpoeilinesubsuper[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Poeilineextend POEILineExtendInitialize(Poeilineextend poeilineextend)
      {   
         var result = new Poeilineextend();
         
         var pdspoeilineextend = new pdspoeilineextendDataSet();
            
         DataRow ttblpoeilineextendCriteria = pdspoeilineextend.ttblpoeilineextend.NewttblpoeilineextendRow();
         Poeilineextend.UpdateRowFromPoeilineextend(ref ttblpoeilineextendCriteria, poeilineextend);
         pdspoeilineextend.ttblpoeilineextend.AddttblpoeilineextendRow((pdspoeilineextendDataSet.ttblpoeilineextendRow)ttblpoeilineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineExtendInitialize - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineExtendInitialize(ref pdsContext, ref pdspoeilineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineExtendInitialize - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineextend); 
    
         if (pdspoeilineextend.ttblpoeilineextend.Count > 0) 
         { 
             result = Poeilineextend.BuildPoeilineextendFromRow(pdspoeilineextend.ttblpoeilineextend[0]);
         } 
              
          
         return result;
          
      }

      public void POEILineExtendUpdate(Poeilineextend poeilineextend)
      {   
         
         var pdspoeilineextend = new pdspoeilineextendDataSet();
            
         DataRow ttblpoeilineextendCriteria = pdspoeilineextend.ttblpoeilineextend.NewttblpoeilineextendRow();
         Poeilineextend.UpdateRowFromPoeilineextend(ref ttblpoeilineextendCriteria, poeilineextend);
         pdspoeilineextend.ttblpoeilineextend.AddttblpoeilineextendRow((pdspoeilineextendDataSet.ttblpoeilineextendRow)ttblpoeilineextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineExtendUpdate - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineExtendUpdate(ref pdsContext,  pdspoeilineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineExtendUpdate - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilineextend);
      }

      public void POEILineReprice(Poeilinereprice poeilinereprice)
      {   
         
         var pdspoeilinereprice = new pdspoeilinerepriceDataSet();
            
         DataRow ttblpoeilinerepriceCriteria = pdspoeilinereprice.ttblpoeilinereprice.NewttblpoeilinerepriceRow();
         Poeilinereprice.UpdateRowFromPoeilinereprice(ref ttblpoeilinerepriceCriteria, poeilinereprice);
         pdspoeilinereprice.ttblpoeilinereprice.AddttblpoeilinerepriceRow((pdspoeilinerepriceDataSet.ttblpoeilinerepriceRow)ttblpoeilinerepriceCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POEILineReprice - Aspoentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoentryproxy = this.proxyAppObject.CreatePO_aspoentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoentryproxy.POEILineReprice(ref pdsContext,  pdspoeilinereprice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POEILineReprice - Aspoentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoeilinereprice);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  