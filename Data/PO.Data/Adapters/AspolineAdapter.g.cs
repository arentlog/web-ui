//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PO.Data.Adapters
{
   using com.infor.sxproxy.poproxy;
   using com.infor.sxproxy.poproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspolinelist;
   using Models.Pdsloadpolinesettings;
   using Models.Pdspolineinitialize;
   using Models.Pdspoline;
   using Models.Pdspolineretrieve;
   using Models.Pdspolineties;
   using Models.Pdsmessaging;
   using Models.Pdspolinecancelchange;
   using Models.Pdspolinenonstockhdr;
   using Models.Pdspolinenonstock;
   using Models.Pdspolinedelete;
   using Models.Pdspocoreallocation;
   using Models.Pdspocoreallocationupdate;
   using Models.Complex;

   public partial class AspolineAdapter : AdapterBase<pdsContextDataSet>
   {
      private POProxyAppObject proxyAppObject;
      
      public AspolineAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new POProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspolineAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Polinelistresults> LoadPOLineList(AspolineLoadPOLineListRequestAPI AspolineLoadPOLineListRequestAPI)
      {   
         var results = new List<Polinelistresults>();
         
         var pdspolinelist = new pdspolinelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  pvPono = AspolineLoadPOLineListRequestAPI.pvPono;
            
         var  pvPosuf = AspolineLoadPOLineListRequestAPI.pvPosuf;
            
         var  pvShowinactive = AspolineLoadPOLineListRequestAPI.pvShowinactive;
            
         
         NLogLoggerP.Trace("LoadPOLineList - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.LoadPOLineList(ref pdsContext,  pvPono,  pvPosuf,  pvShowinactive, out pdspolinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineList - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolinelist); 
    
            foreach (DataRow row in pdspolinelist.ttblpolinelistresults)
            {
                results.Add(Polinelistresults.BuildPolinelistresultsFromRow(row));
            }
            return results;
        
      }

      public Loadpolinesettings LoadPOLineSettings()
      {   
         var result = new Loadpolinesettings();
         
         var pdsloadpolinesettings = new pdsloadpolinesettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOLineSettings - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.LoadPOLineSettings(ref pdsContext, out pdsloadpolinesettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineSettings - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpolinesettings); 
    
         if (pdsloadpolinesettings.ttblloadpolinesettings.Count > 0) 
         { 
             result = Loadpolinesettings.BuildLoadpolinesettingsFromRow(pdsloadpolinesettings.ttblloadpolinesettings[0]);
         } 
              
          
         return result;
          
      }

      public Poline POLineInitialize(Polineinitializecriteria polineinitializecriteria)
      {   
         var result = new Poline();
         
         var pdspolineinitialize = new pdspolineinitializeDataSet();
            
         var pdspoline = new pdspolineDataSet();
            
         DataRow ttblpolineinitializecriteriaCriteria = pdspolineinitialize.ttblpolineinitializecriteria.NewttblpolineinitializecriteriaRow();
         Polineinitializecriteria.UpdateRowFromPolineinitializecriteria(ref ttblpolineinitializecriteriaCriteria, polineinitializecriteria);
         pdspolineinitialize.ttblpolineinitializecriteria.AddttblpolineinitializecriteriaRow((pdspolineinitializeDataSet.ttblpolineinitializecriteriaRow)ttblpolineinitializecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLineInitialize - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineInitialize(ref pdsContext,  pdspolineinitialize, out pdspoline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineInitialize - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolineinitialize); 
    
         if (pdspoline.ttblpoline.Count > 0) 
         { 
             result = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         } 
              
          
         return result;
          
      }

      public AspolinePOLineRetrieveResponseAPI POLineRetrieve(Polineretrievecriteria polineretrievecriteria)
      {   
         var result = new AspolinePOLineRetrieveResponseAPI();
         
         var pdspolineretrieve = new pdspolineretrieveDataSet();
            
         var pdspoline = new pdspolineDataSet();
            
         var pdspolineties = new pdspolinetiesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpolineretrievecriteriaCriteria = pdspolineretrieve.ttblpolineretrievecriteria.NewttblpolineretrievecriteriaRow();
         Polineretrievecriteria.UpdateRowFromPolineretrievecriteria(ref ttblpolineretrievecriteriaCriteria, polineretrievecriteria);
         pdspolineretrieve.ttblpolineretrievecriteria.AddttblpolineretrievecriteriaRow((pdspolineretrieveDataSet.ttblpolineretrievecriteriaRow)ttblpolineretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLineRetrieve - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineRetrieve(ref pdsContext,  pdspolineretrieve, out pdspoline, out pdspolineties, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("POLineRetrieve - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolineretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoline.ttblpoline.Count > 0)
         {
            result.poline = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         }
                    
         foreach (DataRow row in pdspolineties.ttblpolineties)
         {
            result.polineties.Add(Polineties.BuildPolinetiesFromRow(row));
         }     
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AspolinePOLineValidateResponseAPI POLineValidate(AspolinePOLineValidateRequestAPI AspolinePOLineValidateRequestAPI)
      {   
         var result = new AspolinePOLineValidateResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolineties = new pdspolinetiesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineValidateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         foreach (var obj in AspolinePOLineValidateRequestAPI.polineties)
         {
            DataRow ttblpolinetiesRow = pdspolineties.ttblpolineties.NewttblpolinetiesRow();
            Polineties.UpdateRowFromPolineties(ref ttblpolinetiesRow, obj);
            pdspolineties.ttblpolineties.AddttblpolinetiesRow((pdspolinetiesDataSet.ttblpolinetiesRow)ttblpolinetiesRow);
         }
          
         var  cMaintMode = AspolinePOLineValidateRequestAPI.cMaintMode;
            
         var  cChangeList = AspolinePOLineValidateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("POLineValidate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineValidate(ref pdsContext,  cMaintMode,  cChangeList, ref pdspoline,  pdspolineties, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("POLineValidate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoline.ttblpoline.Count > 0)
         {
            result.poline = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AspolinePOLineUpdateResponseAPI POLineUpdate(AspolinePOLineUpdateRequestAPI AspolinePOLineUpdateRequestAPI)
      {   
         var result = new AspolinePOLineUpdateResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolineties = new pdspolinetiesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineUpdateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         foreach (var obj in AspolinePOLineUpdateRequestAPI.polineties)
         {
            DataRow ttblpolinetiesRow = pdspolineties.ttblpolineties.NewttblpolinetiesRow();
            Polineties.UpdateRowFromPolineties(ref ttblpolinetiesRow, obj);
            pdspolineties.ttblpolineties.AddttblpolinetiesRow((pdspolinetiesDataSet.ttblpolinetiesRow)ttblpolinetiesRow);
         }
          
         var  cMaintMode = AspolinePOLineUpdateRequestAPI.cMaintMode;
            
         var  cChangeList = AspolinePOLineUpdateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("POLineUpdate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineUpdate(ref pdsContext,  cMaintMode,  cChangeList, ref pdspoline, ref pdspolineties, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("POLineUpdate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoline.ttblpoline.Count > 0)
         {
            result.poline = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         }
                    
         foreach (DataRow row in pdspolineties.ttblpolineties)
         {
            result.polineties.Add(Polineties.BuildPolinetiesFromRow(row));
         }     
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AspolinePOLineCreateResponseAPI POLineCreate(AspolinePOLineCreateRequestAPI AspolinePOLineCreateRequestAPI)
      {   
         var result = new AspolinePOLineCreateResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolineties = new pdspolinetiesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineCreateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         foreach (var obj in AspolinePOLineCreateRequestAPI.polineties)
         {
            DataRow ttblpolinetiesRow = pdspolineties.ttblpolineties.NewttblpolinetiesRow();
            Polineties.UpdateRowFromPolineties(ref ttblpolinetiesRow, obj);
            pdspolineties.ttblpolineties.AddttblpolinetiesRow((pdspolinetiesDataSet.ttblpolinetiesRow)ttblpolinetiesRow);
         }
          
         var  cMaintMode = AspolinePOLineCreateRequestAPI.cMaintMode;
            
         var  cChangeList = AspolinePOLineCreateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("POLineCreate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineCreate(ref pdsContext,  cMaintMode,  cChangeList, ref pdspoline,  pdspolineties, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("POLineCreate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspoline.ttblpoline.Count > 0)
         {
            result.poline = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public void POLineCancelChange(Polinecancelchangecriteria polinecancelchangecriteria)
      {   
         
         var pdspolinecancelchange = new pdspolinecancelchangeDataSet();
            
         DataRow ttblpolinecancelchangecriteriaCriteria = pdspolinecancelchange.ttblpolinecancelchangecriteria.NewttblpolinecancelchangecriteriaRow();
         Polinecancelchangecriteria.UpdateRowFromPolinecancelchangecriteria(ref ttblpolinecancelchangecriteriaCriteria, polinecancelchangecriteria);
         pdspolinecancelchange.ttblpolinecancelchangecriteria.AddttblpolinecancelchangecriteriaRow((pdspolinecancelchangeDataSet.ttblpolinecancelchangecriteriaRow)ttblpolinecancelchangecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLineCancelChange - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineCancelChange(ref pdsContext,  pdspolinecancelchange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineCancelChange - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolinecancelchange);
      }

      public AspolinePOLineNonStockRetrieveResponseAPI POLineNonStockRetrieve(AspolinePOLineNonStockRetrieveRequestAPI AspolinePOLineNonStockRetrieveRequestAPI)
      {   
         var result = new AspolinePOLineNonStockRetrieveResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolinenonstockhdr = new pdspolinenonstockhdrDataSet();
            
         var pdspolinenonstock = new pdspolinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineNonStockRetrieveRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         DataRow ttblpolinenonstockhdrRow = pdspolinenonstockhdr.ttblpolinenonstockhdr.NewttblpolinenonstockhdrRow();
         Polinenonstockhdr.UpdateRowFromPolinenonstockhdr(ref ttblpolinenonstockhdrRow, AspolinePOLineNonStockRetrieveRequestAPI.polinenonstockhdr);
         pdspolinenonstockhdr.ttblpolinenonstockhdr.AddttblpolinenonstockhdrRow((pdspolinenonstockhdrDataSet.ttblpolinenonstockhdrRow)ttblpolinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("POLineNonStockRetrieve - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineNonStockRetrieve(ref pdsContext,  pdspoline,  pdspolinenonstockhdr, out pdspolinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineNonStockRetrieve - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspolinenonstock.ttblpolinenonstock.Count > 0)
         {
            result.polinenonstock = Polinenonstock.BuildPolinenonstockFromRow(pdspolinenonstock.ttblpolinenonstock[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> POLineNonStockValidate(AspolinePOLineNonStockValidateRequestAPI AspolinePOLineNonStockValidateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolinenonstockhdr = new pdspolinenonstockhdrDataSet();
            
         var pdspolinenonstock = new pdspolinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineNonStockValidateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         DataRow ttblpolinenonstockRow = pdspolinenonstock.ttblpolinenonstock.NewttblpolinenonstockRow();
         Polinenonstock.UpdateRowFromPolinenonstock(ref ttblpolinenonstockRow, AspolinePOLineNonStockValidateRequestAPI.polinenonstock);
         pdspolinenonstock.ttblpolinenonstock.AddttblpolinenonstockRow((pdspolinenonstockDataSet.ttblpolinenonstockRow)ttblpolinenonstockRow);
          
         DataRow ttblpolinenonstockhdrRow = pdspolinenonstockhdr.ttblpolinenonstockhdr.NewttblpolinenonstockhdrRow();
         Polinenonstockhdr.UpdateRowFromPolinenonstockhdr(ref ttblpolinenonstockhdrRow, AspolinePOLineNonStockValidateRequestAPI.polinenonstockhdr);
         pdspolinenonstockhdr.ttblpolinenonstockhdr.AddttblpolinenonstockhdrRow((pdspolinenonstockhdrDataSet.ttblpolinenonstockhdrRow)ttblpolinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("POLineNonStockValidate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineNonStockValidate(ref pdsContext,  pdspoline,  pdspolinenonstockhdr,  pdspolinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineNonStockValidate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AspolinePOLineNonStockFinalResponseAPI POLineNonStockFinal(AspolinePOLineNonStockFinalRequestAPI AspolinePOLineNonStockFinalRequestAPI)
      {   
         var result = new AspolinePOLineNonStockFinalResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolinenonstockhdr = new pdspolinenonstockhdrDataSet();
            
         var pdspolinenonstock = new pdspolinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineNonStockFinalRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         DataRow ttblpolinenonstockRow = pdspolinenonstock.ttblpolinenonstock.NewttblpolinenonstockRow();
         Polinenonstock.UpdateRowFromPolinenonstock(ref ttblpolinenonstockRow, AspolinePOLineNonStockFinalRequestAPI.polinenonstock);
         pdspolinenonstock.ttblpolinenonstock.AddttblpolinenonstockRow((pdspolinenonstockDataSet.ttblpolinenonstockRow)ttblpolinenonstockRow);
          
         DataRow ttblpolinenonstockhdrRow = pdspolinenonstockhdr.ttblpolinenonstockhdr.NewttblpolinenonstockhdrRow();
         Polinenonstockhdr.UpdateRowFromPolinenonstockhdr(ref ttblpolinenonstockhdrRow, AspolinePOLineNonStockFinalRequestAPI.polinenonstockhdr);
         pdspolinenonstockhdr.ttblpolinenonstockhdr.AddttblpolinenonstockhdrRow((pdspolinenonstockhdrDataSet.ttblpolinenonstockhdrRow)ttblpolinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("POLineNonStockFinal - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineNonStockFinal(ref pdsContext,  pdspoline,  pdspolinenonstockhdr, ref pdspolinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineNonStockFinal - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspolinenonstock.ttblpolinenonstock.Count > 0)
         {
            result.polinenonstock = Polinenonstock.BuildPolinenonstockFromRow(pdspolinenonstock.ttblpolinenonstock[0]);
         }
                    
          
         return result;
          
      }

      public AspolinePOLineNonStockLeaveFieldResponseAPI POLineNonStockLeaveField(AspolinePOLineNonStockLeaveFieldRequestAPI AspolinePOLineNonStockLeaveFieldRequestAPI)
      {   
         var result = new AspolinePOLineNonStockLeaveFieldResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolinenonstockhdr = new pdspolinenonstockhdrDataSet();
            
         var pdspolinenonstock = new pdspolinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineNonStockLeaveFieldRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         DataRow ttblpolinenonstockRow = pdspolinenonstock.ttblpolinenonstock.NewttblpolinenonstockRow();
         Polinenonstock.UpdateRowFromPolinenonstock(ref ttblpolinenonstockRow, AspolinePOLineNonStockLeaveFieldRequestAPI.polinenonstock);
         pdspolinenonstock.ttblpolinenonstock.AddttblpolinenonstockRow((pdspolinenonstockDataSet.ttblpolinenonstockRow)ttblpolinenonstockRow);
          
         DataRow ttblpolinenonstockhdrRow = pdspolinenonstockhdr.ttblpolinenonstockhdr.NewttblpolinenonstockhdrRow();
         Polinenonstockhdr.UpdateRowFromPolinenonstockhdr(ref ttblpolinenonstockhdrRow, AspolinePOLineNonStockLeaveFieldRequestAPI.polinenonstockhdr);
         pdspolinenonstockhdr.ttblpolinenonstockhdr.AddttblpolinenonstockhdrRow((pdspolinenonstockhdrDataSet.ttblpolinenonstockhdrRow)ttblpolinenonstockhdrRow);
          
         var  cFieldName = AspolinePOLineNonStockLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("POLineNonStockLeaveField - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineNonStockLeaveField(ref pdsContext,  cFieldName,  pdspoline,  pdspolinenonstockhdr, ref pdspolinenonstock, out pdsmessaging, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("POLineNonStockLeaveField - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspolinenonstock.ttblpolinenonstock.Count > 0)
         {
            result.polinenonstock = Polinenonstock.BuildPolinenonstockFromRow(pdspolinenonstock.ttblpolinenonstock[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspolinePOLineTieValidateResponseAPI POLineTieValidate(AspolinePOLineTieValidateRequestAPI AspolinePOLineTieValidateRequestAPI)
      {   
         var result = new AspolinePOLineTieValidateResponseAPI();
         
         var pdspoline = new pdspolineDataSet();
            
         var pdspolineties = new pdspolinetiesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLineTieValidateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         DataRow ttblpolinetiesRow = pdspolineties.ttblpolineties.NewttblpolinetiesRow();
         Polineties.UpdateRowFromPolineties(ref ttblpolinetiesRow, AspolinePOLineTieValidateRequestAPI.polineties);
         pdspolineties.ttblpolineties.AddttblpolinetiesRow((pdspolinetiesDataSet.ttblpolinetiesRow)ttblpolinetiesRow);
          
         
         NLogLoggerP.Trace("POLineTieValidate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineTieValidate(ref pdsContext,  pdspoline, ref pdspolineties, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineTieValidate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspolineties.ttblpolineties.Count > 0)
         {
            result.polineties = Polineties.BuildPolinetiesFromRow(pdspolineties.ttblpolineties[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> POLineDelete(int pvPono, int pvPosuf, int pvLineno)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLineDelete - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineDelete(ref pdsContext,  pvPono,  pvPosuf,  pvLineno, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineDelete - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> POLineDeleteList(IEnumerable<Polinedeletecriteria> polinedeletecriteria)
      {   
         var results = new List<Messaging>();
         
         var pdspolinedelete = new pdspolinedeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in polinedeletecriteria)
         {
             DataRow row = pdspolinedelete.ttblpolinedeletecriteria.NewttblpolinedeletecriteriaRow();
             Polinedeletecriteria.UpdateRowFromPolinedeletecriteria(ref row, obj);
             pdspolinedelete.ttblpolinedeletecriteria.AddttblpolinedeletecriteriaRow((pdspolinedeleteDataSet.ttblpolinedeletecriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POLineDeleteList - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLineDeleteList(ref pdsContext,  pdspolinedelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLineDeleteList - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolinedelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Poline POLinePricingWorksheetCalculate(AspolinePOLinePricingWorksheetCalculateRequestAPI AspolinePOLinePricingWorksheetCalculateRequestAPI)
      {   
         var result = new Poline();
         
         var pdspoline = new pdspolineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpolineRow = pdspoline.ttblpoline.NewttblpolineRow();
         Poline.UpdateRowFromPoline(ref ttblpolineRow, AspolinePOLinePricingWorksheetCalculateRequestAPI.poline);
         pdspoline.ttblpoline.AddttblpolineRow((pdspolineDataSet.ttblpolineRow)ttblpolineRow);
          
         var  pvUpdatetype = AspolinePOLinePricingWorksheetCalculateRequestAPI.pvUpdatetype;
            
         
         NLogLoggerP.Trace("POLinePricingWorksheetCalculate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POLinePricingWorksheetCalculate(ref pdsContext,  pvUpdatetype, ref pdspoline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POLinePricingWorksheetCalculate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoline); 
    
         if (pdspoline.ttblpoline.Count > 0) 
         { 
             result = Poline.BuildPolineFromRow(pdspoline.ttblpoline[0]);
         } 
              
          
         return result;
          
      }

      public AspolinePOCoreAllocationLeaveFieldResponseAPI POCoreAllocationLeaveField(AspolinePOCoreAllocationLeaveFieldRequestAPI AspolinePOCoreAllocationLeaveFieldRequestAPI)
      {   
         var result = new AspolinePOCoreAllocationLeaveFieldResponseAPI();
         
         var pdspocoreallocation = new pdspocoreallocationDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpocoreallocationcriteriaRow = pdspocoreallocation.ttblpocoreallocationcriteria.NewttblpocoreallocationcriteriaRow();
         Pocoreallocationcriteria.UpdateRowFromPocoreallocationcriteria(ref ttblpocoreallocationcriteriaRow, AspolinePOCoreAllocationLeaveFieldRequestAPI.pocoreallocationcriteria);
         pdspocoreallocation.ttblpocoreallocationcriteria.AddttblpocoreallocationcriteriaRow((pdspocoreallocationDataSet.ttblpocoreallocationcriteriaRow)ttblpocoreallocationcriteriaRow);
          
         foreach (var obj in AspolinePOCoreAllocationLeaveFieldRequestAPI.pocoreallocationresults)
         {
            DataRow ttblpocoreallocationresultsRow = pdspocoreallocation.ttblpocoreallocationresults.NewttblpocoreallocationresultsRow();
            Pocoreallocationresults.UpdateRowFromPocoreallocationresults(ref ttblpocoreallocationresultsRow, obj);
            pdspocoreallocation.ttblpocoreallocationresults.AddttblpocoreallocationresultsRow((pdspocoreallocationDataSet.ttblpocoreallocationresultsRow)ttblpocoreallocationresultsRow);
         }
          
         DataRow ttblpocoreallocationsingleRow = pdspocoreallocation.ttblpocoreallocationsingle.NewttblpocoreallocationsingleRow();
         Pocoreallocationsingle.UpdateRowFromPocoreallocationsingle(ref ttblpocoreallocationsingleRow, AspolinePOCoreAllocationLeaveFieldRequestAPI.pocoreallocationsingle);
         pdspocoreallocation.ttblpocoreallocationsingle.AddttblpocoreallocationsingleRow((pdspocoreallocationDataSet.ttblpocoreallocationsingleRow)ttblpocoreallocationsingleRow);
          
         var  cFieldName = AspolinePOCoreAllocationLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("POCoreAllocationLeaveField - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POCoreAllocationLeaveField(ref pdsContext,  cFieldName, ref pdspocoreallocation, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POCoreAllocationLeaveField - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspocoreallocation); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspocoreallocation.ttblpocoreallocationresults)
         {
            result.pocoreallocationresults.Add(Pocoreallocationresults.BuildPocoreallocationresultsFromRow(row));
         }     
         if (pdspocoreallocation.ttblpocoreallocationsingle.Count > 0)
         {
            result.pocoreallocationsingle = Pocoreallocationsingle.BuildPocoreallocationsingleFromRow(pdspocoreallocation.ttblpocoreallocationsingle[0]);
         }
                    
          
         return result;
          
      }

      public AspolinePOCoreAllocationLoadResponseAPI POCoreAllocationLoad(Pocoreallocationcriteria pocoreallocationcriteria)
      {   
         var result = new AspolinePOCoreAllocationLoadResponseAPI();
         
         var pdspocoreallocation = new pdspocoreallocationDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpocoreallocationcriteriaCriteria = pdspocoreallocation.ttblpocoreallocationcriteria.NewttblpocoreallocationcriteriaRow();
         Pocoreallocationcriteria.UpdateRowFromPocoreallocationcriteria(ref ttblpocoreallocationcriteriaCriteria, pocoreallocationcriteria);
         pdspocoreallocation.ttblpocoreallocationcriteria.AddttblpocoreallocationcriteriaRow((pdspocoreallocationDataSet.ttblpocoreallocationcriteriaRow)ttblpocoreallocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POCoreAllocationLoad - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POCoreAllocationLoad(ref pdsContext, ref pdspocoreallocation, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POCoreAllocationLoad - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspocoreallocation); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspocoreallocation.ttblpocoreallocationcriteria.Count > 0)
         {
            result.pocoreallocationcriteria = Pocoreallocationcriteria.BuildPocoreallocationcriteriaFromRow(pdspocoreallocation.ttblpocoreallocationcriteria[0]);
         }
                    
         foreach (DataRow row in pdspocoreallocation.ttblpocoreallocationresults)
         {
            result.pocoreallocationresults.Add(Pocoreallocationresults.BuildPocoreallocationresultsFromRow(row));
         }     
         if (pdspocoreallocation.ttblpocoreallocationsingle.Count > 0)
         {
            result.pocoreallocationsingle = Pocoreallocationsingle.BuildPocoreallocationsingleFromRow(pdspocoreallocation.ttblpocoreallocationsingle[0]);
         }
                    
          
         return result;
          
      }

      public AspolinePOCoreAllocationUpdateResponseAPI POCoreAllocationUpdate(AspolinePOCoreAllocationUpdateRequestAPI AspolinePOCoreAllocationUpdateRequestAPI)
      {   
         var result = new AspolinePOCoreAllocationUpdateResponseAPI();
         
         var pdspocoreallocation = new pdspocoreallocationDataSet();
            
         var pdspocoreallocationupdate = new pdspocoreallocationupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpocoreallocationcriteriaRow = pdspocoreallocation.ttblpocoreallocationcriteria.NewttblpocoreallocationcriteriaRow();
         Pocoreallocationcriteria.UpdateRowFromPocoreallocationcriteria(ref ttblpocoreallocationcriteriaRow, AspolinePOCoreAllocationUpdateRequestAPI.pocoreallocationcriteria);
         pdspocoreallocation.ttblpocoreallocationcriteria.AddttblpocoreallocationcriteriaRow((pdspocoreallocationDataSet.ttblpocoreallocationcriteriaRow)ttblpocoreallocationcriteriaRow);
          
         foreach (var obj in AspolinePOCoreAllocationUpdateRequestAPI.pocoreallocationresults)
         {
            DataRow ttblpocoreallocationresultsRow = pdspocoreallocation.ttblpocoreallocationresults.NewttblpocoreallocationresultsRow();
            Pocoreallocationresults.UpdateRowFromPocoreallocationresults(ref ttblpocoreallocationresultsRow, obj);
            pdspocoreallocation.ttblpocoreallocationresults.AddttblpocoreallocationresultsRow((pdspocoreallocationDataSet.ttblpocoreallocationresultsRow)ttblpocoreallocationresultsRow);
         }
          
         DataRow ttblpocoreallocationsingleRow = pdspocoreallocation.ttblpocoreallocationsingle.NewttblpocoreallocationsingleRow();
         Pocoreallocationsingle.UpdateRowFromPocoreallocationsingle(ref ttblpocoreallocationsingleRow, AspolinePOCoreAllocationUpdateRequestAPI.pocoreallocationsingle);
         pdspocoreallocation.ttblpocoreallocationsingle.AddttblpocoreallocationsingleRow((pdspocoreallocationDataSet.ttblpocoreallocationsingleRow)ttblpocoreallocationsingleRow);
          
         
         NLogLoggerP.Trace("POCoreAllocationUpdate - Aspoline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspolineproxy = this.proxyAppObject.CreatePO_aspolineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspolineproxy.POCoreAllocationUpdate(ref pdsContext,  pdspocoreallocation, out pdspocoreallocationupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POCoreAllocationUpdate - Aspoline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspocoreallocation); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspocoreallocationupdate.ttblpocoreallocationupdate.Count > 0)
         {
            result.pocoreallocationupdate = Pocoreallocationupdate.BuildPocoreallocationupdateFromRow(pdspocoreallocationupdate.ttblpocoreallocationupdate[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  