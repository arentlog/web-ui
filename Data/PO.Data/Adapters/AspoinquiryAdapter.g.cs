//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PO.Data.Adapters
{
   using com.infor.sxproxy.poproxy;
   using com.infor.sxproxy.poproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsloadpoaddons;
   using Models.Pdsloadpoapdetail;
   using Models.Pdsloadpocostact;
   using Models.Pdsloadpoheader;
   using Models.Pdsloadpoheaderaddlmisc;
   using Models.Pdsloadpoheaderaddlwhse;
   using Models.Pdsloadpolinedetail;
   using Models.Pdsloadpolineext;
   using Models.Pdsloadpolinehistory;
   using Models.Pdsloadpolinenonstock;
   using Models.Pdsloadpoquickview;
   using Models.Pdsloadpoquickviewties;
   using Models.Pdsloadporetnalloc;
   using Models.Pdsloadpotally;
   using Models.Pdsloadpototals;
   using Models.Pdspoipbuildpolist;
   using Models.Pdspoitcheader;
   using Models.Pdspoitccomponent;
   using Models.Pdspobundles;
   using Models.Complex;

   public partial class AspoinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private POProxyAppObject proxyAppObject;
      
      public AspoinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new POProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspoinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AspoinquiryLoadPOAddonsResponseAPI LoadPOAddons(Loadpoaddonscriteria loadpoaddonscriteria)
      {   
         var result = new AspoinquiryLoadPOAddonsResponseAPI();
         
         var pdsloadpoaddons = new pdsloadpoaddonsDataSet();
            
         DataRow ttblloadpoaddonscriteriaCriteria = pdsloadpoaddons.ttblloadpoaddonscriteria.NewttblloadpoaddonscriteriaRow();
         Loadpoaddonscriteria.UpdateRowFromLoadpoaddonscriteria(ref ttblloadpoaddonscriteriaCriteria, loadpoaddonscriteria);
         pdsloadpoaddons.ttblloadpoaddonscriteria.AddttblloadpoaddonscriteriaRow((pdsloadpoaddonsDataSet.ttblloadpoaddonscriteriaRow)ttblloadpoaddonscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOAddons - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOAddons(ref pdsContext, ref pdsloadpoaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOAddons - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoaddons); 
    
         foreach (DataRow row in pdsloadpoaddons.ttblloadpoaddonsresults)
         {
            result.loadpoaddonsresults.Add(Loadpoaddonsresults.BuildLoadpoaddonsresultsFromRow(row));
         }     
         if (pdsloadpoaddons.ttblloadpoaddonssingle.Count > 0)
         {
            result.loadpoaddonssingle = Loadpoaddonssingle.BuildLoadpoaddonssingleFromRow(pdsloadpoaddons.ttblloadpoaddonssingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Loadpoapdetailresults> LoadPOAPDetail(Loadpoapdetailcriteria loadpoapdetailcriteria)
      {   
         var results = new List<Loadpoapdetailresults>();
         
         var pdsloadpoapdetail = new pdsloadpoapdetailDataSet();
            
         DataRow ttblloadpoapdetailcriteriaCriteria = pdsloadpoapdetail.ttblloadpoapdetailcriteria.NewttblloadpoapdetailcriteriaRow();
         Loadpoapdetailcriteria.UpdateRowFromLoadpoapdetailcriteria(ref ttblloadpoapdetailcriteriaCriteria, loadpoapdetailcriteria);
         pdsloadpoapdetail.ttblloadpoapdetailcriteria.AddttblloadpoapdetailcriteriaRow((pdsloadpoapdetailDataSet.ttblloadpoapdetailcriteriaRow)ttblloadpoapdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOAPDetail - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOAPDetail(ref pdsContext, ref pdsloadpoapdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOAPDetail - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoapdetail); 
    
            foreach (DataRow row in pdsloadpoapdetail.ttblloadpoapdetailresults)
            {
                results.Add(Loadpoapdetailresults.BuildLoadpoapdetailresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Loadpocostactresults> LoadPOCostAct(Loadpocostactcriteria loadpocostactcriteria)
      {   
         var results = new List<Loadpocostactresults>();
         
         var pdsloadpocostact = new pdsloadpocostactDataSet();
            
         DataRow ttblloadpocostactcriteriaCriteria = pdsloadpocostact.ttblloadpocostactcriteria.NewttblloadpocostactcriteriaRow();
         Loadpocostactcriteria.UpdateRowFromLoadpocostactcriteria(ref ttblloadpocostactcriteriaCriteria, loadpocostactcriteria);
         pdsloadpocostact.ttblloadpocostactcriteria.AddttblloadpocostactcriteriaRow((pdsloadpocostactDataSet.ttblloadpocostactcriteriaRow)ttblloadpocostactcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOCostAct - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOCostAct(ref pdsContext, ref pdsloadpocostact, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOCostAct - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpocostact); 
    
            foreach (DataRow row in pdsloadpocostact.ttblloadpocostactresults)
            {
                results.Add(Loadpocostactresults.BuildLoadpocostactresultsFromRow(row));
            }
            return results;
        
      }

      public Loadpoheaderresults LoadPOHeader(Loadpoheadercriteria loadpoheadercriteria)
      {   
         var result = new Loadpoheaderresults();
         
         var pdsloadpoheader = new pdsloadpoheaderDataSet();
            
         DataRow ttblloadpoheadercriteriaCriteria = pdsloadpoheader.ttblloadpoheadercriteria.NewttblloadpoheadercriteriaRow();
         Loadpoheadercriteria.UpdateRowFromLoadpoheadercriteria(ref ttblloadpoheadercriteriaCriteria, loadpoheadercriteria);
         pdsloadpoheader.ttblloadpoheadercriteria.AddttblloadpoheadercriteriaRow((pdsloadpoheaderDataSet.ttblloadpoheadercriteriaRow)ttblloadpoheadercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOHeader - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOHeader(ref pdsContext, ref pdsloadpoheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOHeader - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoheader); 
    
         if (pdsloadpoheader.ttblloadpoheaderresults.Count > 0) 
         { 
             result = Loadpoheaderresults.BuildLoadpoheaderresultsFromRow(pdsloadpoheader.ttblloadpoheaderresults[0]);
         } 
              
          
         return result;
          
      }

      public Loadpoheaderaddlmiscresults LoadPOHeaderAddlMisc(Loadpoheaderaddlmisccriteria loadpoheaderaddlmisccriteria)
      {   
         var result = new Loadpoheaderaddlmiscresults();
         
         var pdsloadpoheaderaddlmisc = new pdsloadpoheaderaddlmiscDataSet();
            
         DataRow ttblloadpoheaderaddlmisccriteriaCriteria = pdsloadpoheaderaddlmisc.ttblloadpoheaderaddlmisccriteria.NewttblloadpoheaderaddlmisccriteriaRow();
         Loadpoheaderaddlmisccriteria.UpdateRowFromLoadpoheaderaddlmisccriteria(ref ttblloadpoheaderaddlmisccriteriaCriteria, loadpoheaderaddlmisccriteria);
         pdsloadpoheaderaddlmisc.ttblloadpoheaderaddlmisccriteria.AddttblloadpoheaderaddlmisccriteriaRow((pdsloadpoheaderaddlmiscDataSet.ttblloadpoheaderaddlmisccriteriaRow)ttblloadpoheaderaddlmisccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOHeaderAddlMisc - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOHeaderAddlMisc(ref pdsContext, ref pdsloadpoheaderaddlmisc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOHeaderAddlMisc - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoheaderaddlmisc); 
    
         if (pdsloadpoheaderaddlmisc.ttblloadpoheaderaddlmiscresults.Count > 0) 
         { 
             result = Loadpoheaderaddlmiscresults.BuildLoadpoheaderaddlmiscresultsFromRow(pdsloadpoheaderaddlmisc.ttblloadpoheaderaddlmiscresults[0]);
         } 
              
          
         return result;
          
      }

      public Loadpoheaderaddlwhseresults LoadPOHeaderAddlWhse(Loadpoheaderaddlwhsecriteria loadpoheaderaddlwhsecriteria)
      {   
         var result = new Loadpoheaderaddlwhseresults();
         
         var pdsloadpoheaderaddlwhse = new pdsloadpoheaderaddlwhseDataSet();
            
         DataRow ttblloadpoheaderaddlwhsecriteriaCriteria = pdsloadpoheaderaddlwhse.ttblloadpoheaderaddlwhsecriteria.NewttblloadpoheaderaddlwhsecriteriaRow();
         Loadpoheaderaddlwhsecriteria.UpdateRowFromLoadpoheaderaddlwhsecriteria(ref ttblloadpoheaderaddlwhsecriteriaCriteria, loadpoheaderaddlwhsecriteria);
         pdsloadpoheaderaddlwhse.ttblloadpoheaderaddlwhsecriteria.AddttblloadpoheaderaddlwhsecriteriaRow((pdsloadpoheaderaddlwhseDataSet.ttblloadpoheaderaddlwhsecriteriaRow)ttblloadpoheaderaddlwhsecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOHeaderAddlWhse - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOHeaderAddlWhse(ref pdsContext, ref pdsloadpoheaderaddlwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOHeaderAddlWhse - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoheaderaddlwhse); 
    
         if (pdsloadpoheaderaddlwhse.ttblloadpoheaderaddlwhseresults.Count > 0) 
         { 
             result = Loadpoheaderaddlwhseresults.BuildLoadpoheaderaddlwhseresultsFromRow(pdsloadpoheaderaddlwhse.ttblloadpoheaderaddlwhseresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Loadpolinedetailresults> LoadPOLineDetail(Loadpolinedetailcriteria loadpolinedetailcriteria)
      {   
         var results = new List<Loadpolinedetailresults>();
         
         var pdsloadpolinedetail = new pdsloadpolinedetailDataSet();
            
         DataRow ttblloadpolinedetailcriteriaCriteria = pdsloadpolinedetail.ttblloadpolinedetailcriteria.NewttblloadpolinedetailcriteriaRow();
         Loadpolinedetailcriteria.UpdateRowFromLoadpolinedetailcriteria(ref ttblloadpolinedetailcriteriaCriteria, loadpolinedetailcriteria);
         pdsloadpolinedetail.ttblloadpolinedetailcriteria.AddttblloadpolinedetailcriteriaRow((pdsloadpolinedetailDataSet.ttblloadpolinedetailcriteriaRow)ttblloadpolinedetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOLineDetail - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOLineDetail(ref pdsContext, ref pdsloadpolinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineDetail - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpolinedetail); 
    
            foreach (DataRow row in pdsloadpolinedetail.ttblloadpolinedetailresults)
            {
                results.Add(Loadpolinedetailresults.BuildLoadpolinedetailresultsFromRow(row));
            }
            return results;
        
      }

      public Loadpolineextresults LoadPOLineExtended(Loadpolineextcriteria loadpolineextcriteria)
      {   
         var result = new Loadpolineextresults();
         
         var pdsloadpolineext = new pdsloadpolineextDataSet();
            
         DataRow ttblloadpolineextcriteriaCriteria = pdsloadpolineext.ttblloadpolineextcriteria.NewttblloadpolineextcriteriaRow();
         Loadpolineextcriteria.UpdateRowFromLoadpolineextcriteria(ref ttblloadpolineextcriteriaCriteria, loadpolineextcriteria);
         pdsloadpolineext.ttblloadpolineextcriteria.AddttblloadpolineextcriteriaRow((pdsloadpolineextDataSet.ttblloadpolineextcriteriaRow)ttblloadpolineextcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOLineExtended - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOLineExtended(ref pdsContext, ref pdsloadpolineext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineExtended - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpolineext); 
    
         if (pdsloadpolineext.ttblloadpolineextresults.Count > 0) 
         { 
             result = Loadpolineextresults.BuildLoadpolineextresultsFromRow(pdsloadpolineext.ttblloadpolineextresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Loadpolinehistoryresults> LoadPOLineHistory(Loadpolinehistorycriteria loadpolinehistorycriteria)
      {   
         var results = new List<Loadpolinehistoryresults>();
         
         var pdsloadpolinehistory = new pdsloadpolinehistoryDataSet();
            
         DataRow ttblloadpolinehistorycriteriaCriteria = pdsloadpolinehistory.ttblloadpolinehistorycriteria.NewttblloadpolinehistorycriteriaRow();
         Loadpolinehistorycriteria.UpdateRowFromLoadpolinehistorycriteria(ref ttblloadpolinehistorycriteriaCriteria, loadpolinehistorycriteria);
         pdsloadpolinehistory.ttblloadpolinehistorycriteria.AddttblloadpolinehistorycriteriaRow((pdsloadpolinehistoryDataSet.ttblloadpolinehistorycriteriaRow)ttblloadpolinehistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOLineHistory - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOLineHistory(ref pdsContext, ref pdsloadpolinehistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineHistory - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpolinehistory); 
    
            foreach (DataRow row in pdsloadpolinehistory.ttblloadpolinehistoryresults)
            {
                results.Add(Loadpolinehistoryresults.BuildLoadpolinehistoryresultsFromRow(row));
            }
            return results;
        
      }

      public Loadpolinenonstockresults LoadPOLineNonstock(Loadpolinenonstockcriteria loadpolinenonstockcriteria)
      {   
         var result = new Loadpolinenonstockresults();
         
         var pdsloadpolinenonstock = new pdsloadpolinenonstockDataSet();
            
         DataRow ttblloadpolinenonstockcriteriaCriteria = pdsloadpolinenonstock.ttblloadpolinenonstockcriteria.NewttblloadpolinenonstockcriteriaRow();
         Loadpolinenonstockcriteria.UpdateRowFromLoadpolinenonstockcriteria(ref ttblloadpolinenonstockcriteriaCriteria, loadpolinenonstockcriteria);
         pdsloadpolinenonstock.ttblloadpolinenonstockcriteria.AddttblloadpolinenonstockcriteriaRow((pdsloadpolinenonstockDataSet.ttblloadpolinenonstockcriteriaRow)ttblloadpolinenonstockcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOLineNonstock - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOLineNonstock(ref pdsContext, ref pdsloadpolinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOLineNonstock - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpolinenonstock); 
    
         if (pdsloadpolinenonstock.ttblloadpolinenonstockresults.Count > 0) 
         { 
             result = Loadpolinenonstockresults.BuildLoadpolinenonstockresultsFromRow(pdsloadpolinenonstock.ttblloadpolinenonstockresults[0]);
         } 
              
          
         return result;
          
      }

      public AspoinquiryLoadPOQuickViewResponseAPI LoadPOQuickView(Loadpoquickviewcriteria loadpoquickviewcriteria)
      {   
         var result = new AspoinquiryLoadPOQuickViewResponseAPI();
         
         var pdsloadpoquickview = new pdsloadpoquickviewDataSet();
            
         DataRow ttblloadpoquickviewcriteriaCriteria = pdsloadpoquickview.ttblloadpoquickviewcriteria.NewttblloadpoquickviewcriteriaRow();
         Loadpoquickviewcriteria.UpdateRowFromLoadpoquickviewcriteria(ref ttblloadpoquickviewcriteriaCriteria, loadpoquickviewcriteria);
         pdsloadpoquickview.ttblloadpoquickviewcriteria.AddttblloadpoquickviewcriteriaRow((pdsloadpoquickviewDataSet.ttblloadpoquickviewcriteriaRow)ttblloadpoquickviewcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOQuickView - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOQuickView(ref pdsContext, ref pdsloadpoquickview, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOQuickView - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoquickview); 
    
         foreach (DataRow row in pdsloadpoquickview.ttblloadpoquickviewresults)
         {
            result.loadpoquickviewresults.Add(Loadpoquickviewresults.BuildLoadpoquickviewresultsFromRow(row));
         }     
         if (pdsloadpoquickview.ttblloadpoquickviewsingle.Count > 0)
         {
            result.loadpoquickviewsingle = Loadpoquickviewsingle.BuildLoadpoquickviewsingleFromRow(pdsloadpoquickview.ttblloadpoquickviewsingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoinquiryLoadPOQuickViewTiesResponseAPI LoadPOQuickViewTies(Loadpoquickviewtiescriteria loadpoquickviewtiescriteria)
      {   
         var result = new AspoinquiryLoadPOQuickViewTiesResponseAPI();
         
         var pdsloadpoquickviewties = new pdsloadpoquickviewtiesDataSet();
            
         DataRow ttblloadpoquickviewtiescriteriaCriteria = pdsloadpoquickviewties.ttblloadpoquickviewtiescriteria.NewttblloadpoquickviewtiescriteriaRow();
         Loadpoquickviewtiescriteria.UpdateRowFromLoadpoquickviewtiescriteria(ref ttblloadpoquickviewtiescriteriaCriteria, loadpoquickviewtiescriteria);
         pdsloadpoquickviewties.ttblloadpoquickviewtiescriteria.AddttblloadpoquickviewtiescriteriaRow((pdsloadpoquickviewtiesDataSet.ttblloadpoquickviewtiescriteriaRow)ttblloadpoquickviewtiescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOQuickViewTies - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOQuickViewTies(ref pdsContext, ref pdsloadpoquickviewties, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOQuickViewTies - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpoquickviewties); 
    
         foreach (DataRow row in pdsloadpoquickviewties.ttblloadpoquickviewtiesresults)
         {
            result.loadpoquickviewtiesresults.Add(Loadpoquickviewtiesresults.BuildLoadpoquickviewtiesresultsFromRow(row));
         }     
         if (pdsloadpoquickviewties.ttblloadpoquickviewtiessingle.Count > 0)
         {
            result.loadpoquickviewtiessingle = Loadpoquickviewtiessingle.BuildLoadpoquickviewtiessingleFromRow(pdsloadpoquickviewties.ttblloadpoquickviewtiessingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoinquiryLoadPORetnAllocResponseAPI LoadPORetnAlloc(Loadporetnalloccriteria loadporetnalloccriteria)
      {   
         var result = new AspoinquiryLoadPORetnAllocResponseAPI();
         
         var pdsloadporetnalloc = new pdsloadporetnallocDataSet();
            
         DataRow ttblloadporetnalloccriteriaCriteria = pdsloadporetnalloc.ttblloadporetnalloccriteria.NewttblloadporetnalloccriteriaRow();
         Loadporetnalloccriteria.UpdateRowFromLoadporetnalloccriteria(ref ttblloadporetnalloccriteriaCriteria, loadporetnalloccriteria);
         pdsloadporetnalloc.ttblloadporetnalloccriteria.AddttblloadporetnalloccriteriaRow((pdsloadporetnallocDataSet.ttblloadporetnalloccriteriaRow)ttblloadporetnalloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPORetnAlloc - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPORetnAlloc(ref pdsContext, ref pdsloadporetnalloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPORetnAlloc - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadporetnalloc); 
    
         foreach (DataRow row in pdsloadporetnalloc.ttblloadporetnallocresults)
         {
            result.loadporetnallocresults.Add(Loadporetnallocresults.BuildLoadporetnallocresultsFromRow(row));
         }     
         if (pdsloadporetnalloc.ttblloadporetnallocsingle.Count > 0)
         {
            result.loadporetnallocsingle = Loadporetnallocsingle.BuildLoadporetnallocsingleFromRow(pdsloadporetnalloc.ttblloadporetnallocsingle[0]);
         }
                    
          
         return result;
          
      }

      public AspoinquiryLoadPOTallyResponseAPI LoadPOTally(Loadpotallycriteria loadpotallycriteria)
      {   
         var result = new AspoinquiryLoadPOTallyResponseAPI();
         
         var pdsloadpotally = new pdsloadpotallyDataSet();
            
         DataRow ttblloadpotallycriteriaCriteria = pdsloadpotally.ttblloadpotallycriteria.NewttblloadpotallycriteriaRow();
         Loadpotallycriteria.UpdateRowFromLoadpotallycriteria(ref ttblloadpotallycriteriaCriteria, loadpotallycriteria);
         pdsloadpotally.ttblloadpotallycriteria.AddttblloadpotallycriteriaRow((pdsloadpotallyDataSet.ttblloadpotallycriteriaRow)ttblloadpotallycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOTally - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOTally(ref pdsContext, ref pdsloadpotally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOTally - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpotally); 
    
         if (pdsloadpotally.ttblloadpotallycriteria.Count > 0)
         {
            result.loadpotallycriteria = Loadpotallycriteria.BuildLoadpotallycriteriaFromRow(pdsloadpotally.ttblloadpotallycriteria[0]);
         }
                    
         foreach (DataRow row in pdsloadpotally.ttblloadpotallyresults)
         {
            result.loadpotallyresults.Add(Loadpotallyresults.BuildLoadpotallyresultsFromRow(row));
         }     
         if (pdsloadpotally.ttblloadpotallysingle.Count > 0)
         {
            result.loadpotallysingle = Loadpotallysingle.BuildLoadpotallysingleFromRow(pdsloadpotally.ttblloadpotallysingle[0]);
         }
                    
          
         return result;
          
      }

      public Loadpototalsresults LoadPOTotals(Loadpototalscriteria loadpototalscriteria)
      {   
         var result = new Loadpototalsresults();
         
         var pdsloadpototals = new pdsloadpototalsDataSet();
            
         DataRow ttblloadpototalscriteriaCriteria = pdsloadpototals.ttblloadpototalscriteria.NewttblloadpototalscriteriaRow();
         Loadpototalscriteria.UpdateRowFromLoadpototalscriteria(ref ttblloadpototalscriteriaCriteria, loadpototalscriteria);
         pdsloadpototals.ttblloadpototalscriteria.AddttblloadpototalscriteriaRow((pdsloadpototalsDataSet.ttblloadpototalscriteriaRow)ttblloadpototalscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPOTotals - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.LoadPOTotals(ref pdsContext, ref pdsloadpototals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPOTotals - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadpototals); 
    
         if (pdsloadpototals.ttblloadpototalsresults.Count > 0) 
         { 
             result = Loadpototalsresults.BuildLoadpototalsresultsFromRow(pdsloadpototals.ttblloadpototalsresults[0]);
         } 
              
          
         return result;
          
      }

      public AspoinquiryPOIPBuildPOListResponseAPI POIPBuildPOList(Poipbuildpolistcriteria poipbuildpolistcriteria)
      {   
         var result = new AspoinquiryPOIPBuildPOListResponseAPI();
         
         var pdspoipbuildpolist = new pdspoipbuildpolistDataSet();
            
         DataRow ttblpoipbuildpolistcriteriaCriteria = pdspoipbuildpolist.ttblpoipbuildpolistcriteria.NewttblpoipbuildpolistcriteriaRow();
         Poipbuildpolistcriteria.UpdateRowFromPoipbuildpolistcriteria(ref ttblpoipbuildpolistcriteriaCriteria, poipbuildpolistcriteria);
         pdspoipbuildpolist.ttblpoipbuildpolistcriteria.AddttblpoipbuildpolistcriteriaRow((pdspoipbuildpolistDataSet.ttblpoipbuildpolistcriteriaRow)ttblpoipbuildpolistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("POIPBuildPOList - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POIPBuildPOList(ref pdsContext, ref pdspoipbuildpolist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("POIPBuildPOList - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoipbuildpolist); 
    
         foreach (DataRow row in pdspoipbuildpolist.ttblpoipbuildpolistresults)
         {
            result.poipbuildpolistresults.Add(Poipbuildpolistresults.BuildPoipbuildpolistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspoinquiryPOIPSimpleSearchListResponseAPI POIPSimpleSearchList(AspoinquiryPOIPSimpleSearchListRequestAPI AspoinquiryPOIPSimpleSearchListRequestAPI)
      {   
         var result = new AspoinquiryPOIPSimpleSearchListResponseAPI();
         
         var pdspoipbuildpolist = new pdspoipbuildpolistDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         var  iBatchSize = AspoinquiryPOIPSimpleSearchListRequestAPI.iBatchSize;
            
         var  cSearchString = AspoinquiryPOIPSimpleSearchListRequestAPI.cSearchString;
            
         
         NLogLoggerP.Trace("POIPSimpleSearchList - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POIPSimpleSearchList(ref pdsContext,  iBatchSize,  cSearchString, out pdspoipbuildpolist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("POIPSimpleSearchList - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoipbuildpolist); 
    
         foreach (DataRow row in pdspoipbuildpolist.ttblpoipbuildpolistresults)
         {
            result.poipbuildpolistresults.Add(Poipbuildpolistresults.BuildPoipbuildpolistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspoinquiryPOITCComponentOKResponseAPI POITCComponentOK(AspoinquiryPOITCComponentOKRequestAPI AspoinquiryPOITCComponentOKRequestAPI)
      {   
         var result = new AspoinquiryPOITCComponentOKResponseAPI();
         
         var pdspoitcheader = new pdspoitcheaderDataSet();
            
         var pdspoitccomponent = new pdspoitccomponentDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoitccomponentRow = pdspoitccomponent.ttblpoitccomponent.NewttblpoitccomponentRow();
         Poitccomponent.UpdateRowFromPoitccomponent(ref ttblpoitccomponentRow, AspoinquiryPOITCComponentOKRequestAPI.poitccomponent);
         pdspoitccomponent.ttblpoitccomponent.AddttblpoitccomponentRow((pdspoitccomponentDataSet.ttblpoitccomponentRow)ttblpoitccomponentRow);
          
         DataRow ttblpoitcheaderRow = pdspoitcheader.ttblpoitcheader.NewttblpoitcheaderRow();
         Poitcheader.UpdateRowFromPoitcheader(ref ttblpoitcheaderRow, AspoinquiryPOITCComponentOKRequestAPI.poitcheader);
         pdspoitcheader.ttblpoitcheader.AddttblpoitcheaderRow((pdspoitcheaderDataSet.ttblpoitcheaderRow)ttblpoitcheaderRow);
          
         
         NLogLoggerP.Trace("POITCComponentOK - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POITCComponentOK(ref pdsContext, ref pdspoitcheader, ref pdspoitccomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POITCComponentOK - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoitcheader); 
    
         if (pdspoitccomponent.ttblpoitccomponent.Count > 0)
         {
            result.poitccomponent = Poitccomponent.BuildPoitccomponentFromRow(pdspoitccomponent.ttblpoitccomponent[0]);
         }
                    
         if (pdspoitcheader.ttblpoitcheader.Count > 0)
         {
            result.poitcheader = Poitcheader.BuildPoitcheaderFromRow(pdspoitcheader.ttblpoitcheader[0]);
         }
                    
          
         return result;
          
      }

      public Poitccomponent POITCComponentFieldLeave(AspoinquiryPOITCComponentFieldLeaveRequestAPI AspoinquiryPOITCComponentFieldLeaveRequestAPI)
      {   
         var result = new Poitccomponent();
         
         var pdspoitcheader = new pdspoitcheaderDataSet();
            
         var pdspoitccomponent = new pdspoitccomponentDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpoitccomponentRow = pdspoitccomponent.ttblpoitccomponent.NewttblpoitccomponentRow();
         Poitccomponent.UpdateRowFromPoitccomponent(ref ttblpoitccomponentRow, AspoinquiryPOITCComponentFieldLeaveRequestAPI.poitccomponent);
         pdspoitccomponent.ttblpoitccomponent.AddttblpoitccomponentRow((pdspoitccomponentDataSet.ttblpoitccomponentRow)ttblpoitccomponentRow);
          
         DataRow ttblpoitcheaderRow = pdspoitcheader.ttblpoitcheader.NewttblpoitcheaderRow();
         Poitcheader.UpdateRowFromPoitcheader(ref ttblpoitcheaderRow, AspoinquiryPOITCComponentFieldLeaveRequestAPI.poitcheader);
         pdspoitcheader.ttblpoitcheader.AddttblpoitcheaderRow((pdspoitcheaderDataSet.ttblpoitcheaderRow)ttblpoitcheaderRow);
          
         var  cField = AspoinquiryPOITCComponentFieldLeaveRequestAPI.cField;
            
         
         NLogLoggerP.Trace("POITCComponentFieldLeave - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POITCComponentFieldLeave(ref pdsContext,  cField,  pdspoitcheader, ref pdspoitccomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POITCComponentFieldLeave - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoitcheader); 
    
         if (pdspoitccomponent.ttblpoitccomponent.Count > 0) 
         { 
             result = Poitccomponent.BuildPoitccomponentFromRow(pdspoitccomponent.ttblpoitccomponent[0]);
         } 
              
          
         return result;
          
      }

      public AspoinquiryPOITCTallyCalcTotalsResponseAPI POITCTallyCalcTotals(AspoinquiryPOITCTallyCalcTotalsRequestAPI AspoinquiryPOITCTallyCalcTotalsRequestAPI)
      {   
         var result = new AspoinquiryPOITCTallyCalcTotalsResponseAPI();
         
         var pdspoitcheader = new pdspoitcheaderDataSet();
            
         var pdspoitccomponent = new pdspoitccomponentDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoinquiryPOITCTallyCalcTotalsRequestAPI.poitccomponent)
         {
            DataRow ttblpoitccomponentRow = pdspoitccomponent.ttblpoitccomponent.NewttblpoitccomponentRow();
            Poitccomponent.UpdateRowFromPoitccomponent(ref ttblpoitccomponentRow, obj);
            pdspoitccomponent.ttblpoitccomponent.AddttblpoitccomponentRow((pdspoitccomponentDataSet.ttblpoitccomponentRow)ttblpoitccomponentRow);
         }
          
         DataRow ttblpoitcheaderRow = pdspoitcheader.ttblpoitcheader.NewttblpoitcheaderRow();
         Poitcheader.UpdateRowFromPoitcheader(ref ttblpoitcheaderRow, AspoinquiryPOITCTallyCalcTotalsRequestAPI.poitcheader);
         pdspoitcheader.ttblpoitcheader.AddttblpoitcheaderRow((pdspoitcheaderDataSet.ttblpoitcheaderRow)ttblpoitcheaderRow);
          
         
         NLogLoggerP.Trace("POITCTallyCalcTotals - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POITCTallyCalcTotals(ref pdsContext, ref pdspoitcheader, ref pdspoitccomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POITCTallyCalcTotals - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoitcheader); 
    
         foreach (DataRow row in pdspoitccomponent.ttblpoitccomponent)
         {
            result.poitccomponent.Add(Poitccomponent.BuildPoitccomponentFromRow(row));
         }     
         if (pdspoitcheader.ttblpoitcheader.Count > 0)
         {
            result.poitcheader = Poitcheader.BuildPoitcheaderFromRow(pdspoitcheader.ttblpoitcheader[0]);
         }
                    
          
         return result;
          
      }

      public AspoinquiryPOITCTallyLoadResponseAPI POITCTallyLoad(Poitcheader poitcheader)
      {   
         var result = new AspoinquiryPOITCTallyLoadResponseAPI();
         
         var pdspoitcheader = new pdspoitcheaderDataSet();
            
         var pdspoitccomponent = new pdspoitccomponentDataSet();
            
         DataRow ttblpoitcheaderCriteria = pdspoitcheader.ttblpoitcheader.NewttblpoitcheaderRow();
         Poitcheader.UpdateRowFromPoitcheader(ref ttblpoitcheaderCriteria, poitcheader);
         pdspoitcheader.ttblpoitcheader.AddttblpoitcheaderRow((pdspoitcheaderDataSet.ttblpoitcheaderRow)ttblpoitcheaderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POITCTallyLoad - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POITCTallyLoad(ref pdsContext, ref pdspoitcheader, out pdspoitccomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POITCTallyLoad - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoitcheader); 
    
         foreach (DataRow row in pdspoitccomponent.ttblpoitccomponent)
         {
            result.poitccomponent.Add(Poitccomponent.BuildPoitccomponentFromRow(row));
         }     
         if (pdspoitcheader.ttblpoitcheader.Count > 0)
         {
            result.poitcheader = Poitcheader.BuildPoitcheaderFromRow(pdspoitcheader.ttblpoitcheader[0]);
         }
                    
          
         return result;
          
      }

      public Poitcheader POITCTallyUnitChange(AspoinquiryPOITCTallyUnitChangeRequestAPI AspoinquiryPOITCTallyUnitChangeRequestAPI)
      {   
         var result = new Poitcheader();
         
         var pdspoitcheader = new pdspoitcheaderDataSet();
            
         var pdspoitccomponent = new pdspoitccomponentDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspoinquiryPOITCTallyUnitChangeRequestAPI.poitccomponent)
         {
            DataRow ttblpoitccomponentRow = pdspoitccomponent.ttblpoitccomponent.NewttblpoitccomponentRow();
            Poitccomponent.UpdateRowFromPoitccomponent(ref ttblpoitccomponentRow, obj);
            pdspoitccomponent.ttblpoitccomponent.AddttblpoitccomponentRow((pdspoitccomponentDataSet.ttblpoitccomponentRow)ttblpoitccomponentRow);
         }
          
         DataRow ttblpoitcheaderRow = pdspoitcheader.ttblpoitcheader.NewttblpoitcheaderRow();
         Poitcheader.UpdateRowFromPoitcheader(ref ttblpoitcheaderRow, AspoinquiryPOITCTallyUnitChangeRequestAPI.poitcheader);
         pdspoitcheader.ttblpoitcheader.AddttblpoitcheaderRow((pdspoitcheaderDataSet.ttblpoitcheaderRow)ttblpoitcheaderRow);
          
         
         NLogLoggerP.Trace("POITCTallyUnitChange - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POITCTallyUnitChange(ref pdsContext, ref pdspoitcheader,  pdspoitccomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POITCTallyUnitChange - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspoitcheader); 
    
         if (pdspoitcheader.ttblpoitcheader.Count > 0) 
         { 
             result = Poitcheader.BuildPoitcheaderFromRow(pdspoitcheader.ttblpoitcheader[0]);
         } 
              
          
         return result;
          
      }

      public AspoinquiryPOBundlesLoadResponseAPI POBundlesLoad(Pobundlescriteria pobundlescriteria)
      {   
         var result = new AspoinquiryPOBundlesLoadResponseAPI();
         
         var pdspobundles = new pdspobundlesDataSet();
            
         DataRow ttblpobundlescriteriaCriteria = pdspobundles.ttblpobundlescriteria.NewttblpobundlescriteriaRow();
         Pobundlescriteria.UpdateRowFromPobundlescriteria(ref ttblpobundlescriteriaCriteria, pobundlescriteria);
         pdspobundles.ttblpobundlescriteria.AddttblpobundlescriteriaRow((pdspobundlesDataSet.ttblpobundlescriteriaRow)ttblpobundlescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("POBundlesLoad - Aspoinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspoinquiryproxy = this.proxyAppObject.CreatePO_aspoinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspoinquiryproxy.POBundlesLoad(ref pdsContext, ref pdspobundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("POBundlesLoad - Aspoinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspobundles); 
    
         if (pdspobundles.ttblpobundlescontrol.Count > 0)
         {
            result.pobundlescontrol = Pobundlescontrol.BuildPobundlescontrolFromRow(pdspobundles.ttblpobundlescontrol[0]);
         }
                    
         if (pdspobundles.ttblpobundlescriteria.Count > 0)
         {
            result.pobundlescriteria = Pobundlescriteria.BuildPobundlescriteriaFromRow(pdspobundles.ttblpobundlescriteria[0]);
         }
                    
         foreach (DataRow row in pdspobundles.ttblpobundlesresults)
         {
            result.pobundlesresults.Add(Pobundlesresults.BuildPobundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  