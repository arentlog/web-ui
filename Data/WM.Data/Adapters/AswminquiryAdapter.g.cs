//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WM.Data.Adapters
{
   using com.infor.sxproxy.wmproxy;
   using com.infor.sxproxy.wmproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdswmbincriteria;
   using Models.Pdswmbin;
   using Models.Pdswmbinproducts;
   using Models.Pdswmproductcriteria;
   using Models.Pdswmproductbins;
   using Models.Pdswmprimaryreplenishment;
   using Models.Complex;

   public partial class AswminquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private WMProxyAppObject proxyAppObject;
      
      public AswminquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WMProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswminquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AswminquiryWMBinRetrieveResponseAPI WMBinRetrieve(Wmbincriteria wmbincriteria)
      {   
         var result = new AswminquiryWMBinRetrieveResponseAPI();
         
         var pdswmbincriteria = new pdswmbincriteriaDataSet();
            
         var pdswmbin = new pdswmbinDataSet();
            
         var pdswmbinproducts = new pdswmbinproductsDataSet();
            
         DataRow ttblwmbincriteriaCriteria = pdswmbincriteria.ttblwmbincriteria.NewttblwmbincriteriaRow();
         Wmbincriteria.UpdateRowFromWmbincriteria(ref ttblwmbincriteriaCriteria, wmbincriteria);
         pdswmbincriteria.ttblwmbincriteria.AddttblwmbincriteriaRow((pdswmbincriteriaDataSet.ttblwmbincriteriaRow)ttblwmbincriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMBinRetrieve - Aswminquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswminquiryproxy = this.proxyAppObject.CreatePO_aswminquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswminquiryproxy.WMBinRetrieve(ref pdsContext,  pdswmbincriteria, out pdswmbin, out pdswmbinproducts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinRetrieve - Aswminquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbincriteria); 
    
         if (pdswmbin.ttblwmbin.Count > 0)
         {
            result.wmbin = Wmbin.BuildWmbinFromRow(pdswmbin.ttblwmbin[0]);
         }
                    
         foreach (DataRow row in pdswmbinproducts.ttblwmbinproducts)
         {
            result.wmbinproducts.Add(Wmbinproducts.BuildWmbinproductsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Wmproductbins> WMProductRetrieve(Wmproductcriteria wmproductcriteria)
      {   
         var results = new List<Wmproductbins>();
         
         var pdswmproductcriteria = new pdswmproductcriteriaDataSet();
            
         var pdswmproductbins = new pdswmproductbinsDataSet();
            
         DataRow ttblwmproductcriteriaCriteria = pdswmproductcriteria.ttblwmproductcriteria.NewttblwmproductcriteriaRow();
         Wmproductcriteria.UpdateRowFromWmproductcriteria(ref ttblwmproductcriteriaCriteria, wmproductcriteria);
         pdswmproductcriteria.ttblwmproductcriteria.AddttblwmproductcriteriaRow((pdswmproductcriteriaDataSet.ttblwmproductcriteriaRow)ttblwmproductcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMProductRetrieve - Aswminquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswminquiryproxy = this.proxyAppObject.CreatePO_aswminquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswminquiryproxy.WMProductRetrieve(ref pdsContext,  pdswmproductcriteria, out pdswmproductbins, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMProductRetrieve - Aswminquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmproductcriteria); 
    
            foreach (DataRow row in pdswmproductbins.ttblwmproductbins)
            {
                results.Add(Wmproductbins.BuildWmproductbinsFromRow(row));
            }
            return results;
        
      }

      public AswminquiryWMPrimaryReplenishmentRetrieveResponseAPI WMPrimaryReplenishmentRetrieve(AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI)
      {   
         var result = new AswminquiryWMPrimaryReplenishmentRetrieveResponseAPI();
         
         var pdswmprimaryreplenishment = new pdswmprimaryreplenishmentDataSet();
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         var  cWarehouse = AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI.cWarehouse;
            
         var  cProduct = AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI.cProduct;
            
         var  cBinlocStart = AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI.cBinlocStart;
            
         var  iRecordLimit = AswminquiryWMPrimaryReplenishmentRetrieveRequestAPI.iRecordLimit;
            
         
         NLogLoggerP.Trace("WMPrimaryReplenishmentRetrieve - Aswminquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswminquiryproxy = this.proxyAppObject.CreatePO_aswminquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswminquiryproxy.WMPrimaryReplenishmentRetrieve(ref pdsContext,  cWarehouse,  cProduct,  cBinlocStart,  iRecordLimit, out pdswmprimaryreplenishment, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMPrimaryReplenishmentRetrieve - Aswminquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmprimaryreplenishment); 
    
         foreach (DataRow row in pdswmprimaryreplenishment.ttblwmprimaryreplenishment)
         {
            result.wmprimaryreplenishment.Add(Wmprimaryreplenishment.BuildWmprimaryreplenishmentFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  