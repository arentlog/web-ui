//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.WM.Data.Adapters
{
   using com.infor.sxproxy.wmproxy;
   using com.infor.sxproxy.wmproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdswmbinassigncriteria;
   using Models.Pdswmbinassignment;
   using Models.Pdswmbinassignmenttrans;
   using Models.Pdsmessaging;
   using Models.Pdswmscsearch;
   using Models.Pdswmsbsearch;
   using Models.Pdswmsbpsearch;
   using Models.Pdswmsblookup;
   using Models.Pdswmtransaction;
   using Models.Pdswmbinproducts;
   using Models.Pdswmtransactionsprocessed;
   using Models.Pdswmreplenishmentcriteria;
   using Models.Pdswmreplenishments;
   using Models.Complex;

   public partial class AswmentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private WMProxyAppObject proxyAppObject;
      
      public AswmentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new WMProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AswmentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AswmentryWMBinAssignInitResponseAPI WMBinAssignInit(Wmbinassigncriteria wmbinassigncriteria)
      {   
         var result = new AswmentryWMBinAssignInitResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwmbinassigncriteriaCriteria = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaCriteria, wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMBinAssignInit - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignInit(ref pdsContext,  pdswmbinassigncriteria, out pdswmbinassignment, out pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignInit - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public AswmentryWMBinAssignInitNoAutoFillResponseAPI WMBinAssignInitNoAutoFill(Wmbinassigncriteria wmbinassigncriteria)
      {   
         var result = new AswmentryWMBinAssignInitNoAutoFillResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwmbinassigncriteriaCriteria = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaCriteria, wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMBinAssignInitNoAutoFill - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignInitNoAutoFill(ref pdsContext,  pdswmbinassigncriteria, out pdswmbinassignment, out pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignInitNoAutoFill - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public AswmentryWMBinAssignAutoAllocateResponseAPI WMBinAssignAutoAllocate(AswmentryWMBinAssignAutoAllocateRequestAPI AswmentryWMBinAssignAutoAllocateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignAutoAllocateResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassigncriteriaRow = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaRow, AswmentryWMBinAssignAutoAllocateRequestAPI.wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaRow);
          
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignAutoAllocateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         foreach (var obj in AswmentryWMBinAssignAutoAllocateRequestAPI.wmbinassignmenttrans)
         {
            DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
            Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, obj);
            pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
         }
          
         
         NLogLoggerP.Trace("WMBinAssignAutoAllocate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignAutoAllocate(ref pdsContext,  pdswmbinassigncriteria, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignAutoAllocate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public AswmentryWMBinAssignDeAllocateResponseAPI WMBinAssignDeAllocate(AswmentryWMBinAssignDeAllocateRequestAPI AswmentryWMBinAssignDeAllocateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignDeAllocateResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassigncriteriaRow = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaRow, AswmentryWMBinAssignDeAllocateRequestAPI.wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaRow);
          
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignDeAllocateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         foreach (var obj in AswmentryWMBinAssignDeAllocateRequestAPI.wmbinassignmenttrans)
         {
            DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
            Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, obj);
            pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
         }
          
         
         NLogLoggerP.Trace("WMBinAssignDeAllocate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignDeAllocate(ref pdsContext,  pdswmbinassigncriteria, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignDeAllocate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public AswmentryWMBinAssignStkQtyValidateResponseAPI WMBinAssignStkQtyValidate(AswmentryWMBinAssignStkQtyValidateRequestAPI AswmentryWMBinAssignStkQtyValidateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignStkQtyValidateResponseAPI();
         
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignStkQtyValidateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
         Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, AswmentryWMBinAssignStkQtyValidateRequestAPI.wmbinassignmenttrans);
         pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
          
         
         NLogLoggerP.Trace("WMBinAssignStkQtyValidate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignStkQtyValidate(ref pdsContext, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignStkQtyValidate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassignment); 
    
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         if (pdswmbinassignmenttrans.ttblwmbinassignmenttrans.Count > 0)
         {
            result.wmbinassignmenttrans = Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(pdswmbinassignmenttrans.ttblwmbinassignmenttrans[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AswmentryWMBinAssignBuySellQtyValidateResponseAPI WMBinAssignBuySellQtyValidate(AswmentryWMBinAssignBuySellQtyValidateRequestAPI AswmentryWMBinAssignBuySellQtyValidateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignBuySellQtyValidateResponseAPI();
         
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignBuySellQtyValidateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
         Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, AswmentryWMBinAssignBuySellQtyValidateRequestAPI.wmbinassignmenttrans);
         pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
          
         
         NLogLoggerP.Trace("WMBinAssignBuySellQtyValidate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignBuySellQtyValidate(ref pdsContext, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignBuySellQtyValidate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassignment); 
    
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         if (pdswmbinassignmenttrans.ttblwmbinassignmenttrans.Count > 0)
         {
            result.wmbinassignmenttrans = Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(pdswmbinassignmenttrans.ttblwmbinassignmenttrans[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AswmentryWMBinAssignRowCreateResponseAPI WMBinAssignRowCreate(AswmentryWMBinAssignRowCreateRequestAPI AswmentryWMBinAssignRowCreateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignRowCreateResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassigncriteriaRow = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaRow, AswmentryWMBinAssignRowCreateRequestAPI.wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaRow);
          
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignRowCreateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         foreach (var obj in AswmentryWMBinAssignRowCreateRequestAPI.wmbinassignmenttrans)
         {
            DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
            Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, obj);
            pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
         }
          
         var  pvBinloc = AswmentryWMBinAssignRowCreateRequestAPI.pvBinloc;
            
         var  pvQty = AswmentryWMBinAssignRowCreateRequestAPI.pvQty;
            
         var  pvStockqtytype = AswmentryWMBinAssignRowCreateRequestAPI.pvStockqtytype;
            
         
         NLogLoggerP.Trace("WMBinAssignRowCreate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignRowCreate(ref pdsContext,  pvBinloc,  pvQty,  pvStockqtytype,  pdswmbinassigncriteria, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignRowCreate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public AswmentryWMBinAssignUpdateResponseAPI WMBinAssignUpdate(AswmentryWMBinAssignUpdateRequestAPI AswmentryWMBinAssignUpdateRequestAPI)
      {   
         var result = new AswmentryWMBinAssignUpdateResponseAPI();
         
         var pdswmbinassigncriteria = new pdswmbinassigncriteriaDataSet();
            
         var pdswmbinassignment = new pdswmbinassignmentDataSet();
            
         var pdswmbinassignmenttrans = new pdswmbinassignmenttransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmbinassigncriteriaRow = pdswmbinassigncriteria.ttblwmbinassigncriteria.NewttblwmbinassigncriteriaRow();
         Wmbinassigncriteria.UpdateRowFromWmbinassigncriteria(ref ttblwmbinassigncriteriaRow, AswmentryWMBinAssignUpdateRequestAPI.wmbinassigncriteria);
         pdswmbinassigncriteria.ttblwmbinassigncriteria.AddttblwmbinassigncriteriaRow((pdswmbinassigncriteriaDataSet.ttblwmbinassigncriteriaRow)ttblwmbinassigncriteriaRow);
          
         DataRow ttblwmbinassignmentRow = pdswmbinassignment.ttblwmbinassignment.NewttblwmbinassignmentRow();
         Wmbinassignment.UpdateRowFromWmbinassignment(ref ttblwmbinassignmentRow, AswmentryWMBinAssignUpdateRequestAPI.wmbinassignment);
         pdswmbinassignment.ttblwmbinassignment.AddttblwmbinassignmentRow((pdswmbinassignmentDataSet.ttblwmbinassignmentRow)ttblwmbinassignmentRow);
          
         foreach (var obj in AswmentryWMBinAssignUpdateRequestAPI.wmbinassignmenttrans)
         {
            DataRow ttblwmbinassignmenttransRow = pdswmbinassignmenttrans.ttblwmbinassignmenttrans.NewttblwmbinassignmenttransRow();
            Wmbinassignmenttrans.UpdateRowFromWmbinassignmenttrans(ref ttblwmbinassignmenttransRow, obj);
            pdswmbinassignmenttrans.ttblwmbinassignmenttrans.AddttblwmbinassignmenttransRow((pdswmbinassignmenttransDataSet.ttblwmbinassignmenttransRow)ttblwmbinassignmenttransRow);
         }
          
         
         NLogLoggerP.Trace("WMBinAssignUpdate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignUpdate(ref pdsContext,  pdswmbinassigncriteria, ref pdswmbinassignment, ref pdswmbinassignmenttrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignUpdate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmbinassigncriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmbinassignment.ttblwmbinassignment.Count > 0)
         {
            result.wmbinassignment = Wmbinassignment.BuildWmbinassignmentFromRow(pdswmbinassignment.ttblwmbinassignment[0]);
         }
                    
         foreach (DataRow row in pdswmbinassignmenttrans.ttblwmbinassignmenttrans)
         {
            result.wmbinassignmenttrans.Add(Wmbinassignmenttrans.BuildWmbinassignmenttransFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Wmscsearchresults> WMSCsearch(Wmscsearchcriteria wmscsearchcriteria)
      {   
         var results = new List<Wmscsearchresults>();
         
         var pdswmscsearch = new pdswmscsearchDataSet();
            
         DataRow ttblwmscsearchcriteriaCriteria = pdswmscsearch.ttblwmscsearchcriteria.NewttblwmscsearchcriteriaRow();
         Wmscsearchcriteria.UpdateRowFromWmscsearchcriteria(ref ttblwmscsearchcriteriaCriteria, wmscsearchcriteria);
         pdswmscsearch.ttblwmscsearchcriteria.AddttblwmscsearchcriteriaRow((pdswmscsearchDataSet.ttblwmscsearchcriteriaRow)ttblwmscsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMSCsearch - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMSCsearch(ref pdsContext, ref pdswmscsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMSCsearch - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmscsearch); 
    
            foreach (DataRow row in pdswmscsearch.ttblwmscsearchresults)
            {
                results.Add(Wmscsearchresults.BuildWmscsearchresultsFromRow(row));
            }
            return results;
        
      }

      public AswmentryWMSBsearchResponseAPI WMSBsearch(Wmsbsearchcriteria wmsbsearchcriteria)
      {   
         var result = new AswmentryWMSBsearchResponseAPI();
         
         var pdswmsbsearch = new pdswmsbsearchDataSet();
            
         DataRow ttblwmsbsearchcriteriaCriteria = pdswmsbsearch.ttblwmsbsearchcriteria.NewttblwmsbsearchcriteriaRow();
         Wmsbsearchcriteria.UpdateRowFromWmsbsearchcriteria(ref ttblwmsbsearchcriteriaCriteria, wmsbsearchcriteria);
         pdswmsbsearch.ttblwmsbsearchcriteria.AddttblwmsbsearchcriteriaRow((pdswmsbsearchDataSet.ttblwmsbsearchcriteriaRow)ttblwmsbsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WMSBsearch - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMSBsearch(ref pdsContext, ref pdswmsbsearch, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WMSBsearch - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmsbsearch); 
    
         foreach (DataRow row in pdswmsbsearch.ttblwmsbsearchresults)
         {
            result.wmsbsearchresults.Add(Wmsbsearchresults.BuildWmsbsearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Wmsbpsearchresults> WMSBPsearch(Wmsbpsearchcriteria wmsbpsearchcriteria)
      {   
         var results = new List<Wmsbpsearchresults>();
         
         var pdswmsbpsearch = new pdswmsbpsearchDataSet();
            
         DataRow ttblwmsbpsearchcriteriaCriteria = pdswmsbpsearch.ttblwmsbpsearchcriteria.NewttblwmsbpsearchcriteriaRow();
         Wmsbpsearchcriteria.UpdateRowFromWmsbpsearchcriteria(ref ttblwmsbpsearchcriteriaCriteria, wmsbpsearchcriteria);
         pdswmsbpsearch.ttblwmsbpsearchcriteria.AddttblwmsbpsearchcriteriaRow((pdswmsbpsearchDataSet.ttblwmsbpsearchcriteriaRow)ttblwmsbpsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMSBPsearch - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMSBPsearch(ref pdsContext, ref pdswmsbpsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMSBPsearch - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmsbpsearch); 
    
            foreach (DataRow row in pdswmsbpsearch.ttblwmsbpsearchresults)
            {
                results.Add(Wmsbpsearchresults.BuildWmsbpsearchresultsFromRow(row));
            }
            return results;
        
      }

      public string WMSBPValidateWarnings(string pvWhse, string pvBinloc, string pvProd)
      {   
          
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMSBPValidateWarnings - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMSBPValidateWarnings(ref pdsContext,  pvWhse,  pvBinloc,  pvProd, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMSBPValidateWarnings - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public AswmentryWMSBLookupResponseAPI WMSBLookup(Wmsblookupcriteria wmsblookupcriteria)
      {   
         var result = new AswmentryWMSBLookupResponseAPI();
         
         var pdswmsblookup = new pdswmsblookupDataSet();
            
         DataRow ttblwmsblookupcriteriaCriteria = pdswmsblookup.ttblwmsblookupcriteria.NewttblwmsblookupcriteriaRow();
         Wmsblookupcriteria.UpdateRowFromWmsblookupcriteria(ref ttblwmsblookupcriteriaCriteria, wmsblookupcriteria);
         pdswmsblookup.ttblwmsblookupcriteria.AddttblwmsblookupcriteriaRow((pdswmsblookupDataSet.ttblwmsblookupcriteriaRow)ttblwmsblookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("WMSBLookup - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMSBLookup(ref pdsContext, ref pdswmsblookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("WMSBLookup - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmsblookup); 
    
         foreach (DataRow row in pdswmsblookup.ttblwmsblookupresults)
         {
            result.wmsblookupresults.Add(Wmsblookupresults.BuildWmsblookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AswmentryWMTransactionInitializeResponseAPI WMTransactionInitialize(Wmtransaction wmtransaction)
      {   
         var result = new AswmentryWMTransactionInitializeResponseAPI();
         
         var pdswmtransaction = new pdswmtransactionDataSet();
            
         var pdswmbinproducts = new pdswmbinproductsDataSet();
            
         DataRow ttblwmtransactionCriteria = pdswmtransaction.ttblwmtransaction.NewttblwmtransactionRow();
         Wmtransaction.UpdateRowFromWmtransaction(ref ttblwmtransactionCriteria, wmtransaction);
         pdswmtransaction.ttblwmtransaction.AddttblwmtransactionRow((pdswmtransactionDataSet.ttblwmtransactionRow)ttblwmtransactionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMTransactionInitialize - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMTransactionInitialize(ref pdsContext, ref pdswmtransaction, out pdswmbinproducts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMTransactionInitialize - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmtransaction); 
    
         foreach (DataRow row in pdswmbinproducts.ttblwmbinproducts)
         {
            result.wmbinproducts.Add(Wmbinproducts.BuildWmbinproductsFromRow(row));
         }     
         if (pdswmtransaction.ttblwmtransaction.Count > 0)
         {
            result.wmtransaction = Wmtransaction.BuildWmtransactionFromRow(pdswmtransaction.ttblwmtransaction[0]);
         }
                    
          
         return result;
          
      }

      public AswmentryWMTransactionLeaveProductResponseAPI WMTransactionLeaveProduct(Wmtransaction wmtransaction)
      {   
         var result = new AswmentryWMTransactionLeaveProductResponseAPI();
         
         var pdswmtransaction = new pdswmtransactionDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwmtransactionCriteria = pdswmtransaction.ttblwmtransaction.NewttblwmtransactionRow();
         Wmtransaction.UpdateRowFromWmtransaction(ref ttblwmtransactionCriteria, wmtransaction);
         pdswmtransaction.ttblwmtransaction.AddttblwmtransactionRow((pdswmtransactionDataSet.ttblwmtransactionRow)ttblwmtransactionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMTransactionLeaveProduct - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMTransactionLeaveProduct(ref pdsContext, ref pdswmtransaction, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMTransactionLeaveProduct - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmtransaction); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmtransaction.ttblwmtransaction.Count > 0)
         {
            result.wmtransaction = Wmtransaction.BuildWmtransactionFromRow(pdswmtransaction.ttblwmtransaction[0]);
         }
                    
          
         return result;
          
      }

      public Wmtransaction WMTransactionLeaveToBinLoc(Wmtransaction wmtransaction)
      {   
         var result = new Wmtransaction();
         
         var pdswmtransaction = new pdswmtransactionDataSet();
            
         DataRow ttblwmtransactionCriteria = pdswmtransaction.ttblwmtransaction.NewttblwmtransactionRow();
         Wmtransaction.UpdateRowFromWmtransaction(ref ttblwmtransactionCriteria, wmtransaction);
         pdswmtransaction.ttblwmtransaction.AddttblwmtransactionRow((pdswmtransactionDataSet.ttblwmtransactionRow)ttblwmtransactionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMTransactionLeaveToBinLoc - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMTransactionLeaveToBinLoc(ref pdsContext, ref pdswmtransaction, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMTransactionLeaveToBinLoc - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmtransaction); 
    
         if (pdswmtransaction.ttblwmtransaction.Count > 0) 
         { 
             result = Wmtransaction.BuildWmtransactionFromRow(pdswmtransaction.ttblwmtransaction[0]);
         } 
              
          
         return result;
          
      }

      public AswmentryWMTransactionLeaveQtyResponseAPI WMTransactionLeaveQty(Wmtransaction wmtransaction)
      {   
         var result = new AswmentryWMTransactionLeaveQtyResponseAPI();
         
         var pdswmtransaction = new pdswmtransactionDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblwmtransactionCriteria = pdswmtransaction.ttblwmtransaction.NewttblwmtransactionRow();
         Wmtransaction.UpdateRowFromWmtransaction(ref ttblwmtransactionCriteria, wmtransaction);
         pdswmtransaction.ttblwmtransaction.AddttblwmtransactionRow((pdswmtransactionDataSet.ttblwmtransactionRow)ttblwmtransactionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMTransactionLeaveQty - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMTransactionLeaveQty(ref pdsContext, ref pdswmtransaction, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMTransactionLeaveQty - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmtransaction); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswmtransaction.ttblwmtransaction.Count > 0)
         {
            result.wmtransaction = Wmtransaction.BuildWmtransactionFromRow(pdswmtransaction.ttblwmtransaction[0]);
         }
                    
          
         return result;
          
      }

      public AswmentryWMTransactionFinalizeResponseAPI WMTransactionFinalize(AswmentryWMTransactionFinalizeRequestAPI AswmentryWMTransactionFinalizeRequestAPI)
      {   
         var result = new AswmentryWMTransactionFinalizeResponseAPI();
         
         var pdswmtransaction = new pdswmtransactionDataSet();
            
         var pdswmtransactionsprocessed = new pdswmtransactionsprocessedDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwmtransactionRow = pdswmtransaction.ttblwmtransaction.NewttblwmtransactionRow();
         Wmtransaction.UpdateRowFromWmtransaction(ref ttblwmtransactionRow, AswmentryWMTransactionFinalizeRequestAPI.wmtransaction);
         pdswmtransaction.ttblwmtransaction.AddttblwmtransactionRow((pdswmtransactionDataSet.ttblwmtransactionRow)ttblwmtransactionRow);
          
         foreach (var obj in AswmentryWMTransactionFinalizeRequestAPI.wmtransactionsprocessed)
         {
            DataRow ttblwmtransactionsprocessedRow = pdswmtransactionsprocessed.ttblwmtransactionsprocessed.NewttblwmtransactionsprocessedRow();
            Wmtransactionsprocessed.UpdateRowFromWmtransactionsprocessed(ref ttblwmtransactionsprocessedRow, obj);
            pdswmtransactionsprocessed.ttblwmtransactionsprocessed.AddttblwmtransactionsprocessedRow((pdswmtransactionsprocessedDataSet.ttblwmtransactionsprocessedRow)ttblwmtransactionsprocessedRow);
         }
          
         
         NLogLoggerP.Trace("WMTransactionFinalize - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMTransactionFinalize(ref pdsContext, ref pdswmtransaction, ref pdswmtransactionsprocessed, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMTransactionFinalize - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmtransaction); 
    
         if (pdswmtransaction.ttblwmtransaction.Count > 0)
         {
            result.wmtransaction = Wmtransaction.BuildWmtransactionFromRow(pdswmtransaction.ttblwmtransaction[0]);
         }
                    
         foreach (DataRow row in pdswmtransactionsprocessed.ttblwmtransactionsprocessed)
         {
            result.wmtransactionsprocessed.Add(Wmtransactionsprocessed.BuildWmtransactionsprocessedFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Wmreplenishment> WMReplenishmentLoad(Wmreplenishmentcriteria wmreplenishmentcriteria)
      {   
         var results = new List<Wmreplenishment>();
         
         var pdswmreplenishmentcriteria = new pdswmreplenishmentcriteriaDataSet();
            
         var pdswmreplenishments = new pdswmreplenishmentsDataSet();
            
         DataRow ttblwmreplenishmentcriteriaCriteria = pdswmreplenishmentcriteria.ttblwmreplenishmentcriteria.NewttblwmreplenishmentcriteriaRow();
         Wmreplenishmentcriteria.UpdateRowFromWmreplenishmentcriteria(ref ttblwmreplenishmentcriteriaCriteria, wmreplenishmentcriteria);
         pdswmreplenishmentcriteria.ttblwmreplenishmentcriteria.AddttblwmreplenishmentcriteriaRow((pdswmreplenishmentcriteriaDataSet.ttblwmreplenishmentcriteriaRow)ttblwmreplenishmentcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMReplenishmentLoad - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMReplenishmentLoad(ref pdsContext,  pdswmreplenishmentcriteria, out pdswmreplenishments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMReplenishmentLoad - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmreplenishmentcriteria); 
    
            foreach (DataRow row in pdswmreplenishments.ttblwmreplenishment)
            {
                results.Add(Wmreplenishment.BuildWmreplenishmentFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Wmreplenishment> WMReplenishmentAccept(IEnumerable<Wmreplenishment> wmreplenishment)
      {   
         var results = new List<Wmreplenishment>();
         
         var pdswmreplenishments = new pdswmreplenishmentsDataSet();
            
         foreach (var obj in wmreplenishment)
         {
             DataRow row = pdswmreplenishments.ttblwmreplenishment.NewttblwmreplenishmentRow();
             Wmreplenishment.UpdateRowFromWmreplenishment(ref row, obj);
             pdswmreplenishments.ttblwmreplenishment.AddttblwmreplenishmentRow((pdswmreplenishmentsDataSet.ttblwmreplenishmentRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMReplenishmentAccept - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMReplenishmentAccept(ref pdsContext, ref pdswmreplenishments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMReplenishmentAccept - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmreplenishments); 
    
            foreach (DataRow row in pdswmreplenishments.ttblwmreplenishment)
            {
                results.Add(Wmreplenishment.BuildWmreplenishmentFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Wmreplenishment> WMReplenishmentCancel(IEnumerable<Wmreplenishment> wmreplenishment)
      {   
         var results = new List<Wmreplenishment>();
         
         var pdswmreplenishments = new pdswmreplenishmentsDataSet();
            
         foreach (var obj in wmreplenishment)
         {
             DataRow row = pdswmreplenishments.ttblwmreplenishment.NewttblwmreplenishmentRow();
             Wmreplenishment.UpdateRowFromWmreplenishment(ref row, obj);
             pdswmreplenishments.ttblwmreplenishment.AddttblwmreplenishmentRow((pdswmreplenishmentsDataSet.ttblwmreplenishmentRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMReplenishmentCancel - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMReplenishmentCancel(ref pdsContext, ref pdswmreplenishments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMReplenishmentCancel - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmreplenishments); 
    
            foreach (DataRow row in pdswmreplenishments.ttblwmreplenishment)
            {
                results.Add(Wmreplenishment.BuildWmreplenishmentFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Wmreplenishment> WMReplenishmentRestore(IEnumerable<Wmreplenishment> wmreplenishment)
      {   
         var results = new List<Wmreplenishment>();
         
         var pdswmreplenishments = new pdswmreplenishmentsDataSet();
            
         foreach (var obj in wmreplenishment)
         {
             DataRow row = pdswmreplenishments.ttblwmreplenishment.NewttblwmreplenishmentRow();
             Wmreplenishment.UpdateRowFromWmreplenishment(ref row, obj);
             pdswmreplenishments.ttblwmreplenishment.AddttblwmreplenishmentRow((pdswmreplenishmentsDataSet.ttblwmreplenishmentRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMReplenishmentRestore - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMReplenishmentRestore(ref pdsContext, ref pdswmreplenishments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMReplenishmentRestore - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmreplenishments); 
    
            foreach (DataRow row in pdswmreplenishments.ttblwmreplenishment)
            {
                results.Add(Wmreplenishment.BuildWmreplenishmentFromRow(row));
            }
            return results;
        
      }

      public void WMReplenishmentUpdate(IEnumerable<Wmreplenishmentcriteria> wmreplenishmentcriteria)
      {   
         
         var pdswmreplenishmentcriteria = new pdswmreplenishmentcriteriaDataSet();
            
         foreach (var obj in wmreplenishmentcriteria)
         {
             DataRow row = pdswmreplenishmentcriteria.ttblwmreplenishmentcriteria.NewttblwmreplenishmentcriteriaRow();
             Wmreplenishmentcriteria.UpdateRowFromWmreplenishmentcriteria(ref row, obj);
             pdswmreplenishmentcriteria.ttblwmreplenishmentcriteria.AddttblwmreplenishmentcriteriaRow((pdswmreplenishmentcriteriaDataSet.ttblwmreplenishmentcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMReplenishmentUpdate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMReplenishmentUpdate(ref pdsContext,  pdswmreplenishmentcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMReplenishmentUpdate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswmreplenishmentcriteria);
      }

      public decimal WMBinAssignStkQtyCalculate(string pvWhse, string pvProd, string pvBuysellunit, decimal pvBuysellqty)
      {   
          
         decimal pvStockqty = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMBinAssignStkQtyCalculate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignStkQtyCalculate(ref pdsContext,  pvWhse,  pvProd,  pvBuysellunit,  pvBuysellqty, out pvStockqty, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignStkQtyCalculate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvStockqty;
      
      }

      public decimal WMBinAssignBuySellQtyCalculate(string pvWhse, string pvProd, string pvBuysellunit, decimal pvStockqty)
      {   
          
         decimal pvBuysellqty = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("WMBinAssignBuySellQtyCalculate - Aswmentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAswmentryproxy = this.proxyAppObject.CreatePO_aswmentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAswmentryproxy.WMBinAssignBuySellQtyCalculate(ref pdsContext,  pvWhse,  pvProd,  pvBuysellunit,  pvStockqty, out pvBuysellqty, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("WMBinAssignBuySellQtyCalculate - Aswmentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvBuysellqty;
      
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  