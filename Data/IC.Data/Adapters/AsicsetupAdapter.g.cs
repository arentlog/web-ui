//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Adapters
{
   using com.infor.sxproxy.icproxy;
   using com.infor.sxproxy.icproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsicspcaddchg;
   using Models.Pdsmessaging;
   using Models.Pdsicspcdsearch;
   using Models.Pdsicspcdaddchg;
   using Models.Pdsicspclookup;
   using Models.Pdsicspesetup;
   using Models.Pdsicspesetupcriteria;
   using Models.Pdsicsprsrcrestrict;
   using Models.Pdsicsprsrcsearch;
   using Models.Pdsicssdefaulttype;
   using Models.Pdsicsabcloadtt;
   using Models.Pdsicserialretrievepo;
   using Models.Pdsicsewloadtt;
   using Models.Pdsicproductremandefaults;
   using Models.Pdsicsevloadtt;
   using Models.Pdsicproductfieldcontrols;
   using Models.Pdsicsp;
   using Models.Pdsicsc;
   using Models.Pdsicsprcload;
   using Models.Pdsicsprcaddchg;
   using Models.Pdsicsoesetupcriteria;
   using Models.Pdsicsoesetup;
   using Models.Pdsicsehhazardous;
   using Models.Pdsiccatalogcopy;
   using Models.Pdsiclotcopy;
   using Models.Pdsicserialcopy;
   using Models.Pdsicprodlinecopy;
   using Models.Pdsicproductcopy;
   using Models.Pdsicprodlistadd;
   using Models.Pdsicspecprccost;
   using Models.Pdsicspecprccostcreate;
   using Models.Pdsicspecprccostupdate;
   using Models.Pdsicsdploadtt;
   using Models.Pdsicsecoppositeenable;
   using Models.Pdsicsecoppositecreate;
   using Models.Pdsicsecsuperxrefcreate;
   using Models.Pdsicsegkeyfields;
   using Models.Pdsicsegkeyfieldsload;
   using Models.Pdsicsegreq;
   using Models.Pdsicwhseproductcopy;
   using Models.Pdsicwarehousecopy;
   using Models.Pdsicwarehouseglfetch;
   using Models.Pdsicwarehouseglsave;
   using Models.Pdsicscupdpd;
   using Models.Pdsicswordunit;
   using Models.Pdsicsrcostmatrixcriteria;
   using Models.Pdsicsrcostmatrix;
   using Models.Pdsicsrrank;
   using Models.Pdsicsebcriteria;
   using Models.Pdsicsebcontrol;
   using Models.Pdsicsebresults;
   using Models.Pdsicsebadd;
   using Models.Pdsicsebloose;
   using Models.Pdsicsebcompcriteria;
   using Models.Pdsicsebdelete;
   using Models.Pdsicsebcompresults;
   using Models.Pdsicsebcomptopbanner;
   using Models.Pdsicsebcompdelete;
   using Models.Pdsicsebcompnew;
   using Models.Pdsicsehcopy;
   using Models.Pdsicseegetlist;
   using Models.Pdsicsvcontrol;
   using Models.Pdsicsv;
   using Models.Pdsicsefcriteria;
   using Models.Pdsicsefresults;
   using Models.Pdsicsoclevelcds;
   using Models.Pdsicsocload;
   using Models.Pdsicsprinitialize;
   using Models.Pdsicsprsearch;
   using Models.Pdsicspraddchg;
   using Models.Pdsicsprtsearch;
   using Models.Pdsicsprtaddchg;
   using Models.Pdsicsprcsearch;
   using Models.Pdsicsprclookup;
   using Models.Pdsicspcsearch;
   using Models.Complex;

   public partial class AsicsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private ICProxyAppObject proxyAppObject;
      
      public AsicsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ICProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsicsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Icspcaddchg ICSPCLeaveField(AsicsetupICSPCLeaveFieldRequestAPI AsicsetupICSPCLeaveFieldRequestAPI)
      {   
         var result = new Icspcaddchg();
         
         var pdsicspcaddchg = new pdsicspcaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicspcaddchgRow = pdsicspcaddchg.ttblicspcaddchg.NewttblicspcaddchgRow();
         Icspcaddchg.UpdateRowFromIcspcaddchg(ref ttblicspcaddchgRow, AsicsetupICSPCLeaveFieldRequestAPI.icspcaddchg);
         pdsicspcaddchg.ttblicspcaddchg.AddttblicspcaddchgRow((pdsicspcaddchgDataSet.ttblicspcaddchgRow)ttblicspcaddchgRow);
          
         var  cFieldName = AsicsetupICSPCLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("ICSPCLeaveField - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCLeaveField(ref pdsContext,  cFieldName, ref pdsicspcaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCLeaveField - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcaddchg); 
    
         if (pdsicspcaddchg.ttblicspcaddchg.Count > 0) 
         { 
             result = Icspcaddchg.BuildIcspcaddchgFromRow(pdsicspcaddchg.ttblicspcaddchg[0]);
         } 
              
          
         return result;
          
      }

      public Icspcaddchg ICSPCLoad(string cRowPointer)
      {   
         var result = new Icspcaddchg();
         
         var pdsicspcaddchg = new pdsicspcaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCLoad(ref pdsContext,  cRowPointer, out pdsicspcaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcaddchg); 
    
         if (pdsicspcaddchg.ttblicspcaddchg.Count > 0) 
         { 
             result = Icspcaddchg.BuildIcspcaddchgFromRow(pdsicspcaddchg.ttblicspcaddchg[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSPCUpdateResponseAPI ICSPCUpdate(IEnumerable<Icspcaddchg> icspcaddchg)
      {   
         var result = new AsicsetupICSPCUpdateResponseAPI();
         
         var pdsicspcaddchg = new pdsicspcaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in icspcaddchg)
         {
             DataRow row = pdsicspcaddchg.ttblicspcaddchg.NewttblicspcaddchgRow();
             Icspcaddchg.UpdateRowFromIcspcaddchg(ref row, obj);
             pdsicspcaddchg.ttblicspcaddchg.AddttblicspcaddchgRow((pdsicspcaddchgDataSet.ttblicspcaddchgRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCUpdate(ref pdsContext, ref pdsicspcaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcaddchg); 
    
         foreach (DataRow row in pdsicspcaddchg.ttblicspcaddchg)
         {
            result.icspcaddchg.Add(Icspcaddchg.BuildIcspcaddchgFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICSPCCancel(string pvRowpointer)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCCancel - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCCancel(ref pdsContext,  pvRowpointer, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCCancel - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icspcdresults> ICSPCDSearch(Icspcdcriteria icspcdcriteria)
      {   
         var results = new List<Icspcdresults>();
         
         var pdsicspcdsearch = new pdsicspcdsearchDataSet();
            
         DataRow ttblicspcdcriteriaCriteria = pdsicspcdsearch.ttblicspcdcriteria.NewttblicspcdcriteriaRow();
         Icspcdcriteria.UpdateRowFromIcspcdcriteria(ref ttblicspcdcriteriaCriteria, icspcdcriteria);
         pdsicspcdsearch.ttblicspcdcriteria.AddttblicspcdcriteriaRow((pdsicspcdsearchDataSet.ttblicspcdcriteriaRow)ttblicspcdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCDSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCDSearch(ref pdsContext, ref pdsicspcdsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCDSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcdsearch); 
    
            foreach (DataRow row in pdsicspcdsearch.ttblicspcdresults)
            {
                results.Add(Icspcdresults.BuildIcspcdresultsFromRow(row));
            }
            return results;
        
      }

      public Icspcdaddchg ICSPCDLoad(string pvSrcrowpointer, string pvIcsprowpointer, bool pvIcspcdinitfl)
      {   
         var result = new Icspcdaddchg();
         
         var pdsicspcdaddchg = new pdsicspcdaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCDLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCDLoad(ref pdsContext,  pvSrcrowpointer,  pvIcsprowpointer,  pvIcspcdinitfl, out pdsicspcdaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCDLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcdaddchg); 
    
         if (pdsicspcdaddchg.ttblicspcdaddchg.Count > 0) 
         { 
             result = Icspcdaddchg.BuildIcspcdaddchgFromRow(pdsicspcdaddchg.ttblicspcdaddchg[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSPCDUpdateResponseAPI ICSPCDUpdate(Icspcdaddchg icspcdaddchg)
      {   
         var result = new AsicsetupICSPCDUpdateResponseAPI();
         
         var pdsicspcdaddchg = new pdsicspcdaddchgDataSet();
            
         DataRow ttblicspcdaddchgCriteria = pdsicspcdaddchg.ttblicspcdaddchg.NewttblicspcdaddchgRow();
         Icspcdaddchg.UpdateRowFromIcspcdaddchg(ref ttblicspcdaddchgCriteria, icspcdaddchg);
         pdsicspcdaddchg.ttblicspcdaddchg.AddttblicspcdaddchgRow((pdsicspcdaddchgDataSet.ttblicspcdaddchgRow)ttblicspcdaddchgCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCDUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCDUpdate(ref pdsContext, ref pdsicspcdaddchg, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCDUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcdaddchg); 
    
         if (pdsicspcdaddchg.ttblicspcdaddchg.Count > 0)
         {
            result.icspcdaddchg = Icspcdaddchg.BuildIcspcdaddchgFromRow(pdsicspcdaddchg.ttblicspcdaddchg[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsicsetupICSPCLookupResponseAPI ICSPCLookup(Icspclookupcriteria icspclookupcriteria)
      {   
         var result = new AsicsetupICSPCLookupResponseAPI();
         
         var pdsicspclookup = new pdsicspclookupDataSet();
            
         DataRow ttblicspclookupcriteriaCriteria = pdsicspclookup.ttblicspclookupcriteria.NewttblicspclookupcriteriaRow();
         Icspclookupcriteria.UpdateRowFromIcspclookupcriteria(ref ttblicspclookupcriteriaCriteria, icspclookupcriteria);
         pdsicspclookup.ttblicspclookupcriteria.AddttblicspclookupcriteriaRow((pdsicspclookupDataSet.ttblicspclookupcriteriaRow)ttblicspclookupcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cWarningMsg = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCLookup - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCLookup(ref pdsContext, ref pdsicspclookup, out lMoreRecords, out cWarningMsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCLookup - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspclookup); 
    
         foreach (DataRow row in pdsicspclookup.ttblicspclookupresults)
         {
            result.icspclookupresults.Add(Icspclookupresults.BuildIcspclookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public Icspesetup ICSPECreate(Icspesetup icspesetup)
      {   
         var result = new Icspesetup();
         
         var pdsicspesetup = new pdsicspesetupDataSet();
            
         DataRow ttblicspesetupCriteria = pdsicspesetup.ttblicspesetup.NewttblicspesetupRow();
         Icspesetup.UpdateRowFromIcspesetup(ref ttblicspesetupCriteria, icspesetup);
         pdsicspesetup.ttblicspesetup.AddttblicspesetupRow((pdsicspesetupDataSet.ttblicspesetupRow)ttblicspesetupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPECreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPECreate(ref pdsContext, ref pdsicspesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPECreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspesetup); 
    
         if (pdsicspesetup.ttblicspesetup.Count > 0) 
         { 
             result = Icspesetup.BuildIcspesetupFromRow(pdsicspesetup.ttblicspesetup[0]);
         } 
              
          
         return result;
          
      }

      public void ICSPEDelete(IEnumerable<Icspesetup> icspesetup)
      {   
         
         var pdsicspesetup = new pdsicspesetupDataSet();
            
         foreach (var obj in icspesetup)
         {
             DataRow row = pdsicspesetup.ttblicspesetup.NewttblicspesetupRow();
             Icspesetup.UpdateRowFromIcspesetup(ref row, obj);
             pdsicspesetup.ttblicspesetup.AddttblicspesetupRow((pdsicspesetupDataSet.ttblicspesetupRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPEDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPEDelete(ref pdsContext,  pdsicspesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPEDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspesetup);
      }

      public AsicsetupGetICSPEListResponseAPI GetICSPEList(Icspesetupcriteria icspesetupcriteria)
      {   
         var result = new AsicsetupGetICSPEListResponseAPI();
         
         var pdsicspesetupcriteria = new pdsicspesetupcriteriaDataSet();
            
         var pdsicspesetup = new pdsicspesetupDataSet();
            
         DataRow ttblicspesetupcriteriaCriteria = pdsicspesetupcriteria.ttblicspesetupcriteria.NewttblicspesetupcriteriaRow();
         Icspesetupcriteria.UpdateRowFromIcspesetupcriteria(ref ttblicspesetupcriteriaCriteria, icspesetupcriteria);
         pdsicspesetupcriteria.ttblicspesetupcriteria.AddttblicspesetupcriteriaRow((pdsicspesetupcriteriaDataSet.ttblicspesetupcriteriaRow)ttblicspesetupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetICSPEList - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.GetICSPEList(ref pdsContext,  pdsicspesetupcriteria, out pdsicspesetup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetICSPEList - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspesetupcriteria); 
    
         foreach (DataRow row in pdsicspesetup.ttblicspesetup)
         {
            result.icspesetup.Add(Icspesetup.BuildIcspesetupFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void ICSPESave(Icspesetup icspesetup)
      {   
         
         var pdsicspesetup = new pdsicspesetupDataSet();
            
         DataRow ttblicspesetupCriteria = pdsicspesetup.ttblicspesetup.NewttblicspesetupRow();
         Icspesetup.UpdateRowFromIcspesetup(ref ttblicspesetupCriteria, icspesetup);
         pdsicspesetup.ttblicspesetup.AddttblicspesetupRow((pdsicspesetupDataSet.ttblicspesetupRow)ttblicspesetupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPESave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPESave(ref pdsContext,  pdsicspesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPESave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspesetup);
      }

      public Icsprsrcrestrict ICSPRSourcingCreate(Icsprsrcrestrict icsprsrcrestrict)
      {   
         var result = new Icsprsrcrestrict();
         
         var pdsicsprsrcrestrict = new pdsicsprsrcrestrictDataSet();
            
         DataRow ttblicsprsrcrestrictCriteria = pdsicsprsrcrestrict.ttblicsprsrcrestrict.NewttblicsprsrcrestrictRow();
         Icsprsrcrestrict.UpdateRowFromIcsprsrcrestrict(ref ttblicsprsrcrestrictCriteria, icsprsrcrestrict);
         pdsicsprsrcrestrict.ttblicsprsrcrestrict.AddttblicsprsrcrestrictRow((pdsicsprsrcrestrictDataSet.ttblicsprsrcrestrictRow)ttblicsprsrcrestrictCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRSourcingCreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingCreate(ref pdsContext, ref pdsicsprsrcrestrict, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingCreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcrestrict); 
    
         if (pdsicsprsrcrestrict.ttblicsprsrcrestrict.Count > 0) 
         { 
             result = Icsprsrcrestrict.BuildIcsprsrcrestrictFromRow(pdsicsprsrcrestrict.ttblicsprsrcrestrict[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSPRSourcingSearchResponseAPI ICSPRSourcingSearch(Icsprsrcsearchcriteria icsprsrcsearchcriteria)
      {   
         var result = new AsicsetupICSPRSourcingSearchResponseAPI();
         
         var pdsicsprsrcsearch = new pdsicsprsrcsearchDataSet();
            
         DataRow ttblicsprsrcsearchcriteriaCriteria = pdsicsprsrcsearch.ttblicsprsrcsearchcriteria.NewttblicsprsrcsearchcriteriaRow();
         Icsprsrcsearchcriteria.UpdateRowFromIcsprsrcsearchcriteria(ref ttblicsprsrcsearchcriteriaCriteria, icsprsrcsearchcriteria);
         pdsicsprsrcsearch.ttblicsprsrcsearchcriteria.AddttblicsprsrcsearchcriteriaRow((pdsicsprsrcsearchDataSet.ttblicsprsrcsearchcriteriaRow)ttblicsprsrcsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICSPRSourcingSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingSearch(ref pdsContext, ref pdsicsprsrcsearch, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcsearch); 
    
         foreach (DataRow row in pdsicsprsrcsearch.ttblicsprsrcsearchresults)
         {
            result.icsprsrcsearchresults.Add(Icsprsrcsearchresults.BuildIcsprsrcsearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void ICSPRSourcingDelete(IEnumerable<Icsprsrcsearchresults> icsprsrcsearchresults)
      {   
         
         var pdsicsprsrcsearch = new pdsicsprsrcsearchDataSet();
            
         foreach (var obj in icsprsrcsearchresults)
         {
             DataRow row = pdsicsprsrcsearch.ttblicsprsrcsearchresults.NewttblicsprsrcsearchresultsRow();
             Icsprsrcsearchresults.UpdateRowFromIcsprsrcsearchresults(ref row, obj);
             pdsicsprsrcsearch.ttblicsprsrcsearchresults.AddttblicsprsrcsearchresultsRow((pdsicsprsrcsearchDataSet.ttblicsprsrcsearchresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRSourcingDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingDelete(ref pdsContext,  pdsicsprsrcsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcsearch);
      }

      public Icsprsrcrestrict ICSPRSourcingRetrieve(Icsprsrcrestrict icsprsrcrestrict)
      {   
         var result = new Icsprsrcrestrict();
         
         var pdsicsprsrcrestrict = new pdsicsprsrcrestrictDataSet();
            
         DataRow ttblicsprsrcrestrictCriteria = pdsicsprsrcrestrict.ttblicsprsrcrestrict.NewttblicsprsrcrestrictRow();
         Icsprsrcrestrict.UpdateRowFromIcsprsrcrestrict(ref ttblicsprsrcrestrictCriteria, icsprsrcrestrict);
         pdsicsprsrcrestrict.ttblicsprsrcrestrict.AddttblicsprsrcrestrictRow((pdsicsprsrcrestrictDataSet.ttblicsprsrcrestrictRow)ttblicsprsrcrestrictCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRSourcingRetrieve - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingRetrieve(ref pdsContext, ref pdsicsprsrcrestrict, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingRetrieve - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcrestrict); 
    
         if (pdsicsprsrcrestrict.ttblicsprsrcrestrict.Count > 0) 
         { 
             result = Icsprsrcrestrict.BuildIcsprsrcrestrictFromRow(pdsicsprsrcrestrict.ttblicsprsrcrestrict[0]);
         } 
              
          
         return result;
          
      }

      public void ICSPRSourcingUpdate(Icsprsrcrestrict icsprsrcrestrict)
      {   
         
         var pdsicsprsrcrestrict = new pdsicsprsrcrestrictDataSet();
            
         DataRow ttblicsprsrcrestrictCriteria = pdsicsprsrcrestrict.ttblicsprsrcrestrict.NewttblicsprsrcrestrictRow();
         Icsprsrcrestrict.UpdateRowFromIcsprsrcrestrict(ref ttblicsprsrcrestrictCriteria, icsprsrcrestrict);
         pdsicsprsrcrestrict.ttblicsprsrcrestrict.AddttblicsprsrcrestrictRow((pdsicsprsrcrestrictDataSet.ttblicsprsrcrestrictRow)ttblicsprsrcrestrictCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRSourcingUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingUpdate(ref pdsContext,  pdsicsprsrcrestrict, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcrestrict);
      }

      public void ICSPRSourcingActivate(AsicsetupICSPRSourcingActivateRequestAPI AsicsetupICSPRSourcingActivateRequestAPI)
      {   
         
         var pdsicsprsrcsearch = new pdsicsprsrcsearchDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSPRSourcingActivateRequestAPI.icsprsrcsearchresults)
         {
            DataRow ttblicsprsrcsearchresultsRow = pdsicsprsrcsearch.ttblicsprsrcsearchresults.NewttblicsprsrcsearchresultsRow();
            Icsprsrcsearchresults.UpdateRowFromIcsprsrcsearchresults(ref ttblicsprsrcsearchresultsRow, obj);
            pdsicsprsrcsearch.ttblicsprsrcsearchresults.AddttblicsprsrcsearchresultsRow((pdsicsprsrcsearchDataSet.ttblicsprsrcsearchresultsRow)ttblicsprsrcsearchresultsRow);
         }
          
         var  lActive = AsicsetupICSPRSourcingActivateRequestAPI.lActive;
            
         
         NLogLoggerP.Trace("ICSPRSourcingActivate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSourcingActivate(ref pdsContext,  lActive,  pdsicsprsrcsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSourcingActivate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsrcsearch);
      }

      public string ICSWCheckTierPrefPriority(AsicsetupICSWCheckTierPrefPriorityRequestAPI AsicsetupICSWCheckTierPrefPriorityRequestAPI)
      {   
          
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         var  pvCono = AsicsetupICSWCheckTierPrefPriorityRequestAPI.pvCono;
            
         var  pvOper = AsicsetupICSWCheckTierPrefPriorityRequestAPI.pvOper;
            
         var  pvWhse = AsicsetupICSWCheckTierPrefPriorityRequestAPI.pvWhse;
            
         var  pvProd = AsicsetupICSWCheckTierPrefPriorityRequestAPI.pvProd;
            
         
         NLogLoggerP.Trace("ICSWCheckTierPrefPriority - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSWCheckTierPrefPriority(ref pdsContext,  pvCono,  pvOper,  pvWhse,  pvProd, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSWCheckTierPrefPriority - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public Icssdefaulttype GetICSSDefaultType(Icssdefaulttype icssdefaulttype)
      {   
         var result = new Icssdefaulttype();
         
         var pdsicssdefaulttype = new pdsicssdefaulttypeDataSet();
            
         DataRow ttblicssdefaulttypeCriteria = pdsicssdefaulttype.ttblicssdefaulttype.NewttblicssdefaulttypeRow();
         Icssdefaulttype.UpdateRowFromIcssdefaulttype(ref ttblicssdefaulttypeCriteria, icssdefaulttype);
         pdsicssdefaulttype.ttblicssdefaulttype.AddttblicssdefaulttypeRow((pdsicssdefaulttypeDataSet.ttblicssdefaulttypeRow)ttblicssdefaulttypeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetICSSDefaultType - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.GetICSSDefaultType(ref pdsContext, ref pdsicssdefaulttype, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetICSSDefaultType - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicssdefaulttype); 
    
         if (pdsicssdefaulttype.ttblicssdefaulttype.Count > 0) 
         { 
             result = Icssdefaulttype.BuildIcssdefaulttypeFromRow(pdsicssdefaulttype.ttblicssdefaulttype[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icsabcloadttresults> ICSABCLoadTT(Icsabcloadttcriteria icsabcloadttcriteria)
      {   
         var results = new List<Icsabcloadttresults>();
         
         var pdsicsabcloadtt = new pdsicsabcloadttDataSet();
            
         DataRow ttblicsabcloadttcriteriaCriteria = pdsicsabcloadtt.ttblicsabcloadttcriteria.NewttblicsabcloadttcriteriaRow();
         Icsabcloadttcriteria.UpdateRowFromIcsabcloadttcriteria(ref ttblicsabcloadttcriteriaCriteria, icsabcloadttcriteria);
         pdsicsabcloadtt.ttblicsabcloadttcriteria.AddttblicsabcloadttcriteriaRow((pdsicsabcloadttDataSet.ttblicsabcloadttcriteriaRow)ttblicsabcloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSABCLoadTT - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSABCLoadTT(ref pdsContext, ref pdsicsabcloadtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSABCLoadTT - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsabcloadtt); 
    
            foreach (DataRow row in pdsicsabcloadtt.ttblicsabcloadttresults)
            {
                results.Add(Icsabcloadttresults.BuildIcsabcloadttresultsFromRow(row));
            }
            return results;
        
      }

      public Icserialretrievepo ICSerialRetrievePO(Icserialretrievepo icserialretrievepo)
      {   
         var result = new Icserialretrievepo();
         
         var pdsicserialretrievepo = new pdsicserialretrievepoDataSet();
            
         DataRow ttblicserialretrievepoCriteria = pdsicserialretrievepo.ttblicserialretrievepo.NewttblicserialretrievepoRow();
         Icserialretrievepo.UpdateRowFromIcserialretrievepo(ref ttblicserialretrievepoCriteria, icserialretrievepo);
         pdsicserialretrievepo.ttblicserialretrievepo.AddttblicserialretrievepoRow((pdsicserialretrievepoDataSet.ttblicserialretrievepoRow)ttblicserialretrievepoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSerialRetrievePO - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSerialRetrievePO(ref pdsContext, ref pdsicserialretrievepo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSerialRetrievePO - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicserialretrievepo); 
    
         if (pdsicserialretrievepo.ttblicserialretrievepo.Count > 0) 
         { 
             result = Icserialretrievepo.BuildIcserialretrievepoFromRow(pdsicserialretrievepo.ttblicserialretrievepo[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icsewloadttresults> ICSEWLoadTT(Icsewloadttcriteria icsewloadttcriteria)
      {   
         var results = new List<Icsewloadttresults>();
         
         var pdsicsewloadtt = new pdsicsewloadttDataSet();
            
         DataRow ttblicsewloadttcriteriaCriteria = pdsicsewloadtt.ttblicsewloadttcriteria.NewttblicsewloadttcriteriaRow();
         Icsewloadttcriteria.UpdateRowFromIcsewloadttcriteria(ref ttblicsewloadttcriteriaCriteria, icsewloadttcriteria);
         pdsicsewloadtt.ttblicsewloadttcriteria.AddttblicsewloadttcriteriaRow((pdsicsewloadttDataSet.ttblicsewloadttcriteriaRow)ttblicsewloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEWLoadTT - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEWLoadTT(ref pdsContext, ref pdsicsewloadtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEWLoadTT - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsewloadtt); 
    
            foreach (DataRow row in pdsicsewloadtt.ttblicsewloadttresults)
            {
                results.Add(Icsewloadttresults.BuildIcsewloadttresultsFromRow(row));
            }
            return results;
        
      }

      public Icproductremandefaults ICProductRemanDefaults(Icproductremandefaults icproductremandefaults)
      {   
         var result = new Icproductremandefaults();
         
         var pdsicproductremandefaults = new pdsicproductremandefaultsDataSet();
            
         DataRow ttblicproductremandefaultsCriteria = pdsicproductremandefaults.ttblicproductremandefaults.NewttblicproductremandefaultsRow();
         Icproductremandefaults.UpdateRowFromIcproductremandefaults(ref ttblicproductremandefaultsCriteria, icproductremandefaults);
         pdsicproductremandefaults.ttblicproductremandefaults.AddttblicproductremandefaultsRow((pdsicproductremandefaultsDataSet.ttblicproductremandefaultsRow)ttblicproductremandefaultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICProductRemanDefaults - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductRemanDefaults(ref pdsContext, ref pdsicproductremandefaults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICProductRemanDefaults - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicproductremandefaults); 
    
         if (pdsicproductremandefaults.ttblicproductremandefaults.Count > 0) 
         { 
             result = Icproductremandefaults.BuildIcproductremandefaultsFromRow(pdsicproductremandefaults.ttblicproductremandefaults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icsevloadttresults> ICSEVLoadTT(Icsevloadttcriteria icsevloadttcriteria)
      {   
         var results = new List<Icsevloadttresults>();
         
         var pdsicsevloadtt = new pdsicsevloadttDataSet();
            
         DataRow ttblicsevloadttcriteriaCriteria = pdsicsevloadtt.ttblicsevloadttcriteria.NewttblicsevloadttcriteriaRow();
         Icsevloadttcriteria.UpdateRowFromIcsevloadttcriteria(ref ttblicsevloadttcriteriaCriteria, icsevloadttcriteria);
         pdsicsevloadtt.ttblicsevloadttcriteria.AddttblicsevloadttcriteriaRow((pdsicsevloadttDataSet.ttblicsevloadttcriteriaRow)ttblicsevloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEVLoadTT - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEVLoadTT(ref pdsContext, ref pdsicsevloadtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEVLoadTT - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsevloadtt); 
    
            foreach (DataRow row in pdsicsevloadtt.ttblicsevloadttresults)
            {
                results.Add(Icsevloadttresults.BuildIcsevloadttresultsFromRow(row));
            }
            return results;
        
      }

      public Icproductfieldcontrols ICProductFieldControls(Icproductfieldcontrols icproductfieldcontrols)
      {   
         var result = new Icproductfieldcontrols();
         
         var pdsicproductfieldcontrols = new pdsicproductfieldcontrolsDataSet();
            
         DataRow ttblicproductfieldcontrolsCriteria = pdsicproductfieldcontrols.ttblicproductfieldcontrols.NewttblicproductfieldcontrolsRow();
         Icproductfieldcontrols.UpdateRowFromIcproductfieldcontrols(ref ttblicproductfieldcontrolsCriteria, icproductfieldcontrols);
         pdsicproductfieldcontrols.ttblicproductfieldcontrols.AddttblicproductfieldcontrolsRow((pdsicproductfieldcontrolsDataSet.ttblicproductfieldcontrolsRow)ttblicproductfieldcontrolsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICProductFieldControls - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductFieldControls(ref pdsContext, ref pdsicproductfieldcontrols, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICProductFieldControls - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicproductfieldcontrols); 
    
         if (pdsicproductfieldcontrols.ttblicproductfieldcontrols.Count > 0) 
         { 
             result = Icproductfieldcontrols.BuildIcproductfieldcontrolsFromRow(pdsicproductfieldcontrols.ttblicproductfieldcontrols[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICNCNRCheckResponseAPI ICNCNRCheck(AsicsetupICNCNRCheckRequestAPI AsicsetupICNCNRCheckRequestAPI)
      {   
         var result = new AsicsetupICNCNRCheckResponseAPI();
         
         var pdsicsp = new pdsicspDataSet();
            
         var pdsicsc = new pdsicscDataSet();
            
         bool pvDisplaymsgfl = false;
         bool pvCatalogfl = false;
         string cErrorMessage = string.Empty;
   
         var  pvProd = AsicsetupICNCNRCheckRequestAPI.pvProd;
            
         var  pvWhse = AsicsetupICNCNRCheckRequestAPI.pvWhse;
            
         var  pvCheckncnrfl = AsicsetupICNCNRCheckRequestAPI.pvCheckncnrfl;
            
         
         NLogLoggerP.Trace("ICNCNRCheck - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICNCNRCheck(ref pdsContext,  pvProd,  pvWhse,  pvCheckncnrfl, out pvDisplaymsgfl, out pvCatalogfl, out pdsicsp, out pdsicsc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICNCNRCheck - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsp); 
    
         if (pdsicsc.ttblicsc.Count > 0)
         {
            result.icsc = Icsc.BuildIcscFromRow(pdsicsc.ttblicsc[0]);
         }
                    
         if (pdsicsp.ttblicsp.Count > 0)
         {
            result.icsp = Icsp.BuildIcspFromRow(pdsicsp.ttblicsp[0]);
         }
                    
         result.pvDisplaymsgfl = pvDisplaymsgfl;
         result.pvCatalogfl = pvCatalogfl;
          
         return result;
          
      }

      public Icsprcaddchg ICSPRCLoad(Icsprcloadcriteria icsprcloadcriteria)
      {   
         var result = new Icsprcaddchg();
         
         var pdsicsprcload = new pdsicsprcloadDataSet();
            
         var pdsicsprcaddchg = new pdsicsprcaddchgDataSet();
            
         DataRow ttblicsprcloadcriteriaCriteria = pdsicsprcload.ttblicsprcloadcriteria.NewttblicsprcloadcriteriaRow();
         Icsprcloadcriteria.UpdateRowFromIcsprcloadcriteria(ref ttblicsprcloadcriteriaCriteria, icsprcloadcriteria);
         pdsicsprcload.ttblicsprcloadcriteria.AddttblicsprcloadcriteriaRow((pdsicsprcloadDataSet.ttblicsprcloadcriteriaRow)ttblicsprcloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRCLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRCLoad(ref pdsContext,  pdsicsprcload, out pdsicsprcaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRCLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprcload); 
    
         if (pdsicsprcaddchg.ttblicsprcaddchg.Count > 0) 
         { 
             result = Icsprcaddchg.BuildIcsprcaddchgFromRow(pdsicsprcaddchg.ttblicsprcaddchg[0]);
         } 
              
          
         return result;
          
      }

      public Icsoesetup ICSOELoad(Icsoesetupcriteria icsoesetupcriteria)
      {   
         var result = new Icsoesetup();
         
         var pdsicsoesetupcriteria = new pdsicsoesetupcriteriaDataSet();
            
         var pdsicsoesetup = new pdsicsoesetupDataSet();
            
         DataRow ttblicsoesetupcriteriaCriteria = pdsicsoesetupcriteria.ttblicsoesetupcriteria.NewttblicsoesetupcriteriaRow();
         Icsoesetupcriteria.UpdateRowFromIcsoesetupcriteria(ref ttblicsoesetupcriteriaCriteria, icsoesetupcriteria);
         pdsicsoesetupcriteria.ttblicsoesetupcriteria.AddttblicsoesetupcriteriaRow((pdsicsoesetupcriteriaDataSet.ttblicsoesetupcriteriaRow)ttblicsoesetupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOELoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOELoad(ref pdsContext,  pdsicsoesetupcriteria, out pdsicsoesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOELoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoesetupcriteria); 
    
         if (pdsicsoesetup.ttblicsoesetup.Count > 0) 
         { 
             result = Icsoesetup.BuildIcsoesetupFromRow(pdsicsoesetup.ttblicsoesetup[0]);
         } 
              
          
         return result;
          
      }

      public Icspesetup ICSPELoad(Icspesetupcriteria icspesetupcriteria)
      {   
         var result = new Icspesetup();
         
         var pdsicspesetupcriteria = new pdsicspesetupcriteriaDataSet();
            
         var pdsicspesetup = new pdsicspesetupDataSet();
            
         DataRow ttblicspesetupcriteriaCriteria = pdsicspesetupcriteria.ttblicspesetupcriteria.NewttblicspesetupcriteriaRow();
         Icspesetupcriteria.UpdateRowFromIcspesetupcriteria(ref ttblicspesetupcriteriaCriteria, icspesetupcriteria);
         pdsicspesetupcriteria.ttblicspesetupcriteria.AddttblicspesetupcriteriaRow((pdsicspesetupcriteriaDataSet.ttblicspesetupcriteriaRow)ttblicspesetupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPELoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPELoad(ref pdsContext,  pdsicspesetupcriteria, out pdsicspesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPELoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspesetupcriteria); 
    
         if (pdsicspesetup.ttblicspesetup.Count > 0) 
         { 
             result = Icspesetup.BuildIcspesetupFromRow(pdsicspesetup.ttblicspesetup[0]);
         } 
              
          
         return result;
          
      }

      public Icsehhazardous ICSEHHazardousLoad(Icsehhazardous icsehhazardous)
      {   
         var result = new Icsehhazardous();
         
         var pdsicsehhazardous = new pdsicsehhazardousDataSet();
            
         DataRow ttblicsehhazardousCriteria = pdsicsehhazardous.ttblicsehhazardous.NewttblicsehhazardousRow();
         Icsehhazardous.UpdateRowFromIcsehhazardous(ref ttblicsehhazardousCriteria, icsehhazardous);
         pdsicsehhazardous.ttblicsehhazardous.AddttblicsehhazardousRow((pdsicsehhazardousDataSet.ttblicsehhazardousRow)ttblicsehhazardousCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEHHazardousLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEHHazardousLoad(ref pdsContext, ref pdsicsehhazardous, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEHHazardousLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsehhazardous); 
    
         if (pdsicsehhazardous.ttblicsehhazardous.Count > 0) 
         { 
             result = Icsehhazardous.BuildIcsehhazardousFromRow(pdsicsehhazardous.ttblicsehhazardous[0]);
         } 
              
          
         return result;
          
      }

      public string ICSEHHazardousSave(Icsehhazardous icsehhazardous)
      {   
          
         var pdsicsehhazardous = new pdsicsehhazardousDataSet();
            
         DataRow ttblicsehhazardousCriteria = pdsicsehhazardous.ttblicsehhazardous.NewttblicsehhazardousRow();
         Icsehhazardous.UpdateRowFromIcsehhazardous(ref ttblicsehhazardousCriteria, icsehhazardous);
         pdsicsehhazardous.ttblicsehhazardous.AddttblicsehhazardousRow((pdsicsehhazardousDataSet.ttblicsehhazardousRow)ttblicsehhazardousCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEHHazardousSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEHHazardousSave(ref pdsContext,  pdsicsehhazardous, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ICSEHHazardousSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsehhazardous); 
    
         return cWarningMessage;
      
      }

      public Iccatalogcopy ICCatalogCopy(Iccatalogcopy iccatalogcopy)
      {   
         var result = new Iccatalogcopy();
         
         var pdsiccatalogcopy = new pdsiccatalogcopyDataSet();
            
         DataRow ttbliccatalogcopyCriteria = pdsiccatalogcopy.ttbliccatalogcopy.NewttbliccatalogcopyRow();
         Iccatalogcopy.UpdateRowFromIccatalogcopy(ref ttbliccatalogcopyCriteria, iccatalogcopy);
         pdsiccatalogcopy.ttbliccatalogcopy.AddttbliccatalogcopyRow((pdsiccatalogcopyDataSet.ttbliccatalogcopyRow)ttbliccatalogcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICCatalogCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICCatalogCopy(ref pdsContext, ref pdsiccatalogcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICCatalogCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiccatalogcopy); 
    
         if (pdsiccatalogcopy.ttbliccatalogcopy.Count > 0) 
         { 
             result = Iccatalogcopy.BuildIccatalogcopyFromRow(pdsiccatalogcopy.ttbliccatalogcopy[0]);
         } 
              
          
         return result;
          
      }

      public Iclotcopy ICLotCopy(Iclotcopy iclotcopy)
      {   
         var result = new Iclotcopy();
         
         var pdsiclotcopy = new pdsiclotcopyDataSet();
            
         DataRow ttbliclotcopyCriteria = pdsiclotcopy.ttbliclotcopy.NewttbliclotcopyRow();
         Iclotcopy.UpdateRowFromIclotcopy(ref ttbliclotcopyCriteria, iclotcopy);
         pdsiclotcopy.ttbliclotcopy.AddttbliclotcopyRow((pdsiclotcopyDataSet.ttbliclotcopyRow)ttbliclotcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICLotCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICLotCopy(ref pdsContext, ref pdsiclotcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcopy); 
    
         if (pdsiclotcopy.ttbliclotcopy.Count > 0) 
         { 
             result = Iclotcopy.BuildIclotcopyFromRow(pdsiclotcopy.ttbliclotcopy[0]);
         } 
              
          
         return result;
          
      }

      public string GetICLotSpecPriceLabel(AsicsetupGetICLotSpecPriceLabelRequestAPI AsicsetupGetICLotSpecPriceLabelRequestAPI)
      {   
          
         string cErrorMessage = string.Empty;
         string cLabel = string.Empty;
   
         var  cProduct = AsicsetupGetICLotSpecPriceLabelRequestAPI.cProduct;
            
         
         NLogLoggerP.Trace("GetICLotSpecPriceLabel - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.GetICLotSpecPriceLabel(ref pdsContext,  cProduct, out cErrorMessage, out cLabel);
               }
            });
         NLogLoggerP.Info("GetICLotSpecPriceLabel - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cLabel;
      
      }

      public Icserialcopy ICSerialCopy(Icserialcopy icserialcopy)
      {   
         var result = new Icserialcopy();
         
         var pdsicserialcopy = new pdsicserialcopyDataSet();
            
         DataRow ttblicserialcopyCriteria = pdsicserialcopy.ttblicserialcopy.NewttblicserialcopyRow();
         Icserialcopy.UpdateRowFromIcserialcopy(ref ttblicserialcopyCriteria, icserialcopy);
         pdsicserialcopy.ttblicserialcopy.AddttblicserialcopyRow((pdsicserialcopyDataSet.ttblicserialcopyRow)ttblicserialcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSerialCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSerialCopy(ref pdsContext, ref pdsicserialcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSerialCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicserialcopy); 
    
         if (pdsicserialcopy.ttblicserialcopy.Count > 0) 
         { 
             result = Icserialcopy.BuildIcserialcopyFromRow(pdsicserialcopy.ttblicserialcopy[0]);
         } 
              
          
         return result;
          
      }

      public Icprodlinecopy ICProductLineCopy(Icprodlinecopy icprodlinecopy)
      {   
         var result = new Icprodlinecopy();
         
         var pdsicprodlinecopy = new pdsicprodlinecopyDataSet();
            
         DataRow ttblicprodlinecopyCriteria = pdsicprodlinecopy.ttblicprodlinecopy.NewttblicprodlinecopyRow();
         Icprodlinecopy.UpdateRowFromIcprodlinecopy(ref ttblicprodlinecopyCriteria, icprodlinecopy);
         pdsicprodlinecopy.ttblicprodlinecopy.AddttblicprodlinecopyRow((pdsicprodlinecopyDataSet.ttblicprodlinecopyRow)ttblicprodlinecopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICProductLineCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductLineCopy(ref pdsContext, ref pdsicprodlinecopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICProductLineCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicprodlinecopy); 
    
         if (pdsicprodlinecopy.ttblicprodlinecopy.Count > 0) 
         { 
             result = Icprodlinecopy.BuildIcprodlinecopyFromRow(pdsicprodlinecopy.ttblicprodlinecopy[0]);
         } 
              
          
         return result;
          
      }

      public Icproductcopy ICProductCopy(Icproductcopy icproductcopy)
      {   
         var result = new Icproductcopy();
         
         var pdsicproductcopy = new pdsicproductcopyDataSet();
            
         DataRow ttblicproductcopyCriteria = pdsicproductcopy.ttblicproductcopy.NewttblicproductcopyRow();
         Icproductcopy.UpdateRowFromIcproductcopy(ref ttblicproductcopyCriteria, icproductcopy);
         pdsicproductcopy.ttblicproductcopy.AddttblicproductcopyRow((pdsicproductcopyDataSet.ttblicproductcopyRow)ttblicproductcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICProductCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductCopy(ref pdsContext, ref pdsicproductcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICProductCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicproductcopy); 
    
         if (pdsicproductcopy.ttblicproductcopy.Count > 0) 
         { 
             result = Icproductcopy.BuildIcproductcopyFromRow(pdsicproductcopy.ttblicproductcopy[0]);
         } 
              
          
         return result;
          
      }

      public void ICProductListAdd(AsicsetupICProductListAddRequestAPI AsicsetupICProductListAddRequestAPI)
      {   
         
         var pdsicprodlistadd = new pdsicprodlistaddDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICProductListAddRequestAPI.icprodlistaddprod)
         {
            DataRow ttblicprodlistaddprodRow = pdsicprodlistadd.ttblicprodlistaddprod.NewttblicprodlistaddprodRow();
            Icprodlistaddprod.UpdateRowFromIcprodlistaddprod(ref ttblicprodlistaddprodRow, obj);
            pdsicprodlistadd.ttblicprodlistaddprod.AddttblicprodlistaddprodRow((pdsicprodlistaddDataSet.ttblicprodlistaddprodRow)ttblicprodlistaddprodRow);
         }
          
         DataRow ttblicprodlistaddtypeRow = pdsicprodlistadd.ttblicprodlistaddtype.NewttblicprodlistaddtypeRow();
         Icprodlistaddtype.UpdateRowFromIcprodlistaddtype(ref ttblicprodlistaddtypeRow, AsicsetupICProductListAddRequestAPI.icprodlistaddtype);
         pdsicprodlistadd.ttblicprodlistaddtype.AddttblicprodlistaddtypeRow((pdsicprodlistaddDataSet.ttblicprodlistaddtypeRow)ttblicprodlistaddtypeRow);
          
         
         NLogLoggerP.Trace("ICProductListAdd - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductListAdd(ref pdsContext, ref pdsicprodlistadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICProductListAdd - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicprodlistadd);
      }

      public Icspecprccost ICUpdateICSPSpecPriceCost(Icspecprccost icspecprccost)
      {   
         var result = new Icspecprccost();
         
         var pdsicspecprccost = new pdsicspecprccostDataSet();
            
         DataRow ttblicspecprccostCriteria = pdsicspecprccost.ttblicspecprccost.NewttblicspecprccostRow();
         Icspecprccost.UpdateRowFromIcspecprccost(ref ttblicspecprccostCriteria, icspecprccost);
         pdsicspecprccost.ttblicspecprccost.AddttblicspecprccostRow((pdsicspecprccostDataSet.ttblicspecprccostRow)ttblicspecprccostCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICUpdateICSPSpecPriceCost - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICUpdateICSPSpecPriceCost(ref pdsContext, ref pdsicspecprccost, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICUpdateICSPSpecPriceCost - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspecprccost); 
    
         if (pdsicspecprccost.ttblicspecprccost.Count > 0) 
         { 
             result = Icspecprccost.BuildIcspecprccostFromRow(pdsicspecprccost.ttblicspecprccost[0]);
         } 
              
          
         return result;
          
      }

      public bool ICProductCheckStatusEnabled(AsicsetupICProductCheckStatusEnabledRequestAPI AsicsetupICProductCheckStatusEnabledRequestAPI)
      {   
          
         string cErrorMessage = string.Empty;
         bool lEnableStatus = false;
   
         var  cProduct = AsicsetupICProductCheckStatusEnabledRequestAPI.cProduct;
            
         
         NLogLoggerP.Trace("ICProductCheckStatusEnabled - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICProductCheckStatusEnabled(ref pdsContext,  cProduct, out cErrorMessage, out lEnableStatus);
               }
            });
         NLogLoggerP.Info("ICProductCheckStatusEnabled - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lEnableStatus;
      
      }

      public Icspecprccostcreate ICSpecPriceCostCreate(Icspecprccostcreate icspecprccostcreate)
      {   
         var result = new Icspecprccostcreate();
         
         var pdsicspecprccostcreate = new pdsicspecprccostcreateDataSet();
            
         DataRow ttblicspecprccostcreateCriteria = pdsicspecprccostcreate.ttblicspecprccostcreate.NewttblicspecprccostcreateRow();
         Icspecprccostcreate.UpdateRowFromIcspecprccostcreate(ref ttblicspecprccostcreateCriteria, icspecprccostcreate);
         pdsicspecprccostcreate.ttblicspecprccostcreate.AddttblicspecprccostcreateRow((pdsicspecprccostcreateDataSet.ttblicspecprccostcreateRow)ttblicspecprccostcreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSpecPriceCostCreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSpecPriceCostCreate(ref pdsContext, ref pdsicspecprccostcreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSpecPriceCostCreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspecprccostcreate); 
    
         if (pdsicspecprccostcreate.ttblicspecprccostcreate.Count > 0) 
         { 
             result = Icspecprccostcreate.BuildIcspecprccostcreateFromRow(pdsicspecprccostcreate.ttblicspecprccostcreate[0]);
         } 
              
          
         return result;
          
      }

      public Icspecprccostupdate ICSpecPriceCostUpdate(Icspecprccostupdate icspecprccostupdate)
      {   
         var result = new Icspecprccostupdate();
         
         var pdsicspecprccostupdate = new pdsicspecprccostupdateDataSet();
            
         DataRow ttblicspecprccostupdateCriteria = pdsicspecprccostupdate.ttblicspecprccostupdate.NewttblicspecprccostupdateRow();
         Icspecprccostupdate.UpdateRowFromIcspecprccostupdate(ref ttblicspecprccostupdateCriteria, icspecprccostupdate);
         pdsicspecprccostupdate.ttblicspecprccostupdate.AddttblicspecprccostupdateRow((pdsicspecprccostupdateDataSet.ttblicspecprccostupdateRow)ttblicspecprccostupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSpecPriceCostUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSpecPriceCostUpdate(ref pdsContext, ref pdsicspecprccostupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSpecPriceCostUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspecprccostupdate); 
    
         if (pdsicspecprccostupdate.ttblicspecprccostupdate.Count > 0) 
         { 
             result = Icspecprccostupdate.BuildIcspecprccostupdateFromRow(pdsicspecprccostupdate.ttblicspecprccostupdate[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSDPLoadTTResponseAPI ICSDPLoadTT(AsicsetupICSDPLoadTTRequestAPI AsicsetupICSDPLoadTTRequestAPI)
      {   
         var result = new AsicsetupICSDPLoadTTResponseAPI();
         
         var pdsicsdploadtt = new pdsicsdploadttDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         var  cWhse = AsicsetupICSDPLoadTTRequestAPI.cWhse;
            
         var  iMediaCd = AsicsetupICSDPLoadTTRequestAPI.iMediaCd;
            
         var  iRecordLimit = AsicsetupICSDPLoadTTRequestAPI.iRecordLimit;
            
         
         NLogLoggerP.Trace("ICSDPLoadTT - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSDPLoadTT(ref pdsContext,  cWhse,  iMediaCd,  iRecordLimit, out pdsicsdploadtt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICSDPLoadTT - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsdploadtt); 
    
         foreach (DataRow row in pdsicsdploadtt.ttblicsdploadttresults)
         {
            result.icsdploadttresults.Add(Icsdploadttresults.BuildIcsdploadttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void ICSDPSavePW(string cWhse, int iMediaCd, string cMerchantPassword)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSDPSavePW - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSDPSavePW(ref pdsContext,  cWhse,  iMediaCd,  cMerchantPassword, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSDPSavePW - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public bool ICSECOppositeScreenSupersedeLaunch(AsicsetupICSECOppositeScreenSupersedeLaunchRequestAPI AsicsetupICSECOppositeScreenSupersedeLaunchRequestAPI)
      {   
          
         bool lLaunchScreen = false;
         string cErrorMessage = string.Empty;
   
         var  cRecordType = AsicsetupICSECOppositeScreenSupersedeLaunchRequestAPI.cRecordType;
            
         var  cProduct = AsicsetupICSECOppositeScreenSupersedeLaunchRequestAPI.cProduct;
            
         var  cAltProduct = AsicsetupICSECOppositeScreenSupersedeLaunchRequestAPI.cAltProduct;
            
         
         NLogLoggerP.Trace("ICSECOppositeScreenSupersedeLaunch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSECOppositeScreenSupersedeLaunch(ref pdsContext,  cRecordType,  cProduct,  cAltProduct, out lLaunchScreen, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSECOppositeScreenSupersedeLaunch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lLaunchScreen;
      
      }

      public Icsecoppositeenable ICSECOppositeScreenEnablement(AsicsetupICSECOppositeScreenEnablementRequestAPI AsicsetupICSECOppositeScreenEnablementRequestAPI)
      {   
         var result = new Icsecoppositeenable();
         
         var pdsicsecoppositeenable = new pdsicsecoppositeenableDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cProduct = AsicsetupICSECOppositeScreenEnablementRequestAPI.cProduct;
            
         var  cXrefType = AsicsetupICSECOppositeScreenEnablementRequestAPI.cXrefType;
            
         
         NLogLoggerP.Trace("ICSECOppositeScreenEnablement - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSECOppositeScreenEnablement(ref pdsContext,  cProduct,  cXrefType, out pdsicsecoppositeenable, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSECOppositeScreenEnablement - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsecoppositeenable); 
    
         if (pdsicsecoppositeenable.ttblicsecoppositeenable.Count > 0) 
         { 
             result = Icsecoppositeenable.BuildIcsecoppositeenableFromRow(pdsicsecoppositeenable.ttblicsecoppositeenable[0]);
         } 
              
          
         return result;
          
      }

      public void ICSECOppositeCreate(Icsecoppositecreate icsecoppositecreate)
      {   
         
         var pdsicsecoppositecreate = new pdsicsecoppositecreateDataSet();
            
         DataRow ttblicsecoppositecreateCriteria = pdsicsecoppositecreate.ttblicsecoppositecreate.NewttblicsecoppositecreateRow();
         Icsecoppositecreate.UpdateRowFromIcsecoppositecreate(ref ttblicsecoppositecreateCriteria, icsecoppositecreate);
         pdsicsecoppositecreate.ttblicsecoppositecreate.AddttblicsecoppositecreateRow((pdsicsecoppositecreateDataSet.ttblicsecoppositecreateRow)ttblicsecoppositecreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSECOppositeCreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSECOppositeCreate(ref pdsContext,  pdsicsecoppositecreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSECOppositeCreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsecoppositecreate);
      }

      public void ICSECSuperXrefCreate(Icsecsuperxrefcreate icsecsuperxrefcreate)
      {   
         
         var pdsicsecsuperxrefcreate = new pdsicsecsuperxrefcreateDataSet();
            
         DataRow ttblicsecsuperxrefcreateCriteria = pdsicsecsuperxrefcreate.ttblicsecsuperxrefcreate.NewttblicsecsuperxrefcreateRow();
         Icsecsuperxrefcreate.UpdateRowFromIcsecsuperxrefcreate(ref ttblicsecsuperxrefcreateCriteria, icsecsuperxrefcreate);
         pdsicsecsuperxrefcreate.ttblicsecsuperxrefcreate.AddttblicsecsuperxrefcreateRow((pdsicsecsuperxrefcreateDataSet.ttblicsecsuperxrefcreateRow)ttblicsecsuperxrefcreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSECSuperXrefCreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSECSuperXrefCreate(ref pdsContext,  pdsicsecsuperxrefcreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSECSuperXrefCreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsecsuperxrefcreate);
      }

      public Icsegkeyfields ICSEGCopy(Icsegkeyfields icsegkeyfields)
      {   
         var result = new Icsegkeyfields();
         
         var pdsicsegkeyfields = new pdsicsegkeyfieldsDataSet();
            
         DataRow ttblicsegkeyfieldsCriteria = pdsicsegkeyfields.ttblicsegkeyfields.NewttblicsegkeyfieldsRow();
         Icsegkeyfields.UpdateRowFromIcsegkeyfields(ref ttblicsegkeyfieldsCriteria, icsegkeyfields);
         pdsicsegkeyfields.ttblicsegkeyfields.AddttblicsegkeyfieldsRow((pdsicsegkeyfieldsDataSet.ttblicsegkeyfieldsRow)ttblicsegkeyfieldsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEGCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEGCopy(ref pdsContext, ref pdsicsegkeyfields, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEGCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsegkeyfields); 
    
         if (pdsicsegkeyfields.ttblicsegkeyfields.Count > 0) 
         { 
             result = Icsegkeyfields.BuildIcsegkeyfieldsFromRow(pdsicsegkeyfields.ttblicsegkeyfields[0]);
         } 
              
          
         return result;
          
      }

      public Icsegkeyfields ICSEGCreate(Icsegkeyfields icsegkeyfields)
      {   
         var result = new Icsegkeyfields();
         
         var pdsicsegkeyfields = new pdsicsegkeyfieldsDataSet();
            
         DataRow ttblicsegkeyfieldsCriteria = pdsicsegkeyfields.ttblicsegkeyfields.NewttblicsegkeyfieldsRow();
         Icsegkeyfields.UpdateRowFromIcsegkeyfields(ref ttblicsegkeyfieldsCriteria, icsegkeyfields);
         pdsicsegkeyfields.ttblicsegkeyfields.AddttblicsegkeyfieldsRow((pdsicsegkeyfieldsDataSet.ttblicsegkeyfieldsRow)ttblicsegkeyfieldsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEGCreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEGCreate(ref pdsContext, ref pdsicsegkeyfields, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEGCreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsegkeyfields); 
    
         if (pdsicsegkeyfields.ttblicsegkeyfields.Count > 0) 
         { 
             result = Icsegkeyfields.BuildIcsegkeyfieldsFromRow(pdsicsegkeyfields.ttblicsegkeyfields[0]);
         } 
              
          
         return result;
          
      }

      public Icsegkeyfieldsload ICSEGKeyFieldsLoad(Icsegkeyfieldsload icsegkeyfieldsload)
      {   
         var result = new Icsegkeyfieldsload();
         
         var pdsicsegkeyfieldsload = new pdsicsegkeyfieldsloadDataSet();
            
         DataRow ttblicsegkeyfieldsloadCriteria = pdsicsegkeyfieldsload.ttblicsegkeyfieldsload.NewttblicsegkeyfieldsloadRow();
         Icsegkeyfieldsload.UpdateRowFromIcsegkeyfieldsload(ref ttblicsegkeyfieldsloadCriteria, icsegkeyfieldsload);
         pdsicsegkeyfieldsload.ttblicsegkeyfieldsload.AddttblicsegkeyfieldsloadRow((pdsicsegkeyfieldsloadDataSet.ttblicsegkeyfieldsloadRow)ttblicsegkeyfieldsloadCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEGKeyFieldsLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEGKeyFieldsLoad(ref pdsContext, ref pdsicsegkeyfieldsload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEGKeyFieldsLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsegkeyfieldsload); 
    
         if (pdsicsegkeyfieldsload.ttblicsegkeyfieldsload.Count > 0) 
         { 
             result = Icsegkeyfieldsload.BuildIcsegkeyfieldsloadFromRow(pdsicsegkeyfieldsload.ttblicsegkeyfieldsload[0]);
         } 
              
          
         return result;
          
      }

      public Icsegreq ICSEGRequiredFetch(Icsegreq icsegreq)
      {   
         var result = new Icsegreq();
         
         var pdsicsegreq = new pdsicsegreqDataSet();
            
         DataRow ttblicsegreqCriteria = pdsicsegreq.ttblicsegreq.NewttblicsegreqRow();
         Icsegreq.UpdateRowFromIcsegreq(ref ttblicsegreqCriteria, icsegreq);
         pdsicsegreq.ttblicsegreq.AddttblicsegreqRow((pdsicsegreqDataSet.ttblicsegreqRow)ttblicsegreqCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEGRequiredFetch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEGRequiredFetch(ref pdsContext, ref pdsicsegreq, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEGRequiredFetch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsegreq); 
    
         if (pdsicsegreq.ttblicsegreq.Count > 0) 
         { 
             result = Icsegreq.BuildIcsegreqFromRow(pdsicsegreq.ttblicsegreq[0]);
         } 
              
          
         return result;
          
      }

      public Icsegreq ICSEGRequiredSave(Icsegreq icsegreq)
      {   
         var result = new Icsegreq();
         
         var pdsicsegreq = new pdsicsegreqDataSet();
            
         DataRow ttblicsegreqCriteria = pdsicsegreq.ttblicsegreq.NewttblicsegreqRow();
         Icsegreq.UpdateRowFromIcsegreq(ref ttblicsegreqCriteria, icsegreq);
         pdsicsegreq.ttblicsegreq.AddttblicsegreqRow((pdsicsegreqDataSet.ttblicsegreqRow)ttblicsegreqCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEGRequiredSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEGRequiredSave(ref pdsContext, ref pdsicsegreq, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEGRequiredSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsegreq); 
    
         if (pdsicsegreq.ttblicsegreq.Count > 0) 
         { 
             result = Icsegreq.BuildIcsegreqFromRow(pdsicsegreq.ttblicsegreq[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICValidateProductUnitResponseAPI ICValidateProductUnit(AsicsetupICValidateProductUnitRequestAPI AsicsetupICValidateProductUnitRequestAPI)
      {   
         var result = new AsicsetupICValidateProductUnitResponseAPI();
         
         string cErrorMessage = string.Empty;
         string cUnitDesc = string.Empty;
         decimal dUnitConv = 0;
   
         var  cProduct = AsicsetupICValidateProductUnitRequestAPI.cProduct;
            
         var  cUnit = AsicsetupICValidateProductUnitRequestAPI.cUnit;
            
         
         NLogLoggerP.Trace("ICValidateProductUnit - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICValidateProductUnit(ref pdsContext,  cProduct,  cUnit, out cErrorMessage, out cUnitDesc, out dUnitConv);
               }
            });
         NLogLoggerP.Info("ICValidateProductUnit - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cUnitDesc = cUnitDesc;
         result.dUnitConv = dUnitConv;
          
         return result;
          
      }

      public IEnumerable<Icwhseproductcopyresults> ICWhseProductCopy(AsicsetupICWhseProductCopyRequestAPI AsicsetupICWhseProductCopyRequestAPI)
      {   
         var results = new List<Icwhseproductcopyresults>();
         
         var pdsicwhseproductcopy = new pdsicwhseproductcopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICWhseProductCopyRequestAPI.icwhseproductcopyflags)
         {
            DataRow ttblicwhseproductcopyflagsRow = pdsicwhseproductcopy.ttblicwhseproductcopyflags.NewttblicwhseproductcopyflagsRow();
            Icwhseproductcopyflags.UpdateRowFromIcwhseproductcopyflags(ref ttblicwhseproductcopyflagsRow, obj);
            pdsicwhseproductcopy.ttblicwhseproductcopyflags.AddttblicwhseproductcopyflagsRow((pdsicwhseproductcopyDataSet.ttblicwhseproductcopyflagsRow)ttblicwhseproductcopyflagsRow);
         }
          
         foreach (var obj in AsicsetupICWhseProductCopyRequestAPI.icwhseproductcopyprods)
         {
            DataRow ttblicwhseproductcopyprodsRow = pdsicwhseproductcopy.ttblicwhseproductcopyprods.NewttblicwhseproductcopyprodsRow();
            Icwhseproductcopyprods.UpdateRowFromIcwhseproductcopyprods(ref ttblicwhseproductcopyprodsRow, obj);
            pdsicwhseproductcopy.ttblicwhseproductcopyprods.AddttblicwhseproductcopyprodsRow((pdsicwhseproductcopyDataSet.ttblicwhseproductcopyprodsRow)ttblicwhseproductcopyprodsRow);
         }
          
         foreach (var obj in AsicsetupICWhseProductCopyRequestAPI.icwhseproductcopywhses)
         {
            DataRow ttblicwhseproductcopywhsesRow = pdsicwhseproductcopy.ttblicwhseproductcopywhses.NewttblicwhseproductcopywhsesRow();
            Icwhseproductcopywhses.UpdateRowFromIcwhseproductcopywhses(ref ttblicwhseproductcopywhsesRow, obj);
            pdsicwhseproductcopy.ttblicwhseproductcopywhses.AddttblicwhseproductcopywhsesRow((pdsicwhseproductcopyDataSet.ttblicwhseproductcopywhsesRow)ttblicwhseproductcopywhsesRow);
         }
          
         
         NLogLoggerP.Trace("ICWhseProductCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICWhseProductCopy(ref pdsContext, ref pdsicwhseproductcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWhseProductCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwhseproductcopy); 
    
            foreach (DataRow row in pdsicwhseproductcopy.ttblicwhseproductcopyresults)
            {
                results.Add(Icwhseproductcopyresults.BuildIcwhseproductcopyresultsFromRow(row));
            }
            return results;
        
      }

      public Icwarehousecopy ICWarehouseCopy(Icwarehousecopy icwarehousecopy)
      {   
         var result = new Icwarehousecopy();
         
         var pdsicwarehousecopy = new pdsicwarehousecopyDataSet();
            
         DataRow ttblicwarehousecopyCriteria = pdsicwarehousecopy.ttblicwarehousecopy.NewttblicwarehousecopyRow();
         Icwarehousecopy.UpdateRowFromIcwarehousecopy(ref ttblicwarehousecopyCriteria, icwarehousecopy);
         pdsicwarehousecopy.ttblicwarehousecopy.AddttblicwarehousecopyRow((pdsicwarehousecopyDataSet.ttblicwarehousecopyRow)ttblicwarehousecopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICWarehouseCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICWarehouseCopy(ref pdsContext, ref pdsicwarehousecopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWarehouseCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwarehousecopy); 
    
         if (pdsicwarehousecopy.ttblicwarehousecopy.Count > 0) 
         { 
             result = Icwarehousecopy.BuildIcwarehousecopyFromRow(pdsicwarehousecopy.ttblicwarehousecopy[0]);
         } 
              
          
         return result;
          
      }

      public Icwarehouseglfetchresults ICWarehouseGLFetch(Icwarehouseglfetchcriteria icwarehouseglfetchcriteria)
      {   
         var result = new Icwarehouseglfetchresults();
         
         var pdsicwarehouseglfetch = new pdsicwarehouseglfetchDataSet();
            
         DataRow ttblicwarehouseglfetchcriteriaCriteria = pdsicwarehouseglfetch.ttblicwarehouseglfetchcriteria.NewttblicwarehouseglfetchcriteriaRow();
         Icwarehouseglfetchcriteria.UpdateRowFromIcwarehouseglfetchcriteria(ref ttblicwarehouseglfetchcriteriaCriteria, icwarehouseglfetchcriteria);
         pdsicwarehouseglfetch.ttblicwarehouseglfetchcriteria.AddttblicwarehouseglfetchcriteriaRow((pdsicwarehouseglfetchDataSet.ttblicwarehouseglfetchcriteriaRow)ttblicwarehouseglfetchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICWarehouseGLFetch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICWarehouseGLFetch(ref pdsContext, ref pdsicwarehouseglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWarehouseGLFetch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwarehouseglfetch); 
    
         if (pdsicwarehouseglfetch.ttblicwarehouseglfetchresults.Count > 0) 
         { 
             result = Icwarehouseglfetchresults.BuildIcwarehouseglfetchresultsFromRow(pdsicwarehouseglfetch.ttblicwarehouseglfetchresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icwarehouseglsave> ICWarehouseGLSave(IEnumerable<Icwarehouseglsave> icwarehouseglsave)
      {   
         var results = new List<Icwarehouseglsave>();
         
         var pdsicwarehouseglsave = new pdsicwarehouseglsaveDataSet();
            
         foreach (var obj in icwarehouseglsave)
         {
             DataRow row = pdsicwarehouseglsave.ttblicwarehouseglsave.NewttblicwarehouseglsaveRow();
             Icwarehouseglsave.UpdateRowFromIcwarehouseglsave(ref row, obj);
             pdsicwarehouseglsave.ttblicwarehouseglsave.AddttblicwarehouseglsaveRow((pdsicwarehouseglsaveDataSet.ttblicwarehouseglsaveRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICWarehouseGLSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICWarehouseGLSave(ref pdsContext, ref pdsicwarehouseglsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWarehouseGLSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwarehouseglsave); 
    
            foreach (DataRow row in pdsicwarehouseglsave.ttblicwarehouseglsave)
            {
                results.Add(Icwarehouseglsave.BuildIcwarehouseglsaveFromRow(row));
            }
            return results;
        
      }

      public string ValidateGLAccount(string cGLAccount)
      {   
          
         string cErrorMessage = string.Empty;
         string cGLAccountDesc = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateGLAccount - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ValidateGLAccount(ref pdsContext,  cGLAccount, out cErrorMessage, out cGLAccountDesc);
               }
            });
         NLogLoggerP.Info("ValidateGLAccount - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cGLAccountDesc;
      
      }

      public void ICSCUpdatePD(Icscupdpd icscupdpd)
      {   
         
         var pdsicscupdpd = new pdsicscupdpdDataSet();
            
         DataRow ttblicscupdpdCriteria = pdsicscupdpd.ttblicscupdpd.NewttblicscupdpdRow();
         Icscupdpd.UpdateRowFromIcscupdpd(ref ttblicscupdpdCriteria, icscupdpd);
         pdsicscupdpd.ttblicscupdpd.AddttblicscupdpdRow((pdsicscupdpdDataSet.ttblicscupdpdRow)ttblicscupdpdCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSCUpdatePD - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSCUpdatePD(ref pdsContext,  pdsicscupdpd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSCUpdatePD - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicscupdpd);
      }

      public Icswordunitresult ICSWOrdUnit(Icswordunitcriteria icswordunitcriteria)
      {   
         var result = new Icswordunitresult();
         
         var pdsicswordunit = new pdsicswordunitDataSet();
            
         DataRow ttblicswordunitcriteriaCriteria = pdsicswordunit.ttblicswordunitcriteria.NewttblicswordunitcriteriaRow();
         Icswordunitcriteria.UpdateRowFromIcswordunitcriteria(ref ttblicswordunitcriteriaCriteria, icswordunitcriteria);
         pdsicswordunit.ttblicswordunitcriteria.AddttblicswordunitcriteriaRow((pdsicswordunitDataSet.ttblicswordunitcriteriaRow)ttblicswordunitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSWOrdUnit - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSWOrdUnit(ref pdsContext, ref pdsicswordunit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSWOrdUnit - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicswordunit); 
    
         if (pdsicswordunit.ttblicswordunitresult.Count > 0) 
         { 
             result = Icswordunitresult.BuildIcswordunitresultFromRow(pdsicswordunit.ttblicswordunitresult[0]);
         } 
              
          
         return result;
          
      }

      public Icprodlinecopy ICSRCopy(Icprodlinecopy icprodlinecopy)
      {   
         var result = new Icprodlinecopy();
         
         var pdsicprodlinecopy = new pdsicprodlinecopyDataSet();
            
         DataRow ttblicprodlinecopyCriteria = pdsicprodlinecopy.ttblicprodlinecopy.NewttblicprodlinecopyRow();
         Icprodlinecopy.UpdateRowFromIcprodlinecopy(ref ttblicprodlinecopyCriteria, icprodlinecopy);
         pdsicprodlinecopy.ttblicprodlinecopy.AddttblicprodlinecopyRow((pdsicprodlinecopyDataSet.ttblicprodlinecopyRow)ttblicprodlinecopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSRCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRCopy(ref pdsContext, ref pdsicprodlinecopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicprodlinecopy); 
    
         if (pdsicprodlinecopy.ttblicprodlinecopy.Count > 0) 
         { 
             result = Icprodlinecopy.BuildIcprodlinecopyFromRow(pdsicprodlinecopy.ttblicprodlinecopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icsrcostmatrix> ICSRLoadCostMatrix(Icsrcostmatrixcriteria icsrcostmatrixcriteria)
      {   
         var results = new List<Icsrcostmatrix>();
         
         var pdsicsrcostmatrixcriteria = new pdsicsrcostmatrixcriteriaDataSet();
            
         var pdsicsrcostmatrix = new pdsicsrcostmatrixDataSet();
            
         DataRow ttblicsrcostmatrixcriteriaCriteria = pdsicsrcostmatrixcriteria.ttblicsrcostmatrixcriteria.NewttblicsrcostmatrixcriteriaRow();
         Icsrcostmatrixcriteria.UpdateRowFromIcsrcostmatrixcriteria(ref ttblicsrcostmatrixcriteriaCriteria, icsrcostmatrixcriteria);
         pdsicsrcostmatrixcriteria.ttblicsrcostmatrixcriteria.AddttblicsrcostmatrixcriteriaRow((pdsicsrcostmatrixcriteriaDataSet.ttblicsrcostmatrixcriteriaRow)ttblicsrcostmatrixcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSRLoadCostMatrix - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRLoadCostMatrix(ref pdsContext,  pdsicsrcostmatrixcriteria, out pdsicsrcostmatrix, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRLoadCostMatrix - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrcostmatrixcriteria); 
    
            foreach (DataRow row in pdsicsrcostmatrix.ttblicsrcostmatrix)
            {
                results.Add(Icsrcostmatrix.BuildIcsrcostmatrixFromRow(row));
            }
            return results;
        
      }

      public void ICSRValidateCostMatrix(AsicsetupICSRValidateCostMatrixRequestAPI AsicsetupICSRValidateCostMatrixRequestAPI)
      {   
         
         var pdsicsrcostmatrix = new pdsicsrcostmatrixDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRValidateCostMatrixRequestAPI.icsrcostmatrix)
         {
            DataRow ttblicsrcostmatrixRow = pdsicsrcostmatrix.ttblicsrcostmatrix.NewttblicsrcostmatrixRow();
            Icsrcostmatrix.UpdateRowFromIcsrcostmatrix(ref ttblicsrcostmatrixRow, obj);
            pdsicsrcostmatrix.ttblicsrcostmatrix.AddttblicsrcostmatrixRow((pdsicsrcostmatrixDataSet.ttblicsrcostmatrixRow)ttblicsrcostmatrixRow);
         }
          
         var  pvMode = AsicsetupICSRValidateCostMatrixRequestAPI.pvMode;
            
         var  pvLevel = AsicsetupICSRValidateCostMatrixRequestAPI.pvLevel;
            
         var  pvUsagerate = AsicsetupICSRValidateCostMatrixRequestAPI.pvUsagerate;
            
         
         NLogLoggerP.Trace("ICSRValidateCostMatrix - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRValidateCostMatrix(ref pdsContext,  pvMode,  pvLevel,  pvUsagerate,  pdsicsrcostmatrix, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRValidateCostMatrix - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrcostmatrix);
      }

      public void ICSRSaveCostMatrix(AsicsetupICSRSaveCostMatrixRequestAPI AsicsetupICSRSaveCostMatrixRequestAPI)
      {   
         
         var pdsicsrcostmatrix = new pdsicsrcostmatrixDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRSaveCostMatrixRequestAPI.icsrcostmatrix)
         {
            DataRow ttblicsrcostmatrixRow = pdsicsrcostmatrix.ttblicsrcostmatrix.NewttblicsrcostmatrixRow();
            Icsrcostmatrix.UpdateRowFromIcsrcostmatrix(ref ttblicsrcostmatrixRow, obj);
            pdsicsrcostmatrix.ttblicsrcostmatrix.AddttblicsrcostmatrixRow((pdsicsrcostmatrixDataSet.ttblicsrcostmatrixRow)ttblicsrcostmatrixRow);
         }
          
         var  pvWhse = AsicsetupICSRSaveCostMatrixRequestAPI.pvWhse;
            
         var  pvVendno = AsicsetupICSRSaveCostMatrixRequestAPI.pvVendno;
            
         var  pvProdline = AsicsetupICSRSaveCostMatrixRequestAPI.pvProdline;
            
         
         NLogLoggerP.Trace("ICSRSaveCostMatrix - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRSaveCostMatrix(ref pdsContext,  pvWhse,  pvVendno,  pvProdline,  pdsicsrcostmatrix, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRSaveCostMatrix - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrcostmatrix);
      }

      public AsicsetupICSRLoadRankDataResponseAPI ICSRLoadRankData(Icsrrankdata icsrrankdata)
      {   
         var result = new AsicsetupICSRLoadRankDataResponseAPI();
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         DataRow ttblicsrrankdataCriteria = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataCriteria, icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSRLoadRankData - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRLoadRankData(ref pdsContext, ref pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRLoadRankData - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank); 
    
         foreach (DataRow row in pdsicsrrank.ttblicsrdetailranks)
         {
            result.icsrdetailranks.Add(Icsrdetailranks.BuildIcsrdetailranksFromRow(row));
         }     
         if (pdsicsrrank.ttblicsrrankdata.Count > 0)
         {
            result.icsrrankdata = Icsrrankdata.BuildIcsrrankdataFromRow(pdsicsrrank.ttblicsrrankdata[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> ICSRSaveRankData(AsicsetupICSRSaveRankDataRequestAPI AsicsetupICSRSaveRankDataRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRSaveRankDataRequestAPI.icsrdetailranks)
         {
            DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
            Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, obj);
            pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
         }
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRSaveRankDataRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRSaveRankData - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRSaveRankData(ref pdsContext,  pdsicsrrank, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRSaveRankData - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icsrdetailranks> ICSRBuildHierarchy(AsicsetupICSRBuildHierarchyRequestAPI AsicsetupICSRBuildHierarchyRequestAPI)
      {   
         var results = new List<Icsrdetailranks>();
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRBuildHierarchyRequestAPI.icsrdetailranks)
         {
            DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
            Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, obj);
            pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
         }
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRBuildHierarchyRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRBuildHierarchy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRBuildHierarchy(ref pdsContext, ref pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRBuildHierarchy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank); 
    
            foreach (DataRow row in pdsicsrrank.ttblicsrdetailranks)
            {
                results.Add(Icsrdetailranks.BuildIcsrdetailranksFromRow(row));
            }
            return results;
        
      }

      public string ICSRRankLeaveField(string pvRankty, int pvRank)
      {   
          
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSRRankLeaveField - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRRankLeaveField(ref pdsContext,  pvRankty,  pvRank, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ICSRRankLeaveField - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public string ICSRPctHitLeaveField(string pvRecordty, string pvRankty, string pvPcthit)
      {   
          
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSRPctHitLeaveField - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRPctHitLeaveField(ref pdsContext,  pvRecordty,  pvRankty,  pvPcthit, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ICSRPctHitLeaveField - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public void ICSRRankValidate(AsicsetupICSRRankValidateRequestAPI AsicsetupICSRRankValidateRequestAPI)
      {   
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
         Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, AsicsetupICSRRankValidateRequestAPI.icsrdetailranks);
         pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRRankValidateRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRRankValidate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRRankValidate(ref pdsContext,  pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRRankValidate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank);
      }

      public IEnumerable<Icsrdetailranks> ICSRRankAfterDelete(AsicsetupICSRRankAfterDeleteRequestAPI AsicsetupICSRRankAfterDeleteRequestAPI)
      {   
         var results = new List<Icsrdetailranks>();
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRRankAfterDeleteRequestAPI.icsrdetailranks)
         {
            DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
            Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, obj);
            pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
         }
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRRankAfterDeleteRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRRankAfterDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRRankAfterDelete(ref pdsContext, ref pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRRankAfterDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank); 
    
            foreach (DataRow row in pdsicsrrank.ttblicsrdetailranks)
            {
                results.Add(Icsrdetailranks.BuildIcsrdetailranksFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icsrdetailranks> ICSRRankAfterSave(AsicsetupICSRRankAfterSaveRequestAPI AsicsetupICSRRankAfterSaveRequestAPI)
      {   
         var results = new List<Icsrdetailranks>();
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRRankAfterSaveRequestAPI.icsrdetailranks)
         {
            DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
            Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, obj);
            pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
         }
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRRankAfterSaveRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRRankAfterSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRRankAfterSave(ref pdsContext, ref pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRRankAfterSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank); 
    
            foreach (DataRow row in pdsicsrrank.ttblicsrdetailranks)
            {
                results.Add(Icsrdetailranks.BuildIcsrdetailranksFromRow(row));
            }
            return results;
        
      }

      public void ICSRRankOKToClose(AsicsetupICSRRankOKToCloseRequestAPI AsicsetupICSRRankOKToCloseRequestAPI)
      {   
         
         var pdsicsrrank = new pdsicsrrankDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicsetupICSRRankOKToCloseRequestAPI.icsrdetailranks)
         {
            DataRow ttblicsrdetailranksRow = pdsicsrrank.ttblicsrdetailranks.NewttblicsrdetailranksRow();
            Icsrdetailranks.UpdateRowFromIcsrdetailranks(ref ttblicsrdetailranksRow, obj);
            pdsicsrrank.ttblicsrdetailranks.AddttblicsrdetailranksRow((pdsicsrrankDataSet.ttblicsrdetailranksRow)ttblicsrdetailranksRow);
         }
          
         DataRow ttblicsrrankdataRow = pdsicsrrank.ttblicsrrankdata.NewttblicsrrankdataRow();
         Icsrrankdata.UpdateRowFromIcsrrankdata(ref ttblicsrrankdataRow, AsicsetupICSRRankOKToCloseRequestAPI.icsrrankdata);
         pdsicsrrank.ttblicsrrankdata.AddttblicsrrankdataRow((pdsicsrrankDataSet.ttblicsrrankdataRow)ttblicsrrankdataRow);
          
         
         NLogLoggerP.Trace("ICSRRankOKToClose - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSRRankOKToClose(ref pdsContext,  pdsicsrrank, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSRRankOKToClose - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsrrank);
      }

      public Icsebcontrol ICSEBGetControl(Icsebcriteria icsebcriteria)
      {   
         var result = new Icsebcontrol();
         
         var pdsicsebcriteria = new pdsicsebcriteriaDataSet();
            
         var pdsicsebcontrol = new pdsicsebcontrolDataSet();
            
         DataRow ttblicsebcriteriaCriteria = pdsicsebcriteria.ttblicsebcriteria.NewttblicsebcriteriaRow();
         Icsebcriteria.UpdateRowFromIcsebcriteria(ref ttblicsebcriteriaCriteria, icsebcriteria);
         pdsicsebcriteria.ttblicsebcriteria.AddttblicsebcriteriaRow((pdsicsebcriteriaDataSet.ttblicsebcriteriaRow)ttblicsebcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEBGetControl - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBGetControl(ref pdsContext,  pdsicsebcriteria, out pdsicsebcontrol, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBGetControl - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcriteria); 
    
         if (pdsicsebcontrol.ttblicsebcontrol.Count > 0) 
         { 
             result = Icsebcontrol.BuildIcsebcontrolFromRow(pdsicsebcontrol.ttblicsebcontrol[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icsebresults> ICSEBGetList(Icsebcriteria icsebcriteria)
      {   
         var results = new List<Icsebresults>();
         
         var pdsicsebcriteria = new pdsicsebcriteriaDataSet();
            
         var pdsicsebresults = new pdsicsebresultsDataSet();
            
         DataRow ttblicsebcriteriaCriteria = pdsicsebcriteria.ttblicsebcriteria.NewttblicsebcriteriaRow();
         Icsebcriteria.UpdateRowFromIcsebcriteria(ref ttblicsebcriteriaCriteria, icsebcriteria);
         pdsicsebcriteria.ttblicsebcriteria.AddttblicsebcriteriaRow((pdsicsebcriteriaDataSet.ttblicsebcriteriaRow)ttblicsebcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEBGetList - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBGetList(ref pdsContext,  pdsicsebcriteria, out pdsicsebresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBGetList - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcriteria); 
    
            foreach (DataRow row in pdsicsebresults.ttblicsebresults)
            {
                results.Add(Icsebresults.BuildIcsebresultsFromRow(row));
            }
            return results;
        
      }

      public AsicsetupICSEBAddResponseAPI ICSEBAdd(Icsebadd icsebadd)
      {   
         var result = new AsicsetupICSEBAddResponseAPI();
         
         var pdsicsebadd = new pdsicsebaddDataSet();
            
         var pdsicsebresults = new pdsicsebresultsDataSet();
            
         var pdsicsebloose = new pdsicseblooseDataSet();
            
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         DataRow ttblicsebaddCriteria = pdsicsebadd.ttblicsebadd.NewttblicsebaddRow();
         Icsebadd.UpdateRowFromIcsebadd(ref ttblicsebaddCriteria, icsebadd);
         pdsicsebadd.ttblicsebadd.AddttblicsebaddRow((pdsicsebaddDataSet.ttblicsebaddRow)ttblicsebaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEBAdd - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBAdd(ref pdsContext,  pdsicsebadd, out pdsicsebresults, out pdsicsebloose, out pdsicsebcompcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBAdd - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebadd); 
    
         if (pdsicsebcompcriteria.ttblicsebcompcriteria.Count > 0)
         {
            result.icsebcompcriteria = Icsebcompcriteria.BuildIcsebcompcriteriaFromRow(pdsicsebcompcriteria.ttblicsebcompcriteria[0]);
         }
                    
         if (pdsicsebloose.ttblicsebloose.Count > 0)
         {
            result.icsebloose = Icsebloose.BuildIcseblooseFromRow(pdsicsebloose.ttblicsebloose[0]);
         }
                    
         if (pdsicsebresults.ttblicsebresults.Count > 0)
         {
            result.icsebresults = Icsebresults.BuildIcsebresultsFromRow(pdsicsebresults.ttblicsebresults[0]);
         }
                    
          
         return result;
          
      }

      public Icsebloose ICSEBDelete(Icsebdelete icsebdelete)
      {   
         var result = new Icsebloose();
         
         var pdsicsebdelete = new pdsicsebdeleteDataSet();
            
         var pdsicsebloose = new pdsicseblooseDataSet();
            
         DataRow ttblicsebdeleteCriteria = pdsicsebdelete.ttblicsebdelete.NewttblicsebdeleteRow();
         Icsebdelete.UpdateRowFromIcsebdelete(ref ttblicsebdeleteCriteria, icsebdelete);
         pdsicsebdelete.ttblicsebdelete.AddttblicsebdeleteRow((pdsicsebdeleteDataSet.ttblicsebdeleteRow)ttblicsebdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEBDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBDelete(ref pdsContext,  pdsicsebdelete, out pdsicsebloose, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebdelete); 
    
         if (pdsicsebloose.ttblicsebloose.Count > 0) 
         { 
             result = Icsebloose.BuildIcseblooseFromRow(pdsicsebloose.ttblicsebloose[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSEBCompGetListResponseAPI ICSEBCompGetList(AsicsetupICSEBCompGetListRequestAPI AsicsetupICSEBCompGetListRequestAPI)
      {   
         var result = new AsicsetupICSEBCompGetListResponseAPI();
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebresults = new pdsicsebresultsDataSet();
            
         var pdsicsebcompresults = new pdsicsebcompresultsDataSet();
            
         var pdsicsebcomptopbanner = new pdsicsebcomptopbannerDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBCompGetListRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         foreach (var obj in AsicsetupICSEBCompGetListRequestAPI.icsebresults)
         {
            DataRow ttblicsebresultsRow = pdsicsebresults.ttblicsebresults.NewttblicsebresultsRow();
            Icsebresults.UpdateRowFromIcsebresults(ref ttblicsebresultsRow, obj);
            pdsicsebresults.ttblicsebresults.AddttblicsebresultsRow((pdsicsebresultsDataSet.ttblicsebresultsRow)ttblicsebresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICSEBCompGetList - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBCompGetList(ref pdsContext,  pdsicsebcompcriteria, ref pdsicsebresults, out pdsicsebcompresults, out pdsicsebcomptopbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBCompGetList - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria); 
    
         foreach (DataRow row in pdsicsebcompresults.ttblicsebcompresults)
         {
            result.icsebcompresults.Add(Icsebcompresults.BuildIcsebcompresultsFromRow(row));
         }     
         if (pdsicsebcomptopbanner.ttblicsebcomptopbanner.Count > 0)
         {
            result.icsebcomptopbanner = Icsebcomptopbanner.BuildIcsebcomptopbannerFromRow(pdsicsebcomptopbanner.ttblicsebcomptopbanner[0]);
         }
                    
         foreach (DataRow row in pdsicsebresults.ttblicsebresults)
         {
            result.icsebresults.Add(Icsebresults.BuildIcsebresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsicsetupICSEBUpdateResponseAPI ICSEBUpdate(AsicsetupICSEBUpdateRequestAPI AsicsetupICSEBUpdateRequestAPI)
      {   
         var result = new AsicsetupICSEBUpdateResponseAPI();
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcompresults = new pdsicsebcompresultsDataSet();
            
         var pdsicsebresults = new pdsicsebresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBUpdateRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         foreach (var obj in AsicsetupICSEBUpdateRequestAPI.icsebcompresults)
         {
            DataRow ttblicsebcompresultsRow = pdsicsebcompresults.ttblicsebcompresults.NewttblicsebcompresultsRow();
            Icsebcompresults.UpdateRowFromIcsebcompresults(ref ttblicsebcompresultsRow, obj);
            pdsicsebcompresults.ttblicsebcompresults.AddttblicsebcompresultsRow((pdsicsebcompresultsDataSet.ttblicsebcompresultsRow)ttblicsebcompresultsRow);
         }
          
         foreach (var obj in AsicsetupICSEBUpdateRequestAPI.icsebresults)
         {
            DataRow ttblicsebresultsRow = pdsicsebresults.ttblicsebresults.NewttblicsebresultsRow();
            Icsebresults.UpdateRowFromIcsebresults(ref ttblicsebresultsRow, obj);
            pdsicsebresults.ttblicsebresults.AddttblicsebresultsRow((pdsicsebresultsDataSet.ttblicsebresultsRow)ttblicsebresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICSEBUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBUpdate(ref pdsContext,  pdsicsebcompcriteria, ref pdsicsebcompresults, ref pdsicsebresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria); 
    
         foreach (DataRow row in pdsicsebcompresults.ttblicsebcompresults)
         {
            result.icsebcompresults.Add(Icsebcompresults.BuildIcsebcompresultsFromRow(row));
         }     
         foreach (DataRow row in pdsicsebresults.ttblicsebresults)
         {
            result.icsebresults.Add(Icsebresults.BuildIcsebresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void ICSEBSave(AsicsetupICSEBSaveRequestAPI AsicsetupICSEBSaveRequestAPI)
      {   
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcompresults = new pdsicsebcompresultsDataSet();
            
         var pdsicsebresults = new pdsicsebresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBSaveRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         foreach (var obj in AsicsetupICSEBSaveRequestAPI.icsebcompresults)
         {
            DataRow ttblicsebcompresultsRow = pdsicsebcompresults.ttblicsebcompresults.NewttblicsebcompresultsRow();
            Icsebcompresults.UpdateRowFromIcsebcompresults(ref ttblicsebcompresultsRow, obj);
            pdsicsebcompresults.ttblicsebcompresults.AddttblicsebcompresultsRow((pdsicsebcompresultsDataSet.ttblicsebcompresultsRow)ttblicsebcompresultsRow);
         }
          
         foreach (var obj in AsicsetupICSEBSaveRequestAPI.icsebresults)
         {
            DataRow ttblicsebresultsRow = pdsicsebresults.ttblicsebresults.NewttblicsebresultsRow();
            Icsebresults.UpdateRowFromIcsebresults(ref ttblicsebresultsRow, obj);
            pdsicsebresults.ttblicsebresults.AddttblicsebresultsRow((pdsicsebresultsDataSet.ttblicsebresultsRow)ttblicsebresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICSEBSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBSave(ref pdsContext,  pdsicsebcompcriteria,  pdsicsebcompresults,  pdsicsebresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria);
      }

      public AsicsetupICSEBCompDeleteResponseAPI ICSEBCompDelete(AsicsetupICSEBCompDeleteRequestAPI AsicsetupICSEBCompDeleteRequestAPI)
      {   
         var result = new AsicsetupICSEBCompDeleteResponseAPI();
         
         var pdsicsebcompdelete = new pdsicsebcompdeleteDataSet();
            
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcompresults = new pdsicsebcompresultsDataSet();
            
         var pdsicsebcomptopbanner = new pdsicsebcomptopbannerDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBCompDeleteRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         DataRow ttblicsebcompdeleteRow = pdsicsebcompdelete.ttblicsebcompdelete.NewttblicsebcompdeleteRow();
         Icsebcompdelete.UpdateRowFromIcsebcompdelete(ref ttblicsebcompdeleteRow, AsicsetupICSEBCompDeleteRequestAPI.icsebcompdelete);
         pdsicsebcompdelete.ttblicsebcompdelete.AddttblicsebcompdeleteRow((pdsicsebcompdeleteDataSet.ttblicsebcompdeleteRow)ttblicsebcompdeleteRow);
          
         foreach (var obj in AsicsetupICSEBCompDeleteRequestAPI.icsebcompresults)
         {
            DataRow ttblicsebcompresultsRow = pdsicsebcompresults.ttblicsebcompresults.NewttblicsebcompresultsRow();
            Icsebcompresults.UpdateRowFromIcsebcompresults(ref ttblicsebcompresultsRow, obj);
            pdsicsebcompresults.ttblicsebcompresults.AddttblicsebcompresultsRow((pdsicsebcompresultsDataSet.ttblicsebcompresultsRow)ttblicsebcompresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICSEBCompDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBCompDelete(ref pdsContext,  pdsicsebcompdelete,  pdsicsebcompcriteria, ref pdsicsebcompresults, out pdsicsebcomptopbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBCompDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompdelete); 
    
         foreach (DataRow row in pdsicsebcompresults.ttblicsebcompresults)
         {
            result.icsebcompresults.Add(Icsebcompresults.BuildIcsebcompresultsFromRow(row));
         }     
         if (pdsicsebcomptopbanner.ttblicsebcomptopbanner.Count > 0)
         {
            result.icsebcomptopbanner = Icsebcomptopbanner.BuildIcsebcomptopbannerFromRow(pdsicsebcomptopbanner.ttblicsebcomptopbanner[0]);
         }
                    
          
         return result;
          
      }

      public Icsebcontrol ICSEBCompAddUpdInitialize(AsicsetupICSEBCompAddUpdInitializeRequestAPI AsicsetupICSEBCompAddUpdInitializeRequestAPI)
      {   
         var result = new Icsebcontrol();
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcontrol = new pdsicsebcontrolDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBCompAddUpdInitializeRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         DataRow ttblicsebcontrolRow = pdsicsebcontrol.ttblicsebcontrol.NewttblicsebcontrolRow();
         Icsebcontrol.UpdateRowFromIcsebcontrol(ref ttblicsebcontrolRow, AsicsetupICSEBCompAddUpdInitializeRequestAPI.icsebcontrol);
         pdsicsebcontrol.ttblicsebcontrol.AddttblicsebcontrolRow((pdsicsebcontrolDataSet.ttblicsebcontrolRow)ttblicsebcontrolRow);
          
         
         NLogLoggerP.Trace("ICSEBCompAddUpdInitialize - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBCompAddUpdInitialize(ref pdsContext,  pdsicsebcompcriteria, ref pdsicsebcontrol, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBCompAddUpdInitialize - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria); 
    
         if (pdsicsebcontrol.ttblicsebcontrol.Count > 0) 
         { 
             result = Icsebcontrol.BuildIcsebcontrolFromRow(pdsicsebcontrol.ttblicsebcontrol[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSEBCompAddUpdValidateResponseAPI ICSEBCompAddUpdValidate(AsicsetupICSEBCompAddUpdValidateRequestAPI AsicsetupICSEBCompAddUpdValidateRequestAPI)
      {   
         var result = new AsicsetupICSEBCompAddUpdValidateResponseAPI();
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcontrol = new pdsicsebcontrolDataSet();
            
         var pdsicsebcompnew = new pdsicsebcompnewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBCompAddUpdValidateRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         DataRow ttblicsebcompnewRow = pdsicsebcompnew.ttblicsebcompnew.NewttblicsebcompnewRow();
         Icsebcompnew.UpdateRowFromIcsebcompnew(ref ttblicsebcompnewRow, AsicsetupICSEBCompAddUpdValidateRequestAPI.icsebcompnew);
         pdsicsebcompnew.ttblicsebcompnew.AddttblicsebcompnewRow((pdsicsebcompnewDataSet.ttblicsebcompnewRow)ttblicsebcompnewRow);
          
         DataRow ttblicsebcontrolRow = pdsicsebcontrol.ttblicsebcontrol.NewttblicsebcontrolRow();
         Icsebcontrol.UpdateRowFromIcsebcontrol(ref ttblicsebcontrolRow, AsicsetupICSEBCompAddUpdValidateRequestAPI.icsebcontrol);
         pdsicsebcontrol.ttblicsebcontrol.AddttblicsebcontrolRow((pdsicsebcontrolDataSet.ttblicsebcontrolRow)ttblicsebcontrolRow);
          
         
         NLogLoggerP.Trace("ICSEBCompAddUpdValidate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBCompAddUpdValidate(ref pdsContext,  pdsicsebcompcriteria,  pdsicsebcontrol, ref pdsicsebcompnew, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBCompAddUpdValidate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria); 
    
         if (pdsicsebcompnew.ttblicsebcompnew.Count > 0)
         {
            result.icsebcompnew = Icsebcompnew.BuildIcsebcompnewFromRow(pdsicsebcompnew.ttblicsebcompnew[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicsetupICSEBCompAddUpdSaveResponseAPI ICSEBCompAddUpdSave(AsicsetupICSEBCompAddUpdSaveRequestAPI AsicsetupICSEBCompAddUpdSaveRequestAPI)
      {   
         var result = new AsicsetupICSEBCompAddUpdSaveResponseAPI();
         
         var pdsicsebcompcriteria = new pdsicsebcompcriteriaDataSet();
            
         var pdsicsebcontrol = new pdsicsebcontrolDataSet();
            
         var pdsicsebcompnew = new pdsicsebcompnewDataSet();
            
         var pdsicsebcompresults = new pdsicsebcompresultsDataSet();
            
         var pdsicsebcomptopbanner = new pdsicsebcomptopbannerDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsebcompcriteriaRow = pdsicsebcompcriteria.ttblicsebcompcriteria.NewttblicsebcompcriteriaRow();
         Icsebcompcriteria.UpdateRowFromIcsebcompcriteria(ref ttblicsebcompcriteriaRow, AsicsetupICSEBCompAddUpdSaveRequestAPI.icsebcompcriteria);
         pdsicsebcompcriteria.ttblicsebcompcriteria.AddttblicsebcompcriteriaRow((pdsicsebcompcriteriaDataSet.ttblicsebcompcriteriaRow)ttblicsebcompcriteriaRow);
          
         DataRow ttblicsebcompnewRow = pdsicsebcompnew.ttblicsebcompnew.NewttblicsebcompnewRow();
         Icsebcompnew.UpdateRowFromIcsebcompnew(ref ttblicsebcompnewRow, AsicsetupICSEBCompAddUpdSaveRequestAPI.icsebcompnew);
         pdsicsebcompnew.ttblicsebcompnew.AddttblicsebcompnewRow((pdsicsebcompnewDataSet.ttblicsebcompnewRow)ttblicsebcompnewRow);
          
         foreach (var obj in AsicsetupICSEBCompAddUpdSaveRequestAPI.icsebcompresults)
         {
            DataRow ttblicsebcompresultsRow = pdsicsebcompresults.ttblicsebcompresults.NewttblicsebcompresultsRow();
            Icsebcompresults.UpdateRowFromIcsebcompresults(ref ttblicsebcompresultsRow, obj);
            pdsicsebcompresults.ttblicsebcompresults.AddttblicsebcompresultsRow((pdsicsebcompresultsDataSet.ttblicsebcompresultsRow)ttblicsebcompresultsRow);
         }
          
         DataRow ttblicsebcontrolRow = pdsicsebcontrol.ttblicsebcontrol.NewttblicsebcontrolRow();
         Icsebcontrol.UpdateRowFromIcsebcontrol(ref ttblicsebcontrolRow, AsicsetupICSEBCompAddUpdSaveRequestAPI.icsebcontrol);
         pdsicsebcontrol.ttblicsebcontrol.AddttblicsebcontrolRow((pdsicsebcontrolDataSet.ttblicsebcontrolRow)ttblicsebcontrolRow);
          
         
         NLogLoggerP.Trace("ICSEBCompAddUpdSave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEBCompAddUpdSave(ref pdsContext,  pdsicsebcompcriteria,  pdsicsebcontrol,  pdsicsebcompnew, ref pdsicsebcompresults, out pdsicsebcomptopbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEBCompAddUpdSave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsebcompcriteria); 
    
         foreach (DataRow row in pdsicsebcompresults.ttblicsebcompresults)
         {
            result.icsebcompresults.Add(Icsebcompresults.BuildIcsebcompresultsFromRow(row));
         }     
         if (pdsicsebcomptopbanner.ttblicsebcomptopbanner.Count > 0)
         {
            result.icsebcomptopbanner = Icsebcomptopbanner.BuildIcsebcomptopbannerFromRow(pdsicsebcomptopbanner.ttblicsebcomptopbanner[0]);
         }
                    
          
         return result;
          
      }

      public Icsehcopy ICSEHCopy(Icsehcopy icsehcopy)
      {   
         var result = new Icsehcopy();
         
         var pdsicsehcopy = new pdsicsehcopyDataSet();
            
         DataRow ttblicsehcopyCriteria = pdsicsehcopy.ttblicsehcopy.NewttblicsehcopyRow();
         Icsehcopy.UpdateRowFromIcsehcopy(ref ttblicsehcopyCriteria, icsehcopy);
         pdsicsehcopy.ttblicsehcopy.AddttblicsehcopyRow((pdsicsehcopyDataSet.ttblicsehcopyRow)ttblicsehcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEHCopy - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEHCopy(ref pdsContext, ref pdsicsehcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEHCopy - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsehcopy); 
    
         if (pdsicsehcopy.ttblicsehcopy.Count > 0) 
         { 
             result = Icsehcopy.BuildIcsehcopyFromRow(pdsicsehcopy.ttblicsehcopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icseegetlistresults> ICSEEGetList(Icseegetlistcriteria icseegetlistcriteria)
      {   
         var results = new List<Icseegetlistresults>();
         
         var pdsicseegetlist = new pdsicseegetlistDataSet();
            
         DataRow ttblicseegetlistcriteriaCriteria = pdsicseegetlist.ttblicseegetlistcriteria.NewttblicseegetlistcriteriaRow();
         Icseegetlistcriteria.UpdateRowFromIcseegetlistcriteria(ref ttblicseegetlistcriteriaCriteria, icseegetlistcriteria);
         pdsicseegetlist.ttblicseegetlistcriteria.AddttblicseegetlistcriteriaRow((pdsicseegetlistDataSet.ttblicseegetlistcriteriaRow)ttblicseegetlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEEGetList - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEEGetList(ref pdsContext, ref pdsicseegetlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEEGetList - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicseegetlist); 
    
            foreach (DataRow row in pdsicseegetlist.ttblicseegetlistresults)
            {
                results.Add(Icseegetlistresults.BuildIcseegetlistresultsFromRow(row));
            }
            return results;
        
      }

      public Icsvcontrol ICSVInitiate()
      {   
         var result = new Icsvcontrol();
         
         var pdsicsvcontrol = new pdsicsvcontrolDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSVInitiate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSVInitiate(ref pdsContext, out pdsicsvcontrol, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSVInitiate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsvcontrol); 
    
         if (pdsicsvcontrol.ttblicsvcontrol.Count > 0) 
         { 
             result = Icsvcontrol.BuildIcsvcontrolFromRow(pdsicsvcontrol.ttblicsvcontrol[0]);
         } 
              
          
         return result;
          
      }

      public string ICSVFieldLeave(AsicsetupICSVFieldLeaveRequestAPI AsicsetupICSVFieldLeaveRequestAPI)
      {   
          
         var pdsicsv = new pdsicsvDataSet();
            
         string cUPCNo = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsvRow = pdsicsv.ttblicsv.NewttblicsvRow();
         Icsv.UpdateRowFromIcsv(ref ttblicsvRow, AsicsetupICSVFieldLeaveRequestAPI.icsv);
         pdsicsv.ttblicsv.AddttblicsvRow((pdsicsvDataSet.ttblicsvRow)ttblicsvRow);
          
         var  cField = AsicsetupICSVFieldLeaveRequestAPI.cField;
            
         
         NLogLoggerP.Trace("ICSVFieldLeave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSVFieldLeave(ref pdsContext,  cField,  pdsicsv, out cUPCNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSVFieldLeave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsv); 
    
         return cUPCNo;
      
      }

      public AsicsetupICSVRowSelectResponseAPI ICSVRowSelect(Icsv icsv)
      {   
         var result = new AsicsetupICSVRowSelectResponseAPI();
         
         var pdsicsv = new pdsicsvDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicsvCriteria = pdsicsv.ttblicsv.NewttblicsvRow();
         Icsv.UpdateRowFromIcsv(ref ttblicsvCriteria, icsv);
         pdsicsv.ttblicsv.AddttblicsvRow((pdsicsvDataSet.ttblicsvRow)ttblicsvCriteria);
            
         string cUPCNo = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSVRowSelect - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSVRowSelect(ref pdsContext,  pdsicsv, out cUPCNo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSVRowSelect - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsv); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.cUPCNo = cUPCNo;
          
         return result;
          
      }

      public IEnumerable<Icsefresults> ICSEFRetrieve(Icsefcriteria icsefcriteria)
      {   
         var results = new List<Icsefresults>();
         
         var pdsicsefcriteria = new pdsicsefcriteriaDataSet();
            
         var pdsicsefresults = new pdsicsefresultsDataSet();
            
         DataRow ttblicsefcriteriaCriteria = pdsicsefcriteria.ttblicsefcriteria.NewttblicsefcriteriaRow();
         Icsefcriteria.UpdateRowFromIcsefcriteria(ref ttblicsefcriteriaCriteria, icsefcriteria);
         pdsicsefcriteria.ttblicsefcriteria.AddttblicsefcriteriaRow((pdsicsefcriteriaDataSet.ttblicsefcriteriaRow)ttblicsefcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSEFRetrieve - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSEFRetrieve(ref pdsContext,  pdsicsefcriteria, out pdsicsefresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSEFRetrieve - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsefcriteria); 
    
            foreach (DataRow row in pdsicsefresults.ttblicsefresults)
            {
                results.Add(Icsefresults.BuildIcsefresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icsoclevelcds> ICSOCLevelCdsInitiate()
      {   
         var results = new List<Icsoclevelcds>();
         
         var pdsicsoclevelcds = new pdsicsoclevelcdsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOCLevelCdsInitiate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOCLevelCdsInitiate(ref pdsContext, out pdsicsoclevelcds, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOCLevelCdsInitiate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoclevelcds); 
    
            foreach (DataRow row in pdsicsoclevelcds.ttblicsoclevelcds)
            {
                results.Add(Icsoclevelcds.BuildIcsoclevelcdsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icsocresults> ICSOCLoad(Icsoccriteria icsoccriteria)
      {   
         var results = new List<Icsocresults>();
         
         var pdsicsocload = new pdsicsocloadDataSet();
            
         DataRow ttblicsoccriteriaCriteria = pdsicsocload.ttblicsoccriteria.NewttblicsoccriteriaRow();
         Icsoccriteria.UpdateRowFromIcsoccriteria(ref ttblicsoccriteriaCriteria, icsoccriteria);
         pdsicsocload.ttblicsoccriteria.AddttblicsoccriteriaRow((pdsicsocloadDataSet.ttblicsoccriteriaRow)ttblicsoccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOCLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOCLoad(ref pdsContext, ref pdsicsocload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOCLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsocload); 
    
            foreach (DataRow row in pdsicsocload.ttblicsocresults)
            {
                results.Add(Icsocresults.BuildIcsocresultsFromRow(row));
            }
            return results;
        
      }

      public AsicsetupGetICSOEListResponseAPI GetICSOEList(Icsoesetupcriteria icsoesetupcriteria)
      {   
         var result = new AsicsetupGetICSOEListResponseAPI();
         
         var pdsicsoesetupcriteria = new pdsicsoesetupcriteriaDataSet();
            
         var pdsicsoesetup = new pdsicsoesetupDataSet();
            
         DataRow ttblicsoesetupcriteriaCriteria = pdsicsoesetupcriteria.ttblicsoesetupcriteria.NewttblicsoesetupcriteriaRow();
         Icsoesetupcriteria.UpdateRowFromIcsoesetupcriteria(ref ttblicsoesetupcriteriaCriteria, icsoesetupcriteria);
         pdsicsoesetupcriteria.ttblicsoesetupcriteria.AddttblicsoesetupcriteriaRow((pdsicsoesetupcriteriaDataSet.ttblicsoesetupcriteriaRow)ttblicsoesetupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetICSOEList - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.GetICSOEList(ref pdsContext,  pdsicsoesetupcriteria, out pdsicsoesetup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetICSOEList - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoesetupcriteria); 
    
         foreach (DataRow row in pdsicsoesetup.ttblicsoesetup)
         {
            result.icsoesetup.Add(Icsoesetup.BuildIcsoesetupFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Icsoesetup ICSOECreate(Icsoesetup icsoesetup)
      {   
         var result = new Icsoesetup();
         
         var pdsicsoesetup = new pdsicsoesetupDataSet();
            
         DataRow ttblicsoesetupCriteria = pdsicsoesetup.ttblicsoesetup.NewttblicsoesetupRow();
         Icsoesetup.UpdateRowFromIcsoesetup(ref ttblicsoesetupCriteria, icsoesetup);
         pdsicsoesetup.ttblicsoesetup.AddttblicsoesetupRow((pdsicsoesetupDataSet.ttblicsoesetupRow)ttblicsoesetupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOECreate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOECreate(ref pdsContext, ref pdsicsoesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOECreate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoesetup); 
    
         if (pdsicsoesetup.ttblicsoesetup.Count > 0) 
         { 
             result = Icsoesetup.BuildIcsoesetupFromRow(pdsicsoesetup.ttblicsoesetup[0]);
         } 
              
          
         return result;
          
      }

      public void ICSOEDelete(IEnumerable<Icsoesetup> icsoesetup)
      {   
         
         var pdsicsoesetup = new pdsicsoesetupDataSet();
            
         foreach (var obj in icsoesetup)
         {
             DataRow row = pdsicsoesetup.ttblicsoesetup.NewttblicsoesetupRow();
             Icsoesetup.UpdateRowFromIcsoesetup(ref row, obj);
             pdsicsoesetup.ttblicsoesetup.AddttblicsoesetupRow((pdsicsoesetupDataSet.ttblicsoesetupRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOEDelete - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOEDelete(ref pdsContext,  pdsicsoesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOEDelete - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoesetup);
      }

      public void ICSOESave(Icsoesetup icsoesetup)
      {   
         
         var pdsicsoesetup = new pdsicsoesetupDataSet();
            
         DataRow ttblicsoesetupCriteria = pdsicsoesetup.ttblicsoesetup.NewttblicsoesetupRow();
         Icsoesetup.UpdateRowFromIcsoesetup(ref ttblicsoesetupCriteria, icsoesetup);
         pdsicsoesetup.ttblicsoesetup.AddttblicsoesetupRow((pdsicsoesetupDataSet.ttblicsoesetupRow)ttblicsoesetupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSOESave - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSOESave(ref pdsContext,  pdsicsoesetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSOESave - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsoesetup);
      }

      public Icsprinitialize ICSPRInitialize()
      {   
         var result = new Icsprinitialize();
         
         var pdsicsprinitialize = new pdsicsprinitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRInitialize - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRInitialize(ref pdsContext, out pdsicsprinitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRInitialize - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprinitialize); 
    
         if (pdsicsprinitialize.ttblicsprinitialize.Count > 0) 
         { 
             result = Icsprinitialize.BuildIcsprinitializeFromRow(pdsicsprinitialize.ttblicsprinitialize[0]);
         } 
              
          
         return result;
          
      }

      public AsicsetupICSPRSearchResponseAPI ICSPRSearch(Icsprcriteria icsprcriteria)
      {   
         var result = new AsicsetupICSPRSearchResponseAPI();
         
         var pdsicsprsearch = new pdsicsprsearchDataSet();
            
         DataRow ttblicsprcriteriaCriteria = pdsicsprsearch.ttblicsprcriteria.NewttblicsprcriteriaRow();
         Icsprcriteria.UpdateRowFromIcsprcriteria(ref ttblicsprcriteriaCriteria, icsprcriteria);
         pdsicsprsearch.ttblicsprcriteria.AddttblicsprcriteriaRow((pdsicsprsearchDataSet.ttblicsprcriteriaRow)ttblicsprcriteriaCriteria);
            
         bool pvMorerecords = false;
         string cWarningMsg = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRSearch(ref pdsContext, ref pdsicsprsearch, out pvMorerecords, out cWarningMsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprsearch); 
    
         foreach (DataRow row in pdsicsprsearch.ttblicsprresults)
         {
            result.icsprresults.Add(Icsprresults.BuildIcsprresultsFromRow(row));
         }     
         result.pvMorerecords = pvMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public Icspraddchg ICSPRLoad(string pvRowpointer)
      {   
         var result = new Icspraddchg();
         
         var pdsicspraddchg = new pdsicspraddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRLoad - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRLoad(ref pdsContext,  pvRowpointer, out pdsicspraddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRLoad - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspraddchg); 
    
         if (pdsicspraddchg.ttblicspraddchg.Count > 0) 
         { 
             result = Icspraddchg.BuildIcspraddchgFromRow(pdsicspraddchg.ttblicspraddchg[0]);
         } 
              
          
         return result;
          
      }

      public Icsprinitialize ICSPRLeaveField(AsicsetupICSPRLeaveFieldRequestAPI AsicsetupICSPRLeaveFieldRequestAPI)
      {   
         var result = new Icsprinitialize();
         
         var pdsicsprinitialize = new pdsicsprinitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicsprinitializeRow = pdsicsprinitialize.ttblicsprinitialize.NewttblicsprinitializeRow();
         Icsprinitialize.UpdateRowFromIcsprinitialize(ref ttblicsprinitializeRow, AsicsetupICSPRLeaveFieldRequestAPI.icsprinitialize);
         pdsicsprinitialize.ttblicsprinitialize.AddttblicsprinitializeRow((pdsicsprinitializeDataSet.ttblicsprinitializeRow)ttblicsprinitializeRow);
          
         var  pvType = AsicsetupICSPRLeaveFieldRequestAPI.pvType;
            
         
         NLogLoggerP.Trace("ICSPRLeaveField - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRLeaveField(ref pdsContext,  pvType, ref pdsicsprinitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRLeaveField - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprinitialize); 
    
         if (pdsicsprinitialize.ttblicsprinitialize.Count > 0) 
         { 
             result = Icsprinitialize.BuildIcsprinitializeFromRow(pdsicsprinitialize.ttblicsprinitialize[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> ICSPRCancel(string pvRowpointer)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRCancel - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRCancel(ref pdsContext,  pvRowpointer, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRCancel - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicsetupICSPRUpdateResponseAPI ICSPRUpdate(IEnumerable<Icspraddchg> icspraddchg)
      {   
         var result = new AsicsetupICSPRUpdateResponseAPI();
         
         var pdsicspraddchg = new pdsicspraddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in icspraddchg)
         {
             DataRow row = pdsicspraddchg.ttblicspraddchg.NewttblicspraddchgRow();
             Icspraddchg.UpdateRowFromIcspraddchg(ref row, obj);
             pdsicspraddchg.ttblicspraddchg.AddttblicspraddchgRow((pdsicspraddchgDataSet.ttblicspraddchgRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRUpdate(ref pdsContext, ref pdsicspraddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspraddchg); 
    
         foreach (DataRow row in pdsicspraddchg.ttblicspraddchg)
         {
            result.icspraddchg.Add(Icspraddchg.BuildIcspraddchgFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Icsprtresults> ICSPRTSearch(IEnumerable<Icsprtcriteria> icsprtcriteria)
      {   
         var results = new List<Icsprtresults>();
         
         var pdsicsprtsearch = new pdsicsprtsearchDataSet();
            
         foreach (var obj in icsprtcriteria)
         {
             DataRow row = pdsicsprtsearch.ttblicsprtcriteria.NewttblicsprtcriteriaRow();
             Icsprtcriteria.UpdateRowFromIcsprtcriteria(ref row, obj);
             pdsicsprtsearch.ttblicsprtcriteria.AddttblicsprtcriteriaRow((pdsicsprtsearchDataSet.ttblicsprtcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRTSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRTSearch(ref pdsContext, ref pdsicsprtsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRTSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprtsearch); 
    
            foreach (DataRow row in pdsicsprtsearch.ttblicsprtresults)
            {
                results.Add(Icsprtresults.BuildIcsprtresultsFromRow(row));
            }
            return results;
        
      }

      public AsicsetupICSPRTUpdateResponseAPI ICSPRTUpdate(Icsprtaddchg icsprtaddchg)
      {   
         var result = new AsicsetupICSPRTUpdateResponseAPI();
         
         var pdsicsprtaddchg = new pdsicsprtaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicsprtaddchgCriteria = pdsicsprtaddchg.ttblicsprtaddchg.NewttblicsprtaddchgRow();
         Icsprtaddchg.UpdateRowFromIcsprtaddchg(ref ttblicsprtaddchgCriteria, icsprtaddchg);
         pdsicsprtaddchg.ttblicsprtaddchg.AddttblicsprtaddchgRow((pdsicsprtaddchgDataSet.ttblicsprtaddchgRow)ttblicsprtaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRTUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRTUpdate(ref pdsContext, ref pdsicsprtaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRTUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprtaddchg); 
    
         if (pdsicsprtaddchg.ttblicsprtaddchg.Count > 0)
         {
            result.icsprtaddchg = Icsprtaddchg.BuildIcsprtaddchgFromRow(pdsicsprtaddchg.ttblicsprtaddchg[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicsetupICSPRCSearchResponseAPI ICSPRCSearch(Icsprccriteria icsprccriteria)
      {   
         var result = new AsicsetupICSPRCSearchResponseAPI();
         
         var pdsicsprcsearch = new pdsicsprcsearchDataSet();
            
         DataRow ttblicsprccriteriaCriteria = pdsicsprcsearch.ttblicsprccriteria.NewttblicsprccriteriaRow();
         Icsprccriteria.UpdateRowFromIcsprccriteria(ref ttblicsprccriteriaCriteria, icsprccriteria);
         pdsicsprcsearch.ttblicsprccriteria.AddttblicsprccriteriaRow((pdsicsprcsearchDataSet.ttblicsprccriteriaRow)ttblicsprccriteriaCriteria);
            
         bool pvMorerecords = false;
         string cWarningMsg = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRCSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRCSearch(ref pdsContext, ref pdsicsprcsearch, out pvMorerecords, out cWarningMsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRCSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprcsearch); 
    
         foreach (DataRow row in pdsicsprcsearch.ttblicsprcresults)
         {
            result.icsprcresults.Add(Icsprcresults.BuildIcsprcresultsFromRow(row));
         }     
         result.pvMorerecords = pvMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AsicsetupICSPRCUpdateResponseAPI ICSPRCUpdate(IEnumerable<Icsprcaddchg> icsprcaddchg)
      {   
         var result = new AsicsetupICSPRCUpdateResponseAPI();
         
         var pdsicsprcaddchg = new pdsicsprcaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in icsprcaddchg)
         {
             DataRow row = pdsicsprcaddchg.ttblicsprcaddchg.NewttblicsprcaddchgRow();
             Icsprcaddchg.UpdateRowFromIcsprcaddchg(ref row, obj);
             pdsicsprcaddchg.ttblicsprcaddchg.AddttblicsprcaddchgRow((pdsicsprcaddchgDataSet.ttblicsprcaddchgRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPRCUpdate - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRCUpdate(ref pdsContext, ref pdsicsprcaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPRCUpdate - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprcaddchg); 
    
         foreach (DataRow row in pdsicsprcaddchg.ttblicsprcaddchg)
         {
            result.icsprcaddchg.Add(Icsprcaddchg.BuildIcsprcaddchgFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicsetupICSPRCLookupResponseAPI ICSPRCLookup(Icsprclookupcriteria icsprclookupcriteria)
      {   
         var result = new AsicsetupICSPRCLookupResponseAPI();
         
         var pdsicsprclookup = new pdsicsprclookupDataSet();
            
         DataRow ttblicsprclookupcriteriaCriteria = pdsicsprclookup.ttblicsprclookupcriteria.NewttblicsprclookupcriteriaRow();
         Icsprclookupcriteria.UpdateRowFromIcsprclookupcriteria(ref ttblicsprclookupcriteriaCriteria, icsprclookupcriteria);
         pdsicsprclookup.ttblicsprclookupcriteria.AddttblicsprclookupcriteriaRow((pdsicsprclookupDataSet.ttblicsprclookupcriteriaRow)ttblicsprclookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICSPRCLookup - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPRCLookup(ref pdsContext, ref pdsicsprclookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICSPRCLookup - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsprclookup); 
    
         foreach (DataRow row in pdsicsprclookup.ttblicsprclookupresults)
         {
            result.icsprclookupresults.Add(Icsprclookupresults.BuildIcsprclookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicsetupICSPCSearchResponseAPI ICSPCSearch(Icspccriteria icspccriteria)
      {   
         var result = new AsicsetupICSPCSearchResponseAPI();
         
         var pdsicspcsearch = new pdsicspcsearchDataSet();
            
         DataRow ttblicspccriteriaCriteria = pdsicspcsearch.ttblicspccriteria.NewttblicspccriteriaRow();
         Icspccriteria.UpdateRowFromIcspccriteria(ref ttblicspccriteriaCriteria, icspccriteria);
         pdsicspcsearch.ttblicspccriteria.AddttblicspccriteriaRow((pdsicspcsearchDataSet.ttblicspccriteriaRow)ttblicspccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cWarningMsg = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSPCSearch - Asicsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicsetupproxy = this.proxyAppObject.CreatePO_asicsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicsetupproxy.ICSPCSearch(ref pdsContext, ref pdsicspcsearch, out lMoreRecords, out cWarningMsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSPCSearch - Asicsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicspcsearch); 
    
         foreach (DataRow row in pdsicspcsearch.ttblicspcresults)
         {
            result.icspcresults.Add(Icspcresults.BuildIcspcresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  