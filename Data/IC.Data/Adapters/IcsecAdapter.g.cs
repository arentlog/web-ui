//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Adapters
{
   using com.infor.sxproxy.icproxy;
   using com.infor.sxproxy.icproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsicsec;
   using Models.Pdsicseccustprodlookup;
   using Models.Pdsicxrefreferlookup;
   using Models.Pdsicxrefcustlookup;
   using Models.Pdsicxrefvendlookup;
   using Models.Pdsnsinvhdrlookup;
   using Models.Complex;

   public partial class IcsecAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsicsec";
      private ICProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> icsecTableControlKey;
		
      private pdsicsecDataSet dataSet;
        
      public IcsecAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ICProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsicsecDataSet() { DataSetName = DataSetName };
            this.icsecTableControlKey = this.dataSet.ttblicsec.GetTableControlParametersKey();
            
            if (!this.tempTableControlParameters.ContainsKey(this.icsecTableControlKey))
            {
               this.CreateTableControlParameters(this.icsecTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in IcsecAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Icsecproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poIcsecproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Icsecproxy - After Call");
      }
      
      private void SetAndFetch(string where, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.icsecTableControlKey, where, batchsize, fldList);
         this.SetTableParametersOnContext(this.icsecTableControlKey, true);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Icsecproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                  this.SetRequiredContextParameters();
                  poIcsecproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Icsecproxy - After Call");
      }
   

      public Icsec GetByRowId(string rowId, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fldList);
         Icsec icsec = null;
         if (row != null)
         {
             icsec = this.BuildFromRow(row);
         }
         return icsec;
      }
   
      private DataRow GetRowByRowId(string rowId, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(icsec) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttblicsec.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Icsec> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(icsec)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), batchsize, fldList);
      }

      protected Icsec Fetch(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         var row = this.dataSet.ttblicsec.AsEnumerable().SingleOrDefault();
         Icsec icsec = null;
         if (row != null)
         {
             icsec = this.BuildFromRow(row);
         }
         return icsec;
      }
	  
	  
	  public IEnumerable<Icsec> GetListByRowpointers(List<string> rowpointers, string fldList)
      {
         var where = new StringBuilder();
         if (rowpointers != null && rowpointers.Count > 0)
         {
           foreach (var rowpointer in rowpointers)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("icsec.rowpointer='{0}'", rowpointer);
           }
         }
         return this.GetList(where.ToString(), rowpointers.Count, fldList);
      }
	  
	  private DataRow GetRowByRowpointer(string rowpointer, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("icsec.rowpointer = '{0}'", rowpointer);
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttblicsec.AsEnumerable().SingleOrDefault();
      }
      public IEnumerable<Icsec> GetListAllByCono(int cono, int batchsize, string fldList)
      {   
         cono = cono == 0 ? this.connection.CompanyNumber : cono;
         var sb = new StringBuilder();
         sb.AppendFormat("icsec.cono = {0}", cono);
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Icsec> GetList(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttblicsec.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Icsec Get(int cono, string rectype, string prod, decimal keyno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("icsec.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(rectype)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.rectype = '{0}'", rectype);
         }
         if (!string.IsNullOrEmpty(prod)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.prod = '{0}'", prod);
         }
         if (keyno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND icsec.keyno = {0}", keyno);
         }
         var where = sb.ToString();
         return this.Fetch(where, batchsize, fldList);
      }
  
      public IEnumerable<Icsec> GetListByAltprod(int cono, string altprod, string rectype, decimal custno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("icsec.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(altprod)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.altprod = '{0}'", altprod);
         }
         if (!string.IsNullOrEmpty(rectype)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.rectype = '{0}'", rectype);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND icsec.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Icsec> GetListByCustno(int cono, string rectype, decimal custno, string prod, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("icsec.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(rectype)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.rectype = '{0}'", rectype);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND icsec.custno = {0}", custno);
         }
         if (!string.IsNullOrEmpty(prod)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.prod = '{0}'", prod);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Icsec> GetListByKeyno(int cono, string rectype, decimal keyno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("icsec.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(rectype)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.rectype = '{0}'", rectype);
         }
         if (keyno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND icsec.keyno = {0}", keyno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Icsec> GetListByProd(int cono, string prod, string rectype, decimal keyno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("icsec.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(prod)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.prod = '{0}'", prod);
         }
         if (!string.IsNullOrEmpty(rectype)) 
         {
             sb.AppendFormatWithEscape(" AND icsec.rectype = '{0}'", rectype);
         }
         if (keyno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND icsec.keyno = {0}", keyno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Icsec GetByRowpointer(string rowpointer, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowpointer)) 
         {
             sb.AppendFormatWithEscape("icsec.rowpointer = '{0}'", rowpointer);
         }
         var where = sb.ToString();
         return this.Fetch(where, 1, fldList);
      }

      public IEnumerable<Icsec> GetListByTransdttmz(DateTime? transdttmz, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transdttmz != null) 
         {
             sb.AppendFormatWithEscape("icsec.transdttmz = '{0}'", transdttmz);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Icsec BuildFromRow(DataRow row)
      {
         var returnRecord = Icsec.BuildIcsecFromRow(row);
         returnRecord = this.BuildExtraFromRow<Icsec>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Icsec record)
      {
         Icsec.UpdateRowFromIcsec(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Icsec Insert(Icsec record)
      {
         DataRow row = this.dataSet.ttblicsec.NewttblicsecRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttblicsec.AddttblicsecRow((pdsicsecDataSet.ttblicsecRow)row);
         this.SaveChanges();
         return this.dataSet.ttblicsec.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblicsec.Rows[0]) : null;
      }
  

      public Icsec Update(Icsec record)
      {
        var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttblicsec.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblicsec.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Icsec record)
      {
         var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttblicsec.NewttblicsecRow();
            Icsec.BuildMinimalRow(ref row, record);
            this.dataSet.ttblicsec.AddttblicsecRow((pdsicsecDataSet.ttblicsecRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }
 
      private void DeleteUseRowID(Icsec record)
      {
         var row = this.GetRowByRowId(record.rowID, string.Empty);
         if (row == null)
         {
            row = this.dataSet.ttblicsec.NewttblicsecRow();
            Icsec.BuildMinimalRow(ref row, record);
            this.dataSet.ttblicsec.AddttblicsecRow((pdsicsecDataSet.ttblicsecRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Icsec() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.DeleteUseRowID(rec);
            }
         }
      }
	  
 
      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         if (rowpointers != null)
         {
            var recList = rowpointers.Select(selectRowpointer => new Icsec() { rowpointer = selectRowpointer }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }

      public IEnumerable<Icseccustprodlookupresults> LookupCustomerProduct(Icseccustprodlookupcriteria icseccustprodlookupcriteria)
      {   
         var results = new List<Icseccustprodlookupresults>();
         
         var pdsicseccustprodlookup = new pdsicseccustprodlookupDataSet();
            
         DataRow ttblicseccustprodlookupcriteriaCriteria = pdsicseccustprodlookup.ttblicseccustprodlookupcriteria.NewttblicseccustprodlookupcriteriaRow();
         Icseccustprodlookupcriteria.UpdateRowFromIcseccustprodlookupcriteria(ref ttblicseccustprodlookupcriteriaCriteria, icseccustprodlookupcriteria);
         pdsicseccustprodlookup.ttblicseccustprodlookupcriteria.AddttblicseccustprodlookupcriteriaRow((pdsicseccustprodlookupDataSet.ttblicseccustprodlookupcriteriaRow)ttblicseccustprodlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LookupCustomerProduct - Icsec - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                   this.SetRequiredContextParameters();
                   poIcsecproxy.LookupCustomerProduct(ref pdsContext, ref pdsicseccustprodlookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LookupCustomerProduct - Icsec - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicseccustprodlookup); 
    
            foreach (DataRow row in pdsicseccustprodlookup.ttblicseccustprodlookupresults)
            {
                results.Add(Icseccustprodlookupresults.BuildIcseccustprodlookupresultsFromRow(row));
            }
            return results;
        
      }

      public IcsecLookupReferenceResponseAPI LookupReference(Icxrefreferlookupcriteria icxrefreferlookupcriteria)
      {   
         var result = new IcsecLookupReferenceResponseAPI();
         
         var pdsicxrefreferlookup = new pdsicxrefreferlookupDataSet();
            
         DataRow ttblicxrefreferlookupcriteriaCriteria = pdsicxrefreferlookup.ttblicxrefreferlookupcriteria.NewttblicxrefreferlookupcriteriaRow();
         Icxrefreferlookupcriteria.UpdateRowFromIcxrefreferlookupcriteria(ref ttblicxrefreferlookupcriteriaCriteria, icxrefreferlookupcriteria);
         pdsicxrefreferlookup.ttblicxrefreferlookupcriteria.AddttblicxrefreferlookupcriteriaRow((pdsicxrefreferlookupDataSet.ttblicxrefreferlookupcriteriaRow)ttblicxrefreferlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LookupReference - Icsec - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                   this.SetRequiredContextParameters();
                   poIcsecproxy.LookupReference(ref pdsContext, ref pdsicxrefreferlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LookupReference - Icsec - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicxrefreferlookup); 
    
         foreach (DataRow row in pdsicxrefreferlookup.ttblicxrefreferlookupresults)
         {
            result.icxrefreferlookupresults.Add(Icxrefreferlookupresults.BuildIcxrefreferlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IcsecLookupCustomerReferenceResponseAPI LookupCustomerReference(Icxrefcustlookupcriteria icxrefcustlookupcriteria)
      {   
         var result = new IcsecLookupCustomerReferenceResponseAPI();
         
         var pdsicxrefcustlookup = new pdsicxrefcustlookupDataSet();
            
         DataRow ttblicxrefcustlookupcriteriaCriteria = pdsicxrefcustlookup.ttblicxrefcustlookupcriteria.NewttblicxrefcustlookupcriteriaRow();
         Icxrefcustlookupcriteria.UpdateRowFromIcxrefcustlookupcriteria(ref ttblicxrefcustlookupcriteriaCriteria, icxrefcustlookupcriteria);
         pdsicxrefcustlookup.ttblicxrefcustlookupcriteria.AddttblicxrefcustlookupcriteriaRow((pdsicxrefcustlookupDataSet.ttblicxrefcustlookupcriteriaRow)ttblicxrefcustlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LookupCustomerReference - Icsec - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                   this.SetRequiredContextParameters();
                   poIcsecproxy.LookupCustomerReference(ref pdsContext, ref pdsicxrefcustlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LookupCustomerReference - Icsec - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicxrefcustlookup); 
    
         foreach (DataRow row in pdsicxrefcustlookup.ttblicxrefcustlookupresults)
         {
            result.icxrefcustlookupresults.Add(Icxrefcustlookupresults.BuildIcxrefcustlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IcsecLookupVendorReferenceResponseAPI LookupVendorReference(Icxrefvendlookupcriteria icxrefvendlookupcriteria)
      {   
         var result = new IcsecLookupVendorReferenceResponseAPI();
         
         var pdsicxrefvendlookup = new pdsicxrefvendlookupDataSet();
            
         DataRow ttblicxrefvendlookupcriteriaCriteria = pdsicxrefvendlookup.ttblicxrefvendlookupcriteria.NewttblicxrefvendlookupcriteriaRow();
         Icxrefvendlookupcriteria.UpdateRowFromIcxrefvendlookupcriteria(ref ttblicxrefvendlookupcriteriaCriteria, icxrefvendlookupcriteria);
         pdsicxrefvendlookup.ttblicxrefvendlookupcriteria.AddttblicxrefvendlookupcriteriaRow((pdsicxrefvendlookupDataSet.ttblicxrefvendlookupcriteriaRow)ttblicxrefvendlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LookupVendorReference - Icsec - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                   this.SetRequiredContextParameters();
                   poIcsecproxy.LookupVendorReference(ref pdsContext, ref pdsicxrefvendlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LookupVendorReference - Icsec - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicxrefvendlookup); 
    
         foreach (DataRow row in pdsicxrefvendlookup.ttblicxrefvendlookupresults)
         {
            result.icxrefvendlookupresults.Add(Icxrefvendlookupresults.BuildIcxrefvendlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IcsecLookupNonStockInventoryResponseAPI LookupNonStockInventory(Nsinvhdrlookupcriteria nsinvhdrlookupcriteria)
      {   
         var result = new IcsecLookupNonStockInventoryResponseAPI();
         
         var pdsnsinvhdrlookup = new pdsnsinvhdrlookupDataSet();
            
         DataRow ttblnsinvhdrlookupcriteriaCriteria = pdsnsinvhdrlookup.ttblnsinvhdrlookupcriteria.NewttblnsinvhdrlookupcriteriaRow();
         Nsinvhdrlookupcriteria.UpdateRowFromNsinvhdrlookupcriteria(ref ttblnsinvhdrlookupcriteriaCriteria, nsinvhdrlookupcriteria);
         pdsnsinvhdrlookup.ttblnsinvhdrlookupcriteria.AddttblnsinvhdrlookupcriteriaRow((pdsnsinvhdrlookupDataSet.ttblnsinvhdrlookupcriteriaRow)ttblnsinvhdrlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LookupNonStockInventory - Icsec - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poIcsecproxy = this.proxyAppObject.CreatePO_icsecproxy())
               {
                   this.SetRequiredContextParameters();
                   poIcsecproxy.LookupNonStockInventory(ref pdsContext, ref pdsnsinvhdrlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LookupNonStockInventory - Icsec - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsnsinvhdrlookup); 
    
         foreach (DataRow row in pdsnsinvhdrlookup.ttblnsinvhdrlookupresults)
         {
            result.nsinvhdrlookupresults.Add(Nsinvhdrlookupresults.BuildNsinvhdrlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  