//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Adapters
{
   using com.infor.sxproxy.icproxy;
   using com.infor.sxproxy.icproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsiclotcutresults;
   using Models.Pdsicentrylots;
   using Models.Pdsiclotcutentry;
   using Models.Pdsmessaging;
   using Models.Pdsiclotcutlist;
   using Models.Pdsicebbuildprodlist;
   using Models.Pdsiceantransactions;
   using Models.Pdsiceanchgbinloccheck;
   using Models.Pdsiceanupdatebinloc;
   using Models.Pdsiceandetailtrans;
   using Models.Pdsiceanmaintretrieve;
   using Models.Pdsicemcupdate;
   using Models.Pdsiceanmaintupdate;
   using Models.Pdsiceanmaintmassupdate;
   using Models.Pdsiceanmaintinventory;
   using Models.Pdsicepadisplayqtys;
   using Models.Pdsprintersettings;
   using Models.Pdsicentrylotsgridinfo;
   using Models.Pdsicentrylotscreate;
   using Models.Pdsicentrylotssaveresponses;
   using Models.Pdsicentryserials;
   using Models.Pdsicentryserialsgridinfo;
   using Models.Pdsicentryserialscreate;
   using Models.Pdsicentryserialssaveresponses;
   using Models.Pdsicserialstripcriteria;
   using Models.Pdsicserialstripresults;
   using Models.Pdsicepaupdate;
   using Models.Pdsicsepssi;
   using Models.Pdsicepeaddproduct;
   using Models.Pdsicset;
   using Models.Pdsicepeload;
   using Models.Pdsicepeserlotinit;
   using Models.Pdsicepelots;
   using Models.Pdsicepequickcntentry;
   using Models.Pdsicepequickcntleave;
   using Models.Pdsicepequickcntupdate;
   using Models.Pdsicepesavecriteria;
   using Models.Pdsicepeserials;
   using Models.Pdsicepeserialactions;
   using Models.Pdsbuildunavailtt;
   using Models.Pdsiceucheckserlot;
   using Models.Pdsiceuloaddetails;
   using Models.Pdsiceuremoveunavail;
   using Models.Pdsiceuupdate;
   using Models.Pdsicrunnumberlookup;
   using Models.Pdsiceandefaultoffsetacct;
   using Models.Pdsicembsearchupdate;
   using Models.Pdsicembfield;
   using Models.Pdsicembvalue;
   using Models.Pdsicearbuildlistcriteria;
   using Models.Pdsicearbuildlistresults;
   using Models.Pdsicearrowcriteria;
   using Models.Pdsicearsingle;
   using Models.Pdsicearupdate;
   using Models.Pdsicewupdate;
   using Models.Pdsiceaacriteria;
   using Models.Pdsiceaaresults;
   using Models.Pdsiceaadetail;
   using Models.Pdsiceamdetail;
   using Models.Pdsiceamload;
   using Models.Pdsiceavload;
   using Models.Pdsiceavdetail;
   using Models.Complex;

   public partial class AsicentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private ICProxyAppObject proxyAppObject;
      
      public AsicentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ICProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsicentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Lotcutresults> ICGetLotCutData(AsicentryICGetLotCutDataRequestAPI AsicentryICGetLotCutDataRequestAPI)
      {   
         var results = new List<Lotcutresults>();
         
         var pdsiclotcutresults = new pdsiclotcutresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cWhse = AsicentryICGetLotCutDataRequestAPI.cWhse;
            
         var  cProd = AsicentryICGetLotCutDataRequestAPI.cProd;
            
         var  cLotno = AsicentryICGetLotCutDataRequestAPI.cLotno;
            
         
         NLogLoggerP.Trace("ICGetLotCutData - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICGetLotCutData(ref pdsContext,  cWhse,  cProd,  cLotno, out pdsiclotcutresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICGetLotCutData - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutresults); 
    
            foreach (DataRow row in pdsiclotcutresults.ttbllotcutresults)
            {
                results.Add(Lotcutresults.BuildLotcutresultsFromRow(row));
            }
            return results;
        
      }

      public AsicentryICLotCutEntryInitializeResponseAPI ICLotCutEntryInitialize(AsicentryICLotCutEntryInitializeRequestAPI AsicentryICLotCutEntryInitializeRequestAPI)
      {   
         var result = new AsicentryICLotCutEntryInitializeResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsiclotcutentry = new pdsiclotcutentryDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICLotCutEntryInitializeRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICLotCutEntryInitializeRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         var  cLotno = AsicentryICLotCutEntryInitializeRequestAPI.cLotno;
            
         
         NLogLoggerP.Trace("ICLotCutEntryInitialize - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICLotCutEntryInitialize(ref pdsContext,  cLotno, ref pdsicentrylots, out pdsiclotcutentry, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCutEntryInitialize - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsiclotcutentry.ttbllotcutentry)
         {
            result.lotcutentry.Add(Lotcutentry.BuildLotcutentryFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICLotCutEntryValidateResponseAPI ICLotCutEntryValidate(IEnumerable<Lotcutentry> lotcutentry)
      {   
         var result = new AsicentryICLotCutEntryValidateResponseAPI();
         
         var pdsiclotcutentry = new pdsiclotcutentryDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in lotcutentry)
         {
             DataRow row = pdsiclotcutentry.ttbllotcutentry.NewttbllotcutentryRow();
             Lotcutentry.UpdateRowFromLotcutentry(ref row, obj);
             pdsiclotcutentry.ttbllotcutentry.AddttbllotcutentryRow((pdsiclotcutentryDataSet.ttbllotcutentryRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICLotCutEntryValidate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICLotCutEntryValidate(ref pdsContext, ref pdsiclotcutentry, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCutEntryValidate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutentry); 
    
         foreach (DataRow row in pdsiclotcutentry.ttbllotcutentry)
         {
            result.lotcutentry.Add(Lotcutentry.BuildLotcutentryFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Lotcutlist> ICLotCutSelectInit(AsicentryICLotCutSelectInitRequestAPI AsicentryICLotCutSelectInitRequestAPI)
      {   
         var results = new List<Lotcutlist>();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsiclotcutlist = new pdsiclotcutlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICLotCutSelectInitRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICLotCutSelectInitRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         var  lSelectedOnlyFl = AsicentryICLotCutSelectInitRequestAPI.lSelectedOnlyFl;
            
         
         NLogLoggerP.Trace("ICLotCutSelectInit - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICLotCutSelectInit(ref pdsContext,  lSelectedOnlyFl,  pdsicentrylots, out pdsiclotcutlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCutSelectInit - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
            foreach (DataRow row in pdsiclotcutlist.ttbllotcutlist)
            {
                results.Add(Lotcutlist.BuildLotcutlistFromRow(row));
            }
            return results;
        
      }

      public AsicentryICLotCutSelectUpdateResponseAPI ICLotCutSelectUpdate(AsicentryICLotCutSelectUpdateRequestAPI AsicentryICLotCutSelectUpdateRequestAPI)
      {   
         var result = new AsicentryICLotCutSelectUpdateResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsiclotcutlist = new pdsiclotcutlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICLotCutSelectUpdateRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
         Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, AsicentryICLotCutSelectUpdateRequestAPI.icentrylotslist);
         pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
          
         foreach (var obj in AsicentryICLotCutSelectUpdateRequestAPI.lotcutlist)
         {
            DataRow ttbllotcutlistRow = pdsiclotcutlist.ttbllotcutlist.NewttbllotcutlistRow();
            Lotcutlist.UpdateRowFromLotcutlist(ref ttbllotcutlistRow, obj);
            pdsiclotcutlist.ttbllotcutlist.AddttbllotcutlistRow((pdsiclotcutlistDataSet.ttbllotcutlistRow)ttbllotcutlistRow);
         }
          
         var  cUpdateType = AsicentryICLotCutSelectUpdateRequestAPI.cUpdateType;
            
         
         NLogLoggerP.Trace("ICLotCutSelectUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICLotCutSelectUpdate(ref pdsContext,  cUpdateType, ref pdsicentrylots, ref pdsiclotcutlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCutSelectUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         if (pdsicentrylots.ttblicentrylotslist.Count > 0)
         {
            result.icentrylotslist = Icentrylotslist.BuildIcentrylotslistFromRow(pdsicentrylots.ttblicentrylotslist[0]);
         }
                    
         foreach (DataRow row in pdsiclotcutlist.ttbllotcutlist)
         {
            result.lotcutlist.Add(Lotcutlist.BuildLotcutlistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICLotCutSelectSaveResponseAPI ICLotCutSelectSave(AsicentryICLotCutSelectSaveRequestAPI AsicentryICLotCutSelectSaveRequestAPI)
      {   
         var result = new AsicentryICLotCutSelectSaveResponseAPI();
         
         var pdsiclotcutlist = new pdsiclotcutlistDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICLotCutSelectSaveRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICLotCutSelectSaveRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         foreach (var obj in AsicentryICLotCutSelectSaveRequestAPI.lotcutlist)
         {
            DataRow ttbllotcutlistRow = pdsiclotcutlist.ttbllotcutlist.NewttbllotcutlistRow();
            Lotcutlist.UpdateRowFromLotcutlist(ref ttbllotcutlistRow, obj);
            pdsiclotcutlist.ttbllotcutlist.AddttbllotcutlistRow((pdsiclotcutlistDataSet.ttbllotcutlistRow)ttbllotcutlistRow);
         }
          
         
         NLogLoggerP.Trace("ICLotCutSelectSave - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICLotCutSelectSave(ref pdsContext,  pdsiclotcutlist, ref pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICLotCutSelectSave - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutlist); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Icebbuildprodlistresults> ICEBBuildProdList(Icebbuildprodlistcriteria icebbuildprodlistcriteria)
      {   
         var results = new List<Icebbuildprodlistresults>();
         
         var pdsicebbuildprodlist = new pdsicebbuildprodlistDataSet();
            
         DataRow ttblicebbuildprodlistcriteriaCriteria = pdsicebbuildprodlist.ttblicebbuildprodlistcriteria.NewttblicebbuildprodlistcriteriaRow();
         Icebbuildprodlistcriteria.UpdateRowFromIcebbuildprodlistcriteria(ref ttblicebbuildprodlistcriteriaCriteria, icebbuildprodlistcriteria);
         pdsicebbuildprodlist.ttblicebbuildprodlistcriteria.AddttblicebbuildprodlistcriteriaRow((pdsicebbuildprodlistDataSet.ttblicebbuildprodlistcriteriaRow)ttblicebbuildprodlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEBBuildProdList - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEBBuildProdList(ref pdsContext, ref pdsicebbuildprodlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEBBuildProdList - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicebbuildprodlist); 
    
            foreach (DataRow row in pdsicebbuildprodlist.ttblicebbuildprodlistresults)
            {
                results.Add(Icebbuildprodlistresults.BuildIcebbuildprodlistresultsFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEANTransactionsResponseAPI ICEANTransactions(Iceantransactionscriteria iceantransactionscriteria)
      {   
         var result = new AsicentryICEANTransactionsResponseAPI();
         
         var pdsiceantransactions = new pdsiceantransactionsDataSet();
            
         DataRow ttbliceantransactionscriteriaCriteria = pdsiceantransactions.ttbliceantransactionscriteria.NewttbliceantransactionscriteriaRow();
         Iceantransactionscriteria.UpdateRowFromIceantransactionscriteria(ref ttbliceantransactionscriteriaCriteria, iceantransactionscriteria);
         pdsiceantransactions.ttbliceantransactionscriteria.AddttbliceantransactionscriteriaRow((pdsiceantransactionsDataSet.ttbliceantransactionscriteriaRow)ttbliceantransactionscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANTransactions - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANTransactions(ref pdsContext, ref pdsiceantransactions, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANTransactions - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceantransactions); 
    
         foreach (DataRow row in pdsiceantransactions.ttbliceantransactionsresults)
         {
            result.iceantransactionsresults.Add(Iceantransactionsresults.BuildIceantransactionsresultsFromRow(row));
         }     
         if (pdsiceantransactions.ttbliceantransactionssingle.Count > 0)
         {
            result.iceantransactionssingle = Iceantransactionssingle.BuildIceantransactionssingleFromRow(pdsiceantransactions.ttbliceantransactionssingle[0]);
         }
                    
          
         return result;
          
      }

      public Iceanchgbinloccheckresults ICEANChgBinLocCheck(Iceanchgbinloccheckcriteria iceanchgbinloccheckcriteria)
      {   
         var result = new Iceanchgbinloccheckresults();
         
         var pdsiceanchgbinloccheck = new pdsiceanchgbinloccheckDataSet();
            
         DataRow ttbliceanchgbinloccheckcriteriaCriteria = pdsiceanchgbinloccheck.ttbliceanchgbinloccheckcriteria.NewttbliceanchgbinloccheckcriteriaRow();
         Iceanchgbinloccheckcriteria.UpdateRowFromIceanchgbinloccheckcriteria(ref ttbliceanchgbinloccheckcriteriaCriteria, iceanchgbinloccheckcriteria);
         pdsiceanchgbinloccheck.ttbliceanchgbinloccheckcriteria.AddttbliceanchgbinloccheckcriteriaRow((pdsiceanchgbinloccheckDataSet.ttbliceanchgbinloccheckcriteriaRow)ttbliceanchgbinloccheckcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANChgBinLocCheck - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANChgBinLocCheck(ref pdsContext, ref pdsiceanchgbinloccheck, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANChgBinLocCheck - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanchgbinloccheck); 
    
         if (pdsiceanchgbinloccheck.ttbliceanchgbinloccheckresults.Count > 0) 
         { 
             result = Iceanchgbinloccheckresults.BuildIceanchgbinloccheckresultsFromRow(pdsiceanchgbinloccheck.ttbliceanchgbinloccheckresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Iceanupdatebinloc> ICEANUpdateBinLocation(IEnumerable<Iceanupdatebinloc> iceanupdatebinloc)
      {   
         var results = new List<Iceanupdatebinloc>();
         
         var pdsiceanupdatebinloc = new pdsiceanupdatebinlocDataSet();
            
         foreach (var obj in iceanupdatebinloc)
         {
             DataRow row = pdsiceanupdatebinloc.ttbliceanupdatebinloc.NewttbliceanupdatebinlocRow();
             Iceanupdatebinloc.UpdateRowFromIceanupdatebinloc(ref row, obj);
             pdsiceanupdatebinloc.ttbliceanupdatebinloc.AddttbliceanupdatebinlocRow((pdsiceanupdatebinlocDataSet.ttbliceanupdatebinlocRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANUpdateBinLocation - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANUpdateBinLocation(ref pdsContext, ref pdsiceanupdatebinloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANUpdateBinLocation - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanupdatebinloc); 
    
            foreach (DataRow row in pdsiceanupdatebinloc.ttbliceanupdatebinloc)
            {
                results.Add(Iceanupdatebinloc.BuildIceanupdatebinlocFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEANDetailTransactionsResponseAPI ICEANDetailTransactions(Iceandetailtranscriteria iceandetailtranscriteria)
      {   
         var result = new AsicentryICEANDetailTransactionsResponseAPI();
         
         var pdsiceandetailtrans = new pdsiceandetailtransDataSet();
            
         DataRow ttbliceandetailtranscriteriaCriteria = pdsiceandetailtrans.ttbliceandetailtranscriteria.NewttbliceandetailtranscriteriaRow();
         Iceandetailtranscriteria.UpdateRowFromIceandetailtranscriteria(ref ttbliceandetailtranscriteriaCriteria, iceandetailtranscriteria);
         pdsiceandetailtrans.ttbliceandetailtranscriteria.AddttbliceandetailtranscriteriaRow((pdsiceandetailtransDataSet.ttbliceandetailtranscriteriaRow)ttbliceandetailtranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANDetailTransactions - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANDetailTransactions(ref pdsContext, ref pdsiceandetailtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANDetailTransactions - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceandetailtrans); 
    
         foreach (DataRow row in pdsiceandetailtrans.ttbliceandetailtransresults)
         {
            result.iceandetailtransresults.Add(Iceandetailtransresults.BuildIceandetailtransresultsFromRow(row));
         }     
         if (pdsiceandetailtrans.ttbliceandetailtranssingle.Count > 0)
         {
            result.iceandetailtranssingle = Iceandetailtranssingle.BuildIceandetailtranssingleFromRow(pdsiceandetailtrans.ttbliceandetailtranssingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicentryICEANMaintenanceRetrieveResponseAPI ICEANMaintenanceRetrieve(AsicentryICEANMaintenanceRetrieveRequestAPI AsicentryICEANMaintenanceRetrieveRequestAPI)
      {   
         var result = new AsicentryICEANMaintenanceRetrieveResponseAPI();
         
         var pdsiceanmaintretrieve = new pdsiceanmaintretrieveDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEANMaintenanceRetrieveRequestAPI.iceanmaintretrieveoperation)
         {
            DataRow ttbliceanmaintretrieveoperationRow = pdsiceanmaintretrieve.ttbliceanmaintretrieveoperation.NewttbliceanmaintretrieveoperationRow();
            Iceanmaintretrieveoperation.UpdateRowFromIceanmaintretrieveoperation(ref ttbliceanmaintretrieveoperationRow, obj);
            pdsiceanmaintretrieve.ttbliceanmaintretrieveoperation.AddttbliceanmaintretrieveoperationRow((pdsiceanmaintretrieveDataSet.ttbliceanmaintretrieveoperationRow)ttbliceanmaintretrieveoperationRow);
         }
          
         foreach (var obj in AsicentryICEANMaintenanceRetrieveRequestAPI.iceanmaintretrievetrans)
         {
            DataRow ttbliceanmaintretrievetransRow = pdsiceanmaintretrieve.ttbliceanmaintretrievetrans.NewttbliceanmaintretrievetransRow();
            Iceanmaintretrievetrans.UpdateRowFromIceanmaintretrievetrans(ref ttbliceanmaintretrievetransRow, obj);
            pdsiceanmaintretrieve.ttbliceanmaintretrievetrans.AddttbliceanmaintretrievetransRow((pdsiceanmaintretrieveDataSet.ttbliceanmaintretrievetransRow)ttbliceanmaintretrievetransRow);
         }
          
         
         NLogLoggerP.Trace("ICEANMaintenanceRetrieve - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANMaintenanceRetrieve(ref pdsContext, ref pdsiceanmaintretrieve, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANMaintenanceRetrieve - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanmaintretrieve); 
    
         if (pdsiceanmaintretrieve.ttbliceanmaintretrievesingle.Count > 0)
         {
            result.iceanmaintretrievesingle = Iceanmaintretrievesingle.BuildIceanmaintretrievesingleFromRow(pdsiceanmaintretrieve.ttbliceanmaintretrievesingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEMCUpdateResponseAPI ICEMCUpdate(Icemcupdatecriteria icemcupdatecriteria)
      {   
         var result = new AsicentryICEMCUpdateResponseAPI();
         
         var pdsicemcupdate = new pdsicemcupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicemcupdatecriteriaCriteria = pdsicemcupdate.ttblicemcupdatecriteria.NewttblicemcupdatecriteriaRow();
         Icemcupdatecriteria.UpdateRowFromIcemcupdatecriteria(ref ttblicemcupdatecriteriaCriteria, icemcupdatecriteria);
         pdsicemcupdate.ttblicemcupdatecriteria.AddttblicemcupdatecriteriaRow((pdsicemcupdateDataSet.ttblicemcupdatecriteriaRow)ttblicemcupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEMCUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMCUpdate(ref pdsContext, ref pdsicemcupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEMCUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicemcupdate); 
    
         if (pdsicemcupdate.ttblicemcupdateresults.Count > 0)
         {
            result.icemcupdateresults = Icemcupdateresults.BuildIcemcupdateresultsFromRow(pdsicemcupdate.ttblicemcupdateresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEANMaintenanceUpdate(AsicentryICEANMaintenanceUpdateRequestAPI AsicentryICEANMaintenanceUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsiceanmaintupdate = new pdsiceanmaintupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEANMaintenanceUpdateRequestAPI.iceanmaintupdateglaccts)
         {
            DataRow ttbliceanmaintupdateglacctsRow = pdsiceanmaintupdate.ttbliceanmaintupdateglaccts.NewttbliceanmaintupdateglacctsRow();
            Iceanmaintupdateglaccts.UpdateRowFromIceanmaintupdateglaccts(ref ttbliceanmaintupdateglacctsRow, obj);
            pdsiceanmaintupdate.ttbliceanmaintupdateglaccts.AddttbliceanmaintupdateglacctsRow((pdsiceanmaintupdateDataSet.ttbliceanmaintupdateglacctsRow)ttbliceanmaintupdateglacctsRow);
         }
          
         foreach (var obj in AsicentryICEANMaintenanceUpdateRequestAPI.iceanmaintupdateoperation)
         {
            DataRow ttbliceanmaintupdateoperationRow = pdsiceanmaintupdate.ttbliceanmaintupdateoperation.NewttbliceanmaintupdateoperationRow();
            Iceanmaintupdateoperation.UpdateRowFromIceanmaintupdateoperation(ref ttbliceanmaintupdateoperationRow, obj);
            pdsiceanmaintupdate.ttbliceanmaintupdateoperation.AddttbliceanmaintupdateoperationRow((pdsiceanmaintupdateDataSet.ttbliceanmaintupdateoperationRow)ttbliceanmaintupdateoperationRow);
         }
          
         foreach (var obj in AsicentryICEANMaintenanceUpdateRequestAPI.iceanmaintupdatetrans)
         {
            DataRow ttbliceanmaintupdatetransRow = pdsiceanmaintupdate.ttbliceanmaintupdatetrans.NewttbliceanmaintupdatetransRow();
            Iceanmaintupdatetrans.UpdateRowFromIceanmaintupdatetrans(ref ttbliceanmaintupdatetransRow, obj);
            pdsiceanmaintupdate.ttbliceanmaintupdatetrans.AddttbliceanmaintupdatetransRow((pdsiceanmaintupdateDataSet.ttbliceanmaintupdatetransRow)ttbliceanmaintupdatetransRow);
         }
          
         
         NLogLoggerP.Trace("ICEANMaintenanceUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANMaintenanceUpdate(ref pdsContext, ref pdsiceanmaintupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANMaintenanceUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanmaintupdate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Iceanmaintmassupdatesingle ICEANMaintenanceMassUpdate(Iceanmaintmassupdatesingle iceanmaintmassupdatesingle)
      {   
         var result = new Iceanmaintmassupdatesingle();
         
         var pdsiceanmaintmassupdate = new pdsiceanmaintmassupdateDataSet();
            
         DataRow ttbliceanmaintmassupdatesingleCriteria = pdsiceanmaintmassupdate.ttbliceanmaintmassupdatesingle.NewttbliceanmaintmassupdatesingleRow();
         Iceanmaintmassupdatesingle.UpdateRowFromIceanmaintmassupdatesingle(ref ttbliceanmaintmassupdatesingleCriteria, iceanmaintmassupdatesingle);
         pdsiceanmaintmassupdate.ttbliceanmaintmassupdatesingle.AddttbliceanmaintmassupdatesingleRow((pdsiceanmaintmassupdateDataSet.ttbliceanmaintmassupdatesingleRow)ttbliceanmaintmassupdatesingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANMaintenanceMassUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANMaintenanceMassUpdate(ref pdsContext, ref pdsiceanmaintmassupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANMaintenanceMassUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanmaintmassupdate); 
    
         if (pdsiceanmaintmassupdate.ttbliceanmaintmassupdatesingle.Count > 0) 
         { 
             result = Iceanmaintmassupdatesingle.BuildIceanmaintmassupdatesingleFromRow(pdsiceanmaintmassupdate.ttbliceanmaintmassupdatesingle[0]);
         } 
              
          
         return result;
          
      }

      public Iceanmaintinventorysingle ICEANMaintenanceInventory(Iceanmaintinventorycriteria iceanmaintinventorycriteria)
      {   
         var result = new Iceanmaintinventorysingle();
         
         var pdsiceanmaintinventory = new pdsiceanmaintinventoryDataSet();
            
         DataRow ttbliceanmaintinventorycriteriaCriteria = pdsiceanmaintinventory.ttbliceanmaintinventorycriteria.NewttbliceanmaintinventorycriteriaRow();
         Iceanmaintinventorycriteria.UpdateRowFromIceanmaintinventorycriteria(ref ttbliceanmaintinventorycriteriaCriteria, iceanmaintinventorycriteria);
         pdsiceanmaintinventory.ttbliceanmaintinventorycriteria.AddttbliceanmaintinventorycriteriaRow((pdsiceanmaintinventoryDataSet.ttbliceanmaintinventorycriteriaRow)ttbliceanmaintinventorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANMaintenanceInventory - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANMaintenanceInventory(ref pdsContext, ref pdsiceanmaintinventory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANMaintenanceInventory - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanmaintinventory); 
    
         if (pdsiceanmaintinventory.ttbliceanmaintinventorysingle.Count > 0) 
         { 
             result = Iceanmaintinventorysingle.BuildIceanmaintinventorysingleFromRow(pdsiceanmaintinventory.ttbliceanmaintinventorysingle[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEPADisplayQtysResponseAPI ICEPADisplayQtys(Icepadisplayqtyscriteria icepadisplayqtyscriteria)
      {   
         var result = new AsicentryICEPADisplayQtysResponseAPI();
         
         var pdsicepadisplayqtys = new pdsicepadisplayqtysDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicepadisplayqtyscriteriaCriteria = pdsicepadisplayqtys.ttblicepadisplayqtyscriteria.NewttblicepadisplayqtyscriteriaRow();
         Icepadisplayqtyscriteria.UpdateRowFromIcepadisplayqtyscriteria(ref ttblicepadisplayqtyscriteriaCriteria, icepadisplayqtyscriteria);
         pdsicepadisplayqtys.ttblicepadisplayqtyscriteria.AddttblicepadisplayqtyscriteriaRow((pdsicepadisplayqtysDataSet.ttblicepadisplayqtyscriteriaRow)ttblicepadisplayqtyscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPADisplayQtys - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPADisplayQtys(ref pdsContext, ref pdsicepadisplayqtys, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPADisplayQtys - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepadisplayqtys); 
    
         foreach (DataRow row in pdsicepadisplayqtys.ttblicepadisplayqtysresults)
         {
            result.icepadisplayqtysresults.Add(Icepadisplayqtysresults.BuildIcepadisplayqtysresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public void ICEPAJournalPrintLaunch(AsicentryICEPAJournalPrintLaunchRequestAPI AsicentryICEPAJournalPrintLaunchRequestAPI)
      {   
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsicentryICEPAJournalPrintLaunchRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         var  iJrnlNo = AsicentryICEPAJournalPrintLaunchRequestAPI.iJrnlNo;
            
         
         NLogLoggerP.Trace("ICEPAJournalPrintLaunch - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPAJournalPrintLaunch(ref pdsContext,  iJrnlNo,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPAJournalPrintLaunch - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings);
      }

      public AsicentryICEntryLotsAutoAssignResponseAPI ICEntryLotsAutoAssign(AsicentryICEntryLotsAutoAssignRequestAPI AsicentryICEntryLotsAutoAssignRequestAPI)
      {   
         var result = new AsicentryICEntryLotsAutoAssignResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsAutoAssignRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICEntryLotsAutoAssignRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         var  iNumLots = AsicentryICEntryLotsAutoAssignRequestAPI.iNumLots;
            
         var  dTotQtyRcv = AsicentryICEntryLotsAutoAssignRequestAPI.dTotQtyRcv;
            
         
         NLogLoggerP.Trace("ICEntryLotsAutoAssign - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsAutoAssign(ref pdsContext,  iNumLots,  dTotQtyRcv, ref pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsAutoAssign - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntryLotsInitResponseAPI ICEntryLotsInit(Icentrylotscriteria icentrylotscriteria)
      {   
         var result = new AsicentryICEntryLotsInitResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsicentrylotsgridinfo = new pdsicentrylotsgridinfoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicentrylotscriteriaCriteria = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaCriteria, icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEntryLotsInit - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsInit(ref pdsContext, ref pdsicentrylots, out pdsicentrylotsgridinfo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsInit - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsicentrylotsgridinfo.ttblicentrylotsgridinfo)
         {
            result.icentrylotsgridinfo.Add(Icentrylotsgridinfo.BuildIcentrylotsgridinfoFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntryLotsOldestResponseAPI ICEntryLotsOldest(AsicentryICEntryLotsOldestRequestAPI AsicentryICEntryLotsOldestRequestAPI)
      {   
         var result = new AsicentryICEntryLotsOldestResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsOldestRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICEntryLotsOldestRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntryLotsOldest - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsOldest(ref pdsContext, ref pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsOldest - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEntryLotsOldestCheck(AsicentryICEntryLotsOldestCheckRequestAPI AsicentryICEntryLotsOldestCheckRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsOldestCheckRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         var  lInit = AsicentryICEntryLotsOldestCheckRequestAPI.lInit;
            
         
         NLogLoggerP.Trace("ICEntryLotsOldestCheck - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsOldestCheck(ref pdsContext,  lInit,  pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsOldestCheck - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEntryLotsRowCreateResponseAPI ICEntryLotsRowCreate(AsicentryICEntryLotsRowCreateRequestAPI AsicentryICEntryLotsRowCreateRequestAPI)
      {   
         var result = new AsicentryICEntryLotsRowCreateResponseAPI();
         
         var pdsicentrylotscreate = new pdsicentrylotscreateDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscreateRow = pdsicentrylotscreate.ttblicentrylotscreate.NewttblicentrylotscreateRow();
         Icentrylotscreate.UpdateRowFromIcentrylotscreate(ref ttblicentrylotscreateRow, AsicentryICEntryLotsRowCreateRequestAPI.icentrylotscreate);
         pdsicentrylotscreate.ttblicentrylotscreate.AddttblicentrylotscreateRow((pdsicentrylotscreateDataSet.ttblicentrylotscreateRow)ttblicentrylotscreateRow);
          
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsRowCreateRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICEntryLotsRowCreateRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntryLotsRowCreate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsRowCreate(ref pdsContext,  pdsicentrylotscreate, ref pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsRowCreate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylotscreate); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntryLotsRowUpdateResponseAPI ICEntryLotsRowUpdate(AsicentryICEntryLotsRowUpdateRequestAPI AsicentryICEntryLotsRowUpdateRequestAPI)
      {   
         var result = new AsicentryICEntryLotsRowUpdateResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsRowUpdateRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICEntryLotsRowUpdateRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         var  cUpdateType = AsicentryICEntryLotsRowUpdateRequestAPI.cUpdateType;
            
         
         NLogLoggerP.Trace("ICEntryLotsRowUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsRowUpdate(ref pdsContext,  cUpdateType, ref pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsRowUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntryLotsSaveAllResponseAPI ICEntryLotsSaveAll(AsicentryICEntryLotsSaveAllRequestAPI AsicentryICEntryLotsSaveAllRequestAPI)
      {   
         var result = new AsicentryICEntryLotsSaveAllResponseAPI();
         
         var pdsicentrylotssaveresponses = new pdsicentrylotssaveresponsesDataSet();
            
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsiclotcutentry = new pdsiclotcutentryDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lSuccess = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsicentryICEntryLotsSaveAllRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsicentryICEntryLotsSaveAllRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         DataRow ttblicentrylotssaveresponsesRow = pdsicentrylotssaveresponses.ttblicentrylotssaveresponses.NewttblicentrylotssaveresponsesRow();
         Icentrylotssaveresponses.UpdateRowFromIcentrylotssaveresponses(ref ttblicentrylotssaveresponsesRow, AsicentryICEntryLotsSaveAllRequestAPI.icentrylotssaveresponses);
         pdsicentrylotssaveresponses.ttblicentrylotssaveresponses.AddttblicentrylotssaveresponsesRow((pdsicentrylotssaveresponsesDataSet.ttblicentrylotssaveresponsesRow)ttblicentrylotssaveresponsesRow);
          
         foreach (var obj in AsicentryICEntryLotsSaveAllRequestAPI.lotcutentry)
         {
            DataRow ttbllotcutentryRow = pdsiclotcutentry.ttbllotcutentry.NewttbllotcutentryRow();
            Lotcutentry.UpdateRowFromLotcutentry(ref ttbllotcutentryRow, obj);
            pdsiclotcutentry.ttbllotcutentry.AddttbllotcutentryRow((pdsiclotcutentryDataSet.ttbllotcutentryRow)ttbllotcutentryRow);
         }
          
         
         NLogLoggerP.Trace("ICEntryLotsSaveAll - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsSaveAll(ref pdsContext,  pdsicentrylotssaveresponses, ref pdsicentrylots,  pdsiclotcutentry, out lSuccess, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsSaveAll - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylotssaveresponses); 
    
         if (pdsicentrylots.ttblicentrylotscriteria.Count > 0)
         {
            result.icentrylotscriteria = Icentrylotscriteria.BuildIcentrylotscriteriaFromRow(pdsicentrylots.ttblicentrylotscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentrylots.ttblicentrylotslist)
         {
            result.icentrylotslist.Add(Icentrylotslist.BuildIcentrylotslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lSuccess = lSuccess;
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEntryLotsSaveAllCheck(Icentrylotscriteria icentrylotscriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicentrylotscriteriaCriteria = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaCriteria, icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEntryLotsSaveAllCheck - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntryLotsSaveAllCheck(ref pdsContext,  pdsicentrylots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntryLotsSaveAllCheck - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEntrySerialsInitResponseAPI ICEntrySerialsInit(AsicentryICEntrySerialsInitRequestAPI AsicentryICEntrySerialsInitRequestAPI)
      {   
         var result = new AsicentryICEntrySerialsInitResponseAPI();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsicentryserialsgridinfo = new pdsicentryserialsgridinfoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsInitRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsInitRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntrySerialsInit - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsInit(ref pdsContext, ref pdsicentryserials, out pdsicentryserialsgridinfo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsInit - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
         foreach (DataRow row in pdsicentryserialsgridinfo.ttblicentryserialsgridinfo)
         {
            result.icentryserialsgridinfo.Add(Icentryserialsgridinfo.BuildIcentryserialsgridinfoFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntrySerialsOldestResponseAPI ICEntrySerialsOldest(AsicentryICEntrySerialsOldestRequestAPI AsicentryICEntrySerialsOldestRequestAPI)
      {   
         var result = new AsicentryICEntrySerialsOldestResponseAPI();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsOldestRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsOldestRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntrySerialsOldest - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsOldest(ref pdsContext, ref pdsicentryserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsOldest - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEntrySerialsOldestCheck(AsicentryICEntrySerialsOldestCheckRequestAPI AsicentryICEntrySerialsOldestCheckRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsOldestCheckRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsOldestCheckRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntrySerialsOldestCheck - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsOldestCheck(ref pdsContext,  pdsicentryserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsOldestCheck - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEntrySerialsRowCreateResponseAPI ICEntrySerialsRowCreate(AsicentryICEntrySerialsRowCreateRequestAPI AsicentryICEntrySerialsRowCreateRequestAPI)
      {   
         var result = new AsicentryICEntrySerialsRowCreateResponseAPI();
         
         var pdsicentryserialscreate = new pdsicentryserialscreateDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscreateRow = pdsicentryserialscreate.ttblicentryserialscreate.NewttblicentryserialscreateRow();
         Icentryserialscreate.UpdateRowFromIcentryserialscreate(ref ttblicentryserialscreateRow, AsicentryICEntrySerialsRowCreateRequestAPI.icentryserialscreate);
         pdsicentryserialscreate.ttblicentryserialscreate.AddttblicentryserialscreateRow((pdsicentryserialscreateDataSet.ttblicentryserialscreateRow)ttblicentryserialscreateRow);
          
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsRowCreateRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsRowCreateRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntrySerialsRowCreate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsRowCreate(ref pdsContext,  pdsicentryserialscreate, ref pdsicentryserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsRowCreate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserialscreate); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntrySerialsRowUpdateResponseAPI ICEntrySerialsRowUpdate(AsicentryICEntrySerialsRowUpdateRequestAPI AsicentryICEntrySerialsRowUpdateRequestAPI)
      {   
         var result = new AsicentryICEntrySerialsRowUpdateResponseAPI();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsRowUpdateRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsRowUpdateRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         var  cUpdateType = AsicentryICEntrySerialsRowUpdateRequestAPI.cUpdateType;
            
         
         NLogLoggerP.Trace("ICEntrySerialsRowUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsRowUpdate(ref pdsContext,  cUpdateType, ref pdsicentryserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsRowUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEntrySerialsSaveAllResponseAPI ICEntrySerialsSaveAll(AsicentryICEntrySerialsSaveAllRequestAPI AsicentryICEntrySerialsSaveAllRequestAPI)
      {   
         var result = new AsicentryICEntrySerialsSaveAllResponseAPI();
         
         var pdsicentryserialssaveresponses = new pdsicentryserialssaveresponsesDataSet();
            
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lSuccess = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsSaveAllRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsSaveAllRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         DataRow ttblicentryserialssaveresponsesRow = pdsicentryserialssaveresponses.ttblicentryserialssaveresponses.NewttblicentryserialssaveresponsesRow();
         Icentryserialssaveresponses.UpdateRowFromIcentryserialssaveresponses(ref ttblicentryserialssaveresponsesRow, AsicentryICEntrySerialsSaveAllRequestAPI.icentryserialssaveresponses);
         pdsicentryserialssaveresponses.ttblicentryserialssaveresponses.AddttblicentryserialssaveresponsesRow((pdsicentryserialssaveresponsesDataSet.ttblicentryserialssaveresponsesRow)ttblicentryserialssaveresponsesRow);
          
         
         NLogLoggerP.Trace("ICEntrySerialsSaveAll - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsSaveAll(ref pdsContext,  pdsicentryserialssaveresponses, ref pdsicentryserials, out lSuccess, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsSaveAll - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserialssaveresponses); 
    
         if (pdsicentryserials.ttblicentryserialscriteria.Count > 0)
         {
            result.icentryserialscriteria = Icentryserialscriteria.BuildIcentryserialscriteriaFromRow(pdsicentryserials.ttblicentryserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdsicentryserials.ttblicentryserialslist)
         {
            result.icentryserialslist.Add(Icentryserialslist.BuildIcentryserialslistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lSuccess = lSuccess;
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEntrySerialsSaveAllCheck(AsicentryICEntrySerialsSaveAllCheckRequestAPI AsicentryICEntrySerialsSaveAllCheckRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsicentryICEntrySerialsSaveAllCheckRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsicentryICEntrySerialsSaveAllCheckRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         
         NLogLoggerP.Trace("ICEntrySerialsSaveAllCheck - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsSaveAllCheck(ref pdsContext,  pdsicentryserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsSaveAllCheck - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Icserialstripresults ICEntrySerialsStrip(Icserialstripcriteria icserialstripcriteria)
      {   
         var result = new Icserialstripresults();
         
         var pdsicserialstripcriteria = new pdsicserialstripcriteriaDataSet();
            
         var pdsicserialstripresults = new pdsicserialstripresultsDataSet();
            
         DataRow ttblicserialstripcriteriaCriteria = pdsicserialstripcriteria.ttblicserialstripcriteria.NewttblicserialstripcriteriaRow();
         Icserialstripcriteria.UpdateRowFromIcserialstripcriteria(ref ttblicserialstripcriteriaCriteria, icserialstripcriteria);
         pdsicserialstripcriteria.ttblicserialstripcriteria.AddttblicserialstripcriteriaRow((pdsicserialstripcriteriaDataSet.ttblicserialstripcriteriaRow)ttblicserialstripcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEntrySerialsStrip - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEntrySerialsStrip(ref pdsContext,  pdsicserialstripcriteria, out pdsicserialstripresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEntrySerialsStrip - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicserialstripcriteria); 
    
         if (pdsicserialstripresults.ttblicserialstripresults.Count > 0) 
         { 
             result = Icserialstripresults.BuildIcserialstripresultsFromRow(pdsicserialstripresults.ttblicserialstripresults[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEPAUpdateResponseAPI ICEPAUpdate(AsicentryICEPAUpdateRequestAPI AsicentryICEPAUpdateRequestAPI)
      {   
         var result = new AsicentryICEPAUpdateResponseAPI();
         
         var pdsicepaupdate = new pdsicepaupdateDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicepaupdatecriteriaRow = pdsicepaupdate.ttblicepaupdatecriteria.NewttblicepaupdatecriteriaRow();
         Icepaupdatecriteria.UpdateRowFromIcepaupdatecriteria(ref ttblicepaupdatecriteriaRow, AsicentryICEPAUpdateRequestAPI.icepaupdatecriteria);
         pdsicepaupdate.ttblicepaupdatecriteria.AddttblicepaupdatecriteriaRow((pdsicepaupdateDataSet.ttblicepaupdatecriteriaRow)ttblicepaupdatecriteriaRow);
          
         foreach (var obj in AsicentryICEPAUpdateRequestAPI.icsepssi)
         {
            DataRow ttblicsepssiRow = pdsicsepssi.ttblicsepssi.NewttblicsepssiRow();
            Icsepssi.UpdateRowFromIcsepssi(ref ttblicsepssiRow, obj);
            pdsicsepssi.ttblicsepssi.AddttblicsepssiRow((pdsicsepssiDataSet.ttblicsepssiRow)ttblicsepssiRow);
         }
          
         
         NLogLoggerP.Trace("ICEPAUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPAUpdate(ref pdsContext, ref pdsicepaupdate, ref pdsicsepssi, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPAUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepaupdate); 
    
         foreach (DataRow row in pdsicepaupdate.ttblicepaupdateresults)
         {
            result.icepaupdateresults.Add(Icepaupdateresults.BuildIcepaupdateresultsFromRow(row));
         }     
         foreach (DataRow row in pdsicsepssi.ttblicsepssi)
         {
            result.icsepssi.Add(Icsepssi.BuildIcsepssiFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPEAddProductResponseAPI ICEPEAddProduct(Icepeaddproductcriteria icepeaddproductcriteria)
      {   
         var result = new AsicentryICEPEAddProductResponseAPI();
         
         var pdsicepeaddproduct = new pdsicepeaddproductDataSet();
            
         var pdsicset = new pdsicsetDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicepeaddproductcriteriaCriteria = pdsicepeaddproduct.ttblicepeaddproductcriteria.NewttblicepeaddproductcriteriaRow();
         Icepeaddproductcriteria.UpdateRowFromIcepeaddproductcriteria(ref ttblicepeaddproductcriteriaCriteria, icepeaddproductcriteria);
         pdsicepeaddproduct.ttblicepeaddproductcriteria.AddttblicepeaddproductcriteriaRow((pdsicepeaddproductDataSet.ttblicepeaddproductcriteriaRow)ttblicepeaddproductcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPEAddProduct - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEAddProduct(ref pdsContext,  pdsicepeaddproduct, out pdsicset, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEAddProduct - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeaddproduct); 
    
         if (pdsicset.ttblicset.Count > 0)
         {
            result.icset = Icset.BuildIcsetFromRow(pdsicset.ttblicset[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICEPEAddProductValidate(Icepeaddproductcriteria icepeaddproductcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsicepeaddproduct = new pdsicepeaddproductDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicepeaddproductcriteriaCriteria = pdsicepeaddproduct.ttblicepeaddproductcriteria.NewttblicepeaddproductcriteriaRow();
         Icepeaddproductcriteria.UpdateRowFromIcepeaddproductcriteria(ref ttblicepeaddproductcriteriaCriteria, icepeaddproductcriteria);
         pdsicepeaddproduct.ttblicepeaddproductcriteria.AddttblicepeaddproductcriteriaRow((pdsicepeaddproductDataSet.ttblicepeaddproductcriteriaRow)ttblicepeaddproductcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPEAddProductValidate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEAddProductValidate(ref pdsContext,  pdsicepeaddproduct, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEAddProductValidate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeaddproduct); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEPELoadResponseAPI ICEPELoad(string cWhse, int iRunno, string cDisplayTy)
      {   
         var result = new AsicentryICEPELoadResponseAPI();
         
         var pdsicepeload = new pdsicepeloadDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPELoad - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPELoad(ref pdsContext,  cWhse,  iRunno,  cDisplayTy, out pdsicepeload, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPELoad - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeload); 
    
         foreach (DataRow row in pdsicepeload.ttblicepeloadresults)
         {
            result.icepeloadresults.Add(Icepeloadresults.BuildIcepeloadresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPELotInitResponseAPI ICEPELotInit(AsicentryICEPELotInitRequestAPI AsicentryICEPELotInitRequestAPI)
      {   
         var result = new AsicentryICEPELotInitResponseAPI();
         
         var pdsicepeserlotinit = new pdsicepeserlotinitDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsicepelots = new pdsicepelotsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicepeserlotinitcriteriaRow = pdsicepeserlotinit.ttblicepeserlotinitcriteria.NewttblicepeserlotinitcriteriaRow();
         Icepeserlotinitcriteria.UpdateRowFromIcepeserlotinitcriteria(ref ttblicepeserlotinitcriteriaRow, AsicentryICEPELotInitRequestAPI.icepeserlotinitcriteria);
         pdsicepeserlotinit.ttblicepeserlotinitcriteria.AddttblicepeserlotinitcriteriaRow((pdsicepeserlotinitDataSet.ttblicepeserlotinitcriteriaRow)ttblicepeserlotinitcriteriaRow);
          
         foreach (var obj in AsicentryICEPELotInitRequestAPI.icsepssi)
         {
            DataRow ttblicsepssiRow = pdsicsepssi.ttblicsepssi.NewttblicsepssiRow();
            Icsepssi.UpdateRowFromIcsepssi(ref ttblicsepssiRow, obj);
            pdsicsepssi.ttblicsepssi.AddttblicsepssiRow((pdsicsepssiDataSet.ttblicsepssiRow)ttblicsepssiRow);
         }
          
         
         NLogLoggerP.Trace("ICEPELotInit - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPELotInit(ref pdsContext, ref pdsicepeserlotinit,  pdsicsepssi, out pdsicepelots, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPELotInit - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeserlotinit); 
    
         foreach (DataRow row in pdsicepelots.ttblicepelotmaster)
         {
            result.icepelotmaster.Add(Icepelotmaster.BuildIcepelotmasterFromRow(row));
         }     
         if (pdsicepeserlotinit.ttblicepeserlotinitsingle.Count > 0)
         {
            result.icepeserlotinitsingle = Icepeserlotinitsingle.BuildIcepeserlotinitsingleFromRow(pdsicepeserlotinit.ttblicepeserlotinitsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPELotOKResponseAPI ICEPELotOK(AsicentryICEPELotOKRequestAPI AsicentryICEPELotOKRequestAPI)
      {   
         var result = new AsicentryICEPELotOKResponseAPI();
         
         var pdsicepelots = new pdsicepelotsDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEPELotOKRequestAPI.icepelotmaster)
         {
            DataRow ttblicepelotmasterRow = pdsicepelots.ttblicepelotmaster.NewttblicepelotmasterRow();
            Icepelotmaster.UpdateRowFromIcepelotmaster(ref ttblicepelotmasterRow, obj);
            pdsicepelots.ttblicepelotmaster.AddttblicepelotmasterRow((pdsicepelotsDataSet.ttblicepelotmasterRow)ttblicepelotmasterRow);
         }
          
         var  dProof = AsicentryICEPELotOKRequestAPI.dProof;
            
         var  iRunNo = AsicentryICEPELotOKRequestAPI.iRunNo;
            
         var  lUnavailFl = AsicentryICEPELotOKRequestAPI.lUnavailFl;
            
         
         NLogLoggerP.Trace("ICEPELotOK - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPELotOK(ref pdsContext,  dProof,  iRunNo,  lUnavailFl,  pdsicepelots, out pdsicsepssi, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPELotOK - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepelots); 
    
         foreach (DataRow row in pdsicsepssi.ttblicsepssi)
         {
            result.icsepssi.Add(Icsepssi.BuildIcsepssiFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPEQuickCntLeaveResponseAPI ICEPEQuickCntLeave(AsicentryICEPEQuickCntLeaveRequestAPI AsicentryICEPEQuickCntLeaveRequestAPI)
      {   
         var result = new AsicentryICEPEQuickCntLeaveResponseAPI();
         
         var pdsicepequickcntentry = new pdsicepequickcntentryDataSet();
            
         var pdsicepequickcntleave = new pdsicepequickcntleaveDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEPEQuickCntLeaveRequestAPI.icepequickcntentry)
         {
            DataRow ttblicepequickcntentryRow = pdsicepequickcntentry.ttblicepequickcntentry.NewttblicepequickcntentryRow();
            Icepequickcntentry.UpdateRowFromIcepequickcntentry(ref ttblicepequickcntentryRow, obj);
            pdsicepequickcntentry.ttblicepequickcntentry.AddttblicepequickcntentryRow((pdsicepequickcntentryDataSet.ttblicepequickcntentryRow)ttblicepequickcntentryRow);
         }
          
         var  cWhse = AsicentryICEPEQuickCntLeaveRequestAPI.cWhse;
            
         var  iRunNo = AsicentryICEPEQuickCntLeaveRequestAPI.iRunNo;
            
         var  iTicketNo = AsicentryICEPEQuickCntLeaveRequestAPI.iTicketNo;
            
         
         NLogLoggerP.Trace("ICEPEQuickCntLeave - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEQuickCntLeave(ref pdsContext,  cWhse,  iRunNo,  iTicketNo,  pdsicepequickcntentry, out pdsicepequickcntleave, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEQuickCntLeave - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepequickcntentry); 
    
         if (pdsicepequickcntleave.ttblicepequickcntleavesingle.Count > 0)
         {
            result.icepequickcntleavesingle = Icepequickcntleavesingle.BuildIcepequickcntleavesingleFromRow(pdsicepequickcntleave.ttblicepequickcntleavesingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPEQuickCntOKResponseAPI ICEPEQuickCntOK(AsicentryICEPEQuickCntOKRequestAPI AsicentryICEPEQuickCntOKRequestAPI)
      {   
         var result = new AsicentryICEPEQuickCntOKResponseAPI();
         
         var pdsicepequickcntentry = new pdsicepequickcntentryDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEPEQuickCntOKRequestAPI.icepequickcntentry)
         {
            DataRow ttblicepequickcntentryRow = pdsicepequickcntentry.ttblicepequickcntentry.NewttblicepequickcntentryRow();
            Icepequickcntentry.UpdateRowFromIcepequickcntentry(ref ttblicepequickcntentryRow, obj);
            pdsicepequickcntentry.ttblicepequickcntentry.AddttblicepequickcntentryRow((pdsicepequickcntentryDataSet.ttblicepequickcntentryRow)ttblicepequickcntentryRow);
         }
          
         foreach (var obj in AsicentryICEPEQuickCntOKRequestAPI.icsepssi)
         {
            DataRow ttblicsepssiRow = pdsicsepssi.ttblicsepssi.NewttblicsepssiRow();
            Icsepssi.UpdateRowFromIcsepssi(ref ttblicsepssiRow, obj);
            pdsicsepssi.ttblicsepssi.AddttblicsepssiRow((pdsicsepssiDataSet.ttblicsepssiRow)ttblicsepssiRow);
         }
          
         var  cWhse = AsicentryICEPEQuickCntOKRequestAPI.cWhse;
            
         var  iRunNo = AsicentryICEPEQuickCntOKRequestAPI.iRunNo;
            
         
         NLogLoggerP.Trace("ICEPEQuickCntOK - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEQuickCntOK(ref pdsContext,  cWhse,  iRunNo,  pdsicepequickcntentry, ref pdsicsepssi, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEQuickCntOK - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepequickcntentry); 
    
         foreach (DataRow row in pdsicsepssi.ttblicsepssi)
         {
            result.icsepssi.Add(Icsepssi.BuildIcsepssiFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPEQuickCntUpdateResponseAPI ICEPEQuickCntUpdate(Icepequickcntupdatecriteria icepequickcntupdatecriteria)
      {   
         var result = new AsicentryICEPEQuickCntUpdateResponseAPI();
         
         var pdsicepequickcntupdate = new pdsicepequickcntupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicepequickcntupdatecriteriaCriteria = pdsicepequickcntupdate.ttblicepequickcntupdatecriteria.NewttblicepequickcntupdatecriteriaRow();
         Icepequickcntupdatecriteria.UpdateRowFromIcepequickcntupdatecriteria(ref ttblicepequickcntupdatecriteriaCriteria, icepequickcntupdatecriteria);
         pdsicepequickcntupdate.ttblicepequickcntupdatecriteria.AddttblicepequickcntupdatecriteriaRow((pdsicepequickcntupdateDataSet.ttblicepequickcntupdatecriteriaRow)ttblicepequickcntupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPEQuickCntUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEQuickCntUpdate(ref pdsContext, ref pdsicepequickcntupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEQuickCntUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepequickcntupdate); 
    
         if (pdsicepequickcntupdate.ttblicepequickcntupdatesingle.Count > 0)
         {
            result.icepequickcntupdatesingle = Icepequickcntupdatesingle.BuildIcepequickcntupdatesingleFromRow(pdsicepequickcntupdate.ttblicepequickcntupdatesingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPEQuickCntUpdValidateResponseAPI ICEPEQuickCntUpdValidate(Icepequickcntupdatecriteria icepequickcntupdatecriteria)
      {   
         var result = new AsicentryICEPEQuickCntUpdValidateResponseAPI();
         
         var pdsicepequickcntupdate = new pdsicepequickcntupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicepequickcntupdatecriteriaCriteria = pdsicepequickcntupdate.ttblicepequickcntupdatecriteria.NewttblicepequickcntupdatecriteriaRow();
         Icepequickcntupdatecriteria.UpdateRowFromIcepequickcntupdatecriteria(ref ttblicepequickcntupdatecriteriaCriteria, icepequickcntupdatecriteria);
         pdsicepequickcntupdate.ttblicepequickcntupdatecriteria.AddttblicepequickcntupdatecriteriaRow((pdsicepequickcntupdateDataSet.ttblicepequickcntupdatecriteriaRow)ttblicepequickcntupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPEQuickCntUpdValidate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPEQuickCntUpdValidate(ref pdsContext, ref pdsicepequickcntupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPEQuickCntUpdValidate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepequickcntupdate); 
    
         if (pdsicepequickcntupdate.ttblicepequickcntupdatesingle.Count > 0)
         {
            result.icepequickcntupdatesingle = Icepequickcntupdatesingle.BuildIcepequickcntupdatesingleFromRow(pdsicepequickcntupdate.ttblicepequickcntupdatesingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Icepeloadresults ICEPESave(Icepesavecriteria icepesavecriteria)
      {   
         var result = new Icepeloadresults();
         
         var pdsicepesavecriteria = new pdsicepesavecriteriaDataSet();
            
         var pdsicepeload = new pdsicepeloadDataSet();
            
         DataRow ttblicepesavecriteriaCriteria = pdsicepesavecriteria.ttblicepesavecriteria.NewttblicepesavecriteriaRow();
         Icepesavecriteria.UpdateRowFromIcepesavecriteria(ref ttblicepesavecriteriaCriteria, icepesavecriteria);
         pdsicepesavecriteria.ttblicepesavecriteria.AddttblicepesavecriteriaRow((pdsicepesavecriteriaDataSet.ttblicepesavecriteriaRow)ttblicepesavecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEPESave - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPESave(ref pdsContext,  pdsicepesavecriteria, out pdsicepeload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPESave - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepesavecriteria); 
    
         if (pdsicepeload.ttblicepeloadresults.Count > 0) 
         { 
             result = Icepeloadresults.BuildIcepeloadresultsFromRow(pdsicepeload.ttblicepeloadresults[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEPESerialInitResponseAPI ICEPESerialInit(AsicentryICEPESerialInitRequestAPI AsicentryICEPESerialInitRequestAPI)
      {   
         var result = new AsicentryICEPESerialInitResponseAPI();
         
         var pdsicepeserlotinit = new pdsicepeserlotinitDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsicepeserials = new pdsicepeserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicepeserlotinitcriteriaRow = pdsicepeserlotinit.ttblicepeserlotinitcriteria.NewttblicepeserlotinitcriteriaRow();
         Icepeserlotinitcriteria.UpdateRowFromIcepeserlotinitcriteria(ref ttblicepeserlotinitcriteriaRow, AsicentryICEPESerialInitRequestAPI.icepeserlotinitcriteria);
         pdsicepeserlotinit.ttblicepeserlotinitcriteria.AddttblicepeserlotinitcriteriaRow((pdsicepeserlotinitDataSet.ttblicepeserlotinitcriteriaRow)ttblicepeserlotinitcriteriaRow);
          
         foreach (var obj in AsicentryICEPESerialInitRequestAPI.icsepssi)
         {
            DataRow ttblicsepssiRow = pdsicsepssi.ttblicsepssi.NewttblicsepssiRow();
            Icsepssi.UpdateRowFromIcsepssi(ref ttblicsepssiRow, obj);
            pdsicsepssi.ttblicsepssi.AddttblicsepssiRow((pdsicsepssiDataSet.ttblicsepssiRow)ttblicsepssiRow);
         }
          
         
         NLogLoggerP.Trace("ICEPESerialInit - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPESerialInit(ref pdsContext, ref pdsicepeserlotinit,  pdsicsepssi, out pdsicepeserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPESerialInit - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeserlotinit); 
    
         foreach (DataRow row in pdsicepeserials.ttblicepeserialchanges)
         {
            result.icepeserialchanges.Add(Icepeserialchanges.BuildIcepeserialchangesFromRow(row));
         }     
         foreach (DataRow row in pdsicepeserials.ttblicepeserialmaster)
         {
            result.icepeserialmaster.Add(Icepeserialmaster.BuildIcepeserialmasterFromRow(row));
         }     
         if (pdsicepeserlotinit.ttblicepeserlotinitsingle.Count > 0)
         {
            result.icepeserlotinitsingle = Icepeserlotinitsingle.BuildIcepeserlotinitsingleFromRow(pdsicepeserlotinit.ttblicepeserlotinitsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEPESerialActionsResponseAPI ICEPESerialActions(AsicentryICEPESerialActionsRequestAPI AsicentryICEPESerialActionsRequestAPI)
      {   
         var result = new AsicentryICEPESerialActionsResponseAPI();
         
         var pdsicepeserialactions = new pdsicepeserialactionsDataSet();
            
         var pdsicepeserials = new pdsicepeserialsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEPESerialActionsRequestAPI.icepeserialactions)
         {
            DataRow ttblicepeserialactionsRow = pdsicepeserialactions.ttblicepeserialactions.NewttblicepeserialactionsRow();
            Icepeserialactions.UpdateRowFromIcepeserialactions(ref ttblicepeserialactionsRow, obj);
            pdsicepeserialactions.ttblicepeserialactions.AddttblicepeserialactionsRow((pdsicepeserialactionsDataSet.ttblicepeserialactionsRow)ttblicepeserialactionsRow);
         }
          
         foreach (var obj in AsicentryICEPESerialActionsRequestAPI.icepeserialchanges)
         {
            DataRow ttblicepeserialchangesRow = pdsicepeserials.ttblicepeserialchanges.NewttblicepeserialchangesRow();
            Icepeserialchanges.UpdateRowFromIcepeserialchanges(ref ttblicepeserialchangesRow, obj);
            pdsicepeserials.ttblicepeserialchanges.AddttblicepeserialchangesRow((pdsicepeserialsDataSet.ttblicepeserialchangesRow)ttblicepeserialchangesRow);
         }
          
         foreach (var obj in AsicentryICEPESerialActionsRequestAPI.icepeserialmaster)
         {
            DataRow ttblicepeserialmasterRow = pdsicepeserials.ttblicepeserialmaster.NewttblicepeserialmasterRow();
            Icepeserialmaster.UpdateRowFromIcepeserialmaster(ref ttblicepeserialmasterRow, obj);
            pdsicepeserials.ttblicepeserialmaster.AddttblicepeserialmasterRow((pdsicepeserialsDataSet.ttblicepeserialmasterRow)ttblicepeserialmasterRow);
         }
          
         var  cAction = AsicentryICEPESerialActionsRequestAPI.cAction;
            
         var  dProof = AsicentryICEPESerialActionsRequestAPI.dProof;
            
         
         NLogLoggerP.Trace("ICEPESerialActions - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPESerialActions(ref pdsContext,  cAction,  pdsicepeserialactions, ref dProof, ref pdsicepeserials, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPESerialActions - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeserialactions); 
    
         foreach (DataRow row in pdsicepeserials.ttblicepeserialchanges)
         {
            result.icepeserialchanges.Add(Icepeserialchanges.BuildIcepeserialchangesFromRow(row));
         }     
         foreach (DataRow row in pdsicepeserials.ttblicepeserialmaster)
         {
            result.icepeserialmaster.Add(Icepeserialmaster.BuildIcepeserialmasterFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.dProof = dProof;
          
         return result;
          
      }

      public AsicentryICEPESerialOKResponseAPI ICEPESerialOK(AsicentryICEPESerialOKRequestAPI AsicentryICEPESerialOKRequestAPI)
      {   
         var result = new AsicentryICEPESerialOKResponseAPI();
         
         var pdsicepeserials = new pdsicepeserialsDataSet();
            
         var pdsicsepssi = new pdsicsepssiDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicentryICEPESerialOKRequestAPI.icepeserialchanges)
         {
            DataRow ttblicepeserialchangesRow = pdsicepeserials.ttblicepeserialchanges.NewttblicepeserialchangesRow();
            Icepeserialchanges.UpdateRowFromIcepeserialchanges(ref ttblicepeserialchangesRow, obj);
            pdsicepeserials.ttblicepeserialchanges.AddttblicepeserialchangesRow((pdsicepeserialsDataSet.ttblicepeserialchangesRow)ttblicepeserialchangesRow);
         }
          
         foreach (var obj in AsicentryICEPESerialOKRequestAPI.icepeserialmaster)
         {
            DataRow ttblicepeserialmasterRow = pdsicepeserials.ttblicepeserialmaster.NewttblicepeserialmasterRow();
            Icepeserialmaster.UpdateRowFromIcepeserialmaster(ref ttblicepeserialmasterRow, obj);
            pdsicepeserials.ttblicepeserialmaster.AddttblicepeserialmasterRow((pdsicepeserialsDataSet.ttblicepeserialmasterRow)ttblicepeserialmasterRow);
         }
          
         var  dProof = AsicentryICEPESerialOKRequestAPI.dProof;
            
         
         NLogLoggerP.Trace("ICEPESerialOK - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEPESerialOK(ref pdsContext,  dProof,  pdsicepeserials, out pdsicsepssi, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEPESerialOK - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicepeserials); 
    
         foreach (DataRow row in pdsicsepssi.ttblicsepssi)
         {
            result.icsepssi.Add(Icsepssi.BuildIcsepssiFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Buildunavailttresults> BuildUnavailableTT(Buildunavailttcriteria buildunavailttcriteria)
      {   
         var results = new List<Buildunavailttresults>();
         
         var pdsbuildunavailtt = new pdsbuildunavailttDataSet();
            
         DataRow ttblbuildunavailttcriteriaCriteria = pdsbuildunavailtt.ttblbuildunavailttcriteria.NewttblbuildunavailttcriteriaRow();
         Buildunavailttcriteria.UpdateRowFromBuildunavailttcriteria(ref ttblbuildunavailttcriteriaCriteria, buildunavailttcriteria);
         pdsbuildunavailtt.ttblbuildunavailttcriteria.AddttblbuildunavailttcriteriaRow((pdsbuildunavailttDataSet.ttblbuildunavailttcriteriaRow)ttblbuildunavailttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("BuildUnavailableTT - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.BuildUnavailableTT(ref pdsContext, ref pdsbuildunavailtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildUnavailableTT - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbuildunavailtt); 
    
            foreach (DataRow row in pdsbuildunavailtt.ttblbuildunavailttresults)
            {
                results.Add(Buildunavailttresults.BuildBuildunavailttresultsFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEUCheckSerLotResponseAPI ICEUCheckSerLot(Iceucheckserlotcriteria iceucheckserlotcriteria)
      {   
         var result = new AsicentryICEUCheckSerLotResponseAPI();
         
         var pdsiceucheckserlot = new pdsiceucheckserlotDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceucheckserlotcriteriaCriteria = pdsiceucheckserlot.ttbliceucheckserlotcriteria.NewttbliceucheckserlotcriteriaRow();
         Iceucheckserlotcriteria.UpdateRowFromIceucheckserlotcriteria(ref ttbliceucheckserlotcriteriaCriteria, iceucheckserlotcriteria);
         pdsiceucheckserlot.ttbliceucheckserlotcriteria.AddttbliceucheckserlotcriteriaRow((pdsiceucheckserlotDataSet.ttbliceucheckserlotcriteriaRow)ttbliceucheckserlotcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEUCheckSerLot - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEUCheckSerLot(ref pdsContext, ref pdsiceucheckserlot, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEUCheckSerLot - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceucheckserlot); 
    
         if (pdsiceucheckserlot.ttbliceucheckserlotsingle.Count > 0)
         {
            result.iceucheckserlotsingle = Iceucheckserlotsingle.BuildIceucheckserlotsingleFromRow(pdsiceucheckserlot.ttbliceucheckserlotsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEULoadDetailsResponseAPI ICEULoadDetails(Iceuloaddetailscriteria iceuloaddetailscriteria)
      {   
         var result = new AsicentryICEULoadDetailsResponseAPI();
         
         var pdsiceuloaddetails = new pdsiceuloaddetailsDataSet();
            
         DataRow ttbliceuloaddetailscriteriaCriteria = pdsiceuloaddetails.ttbliceuloaddetailscriteria.NewttbliceuloaddetailscriteriaRow();
         Iceuloaddetailscriteria.UpdateRowFromIceuloaddetailscriteria(ref ttbliceuloaddetailscriteriaCriteria, iceuloaddetailscriteria);
         pdsiceuloaddetails.ttbliceuloaddetailscriteria.AddttbliceuloaddetailscriteriaRow((pdsiceuloaddetailsDataSet.ttbliceuloaddetailscriteriaRow)ttbliceuloaddetailscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEULoadDetails - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEULoadDetails(ref pdsContext, ref pdsiceuloaddetails, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEULoadDetails - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceuloaddetails); 
    
         if (pdsiceuloaddetails.ttbliceuloaddetailsresults.Count > 0)
         {
            result.iceuloaddetailsresults = Iceuloaddetailsresults.BuildIceuloaddetailsresultsFromRow(pdsiceuloaddetails.ttbliceuloaddetailsresults[0]);
         }
                    
         if (pdsiceuloaddetails.ttbliceuloaddetailssingle.Count > 0)
         {
            result.iceuloaddetailssingle = Iceuloaddetailssingle.BuildIceuloaddetailssingleFromRow(pdsiceuloaddetails.ttbliceuloaddetailssingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicentryICEURemoveUnavailResponseAPI ICEURemoveUnavail(AsicentryICEURemoveUnavailRequestAPI AsicentryICEURemoveUnavailRequestAPI)
      {   
         var result = new AsicentryICEURemoveUnavailResponseAPI();
         
         var pdsiceuremoveunavail = new pdsiceuremoveunavailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbliceuremoveunavailcriteriaRow = pdsiceuremoveunavail.ttbliceuremoveunavailcriteria.NewttbliceuremoveunavailcriteriaRow();
         Iceuremoveunavailcriteria.UpdateRowFromIceuremoveunavailcriteria(ref ttbliceuremoveunavailcriteriaRow, AsicentryICEURemoveUnavailRequestAPI.iceuremoveunavailcriteria);
         pdsiceuremoveunavail.ttbliceuremoveunavailcriteria.AddttbliceuremoveunavailcriteriaRow((pdsiceuremoveunavailDataSet.ttbliceuremoveunavailcriteriaRow)ttbliceuremoveunavailcriteriaRow);
          
         foreach (var obj in AsicentryICEURemoveUnavailRequestAPI.iceuremoveunavaillist)
         {
            DataRow ttbliceuremoveunavaillistRow = pdsiceuremoveunavail.ttbliceuremoveunavaillist.NewttbliceuremoveunavaillistRow();
            Iceuremoveunavaillist.UpdateRowFromIceuremoveunavaillist(ref ttbliceuremoveunavaillistRow, obj);
            pdsiceuremoveunavail.ttbliceuremoveunavaillist.AddttbliceuremoveunavaillistRow((pdsiceuremoveunavailDataSet.ttbliceuremoveunavaillistRow)ttbliceuremoveunavaillistRow);
         }
          
         
         NLogLoggerP.Trace("ICEURemoveUnavail - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEURemoveUnavail(ref pdsContext, ref pdsiceuremoveunavail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEURemoveUnavail - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceuremoveunavail); 
    
         foreach (DataRow row in pdsiceuremoveunavail.ttbliceuremoveunavaillist)
         {
            result.iceuremoveunavaillist.Add(Iceuremoveunavaillist.BuildIceuremoveunavaillistFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEUUpdateResponseAPI ICEUUpdate(Iceuupdatecriteria iceuupdatecriteria)
      {   
         var result = new AsicentryICEUUpdateResponseAPI();
         
         var pdsiceuupdate = new pdsiceuupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceuupdatecriteriaCriteria = pdsiceuupdate.ttbliceuupdatecriteria.NewttbliceuupdatecriteriaRow();
         Iceuupdatecriteria.UpdateRowFromIceuupdatecriteria(ref ttbliceuupdatecriteriaCriteria, iceuupdatecriteria);
         pdsiceuupdate.ttbliceuupdatecriteria.AddttbliceuupdatecriteriaRow((pdsiceuupdateDataSet.ttbliceuupdatecriteriaRow)ttbliceuupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEUUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEUUpdate(ref pdsContext, ref pdsiceuupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEUUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceuupdate); 
    
         foreach (DataRow row in pdsiceuupdate.ttbliceuupdateresults)
         {
            result.iceuupdateresults.Add(Iceuupdateresults.BuildIceuupdateresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Icrunnumberlookupresults> ICRunNumberLookup(Icrunnumberlookupcriteria icrunnumberlookupcriteria)
      {   
         var results = new List<Icrunnumberlookupresults>();
         
         var pdsicrunnumberlookup = new pdsicrunnumberlookupDataSet();
            
         DataRow ttblicrunnumberlookupcriteriaCriteria = pdsicrunnumberlookup.ttblicrunnumberlookupcriteria.NewttblicrunnumberlookupcriteriaRow();
         Icrunnumberlookupcriteria.UpdateRowFromIcrunnumberlookupcriteria(ref ttblicrunnumberlookupcriteriaCriteria, icrunnumberlookupcriteria);
         pdsicrunnumberlookup.ttblicrunnumberlookupcriteria.AddttblicrunnumberlookupcriteriaRow((pdsicrunnumberlookupDataSet.ttblicrunnumberlookupcriteriaRow)ttblicrunnumberlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICRunNumberLookup - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICRunNumberLookup(ref pdsContext, ref pdsicrunnumberlookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICRunNumberLookup - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicrunnumberlookup); 
    
            foreach (DataRow row in pdsicrunnumberlookup.ttblicrunnumberlookupresults)
            {
                results.Add(Icrunnumberlookupresults.BuildIcrunnumberlookupresultsFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEANGetDefaultOffsetAccountResponseAPI ICEANGetDefaultOffsetAccount(Iceandfltoffsetacctcriteria iceandfltoffsetacctcriteria)
      {   
         var result = new AsicentryICEANGetDefaultOffsetAccountResponseAPI();
         
         var pdsiceandefaultoffsetacct = new pdsiceandefaultoffsetacctDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceandfltoffsetacctcriteriaCriteria = pdsiceandefaultoffsetacct.ttbliceandfltoffsetacctcriteria.NewttbliceandfltoffsetacctcriteriaRow();
         Iceandfltoffsetacctcriteria.UpdateRowFromIceandfltoffsetacctcriteria(ref ttbliceandfltoffsetacctcriteriaCriteria, iceandfltoffsetacctcriteria);
         pdsiceandefaultoffsetacct.ttbliceandfltoffsetacctcriteria.AddttbliceandfltoffsetacctcriteriaRow((pdsiceandefaultoffsetacctDataSet.ttbliceandfltoffsetacctcriteriaRow)ttbliceandfltoffsetacctcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEANGetDefaultOffsetAccount - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANGetDefaultOffsetAccount(ref pdsContext, ref pdsiceandefaultoffsetacct, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANGetDefaultOffsetAccount - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceandefaultoffsetacct); 
    
         foreach (DataRow row in pdsiceandefaultoffsetacct.ttbliceandfltoffsetacctresults)
         {
            result.iceandfltoffsetacctresults.Add(Iceandfltoffsetacctresults.BuildIceandfltoffsetacctresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public string ValidateGLAccount(string cGLAccount)
      {   
          
         string cErrorMessage = string.Empty;
         string cGLAccountDesc = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateGLAccount - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ValidateGLAccount(ref pdsContext,  cGLAccount, out cErrorMessage, out cGLAccountDesc);
               }
            });
         NLogLoggerP.Info("ValidateGLAccount - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cGLAccountDesc;
      
      }

      public AsicentryICEMBSearchResponseAPI ICEMBSearch(Icembcriteria icembcriteria)
      {   
         var result = new AsicentryICEMBSearchResponseAPI();
         
         var pdsicembsearchupdate = new pdsicembsearchupdateDataSet();
            
         DataRow ttblicembcriteriaCriteria = pdsicembsearchupdate.ttblicembcriteria.NewttblicembcriteriaRow();
         Icembcriteria.UpdateRowFromIcembcriteria(ref ttblicembcriteriaCriteria, icembcriteria);
         pdsicembsearchupdate.ttblicembcriteria.AddttblicembcriteriaRow((pdsicembsearchupdateDataSet.ttblicembcriteriaRow)ttblicembcriteriaCriteria);
            
         bool lSensitiveFl = false;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEMBSearch - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMBSearch(ref pdsContext, ref pdsicembsearchupdate, out lSensitiveFl, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEMBSearch - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicembsearchupdate); 
    
         foreach (DataRow row in pdsicembsearchupdate.ttblicembresults)
         {
            result.icembresults.Add(Icembresults.BuildIcembresultsFromRow(row));
         }     
         result.lSensitiveFl = lSensitiveFl;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicentryICEMBUpdateResponseAPI ICEMBUpdate(Icembcriteria icembcriteria)
      {   
         var result = new AsicentryICEMBUpdateResponseAPI();
         
         var pdsicembsearchupdate = new pdsicembsearchupdateDataSet();
            
         DataRow ttblicembcriteriaCriteria = pdsicembsearchupdate.ttblicembcriteria.NewttblicembcriteriaRow();
         Icembcriteria.UpdateRowFromIcembcriteria(ref ttblicembcriteriaCriteria, icembcriteria);
         pdsicembsearchupdate.ttblicembcriteria.AddttblicembcriteriaRow((pdsicembsearchupdateDataSet.ttblicembcriteriaRow)ttblicembcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEMBUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMBUpdate(ref pdsContext, ref pdsicembsearchupdate, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEMBUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicembsearchupdate); 
    
         foreach (DataRow row in pdsicembsearchupdate.ttblicembresults)
         {
            result.icembresults.Add(Icembresults.BuildIcembresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicentryICEMBfieldResponseAPI ICEMBfield(Icembfieldcriteria icembfieldcriteria)
      {   
         var result = new AsicentryICEMBfieldResponseAPI();
         
         var pdsicembfield = new pdsicembfieldDataSet();
            
         DataRow ttblicembfieldcriteriaCriteria = pdsicembfield.ttblicembfieldcriteria.NewttblicembfieldcriteriaRow();
         Icembfieldcriteria.UpdateRowFromIcembfieldcriteria(ref ttblicembfieldcriteriaCriteria, icembfieldcriteria);
         pdsicembfield.ttblicembfieldcriteria.AddttblicembfieldcriteriaRow((pdsicembfieldDataSet.ttblicembfieldcriteriaRow)ttblicembfieldcriteriaCriteria);
            
         bool vShowChgAmt = false;
         bool pvSensitivefl = false;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEMBfield - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMBfield(ref pdsContext,  pdsicembfield, out vShowChgAmt, out pvSensitivefl, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEMBfield - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicembfield); 
    
         result.vShowChgAmt = vShowChgAmt;
         result.pvSensitivefl = pvSensitivefl;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicentryICEMBValueResponseAPI ICEMBValue(Icembvaluecriteria icembvaluecriteria)
      {   
         var result = new AsicentryICEMBValueResponseAPI();
         
         var pdsicembvalue = new pdsicembvalueDataSet();
            
         DataRow ttblicembvaluecriteriaCriteria = pdsicembvalue.ttblicembvaluecriteria.NewttblicembvaluecriteriaRow();
         Icembvaluecriteria.UpdateRowFromIcembvaluecriteria(ref ttblicembvaluecriteriaCriteria, icembvaluecriteria);
         pdsicembvalue.ttblicembvaluecriteria.AddttblicembvaluecriteriaRow((pdsicembvalueDataSet.ttblicembvaluecriteriaRow)ttblicembvaluecriteriaCriteria);
            
         string cOldValue = string.Empty;
         string cNewValue = string.Empty;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEMBValue - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMBValue(ref pdsContext,  pdsicembvalue, out cOldValue, out cNewValue, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEMBValue - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicembvalue); 
    
         result.cOldValue = cOldValue;
         result.cNewValue = cNewValue;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicentryICEMBFieldChangeResponseAPI ICEMBFieldChange()
      {   
         var result = new AsicentryICEMBFieldChangeResponseAPI();
         
         string cFieldchange = string.Empty;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEMBFieldChange - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEMBFieldChange(ref pdsContext, out cFieldchange, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEMBFieldChange - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cFieldchange = cFieldchange;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicentryICEARBuildListResponseAPI ICEARBuildList(Icearbuildlistcriteria icearbuildlistcriteria)
      {   
         var result = new AsicentryICEARBuildListResponseAPI();
         
         var pdsicearbuildlistcriteria = new pdsicearbuildlistcriteriaDataSet();
            
         var pdsicearbuildlistresults = new pdsicearbuildlistresultsDataSet();
            
         DataRow ttblicearbuildlistcriteriaCriteria = pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.NewttblicearbuildlistcriteriaRow();
         Icearbuildlistcriteria.UpdateRowFromIcearbuildlistcriteria(ref ttblicearbuildlistcriteriaCriteria, icearbuildlistcriteria);
         pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.AddttblicearbuildlistcriteriaRow((pdsicearbuildlistcriteriaDataSet.ttblicearbuildlistcriteriaRow)ttblicearbuildlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEARBuildList - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEARBuildList(ref pdsContext, ref pdsicearbuildlistcriteria, out pdsicearbuildlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEARBuildList - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicearbuildlistcriteria); 
    
         if (pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.Count > 0)
         {
            result.icearbuildlistcriteria = Icearbuildlistcriteria.BuildIcearbuildlistcriteriaFromRow(pdsicearbuildlistcriteria.ttblicearbuildlistcriteria[0]);
         }
                    
         foreach (DataRow row in pdsicearbuildlistresults.ttblicearbuildlistresults)
         {
            result.icearbuildlistresults.Add(Icearbuildlistresults.BuildIcearbuildlistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Icearsingle ICEARRowEntry(AsicentryICEARRowEntryRequestAPI AsicentryICEARRowEntryRequestAPI)
      {   
         var result = new Icearsingle();
         
         var pdsicearrowcriteria = new pdsicearrowcriteriaDataSet();
            
         var pdsicearsingle = new pdsicearsingleDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicearrowcriteriaRow = pdsicearrowcriteria.ttblicearrowcriteria.NewttblicearrowcriteriaRow();
         Icearrowcriteria.UpdateRowFromIcearrowcriteria(ref ttblicearrowcriteriaRow, AsicentryICEARRowEntryRequestAPI.icearrowcriteria);
         pdsicearrowcriteria.ttblicearrowcriteria.AddttblicearrowcriteriaRow((pdsicearrowcriteriaDataSet.ttblicearrowcriteriaRow)ttblicearrowcriteriaRow);
          
         DataRow ttblicearsingleRow = pdsicearsingle.ttblicearsingle.NewttblicearsingleRow();
         Icearsingle.UpdateRowFromIcearsingle(ref ttblicearsingleRow, AsicentryICEARRowEntryRequestAPI.icearsingle);
         pdsicearsingle.ttblicearsingle.AddttblicearsingleRow((pdsicearsingleDataSet.ttblicearsingleRow)ttblicearsingleRow);
          
         
         NLogLoggerP.Trace("ICEARRowEntry - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEARRowEntry(ref pdsContext,  pdsicearrowcriteria, ref pdsicearsingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEARRowEntry - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicearrowcriteria); 
    
         if (pdsicearsingle.ttblicearsingle.Count > 0) 
         { 
             result = Icearsingle.BuildIcearsingleFromRow(pdsicearsingle.ttblicearsingle[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEARRowLeaveResponseAPI ICEARRowLeave(AsicentryICEARRowLeaveRequestAPI AsicentryICEARRowLeaveRequestAPI)
      {   
         var result = new AsicentryICEARRowLeaveResponseAPI();
         
         var pdsicearbuildlistcriteria = new pdsicearbuildlistcriteriaDataSet();
            
         var pdsicearsingle = new pdsicearsingleDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicearbuildlistcriteriaRow = pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.NewttblicearbuildlistcriteriaRow();
         Icearbuildlistcriteria.UpdateRowFromIcearbuildlistcriteria(ref ttblicearbuildlistcriteriaRow, AsicentryICEARRowLeaveRequestAPI.icearbuildlistcriteria);
         pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.AddttblicearbuildlistcriteriaRow((pdsicearbuildlistcriteriaDataSet.ttblicearbuildlistcriteriaRow)ttblicearbuildlistcriteriaRow);
          
         DataRow ttblicearsingleRow = pdsicearsingle.ttblicearsingle.NewttblicearsingleRow();
         Icearsingle.UpdateRowFromIcearsingle(ref ttblicearsingleRow, AsicentryICEARRowLeaveRequestAPI.icearsingle);
         pdsicearsingle.ttblicearsingle.AddttblicearsingleRow((pdsicearsingleDataSet.ttblicearsingleRow)ttblicearsingleRow);
          
         
         NLogLoggerP.Trace("ICEARRowLeave - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEARRowLeave(ref pdsContext, ref pdsicearbuildlistcriteria, ref pdsicearsingle, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEARRowLeave - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicearbuildlistcriteria); 
    
         if (pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.Count > 0)
         {
            result.icearbuildlistcriteria = Icearbuildlistcriteria.BuildIcearbuildlistcriteriaFromRow(pdsicearbuildlistcriteria.ttblicearbuildlistcriteria[0]);
         }
                    
         if (pdsicearsingle.ttblicearsingle.Count > 0)
         {
            result.icearsingle = Icearsingle.BuildIcearsingleFromRow(pdsicearsingle.ttblicearsingle[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public bool ICEARReviewBalance(AsicentryICEARReviewBalanceRequestAPI AsicentryICEARReviewBalanceRequestAPI)
      {   
          
         var pdsicearbuildlistcriteria = new pdsicearbuildlistcriteriaDataSet();
            
         var pdsicearupdate = new pdsicearupdateDataSet();
            
         bool lNegativeFlag = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicearbuildlistcriteriaRow = pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.NewttblicearbuildlistcriteriaRow();
         Icearbuildlistcriteria.UpdateRowFromIcearbuildlistcriteria(ref ttblicearbuildlistcriteriaRow, AsicentryICEARReviewBalanceRequestAPI.icearbuildlistcriteria);
         pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.AddttblicearbuildlistcriteriaRow((pdsicearbuildlistcriteriaDataSet.ttblicearbuildlistcriteriaRow)ttblicearbuildlistcriteriaRow);
          
         foreach (var obj in AsicentryICEARReviewBalanceRequestAPI.icearupdate)
         {
            DataRow ttblicearupdateRow = pdsicearupdate.ttblicearupdate.NewttblicearupdateRow();
            Icearupdate.UpdateRowFromIcearupdate(ref ttblicearupdateRow, obj);
            pdsicearupdate.ttblicearupdate.AddttblicearupdateRow((pdsicearupdateDataSet.ttblicearupdateRow)ttblicearupdateRow);
         }
          
         
         NLogLoggerP.Trace("ICEARReviewBalance - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEARReviewBalance(ref pdsContext,  pdsicearbuildlistcriteria,  pdsicearupdate, out lNegativeFlag, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEARReviewBalance - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicearbuildlistcriteria); 
    
         return lNegativeFlag;
      
      }

      public IEnumerable<Messaging> ICEARUpdate(AsicentryICEARUpdateRequestAPI AsicentryICEARUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicearbuildlistcriteria = new pdsicearbuildlistcriteriaDataSet();
            
         var pdsicearupdate = new pdsicearupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicearbuildlistcriteriaRow = pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.NewttblicearbuildlistcriteriaRow();
         Icearbuildlistcriteria.UpdateRowFromIcearbuildlistcriteria(ref ttblicearbuildlistcriteriaRow, AsicentryICEARUpdateRequestAPI.icearbuildlistcriteria);
         pdsicearbuildlistcriteria.ttblicearbuildlistcriteria.AddttblicearbuildlistcriteriaRow((pdsicearbuildlistcriteriaDataSet.ttblicearbuildlistcriteriaRow)ttblicearbuildlistcriteriaRow);
          
         foreach (var obj in AsicentryICEARUpdateRequestAPI.icearupdate)
         {
            DataRow ttblicearupdateRow = pdsicearupdate.ttblicearupdate.NewttblicearupdateRow();
            Icearupdate.UpdateRowFromIcearupdate(ref ttblicearupdateRow, obj);
            pdsicearupdate.ttblicearupdate.AddttblicearupdateRow((pdsicearupdateDataSet.ttblicearupdateRow)ttblicearupdateRow);
         }
          
         
         NLogLoggerP.Trace("ICEARUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEARUpdate(ref pdsContext,  pdsicearbuildlistcriteria,  pdsicearupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEARUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicearbuildlistcriteria); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicentryICEWUpdateResponseAPI ICEWUpdate(Icewupdate icewupdate)
      {   
         var result = new AsicentryICEWUpdateResponseAPI();
         
         var pdsicewupdate = new pdsicewupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicewupdateCriteria = pdsicewupdate.ttblicewupdate.NewttblicewupdateRow();
         Icewupdate.UpdateRowFromIcewupdate(ref ttblicewupdateCriteria, icewupdate);
         pdsicewupdate.ttblicewupdate.AddttblicewupdateRow((pdsicewupdateDataSet.ttblicewupdateRow)ttblicewupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEWUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEWUpdate(ref pdsContext, ref pdsicewupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEWUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicewupdate); 
    
         if (pdsicewupdate.ttblicewupdate.Count > 0)
         {
            result.icewupdate = Icewupdate.BuildIcewupdateFromRow(pdsicewupdate.ttblicewupdate[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEWCheckSerLotResponseAPI ICEWCheckSerLot(Icewupdate icewupdate)
      {   
         var result = new AsicentryICEWCheckSerLotResponseAPI();
         
         var pdsicewupdate = new pdsicewupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicewupdateCriteria = pdsicewupdate.ttblicewupdate.NewttblicewupdateRow();
         Icewupdate.UpdateRowFromIcewupdate(ref ttblicewupdateCriteria, icewupdate);
         pdsicewupdate.ttblicewupdate.AddttblicewupdateRow((pdsicewupdateDataSet.ttblicewupdateRow)ttblicewupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEWCheckSerLot - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEWCheckSerLot(ref pdsContext, ref pdsicewupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEWCheckSerLot - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicewupdate); 
    
         if (pdsicewupdate.ttblicewupdate.Count > 0)
         {
            result.icewupdate = Icewupdate.BuildIcewupdateFromRow(pdsicewupdate.ttblicewupdate[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEAARetrieveResponseAPI ICEAARetrieve(Iceaacriteria iceaacriteria)
      {   
         var result = new AsicentryICEAARetrieveResponseAPI();
         
         var pdsiceaacriteria = new pdsiceaacriteriaDataSet();
            
         var pdsiceaaresults = new pdsiceaaresultsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceaacriteriaCriteria = pdsiceaacriteria.ttbliceaacriteria.NewttbliceaacriteriaRow();
         Iceaacriteria.UpdateRowFromIceaacriteria(ref ttbliceaacriteriaCriteria, iceaacriteria);
         pdsiceaacriteria.ttbliceaacriteria.AddttbliceaacriteriaRow((pdsiceaacriteriaDataSet.ttbliceaacriteriaRow)ttbliceaacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEAARetrieve - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAARetrieve(ref pdsContext,  pdsiceaacriteria, out pdsiceaaresults, out pdsmessaging, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEAARetrieve - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaacriteria); 
    
         foreach (DataRow row in pdsiceaaresults.ttbliceaaresults)
         {
            result.iceaaresults.Add(Iceaaresults.BuildIceaaresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Iceaadetail ICEAAPrepare(Iceaadetail iceaadetail)
      {   
         var result = new Iceaadetail();
         
         var pdsiceaadetail = new pdsiceaadetailDataSet();
            
         DataRow ttbliceaadetailCriteria = pdsiceaadetail.ttbliceaadetail.NewttbliceaadetailRow();
         Iceaadetail.UpdateRowFromIceaadetail(ref ttbliceaadetailCriteria, iceaadetail);
         pdsiceaadetail.ttbliceaadetail.AddttbliceaadetailRow((pdsiceaadetailDataSet.ttbliceaadetailRow)ttbliceaadetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAAPrepare - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAAPrepare(ref pdsContext, ref pdsiceaadetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAAPrepare - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaadetail); 
    
         if (pdsiceaadetail.ttbliceaadetail.Count > 0) 
         { 
             result = Iceaadetail.BuildIceaadetailFromRow(pdsiceaadetail.ttbliceaadetail[0]);
         } 
              
          
         return result;
          
      }

      public Iceaadetail ICEAAFieldChange(AsicentryICEAAFieldChangeRequestAPI AsicentryICEAAFieldChangeRequestAPI)
      {   
         var result = new Iceaadetail();
         
         var pdsiceaadetail = new pdsiceaadetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbliceaadetailRow = pdsiceaadetail.ttbliceaadetail.NewttbliceaadetailRow();
         Iceaadetail.UpdateRowFromIceaadetail(ref ttbliceaadetailRow, AsicentryICEAAFieldChangeRequestAPI.iceaadetail);
         pdsiceaadetail.ttbliceaadetail.AddttbliceaadetailRow((pdsiceaadetailDataSet.ttbliceaadetailRow)ttbliceaadetailRow);
          
         var  cSection = AsicentryICEAAFieldChangeRequestAPI.cSection;
            
         
         NLogLoggerP.Trace("ICEAAFieldChange - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAAFieldChange(ref pdsContext,  cSection, ref pdsiceaadetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAAFieldChange - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaadetail); 
    
         if (pdsiceaadetail.ttbliceaadetail.Count > 0) 
         { 
             result = Iceaadetail.BuildIceaadetailFromRow(pdsiceaadetail.ttbliceaadetail[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEAAAddResponseAPI ICEAAAdd(Iceaadetail iceaadetail)
      {   
         var result = new AsicentryICEAAAddResponseAPI();
         
         var pdsiceaadetail = new pdsiceaadetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceaadetailCriteria = pdsiceaadetail.ttbliceaadetail.NewttbliceaadetailRow();
         Iceaadetail.UpdateRowFromIceaadetail(ref ttbliceaadetailCriteria, iceaadetail);
         pdsiceaadetail.ttbliceaadetail.AddttbliceaadetailRow((pdsiceaadetailDataSet.ttbliceaadetailRow)ttbliceaadetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAAAdd - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAAAdd(ref pdsContext, ref pdsiceaadetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAAAdd - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaadetail); 
    
         if (pdsiceaadetail.ttbliceaadetail.Count > 0)
         {
            result.iceaadetail = Iceaadetail.BuildIceaadetailFromRow(pdsiceaadetail.ttbliceaadetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEAAChangeResponseAPI ICEAAChange(Iceaadetail iceaadetail)
      {   
         var result = new AsicentryICEAAChangeResponseAPI();
         
         var pdsiceaadetail = new pdsiceaadetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceaadetailCriteria = pdsiceaadetail.ttbliceaadetail.NewttbliceaadetailRow();
         Iceaadetail.UpdateRowFromIceaadetail(ref ttbliceaadetailCriteria, iceaadetail);
         pdsiceaadetail.ttbliceaadetail.AddttbliceaadetailRow((pdsiceaadetailDataSet.ttbliceaadetailRow)ttbliceaadetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAAChange - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAAChange(ref pdsContext, ref pdsiceaadetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAAChange - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaadetail); 
    
         if (pdsiceaadetail.ttbliceaadetail.Count > 0)
         {
            result.iceaadetail = Iceaadetail.BuildIceaadetailFromRow(pdsiceaadetail.ttbliceaadetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public void ICEAADelete(Iceaaresults iceaaresults)
      {   
         
         var pdsiceaaresults = new pdsiceaaresultsDataSet();
            
         DataRow ttbliceaaresultsCriteria = pdsiceaaresults.ttbliceaaresults.NewttbliceaaresultsRow();
         Iceaaresults.UpdateRowFromIceaaresults(ref ttbliceaaresultsCriteria, iceaaresults);
         pdsiceaaresults.ttbliceaaresults.AddttbliceaaresultsRow((pdsiceaaresultsDataSet.ttbliceaaresultsRow)ttbliceaaresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAADelete - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAADelete(ref pdsContext,  pdsiceaaresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAADelete - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceaaresults);
      }

      public Iceamdetail ICEAMInitiate(Iceamdetail iceamdetail)
      {   
         var result = new Iceamdetail();
         
         var pdsiceamdetail = new pdsiceamdetailDataSet();
            
         DataRow ttbliceamdetailCriteria = pdsiceamdetail.ttbliceamdetail.NewttbliceamdetailRow();
         Iceamdetail.UpdateRowFromIceamdetail(ref ttbliceamdetailCriteria, iceamdetail);
         pdsiceamdetail.ttbliceamdetail.AddttbliceamdetailRow((pdsiceamdetailDataSet.ttbliceamdetailRow)ttbliceamdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAMInitiate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAMInitiate(ref pdsContext, ref pdsiceamdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAMInitiate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceamdetail); 
    
         if (pdsiceamdetail.ttbliceamdetail.Count > 0) 
         { 
             result = Iceamdetail.BuildIceamdetailFromRow(pdsiceamdetail.ttbliceamdetail[0]);
         } 
              
          
         return result;
          
      }

      public Iceamdetail ICEAMLineNoValueChanged(Iceamdetail iceamdetail)
      {   
         var result = new Iceamdetail();
         
         var pdsiceamdetail = new pdsiceamdetailDataSet();
            
         DataRow ttbliceamdetailCriteria = pdsiceamdetail.ttbliceamdetail.NewttbliceamdetailRow();
         Iceamdetail.UpdateRowFromIceamdetail(ref ttbliceamdetailCriteria, iceamdetail);
         pdsiceamdetail.ttbliceamdetail.AddttbliceamdetailRow((pdsiceamdetailDataSet.ttbliceamdetailRow)ttbliceamdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAMLineNoValueChanged - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAMLineNoValueChanged(ref pdsContext, ref pdsiceamdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAMLineNoValueChanged - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceamdetail); 
    
         if (pdsiceamdetail.ttbliceamdetail.Count > 0) 
         { 
             result = Iceamdetail.BuildIceamdetailFromRow(pdsiceamdetail.ttbliceamdetail[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEAMLoadResponseAPI ICEAMLoad(Iceamcriteria iceamcriteria)
      {   
         var result = new AsicentryICEAMLoadResponseAPI();
         
         var pdsiceamload = new pdsiceamloadDataSet();
            
         DataRow ttbliceamcriteriaCriteria = pdsiceamload.ttbliceamcriteria.NewttbliceamcriteriaRow();
         Iceamcriteria.UpdateRowFromIceamcriteria(ref ttbliceamcriteriaCriteria, iceamcriteria);
         pdsiceamload.ttbliceamcriteria.AddttbliceamcriteriaRow((pdsiceamloadDataSet.ttbliceamcriteriaRow)ttbliceamcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEAMLoad - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAMLoad(ref pdsContext, ref pdsiceamload, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEAMLoad - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceamload); 
    
         foreach (DataRow row in pdsiceamload.ttbliceamresults)
         {
            result.iceamresults.Add(Iceamresults.BuildIceamresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Iceamdetail ICEAMOrigProdValueChanged(Iceamdetail iceamdetail)
      {   
         var result = new Iceamdetail();
         
         var pdsiceamdetail = new pdsiceamdetailDataSet();
            
         DataRow ttbliceamdetailCriteria = pdsiceamdetail.ttbliceamdetail.NewttbliceamdetailRow();
         Iceamdetail.UpdateRowFromIceamdetail(ref ttbliceamdetailCriteria, iceamdetail);
         pdsiceamdetail.ttbliceamdetail.AddttbliceamdetailRow((pdsiceamdetailDataSet.ttbliceamdetailRow)ttbliceamdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAMOrigProdValueChanged - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAMOrigProdValueChanged(ref pdsContext, ref pdsiceamdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAMOrigProdValueChanged - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceamdetail); 
    
         if (pdsiceamdetail.ttbliceamdetail.Count > 0) 
         { 
             result = Iceamdetail.BuildIceamdetailFromRow(pdsiceamdetail.ttbliceamdetail[0]);
         } 
              
          
         return result;
          
      }

      public AsicentryICEAMUpdateResponseAPI ICEAMUpdate(Iceamdetail iceamdetail)
      {   
         var result = new AsicentryICEAMUpdateResponseAPI();
         
         var pdsiceamdetail = new pdsiceamdetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceamdetailCriteria = pdsiceamdetail.ttbliceamdetail.NewttbliceamdetailRow();
         Iceamdetail.UpdateRowFromIceamdetail(ref ttbliceamdetailCriteria, iceamdetail);
         pdsiceamdetail.ttbliceamdetail.AddttbliceamdetailRow((pdsiceamdetailDataSet.ttbliceamdetailRow)ttbliceamdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAMUpdate - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAMUpdate(ref pdsContext, ref pdsiceamdetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAMUpdate - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceamdetail); 
    
         if (pdsiceamdetail.ttbliceamdetail.Count > 0)
         {
            result.iceamdetail = Iceamdetail.BuildIceamdetailFromRow(pdsiceamdetail.ttbliceamdetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicentryICEAVRetrieveResponseAPI ICEAVRetrieve(Iceavcriteria iceavcriteria)
      {   
         var result = new AsicentryICEAVRetrieveResponseAPI();
         
         var pdsiceavload = new pdsiceavloadDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbliceavcriteriaCriteria = pdsiceavload.ttbliceavcriteria.NewttbliceavcriteriaRow();
         Iceavcriteria.UpdateRowFromIceavcriteria(ref ttbliceavcriteriaCriteria, iceavcriteria);
         pdsiceavload.ttbliceavcriteria.AddttbliceavcriteriaRow((pdsiceavloadDataSet.ttbliceavcriteriaRow)ttbliceavcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICEAVRetrieve - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAVRetrieve(ref pdsContext, ref pdsiceavload, out pdsmessaging, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICEAVRetrieve - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceavload); 
    
         foreach (DataRow row in pdsiceavload.ttbliceavresults)
         {
            result.iceavresults.Add(Iceavresults.BuildIceavresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Iceavdetail ICEAVDetailLoad(Iceavdetail iceavdetail)
      {   
         var result = new Iceavdetail();
         
         var pdsiceavdetail = new pdsiceavdetailDataSet();
            
         DataRow ttbliceavdetailCriteria = pdsiceavdetail.ttbliceavdetail.NewttbliceavdetailRow();
         Iceavdetail.UpdateRowFromIceavdetail(ref ttbliceavdetailCriteria, iceavdetail);
         pdsiceavdetail.ttbliceavdetail.AddttbliceavdetailRow((pdsiceavdetailDataSet.ttbliceavdetailRow)ttbliceavdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAVDetailLoad - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAVDetailLoad(ref pdsContext, ref pdsiceavdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAVDetailLoad - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceavdetail); 
    
         if (pdsiceavdetail.ttbliceavdetail.Count > 0) 
         { 
             result = Iceavdetail.BuildIceavdetailFromRow(pdsiceavdetail.ttbliceavdetail[0]);
         } 
              
          
         return result;
          
      }

      public void ICEAVDetailSave(Iceavdetail iceavdetail)
      {   
         
         var pdsiceavdetail = new pdsiceavdetailDataSet();
            
         DataRow ttbliceavdetailCriteria = pdsiceavdetail.ttbliceavdetail.NewttbliceavdetailRow();
         Iceavdetail.UpdateRowFromIceavdetail(ref ttbliceavdetailCriteria, iceavdetail);
         pdsiceavdetail.ttbliceavdetail.AddttbliceavdetailRow((pdsiceavdetailDataSet.ttbliceavdetailRow)ttbliceavdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICEAVDetailSave - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEAVDetailSave(ref pdsContext,  pdsiceavdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEAVDetailSave - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceavdetail);
      }

      public Iceanmaintupdateoperation ICEANInvCheckRestrictions(AsicentryICEANInvCheckRestrictionsRequestAPI AsicentryICEANInvCheckRestrictionsRequestAPI)
      {   
         var result = new Iceanmaintupdateoperation();
         
         var pdsiceanmaintupdate = new pdsiceanmaintupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbliceanmaintupdateoperationRow = pdsiceanmaintupdate.ttbliceanmaintupdateoperation.NewttbliceanmaintupdateoperationRow();
         Iceanmaintupdateoperation.UpdateRowFromIceanmaintupdateoperation(ref ttbliceanmaintupdateoperationRow, AsicentryICEANInvCheckRestrictionsRequestAPI.iceanmaintupdateoperation);
         pdsiceanmaintupdate.ttbliceanmaintupdateoperation.AddttbliceanmaintupdateoperationRow((pdsiceanmaintupdateDataSet.ttbliceanmaintupdateoperationRow)ttbliceanmaintupdateoperationRow);
          
         DataRow ttbliceanmaintupdatetransRow = pdsiceanmaintupdate.ttbliceanmaintupdatetrans.NewttbliceanmaintupdatetransRow();
         Iceanmaintupdatetrans.UpdateRowFromIceanmaintupdatetrans(ref ttbliceanmaintupdatetransRow, AsicentryICEANInvCheckRestrictionsRequestAPI.iceanmaintupdatetrans);
         pdsiceanmaintupdate.ttbliceanmaintupdatetrans.AddttbliceanmaintupdatetransRow((pdsiceanmaintupdateDataSet.ttbliceanmaintupdatetransRow)ttbliceanmaintupdatetransRow);
          
         
         NLogLoggerP.Trace("ICEANInvCheckRestrictions - Asicentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicentryproxy = this.proxyAppObject.CreatePO_asicentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicentryproxy.ICEANInvCheckRestrictions(ref pdsContext, ref pdsiceanmaintupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICEANInvCheckRestrictions - Asicentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiceanmaintupdate); 
    
         if (pdsiceanmaintupdate.ttbliceanmaintupdateoperation.Count > 0) 
         { 
             result = Iceanmaintupdateoperation.BuildIceanmaintupdateoperationFromRow(pdsiceanmaintupdate.ttbliceanmaintupdateoperation[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  