//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Adapters
{
   using com.infor.sxproxy.icproxy;
   using com.infor.sxproxy.icproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsloadusagehistory;
   using Models.Pdsicswloadsensitivity;
   using Models.Pdsloadsafetyallowance;
   using Models.Pdsicamrdropdowns;
   using Models.Pdsicamrupdselectmethod;
   using Models.Pdsicamrupdusagerateanalysis;
   using Models.Pdsicamrcalcmethodrate;
   using Models.Pdsicamrusagesensitivity;
   using Models.Pdsicamrloadusagerateanalysistt;
   using Models.Pdssinglemethodwaschosen;
   using Models.Pdsrecalcorderingcontrols;
   using Models.Pdsicamrresults;
   using Models.Pdsloadleadtimehist;
   using Models.Pdsicamuinvvalchg;
   using Models.Pdsicamudropdowns;
   using Models.Pdsmessaging;
   using Models.Pdsicamumanprodlist;
   using Models.Pdsicamuexception;
   using Models.Pdsicamuusage;
   using Models.Pdsicamumain;
   using Models.Pdsicamumassupdateinit;
   using Models.Pdsicamumassupdate;
   using Models.Pdsicamudeleterecord;
   using Models.Pdsicamuimportfile;
   using Models.Complex;

   public partial class AsicadminAdapter : AdapterBase<pdsContextDataSet>
   {
      private ICProxyAppObject proxyAppObject;
      
      public AsicadminAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ICProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsicadminAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsicadminLoadUsageHistoryResponseAPI LoadUsageHistory(Loadusagecriteria loadusagecriteria)
      {   
         var result = new AsicadminLoadUsageHistoryResponseAPI();
         
         var pdsloadusagehistory = new pdsloadusagehistoryDataSet();
            
         DataRow ttblloadusagecriteriaCriteria = pdsloadusagehistory.ttblloadusagecriteria.NewttblloadusagecriteriaRow();
         Loadusagecriteria.UpdateRowFromLoadusagecriteria(ref ttblloadusagecriteriaCriteria, loadusagecriteria);
         pdsloadusagehistory.ttblloadusagecriteria.AddttblloadusagecriteriaRow((pdsloadusagehistoryDataSet.ttblloadusagecriteriaRow)ttblloadusagecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadUsageHistory - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.LoadUsageHistory(ref pdsContext, ref pdsloadusagehistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadUsageHistory - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadusagehistory); 
    
         foreach (DataRow row in pdsloadusagehistory.ttblloadusagehistoryresults)
         {
            result.loadusagehistoryresults.Add(Loadusagehistoryresults.BuildLoadusagehistoryresultsFromRow(row));
         }     
         if (pdsloadusagehistory.ttblloadusagehistorysingle.Count > 0)
         {
            result.loadusagehistorysingle = Loadusagehistorysingle.BuildLoadusagehistorysingleFromRow(pdsloadusagehistory.ttblloadusagehistorysingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Loadusagehistoryresults> RebuildUsageHistoryDates(AsicadminRebuildUsageHistoryDatesRequestAPI AsicadminRebuildUsageHistoryDatesRequestAPI)
      {   
         var results = new List<Loadusagehistoryresults>();
         
         var pdsloadusagehistory = new pdsloadusagehistoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadusagecriteriaRow = pdsloadusagehistory.ttblloadusagecriteria.NewttblloadusagecriteriaRow();
         Loadusagecriteria.UpdateRowFromLoadusagecriteria(ref ttblloadusagecriteriaRow, AsicadminRebuildUsageHistoryDatesRequestAPI.loadusagecriteria);
         pdsloadusagehistory.ttblloadusagecriteria.AddttblloadusagecriteriaRow((pdsloadusagehistoryDataSet.ttblloadusagecriteriaRow)ttblloadusagecriteriaRow);
          
         foreach (var obj in AsicadminRebuildUsageHistoryDatesRequestAPI.loadusagehistoryresults)
         {
            DataRow ttblloadusagehistoryresultsRow = pdsloadusagehistory.ttblloadusagehistoryresults.NewttblloadusagehistoryresultsRow();
            Loadusagehistoryresults.UpdateRowFromLoadusagehistoryresults(ref ttblloadusagehistoryresultsRow, obj);
            pdsloadusagehistory.ttblloadusagehistoryresults.AddttblloadusagehistoryresultsRow((pdsloadusagehistoryDataSet.ttblloadusagehistoryresultsRow)ttblloadusagehistoryresultsRow);
         }
          
         DataRow ttblloadusagehistorysingleRow = pdsloadusagehistory.ttblloadusagehistorysingle.NewttblloadusagehistorysingleRow();
         Loadusagehistorysingle.UpdateRowFromLoadusagehistorysingle(ref ttblloadusagehistorysingleRow, AsicadminRebuildUsageHistoryDatesRequestAPI.loadusagehistorysingle);
         pdsloadusagehistory.ttblloadusagehistorysingle.AddttblloadusagehistorysingleRow((pdsloadusagehistoryDataSet.ttblloadusagehistorysingleRow)ttblloadusagehistorysingleRow);
          
         
         NLogLoggerP.Trace("RebuildUsageHistoryDates - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.RebuildUsageHistoryDates(ref pdsContext, ref pdsloadusagehistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RebuildUsageHistoryDates - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadusagehistory); 
    
            foreach (DataRow row in pdsloadusagehistory.ttblloadusagehistoryresults)
            {
                results.Add(Loadusagehistoryresults.BuildLoadusagehistoryresultsFromRow(row));
            }
            return results;
        
      }

      public Icswloadsensitivitysingle ICSWLoadOrderingControlsSensitivity(Icswloadsensitivitycriteria icswloadsensitivitycriteria)
      {   
         var result = new Icswloadsensitivitysingle();
         
         var pdsicswloadsensitivity = new pdsicswloadsensitivityDataSet();
            
         DataRow ttblicswloadsensitivitycriteriaCriteria = pdsicswloadsensitivity.ttblicswloadsensitivitycriteria.NewttblicswloadsensitivitycriteriaRow();
         Icswloadsensitivitycriteria.UpdateRowFromIcswloadsensitivitycriteria(ref ttblicswloadsensitivitycriteriaCriteria, icswloadsensitivitycriteria);
         pdsicswloadsensitivity.ttblicswloadsensitivitycriteria.AddttblicswloadsensitivitycriteriaRow((pdsicswloadsensitivityDataSet.ttblicswloadsensitivitycriteriaRow)ttblicswloadsensitivitycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSWLoadOrderingControlsSensitivity - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICSWLoadOrderingControlsSensitivity(ref pdsContext, ref pdsicswloadsensitivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSWLoadOrderingControlsSensitivity - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicswloadsensitivity); 
    
         if (pdsicswloadsensitivity.ttblicswloadsensitivitysingle.Count > 0) 
         { 
             result = Icswloadsensitivitysingle.BuildIcswloadsensitivitysingleFromRow(pdsicswloadsensitivity.ttblicswloadsensitivitysingle[0]);
         } 
              
          
         return result;
          
      }

      public Safetyallowanceresults ICSWDisplaySafetyAllowance(Safetyallowancecriteria safetyallowancecriteria)
      {   
         var result = new Safetyallowanceresults();
         
         var pdsloadsafetyallowance = new pdsloadsafetyallowanceDataSet();
            
         DataRow ttblsafetyallowancecriteriaCriteria = pdsloadsafetyallowance.ttblsafetyallowancecriteria.NewttblsafetyallowancecriteriaRow();
         Safetyallowancecriteria.UpdateRowFromSafetyallowancecriteria(ref ttblsafetyallowancecriteriaCriteria, safetyallowancecriteria);
         pdsloadsafetyallowance.ttblsafetyallowancecriteria.AddttblsafetyallowancecriteriaRow((pdsloadsafetyallowanceDataSet.ttblsafetyallowancecriteriaRow)ttblsafetyallowancecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSWDisplaySafetyAllowance - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICSWDisplaySafetyAllowance(ref pdsContext, ref pdsloadsafetyallowance, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSWDisplaySafetyAllowance - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadsafetyallowance); 
    
         if (pdsloadsafetyallowance.ttblsafetyallowanceresults.Count > 0) 
         { 
             result = Safetyallowanceresults.BuildSafetyallowanceresultsFromRow(pdsloadsafetyallowance.ttblsafetyallowanceresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Icamrdropdownsresults> ICAMRLoadDropDowns(Icamrdropdownscriteria icamrdropdownscriteria)
      {   
         var results = new List<Icamrdropdownsresults>();
         
         var pdsicamrdropdowns = new pdsicamrdropdownsDataSet();
            
         DataRow ttblicamrdropdownscriteriaCriteria = pdsicamrdropdowns.ttblicamrdropdownscriteria.NewttblicamrdropdownscriteriaRow();
         Icamrdropdownscriteria.UpdateRowFromIcamrdropdownscriteria(ref ttblicamrdropdownscriteriaCriteria, icamrdropdownscriteria);
         pdsicamrdropdowns.ttblicamrdropdownscriteria.AddttblicamrdropdownscriteriaRow((pdsicamrdropdownsDataSet.ttblicamrdropdownscriteriaRow)ttblicamrdropdownscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMRLoadDropDowns - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRLoadDropDowns(ref pdsContext, ref pdsicamrdropdowns, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRLoadDropDowns - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrdropdowns); 
    
            foreach (DataRow row in pdsicamrdropdowns.ttblicamrdropdownsresults)
            {
                results.Add(Icamrdropdownsresults.BuildIcamrdropdownsresultsFromRow(row));
            }
            return results;
        
      }

      public void ICAMRUpdateSelectMethod(AsicadminICAMRUpdateSelectMethodRequestAPI AsicadminICAMRUpdateSelectMethodRequestAPI)
      {   
         
         var pdsicamrupdselectmethod = new pdsicamrupdselectmethodDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicadminICAMRUpdateSelectMethodRequestAPI.icamrupdselectmethod)
         {
            DataRow ttblicamrupdselectmethodRow = pdsicamrupdselectmethod.ttblicamrupdselectmethod.NewttblicamrupdselectmethodRow();
            Icamrupdselectmethod.UpdateRowFromIcamrupdselectmethod(ref ttblicamrupdselectmethodRow, obj);
            pdsicamrupdselectmethod.ttblicamrupdselectmethod.AddttblicamrupdselectmethodRow((pdsicamrupdselectmethodDataSet.ttblicamrupdselectmethodRow)ttblicamrupdselectmethodRow);
         }
          
         DataRow ttblicamrupdselectmethodcriteriaRow = pdsicamrupdselectmethod.ttblicamrupdselectmethodcriteria.NewttblicamrupdselectmethodcriteriaRow();
         Icamrupdselectmethodcriteria.UpdateRowFromIcamrupdselectmethodcriteria(ref ttblicamrupdselectmethodcriteriaRow, AsicadminICAMRUpdateSelectMethodRequestAPI.icamrupdselectmethodcriteria);
         pdsicamrupdselectmethod.ttblicamrupdselectmethodcriteria.AddttblicamrupdselectmethodcriteriaRow((pdsicamrupdselectmethodDataSet.ttblicamrupdselectmethodcriteriaRow)ttblicamrupdselectmethodcriteriaRow);
          
         
         NLogLoggerP.Trace("ICAMRUpdateSelectMethod - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRUpdateSelectMethod(ref pdsContext, ref pdsicamrupdselectmethod, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRUpdateSelectMethod - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrupdselectmethod);
      }

      public void ICAMRUpdateUsageRateAnalysis(Icamrupdusageratecriteria icamrupdusageratecriteria)
      {   
         
         var pdsicamrupdusagerateanalysis = new pdsicamrupdusagerateanalysisDataSet();
            
         DataRow ttblicamrupdusageratecriteriaCriteria = pdsicamrupdusagerateanalysis.ttblicamrupdusageratecriteria.NewttblicamrupdusageratecriteriaRow();
         Icamrupdusageratecriteria.UpdateRowFromIcamrupdusageratecriteria(ref ttblicamrupdusageratecriteriaCriteria, icamrupdusageratecriteria);
         pdsicamrupdusagerateanalysis.ttblicamrupdusageratecriteria.AddttblicamrupdusageratecriteriaRow((pdsicamrupdusagerateanalysisDataSet.ttblicamrupdusageratecriteriaRow)ttblicamrupdusageratecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMRUpdateUsageRateAnalysis - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRUpdateUsageRateAnalysis(ref pdsContext, ref pdsicamrupdusagerateanalysis, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRUpdateUsageRateAnalysis - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrupdusagerateanalysis);
      }

      public AsicadminICAMRLoadCalcMethodRateResponseAPI ICAMRLoadCalcMethodRate(Icamrcalcmethodcriteria icamrcalcmethodcriteria)
      {   
         var result = new AsicadminICAMRLoadCalcMethodRateResponseAPI();
         
         var pdsicamrcalcmethodrate = new pdsicamrcalcmethodrateDataSet();
            
         var pdsicamrusagesensitivity = new pdsicamrusagesensitivityDataSet();
            
         DataRow ttblicamrcalcmethodcriteriaCriteria = pdsicamrcalcmethodrate.ttblicamrcalcmethodcriteria.NewttblicamrcalcmethodcriteriaRow();
         Icamrcalcmethodcriteria.UpdateRowFromIcamrcalcmethodcriteria(ref ttblicamrcalcmethodcriteriaCriteria, icamrcalcmethodcriteria);
         pdsicamrcalcmethodrate.ttblicamrcalcmethodcriteria.AddttblicamrcalcmethodcriteriaRow((pdsicamrcalcmethodrateDataSet.ttblicamrcalcmethodcriteriaRow)ttblicamrcalcmethodcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMRLoadCalcMethodRate - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRLoadCalcMethodRate(ref pdsContext, ref pdsicamrcalcmethodrate, ref pdsicamrusagesensitivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRLoadCalcMethodRate - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrcalcmethodrate); 
    
         if (pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle.Count > 0)
         {
            result.icamrcalcmethodratesingle = Icamrcalcmethodratesingle.BuildIcamrcalcmethodratesingleFromRow(pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle[0]);
         }
                    
         if (pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle.Count > 0)
         {
            result.icamrcalcmethodsingle = Icamrcalcmethodsingle.BuildIcamrcalcmethodsingleFromRow(pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle[0]);
         }
                    
         if (pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.Count > 0)
         {
            result.icamrusagesensitivitysingle = Icamrusagesensitivitysingle.BuildIcamrusagesensitivitysingleFromRow(pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMRLoadUsageRateAnalysisTTResponseAPI ICAMRLoadUsageRateAnalysisTT(AsicadminICAMRLoadUsageRateAnalysisTTRequestAPI AsicadminICAMRLoadUsageRateAnalysisTTRequestAPI)
      {   
         var result = new AsicadminICAMRLoadUsageRateAnalysisTTResponseAPI();
         
         var pdsicamrloadusagerateanalysistt = new pdsicamrloadusagerateanalysisttDataSet();
            
         var pdsicamrusagesensitivity = new pdsicamrusagesensitivityDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamrcriteriaRow = pdsicamrloadusagerateanalysistt.ttblicamrcriteria.NewttblicamrcriteriaRow();
         Icamrcriteria.UpdateRowFromIcamrcriteria(ref ttblicamrcriteriaRow, AsicadminICAMRLoadUsageRateAnalysisTTRequestAPI.icamrcriteria);
         pdsicamrloadusagerateanalysistt.ttblicamrcriteria.AddttblicamrcriteriaRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrcriteriaRow)ttblicamrcriteriaRow);
          
         DataRow ttblicamrusagesensitivitysingleRow = pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.NewttblicamrusagesensitivitysingleRow();
         Icamrusagesensitivitysingle.UpdateRowFromIcamrusagesensitivitysingle(ref ttblicamrusagesensitivitysingleRow, AsicadminICAMRLoadUsageRateAnalysisTTRequestAPI.icamrusagesensitivitysingle);
         pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.AddttblicamrusagesensitivitysingleRow((pdsicamrusagesensitivityDataSet.ttblicamrusagesensitivitysingleRow)ttblicamrusagesensitivitysingleRow);
          
         
         NLogLoggerP.Trace("ICAMRLoadUsageRateAnalysisTT - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRLoadUsageRateAnalysisTT(ref pdsContext, ref pdsicamrloadusagerateanalysistt, ref pdsicamrusagesensitivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRLoadUsageRateAnalysisTT - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrloadusagerateanalysistt); 
    
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt)
         {
            result.icamrloadusagerateanalysistt.Add(Icamrloadusagerateanalysistt.BuildIcamrloadusagerateanalysisttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt)
         {
            result.icamrloadusagerateprodtt.Add(Icamrloadusagerateprodtt.BuildIcamrloadusagerateprodttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrusagerateanalysisupdtt)
         {
            result.icamrusagerateanalysisupdtt.Add(Icamrusagerateanalysisupdtt.BuildIcamrusagerateanalysisupdttFromRow(row));
         }     
         if (pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.Count > 0)
         {
            result.icamrusagesensitivitysingle = Icamrusagesensitivitysingle.BuildIcamrusagesensitivitysingleFromRow(pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMRSingleMethodWasChosenResponseAPI ICAMRSingleMethodWasChosen(AsicadminICAMRSingleMethodWasChosenRequestAPI AsicadminICAMRSingleMethodWasChosenRequestAPI)
      {   
         var result = new AsicadminICAMRSingleMethodWasChosenResponseAPI();
         
         var pdssinglemethodwaschosen = new pdssinglemethodwaschosenDataSet();
            
         var pdsicamrloadusagerateanalysistt = new pdsicamrloadusagerateanalysisttDataSet();
            
         var pdsicamrusagesensitivity = new pdsicamrusagesensitivityDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamrcriteriaRow = pdsicamrloadusagerateanalysistt.ttblicamrcriteria.NewttblicamrcriteriaRow();
         Icamrcriteria.UpdateRowFromIcamrcriteria(ref ttblicamrcriteriaRow, AsicadminICAMRSingleMethodWasChosenRequestAPI.icamrcriteria);
         pdsicamrloadusagerateanalysistt.ttblicamrcriteria.AddttblicamrcriteriaRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrcriteriaRow)ttblicamrcriteriaRow);
          
         foreach (var obj in AsicadminICAMRSingleMethodWasChosenRequestAPI.icamrloadusagerateanalysistt)
         {
            DataRow ttblicamrloadusagerateanalysisttRow = pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt.NewttblicamrloadusagerateanalysisttRow();
            Icamrloadusagerateanalysistt.UpdateRowFromIcamrloadusagerateanalysistt(ref ttblicamrloadusagerateanalysisttRow, obj);
            pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt.AddttblicamrloadusagerateanalysisttRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrloadusagerateanalysisttRow)ttblicamrloadusagerateanalysisttRow);
         }
          
         foreach (var obj in AsicadminICAMRSingleMethodWasChosenRequestAPI.icamrloadusagerateprodtt)
         {
            DataRow ttblicamrloadusagerateprodttRow = pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt.NewttblicamrloadusagerateprodttRow();
            Icamrloadusagerateprodtt.UpdateRowFromIcamrloadusagerateprodtt(ref ttblicamrloadusagerateprodttRow, obj);
            pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt.AddttblicamrloadusagerateprodttRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrloadusagerateprodttRow)ttblicamrloadusagerateprodttRow);
         }
          
         DataRow ttblicamrusagesensitivitysingleRow = pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.NewttblicamrusagesensitivitysingleRow();
         Icamrusagesensitivitysingle.UpdateRowFromIcamrusagesensitivitysingle(ref ttblicamrusagesensitivitysingleRow, AsicadminICAMRSingleMethodWasChosenRequestAPI.icamrusagesensitivitysingle);
         pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.AddttblicamrusagesensitivitysingleRow((pdsicamrusagesensitivityDataSet.ttblicamrusagesensitivitysingleRow)ttblicamrusagesensitivitysingleRow);
          
         DataRow ttblsinglemethodwaschosencritRow = pdssinglemethodwaschosen.ttblsinglemethodwaschosencrit.NewttblsinglemethodwaschosencritRow();
         Singlemethodwaschosencrit.UpdateRowFromSinglemethodwaschosencrit(ref ttblsinglemethodwaschosencritRow, AsicadminICAMRSingleMethodWasChosenRequestAPI.singlemethodwaschosencrit);
         pdssinglemethodwaschosen.ttblsinglemethodwaschosencrit.AddttblsinglemethodwaschosencritRow((pdssinglemethodwaschosenDataSet.ttblsinglemethodwaschosencritRow)ttblsinglemethodwaschosencritRow);
          
         
         NLogLoggerP.Trace("ICAMRSingleMethodWasChosen - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRSingleMethodWasChosen(ref pdsContext, ref pdssinglemethodwaschosen, ref pdsicamrloadusagerateanalysistt, ref pdsicamrusagesensitivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRSingleMethodWasChosen - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssinglemethodwaschosen); 
    
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt)
         {
            result.icamrloadusagerateanalysistt.Add(Icamrloadusagerateanalysistt.BuildIcamrloadusagerateanalysisttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt)
         {
            result.icamrloadusagerateprodtt.Add(Icamrloadusagerateprodtt.BuildIcamrloadusagerateprodttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrusagerateanalysisupdtt)
         {
            result.icamrusagerateanalysisupdtt.Add(Icamrusagerateanalysisupdtt.BuildIcamrusagerateanalysisupdttFromRow(row));
         }     
         if (pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle.Count > 0)
         {
            result.icamrusagesensitivitysingle = Icamrusagesensitivitysingle.BuildIcamrusagesensitivitysingleFromRow(pdsicamrusagesensitivity.ttblicamrusagesensitivitysingle[0]);
         }
                    
         if (pdssinglemethodwaschosen.ttblsinglemethodwaschosencrit.Count > 0)
         {
            result.singlemethodwaschosencrit = Singlemethodwaschosencrit.BuildSinglemethodwaschosencritFromRow(pdssinglemethodwaschosen.ttblsinglemethodwaschosencrit[0]);
         }
                    
          
         return result;
          
      }

      public void ICAMRUpdateICSWURecord(AsicadminICAMRUpdateICSWURecordRequestAPI AsicadminICAMRUpdateICSWURecordRequestAPI)
      {   
         
         var pdsloadusagehistory = new pdsloadusagehistoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadusagecriteriaRow = pdsloadusagehistory.ttblloadusagecriteria.NewttblloadusagecriteriaRow();
         Loadusagecriteria.UpdateRowFromLoadusagecriteria(ref ttblloadusagecriteriaRow, AsicadminICAMRUpdateICSWURecordRequestAPI.loadusagecriteria);
         pdsloadusagehistory.ttblloadusagecriteria.AddttblloadusagecriteriaRow((pdsloadusagehistoryDataSet.ttblloadusagecriteriaRow)ttblloadusagecriteriaRow);
          
         foreach (var obj in AsicadminICAMRUpdateICSWURecordRequestAPI.loadusagehistoryresults)
         {
            DataRow ttblloadusagehistoryresultsRow = pdsloadusagehistory.ttblloadusagehistoryresults.NewttblloadusagehistoryresultsRow();
            Loadusagehistoryresults.UpdateRowFromLoadusagehistoryresults(ref ttblloadusagehistoryresultsRow, obj);
            pdsloadusagehistory.ttblloadusagehistoryresults.AddttblloadusagehistoryresultsRow((pdsloadusagehistoryDataSet.ttblloadusagehistoryresultsRow)ttblloadusagehistoryresultsRow);
         }
          
         DataRow ttblloadusagehistorysingleRow = pdsloadusagehistory.ttblloadusagehistorysingle.NewttblloadusagehistorysingleRow();
         Loadusagehistorysingle.UpdateRowFromLoadusagehistorysingle(ref ttblloadusagehistorysingleRow, AsicadminICAMRUpdateICSWURecordRequestAPI.loadusagehistorysingle);
         pdsloadusagehistory.ttblloadusagehistorysingle.AddttblloadusagehistorysingleRow((pdsloadusagehistoryDataSet.ttblloadusagehistorysingleRow)ttblloadusagehistorysingleRow);
          
         
         NLogLoggerP.Trace("ICAMRUpdateICSWURecord - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRUpdateICSWURecord(ref pdsContext, ref pdsloadusagehistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRUpdateICSWURecord - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadusagehistory);
      }

      public IEnumerable<Recalcorderingcontrolscrit> ICAMRRecalcOrderingControls(IEnumerable<Recalcorderingcontrolscrit> recalcorderingcontrolscrit)
      {   
         var results = new List<Recalcorderingcontrolscrit>();
         
         var pdsrecalcorderingcontrols = new pdsrecalcorderingcontrolsDataSet();
            
         foreach (var obj in recalcorderingcontrolscrit)
         {
             DataRow row = pdsrecalcorderingcontrols.ttblrecalcorderingcontrolscrit.NewttblrecalcorderingcontrolscritRow();
             Recalcorderingcontrolscrit.UpdateRowFromRecalcorderingcontrolscrit(ref row, obj);
             pdsrecalcorderingcontrols.ttblrecalcorderingcontrolscrit.AddttblrecalcorderingcontrolscritRow((pdsrecalcorderingcontrolsDataSet.ttblrecalcorderingcontrolscritRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMRRecalcOrderingControls - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRRecalcOrderingControls(ref pdsContext, ref pdsrecalcorderingcontrols, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRRecalcOrderingControls - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrecalcorderingcontrols); 
    
            foreach (DataRow row in pdsrecalcorderingcontrols.ttblrecalcorderingcontrolscrit)
            {
                results.Add(Recalcorderingcontrolscrit.BuildRecalcorderingcontrolscritFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icamrresults> ICAMRGetResults(int iReportNo)
      {   
         var results = new List<Icamrresults>();
         
         var pdsicamrresults = new pdsicamrresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMRGetResults - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRGetResults(ref pdsContext,  iReportNo, out pdsicamrresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRGetResults - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrresults); 
    
            foreach (DataRow row in pdsicamrresults.ttblicamrresults)
            {
                results.Add(Icamrresults.BuildIcamrresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Loadleadtimehistresults> ICAMULoadLeadTimeHistory(Loadleadtimehistcriteria loadleadtimehistcriteria)
      {   
         var results = new List<Loadleadtimehistresults>();
         
         var pdsloadleadtimehist = new pdsloadleadtimehistDataSet();
            
         DataRow ttblloadleadtimehistcriteriaCriteria = pdsloadleadtimehist.ttblloadleadtimehistcriteria.NewttblloadleadtimehistcriteriaRow();
         Loadleadtimehistcriteria.UpdateRowFromLoadleadtimehistcriteria(ref ttblloadleadtimehistcriteriaCriteria, loadleadtimehistcriteria);
         pdsloadleadtimehist.ttblloadleadtimehistcriteria.AddttblloadleadtimehistcriteriaRow((pdsloadleadtimehistDataSet.ttblloadleadtimehistcriteriaRow)ttblloadleadtimehistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMULoadLeadTimeHistory - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMULoadLeadTimeHistory(ref pdsContext, ref pdsloadleadtimehist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMULoadLeadTimeHistory - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadleadtimehist); 
    
            foreach (DataRow row in pdsloadleadtimehist.ttblloadleadtimehistresults)
            {
                results.Add(Loadleadtimehistresults.BuildLoadleadtimehistresultsFromRow(row));
            }
            return results;
        
      }

      public AsicadminICAMURecalcLeadTimeResponseAPI ICAMURecalcLeadTime(AsicadminICAMURecalcLeadTimeRequestAPI AsicadminICAMURecalcLeadTimeRequestAPI)
      {   
         var result = new AsicadminICAMURecalcLeadTimeResponseAPI();
         
         var pdsloadleadtimehist = new pdsloadleadtimehistDataSet();
            
         string cPromptQuestion = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadleadtimehistcriteriaRow = pdsloadleadtimehist.ttblloadleadtimehistcriteria.NewttblloadleadtimehistcriteriaRow();
         Loadleadtimehistcriteria.UpdateRowFromLoadleadtimehistcriteria(ref ttblloadleadtimehistcriteriaRow, AsicadminICAMURecalcLeadTimeRequestAPI.loadleadtimehistcriteria);
         pdsloadleadtimehist.ttblloadleadtimehistcriteria.AddttblloadleadtimehistcriteriaRow((pdsloadleadtimehistDataSet.ttblloadleadtimehistcriteriaRow)ttblloadleadtimehistcriteriaRow);
          
         foreach (var obj in AsicadminICAMURecalcLeadTimeRequestAPI.loadleadtimehistresults)
         {
            DataRow ttblloadleadtimehistresultsRow = pdsloadleadtimehist.ttblloadleadtimehistresults.NewttblloadleadtimehistresultsRow();
            Loadleadtimehistresults.UpdateRowFromLoadleadtimehistresults(ref ttblloadleadtimehistresultsRow, obj);
            pdsloadleadtimehist.ttblloadleadtimehistresults.AddttblloadleadtimehistresultsRow((pdsloadleadtimehistDataSet.ttblloadleadtimehistresultsRow)ttblloadleadtimehistresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICAMURecalcLeadTime - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMURecalcLeadTime(ref pdsContext, ref pdsloadleadtimehist, out cPromptQuestion, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMURecalcLeadTime - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadleadtimehist); 
    
         if (pdsloadleadtimehist.ttblloadleadtimehistcriteria.Count > 0)
         {
            result.loadleadtimehistcriteria = Loadleadtimehistcriteria.BuildLoadleadtimehistcriteriaFromRow(pdsloadleadtimehist.ttblloadleadtimehistcriteria[0]);
         }
                    
         foreach (DataRow row in pdsloadleadtimehist.ttblloadleadtimehistresults)
         {
            result.loadleadtimehistresults.Add(Loadleadtimehistresults.BuildLoadleadtimehistresultsFromRow(row));
         }     
         result.cPromptQuestion = cPromptQuestion;
          
         return result;
          
      }

      public IEnumerable<Loadleadtimehistresults> ICAMUUpdateLeadTime(AsicadminICAMUUpdateLeadTimeRequestAPI AsicadminICAMUUpdateLeadTimeRequestAPI)
      {   
         var results = new List<Loadleadtimehistresults>();
         
         var pdsloadleadtimehist = new pdsloadleadtimehistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadleadtimehistcriteriaRow = pdsloadleadtimehist.ttblloadleadtimehistcriteria.NewttblloadleadtimehistcriteriaRow();
         Loadleadtimehistcriteria.UpdateRowFromLoadleadtimehistcriteria(ref ttblloadleadtimehistcriteriaRow, AsicadminICAMUUpdateLeadTimeRequestAPI.loadleadtimehistcriteria);
         pdsloadleadtimehist.ttblloadleadtimehistcriteria.AddttblloadleadtimehistcriteriaRow((pdsloadleadtimehistDataSet.ttblloadleadtimehistcriteriaRow)ttblloadleadtimehistcriteriaRow);
          
         foreach (var obj in AsicadminICAMUUpdateLeadTimeRequestAPI.loadleadtimehistresults)
         {
            DataRow ttblloadleadtimehistresultsRow = pdsloadleadtimehist.ttblloadleadtimehistresults.NewttblloadleadtimehistresultsRow();
            Loadleadtimehistresults.UpdateRowFromLoadleadtimehistresults(ref ttblloadleadtimehistresultsRow, obj);
            pdsloadleadtimehist.ttblloadleadtimehistresults.AddttblloadleadtimehistresultsRow((pdsloadleadtimehistDataSet.ttblloadleadtimehistresultsRow)ttblloadleadtimehistresultsRow);
         }
          
         
         NLogLoggerP.Trace("ICAMUUpdateLeadTime - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUUpdateLeadTime(ref pdsContext, ref pdsloadleadtimehist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUUpdateLeadTime - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadleadtimehist); 
    
            foreach (DataRow row in pdsloadleadtimehist.ttblloadleadtimehistresults)
            {
                results.Add(Loadleadtimehistresults.BuildLoadleadtimehistresultsFromRow(row));
            }
            return results;
        
      }

      public AsicadminICAMUInitializeValueChangeResponseAPI ICAMUInitializeValueChange(AsicadminICAMUInitializeValueChangeRequestAPI AsicadminICAMUInitializeValueChangeRequestAPI)
      {   
         var result = new AsicadminICAMUInitializeValueChangeResponseAPI();
         
         var pdsicamuinvvalchg = new pdsicamuinvvalchgDataSet();
            
         var pdsicamudropdowns = new pdsicamudropdownsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamudropdownscriteriaRow = pdsicamudropdowns.ttblicamudropdownscriteria.NewttblicamudropdownscriteriaRow();
         Icamudropdownscriteria.UpdateRowFromIcamudropdownscriteria(ref ttblicamudropdownscriteriaRow, AsicadminICAMUInitializeValueChangeRequestAPI.icamudropdownscriteria);
         pdsicamudropdowns.ttblicamudropdownscriteria.AddttblicamudropdownscriteriaRow((pdsicamudropdownsDataSet.ttblicamudropdownscriteriaRow)ttblicamudropdownscriteriaRow);
          
         DataRow ttblicamuinvvalchgcriteriaRow = pdsicamuinvvalchg.ttblicamuinvvalchgcriteria.NewttblicamuinvvalchgcriteriaRow();
         Icamuinvvalchgcriteria.UpdateRowFromIcamuinvvalchgcriteria(ref ttblicamuinvvalchgcriteriaRow, AsicadminICAMUInitializeValueChangeRequestAPI.icamuinvvalchgcriteria);
         pdsicamuinvvalchg.ttblicamuinvvalchgcriteria.AddttblicamuinvvalchgcriteriaRow((pdsicamuinvvalchgDataSet.ttblicamuinvvalchgcriteriaRow)ttblicamuinvvalchgcriteriaRow);
          
         
         NLogLoggerP.Trace("ICAMUInitializeValueChange - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUInitializeValueChange(ref pdsContext, ref pdsicamuinvvalchg, ref pdsicamudropdowns, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUInitializeValueChange - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuinvvalchg); 
    
         foreach (DataRow row in pdsicamudropdowns.ttblicamudropdownsresults)
         {
            result.icamudropdownsresults.Add(Icamudropdownsresults.BuildIcamudropdownsresultsFromRow(row));
         }     
         foreach (DataRow row in pdsicamuinvvalchg.ttblicamuinvvalchgresults)
         {
            result.icamuinvvalchgresults.Add(Icamuinvvalchgresults.BuildIcamuinvvalchgresultsFromRow(row));
         }     
         if (pdsicamuinvvalchg.ttblicamuinvvalchgsingle.Count > 0)
         {
            result.icamuinvvalchgsingle = Icamuinvvalchgsingle.BuildIcamuinvvalchgsingleFromRow(pdsicamuinvvalchg.ttblicamuinvvalchgsingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMUBuildValueChangeTableResponseAPI ICAMUBuildValueChangeTable(Icamuinvvalchgcriteria icamuinvvalchgcriteria)
      {   
         var result = new AsicadminICAMUBuildValueChangeTableResponseAPI();
         
         var pdsicamuinvvalchg = new pdsicamuinvvalchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicamuinvvalchgcriteriaCriteria = pdsicamuinvvalchg.ttblicamuinvvalchgcriteria.NewttblicamuinvvalchgcriteriaRow();
         Icamuinvvalchgcriteria.UpdateRowFromIcamuinvvalchgcriteria(ref ttblicamuinvvalchgcriteriaCriteria, icamuinvvalchgcriteria);
         pdsicamuinvvalchg.ttblicamuinvvalchgcriteria.AddttblicamuinvvalchgcriteriaRow((pdsicamuinvvalchgDataSet.ttblicamuinvvalchgcriteriaRow)ttblicamuinvvalchgcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUBuildValueChangeTable - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUBuildValueChangeTable(ref pdsContext, ref pdsicamuinvvalchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUBuildValueChangeTable - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuinvvalchg); 
    
         foreach (DataRow row in pdsicamuinvvalchg.ttblicamuinvvalchgresults)
         {
            result.icamuinvvalchgresults.Add(Icamuinvvalchgresults.BuildIcamuinvvalchgresultsFromRow(row));
         }     
         if (pdsicamuinvvalchg.ttblicamuinvvalchgsingle.Count > 0)
         {
            result.icamuinvvalchgsingle = Icamuinvvalchgsingle.BuildIcamuinvvalchgsingleFromRow(pdsicamuinvvalchg.ttblicamuinvvalchgsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMUValidateManualProductListResponseAPI ICAMUValidateManualProductList(Icamumanprodlistcriteria icamumanprodlistcriteria)
      {   
         var result = new AsicadminICAMUValidateManualProductListResponseAPI();
         
         var pdsicamumanprodlist = new pdsicamumanprodlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicamumanprodlistcriteriaCriteria = pdsicamumanprodlist.ttblicamumanprodlistcriteria.NewttblicamumanprodlistcriteriaRow();
         Icamumanprodlistcriteria.UpdateRowFromIcamumanprodlistcriteria(ref ttblicamumanprodlistcriteriaCriteria, icamumanprodlistcriteria);
         pdsicamumanprodlist.ttblicamumanprodlistcriteria.AddttblicamumanprodlistcriteriaRow((pdsicamumanprodlistDataSet.ttblicamumanprodlistcriteriaRow)ttblicamumanprodlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUValidateManualProductList - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUValidateManualProductList(ref pdsContext, ref pdsicamumanprodlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUValidateManualProductList - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumanprodlist); 
    
         if (pdsicamumanprodlist.ttblicamumanprodlistsingle.Count > 0)
         {
            result.icamumanprodlistsingle = Icamumanprodlistsingle.BuildIcamumanprodlistsingleFromRow(pdsicamumanprodlist.ttblicamumanprodlistsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMUCreateManualProductListResponseAPI ICAMUCreateManualProductList(AsicadminICAMUCreateManualProductListRequestAPI AsicadminICAMUCreateManualProductListRequestAPI)
      {   
         var result = new AsicadminICAMUCreateManualProductListResponseAPI();
         
         var pdsicamumanprodlist = new pdsicamumanprodlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamumanprodlistcriteriaRow = pdsicamumanprodlist.ttblicamumanprodlistcriteria.NewttblicamumanprodlistcriteriaRow();
         Icamumanprodlistcriteria.UpdateRowFromIcamumanprodlistcriteria(ref ttblicamumanprodlistcriteriaRow, AsicadminICAMUCreateManualProductListRequestAPI.icamumanprodlistcriteria);
         pdsicamumanprodlist.ttblicamumanprodlistcriteria.AddttblicamumanprodlistcriteriaRow((pdsicamumanprodlistDataSet.ttblicamumanprodlistcriteriaRow)ttblicamumanprodlistcriteriaRow);
          
         DataRow ttblicamumanprodlistsingleRow = pdsicamumanprodlist.ttblicamumanprodlistsingle.NewttblicamumanprodlistsingleRow();
         Icamumanprodlistsingle.UpdateRowFromIcamumanprodlistsingle(ref ttblicamumanprodlistsingleRow, AsicadminICAMUCreateManualProductListRequestAPI.icamumanprodlistsingle);
         pdsicamumanprodlist.ttblicamumanprodlistsingle.AddttblicamumanprodlistsingleRow((pdsicamumanprodlistDataSet.ttblicamumanprodlistsingleRow)ttblicamumanprodlistsingleRow);
          
         
         NLogLoggerP.Trace("ICAMUCreateManualProductList - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUCreateManualProductList(ref pdsContext, ref pdsicamumanprodlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUCreateManualProductList - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumanprodlist); 
    
         if (pdsicamumanprodlist.ttblicamumanprodlistcriteria.Count > 0)
         {
            result.icamumanprodlistcriteria = Icamumanprodlistcriteria.BuildIcamumanprodlistcriteriaFromRow(pdsicamumanprodlist.ttblicamumanprodlistcriteria[0]);
         }
                    
         if (pdsicamumanprodlist.ttblicamumanprodlistsingle.Count > 0)
         {
            result.icamumanprodlistsingle = Icamumanprodlistsingle.BuildIcamumanprodlistsingleFromRow(pdsicamumanprodlist.ttblicamumanprodlistsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMULoadExceptionResponseAPI ICAMULoadException(Icamuexceptioncriteria icamuexceptioncriteria)
      {   
         var result = new AsicadminICAMULoadExceptionResponseAPI();
         
         var pdsicamuexception = new pdsicamuexceptionDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblicamuexceptioncriteriaCriteria = pdsicamuexception.ttblicamuexceptioncriteria.NewttblicamuexceptioncriteriaRow();
         Icamuexceptioncriteria.UpdateRowFromIcamuexceptioncriteria(ref ttblicamuexceptioncriteriaCriteria, icamuexceptioncriteria);
         pdsicamuexception.ttblicamuexceptioncriteria.AddttblicamuexceptioncriteriaRow((pdsicamuexceptionDataSet.ttblicamuexceptioncriteriaRow)ttblicamuexceptioncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMULoadException - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMULoadException(ref pdsContext, ref pdsicamuexception, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMULoadException - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuexception); 
    
         if (pdsicamuexception.ttblicamuexceptionsingle.Count > 0)
         {
            result.icamuexceptionsingle = Icamuexceptionsingle.BuildIcamuexceptionsingleFromRow(pdsicamuexception.ttblicamuexceptionsingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMUUpdateUsageRateFromAnalysisTTResponseAPI ICAMUUpdateUsageRateFromAnalysisTT(AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI)
      {   
         var result = new AsicadminICAMUUpdateUsageRateFromAnalysisTTResponseAPI();
         
         var pdsicamrloadusagerateanalysistt = new pdsicamrloadusagerateanalysisttDataSet();
            
         var pdsicamrcalcmethodrate = new pdsicamrcalcmethodrateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamrcalcmethodcriteriaRow = pdsicamrcalcmethodrate.ttblicamrcalcmethodcriteria.NewttblicamrcalcmethodcriteriaRow();
         Icamrcalcmethodcriteria.UpdateRowFromIcamrcalcmethodcriteria(ref ttblicamrcalcmethodcriteriaRow, AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrcalcmethodcriteria);
         pdsicamrcalcmethodrate.ttblicamrcalcmethodcriteria.AddttblicamrcalcmethodcriteriaRow((pdsicamrcalcmethodrateDataSet.ttblicamrcalcmethodcriteriaRow)ttblicamrcalcmethodcriteriaRow);
          
         DataRow ttblicamrcalcmethodratesingleRow = pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle.NewttblicamrcalcmethodratesingleRow();
         Icamrcalcmethodratesingle.UpdateRowFromIcamrcalcmethodratesingle(ref ttblicamrcalcmethodratesingleRow, AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrcalcmethodratesingle);
         pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle.AddttblicamrcalcmethodratesingleRow((pdsicamrcalcmethodrateDataSet.ttblicamrcalcmethodratesingleRow)ttblicamrcalcmethodratesingleRow);
          
         DataRow ttblicamrcalcmethodsingleRow = pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle.NewttblicamrcalcmethodsingleRow();
         Icamrcalcmethodsingle.UpdateRowFromIcamrcalcmethodsingle(ref ttblicamrcalcmethodsingleRow, AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrcalcmethodsingle);
         pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle.AddttblicamrcalcmethodsingleRow((pdsicamrcalcmethodrateDataSet.ttblicamrcalcmethodsingleRow)ttblicamrcalcmethodsingleRow);
          
         DataRow ttblicamrcriteriaRow = pdsicamrloadusagerateanalysistt.ttblicamrcriteria.NewttblicamrcriteriaRow();
         Icamrcriteria.UpdateRowFromIcamrcriteria(ref ttblicamrcriteriaRow, AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrcriteria);
         pdsicamrloadusagerateanalysistt.ttblicamrcriteria.AddttblicamrcriteriaRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrcriteriaRow)ttblicamrcriteriaRow);
          
         foreach (var obj in AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrloadusagerateanalysistt)
         {
            DataRow ttblicamrloadusagerateanalysisttRow = pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt.NewttblicamrloadusagerateanalysisttRow();
            Icamrloadusagerateanalysistt.UpdateRowFromIcamrloadusagerateanalysistt(ref ttblicamrloadusagerateanalysisttRow, obj);
            pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt.AddttblicamrloadusagerateanalysisttRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrloadusagerateanalysisttRow)ttblicamrloadusagerateanalysisttRow);
         }
          
         foreach (var obj in AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrloadusagerateprodtt)
         {
            DataRow ttblicamrloadusagerateprodttRow = pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt.NewttblicamrloadusagerateprodttRow();
            Icamrloadusagerateprodtt.UpdateRowFromIcamrloadusagerateprodtt(ref ttblicamrloadusagerateprodttRow, obj);
            pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt.AddttblicamrloadusagerateprodttRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrloadusagerateprodttRow)ttblicamrloadusagerateprodttRow);
         }
          
         foreach (var obj in AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.icamrusagerateanalysisupdtt)
         {
            DataRow ttblicamrusagerateanalysisupdttRow = pdsicamrloadusagerateanalysistt.ttblicamrusagerateanalysisupdtt.NewttblicamrusagerateanalysisupdttRow();
            Icamrusagerateanalysisupdtt.UpdateRowFromIcamrusagerateanalysisupdtt(ref ttblicamrusagerateanalysisupdttRow, obj);
            pdsicamrloadusagerateanalysistt.ttblicamrusagerateanalysisupdtt.AddttblicamrusagerateanalysisupdttRow((pdsicamrloadusagerateanalysisttDataSet.ttblicamrusagerateanalysisupdttRow)ttblicamrusagerateanalysisupdttRow);
         }
          
         var  lUpdateCtrlFl = AsicadminICAMUUpdateUsageRateFromAnalysisTTRequestAPI.lUpdateCtrlFl;
            
         
         NLogLoggerP.Trace("ICAMUUpdateUsageRateFromAnalysisTT - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUUpdateUsageRateFromAnalysisTT( lUpdateCtrlFl, ref pdsContext, ref pdsicamrloadusagerateanalysistt, ref pdsicamrcalcmethodrate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUUpdateUsageRateFromAnalysisTT - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrloadusagerateanalysistt); 
    
         if (pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle.Count > 0)
         {
            result.icamrcalcmethodratesingle = Icamrcalcmethodratesingle.BuildIcamrcalcmethodratesingleFromRow(pdsicamrcalcmethodrate.ttblicamrcalcmethodratesingle[0]);
         }
                    
         if (pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle.Count > 0)
         {
            result.icamrcalcmethodsingle = Icamrcalcmethodsingle.BuildIcamrcalcmethodsingleFromRow(pdsicamrcalcmethodrate.ttblicamrcalcmethodsingle[0]);
         }
                    
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateanalysistt)
         {
            result.icamrloadusagerateanalysistt.Add(Icamrloadusagerateanalysistt.BuildIcamrloadusagerateanalysisttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrloadusagerateprodtt)
         {
            result.icamrloadusagerateprodtt.Add(Icamrloadusagerateprodtt.BuildIcamrloadusagerateprodttFromRow(row));
         }     
         foreach (DataRow row in pdsicamrloadusagerateanalysistt.ttblicamrusagerateanalysisupdtt)
         {
            result.icamrusagerateanalysisupdtt.Add(Icamrusagerateanalysisupdtt.BuildIcamrusagerateanalysisupdttFromRow(row));
         }     
          
         return result;
          
      }

      public Icamuusagesingle ICAMUUsageDisplayScreenFields(Icamuusagecriteria icamuusagecriteria)
      {   
         var result = new Icamuusagesingle();
         
         var pdsicamuusage = new pdsicamuusageDataSet();
            
         DataRow ttblicamuusagecriteriaCriteria = pdsicamuusage.ttblicamuusagecriteria.NewttblicamuusagecriteriaRow();
         Icamuusagecriteria.UpdateRowFromIcamuusagecriteria(ref ttblicamuusagecriteriaCriteria, icamuusagecriteria);
         pdsicamuusage.ttblicamuusagecriteria.AddttblicamuusagecriteriaRow((pdsicamuusageDataSet.ttblicamuusagecriteriaRow)ttblicamuusagecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUUsageDisplayScreenFields - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUUsageDisplayScreenFields(ref pdsContext, ref pdsicamuusage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUUsageDisplayScreenFields - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuusage); 
    
         if (pdsicamuusage.ttblicamuusagesingle.Count > 0) 
         { 
             result = Icamuusagesingle.BuildIcamuusagesingleFromRow(pdsicamuusage.ttblicamuusagesingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> ICAMUUsageUpdate(AsicadminICAMUUsageUpdateRequestAPI AsicadminICAMUUsageUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsicamuusage = new pdsicamuusageDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamuusagecriteriaRow = pdsicamuusage.ttblicamuusagecriteria.NewttblicamuusagecriteriaRow();
         Icamuusagecriteria.UpdateRowFromIcamuusagecriteria(ref ttblicamuusagecriteriaRow, AsicadminICAMUUsageUpdateRequestAPI.icamuusagecriteria);
         pdsicamuusage.ttblicamuusagecriteria.AddttblicamuusagecriteriaRow((pdsicamuusageDataSet.ttblicamuusagecriteriaRow)ttblicamuusagecriteriaRow);
          
         DataRow ttblicamuusagesingleRow = pdsicamuusage.ttblicamuusagesingle.NewttblicamuusagesingleRow();
         Icamuusagesingle.UpdateRowFromIcamuusagesingle(ref ttblicamuusagesingleRow, AsicadminICAMUUsageUpdateRequestAPI.icamuusagesingle);
         pdsicamuusage.ttblicamuusagesingle.AddttblicamuusagesingleRow((pdsicamuusageDataSet.ttblicamuusagesingleRow)ttblicamuusagesingleRow);
          
         
         NLogLoggerP.Trace("ICAMUUsageUpdate - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUUsageUpdate(ref pdsContext, ref pdsicamuusage, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUUsageUpdate - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuusage); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsicadminICAMUInitializeMainResponseAPI ICAMUInitializeMain(AsicadminICAMUInitializeMainRequestAPI AsicadminICAMUInitializeMainRequestAPI)
      {   
         var result = new AsicadminICAMUInitializeMainResponseAPI();
         
         var pdsicamumain = new pdsicamumainDataSet();
            
         var pdsicamudropdowns = new pdsicamudropdownsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamudropdownscriteriaRow = pdsicamudropdowns.ttblicamudropdownscriteria.NewttblicamudropdownscriteriaRow();
         Icamudropdownscriteria.UpdateRowFromIcamudropdownscriteria(ref ttblicamudropdownscriteriaRow, AsicadminICAMUInitializeMainRequestAPI.icamudropdownscriteria);
         pdsicamudropdowns.ttblicamudropdownscriteria.AddttblicamudropdownscriteriaRow((pdsicamudropdownsDataSet.ttblicamudropdownscriteriaRow)ttblicamudropdownscriteriaRow);
          
         DataRow ttblicamucriteriaRow = pdsicamumain.ttblicamucriteria.NewttblicamucriteriaRow();
         Icamucriteria.UpdateRowFromIcamucriteria(ref ttblicamucriteriaRow, AsicadminICAMUInitializeMainRequestAPI.icamucriteria);
         pdsicamumain.ttblicamucriteria.AddttblicamucriteriaRow((pdsicamumainDataSet.ttblicamucriteriaRow)ttblicamucriteriaRow);
          
         
         NLogLoggerP.Trace("ICAMUInitializeMain - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUInitializeMain(ref pdsContext, ref pdsicamumain, ref pdsicamudropdowns, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUInitializeMain - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumain); 
    
         foreach (DataRow row in pdsicamudropdowns.ttblicamudropdownsresults)
         {
            result.icamudropdownsresults.Add(Icamudropdownsresults.BuildIcamudropdownsresultsFromRow(row));
         }     
         foreach (DataRow row in pdsicamumain.ttblicamuresults)
         {
            result.icamuresults.Add(Icamuresults.BuildIcamuresultsFromRow(row));
         }     
         if (pdsicamumain.ttblicamusingle.Count > 0)
         {
            result.icamusingle = Icamusingle.BuildIcamusingleFromRow(pdsicamumain.ttblicamusingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMUValidateMainResponseAPI ICAMUValidateMain(AsicadminICAMUValidateMainRequestAPI AsicadminICAMUValidateMainRequestAPI)
      {   
         var result = new AsicadminICAMUValidateMainResponseAPI();
         
         var pdsicamumain = new pdsicamumainDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamucriteriaRow = pdsicamumain.ttblicamucriteria.NewttblicamucriteriaRow();
         Icamucriteria.UpdateRowFromIcamucriteria(ref ttblicamucriteriaRow, AsicadminICAMUValidateMainRequestAPI.icamucriteria);
         pdsicamumain.ttblicamucriteria.AddttblicamucriteriaRow((pdsicamumainDataSet.ttblicamucriteriaRow)ttblicamucriteriaRow);
          
         foreach (var obj in AsicadminICAMUValidateMainRequestAPI.icamuresults)
         {
            DataRow ttblicamuresultsRow = pdsicamumain.ttblicamuresults.NewttblicamuresultsRow();
            Icamuresults.UpdateRowFromIcamuresults(ref ttblicamuresultsRow, obj);
            pdsicamumain.ttblicamuresults.AddttblicamuresultsRow((pdsicamumainDataSet.ttblicamuresultsRow)ttblicamuresultsRow);
         }
          
         DataRow ttblicamusingleRow = pdsicamumain.ttblicamusingle.NewttblicamusingleRow();
         Icamusingle.UpdateRowFromIcamusingle(ref ttblicamusingleRow, AsicadminICAMUValidateMainRequestAPI.icamusingle);
         pdsicamumain.ttblicamusingle.AddttblicamusingleRow((pdsicamumainDataSet.ttblicamusingleRow)ttblicamusingleRow);
          
         
         NLogLoggerP.Trace("ICAMUValidateMain - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUValidateMain(ref pdsContext, ref pdsicamumain, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUValidateMain - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumain); 
    
         foreach (DataRow row in pdsicamumain.ttblicamuresults)
         {
            result.icamuresults.Add(Icamuresults.BuildIcamuresultsFromRow(row));
         }     
         if (pdsicamumain.ttblicamusingle.Count > 0)
         {
            result.icamusingle = Icamusingle.BuildIcamusingleFromRow(pdsicamumain.ttblicamusingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMUBuildMainListResponseAPI ICAMUBuildMainList(AsicadminICAMUBuildMainListRequestAPI AsicadminICAMUBuildMainListRequestAPI)
      {   
         var result = new AsicadminICAMUBuildMainListResponseAPI();
         
         var pdsicamumain = new pdsicamumainDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamucriteriaRow = pdsicamumain.ttblicamucriteria.NewttblicamucriteriaRow();
         Icamucriteria.UpdateRowFromIcamucriteria(ref ttblicamucriteriaRow, AsicadminICAMUBuildMainListRequestAPI.icamucriteria);
         pdsicamumain.ttblicamucriteria.AddttblicamucriteriaRow((pdsicamumainDataSet.ttblicamucriteriaRow)ttblicamucriteriaRow);
          
         DataRow ttblicamusingleRow = pdsicamumain.ttblicamusingle.NewttblicamusingleRow();
         Icamusingle.UpdateRowFromIcamusingle(ref ttblicamusingleRow, AsicadminICAMUBuildMainListRequestAPI.icamusingle);
         pdsicamumain.ttblicamusingle.AddttblicamusingleRow((pdsicamumainDataSet.ttblicamusingleRow)ttblicamusingleRow);
          
         
         NLogLoggerP.Trace("ICAMUBuildMainList - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUBuildMainList(ref pdsContext, ref pdsicamumain, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUBuildMainList - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumain); 
    
         foreach (DataRow row in pdsicamumain.ttblicamuresults)
         {
            result.icamuresults.Add(Icamuresults.BuildIcamuresultsFromRow(row));
         }     
         if (pdsicamumain.ttblicamusingle.Count > 0)
         {
            result.icamusingle = Icamusingle.BuildIcamusingleFromRow(pdsicamumain.ttblicamusingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsicadminICAMUFrozenReasonChangeResponseAPI ICAMUFrozenReasonChange(AsicadminICAMUFrozenReasonChangeRequestAPI AsicadminICAMUFrozenReasonChangeRequestAPI)
      {   
         var result = new AsicadminICAMUFrozenReasonChangeResponseAPI();
         
         var pdsicamumain = new pdsicamumainDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamucriteriaRow = pdsicamumain.ttblicamucriteria.NewttblicamucriteriaRow();
         Icamucriteria.UpdateRowFromIcamucriteria(ref ttblicamucriteriaRow, AsicadminICAMUFrozenReasonChangeRequestAPI.icamucriteria);
         pdsicamumain.ttblicamucriteria.AddttblicamucriteriaRow((pdsicamumainDataSet.ttblicamucriteriaRow)ttblicamucriteriaRow);
          
         foreach (var obj in AsicadminICAMUFrozenReasonChangeRequestAPI.icamuresults)
         {
            DataRow ttblicamuresultsRow = pdsicamumain.ttblicamuresults.NewttblicamuresultsRow();
            Icamuresults.UpdateRowFromIcamuresults(ref ttblicamuresultsRow, obj);
            pdsicamumain.ttblicamuresults.AddttblicamuresultsRow((pdsicamumainDataSet.ttblicamuresultsRow)ttblicamuresultsRow);
         }
          
         DataRow ttblicamusingleRow = pdsicamumain.ttblicamusingle.NewttblicamusingleRow();
         Icamusingle.UpdateRowFromIcamusingle(ref ttblicamusingleRow, AsicadminICAMUFrozenReasonChangeRequestAPI.icamusingle);
         pdsicamumain.ttblicamusingle.AddttblicamusingleRow((pdsicamumainDataSet.ttblicamusingleRow)ttblicamusingleRow);
          
         
         NLogLoggerP.Trace("ICAMUFrozenReasonChange - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUFrozenReasonChange(ref pdsContext, ref pdsicamumain, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUFrozenReasonChange - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumain); 
    
         foreach (DataRow row in pdsicamumain.ttblicamuresults)
         {
            result.icamuresults.Add(Icamuresults.BuildIcamuresultsFromRow(row));
         }     
         if (pdsicamumain.ttblicamusingle.Count > 0)
         {
            result.icamusingle = Icamusingle.BuildIcamusingleFromRow(pdsicamumain.ttblicamusingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMUSetFieldsBasedOnStatusResponseAPI ICAMUSetFieldsBasedOnStatus(AsicadminICAMUSetFieldsBasedOnStatusRequestAPI AsicadminICAMUSetFieldsBasedOnStatusRequestAPI)
      {   
         var result = new AsicadminICAMUSetFieldsBasedOnStatusResponseAPI();
         
         var pdsicamumain = new pdsicamumainDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamucriteriaRow = pdsicamumain.ttblicamucriteria.NewttblicamucriteriaRow();
         Icamucriteria.UpdateRowFromIcamucriteria(ref ttblicamucriteriaRow, AsicadminICAMUSetFieldsBasedOnStatusRequestAPI.icamucriteria);
         pdsicamumain.ttblicamucriteria.AddttblicamucriteriaRow((pdsicamumainDataSet.ttblicamucriteriaRow)ttblicamucriteriaRow);
          
         foreach (var obj in AsicadminICAMUSetFieldsBasedOnStatusRequestAPI.icamuresults)
         {
            DataRow ttblicamuresultsRow = pdsicamumain.ttblicamuresults.NewttblicamuresultsRow();
            Icamuresults.UpdateRowFromIcamuresults(ref ttblicamuresultsRow, obj);
            pdsicamumain.ttblicamuresults.AddttblicamuresultsRow((pdsicamumainDataSet.ttblicamuresultsRow)ttblicamuresultsRow);
         }
          
         DataRow ttblicamusingleRow = pdsicamumain.ttblicamusingle.NewttblicamusingleRow();
         Icamusingle.UpdateRowFromIcamusingle(ref ttblicamusingleRow, AsicadminICAMUSetFieldsBasedOnStatusRequestAPI.icamusingle);
         pdsicamumain.ttblicamusingle.AddttblicamusingleRow((pdsicamumainDataSet.ttblicamusingleRow)ttblicamusingleRow);
          
         
         NLogLoggerP.Trace("ICAMUSetFieldsBasedOnStatus - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUSetFieldsBasedOnStatus(ref pdsContext, ref pdsicamumain, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUSetFieldsBasedOnStatus - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumain); 
    
         foreach (DataRow row in pdsicamumain.ttblicamuresults)
         {
            result.icamuresults.Add(Icamuresults.BuildIcamuresultsFromRow(row));
         }     
         if (pdsicamumain.ttblicamusingle.Count > 0)
         {
            result.icamusingle = Icamusingle.BuildIcamusingleFromRow(pdsicamumain.ttblicamusingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMUInitializeMassUpdateResponseAPI ICAMUInitializeMassUpdate()
      {   
         var result = new AsicadminICAMUInitializeMassUpdateResponseAPI();
         
         var pdsicamumassupdateinit = new pdsicamumassupdateinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUInitializeMassUpdate - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUInitializeMassUpdate(ref pdsContext, out pdsicamumassupdateinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUInitializeMassUpdate - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumassupdateinit); 
    
         if (pdsicamumassupdateinit.ttblicamumassupdatedropdowns.Count > 0)
         {
            result.icamumassupdatedropdowns = Icamumassupdatedropdowns.BuildIcamumassupdatedropdownsFromRow(pdsicamumassupdateinit.ttblicamumassupdatedropdowns[0]);
         }
                    
         if (pdsicamumassupdateinit.ttblicamumassupdatesingle.Count > 0)
         {
            result.icamumassupdatesingle = Icamumassupdatesingle.BuildIcamumassupdatesingleFromRow(pdsicamumassupdateinit.ttblicamumassupdatesingle[0]);
         }
                    
          
         return result;
          
      }

      public AsicadminICAMUMassUpdateResponseAPI ICAMUMassUpdate(AsicadminICAMUMassUpdateRequestAPI AsicadminICAMUMassUpdateRequestAPI)
      {   
         var result = new AsicadminICAMUMassUpdateResponseAPI();
         
         var pdsicamumassupdate = new pdsicamumassupdateDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblicamumassupdateRow = pdsicamumassupdate.ttblicamumassupdate.NewttblicamumassupdateRow();
         Icamumassupdate.UpdateRowFromIcamumassupdate(ref ttblicamumassupdateRow, AsicadminICAMUMassUpdateRequestAPI.icamumassupdate);
         pdsicamumassupdate.ttblicamumassupdate.AddttblicamumassupdateRow((pdsicamumassupdateDataSet.ttblicamumassupdateRow)ttblicamumassupdateRow);
          
         DataRow ttblicamumassupdatecriteriaRow = pdsicamumassupdate.ttblicamumassupdatecriteria.NewttblicamumassupdatecriteriaRow();
         Icamumassupdatecriteria.UpdateRowFromIcamumassupdatecriteria(ref ttblicamumassupdatecriteriaRow, AsicadminICAMUMassUpdateRequestAPI.icamumassupdatecriteria);
         pdsicamumassupdate.ttblicamumassupdatecriteria.AddttblicamumassupdatecriteriaRow((pdsicamumassupdateDataSet.ttblicamumassupdatecriteriaRow)ttblicamumassupdatecriteriaRow);
          
         
         NLogLoggerP.Trace("ICAMUMassUpdate - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUMassUpdate(ref pdsContext, ref pdsicamumassupdate, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUMassUpdate - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamumassupdate); 
    
         if (pdsicamumassupdate.ttblicamumassupdatecriteria.Count > 0)
         {
            result.icamumassupdatecriteria = Icamumassupdatecriteria.BuildIcamumassupdatecriteriaFromRow(pdsicamumassupdate.ttblicamumassupdatecriteria[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void ICAMUDeleteRecord(Icamudeleterecordcriteria icamudeleterecordcriteria)
      {   
         
         var pdsicamudeleterecord = new pdsicamudeleterecordDataSet();
            
         DataRow ttblicamudeleterecordcriteriaCriteria = pdsicamudeleterecord.ttblicamudeleterecordcriteria.NewttblicamudeleterecordcriteriaRow();
         Icamudeleterecordcriteria.UpdateRowFromIcamudeleterecordcriteria(ref ttblicamudeleterecordcriteriaCriteria, icamudeleterecordcriteria);
         pdsicamudeleterecord.ttblicamudeleterecordcriteria.AddttblicamudeleterecordcriteriaRow((pdsicamudeleterecordDataSet.ttblicamudeleterecordcriteriaRow)ttblicamudeleterecordcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUDeleteRecord - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUDeleteRecord(ref pdsContext,  pdsicamudeleterecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUDeleteRecord - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamudeleterecord);
      }

      public AsicadminICAMUFilterImportDataResponseAPI ICAMUFilterImportData(IEnumerable<Icamuimportfileraw> icamuimportfileraw)
      {   
         var result = new AsicadminICAMUFilterImportDataResponseAPI();
         
         var pdsicamuimportfile = new pdsicamuimportfileDataSet();
            
         foreach (var obj in icamuimportfileraw)
         {
             DataRow row = pdsicamuimportfile.ttblicamuimportfileraw.NewttblicamuimportfilerawRow();
             Icamuimportfileraw.UpdateRowFromIcamuimportfileraw(ref row, obj);
             pdsicamuimportfile.ttblicamuimportfileraw.AddttblicamuimportfilerawRow((pdsicamuimportfileDataSet.ttblicamuimportfilerawRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUFilterImportData - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUFilterImportData(ref pdsContext, ref pdsicamuimportfile, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUFilterImportData - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuimportfile); 
    
         foreach (DataRow row in pdsicamuimportfile.ttblicamuimportexcelerrors)
         {
            result.icamuimportexcelerrors.Add(Icamuimportexcelerrors.BuildIcamuimportexcelerrorsFromRow(row));
         }     
         foreach (DataRow row in pdsicamuimportfile.ttblicamuimportfilefiltered)
         {
            result.icamuimportfilefiltered.Add(Icamuimportfilefiltered.BuildIcamuimportfilefilteredFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> ICAMUImportFileOK(IEnumerable<Icamuimportfilefiltered> icamuimportfilefiltered)
      {   
         var results = new List<Messaging>();
         
         var pdsicamuimportfile = new pdsicamuimportfileDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in icamuimportfilefiltered)
         {
             DataRow row = pdsicamuimportfile.ttblicamuimportfilefiltered.NewttblicamuimportfilefilteredRow();
             Icamuimportfilefiltered.UpdateRowFromIcamuimportfilefiltered(ref row, obj);
             pdsicamuimportfile.ttblicamuimportfilefiltered.AddttblicamuimportfilefilteredRow((pdsicamuimportfileDataSet.ttblicamuimportfilefilteredRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICAMUImportFileOK - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMUImportFileOK(ref pdsContext,  pdsicamuimportfile, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMUImportFileOK - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamuimportfile); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void ICAMRDeleteRecords(AsicadminICAMRDeleteRecordsRequestAPI AsicadminICAMRDeleteRecordsRequestAPI)
      {   
         
         var pdsicamrupdselectmethod = new pdsicamrupdselectmethodDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsicadminICAMRDeleteRecordsRequestAPI.icamrupdselectmethod)
         {
            DataRow ttblicamrupdselectmethodRow = pdsicamrupdselectmethod.ttblicamrupdselectmethod.NewttblicamrupdselectmethodRow();
            Icamrupdselectmethod.UpdateRowFromIcamrupdselectmethod(ref ttblicamrupdselectmethodRow, obj);
            pdsicamrupdselectmethod.ttblicamrupdselectmethod.AddttblicamrupdselectmethodRow((pdsicamrupdselectmethodDataSet.ttblicamrupdselectmethodRow)ttblicamrupdselectmethodRow);
         }
          
         DataRow ttblicamrupdselectmethodcriteriaRow = pdsicamrupdselectmethod.ttblicamrupdselectmethodcriteria.NewttblicamrupdselectmethodcriteriaRow();
         Icamrupdselectmethodcriteria.UpdateRowFromIcamrupdselectmethodcriteria(ref ttblicamrupdselectmethodcriteriaRow, AsicadminICAMRDeleteRecordsRequestAPI.icamrupdselectmethodcriteria);
         pdsicamrupdselectmethod.ttblicamrupdselectmethodcriteria.AddttblicamrupdselectmethodcriteriaRow((pdsicamrupdselectmethodDataSet.ttblicamrupdselectmethodcriteriaRow)ttblicamrupdselectmethodcriteriaRow);
          
         
         NLogLoggerP.Trace("ICAMRDeleteRecords - Asicadmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicadminproxy = this.proxyAppObject.CreatePO_asicadminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicadminproxy.ICAMRDeleteRecords(ref pdsContext,  pdsicamrupdselectmethod, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICAMRDeleteRecords - Asicadmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicamrupdselectmethod);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  