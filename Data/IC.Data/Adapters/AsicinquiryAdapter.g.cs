//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Adapters
{
   using com.infor.sxproxy.icproxy;
   using com.infor.sxproxy.icproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscreatelotstt;
   using Models.Pdsorderlotcuts;
   using Models.Pdsloadexcptusagett;
   using Models.Pdsicwhseavail;
   using Models.Pdsicwhseavailwhsetypes;
   using Models.Pdsloadexcptreceiptstt;
   using Models.Pdsicir;
   using Models.Pdsicirquorders;
   using Models.Pdsiciccriteria;
   using Models.Pdsicicmasterlist;
   using Models.Pdsicictransactionlist;
   using Models.Pdsicicallocationlist;
   using Models.Pdsicicvendorlist;
   using Models.Pdsicimbundlescontrol;
   using Models.Pdsicimbundles;
   using Models.Pdsicimcomponents;
   using Models.Pdsicsecretrieve;
   using Models.Complex;

   public partial class AsicinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private ICProxyAppObject proxyAppObject;
      
      public AsicinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ICProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsicinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Createlotsttresults> CreateLotsTT(Createlotsttcriteria createlotsttcriteria)
      {   
         var results = new List<Createlotsttresults>();
         
         var pdscreatelotstt = new pdscreatelotsttDataSet();
            
         DataRow ttblcreatelotsttcriteriaCriteria = pdscreatelotstt.ttblcreatelotsttcriteria.NewttblcreatelotsttcriteriaRow();
         Createlotsttcriteria.UpdateRowFromCreatelotsttcriteria(ref ttblcreatelotsttcriteriaCriteria, createlotsttcriteria);
         pdscreatelotstt.ttblcreatelotsttcriteria.AddttblcreatelotsttcriteriaRow((pdscreatelotsttDataSet.ttblcreatelotsttcriteriaRow)ttblcreatelotsttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateLotsTT - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.CreateLotsTT(ref pdsContext, ref pdscreatelotstt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateLotsTT - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreatelotstt); 
    
            foreach (DataRow row in pdscreatelotstt.ttblcreatelotsttresults)
            {
                results.Add(Createlotsttresults.BuildCreatelotsttresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Orderlotcutresults> GetOrderLotCutData(Orderlotcutcriteria orderlotcutcriteria)
      {   
         var results = new List<Orderlotcutresults>();
         
         var pdsorderlotcuts = new pdsorderlotcutsDataSet();
            
         DataRow ttblorderlotcutcriteriaCriteria = pdsorderlotcuts.ttblorderlotcutcriteria.NewttblorderlotcutcriteriaRow();
         Orderlotcutcriteria.UpdateRowFromOrderlotcutcriteria(ref ttblorderlotcutcriteriaCriteria, orderlotcutcriteria);
         pdsorderlotcuts.ttblorderlotcutcriteria.AddttblorderlotcutcriteriaRow((pdsorderlotcutsDataSet.ttblorderlotcutcriteriaRow)ttblorderlotcutcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderLotCutData - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.GetOrderLotCutData(ref pdsContext, ref pdsorderlotcuts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderLotCutData - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsorderlotcuts); 
    
            foreach (DataRow row in pdsorderlotcuts.ttblorderlotcutresults)
            {
                results.Add(Orderlotcutresults.BuildOrderlotcutresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Loadexcptusagettresults> LoadExceptionUsageTT(Loadexcptusagettcriteria loadexcptusagettcriteria)
      {   
         var results = new List<Loadexcptusagettresults>();
         
         var pdsloadexcptusagett = new pdsloadexcptusagettDataSet();
            
         DataRow ttblloadexcptusagettcriteriaCriteria = pdsloadexcptusagett.ttblloadexcptusagettcriteria.NewttblloadexcptusagettcriteriaRow();
         Loadexcptusagettcriteria.UpdateRowFromLoadexcptusagettcriteria(ref ttblloadexcptusagettcriteriaCriteria, loadexcptusagettcriteria);
         pdsloadexcptusagett.ttblloadexcptusagettcriteria.AddttblloadexcptusagettcriteriaRow((pdsloadexcptusagettDataSet.ttblloadexcptusagettcriteriaRow)ttblloadexcptusagettcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadExceptionUsageTT - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.LoadExceptionUsageTT(ref pdsContext, ref pdsloadexcptusagett, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadExceptionUsageTT - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadexcptusagett); 
    
            foreach (DataRow row in pdsloadexcptusagett.ttblloadexcptusagettresults)
            {
                results.Add(Loadexcptusagettresults.BuildLoadexcptusagettresultsFromRow(row));
            }
            return results;
        
      }

      public string ICCatalogGetUPC(AsicinquiryICCatalogGetUPCRequestAPI AsicinquiryICCatalogGetUPCRequestAPI)
      {   
          
         string cErrorMessage = string.Empty;
         string cUPC = string.Empty;
   
         var  cCatalog = AsicinquiryICCatalogGetUPCRequestAPI.cCatalog;
            
         
         NLogLoggerP.Trace("ICCatalogGetUPC - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICCatalogGetUPC(ref pdsContext,  cCatalog, out cErrorMessage, out cUPC);
               }
            });
         NLogLoggerP.Info("ICCatalogGetUPC - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cUPC;
      
      }

      public string ICWhseProductGetUPC(AsicinquiryICWhseProductGetUPCRequestAPI AsicinquiryICWhseProductGetUPCRequestAPI)
      {   
          
         string cErrorMessage = string.Empty;
         string cUPC = string.Empty;
   
         var  cWhse = AsicinquiryICWhseProductGetUPCRequestAPI.cWhse;
            
         var  cProduct = AsicinquiryICWhseProductGetUPCRequestAPI.cProduct;
            
         var  dVendorNumber = AsicinquiryICWhseProductGetUPCRequestAPI.dVendorNumber;
            
         
         NLogLoggerP.Trace("ICWhseProductGetUPC - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICWhseProductGetUPC(ref pdsContext,  cWhse,  cProduct,  dVendorNumber, out cErrorMessage, out cUPC);
               }
            });
         NLogLoggerP.Info("ICWhseProductGetUPC - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cUPC;
      
      }

      public IEnumerable<Icwhseavailresults> ICWhseAvail(Icwhseavailcriteria icwhseavailcriteria)
      {   
         var results = new List<Icwhseavailresults>();
         
         var pdsicwhseavail = new pdsicwhseavailDataSet();
            
         DataRow ttblicwhseavailcriteriaCriteria = pdsicwhseavail.ttblicwhseavailcriteria.NewttblicwhseavailcriteriaRow();
         Icwhseavailcriteria.UpdateRowFromIcwhseavailcriteria(ref ttblicwhseavailcriteriaCriteria, icwhseavailcriteria);
         pdsicwhseavail.ttblicwhseavailcriteria.AddttblicwhseavailcriteriaRow((pdsicwhseavailDataSet.ttblicwhseavailcriteriaRow)ttblicwhseavailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICWhseAvail - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICWhseAvail(ref pdsContext, ref pdsicwhseavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWhseAvail - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwhseavail); 
    
            foreach (DataRow row in pdsicwhseavail.ttblicwhseavailresults)
            {
                results.Add(Icwhseavailresults.BuildIcwhseavailresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icwhseavailwhsetypes> ICWhseAvailWhseTypes()
      {   
         var results = new List<Icwhseavailwhsetypes>();
         
         var pdsicwhseavailwhsetypes = new pdsicwhseavailwhsetypesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICWhseAvailWhseTypes - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICWhseAvailWhseTypes(ref pdsContext, out pdsicwhseavailwhsetypes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICWhseAvailWhseTypes - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicwhseavailwhsetypes); 
    
            foreach (DataRow row in pdsicwhseavailwhsetypes.ttblicwhseavailwhsetypes)
            {
                results.Add(Icwhseavailwhsetypes.BuildIcwhseavailwhsetypesFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Loadexcptreceiptsttresults> LoadExceptionReceiptsTT(Loadexcptreceiptsttcriteria loadexcptreceiptsttcriteria)
      {   
         var results = new List<Loadexcptreceiptsttresults>();
         
         var pdsloadexcptreceiptstt = new pdsloadexcptreceiptsttDataSet();
            
         DataRow ttblloadexcptreceiptsttcriteriaCriteria = pdsloadexcptreceiptstt.ttblloadexcptreceiptsttcriteria.NewttblloadexcptreceiptsttcriteriaRow();
         Loadexcptreceiptsttcriteria.UpdateRowFromLoadexcptreceiptsttcriteria(ref ttblloadexcptreceiptsttcriteriaCriteria, loadexcptreceiptsttcriteria);
         pdsloadexcptreceiptstt.ttblloadexcptreceiptsttcriteria.AddttblloadexcptreceiptsttcriteriaRow((pdsloadexcptreceiptsttDataSet.ttblloadexcptreceiptsttcriteriaRow)ttblloadexcptreceiptsttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadExceptionReceiptsTT - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.LoadExceptionReceiptsTT(ref pdsContext, ref pdsloadexcptreceiptstt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadExceptionReceiptsTT - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadexcptreceiptstt); 
    
            foreach (DataRow row in pdsloadexcptreceiptstt.ttblloadexcptreceiptsttresults)
            {
                results.Add(Loadexcptreceiptsttresults.BuildLoadexcptreceiptsttresultsFromRow(row));
            }
            return results;
        
      }

      public AsicinquiryICIRRetrieveResponseAPI ICIRRetrieve(Icircriteria icircriteria)
      {   
         var result = new AsicinquiryICIRRetrieveResponseAPI();
         
         var pdsicir = new pdsicirDataSet();
            
         DataRow ttblicircriteriaCriteria = pdsicir.ttblicircriteria.NewttblicircriteriaRow();
         Icircriteria.UpdateRowFromIcircriteria(ref ttblicircriteriaCriteria, icircriteria);
         pdsicir.ttblicircriteria.AddttblicircriteriaRow((pdsicirDataSet.ttblicircriteriaRow)ttblicircriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ICIRRetrieve - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICIRRetrieve(ref pdsContext, ref pdsicir, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ICIRRetrieve - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicir); 
    
         foreach (DataRow row in pdsicir.ttblicirresults)
         {
            result.icirresults.Add(Icirresults.BuildIcirresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Icirquorders> ICIRQUOrders(IEnumerable<Icirresults> icirresults)
      {   
         var results = new List<Icirquorders>();
         
         var pdsicir = new pdsicirDataSet();
            
         var pdsicirquorders = new pdsicirquordersDataSet();
            
         foreach (var obj in icirresults)
         {
             DataRow row = pdsicir.ttblicirresults.NewttblicirresultsRow();
             Icirresults.UpdateRowFromIcirresults(ref row, obj);
             pdsicir.ttblicirresults.AddttblicirresultsRow((pdsicirDataSet.ttblicirresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICIRQUOrders - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICIRQUOrders(ref pdsContext,  pdsicir, out pdsicirquorders, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICIRQUOrders - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicir); 
    
            foreach (DataRow row in pdsicirquorders.ttblicirquorders)
            {
                results.Add(Icirquorders.BuildIcirquordersFromRow(row));
            }
            return results;
        
      }

      public AsicinquiryICICBuildMasterListResponseAPI ICICBuildMasterList(Iciccriteria iciccriteria)
      {   
         var result = new AsicinquiryICICBuildMasterListResponseAPI();
         
         var pdsiciccriteria = new pdsiciccriteriaDataSet();
            
         var pdsicicmasterlist = new pdsicicmasterlistDataSet();
            
         DataRow ttbliciccriteriaCriteria = pdsiciccriteria.ttbliciccriteria.NewttbliciccriteriaRow();
         Iciccriteria.UpdateRowFromIciccriteria(ref ttbliciccriteriaCriteria, iciccriteria);
         pdsiciccriteria.ttbliciccriteria.AddttbliciccriteriaRow((pdsiciccriteriaDataSet.ttbliciccriteriaRow)ttbliciccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICICBuildMasterList - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICICBuildMasterList(ref pdsContext,  pdsiciccriteria, out pdsicicmasterlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICICBuildMasterList - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiciccriteria); 
    
         foreach (DataRow row in pdsicicmasterlist.ttblicicmasterlist)
         {
            result.icicmasterlist.Add(Icicmasterlist.BuildIcicmasterlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicinquiryICICBuildTransactionListResponseAPI ICICBuildTransactionList(Iciccriteria iciccriteria)
      {   
         var result = new AsicinquiryICICBuildTransactionListResponseAPI();
         
         var pdsiciccriteria = new pdsiciccriteriaDataSet();
            
         var pdsicictransactionlist = new pdsicictransactionlistDataSet();
            
         DataRow ttbliciccriteriaCriteria = pdsiciccriteria.ttbliciccriteria.NewttbliciccriteriaRow();
         Iciccriteria.UpdateRowFromIciccriteria(ref ttbliciccriteriaCriteria, iciccriteria);
         pdsiciccriteria.ttbliciccriteria.AddttbliciccriteriaRow((pdsiciccriteriaDataSet.ttbliciccriteriaRow)ttbliciccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICICBuildTransactionList - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICICBuildTransactionList(ref pdsContext,  pdsiciccriteria, out pdsicictransactionlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICICBuildTransactionList - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiciccriteria); 
    
         foreach (DataRow row in pdsicictransactionlist.ttblicictransactionlist)
         {
            result.icictransactionlist.Add(Icictransactionlist.BuildIcictransactionlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicinquiryICICBuildAllocationListResponseAPI ICICBuildAllocationList(Iciccriteria iciccriteria)
      {   
         var result = new AsicinquiryICICBuildAllocationListResponseAPI();
         
         var pdsiciccriteria = new pdsiciccriteriaDataSet();
            
         var pdsicicallocationlist = new pdsicicallocationlistDataSet();
            
         DataRow ttbliciccriteriaCriteria = pdsiciccriteria.ttbliciccriteria.NewttbliciccriteriaRow();
         Iciccriteria.UpdateRowFromIciccriteria(ref ttbliciccriteriaCriteria, iciccriteria);
         pdsiciccriteria.ttbliciccriteria.AddttbliciccriteriaRow((pdsiciccriteriaDataSet.ttbliciccriteriaRow)ttbliciccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICICBuildAllocationList - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICICBuildAllocationList(ref pdsContext,  pdsiciccriteria, out pdsicicallocationlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICICBuildAllocationList - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiciccriteria); 
    
         foreach (DataRow row in pdsicicallocationlist.ttblicicallocationlist)
         {
            result.icicallocationlist.Add(Icicallocationlist.BuildIcicallocationlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicinquiryICICBuildVendorListResponseAPI ICICBuildVendorList(Iciccriteria iciccriteria)
      {   
         var result = new AsicinquiryICICBuildVendorListResponseAPI();
         
         var pdsiciccriteria = new pdsiciccriteriaDataSet();
            
         var pdsicicvendorlist = new pdsicicvendorlistDataSet();
            
         DataRow ttbliciccriteriaCriteria = pdsiciccriteria.ttbliciccriteria.NewttbliciccriteriaRow();
         Iciccriteria.UpdateRowFromIciccriteria(ref ttbliciccriteriaCriteria, iciccriteria);
         pdsiciccriteria.ttbliciccriteria.AddttbliciccriteriaRow((pdsiciccriteriaDataSet.ttbliciccriteriaRow)ttbliciccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICICBuildVendorList - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICICBuildVendorList(ref pdsContext,  pdsiciccriteria, out pdsicicvendorlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICICBuildVendorList - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiciccriteria); 
    
         foreach (DataRow row in pdsicicvendorlist.ttblicicvendorlist)
         {
            result.icicvendorlist.Add(Icicvendorlist.BuildIcicvendorlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsicinquiryICIMBundlesLoadResponseAPI ICIMBundlesLoad(AsicinquiryICIMBundlesLoadRequestAPI AsicinquiryICIMBundlesLoadRequestAPI)
      {   
         var result = new AsicinquiryICIMBundlesLoadResponseAPI();
         
         var pdsicimbundlescontrol = new pdsicimbundlescontrolDataSet();
            
         var pdsicimbundles = new pdsicimbundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cProd = AsicinquiryICIMBundlesLoadRequestAPI.cProd;
            
         var  cWhse = AsicinquiryICIMBundlesLoadRequestAPI.cWhse;
            
         var  cBundleStatusCd = AsicinquiryICIMBundlesLoadRequestAPI.cBundleStatusCd;
            
         
         NLogLoggerP.Trace("ICIMBundlesLoad - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICIMBundlesLoad(ref pdsContext,  cProd,  cWhse,  cBundleStatusCd, out pdsicimbundlescontrol, out pdsicimbundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICIMBundlesLoad - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicimbundlescontrol); 
    
         if (pdsicimbundlescontrol.ttblicimbundlescontrol.Count > 0)
         {
            result.icimbundlescontrol = Icimbundlescontrol.BuildIcimbundlescontrolFromRow(pdsicimbundlescontrol.ttblicimbundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdsicimbundles.ttblicimbundles)
         {
            result.icimbundles.Add(Icimbundles.BuildIcimbundlesFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Icimcomponents> ICIMComponentsLoad(Icimbundles icimbundles)
      {   
         var results = new List<Icimcomponents>();
         
         var pdsicimbundles = new pdsicimbundlesDataSet();
            
         var pdsicimcomponents = new pdsicimcomponentsDataSet();
            
         DataRow ttblicimbundlesCriteria = pdsicimbundles.ttblicimbundles.NewttblicimbundlesRow();
         Icimbundles.UpdateRowFromIcimbundles(ref ttblicimbundlesCriteria, icimbundles);
         pdsicimbundles.ttblicimbundles.AddttblicimbundlesRow((pdsicimbundlesDataSet.ttblicimbundlesRow)ttblicimbundlesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICIMComponentsLoad - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICIMComponentsLoad(ref pdsContext,  pdsicimbundles, out pdsicimcomponents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICIMComponentsLoad - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicimbundles); 
    
            foreach (DataRow row in pdsicimcomponents.ttblicimcomponents)
            {
                results.Add(Icimcomponents.BuildIcimcomponentsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Icsecretrieveresults> ICSECRetrieve(Icsecretrievecriteria icsecretrievecriteria)
      {   
         var results = new List<Icsecretrieveresults>();
         
         var pdsicsecretrieve = new pdsicsecretrieveDataSet();
            
         DataRow ttblicsecretrievecriteriaCriteria = pdsicsecretrieve.ttblicsecretrievecriteria.NewttblicsecretrievecriteriaRow();
         Icsecretrievecriteria.UpdateRowFromIcsecretrievecriteria(ref ttblicsecretrievecriteriaCriteria, icsecretrievecriteria);
         pdsicsecretrieve.ttblicsecretrievecriteria.AddttblicsecretrievecriteriaRow((pdsicsecretrieveDataSet.ttblicsecretrievecriteriaRow)ttblicsecretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ICSECRetrieve - Asicinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsicinquiryproxy = this.proxyAppObject.CreatePO_asicinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsicinquiryproxy.ICSECRetrieve(ref pdsContext, ref pdsicsecretrieve, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ICSECRetrieve - Asicinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicsecretrieve); 
    
            foreach (DataRow row in pdsicsecretrieve.ttblicsecretrieveresults)
            {
                results.Add(Icsecretrieveresults.BuildIcsecretrieveresultsFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  