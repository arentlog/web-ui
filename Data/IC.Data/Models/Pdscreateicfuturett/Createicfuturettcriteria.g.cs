//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.IC.Data.Models.Pdscreateicfuturett
{
   [ModelName("Infor.Sxe.IC.Data.Models.Pdscreateicfuturett.Createicfuturettcriteria")]
   public partial class Createicfuturettcriteria : ModelBase
   {
      [StringValidationAttribute]
      public string prod { get; set; }
      [StringValidationAttribute]
      public string whse { get; set; }
      [StringValidationAttribute]
      public string unit { get; set; }
      [StringValidationAttribute]
      public string doctypes { get; set; }
      public DateTime? throughdt { get; set; }
      public bool backordonly { get; set; }
      public int recordcountlimit { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Createicfuturettcriteria BuildCreateicfuturettcriteriaFromRow(DataRow row)
      {
         Createicfuturettcriteria entity = new Createicfuturettcriteria();
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.unit = row.IsNull("unit") ? string.Empty : row.Field<string>("unit");
         entity.doctypes = row.IsNull("doctypes") ? string.Empty : row.Field<string>("doctypes");
         entity.throughdt = row.Field<DateTime?>("throughdt");
         entity.backordonly = row.Field<bool>("backordonly");
         entity.recordcountlimit = row.IsNull("recordcountlimit") ? 0 : row.Field<int>("recordcountlimit");
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromCreateicfuturettcriteria(ref DataRow row, Createicfuturettcriteria entity)
      {
         row.SetField("prod", entity.prod);
         row.SetField("whse", entity.whse);
         row.SetField("unit", entity.unit);
         row.SetField("doctypes", entity.doctypes);
         row.SetField("throughdt", entity.throughdt);
         row.SetField("backordonly", entity.backordonly);
         row.SetField("recordcountlimit", entity.recordcountlimit);
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
