//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.IC.Data.Models.Pdsicamrloadusagerateanalysistt
{
   [ModelName("Infor.Sxe.IC.Data.Models.Pdsicamrloadusagerateanalysistt.Icamrloadusagerateanalysistt")]
   public partial class Icamrloadusagerateanalysistt : ModelBase, IUserFields
   {
      public int cono { get; set; }
      public decimal linept { get; set; }
      public bool newmethodfl { get; set; }
      [StringValidationAttribute]
      public string operinit { get; set; }
      public decimal orderpt { get; set; }
      public decimal ordqtyin { get; set; }
      public decimal ordqtyout { get; set; }
      [StringValidationAttribute]
      public string overreasin { get; set; }
      [StringValidationAttribute]
      public string overreasout { get; set; }
      [StringValidationAttribute]
      public string prod { get; set; }
      public int reportno { get; set; }
      public decimal safeallamt { get; set; }
      public decimal safeallpct { get; set; }
      [StringValidationAttribute]
      public string safeallty { get; set; }
      public DateTime? transdt { get; set; }
      [StringValidationAttribute]
      public string transproc { get; set; }
      [StringValidationAttribute]
      public string transtm { get; set; }
      [StringValidationAttribute]
      public string usagectrl { get; set; }
      public decimal usagerate { get; set; }
      [StringValidationAttribute]
      public string user1 { get; set; }
      [StringValidationAttribute]
      public string user2 { get; set; }
      [StringValidationAttribute]
      public string user3 { get; set; }
      [StringValidationAttribute]
      public string user4 { get; set; }
      [StringValidationAttribute]
      public string user5 { get; set; }
      public decimal? user6 { get; set; }
      public decimal? user7 { get; set; }
      public DateTime? user8 { get; set; }
      public DateTime? user9 { get; set; }
      public int usgmths { get; set; }
      [StringValidationAttribute]
      public string whse { get; set; }
      public long icamapmrecid { get; set; }
      [StringValidationAttribute]
      public string methodwords { get; set; }
      [StringValidationAttribute]
      public string selectty { get; set; }
      public decimal orderqty { get; set; }
      public decimal pct { get; set; }
      [StringValidationAttribute]
      public string icamapmRowID { get; set; }
      public int ttblseqno { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Icamrloadusagerateanalysistt BuildIcamrloadusagerateanalysisttFromRow(DataRow row)
      {
         Icamrloadusagerateanalysistt entity = new Icamrloadusagerateanalysistt();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.linept = row.IsNull("linept") ? decimal.Zero : row.Field<decimal>("linept");
         entity.newmethodfl = row.Field<bool>("newmethodfl");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.orderpt = row.IsNull("orderpt") ? decimal.Zero : row.Field<decimal>("orderpt");
         entity.ordqtyin = row.IsNull("ordqtyin") ? decimal.Zero : row.Field<decimal>("ordqtyin");
         entity.ordqtyout = row.IsNull("ordqtyout") ? decimal.Zero : row.Field<decimal>("ordqtyout");
         entity.overreasin = row.IsNull("overreasin") ? string.Empty : row.Field<string>("overreasin");
         entity.overreasout = row.IsNull("overreasout") ? string.Empty : row.Field<string>("overreasout");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.reportno = row.IsNull("reportno") ? 0 : row.Field<int>("reportno");
         entity.safeallamt = row.IsNull("safeallamt") ? decimal.Zero : row.Field<decimal>("safeallamt");
         entity.safeallpct = row.IsNull("safeallpct") ? decimal.Zero : row.Field<decimal>("safeallpct");
         entity.safeallty = row.IsNull("safeallty") ? string.Empty : row.Field<string>("safeallty");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.usagectrl = row.IsNull("usagectrl") ? string.Empty : row.Field<string>("usagectrl");
         entity.usagerate = row.IsNull("usagerate") ? decimal.Zero : row.Field<decimal>("usagerate");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.usgmths = row.IsNull("usgmths") ? 0 : row.Field<int>("usgmths");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.icamapmrecid = row.IsNull("icamapmrecid") ? 0 : row.Field<long>("icamapmrecid");
         entity.methodwords = row.IsNull("methodwords") ? string.Empty : row.Field<string>("methodwords");
         entity.selectty = row.IsNull("selectty") ? string.Empty : row.Field<string>("selectty");
         entity.orderqty = row.IsNull("orderqty") ? decimal.Zero : row.Field<decimal>("orderqty");
         entity.pct = row.IsNull("pct") ? decimal.Zero : row.Field<decimal>("pct");
         entity.icamapmRowID = row.Field<byte[]>("icamapmRowID").ToStringEncoded();
         entity.ttblseqno = row.IsNull("ttblseqno") ? 0 : row.Field<int>("ttblseqno");
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcamrloadusagerateanalysistt(ref DataRow row, Icamrloadusagerateanalysistt entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("linept", entity.linept);
         row.SetField("newmethodfl", entity.newmethodfl);
         row.SetField("operinit", entity.operinit);
         row.SetField("orderpt", entity.orderpt);
         row.SetField("ordqtyin", entity.ordqtyin);
         row.SetField("ordqtyout", entity.ordqtyout);
         row.SetField("overreasin", entity.overreasin);
         row.SetField("overreasout", entity.overreasout);
         row.SetField("prod", entity.prod);
         row.SetField("reportno", entity.reportno);
         row.SetField("safeallamt", entity.safeallamt);
         row.SetField("safeallpct", entity.safeallpct);
         row.SetField("safeallty", entity.safeallty);
         row.SetField("transdt", entity.transdt);
         row.SetField("transproc", entity.transproc);
         row.SetField("transtm", entity.transtm);
         row.SetField("usagectrl", entity.usagectrl);
         row.SetField("usagerate", entity.usagerate);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("usgmths", entity.usgmths);
         row.SetField("whse", entity.whse);
         row.SetField("icamapmrecid", entity.icamapmrecid);
         row.SetField("methodwords", entity.methodwords);
         row.SetField("selectty", entity.selectty);
         row.SetField("orderqty", entity.orderqty);
         row.SetField("pct", entity.pct);
         row.SetField("icamapmRowID", entity.icamapmRowID.ToByteArray());
         row.SetField("ttblseqno", entity.ttblseqno);
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
