//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.IC.Data.Models.Pdsicproductlookup
{
   [ModelName("Infor.Sxe.IC.Data.Models.Pdsicproductlookup.Icproductlookupcriteria")]
   public partial class Icproductlookupcriteria : ModelBase
   {
      [StringValidationAttribute]
      public string prod { get; set; }
      [StringValidationAttribute]
      public string lookupnm { get; set; }
      [StringValidationAttribute]
      public string prodcat { get; set; }
      public bool includeinactive { get; set; }
      [StringValidationAttribute]
      public string kittype { get; set; }
      [StringValidationAttribute]
      public string keywords { get; set; }
      [StringValidationAttribute]
      public string maskcharacter { get; set; }
      public int recordcountlimit { get; set; }
      [StringValidationAttribute]
      public string prodtiergrp { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Icproductlookupcriteria BuildIcproductlookupcriteriaFromRow(DataRow row)
      {
         Icproductlookupcriteria entity = new Icproductlookupcriteria();
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.lookupnm = row.IsNull("lookupnm") ? string.Empty : row.Field<string>("lookupnm");
         entity.prodcat = row.IsNull("prodcat") ? string.Empty : row.Field<string>("prodcat");
         entity.includeinactive = row.Field<bool>("includeinactive");
         entity.kittype = row.IsNull("kittype") ? string.Empty : row.Field<string>("kittype");
         entity.keywords = row.IsNull("keywords") ? string.Empty : row.Field<string>("keywords");
         entity.maskcharacter = row.IsNull("maskcharacter") ? string.Empty : row.Field<string>("maskcharacter");
         entity.recordcountlimit = row.IsNull("recordcountlimit") ? 0 : row.Field<int>("recordcountlimit");
         entity.prodtiergrp = row.IsNull("prodtiergrp") ? string.Empty : row.Field<string>("prodtiergrp");
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcproductlookupcriteria(ref DataRow row, Icproductlookupcriteria entity)
      {
         row.SetField("prod", entity.prod);
         row.SetField("lookupnm", entity.lookupnm);
         row.SetField("prodcat", entity.prodcat);
         row.SetField("includeinactive", entity.includeinactive);
         row.SetField("kittype", entity.kittype);
         row.SetField("keywords", entity.keywords);
         row.SetField("maskcharacter", entity.maskcharacter);
         row.SetField("recordcountlimit", entity.recordcountlimit);
         row.SetField("prodtiergrp", entity.prodtiergrp);
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
