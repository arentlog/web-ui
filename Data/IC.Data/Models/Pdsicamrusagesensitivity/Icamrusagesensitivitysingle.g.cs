//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.IC.Data.Models.Pdsicamrusagesensitivity
{
   [ModelName("Infor.Sxe.IC.Data.Models.Pdsicamrusagesensitivity.Icamrusagesensitivitysingle")]
   public partial class Icamrusagesensitivitysingle : ModelBase
   {
      public int cono { get; set; }
      public int reportno { get; set; }
      [StringValidationAttribute]
      public string whse { get; set; }
      [StringValidationAttribute]
      public string prod { get; set; }
      public int secure { get; set; }
      public bool btnRefreshVisible { get; set; }
      public bool btnRefreshSensitive { get; set; }
      public bool btnUpdateVisible { get; set; }
      public bool btnUpdateSensitive { get; set; }
      public bool slBackWardSensitive { get; set; }
      public bool slForwardSensitive { get; set; }
      public bool slTrendSensitive { get; set; }
      public bool slMonthRollSensitive { get; set; }
      public bool slExponSmoothSensitive { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Icamrusagesensitivitysingle BuildIcamrusagesensitivitysingleFromRow(DataRow row)
      {
         Icamrusagesensitivitysingle entity = new Icamrusagesensitivitysingle();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.reportno = row.IsNull("reportno") ? 0 : row.Field<int>("reportno");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.secure = row.IsNull("secure") ? 0 : row.Field<int>("secure");
         entity.btnRefreshVisible = row.Field<bool>("btnRefresh-visible");
         entity.btnRefreshSensitive = row.Field<bool>("btnRefresh-sensitive");
         entity.btnUpdateVisible = row.Field<bool>("btnUpdate-visible");
         entity.btnUpdateSensitive = row.Field<bool>("btnUpdate-sensitive");
         entity.slBackWardSensitive = row.Field<bool>("slBackWard-sensitive");
         entity.slForwardSensitive = row.Field<bool>("slForward-sensitive");
         entity.slTrendSensitive = row.Field<bool>("slTrend-sensitive");
         entity.slMonthRollSensitive = row.Field<bool>("slMonthRoll-sensitive");
         entity.slExponSmoothSensitive = row.Field<bool>("slExponSmooth-sensitive");
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcamrusagesensitivitysingle(ref DataRow row, Icamrusagesensitivitysingle entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("reportno", entity.reportno);
         row.SetField("whse", entity.whse);
         row.SetField("prod", entity.prod);
         row.SetField("secure", entity.secure);
         row.SetField("btnRefresh-visible", entity.btnRefreshVisible);
         row.SetField("btnRefresh-sensitive", entity.btnRefreshSensitive);
         row.SetField("btnUpdate-visible", entity.btnUpdateVisible);
         row.SetField("btnUpdate-sensitive", entity.btnUpdateSensitive);
         row.SetField("slBackWard-sensitive", entity.slBackWardSensitive);
         row.SetField("slForward-sensitive", entity.slForwardSensitive);
         row.SetField("slTrend-sensitive", entity.slTrendSensitive);
         row.SetField("slMonthRoll-sensitive", entity.slMonthRollSensitive);
         row.SetField("slExponSmooth-sensitive", entity.slExponSmoothSensitive);
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
