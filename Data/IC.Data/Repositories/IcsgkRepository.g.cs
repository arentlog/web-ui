//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Repositories
{
   using Infor.Sxe.IC.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsicsgk;

   public partial class IcsgkRepository : RepositoryBase
   {
      private IcsgkAdapter adapter;
  
      public IcsgkRepository(IProgressConnection connection)
      {
         this.adapter = new IcsgkAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public Icsgk GetByRowId(string rowId, string fldList)
      {
         return this.adapter.GetByRowId(rowId, fldList);
      }

      public IEnumerable<Icsgk> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         return this.adapter.GetListByRowIdList(rowIds, batchsize, fldList);
      }
        
      public Icsgk Get(string tag, int corpid, int storeid, int batchsize, string fldList)
      {
         return this.adapter.Get(tag, corpid, storeid, batchsize, fldList);
      }
      
      public IEnumerable<Icsgk> GetList(string where, int batchsize, string fldList)
      {
         return this.adapter.GetList(where, batchsize, fldList);
      }
  
      public IEnumerable<Icsgk> GetListByBatch(string ecbatchnm, int batchsize, string fldList)
      {
         return this.adapter.GetListByBatch(ecbatchnm, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByGav(string gav, int batchsize, string fldList)
      {
         return this.adapter.GetListByGav(gav, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByLevel(int corpid, string level1, string level2, string level3, string level4, string level5, string level6, string level7, string level8, string level9, string level10, int batchsize, string fldList)
      {
         return this.adapter.GetListByLevel(corpid, level1, level2, level3, level4, level5, level6, level7, level8, level9, level10, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByNodeid(int nodeid, int batchsize, string fldList)
      {
         return this.adapter.GetListByNodeid(nodeid, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByReferencePcat(string referencePcat, int batchsize, string fldList)
      {
         return this.adapter.GetListByReferencePcat(referencePcat, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByReferenceProd(string referenceProd, int batchsize, string fldList)
      {
         return this.adapter.GetListByReferenceProd(referenceProd, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByStoreid(int corpid, int storeid, string gav, int batchsize, string fldList)
      {
         return this.adapter.GetListByStoreid(corpid, storeid, gav, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByTagno(string tagType, int corpid, int storeid, int tagno, int batchsize, string fldList)
      {
         return this.adapter.GetListByTagno(tagType, corpid, storeid, tagno, batchsize, fldList);
      }

      public IEnumerable<Icsgk> GetListByType(string tagType, int corpid, int storeid, string tag, int batchsize, string fldList)
      {
         return this.adapter.GetListByType(tagType, corpid, storeid, tag, batchsize, fldList);
      }

      public Icsgk Insert(Icsgk record)
      {
         return this.adapter.Insert(record);        
      }
  
      public Icsgk Update(Icsgk record)
      {
         return this.adapter.Update(record);
      }
  
      public void Delete(Icsgk record)
      {
         this.adapter.Delete(record);
      }
  
      public void DeleteListByRowIds(List<string> rowIds)
      {
         this.adapter.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  