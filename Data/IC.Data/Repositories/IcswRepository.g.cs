//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Repositories
{
   using Infor.Sxe.IC.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsicsw;
   using Models.Pdsicswlookup;
   using Models.Complex;

   public partial class IcswRepository : RepositoryBase
   {
      private IcswAdapter adapter;
  
      public IcswRepository(IProgressConnection connection)
      {
         this.adapter = new IcswAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public Icsw GetByRowId(string rowId, bool fillMode, string fldList)
      {
         return this.adapter.GetByRowId(rowId, fillMode, fldList);
      }

      public IEnumerable<Icsw> GetListByRowIdList(List<string> rowIds, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByRowIdList(rowIds, fillMode, batchsize, fldList);
      }
        
      public IEnumerable<Icsw> GetListAllByCono(int cono, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListAllByCono(cono, fillMode, batchsize, fldList);
      }
      public IEnumerable<Icsw> GetListByRowpointers(List<string> rowpointers, bool fillMode, string fldList)
      {
         return this.adapter.GetListByRowpointers(rowpointers, fillMode, fldList);
      }
	  
	  
      public Icsw Get(int cono, string prod, string whse, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.Get(cono, prod, whse, fillMode, batchsize, fldList);
      }
      
      public IEnumerable<Icsw> GetList(string where, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetList(where, fillMode, batchsize, fldList);
      }
  
      public IEnumerable<Icsw> GetListByArpwhse(int cono, string arptype, bool arppushfl, string arpwhse, string whse, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByArpwhse(cono, arptype, arppushfl, arpwhse, whse, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByBin(int cono, string whse, string binloc1, string prod, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByBin(cono, whse, binloc1, prod, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByCount(int cono, string whse, bool countfl, DateTime? lastcntdt, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByCount(cono, whse, countfl, lastcntdt, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByManprod(int cono, string whse, string vendprod, decimal arpvendno, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByManprod(cono, whse, vendprod, arpvendno, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByProdco(string prod, int cono, string whse, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByProdco(prod, cono, whse, fillMode, batchsize, fldList);
      }

      public Icsw GetByRowpointer(string rowpointer, bool fillMode, string fldList)
      {
         return this.adapter.GetByRowpointer(rowpointer, fillMode, fldList);
      }

      public IEnumerable<Icsw> GetListByTransdttmz(DateTime? transdttmz, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByTransdttmz(transdttmz, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByVendor(int cono, string whse, decimal arpvendno, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByVendor(cono, whse, arpvendno, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByVendprod(int cono, string whse, string arptype, decimal arpvendno, string prodline, string vendprod, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByVendprod(cono, whse, arptype, arpvendno, prodline, vendprod, fillMode, batchsize, fldList);
      }

      public IEnumerable<Icsw> GetListByWhse(int cono, string whse, string prod, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByWhse(cono, whse, prod, fillMode, batchsize, fldList);
      }

      public Icsw Insert(Icsw record)
      {
         return this.adapter.Insert(record);        
      }
  
      public Icsw Update(Icsw record)
      {
         return this.adapter.Update(record);
      }
  
      public void Delete(Icsw record)
      {
         this.adapter.Delete(record);
      }
  
      public void DeleteListByRowIds(List<string> rowIds)
      {
         this.adapter.DeleteListByRowIds(rowIds);
      }
	   

      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         this.adapter.DeleteListByRowPointers(rowpointers);
      }
	  
      public IEnumerable<Icswlookupresults> Lookup(Icswlookupcriteria icswlookupcriteria)
      {
         return this.adapter.Lookup(icswlookupcriteria);
      }
  
      public IEnumerable<Icsw> GetListByWordIndex(string term, bool fillMode, int batchsize, string fldList)
      {
         return this.adapter.GetListByWordIndex(term, fillMode, batchsize, fldList);
      }
  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  