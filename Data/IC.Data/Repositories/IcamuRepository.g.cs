//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.IC.Data.Repositories
{
   using Infor.Sxe.IC.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsicamu;

   public partial class IcamuRepository : RepositoryBase
   {
      private IcamuAdapter adapter;
  
      public IcamuRepository(IProgressConnection connection)
      {
         this.adapter = new IcamuAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public Icamu GetByRowId(string rowId, string fldList)
      {
         return this.adapter.GetByRowId(rowId, fldList);
      }

      public IEnumerable<Icamu> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         return this.adapter.GetListByRowIdList(rowIds, batchsize, fldList);
      }
        
      public IEnumerable<Icamu> GetListAllByCono(int cono, int batchsize, string fldList)
      {
         return this.adapter.GetListAllByCono(cono, batchsize, fldList);
      }
      public Icamu Get(int cono, bool activefl, string whse, string buyer, string prod, string frozentype, string frozenmmyy, int batchsize, string fldList)
      {
         return this.adapter.Get(cono, activefl, whse, buyer, prod, frozentype, frozenmmyy, batchsize, fldList);
      }
      
      public IEnumerable<Icamu> GetList(string where, int batchsize, string fldList)
      {
         return this.adapter.GetList(where, batchsize, fldList);
      }
  
      public IEnumerable<Icamu> GetListByBuyer(int cono, bool activefl, string buyer, string prod, string whse, string frozentype, string frozenmmyy, int batchsize, string fldList)
      {
         return this.adapter.GetListByBuyer(cono, activefl, buyer, prod, whse, frozentype, frozenmmyy, batchsize, fldList);
      }

      public IEnumerable<Icamu> GetListByFrozen(int cono, bool activefl, string frozentype, string whse, string prod, string frozenmmyy, int batchsize, string fldList)
      {
         return this.adapter.GetListByFrozen(cono, activefl, frozentype, whse, prod, frozenmmyy, batchsize, fldList);
      }

      public IEnumerable<Icamu> GetListByProd(int cono, bool activefl, string prod, string whse, int batchsize, string fldList)
      {
         return this.adapter.GetListByProd(cono, activefl, prod, whse, batchsize, fldList);
      }

      public IEnumerable<Icamu> GetListByVend(int cono, bool activefl, decimal vendno, string prodline, string prod, string whse, string frozentype, string frozenmmyy, int batchsize, string fldList)
      {
         return this.adapter.GetListByVend(cono, activefl, vendno, prodline, prod, whse, frozentype, frozenmmyy, batchsize, fldList);
      }

      public Icamu Insert(Icamu record)
      {
         return this.adapter.Insert(record);        
      }
  
      public Icamu Update(Icamu record)
      {
         return this.adapter.Update(record);
      }
  
      public void Delete(Icamu record)
      {
         this.adapter.Delete(record);
      }
  
      public void DeleteListByRowIds(List<string> rowIds)
      {
         this.adapter.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  