//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PD.Data.Adapters
{
   using com.infor.sxproxy.pdproxy;
   using com.infor.sxproxy.pdproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspdevgetprod;
   using Models.Pdspdevloadcosts;
   using Models.Pdspdevupdatecosts;
   using Models.Pdspdecgetproduct;
   using Models.Pdspdecgetpricecost;
   using Models.Pdspdecupdpricecost;
   using Models.Pdspdeminitialload;
   using Models.Pdspdeminitializepdsc1;
   using Models.Pdspdemloadpdsc1;
   using Models.Pdsmessaging;
   using Models.Pdspdemgridupdatepdsc1;
   using Models.Pdspdeminitializepdsc2;
   using Models.Pdspdemloadpdsc2;
   using Models.Pdspdeminitializepdsc3;
   using Models.Pdspdemloadpdsc3;
   using Models.Pdspdeminitializepdsr;
   using Models.Pdspdemloadpdsr;
   using Models.Pdspdemgridupdatepdsr;
   using Models.Pdspdemupdaterptinit;
   using Models.Pdspdemupdaterptok;
   using Models.Pdsprintersettings;
   using Models.Pdspdemdeletefromset;
   using Models.Pdspdemimportexcelerrors;
   using Models.Pdspdemexcelimportnewinit;
   using Models.Pdspdemexcelimportonchgrcrdty;
   using Models.Pdspdemexcelimportnew;
   using Models.Pdspdemexcelnewsetupdtc;
   using Models.Pdspdemexcelnewsetupdtr;
   using Models.Pdspdemimportnewfile;
   using Models.Pdspdemlookup;
   using Models.Pdspderclaimtotal;
   using Models.Pdspderlockclaim;
   using Models.Pdspdergetclaim;
   using Models.Pdspdergetreceipt;
   using Models.Pdspdergetitem;
   using Models.Pdspderinitreceipt;
   using Models.Pdspderaddreceipt;
   using Models.Pdspderupdatereceipt;
   using Models.Pdspderupdateitem;
   using Models.Pdspderfinaledit;
   using Models.Pdspderfinalupdate;
   using Models.Pdsgleta;
   using Models.Pdspdemcolumncalculator;
   using Models.Pdspdemnewset;
   using Models.Pdspderreceiptvat;
   using Models.Complex;

   public partial class AspdentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private PDProxyAppObject proxyAppObject;
      
      public AspdentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new PDProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspdentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Pdevgetprod PDEVGetProd(Pdevgetprod pdevgetprod)
      {   
         var result = new Pdevgetprod();
         
         var pdspdevgetprod = new pdspdevgetprodDataSet();
            
         DataRow ttblpdevgetprodCriteria = pdspdevgetprod.ttblpdevgetprod.NewttblpdevgetprodRow();
         Pdevgetprod.UpdateRowFromPdevgetprod(ref ttblpdevgetprodCriteria, pdevgetprod);
         pdspdevgetprod.ttblpdevgetprod.AddttblpdevgetprodRow((pdspdevgetprodDataSet.ttblpdevgetprodRow)ttblpdevgetprodCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEVGetProd - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEVGetProd(ref pdsContext, ref pdspdevgetprod, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEVGetProd - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdevgetprod); 
    
         if (pdspdevgetprod.ttblpdevgetprod.Count > 0) 
         { 
             result = Pdevgetprod.BuildPdevgetprodFromRow(pdspdevgetprod.ttblpdevgetprod[0]);
         } 
              
          
         return result;
          
      }

      public Pdevloadcosts PDEVLoadCosts(Pdevloadcosts pdevloadcosts)
      {   
         var result = new Pdevloadcosts();
         
         var pdspdevloadcosts = new pdspdevloadcostsDataSet();
            
         DataRow ttblpdevloadcostsCriteria = pdspdevloadcosts.ttblpdevloadcosts.NewttblpdevloadcostsRow();
         Pdevloadcosts.UpdateRowFromPdevloadcosts(ref ttblpdevloadcostsCriteria, pdevloadcosts);
         pdspdevloadcosts.ttblpdevloadcosts.AddttblpdevloadcostsRow((pdspdevloadcostsDataSet.ttblpdevloadcostsRow)ttblpdevloadcostsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEVLoadCosts - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEVLoadCosts(ref pdsContext, ref pdspdevloadcosts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEVLoadCosts - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdevloadcosts); 
    
         if (pdspdevloadcosts.ttblpdevloadcosts.Count > 0) 
         { 
             result = Pdevloadcosts.BuildPdevloadcostsFromRow(pdspdevloadcosts.ttblpdevloadcosts[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Pdevupdatecostsresults> PDEVUpdateCosts(Pdevupdatecostscriteria pdevupdatecostscriteria)
      {   
         var results = new List<Pdevupdatecostsresults>();
         
         var pdspdevupdatecosts = new pdspdevupdatecostsDataSet();
            
         DataRow ttblpdevupdatecostscriteriaCriteria = pdspdevupdatecosts.ttblpdevupdatecostscriteria.NewttblpdevupdatecostscriteriaRow();
         Pdevupdatecostscriteria.UpdateRowFromPdevupdatecostscriteria(ref ttblpdevupdatecostscriteriaCriteria, pdevupdatecostscriteria);
         pdspdevupdatecosts.ttblpdevupdatecostscriteria.AddttblpdevupdatecostscriteriaRow((pdspdevupdatecostsDataSet.ttblpdevupdatecostscriteriaRow)ttblpdevupdatecostscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEVUpdateCosts - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEVUpdateCosts(ref pdsContext, ref pdspdevupdatecosts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEVUpdateCosts - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdevupdatecosts); 
    
            foreach (DataRow row in pdspdevupdatecosts.ttblpdevupdatecostsresults)
            {
                results.Add(Pdevupdatecostsresults.BuildPdevupdatecostsresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Pdecgetproductresults> PDECGetProduct(Pdecgetproductcriteria pdecgetproductcriteria)
      {   
         var results = new List<Pdecgetproductresults>();
         
         var pdspdecgetproduct = new pdspdecgetproductDataSet();
            
         DataRow ttblpdecgetproductcriteriaCriteria = pdspdecgetproduct.ttblpdecgetproductcriteria.NewttblpdecgetproductcriteriaRow();
         Pdecgetproductcriteria.UpdateRowFromPdecgetproductcriteria(ref ttblpdecgetproductcriteriaCriteria, pdecgetproductcriteria);
         pdspdecgetproduct.ttblpdecgetproductcriteria.AddttblpdecgetproductcriteriaRow((pdspdecgetproductDataSet.ttblpdecgetproductcriteriaRow)ttblpdecgetproductcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDECGetProduct - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDECGetProduct(ref pdsContext, ref pdspdecgetproduct, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDECGetProduct - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdecgetproduct); 
    
            foreach (DataRow row in pdspdecgetproduct.ttblpdecgetproductresults)
            {
                results.Add(Pdecgetproductresults.BuildPdecgetproductresultsFromRow(row));
            }
            return results;
        
      }

      public Pdecgetpricecostresults PDECGetPriceCost(Pdecgetpricecostcriteria pdecgetpricecostcriteria)
      {   
         var result = new Pdecgetpricecostresults();
         
         var pdspdecgetpricecost = new pdspdecgetpricecostDataSet();
            
         DataRow ttblpdecgetpricecostcriteriaCriteria = pdspdecgetpricecost.ttblpdecgetpricecostcriteria.NewttblpdecgetpricecostcriteriaRow();
         Pdecgetpricecostcriteria.UpdateRowFromPdecgetpricecostcriteria(ref ttblpdecgetpricecostcriteriaCriteria, pdecgetpricecostcriteria);
         pdspdecgetpricecost.ttblpdecgetpricecostcriteria.AddttblpdecgetpricecostcriteriaRow((pdspdecgetpricecostDataSet.ttblpdecgetpricecostcriteriaRow)ttblpdecgetpricecostcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDECGetPriceCost - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDECGetPriceCost(ref pdsContext, ref pdspdecgetpricecost, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDECGetPriceCost - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdecgetpricecost); 
    
         if (pdspdecgetpricecost.ttblpdecgetpricecostresults.Count > 0) 
         { 
             result = Pdecgetpricecostresults.BuildPdecgetpricecostresultsFromRow(pdspdecgetpricecost.ttblpdecgetpricecostresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Pdecupdpricecostresults> PDECUpdatePriceCost(Pdecupdpricecostcriteria pdecupdpricecostcriteria)
      {   
         var results = new List<Pdecupdpricecostresults>();
         
         var pdspdecupdpricecost = new pdspdecupdpricecostDataSet();
            
         DataRow ttblpdecupdpricecostcriteriaCriteria = pdspdecupdpricecost.ttblpdecupdpricecostcriteria.NewttblpdecupdpricecostcriteriaRow();
         Pdecupdpricecostcriteria.UpdateRowFromPdecupdpricecostcriteria(ref ttblpdecupdpricecostcriteriaCriteria, pdecupdpricecostcriteria);
         pdspdecupdpricecost.ttblpdecupdpricecostcriteria.AddttblpdecupdpricecostcriteriaRow((pdspdecupdpricecostDataSet.ttblpdecupdpricecostcriteriaRow)ttblpdecupdpricecostcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDECUpdatePriceCost - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDECUpdatePriceCost(ref pdsContext, ref pdspdecupdpricecost, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDECUpdatePriceCost - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdecupdpricecost); 
    
            foreach (DataRow row in pdspdecupdpricecost.ttblpdecupdpricecostresults)
            {
                results.Add(Pdecupdpricecostresults.BuildPdecupdpricecostresultsFromRow(row));
            }
            return results;
        
      }

      public Pdeminitialloadresults PDEMInitialLoad(Pdeminitialloadcriteria pdeminitialloadcriteria)
      {   
         var result = new Pdeminitialloadresults();
         
         var pdspdeminitialload = new pdspdeminitialloadDataSet();
            
         DataRow ttblpdeminitialloadcriteriaCriteria = pdspdeminitialload.ttblpdeminitialloadcriteria.NewttblpdeminitialloadcriteriaRow();
         Pdeminitialloadcriteria.UpdateRowFromPdeminitialloadcriteria(ref ttblpdeminitialloadcriteriaCriteria, pdeminitialloadcriteria);
         pdspdeminitialload.ttblpdeminitialloadcriteria.AddttblpdeminitialloadcriteriaRow((pdspdeminitialloadDataSet.ttblpdeminitialloadcriteriaRow)ttblpdeminitialloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMInitialLoad - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMInitialLoad(ref pdsContext, ref pdspdeminitialload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMInitialLoad - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdeminitialload); 
    
         if (pdspdeminitialload.ttblpdeminitialloadresults.Count > 0) 
         { 
             result = Pdeminitialloadresults.BuildPdeminitialloadresultsFromRow(pdspdeminitialload.ttblpdeminitialloadresults[0]);
         } 
              
          
         return result;
          
      }

      public Pdeminitializepdsc1 PDEMInitializePDSC1(string cSetID)
      {   
         var result = new Pdeminitializepdsc1();
         
         var pdspdeminitializepdsc1 = new pdspdeminitializepdsc1DataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMInitializePDSC1 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMInitializePDSC1(ref pdsContext,  cSetID, out pdspdeminitializepdsc1, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMInitializePDSC1 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdeminitializepdsc1); 
    
         if (pdspdeminitializepdsc1.ttblpdeminitializepdsc1.Count > 0) 
         { 
             result = Pdeminitializepdsc1.BuildPdeminitializepdsc1FromRow(pdspdeminitializepdsc1.ttblpdeminitializepdsc1[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMLoadPDSC1ResponseAPI PDEMLoadPDSC1(AspdentryPDEMLoadPDSC1RequestAPI AspdentryPDEMLoadPDSC1RequestAPI)
      {   
         var result = new AspdentryPDEMLoadPDSC1ResponseAPI();
         
         var pdspdemloadpdsc1 = new pdspdemloadpdsc1DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc1criteriaRow = pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Newttblpdemloadpdsc1criteriaRow();
         Pdemloadpdsc1criteria.UpdateRowFromPdemloadpdsc1criteria(ref ttblpdemloadpdsc1criteriaRow, AspdentryPDEMLoadPDSC1RequestAPI.pdemloadpdsc1criteria);
         pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Addttblpdemloadpdsc1criteriaRow((pdspdemloadpdsc1DataSet.ttblpdemloadpdsc1criteriaRow)ttblpdemloadpdsc1criteriaRow);
          
         foreach (var obj in AspdentryPDEMLoadPDSC1RequestAPI.pdmerridpdsc1)
         {
            DataRow ttblpdmerridpdsc1Row = pdspdemloadpdsc1.ttblpdmerridpdsc1.Newttblpdmerridpdsc1Row();
            Pdmerridpdsc1.UpdateRowFromPdmerridpdsc1(ref ttblpdmerridpdsc1Row, obj);
            pdspdemloadpdsc1.ttblpdmerridpdsc1.Addttblpdmerridpdsc1Row((pdspdemloadpdsc1DataSet.ttblpdmerridpdsc1Row)ttblpdmerridpdsc1Row);
         }
          
         
         NLogLoggerP.Trace("PDEMLoadPDSC1 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLoadPDSC1(ref pdsContext, ref pdspdemloadpdsc1, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMLoadPDSC1 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc1); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc1.ttblpdemloadpdsc1results)
         {
            result.pdemloadpdsc1results.Add(Pdemloadpdsc1results.BuildPdemloadpdsc1resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc1.ttblpdmerridpdsc1)
         {
            result.pdmerridpdsc1.Add(Pdmerridpdsc1.BuildPdmerridpdsc1FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMUpdateValPDSC1ResponseAPI PDEMUpdateValPDSC1(Pdemloadpdsc1criteria pdemloadpdsc1criteria)
      {   
         var result = new AspdentryPDEMUpdateValPDSC1ResponseAPI();
         
         var pdspdemloadpdsc1 = new pdspdemloadpdsc1DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpdemloadpdsc1criteriaCriteria = pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Newttblpdemloadpdsc1criteriaRow();
         Pdemloadpdsc1criteria.UpdateRowFromPdemloadpdsc1criteria(ref ttblpdemloadpdsc1criteriaCriteria, pdemloadpdsc1criteria);
         pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Addttblpdemloadpdsc1criteriaRow((pdspdemloadpdsc1DataSet.ttblpdemloadpdsc1criteriaRow)ttblpdemloadpdsc1criteriaCriteria);
            
         bool lSuccessFL = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMUpdateValPDSC1 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateValPDSC1(ref pdsContext, ref pdspdemloadpdsc1, out pdsmessaging, out lSuccessFL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateValPDSC1 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc1); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc1.ttblpdmerridpdsc1)
         {
            result.pdmerridpdsc1.Add(Pdmerridpdsc1.BuildPdmerridpdsc1FromRow(row));
         }     
         result.lSuccessFL = lSuccessFL;
          
         return result;
          
      }

      public IEnumerable<Messaging> PDEMGridUpdatePDSC1(AspdentryPDEMGridUpdatePDSC1RequestAPI AspdentryPDEMGridUpdatePDSC1RequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspdemgridupdatepdsc1 = new pdspdemgridupdatepdsc1DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemgridupdatepdsc1Row = pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Newttblpdemgridupdatepdsc1Row();
         Pdemgridupdatepdsc1.UpdateRowFromPdemgridupdatepdsc1(ref ttblpdemgridupdatepdsc1Row, AspdentryPDEMGridUpdatePDSC1RequestAPI.pdemgridupdatepdsc1);
         pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Addttblpdemgridupdatepdsc1Row((pdspdemgridupdatepdsc1DataSet.ttblpdemgridupdatepdsc1Row)ttblpdemgridupdatepdsc1Row);
          
         var  lColOvrRd = AspdentryPDEMGridUpdatePDSC1RequestAPI.lColOvrRd;
            
         
         NLogLoggerP.Trace("PDEMGridUpdatePDSC1 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMGridUpdatePDSC1(ref pdsContext,  pdspdemgridupdatepdsc1,  lColOvrRd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMGridUpdatePDSC1 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemgridupdatepdsc1); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Pdeminitializepdsc2 PDEMInitializePDSC2(string cSetID)
      {   
         var result = new Pdeminitializepdsc2();
         
         var pdspdeminitializepdsc2 = new pdspdeminitializepdsc2DataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMInitializePDSC2 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMInitializePDSC2(ref pdsContext,  cSetID, out pdspdeminitializepdsc2, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMInitializePDSC2 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdeminitializepdsc2); 
    
         if (pdspdeminitializepdsc2.ttblpdeminitializepdsc2.Count > 0) 
         { 
             result = Pdeminitializepdsc2.BuildPdeminitializepdsc2FromRow(pdspdeminitializepdsc2.ttblpdeminitializepdsc2[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMLoadPDSC2ResponseAPI PDEMLoadPDSC2(AspdentryPDEMLoadPDSC2RequestAPI AspdentryPDEMLoadPDSC2RequestAPI)
      {   
         var result = new AspdentryPDEMLoadPDSC2ResponseAPI();
         
         var pdspdemloadpdsc2 = new pdspdemloadpdsc2DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc2criteriaRow = pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Newttblpdemloadpdsc2criteriaRow();
         Pdemloadpdsc2criteria.UpdateRowFromPdemloadpdsc2criteria(ref ttblpdemloadpdsc2criteriaRow, AspdentryPDEMLoadPDSC2RequestAPI.pdemloadpdsc2criteria);
         pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Addttblpdemloadpdsc2criteriaRow((pdspdemloadpdsc2DataSet.ttblpdemloadpdsc2criteriaRow)ttblpdemloadpdsc2criteriaRow);
          
         foreach (var obj in AspdentryPDEMLoadPDSC2RequestAPI.pdmerridpdsc2)
         {
            DataRow ttblpdmerridpdsc2Row = pdspdemloadpdsc2.ttblpdmerridpdsc2.Newttblpdmerridpdsc2Row();
            Pdmerridpdsc2.UpdateRowFromPdmerridpdsc2(ref ttblpdmerridpdsc2Row, obj);
            pdspdemloadpdsc2.ttblpdmerridpdsc2.Addttblpdmerridpdsc2Row((pdspdemloadpdsc2DataSet.ttblpdmerridpdsc2Row)ttblpdmerridpdsc2Row);
         }
          
         
         NLogLoggerP.Trace("PDEMLoadPDSC2 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLoadPDSC2(ref pdsContext, ref pdspdemloadpdsc2, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMLoadPDSC2 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc2); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc2.ttblpdemloadpdsc2results)
         {
            result.pdemloadpdsc2results.Add(Pdemloadpdsc2results.BuildPdemloadpdsc2resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc2.ttblpdmerridpdsc2)
         {
            result.pdmerridpdsc2.Add(Pdmerridpdsc2.BuildPdmerridpdsc2FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMUpdateValPDSC2ResponseAPI PDEMUpdateValPDSC2(Pdemloadpdsc2criteria pdemloadpdsc2criteria)
      {   
         var result = new AspdentryPDEMUpdateValPDSC2ResponseAPI();
         
         var pdspdemloadpdsc2 = new pdspdemloadpdsc2DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpdemloadpdsc2criteriaCriteria = pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Newttblpdemloadpdsc2criteriaRow();
         Pdemloadpdsc2criteria.UpdateRowFromPdemloadpdsc2criteria(ref ttblpdemloadpdsc2criteriaCriteria, pdemloadpdsc2criteria);
         pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Addttblpdemloadpdsc2criteriaRow((pdspdemloadpdsc2DataSet.ttblpdemloadpdsc2criteriaRow)ttblpdemloadpdsc2criteriaCriteria);
            
         bool lSuccessFL = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMUpdateValPDSC2 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateValPDSC2(ref pdsContext, ref pdspdemloadpdsc2, out pdsmessaging, out lSuccessFL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateValPDSC2 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc2); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc2.ttblpdmerridpdsc2)
         {
            result.pdmerridpdsc2.Add(Pdmerridpdsc2.BuildPdmerridpdsc2FromRow(row));
         }     
         result.lSuccessFL = lSuccessFL;
          
         return result;
          
      }

      public IEnumerable<Messaging> PDEMGridUpdatePDSC2(AspdentryPDEMGridUpdatePDSC2RequestAPI AspdentryPDEMGridUpdatePDSC2RequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspdemgridupdatepdsc1 = new pdspdemgridupdatepdsc1DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemgridupdatepdsc1Row = pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Newttblpdemgridupdatepdsc1Row();
         Pdemgridupdatepdsc1.UpdateRowFromPdemgridupdatepdsc1(ref ttblpdemgridupdatepdsc1Row, AspdentryPDEMGridUpdatePDSC2RequestAPI.pdemgridupdatepdsc1);
         pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Addttblpdemgridupdatepdsc1Row((pdspdemgridupdatepdsc1DataSet.ttblpdemgridupdatepdsc1Row)ttblpdemgridupdatepdsc1Row);
          
         var  lColOvrRd = AspdentryPDEMGridUpdatePDSC2RequestAPI.lColOvrRd;
            
         
         NLogLoggerP.Trace("PDEMGridUpdatePDSC2 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMGridUpdatePDSC2(ref pdsContext,  pdspdemgridupdatepdsc1,  lColOvrRd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMGridUpdatePDSC2 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemgridupdatepdsc1); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Pdeminitializepdsc3 PDEMInitializePDSC3(string cSetID)
      {   
         var result = new Pdeminitializepdsc3();
         
         var pdspdeminitializepdsc3 = new pdspdeminitializepdsc3DataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMInitializePDSC3 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMInitializePDSC3(ref pdsContext,  cSetID, out pdspdeminitializepdsc3, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMInitializePDSC3 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdeminitializepdsc3); 
    
         if (pdspdeminitializepdsc3.ttblpdeminitializepdsc3.Count > 0) 
         { 
             result = Pdeminitializepdsc3.BuildPdeminitializepdsc3FromRow(pdspdeminitializepdsc3.ttblpdeminitializepdsc3[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMLoadPDSC3ResponseAPI PDEMLoadPDSC3(AspdentryPDEMLoadPDSC3RequestAPI AspdentryPDEMLoadPDSC3RequestAPI)
      {   
         var result = new AspdentryPDEMLoadPDSC3ResponseAPI();
         
         var pdspdemloadpdsc3 = new pdspdemloadpdsc3DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc3criteriaRow = pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Newttblpdemloadpdsc3criteriaRow();
         Pdemloadpdsc3criteria.UpdateRowFromPdemloadpdsc3criteria(ref ttblpdemloadpdsc3criteriaRow, AspdentryPDEMLoadPDSC3RequestAPI.pdemloadpdsc3criteria);
         pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Addttblpdemloadpdsc3criteriaRow((pdspdemloadpdsc3DataSet.ttblpdemloadpdsc3criteriaRow)ttblpdemloadpdsc3criteriaRow);
          
         foreach (var obj in AspdentryPDEMLoadPDSC3RequestAPI.pdmerridpdsc3)
         {
            DataRow ttblpdmerridpdsc3Row = pdspdemloadpdsc3.ttblpdmerridpdsc3.Newttblpdmerridpdsc3Row();
            Pdmerridpdsc3.UpdateRowFromPdmerridpdsc3(ref ttblpdmerridpdsc3Row, obj);
            pdspdemloadpdsc3.ttblpdmerridpdsc3.Addttblpdmerridpdsc3Row((pdspdemloadpdsc3DataSet.ttblpdmerridpdsc3Row)ttblpdmerridpdsc3Row);
         }
          
         
         NLogLoggerP.Trace("PDEMLoadPDSC3 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLoadPDSC3(ref pdsContext, ref pdspdemloadpdsc3, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMLoadPDSC3 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc3); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc3.ttblpdemloadpdsc3results)
         {
            result.pdemloadpdsc3results.Add(Pdemloadpdsc3results.BuildPdemloadpdsc3resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc3.ttblpdmerridpdsc3)
         {
            result.pdmerridpdsc3.Add(Pdmerridpdsc3.BuildPdmerridpdsc3FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMUpdateValPDSC3ResponseAPI PDEMUpdateValPDSC3(Pdemloadpdsc3criteria pdemloadpdsc3criteria)
      {   
         var result = new AspdentryPDEMUpdateValPDSC3ResponseAPI();
         
         var pdspdemloadpdsc3 = new pdspdemloadpdsc3DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpdemloadpdsc3criteriaCriteria = pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Newttblpdemloadpdsc3criteriaRow();
         Pdemloadpdsc3criteria.UpdateRowFromPdemloadpdsc3criteria(ref ttblpdemloadpdsc3criteriaCriteria, pdemloadpdsc3criteria);
         pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Addttblpdemloadpdsc3criteriaRow((pdspdemloadpdsc3DataSet.ttblpdemloadpdsc3criteriaRow)ttblpdemloadpdsc3criteriaCriteria);
            
         bool lSuccessFL = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMUpdateValPDSC3 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateValPDSC3(ref pdsContext, ref pdspdemloadpdsc3, out pdsmessaging, out lSuccessFL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateValPDSC3 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc3); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc3.ttblpdmerridpdsc3)
         {
            result.pdmerridpdsc3.Add(Pdmerridpdsc3.BuildPdmerridpdsc3FromRow(row));
         }     
         result.lSuccessFL = lSuccessFL;
          
         return result;
          
      }

      public IEnumerable<Messaging> PDEMGridUpdatePDSC3(AspdentryPDEMGridUpdatePDSC3RequestAPI AspdentryPDEMGridUpdatePDSC3RequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspdemgridupdatepdsc1 = new pdspdemgridupdatepdsc1DataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemgridupdatepdsc1Row = pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Newttblpdemgridupdatepdsc1Row();
         Pdemgridupdatepdsc1.UpdateRowFromPdemgridupdatepdsc1(ref ttblpdemgridupdatepdsc1Row, AspdentryPDEMGridUpdatePDSC3RequestAPI.pdemgridupdatepdsc1);
         pdspdemgridupdatepdsc1.ttblpdemgridupdatepdsc1.Addttblpdemgridupdatepdsc1Row((pdspdemgridupdatepdsc1DataSet.ttblpdemgridupdatepdsc1Row)ttblpdemgridupdatepdsc1Row);
          
         var  lColOvrRd = AspdentryPDEMGridUpdatePDSC3RequestAPI.lColOvrRd;
            
         
         NLogLoggerP.Trace("PDEMGridUpdatePDSC3 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMGridUpdatePDSC3(ref pdsContext,  pdspdemgridupdatepdsc1,  lColOvrRd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMGridUpdatePDSC3 - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemgridupdatepdsc1); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Pdeminitializepdsr PDEMInitializePDSR(string cSetID)
      {   
         var result = new Pdeminitializepdsr();
         
         var pdspdeminitializepdsr = new pdspdeminitializepdsrDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMInitializePDSR - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMInitializePDSR(ref pdsContext,  cSetID, out pdspdeminitializepdsr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMInitializePDSR - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdeminitializepdsr); 
    
         if (pdspdeminitializepdsr.ttblpdeminitializepdsr.Count > 0) 
         { 
             result = Pdeminitializepdsr.BuildPdeminitializepdsrFromRow(pdspdeminitializepdsr.ttblpdeminitializepdsr[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMLoadPDSRResponseAPI PDEMLoadPDSR(AspdentryPDEMLoadPDSRRequestAPI AspdentryPDEMLoadPDSRRequestAPI)
      {   
         var result = new AspdentryPDEMLoadPDSRResponseAPI();
         
         var pdspdemloadpdsr = new pdspdemloadpdsrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsrcriteriaRow = pdspdemloadpdsr.ttblpdemloadpdsrcriteria.NewttblpdemloadpdsrcriteriaRow();
         Pdemloadpdsrcriteria.UpdateRowFromPdemloadpdsrcriteria(ref ttblpdemloadpdsrcriteriaRow, AspdentryPDEMLoadPDSRRequestAPI.pdemloadpdsrcriteria);
         pdspdemloadpdsr.ttblpdemloadpdsrcriteria.AddttblpdemloadpdsrcriteriaRow((pdspdemloadpdsrDataSet.ttblpdemloadpdsrcriteriaRow)ttblpdemloadpdsrcriteriaRow);
          
         foreach (var obj in AspdentryPDEMLoadPDSRRequestAPI.pdmerridpdsr)
         {
            DataRow ttblpdmerridpdsrRow = pdspdemloadpdsr.ttblpdmerridpdsr.NewttblpdmerridpdsrRow();
            Pdmerridpdsr.UpdateRowFromPdmerridpdsr(ref ttblpdmerridpdsrRow, obj);
            pdspdemloadpdsr.ttblpdmerridpdsr.AddttblpdmerridpdsrRow((pdspdemloadpdsrDataSet.ttblpdmerridpdsrRow)ttblpdmerridpdsrRow);
         }
          
         
         NLogLoggerP.Trace("PDEMLoadPDSR - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLoadPDSR(ref pdsContext, ref pdspdemloadpdsr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMLoadPDSR - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsr.ttblpdemloadpdsrresults)
         {
            result.pdemloadpdsrresults.Add(Pdemloadpdsrresults.BuildPdemloadpdsrresultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsr.ttblpdmerridpdsr)
         {
            result.pdmerridpdsr.Add(Pdmerridpdsr.BuildPdmerridpdsrFromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMUpdateValPDSRResponseAPI PDEMUpdateValPDSR(Pdemloadpdsrcriteria pdemloadpdsrcriteria)
      {   
         var result = new AspdentryPDEMUpdateValPDSRResponseAPI();
         
         var pdspdemloadpdsr = new pdspdemloadpdsrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpdemloadpdsrcriteriaCriteria = pdspdemloadpdsr.ttblpdemloadpdsrcriteria.NewttblpdemloadpdsrcriteriaRow();
         Pdemloadpdsrcriteria.UpdateRowFromPdemloadpdsrcriteria(ref ttblpdemloadpdsrcriteriaCriteria, pdemloadpdsrcriteria);
         pdspdemloadpdsr.ttblpdemloadpdsrcriteria.AddttblpdemloadpdsrcriteriaRow((pdspdemloadpdsrDataSet.ttblpdemloadpdsrcriteriaRow)ttblpdemloadpdsrcriteriaCriteria);
            
         bool lSuccessFL = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMUpdateValPDSR - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateValPDSR(ref pdsContext, ref pdspdemloadpdsr, out pdsmessaging, out lSuccessFL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateValPDSR - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsr.ttblpdmerridpdsr)
         {
            result.pdmerridpdsr.Add(Pdmerridpdsr.BuildPdmerridpdsrFromRow(row));
         }     
         result.lSuccessFL = lSuccessFL;
          
         return result;
          
      }

      public IEnumerable<Messaging> PDEMGridUpdatePDSR(AspdentryPDEMGridUpdatePDSRRequestAPI AspdentryPDEMGridUpdatePDSRRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdspdemgridupdatepdsr = new pdspdemgridupdatepdsrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemgridupdatepdsrRow = pdspdemgridupdatepdsr.ttblpdemgridupdatepdsr.NewttblpdemgridupdatepdsrRow();
         Pdemgridupdatepdsr.UpdateRowFromPdemgridupdatepdsr(ref ttblpdemgridupdatepdsrRow, AspdentryPDEMGridUpdatePDSRRequestAPI.pdemgridupdatepdsr);
         pdspdemgridupdatepdsr.ttblpdemgridupdatepdsr.AddttblpdemgridupdatepdsrRow((pdspdemgridupdatepdsrDataSet.ttblpdemgridupdatepdsrRow)ttblpdemgridupdatepdsrRow);
          
         var  lColOvrRd = AspdentryPDEMGridUpdatePDSRRequestAPI.lColOvrRd;
            
         
         NLogLoggerP.Trace("PDEMGridUpdatePDSR - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMGridUpdatePDSR(ref pdsContext,  pdspdemgridupdatepdsr,  lColOvrRd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMGridUpdatePDSR - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemgridupdatepdsr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Pdemupdaterptinit PDEMUpdateRptInit(string cSetID)
      {   
         var result = new Pdemupdaterptinit();
         
         var pdspdemupdaterptinit = new pdspdemupdaterptinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMUpdateRptInit - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateRptInit(ref pdsContext,  cSetID, out pdspdemupdaterptinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateRptInit - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemupdaterptinit); 
    
         if (pdspdemupdaterptinit.ttblpdemupdaterptinit.Count > 0) 
         { 
             result = Pdemupdaterptinit.BuildPdemupdaterptinitFromRow(pdspdemupdaterptinit.ttblpdemupdaterptinit[0]);
         } 
              
          
         return result;
          
      }

      public void PDEMUpdateRptOK(AspdentryPDEMUpdateRptOKRequestAPI AspdentryPDEMUpdateRptOKRequestAPI)
      {   
         
         var pdspdemupdaterptok = new pdspdemupdaterptokDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemupdaterptokRow = pdspdemupdaterptok.ttblpdemupdaterptok.NewttblpdemupdaterptokRow();
         Pdemupdaterptok.UpdateRowFromPdemupdaterptok(ref ttblpdemupdaterptokRow, AspdentryPDEMUpdateRptOKRequestAPI.pdemupdaterptok);
         pdspdemupdaterptok.ttblpdemupdaterptok.AddttblpdemupdaterptokRow((pdspdemupdaterptokDataSet.ttblpdemupdaterptokRow)ttblpdemupdaterptokRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspdentryPDEMUpdateRptOKRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("PDEMUpdateRptOK - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMUpdateRptOK(ref pdsContext,  pdspdemupdaterptok,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMUpdateRptOK - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemupdaterptok);
      }

      public void PDEMDeleteFromSet(IEnumerable<Pdemdeletefromset> pdemdeletefromset)
      {   
         
         var pdspdemdeletefromset = new pdspdemdeletefromsetDataSet();
            
         foreach (var obj in pdemdeletefromset)
         {
             DataRow row = pdspdemdeletefromset.ttblpdemdeletefromset.NewttblpdemdeletefromsetRow();
             Pdemdeletefromset.UpdateRowFromPdemdeletefromset(ref row, obj);
             pdspdemdeletefromset.ttblpdemdeletefromset.AddttblpdemdeletefromsetRow((pdspdemdeletefromsetDataSet.ttblpdemdeletefromsetRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMDeleteFromSet - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMDeleteFromSet(ref pdsContext,  pdspdemdeletefromset, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMDeleteFromSet - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemdeletefromset);
      }

      public AspdentryPDEMExcelImportUpdtPDSC1ResponseAPI PDEMExcelImportUpdtPDSC1(AspdentryPDEMExcelImportUpdtPDSC1RequestAPI AspdentryPDEMExcelImportUpdtPDSC1RequestAPI)
      {   
         var result = new AspdentryPDEMExcelImportUpdtPDSC1ResponseAPI();
         
         var pdspdemloadpdsc1 = new pdspdemloadpdsc1DataSet();
            
         var pdspdemimportexcelerrors = new pdspdemimportexcelerrorsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc1criteriaRow = pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Newttblpdemloadpdsc1criteriaRow();
         Pdemloadpdsc1criteria.UpdateRowFromPdemloadpdsc1criteria(ref ttblpdemloadpdsc1criteriaRow, AspdentryPDEMExcelImportUpdtPDSC1RequestAPI.pdemloadpdsc1criteria);
         pdspdemloadpdsc1.ttblpdemloadpdsc1criteria.Addttblpdemloadpdsc1criteriaRow((pdspdemloadpdsc1DataSet.ttblpdemloadpdsc1criteriaRow)ttblpdemloadpdsc1criteriaRow);
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC1RequestAPI.pdemloadpdsc1results)
         {
            DataRow ttblpdemloadpdsc1resultsRow = pdspdemloadpdsc1.ttblpdemloadpdsc1results.Newttblpdemloadpdsc1resultsRow();
            Pdemloadpdsc1results.UpdateRowFromPdemloadpdsc1results(ref ttblpdemloadpdsc1resultsRow, obj);
            pdspdemloadpdsc1.ttblpdemloadpdsc1results.Addttblpdemloadpdsc1resultsRow((pdspdemloadpdsc1DataSet.ttblpdemloadpdsc1resultsRow)ttblpdemloadpdsc1resultsRow);
         }
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC1RequestAPI.pdmerridpdsc1)
         {
            DataRow ttblpdmerridpdsc1Row = pdspdemloadpdsc1.ttblpdmerridpdsc1.Newttblpdmerridpdsc1Row();
            Pdmerridpdsc1.UpdateRowFromPdmerridpdsc1(ref ttblpdmerridpdsc1Row, obj);
            pdspdemloadpdsc1.ttblpdmerridpdsc1.Addttblpdmerridpdsc1Row((pdspdemloadpdsc1DataSet.ttblpdmerridpdsc1Row)ttblpdmerridpdsc1Row);
         }
          
         var  cSetID = AspdentryPDEMExcelImportUpdtPDSC1RequestAPI.cSetID;
            
         var  cImportFieldList = AspdentryPDEMExcelImportUpdtPDSC1RequestAPI.cImportFieldList;
            
         
         NLogLoggerP.Trace("PDEMExcelImportUpdtPDSC1 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportUpdtPDSC1(ref pdsContext,  cSetID,  cImportFieldList, ref pdspdemloadpdsc1, out pdspdemimportexcelerrors, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportUpdtPDSC1 - Aspdentry - After Call");

         
         this.ReportErrors(pdspdemimportexcelerrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc1); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemimportexcelerrors.ttblpdemimportexcelerrors)
         {
            result.pdemimportexcelerrors.Add(Pdemimportexcelerrors.BuildPdemimportexcelerrorsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc1.ttblpdemloadpdsc1results)
         {
            result.pdemloadpdsc1results.Add(Pdemloadpdsc1results.BuildPdemloadpdsc1resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc1.ttblpdmerridpdsc1)
         {
            result.pdmerridpdsc1.Add(Pdmerridpdsc1.BuildPdmerridpdsc1FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelImportUpdtPDSC2ResponseAPI PDEMExcelImportUpdtPDSC2(AspdentryPDEMExcelImportUpdtPDSC2RequestAPI AspdentryPDEMExcelImportUpdtPDSC2RequestAPI)
      {   
         var result = new AspdentryPDEMExcelImportUpdtPDSC2ResponseAPI();
         
         var pdspdemloadpdsc2 = new pdspdemloadpdsc2DataSet();
            
         var pdspdemimportexcelerrors = new pdspdemimportexcelerrorsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc2criteriaRow = pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Newttblpdemloadpdsc2criteriaRow();
         Pdemloadpdsc2criteria.UpdateRowFromPdemloadpdsc2criteria(ref ttblpdemloadpdsc2criteriaRow, AspdentryPDEMExcelImportUpdtPDSC2RequestAPI.pdemloadpdsc2criteria);
         pdspdemloadpdsc2.ttblpdemloadpdsc2criteria.Addttblpdemloadpdsc2criteriaRow((pdspdemloadpdsc2DataSet.ttblpdemloadpdsc2criteriaRow)ttblpdemloadpdsc2criteriaRow);
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC2RequestAPI.pdemloadpdsc2results)
         {
            DataRow ttblpdemloadpdsc2resultsRow = pdspdemloadpdsc2.ttblpdemloadpdsc2results.Newttblpdemloadpdsc2resultsRow();
            Pdemloadpdsc2results.UpdateRowFromPdemloadpdsc2results(ref ttblpdemloadpdsc2resultsRow, obj);
            pdspdemloadpdsc2.ttblpdemloadpdsc2results.Addttblpdemloadpdsc2resultsRow((pdspdemloadpdsc2DataSet.ttblpdemloadpdsc2resultsRow)ttblpdemloadpdsc2resultsRow);
         }
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC2RequestAPI.pdmerridpdsc2)
         {
            DataRow ttblpdmerridpdsc2Row = pdspdemloadpdsc2.ttblpdmerridpdsc2.Newttblpdmerridpdsc2Row();
            Pdmerridpdsc2.UpdateRowFromPdmerridpdsc2(ref ttblpdmerridpdsc2Row, obj);
            pdspdemloadpdsc2.ttblpdmerridpdsc2.Addttblpdmerridpdsc2Row((pdspdemloadpdsc2DataSet.ttblpdmerridpdsc2Row)ttblpdmerridpdsc2Row);
         }
          
         var  cSetID = AspdentryPDEMExcelImportUpdtPDSC2RequestAPI.cSetID;
            
         var  cImportFieldList = AspdentryPDEMExcelImportUpdtPDSC2RequestAPI.cImportFieldList;
            
         
         NLogLoggerP.Trace("PDEMExcelImportUpdtPDSC2 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportUpdtPDSC2(ref pdsContext,  cSetID,  cImportFieldList, ref pdspdemloadpdsc2, out pdspdemimportexcelerrors, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportUpdtPDSC2 - Aspdentry - After Call");

         
         this.ReportErrors(pdspdemimportexcelerrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc2); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemimportexcelerrors.ttblpdemimportexcelerrors)
         {
            result.pdemimportexcelerrors.Add(Pdemimportexcelerrors.BuildPdemimportexcelerrorsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc2.ttblpdemloadpdsc2results)
         {
            result.pdemloadpdsc2results.Add(Pdemloadpdsc2results.BuildPdemloadpdsc2resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc2.ttblpdmerridpdsc2)
         {
            result.pdmerridpdsc2.Add(Pdmerridpdsc2.BuildPdmerridpdsc2FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelImportUpdtPDSC3ResponseAPI PDEMExcelImportUpdtPDSC3(AspdentryPDEMExcelImportUpdtPDSC3RequestAPI AspdentryPDEMExcelImportUpdtPDSC3RequestAPI)
      {   
         var result = new AspdentryPDEMExcelImportUpdtPDSC3ResponseAPI();
         
         var pdspdemloadpdsc3 = new pdspdemloadpdsc3DataSet();
            
         var pdspdemimportexcelerrors = new pdspdemimportexcelerrorsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsc3criteriaRow = pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Newttblpdemloadpdsc3criteriaRow();
         Pdemloadpdsc3criteria.UpdateRowFromPdemloadpdsc3criteria(ref ttblpdemloadpdsc3criteriaRow, AspdentryPDEMExcelImportUpdtPDSC3RequestAPI.pdemloadpdsc3criteria);
         pdspdemloadpdsc3.ttblpdemloadpdsc3criteria.Addttblpdemloadpdsc3criteriaRow((pdspdemloadpdsc3DataSet.ttblpdemloadpdsc3criteriaRow)ttblpdemloadpdsc3criteriaRow);
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC3RequestAPI.pdemloadpdsc3results)
         {
            DataRow ttblpdemloadpdsc3resultsRow = pdspdemloadpdsc3.ttblpdemloadpdsc3results.Newttblpdemloadpdsc3resultsRow();
            Pdemloadpdsc3results.UpdateRowFromPdemloadpdsc3results(ref ttblpdemloadpdsc3resultsRow, obj);
            pdspdemloadpdsc3.ttblpdemloadpdsc3results.Addttblpdemloadpdsc3resultsRow((pdspdemloadpdsc3DataSet.ttblpdemloadpdsc3resultsRow)ttblpdemloadpdsc3resultsRow);
         }
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSC3RequestAPI.pdmerridpdsc3)
         {
            DataRow ttblpdmerridpdsc3Row = pdspdemloadpdsc3.ttblpdmerridpdsc3.Newttblpdmerridpdsc3Row();
            Pdmerridpdsc3.UpdateRowFromPdmerridpdsc3(ref ttblpdmerridpdsc3Row, obj);
            pdspdemloadpdsc3.ttblpdmerridpdsc3.Addttblpdmerridpdsc3Row((pdspdemloadpdsc3DataSet.ttblpdmerridpdsc3Row)ttblpdmerridpdsc3Row);
         }
          
         var  cSetID = AspdentryPDEMExcelImportUpdtPDSC3RequestAPI.cSetID;
            
         var  cImportFieldList = AspdentryPDEMExcelImportUpdtPDSC3RequestAPI.cImportFieldList;
            
         
         NLogLoggerP.Trace("PDEMExcelImportUpdtPDSC3 - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportUpdtPDSC3(ref pdsContext,  cSetID,  cImportFieldList, ref pdspdemloadpdsc3, out pdspdemimportexcelerrors, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportUpdtPDSC3 - Aspdentry - After Call");

         
         this.ReportErrors(pdspdemimportexcelerrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsc3); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemimportexcelerrors.ttblpdemimportexcelerrors)
         {
            result.pdemimportexcelerrors.Add(Pdemimportexcelerrors.BuildPdemimportexcelerrorsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc3.ttblpdemloadpdsc3results)
         {
            result.pdemloadpdsc3results.Add(Pdemloadpdsc3results.BuildPdemloadpdsc3resultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsc3.ttblpdmerridpdsc3)
         {
            result.pdmerridpdsc3.Add(Pdmerridpdsc3.BuildPdmerridpdsc3FromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelImportUpdtPDSRResponseAPI PDEMExcelImportUpdtPDSR(AspdentryPDEMExcelImportUpdtPDSRRequestAPI AspdentryPDEMExcelImportUpdtPDSRRequestAPI)
      {   
         var result = new AspdentryPDEMExcelImportUpdtPDSRResponseAPI();
         
         var pdspdemloadpdsr = new pdspdemloadpdsrDataSet();
            
         var pdspdemimportexcelerrors = new pdspdemimportexcelerrorsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemloadpdsrcriteriaRow = pdspdemloadpdsr.ttblpdemloadpdsrcriteria.NewttblpdemloadpdsrcriteriaRow();
         Pdemloadpdsrcriteria.UpdateRowFromPdemloadpdsrcriteria(ref ttblpdemloadpdsrcriteriaRow, AspdentryPDEMExcelImportUpdtPDSRRequestAPI.pdemloadpdsrcriteria);
         pdspdemloadpdsr.ttblpdemloadpdsrcriteria.AddttblpdemloadpdsrcriteriaRow((pdspdemloadpdsrDataSet.ttblpdemloadpdsrcriteriaRow)ttblpdemloadpdsrcriteriaRow);
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSRRequestAPI.pdemloadpdsrresults)
         {
            DataRow ttblpdemloadpdsrresultsRow = pdspdemloadpdsr.ttblpdemloadpdsrresults.NewttblpdemloadpdsrresultsRow();
            Pdemloadpdsrresults.UpdateRowFromPdemloadpdsrresults(ref ttblpdemloadpdsrresultsRow, obj);
            pdspdemloadpdsr.ttblpdemloadpdsrresults.AddttblpdemloadpdsrresultsRow((pdspdemloadpdsrDataSet.ttblpdemloadpdsrresultsRow)ttblpdemloadpdsrresultsRow);
         }
          
         foreach (var obj in AspdentryPDEMExcelImportUpdtPDSRRequestAPI.pdmerridpdsr)
         {
            DataRow ttblpdmerridpdsrRow = pdspdemloadpdsr.ttblpdmerridpdsr.NewttblpdmerridpdsrRow();
            Pdmerridpdsr.UpdateRowFromPdmerridpdsr(ref ttblpdmerridpdsrRow, obj);
            pdspdemloadpdsr.ttblpdmerridpdsr.AddttblpdmerridpdsrRow((pdspdemloadpdsrDataSet.ttblpdmerridpdsrRow)ttblpdmerridpdsrRow);
         }
          
         var  cSetID = AspdentryPDEMExcelImportUpdtPDSRRequestAPI.cSetID;
            
         var  cImportFieldList = AspdentryPDEMExcelImportUpdtPDSRRequestAPI.cImportFieldList;
            
         
         NLogLoggerP.Trace("PDEMExcelImportUpdtPDSR - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportUpdtPDSR(ref pdsContext,  cSetID,  cImportFieldList, ref pdspdemloadpdsr, out pdspdemimportexcelerrors, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportUpdtPDSR - Aspdentry - After Call");

         
         this.ReportErrors(pdspdemimportexcelerrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemloadpdsr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemimportexcelerrors.ttblpdemimportexcelerrors)
         {
            result.pdemimportexcelerrors.Add(Pdemimportexcelerrors.BuildPdemimportexcelerrorsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsr.ttblpdemloadpdsrresults)
         {
            result.pdemloadpdsrresults.Add(Pdemloadpdsrresults.BuildPdemloadpdsrresultsFromRow(row));
         }     
         foreach (DataRow row in pdspdemloadpdsr.ttblpdmerridpdsr)
         {
            result.pdmerridpdsr.Add(Pdmerridpdsr.BuildPdmerridpdsrFromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelImportNewInitResponseAPI PDEMExcelImportNewInit()
      {   
         var result = new AspdentryPDEMExcelImportNewInitResponseAPI();
         
         var pdspdemexcelimportnewinit = new pdspdemexcelimportnewinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMExcelImportNewInit - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportNewInit(ref pdsContext, out pdspdemexcelimportnewinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportNewInit - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelimportnewinit); 
    
         foreach (DataRow row in pdspdemexcelimportnewinit.ttblpdemexcelimportdropdowns)
         {
            result.pdemexcelimportdropdowns.Add(Pdemexcelimportdropdowns.BuildPdemexcelimportdropdownsFromRow(row));
         }     
         if (pdspdemexcelimportnewinit.ttblpdemexcelimportnewinit.Count > 0)
         {
            result.pdemexcelimportnewinit = Pdemexcelimportnewinit.BuildPdemexcelimportnewinitFromRow(pdspdemexcelimportnewinit.ttblpdemexcelimportnewinit[0]);
         }
                    
          
         return result;
          
      }

      public Pdemexcelimportonchgrcrdty PDEMExcelImportOnChgRcrdTy(string cRecordType)
      {   
         var result = new Pdemexcelimportonchgrcrdty();
         
         var pdspdemexcelimportonchgrcrdty = new pdspdemexcelimportonchgrcrdtyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMExcelImportOnChgRcrdTy - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportOnChgRcrdTy(ref pdsContext,  cRecordType, out pdspdemexcelimportonchgrcrdty, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportOnChgRcrdTy - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelimportonchgrcrdty); 
    
         if (pdspdemexcelimportonchgrcrdty.ttblpdemexcelimportonchgrcrdty.Count > 0) 
         { 
             result = Pdemexcelimportonchgrcrdty.BuildPdemexcelimportonchgrcrdtyFromRow(pdspdemexcelimportonchgrcrdty.ttblpdemexcelimportonchgrcrdty[0]);
         } 
              
          
         return result;
          
      }

      public Pdemexcelimportnewsingle PDEMExcelImportAddNewSet(Pdemexcelimportnewcriteria pdemexcelimportnewcriteria)
      {   
         var result = new Pdemexcelimportnewsingle();
         
         var pdspdemexcelimportnew = new pdspdemexcelimportnewDataSet();
            
         DataRow ttblpdemexcelimportnewcriteriaCriteria = pdspdemexcelimportnew.ttblpdemexcelimportnewcriteria.NewttblpdemexcelimportnewcriteriaRow();
         Pdemexcelimportnewcriteria.UpdateRowFromPdemexcelimportnewcriteria(ref ttblpdemexcelimportnewcriteriaCriteria, pdemexcelimportnewcriteria);
         pdspdemexcelimportnew.ttblpdemexcelimportnewcriteria.AddttblpdemexcelimportnewcriteriaRow((pdspdemexcelimportnewDataSet.ttblpdemexcelimportnewcriteriaRow)ttblpdemexcelimportnewcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMExcelImportAddNewSet - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportAddNewSet(ref pdsContext, ref pdspdemexcelimportnew, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportAddNewSet - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelimportnew); 
    
         if (pdspdemexcelimportnew.ttblpdemexcelimportnewsingle.Count > 0) 
         { 
             result = Pdemexcelimportnewsingle.BuildPdemexcelimportnewsingleFromRow(pdspdemexcelimportnew.ttblpdemexcelimportnewsingle[0]);
         } 
              
          
         return result;
          
      }

      public Pdemexcelnewsetupdtcinit PDEMExcelNewSetUpdtCInit(string cRecordType)
      {   
         var result = new Pdemexcelnewsetupdtcinit();
         
         var pdspdemexcelnewsetupdtc = new pdspdemexcelnewsetupdtcDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMExcelNewSetUpdtCInit - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelNewSetUpdtCInit(ref pdsContext,  cRecordType, out pdspdemexcelnewsetupdtc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelNewSetUpdtCInit - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelnewsetupdtc); 
    
         if (pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcinit.Count > 0) 
         { 
             result = Pdemexcelnewsetupdtcinit.BuildPdemexcelnewsetupdtcinitFromRow(pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcinit[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMExcelNewSetUpdtCAddResponseAPI PDEMExcelNewSetUpdtCAdd(AspdentryPDEMExcelNewSetUpdtCAddRequestAPI AspdentryPDEMExcelNewSetUpdtCAddRequestAPI)
      {   
         var result = new AspdentryPDEMExcelNewSetUpdtCAddResponseAPI();
         
         var pdspdemexcelnewsetupdtc = new pdspdemexcelnewsetupdtcDataSet();
            
         var pdspdemexcelimportnew = new pdspdemexcelimportnewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspdentryPDEMExcelNewSetUpdtCAddRequestAPI.pdemexcelimportnewresults)
         {
            DataRow ttblpdemexcelimportnewresultsRow = pdspdemexcelimportnew.ttblpdemexcelimportnewresults.NewttblpdemexcelimportnewresultsRow();
            Pdemexcelimportnewresults.UpdateRowFromPdemexcelimportnewresults(ref ttblpdemexcelimportnewresultsRow, obj);
            pdspdemexcelimportnew.ttblpdemexcelimportnewresults.AddttblpdemexcelimportnewresultsRow((pdspdemexcelimportnewDataSet.ttblpdemexcelimportnewresultsRow)ttblpdemexcelimportnewresultsRow);
         }
          
         DataRow ttblpdemexcelnewsetupdtcaddRow = pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcadd.NewttblpdemexcelnewsetupdtcaddRow();
         Pdemexcelnewsetupdtcadd.UpdateRowFromPdemexcelnewsetupdtcadd(ref ttblpdemexcelnewsetupdtcaddRow, AspdentryPDEMExcelNewSetUpdtCAddRequestAPI.pdemexcelnewsetupdtcadd);
         pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcadd.AddttblpdemexcelnewsetupdtcaddRow((pdspdemexcelnewsetupdtcDataSet.ttblpdemexcelnewsetupdtcaddRow)ttblpdemexcelnewsetupdtcaddRow);
          
         DataRow ttblpdemexcelnewsetupdtcinitRow = pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcinit.NewttblpdemexcelnewsetupdtcinitRow();
         Pdemexcelnewsetupdtcinit.UpdateRowFromPdemexcelnewsetupdtcinit(ref ttblpdemexcelnewsetupdtcinitRow, AspdentryPDEMExcelNewSetUpdtCAddRequestAPI.pdemexcelnewsetupdtcinit);
         pdspdemexcelnewsetupdtc.ttblpdemexcelnewsetupdtcinit.AddttblpdemexcelnewsetupdtcinitRow((pdspdemexcelnewsetupdtcDataSet.ttblpdemexcelnewsetupdtcinitRow)ttblpdemexcelnewsetupdtcinitRow);
          
         
         NLogLoggerP.Trace("PDEMExcelNewSetUpdtCAdd - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelNewSetUpdtCAdd(ref pdsContext,  pdspdemexcelnewsetupdtc, ref pdspdemexcelimportnew, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelNewSetUpdtCAdd - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelnewsetupdtc); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemexcelimportnew.ttblpdemexcelimportnewresults)
         {
            result.pdemexcelimportnewresults.Add(Pdemexcelimportnewresults.BuildPdemexcelimportnewresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelNewSetUpdtRAddResponseAPI PDEMExcelNewSetUpdtRAdd(AspdentryPDEMExcelNewSetUpdtRAddRequestAPI AspdentryPDEMExcelNewSetUpdtRAddRequestAPI)
      {   
         var result = new AspdentryPDEMExcelNewSetUpdtRAddResponseAPI();
         
         var pdspdemexcelnewsetupdtr = new pdspdemexcelnewsetupdtrDataSet();
            
         var pdspdemexcelimportnew = new pdspdemexcelimportnewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspdentryPDEMExcelNewSetUpdtRAddRequestAPI.pdemexcelimportnewresults)
         {
            DataRow ttblpdemexcelimportnewresultsRow = pdspdemexcelimportnew.ttblpdemexcelimportnewresults.NewttblpdemexcelimportnewresultsRow();
            Pdemexcelimportnewresults.UpdateRowFromPdemexcelimportnewresults(ref ttblpdemexcelimportnewresultsRow, obj);
            pdspdemexcelimportnew.ttblpdemexcelimportnewresults.AddttblpdemexcelimportnewresultsRow((pdspdemexcelimportnewDataSet.ttblpdemexcelimportnewresultsRow)ttblpdemexcelimportnewresultsRow);
         }
          
         DataRow ttblpdemexcelnewsetupdtraddRow = pdspdemexcelnewsetupdtr.ttblpdemexcelnewsetupdtradd.NewttblpdemexcelnewsetupdtraddRow();
         Pdemexcelnewsetupdtradd.UpdateRowFromPdemexcelnewsetupdtradd(ref ttblpdemexcelnewsetupdtraddRow, AspdentryPDEMExcelNewSetUpdtRAddRequestAPI.pdemexcelnewsetupdtradd);
         pdspdemexcelnewsetupdtr.ttblpdemexcelnewsetupdtradd.AddttblpdemexcelnewsetupdtraddRow((pdspdemexcelnewsetupdtrDataSet.ttblpdemexcelnewsetupdtraddRow)ttblpdemexcelnewsetupdtraddRow);
          
         
         NLogLoggerP.Trace("PDEMExcelNewSetUpdtRAdd - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelNewSetUpdtRAdd(ref pdsContext,  pdspdemexcelnewsetupdtr, ref pdspdemexcelimportnew, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelNewSetUpdtRAdd - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelnewsetupdtr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdspdemexcelimportnew.ttblpdemexcelimportnewresults)
         {
            result.pdemexcelimportnewresults.Add(Pdemexcelimportnewresults.BuildPdemexcelimportnewresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AspdentryPDEMExcelImportNewOkResponseAPI PDEMExcelImportNewOk(AspdentryPDEMExcelImportNewOkRequestAPI AspdentryPDEMExcelImportNewOkRequestAPI)
      {   
         var result = new AspdentryPDEMExcelImportNewOkResponseAPI();
         
         var pdspdemexcelimportnew = new pdspdemexcelimportnewDataSet();
            
         var pdspdemimportnewfile = new pdspdemimportnewfileDataSet();
            
         string cNextView = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemexcelimportnewcriteriaRow = pdspdemexcelimportnew.ttblpdemexcelimportnewcriteria.NewttblpdemexcelimportnewcriteriaRow();
         Pdemexcelimportnewcriteria.UpdateRowFromPdemexcelimportnewcriteria(ref ttblpdemexcelimportnewcriteriaRow, AspdentryPDEMExcelImportNewOkRequestAPI.pdemexcelimportnewcriteria);
         pdspdemexcelimportnew.ttblpdemexcelimportnewcriteria.AddttblpdemexcelimportnewcriteriaRow((pdspdemexcelimportnewDataSet.ttblpdemexcelimportnewcriteriaRow)ttblpdemexcelimportnewcriteriaRow);
          
         foreach (var obj in AspdentryPDEMExcelImportNewOkRequestAPI.pdemexcelimportnewresults)
         {
            DataRow ttblpdemexcelimportnewresultsRow = pdspdemexcelimportnew.ttblpdemexcelimportnewresults.NewttblpdemexcelimportnewresultsRow();
            Pdemexcelimportnewresults.UpdateRowFromPdemexcelimportnewresults(ref ttblpdemexcelimportnewresultsRow, obj);
            pdspdemexcelimportnew.ttblpdemexcelimportnewresults.AddttblpdemexcelimportnewresultsRow((pdspdemexcelimportnewDataSet.ttblpdemexcelimportnewresultsRow)ttblpdemexcelimportnewresultsRow);
         }
          
         foreach (var obj in AspdentryPDEMExcelImportNewOkRequestAPI.pdemimportnewfiledata)
         {
            DataRow ttblpdemimportnewfiledataRow = pdspdemimportnewfile.ttblpdemimportnewfiledata.NewttblpdemimportnewfiledataRow();
            Pdemimportnewfiledata.UpdateRowFromPdemimportnewfiledata(ref ttblpdemimportnewfiledataRow, obj);
            pdspdemimportnewfile.ttblpdemimportnewfiledata.AddttblpdemimportnewfiledataRow((pdspdemimportnewfileDataSet.ttblpdemimportnewfiledataRow)ttblpdemimportnewfiledataRow);
         }
          
         DataRow ttblpdemimportnewfilesingleRow = pdspdemimportnewfile.ttblpdemimportnewfilesingle.NewttblpdemimportnewfilesingleRow();
         Pdemimportnewfilesingle.UpdateRowFromPdemimportnewfilesingle(ref ttblpdemimportnewfilesingleRow, AspdentryPDEMExcelImportNewOkRequestAPI.pdemimportnewfilesingle);
         pdspdemimportnewfile.ttblpdemimportnewfilesingle.AddttblpdemimportnewfilesingleRow((pdspdemimportnewfileDataSet.ttblpdemimportnewfilesingleRow)ttblpdemimportnewfilesingleRow);
          
         
         NLogLoggerP.Trace("PDEMExcelImportNewOk - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMExcelImportNewOk(ref pdsContext,  pdspdemexcelimportnew, ref pdspdemimportnewfile, out cNextView, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMExcelImportNewOk - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemexcelimportnew); 
    
         foreach (DataRow row in pdspdemimportnewfile.ttblpdemimportnewexcelerrors)
         {
            result.pdemimportnewexcelerrors.Add(Pdemimportnewexcelerrors.BuildPdemimportnewexcelerrorsFromRow(row));
         }     
         result.cNextView = cNextView;
          
         return result;
          
      }

      public AspdentryPDEMLookupSearchResponseAPI PDEMLookupSearch(Pdemlookupcriteria pdemlookupcriteria)
      {   
         var result = new AspdentryPDEMLookupSearchResponseAPI();
         
         var pdspdemlookup = new pdspdemlookupDataSet();
            
         DataRow ttblpdemlookupcriteriaCriteria = pdspdemlookup.ttblpdemlookupcriteria.NewttblpdemlookupcriteriaRow();
         Pdemlookupcriteria.UpdateRowFromPdemlookupcriteria(ref ttblpdemlookupcriteriaCriteria, pdemlookupcriteria);
         pdspdemlookup.ttblpdemlookupcriteria.AddttblpdemlookupcriteriaRow((pdspdemlookupDataSet.ttblpdemlookupcriteriaRow)ttblpdemlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDEMLookupSearch - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLookupSearch(ref pdsContext, ref pdspdemlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDEMLookupSearch - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemlookup); 
    
         foreach (DataRow row in pdspdemlookup.ttblpdemlookupresults)
         {
            result.pdemlookupresults.Add(Pdemlookupresults.BuildPdemlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdentryPDEMLookupSourceTypesResponseAPI PDEMLookupSourceTypes()
      {   
         var result = new AspdentryPDEMLookupSourceTypesResponseAPI();
         
         string pvSrctypes = string.Empty;
         string pvSrcdesc = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMLookupSourceTypes - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMLookupSourceTypes(ref pdsContext, out pvSrctypes, out pvSrcdesc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMLookupSourceTypes - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.pvSrctypes = pvSrctypes;
         result.pvSrcdesc = pvSrcdesc;
          
         return result;
          
      }

      public IEnumerable<Pderclaimtotalresults> PDERClaimTotal(Pderclaimtotalcriteria pderclaimtotalcriteria)
      {   
         var results = new List<Pderclaimtotalresults>();
         
         var pdspderclaimtotal = new pdspderclaimtotalDataSet();
            
         DataRow ttblpderclaimtotalcriteriaCriteria = pdspderclaimtotal.ttblpderclaimtotalcriteria.NewttblpderclaimtotalcriteriaRow();
         Pderclaimtotalcriteria.UpdateRowFromPderclaimtotalcriteria(ref ttblpderclaimtotalcriteriaCriteria, pderclaimtotalcriteria);
         pdspderclaimtotal.ttblpderclaimtotalcriteria.AddttblpderclaimtotalcriteriaRow((pdspderclaimtotalDataSet.ttblpderclaimtotalcriteriaRow)ttblpderclaimtotalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERClaimTotal - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERClaimTotal(ref pdsContext, ref pdspderclaimtotal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERClaimTotal - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderclaimtotal); 
    
            foreach (DataRow row in pdspderclaimtotal.ttblpderclaimtotalresults)
            {
                results.Add(Pderclaimtotalresults.BuildPderclaimtotalresultsFromRow(row));
            }
            return results;
        
      }

      public void PDERLockClaim(Pderlockclaim pderlockclaim)
      {   
         
         var pdspderlockclaim = new pdspderlockclaimDataSet();
            
         DataRow ttblpderlockclaimCriteria = pdspderlockclaim.ttblpderlockclaim.NewttblpderlockclaimRow();
         Pderlockclaim.UpdateRowFromPderlockclaim(ref ttblpderlockclaimCriteria, pderlockclaim);
         pdspderlockclaim.ttblpderlockclaim.AddttblpderlockclaimRow((pdspderlockclaimDataSet.ttblpderlockclaimRow)ttblpderlockclaimCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERLockClaim - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERLockClaim(ref pdsContext,  pdspderlockclaim, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERLockClaim - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderlockclaim);
      }

      public void PDERUnlockClaim(Pderlockclaim pderlockclaim)
      {   
         
         var pdspderlockclaim = new pdspderlockclaimDataSet();
            
         DataRow ttblpderlockclaimCriteria = pdspderlockclaim.ttblpderlockclaim.NewttblpderlockclaimRow();
         Pderlockclaim.UpdateRowFromPderlockclaim(ref ttblpderlockclaimCriteria, pderlockclaim);
         pdspderlockclaim.ttblpderlockclaim.AddttblpderlockclaimRow((pdspderlockclaimDataSet.ttblpderlockclaimRow)ttblpderlockclaimCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERUnlockClaim - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERUnlockClaim(ref pdsContext,  pdspderlockclaim, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERUnlockClaim - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderlockclaim);
      }

      public AspdentryPDERGetClaimResponseAPI PDERGetClaim(Pdergetclaimcriteria pdergetclaimcriteria)
      {   
         var result = new AspdentryPDERGetClaimResponseAPI();
         
         var pdspdergetclaim = new pdspdergetclaimDataSet();
            
         DataRow ttblpdergetclaimcriteriaCriteria = pdspdergetclaim.ttblpdergetclaimcriteria.NewttblpdergetclaimcriteriaRow();
         Pdergetclaimcriteria.UpdateRowFromPdergetclaimcriteria(ref ttblpdergetclaimcriteriaCriteria, pdergetclaimcriteria);
         pdspdergetclaim.ttblpdergetclaimcriteria.AddttblpdergetclaimcriteriaRow((pdspdergetclaimDataSet.ttblpdergetclaimcriteriaRow)ttblpdergetclaimcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDERGetClaim - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERGetClaim(ref pdsContext, ref pdspdergetclaim, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDERGetClaim - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdergetclaim); 
    
         foreach (DataRow row in pdspdergetclaim.ttblpdergetclaimresults)
         {
            result.pdergetclaimresults.Add(Pdergetclaimresults.BuildPdergetclaimresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdentryPDERGetReceiptResponseAPI PDERGetReceipt(Pdergetreceiptcriteria pdergetreceiptcriteria)
      {   
         var result = new AspdentryPDERGetReceiptResponseAPI();
         
         var pdspdergetreceipt = new pdspdergetreceiptDataSet();
            
         DataRow ttblpdergetreceiptcriteriaCriteria = pdspdergetreceipt.ttblpdergetreceiptcriteria.NewttblpdergetreceiptcriteriaRow();
         Pdergetreceiptcriteria.UpdateRowFromPdergetreceiptcriteria(ref ttblpdergetreceiptcriteriaCriteria, pdergetreceiptcriteria);
         pdspdergetreceipt.ttblpdergetreceiptcriteria.AddttblpdergetreceiptcriteriaRow((pdspdergetreceiptDataSet.ttblpdergetreceiptcriteriaRow)ttblpdergetreceiptcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDERGetReceipt - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERGetReceipt(ref pdsContext, ref pdspdergetreceipt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDERGetReceipt - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdergetreceipt); 
    
         foreach (DataRow row in pdspdergetreceipt.ttblpdergetreceiptresults)
         {
            result.pdergetreceiptresults.Add(Pdergetreceiptresults.BuildPdergetreceiptresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdentryPDERGetItemResponseAPI PDERGetItem(Pdergetitemcriteria pdergetitemcriteria)
      {   
         var result = new AspdentryPDERGetItemResponseAPI();
         
         var pdspdergetitem = new pdspdergetitemDataSet();
            
         DataRow ttblpdergetitemcriteriaCriteria = pdspdergetitem.ttblpdergetitemcriteria.NewttblpdergetitemcriteriaRow();
         Pdergetitemcriteria.UpdateRowFromPdergetitemcriteria(ref ttblpdergetitemcriteriaCriteria, pdergetitemcriteria);
         pdspdergetitem.ttblpdergetitemcriteria.AddttblpdergetitemcriteriaRow((pdspdergetitemDataSet.ttblpdergetitemcriteriaRow)ttblpdergetitemcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDERGetItem - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERGetItem(ref pdsContext, ref pdspdergetitem, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDERGetItem - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdergetitem); 
    
         foreach (DataRow row in pdspdergetitem.ttblpdergetitemresults)
         {
            result.pdergetitemresults.Add(Pdergetitemresults.BuildPdergetitemresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Pderinitreceiptresults PDERInitReceipt(Pderinitreceiptcriteria pderinitreceiptcriteria)
      {   
         var result = new Pderinitreceiptresults();
         
         var pdspderinitreceipt = new pdspderinitreceiptDataSet();
            
         DataRow ttblpderinitreceiptcriteriaCriteria = pdspderinitreceipt.ttblpderinitreceiptcriteria.NewttblpderinitreceiptcriteriaRow();
         Pderinitreceiptcriteria.UpdateRowFromPderinitreceiptcriteria(ref ttblpderinitreceiptcriteriaCriteria, pderinitreceiptcriteria);
         pdspderinitreceipt.ttblpderinitreceiptcriteria.AddttblpderinitreceiptcriteriaRow((pdspderinitreceiptDataSet.ttblpderinitreceiptcriteriaRow)ttblpderinitreceiptcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERInitReceipt - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERInitReceipt(ref pdsContext, ref pdspderinitreceipt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERInitReceipt - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderinitreceipt); 
    
         if (pdspderinitreceipt.ttblpderinitreceiptresults.Count > 0) 
         { 
             result = Pderinitreceiptresults.BuildPderinitreceiptresultsFromRow(pdspderinitreceipt.ttblpderinitreceiptresults[0]);
         } 
              
          
         return result;
          
      }

      public string PDERAddReceipt(Pderaddreceipt pderaddreceipt)
      {   
          
         var pdspderaddreceipt = new pdspderaddreceiptDataSet();
            
         DataRow ttblpderaddreceiptCriteria = pdspderaddreceipt.ttblpderaddreceipt.NewttblpderaddreceiptRow();
         Pderaddreceipt.UpdateRowFromPderaddreceipt(ref ttblpderaddreceiptCriteria, pderaddreceipt);
         pdspderaddreceipt.ttblpderaddreceipt.AddttblpderaddreceiptRow((pdspderaddreceiptDataSet.ttblpderaddreceiptRow)ttblpderaddreceiptCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERAddReceipt - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERAddReceipt(ref pdsContext,  pdspderaddreceipt, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDERAddReceipt - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderaddreceipt); 
    
         return cWarningMessage;
      
      }

      public void PDERUpdateReceipt(Pderupdatereceipt pderupdatereceipt)
      {   
         
         var pdspderupdatereceipt = new pdspderupdatereceiptDataSet();
            
         DataRow ttblpderupdatereceiptCriteria = pdspderupdatereceipt.ttblpderupdatereceipt.NewttblpderupdatereceiptRow();
         Pderupdatereceipt.UpdateRowFromPderupdatereceipt(ref ttblpderupdatereceiptCriteria, pderupdatereceipt);
         pdspderupdatereceipt.ttblpderupdatereceipt.AddttblpderupdatereceiptRow((pdspderupdatereceiptDataSet.ttblpderupdatereceiptRow)ttblpderupdatereceiptCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERUpdateReceipt - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERUpdateReceipt(ref pdsContext,  pdspderupdatereceipt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERUpdateReceipt - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderupdatereceipt);
      }

      public void PDERUpdateItem(Pderupdateitem pderupdateitem)
      {   
         
         var pdspderupdateitem = new pdspderupdateitemDataSet();
            
         DataRow ttblpderupdateitemCriteria = pdspderupdateitem.ttblpderupdateitem.NewttblpderupdateitemRow();
         Pderupdateitem.UpdateRowFromPderupdateitem(ref ttblpderupdateitemCriteria, pderupdateitem);
         pdspderupdateitem.ttblpderupdateitem.AddttblpderupdateitemRow((pdspderupdateitemDataSet.ttblpderupdateitemRow)ttblpderupdateitemCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERUpdateItem - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERUpdateItem(ref pdsContext,  pdspderupdateitem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERUpdateItem - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderupdateitem);
      }

      public AspdentryPDERFinalEditResponseAPI PDERFinalEdit(Pderfinaleditcriteria pderfinaleditcriteria)
      {   
         var result = new AspdentryPDERFinalEditResponseAPI();
         
         var pdspderfinaledit = new pdspderfinaleditDataSet();
            
         DataRow ttblpderfinaleditcriteriaCriteria = pdspderfinaledit.ttblpderfinaleditcriteria.NewttblpderfinaleditcriteriaRow();
         Pderfinaleditcriteria.UpdateRowFromPderfinaleditcriteria(ref ttblpderfinaleditcriteriaCriteria, pderfinaleditcriteria);
         pdspderfinaledit.ttblpderfinaleditcriteria.AddttblpderfinaleditcriteriaRow((pdspderfinaleditDataSet.ttblpderfinaleditcriteriaRow)ttblpderfinaleditcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERFinalEdit - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERFinalEdit(ref pdsContext, ref pdspderfinaledit, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDERFinalEdit - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderfinaledit); 
    
         foreach (DataRow row in pdspderfinaledit.ttblpderfinaleditresults)
         {
            result.pderfinaleditresults.Add(Pderfinaleditresults.BuildPderfinaleditresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void PDERFinalUpdate(AspdentryPDERFinalUpdateRequestAPI AspdentryPDERFinalUpdateRequestAPI)
      {   
         
         var pdspderfinalupdate = new pdspderfinalupdateDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AspdentryPDERFinalUpdateRequestAPI.gleta)
         {
            DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
            Gleta.UpdateRowFromGleta(ref ttblgletaRow, obj);
            pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
         }
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AspdentryPDERFinalUpdateRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         DataRow ttblpderfinalupdateRow = pdspderfinalupdate.ttblpderfinalupdate.NewttblpderfinalupdateRow();
         Pderfinalupdate.UpdateRowFromPderfinalupdate(ref ttblpderfinalupdateRow, AspdentryPDERFinalUpdateRequestAPI.pderfinalupdate);
         pdspderfinalupdate.ttblpderfinalupdate.AddttblpderfinalupdateRow((pdspderfinalupdateDataSet.ttblpderfinalupdateRow)ttblpderfinalupdateRow);
          
         
         NLogLoggerP.Trace("PDERFinalUpdate - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERFinalUpdate(ref pdsContext,  pdspderfinalupdate,  pdsgleta, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERFinalUpdate - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderfinalupdate);
      }

      public Pdemcolumncalculator PDEMColumnCalculatorValidate(Pdemcolumncalculator pdemcolumncalculator)
      {   
         var result = new Pdemcolumncalculator();
         
         var pdspdemcolumncalculator = new pdspdemcolumncalculatorDataSet();
            
         DataRow ttblpdemcolumncalculatorCriteria = pdspdemcolumncalculator.ttblpdemcolumncalculator.NewttblpdemcolumncalculatorRow();
         Pdemcolumncalculator.UpdateRowFromPdemcolumncalculator(ref ttblpdemcolumncalculatorCriteria, pdemcolumncalculator);
         pdspdemcolumncalculator.ttblpdemcolumncalculator.AddttblpdemcolumncalculatorRow((pdspdemcolumncalculatorDataSet.ttblpdemcolumncalculatorRow)ttblpdemcolumncalculatorCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDEMColumnCalculatorValidate - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMColumnCalculatorValidate(ref pdsContext, ref pdspdemcolumncalculator, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMColumnCalculatorValidate - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemcolumncalculator); 
    
         if (pdspdemcolumncalculator.ttblpdemcolumncalculator.Count > 0) 
         { 
             result = Pdemcolumncalculator.BuildPdemcolumncalculatorFromRow(pdspdemcolumncalculator.ttblpdemcolumncalculator[0]);
         } 
              
          
         return result;
          
      }

      public AspdentryPDEMNewSetInitializeResponseAPI PDEMNewSetInitialize(AspdentryPDEMNewSetInitializeRequestAPI AspdentryPDEMNewSetInitializeRequestAPI)
      {   
         var result = new AspdentryPDEMNewSetInitializeResponseAPI();
         
         var pdspdemnewset = new pdspdemnewsetDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemnewsetRow = pdspdemnewset.ttblpdemnewset.NewttblpdemnewsetRow();
         Pdemnewset.UpdateRowFromPdemnewset(ref ttblpdemnewsetRow, AspdentryPDEMNewSetInitializeRequestAPI.pdemnewset);
         pdspdemnewset.ttblpdemnewset.AddttblpdemnewsetRow((pdspdemnewsetDataSet.ttblpdemnewsetRow)ttblpdemnewsetRow);
          
         var  pvType = AspdentryPDEMNewSetInitializeRequestAPI.pvType;
            
         
         NLogLoggerP.Trace("PDEMNewSetInitialize - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMNewSetInitialize(ref pdsContext,  pvType, ref pdspdemnewset, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMNewSetInitialize - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemnewset); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspdemnewset.ttblpdemnewset.Count > 0)
         {
            result.pdemnewset = Pdemnewset.BuildPdemnewsetFromRow(pdspdemnewset.ttblpdemnewset[0]);
         }
                    
          
         return result;
          
      }

      public AspdentryPDEMNewSetValidateResponseAPI PDEMNewSetValidate(AspdentryPDEMNewSetValidateRequestAPI AspdentryPDEMNewSetValidateRequestAPI)
      {   
         var result = new AspdentryPDEMNewSetValidateResponseAPI();
         
         var pdspdemnewset = new pdspdemnewsetDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemnewsetRow = pdspdemnewset.ttblpdemnewset.NewttblpdemnewsetRow();
         Pdemnewset.UpdateRowFromPdemnewset(ref ttblpdemnewsetRow, AspdentryPDEMNewSetValidateRequestAPI.pdemnewset);
         pdspdemnewset.ttblpdemnewset.AddttblpdemnewsetRow((pdspdemnewsetDataSet.ttblpdemnewsetRow)ttblpdemnewsetRow);
          
         var  pvType = AspdentryPDEMNewSetValidateRequestAPI.pvType;
            
         
         NLogLoggerP.Trace("PDEMNewSetValidate - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMNewSetValidate(ref pdsContext,  pvType, ref pdspdemnewset, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMNewSetValidate - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemnewset); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdspdemnewset.ttblpdemnewset.Count > 0)
         {
            result.pdemnewset = Pdemnewset.BuildPdemnewsetFromRow(pdspdemnewset.ttblpdemnewset[0]);
         }
                    
          
         return result;
          
      }

      public void PDEMNewSetFinal(AspdentryPDEMNewSetFinalRequestAPI AspdentryPDEMNewSetFinalRequestAPI)
      {   
         
         var pdspdemnewset = new pdspdemnewsetDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdemnewsetRow = pdspdemnewset.ttblpdemnewset.NewttblpdemnewsetRow();
         Pdemnewset.UpdateRowFromPdemnewset(ref ttblpdemnewsetRow, AspdentryPDEMNewSetFinalRequestAPI.pdemnewset);
         pdspdemnewset.ttblpdemnewset.AddttblpdemnewsetRow((pdspdemnewsetDataSet.ttblpdemnewsetRow)ttblpdemnewsetRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AspdentryPDEMNewSetFinalRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("PDEMNewSetFinal - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDEMNewSetFinal(ref pdsContext,  pdspdemnewset,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDEMNewSetFinal - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdemnewset);
      }

      public void PDERDeltemprcpt(AspdentryPDERDeltemprcptRequestAPI AspdentryPDERDeltemprcptRequestAPI)
      {   
         
         var pdspdergetclaim = new pdspdergetclaimDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdergetclaimcriteriaRow = pdspdergetclaim.ttblpdergetclaimcriteria.NewttblpdergetclaimcriteriaRow();
         Pdergetclaimcriteria.UpdateRowFromPdergetclaimcriteria(ref ttblpdergetclaimcriteriaRow, AspdentryPDERDeltemprcptRequestAPI.pdergetclaimcriteria);
         pdspdergetclaim.ttblpdergetclaimcriteria.AddttblpdergetclaimcriteriaRow((pdspdergetclaimDataSet.ttblpdergetclaimcriteriaRow)ttblpdergetclaimcriteriaRow);
          
         foreach (var obj in AspdentryPDERDeltemprcptRequestAPI.pdergetclaimresults)
         {
            DataRow ttblpdergetclaimresultsRow = pdspdergetclaim.ttblpdergetclaimresults.NewttblpdergetclaimresultsRow();
            Pdergetclaimresults.UpdateRowFromPdergetclaimresults(ref ttblpdergetclaimresultsRow, obj);
            pdspdergetclaim.ttblpdergetclaimresults.AddttblpdergetclaimresultsRow((pdspdergetclaimDataSet.ttblpdergetclaimresultsRow)ttblpdergetclaimresultsRow);
         }
          
         
         NLogLoggerP.Trace("PDERDeltemprcpt - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERDeltemprcpt(ref pdsContext,  pdspdergetclaim, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERDeltemprcpt - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdergetclaim);
      }

      public Pderreceiptvat PDERVatProcessing(Pderreceiptvat pderreceiptvat)
      {   
         var result = new Pderreceiptvat();
         
         var pdspderreceiptvat = new pdspderreceiptvatDataSet();
            
         DataRow ttblpderreceiptvatCriteria = pdspderreceiptvat.ttblpderreceiptvat.NewttblpderreceiptvatRow();
         Pderreceiptvat.UpdateRowFromPderreceiptvat(ref ttblpderreceiptvatCriteria, pderreceiptvat);
         pdspderreceiptvat.ttblpderreceiptvat.AddttblpderreceiptvatRow((pdspderreceiptvatDataSet.ttblpderreceiptvatRow)ttblpderreceiptvatCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDERVatProcessing - Aspdentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdentryproxy = this.proxyAppObject.CreatePO_aspdentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdentryproxy.PDERVatProcessing(ref pdsContext, ref pdspderreceiptvat, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDERVatProcessing - Aspdentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspderreceiptvat); 
    
         if (pdspderreceiptvat.ttblpderreceiptvat.Count > 0) 
         { 
             result = Pderreceiptvat.BuildPderreceiptvatFromRow(pdspderreceiptvat.ttblpderreceiptvat[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  