//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PD.Data.Adapters
{
   using com.infor.sxproxy.pdproxy;
   using com.infor.sxproxy.pdproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspdgetpdscrecords;
   using Models.Pdspdgetpdsrrecords;
   using Models.Pdspdenhlookupcriteria;
   using Models.Pdspdenhlookupresults;
   using Models.Pdspdinsearchcriteria;
   using Models.Pdspdinsearchresults;
   using Models.Pdspdinheadercriteria;
   using Models.Pdspdinheaderresults;
   using Models.Pdspdinlinesresults;
   using Models.Pdspdinaction;
   using Models.Complex;

   public partial class AspdinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private PDProxyAppObject proxyAppObject;
      
      public AspdinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new PDProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspdinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AspdinquiryPDGetPDSCRecordsResponseAPI PDGetPDSCRecords(Pdgetpdscrecordscriteria pdgetpdscrecordscriteria)
      {   
         var result = new AspdinquiryPDGetPDSCRecordsResponseAPI();
         
         var pdspdgetpdscrecords = new pdspdgetpdscrecordsDataSet();
            
         DataRow ttblpdgetpdscrecordscriteriaCriteria = pdspdgetpdscrecords.ttblpdgetpdscrecordscriteria.NewttblpdgetpdscrecordscriteriaRow();
         Pdgetpdscrecordscriteria.UpdateRowFromPdgetpdscrecordscriteria(ref ttblpdgetpdscrecordscriteriaCriteria, pdgetpdscrecordscriteria);
         pdspdgetpdscrecords.ttblpdgetpdscrecordscriteria.AddttblpdgetpdscrecordscriteriaRow((pdspdgetpdscrecordsDataSet.ttblpdgetpdscrecordscriteriaRow)ttblpdgetpdscrecordscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDGetPDSCRecords - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDGetPDSCRecords(ref pdsContext, ref pdspdgetpdscrecords, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDGetPDSCRecords - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdgetpdscrecords); 
    
         foreach (DataRow row in pdspdgetpdscrecords.ttblpdgetpdscrecordsresults)
         {
            result.pdgetpdscrecordsresults.Add(Pdgetpdscrecordsresults.BuildPdgetpdscrecordsresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdinquiryPDGetPDSRRecordsResponseAPI PDGetPDSRRecords(Pdgetpdsrrecordscriteria pdgetpdsrrecordscriteria)
      {   
         var result = new AspdinquiryPDGetPDSRRecordsResponseAPI();
         
         var pdspdgetpdsrrecords = new pdspdgetpdsrrecordsDataSet();
            
         DataRow ttblpdgetpdsrrecordscriteriaCriteria = pdspdgetpdsrrecords.ttblpdgetpdsrrecordscriteria.NewttblpdgetpdsrrecordscriteriaRow();
         Pdgetpdsrrecordscriteria.UpdateRowFromPdgetpdsrrecordscriteria(ref ttblpdgetpdsrrecordscriteriaCriteria, pdgetpdsrrecordscriteria);
         pdspdgetpdsrrecords.ttblpdgetpdsrrecordscriteria.AddttblpdgetpdsrrecordscriteriaRow((pdspdgetpdsrrecordsDataSet.ttblpdgetpdsrrecordscriteriaRow)ttblpdgetpdsrrecordscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDGetPDSRRecords - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDGetPDSRRecords(ref pdsContext, ref pdspdgetpdsrrecords, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDGetPDSRRecords - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdgetpdsrrecords); 
    
         foreach (DataRow row in pdspdgetpdsrrecords.ttblpdgetpdsrrecordsresults)
         {
            result.pdgetpdsrrecordsresults.Add(Pdgetpdsrrecordsresults.BuildPdgetpdsrrecordsresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdinquiryPDENHLookupResponseAPI PDENHLookup(Pdenhlookupcriteria pdenhlookupcriteria)
      {   
         var result = new AspdinquiryPDENHLookupResponseAPI();
         
         var pdspdenhlookupcriteria = new pdspdenhlookupcriteriaDataSet();
            
         var pdspdenhlookupresults = new pdspdenhlookupresultsDataSet();
            
         DataRow ttblpdenhlookupcriteriaCriteria = pdspdenhlookupcriteria.ttblpdenhlookupcriteria.NewttblpdenhlookupcriteriaRow();
         Pdenhlookupcriteria.UpdateRowFromPdenhlookupcriteria(ref ttblpdenhlookupcriteriaCriteria, pdenhlookupcriteria);
         pdspdenhlookupcriteria.ttblpdenhlookupcriteria.AddttblpdenhlookupcriteriaRow((pdspdenhlookupcriteriaDataSet.ttblpdenhlookupcriteriaRow)ttblpdenhlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDENHLookup - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDENHLookup(ref pdsContext,  pdspdenhlookupcriteria, out pdspdenhlookupresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDENHLookup - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdenhlookupcriteria); 
    
         foreach (DataRow row in pdspdenhlookupresults.ttblpdenhlookupresults)
         {
            result.pdenhlookupresults.Add(Pdenhlookupresults.BuildPdenhlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AspdinquiryPDINSearchResponseAPI PDINSearch(Pdinsearchcriteria pdinsearchcriteria)
      {   
         var result = new AspdinquiryPDINSearchResponseAPI();
         
         var pdspdinsearchcriteria = new pdspdinsearchcriteriaDataSet();
            
         var pdspdinsearchresults = new pdspdinsearchresultsDataSet();
            
         DataRow ttblpdinsearchcriteriaCriteria = pdspdinsearchcriteria.ttblpdinsearchcriteria.NewttblpdinsearchcriteriaRow();
         Pdinsearchcriteria.UpdateRowFromPdinsearchcriteria(ref ttblpdinsearchcriteriaCriteria, pdinsearchcriteria);
         pdspdinsearchcriteria.ttblpdinsearchcriteria.AddttblpdinsearchcriteriaRow((pdspdinsearchcriteriaDataSet.ttblpdinsearchcriteriaRow)ttblpdinsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PDINSearch - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDINSearch(ref pdsContext,  pdspdinsearchcriteria, out pdspdinsearchresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PDINSearch - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdinsearchcriteria); 
    
         foreach (DataRow row in pdspdinsearchresults.ttblpdinsearchresults)
         {
            result.pdinsearchresults.Add(Pdinsearchresults.BuildPdinsearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Pdinheaderresults PDINHeader(Pdinheadercriteria pdinheadercriteria)
      {   
         var result = new Pdinheaderresults();
         
         var pdspdinheadercriteria = new pdspdinheadercriteriaDataSet();
            
         var pdspdinheaderresults = new pdspdinheaderresultsDataSet();
            
         DataRow ttblpdinheadercriteriaCriteria = pdspdinheadercriteria.ttblpdinheadercriteria.NewttblpdinheadercriteriaRow();
         Pdinheadercriteria.UpdateRowFromPdinheadercriteria(ref ttblpdinheadercriteriaCriteria, pdinheadercriteria);
         pdspdinheadercriteria.ttblpdinheadercriteria.AddttblpdinheadercriteriaRow((pdspdinheadercriteriaDataSet.ttblpdinheadercriteriaRow)ttblpdinheadercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDINHeader - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDINHeader(ref pdsContext,  pdspdinheadercriteria, out pdspdinheaderresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDINHeader - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdinheadercriteria); 
    
         if (pdspdinheaderresults.ttblpdinheaderresults.Count > 0) 
         { 
             result = Pdinheaderresults.BuildPdinheaderresultsFromRow(pdspdinheaderresults.ttblpdinheaderresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Pdinlinesresults> PDINLines(Pdinheadercriteria pdinheadercriteria)
      {   
         var results = new List<Pdinlinesresults>();
         
         var pdspdinheadercriteria = new pdspdinheadercriteriaDataSet();
            
         var pdspdinlinesresults = new pdspdinlinesresultsDataSet();
            
         DataRow ttblpdinheadercriteriaCriteria = pdspdinheadercriteria.ttblpdinheadercriteria.NewttblpdinheadercriteriaRow();
         Pdinheadercriteria.UpdateRowFromPdinheadercriteria(ref ttblpdinheadercriteriaCriteria, pdinheadercriteria);
         pdspdinheadercriteria.ttblpdinheadercriteria.AddttblpdinheadercriteriaRow((pdspdinheadercriteriaDataSet.ttblpdinheadercriteriaRow)ttblpdinheadercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDINLines - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDINLines(ref pdsContext,  pdspdinheadercriteria, out pdspdinlinesresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDINLines - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdinheadercriteria); 
    
            foreach (DataRow row in pdspdinlinesresults.ttblpdinlinesresults)
            {
                results.Add(Pdinlinesresults.BuildPdinlinesresultsFromRow(row));
            }
            return results;
        
      }

      public void PDINAction(IEnumerable<Pdinaction> pdinaction)
      {   
         
         var pdspdinaction = new pdspdinactionDataSet();
            
         foreach (var obj in pdinaction)
         {
             DataRow row = pdspdinaction.ttblpdinaction.NewttblpdinactionRow();
             Pdinaction.UpdateRowFromPdinaction(ref row, obj);
             pdspdinaction.ttblpdinaction.AddttblpdinactionRow((pdspdinactionDataSet.ttblpdinactionRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDINAction - Aspdinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdinquiryproxy = this.proxyAppObject.CreatePO_aspdinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdinquiryproxy.PDINAction(ref pdsContext,  pdspdinaction, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDINAction - Aspdinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdinaction);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  