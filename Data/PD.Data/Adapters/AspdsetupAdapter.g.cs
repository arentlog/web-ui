//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PD.Data.Adapters
{
   using com.infor.sxproxy.pdproxy;
   using com.infor.sxproxy.pdproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspdcreateprcrecord;
   using Models.Pdspdscmranks;
   using Models.Pdspdpricesheetlist;
   using Models.Pdspdsfload;
   using Models.Pdspdsaload;
   using Models.Pdspdspcustprodsearch;
   using Models.Pdspdspvendsearch;
   using Models.Pdspdspvendcontsearch;
   using Models.Pdspdsprebatesearch;
   using Models.Pdspdspcustprodinit;
   using Models.Pdspdspcustprodinitext;
   using Models.Pdspdsprebateinit;
   using Models.Pdspdspvendinit;
   using Models.Pdspdspvendcontinit;
   using Models.Pdspdspcustprodcopy;
   using Models.Pdspdspvendcontcopy;
   using Models.Pdspdsprebatecopy;
   using Models.Pdspdspvendcopy;
   using Models.Pdspdspcustprodadd;
   using Models.Pdspdspvendcontadd;
   using Models.Pdspdsprebateadd;
   using Models.Pdspdspvendadd;
   using Models.Pdspdspdel;
   using Models.Pdspdspcustprodupd;
   using Models.Pdspdspvendcontupd;
   using Models.Pdspdsprebateupd;
   using Models.Pdspdspvendupd;
   using Models.Pdspdspprice;
   using Models.Pdspdspwidget;
   using Models.Pdspdspupdatebrowser;
   using Models.Pdspricesheetdata;
   using Models.Pdspdspcustprodload;
   using Models.Pdspdspnpadd;
   using Models.Pdspdspnpcopy;
   using Models.Pdspdspnpinit;
   using Models.Pdspdspnpsearch;
   using Models.Pdspdspnpupd;
   using Models.Complex;

   public partial class AspdsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private PDProxyAppObject proxyAppObject;
      
      public AspdsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new PDProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AspdsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Pdcreateprcrecord> PDCreatePDSCRecordFromOEIP(IEnumerable<Pdcreateprcrecord> pdcreateprcrecord)
      {   
         var results = new List<Pdcreateprcrecord>();
         
         var pdspdcreateprcrecord = new pdspdcreateprcrecordDataSet();
            
         foreach (var obj in pdcreateprcrecord)
         {
             DataRow row = pdspdcreateprcrecord.ttblpdcreateprcrecord.NewttblpdcreateprcrecordRow();
             Pdcreateprcrecord.UpdateRowFromPdcreateprcrecord(ref row, obj);
             pdspdcreateprcrecord.ttblpdcreateprcrecord.AddttblpdcreateprcrecordRow((pdspdcreateprcrecordDataSet.ttblpdcreateprcrecordRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDCreatePDSCRecordFromOEIP - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDCreatePDSCRecordFromOEIP(ref pdsContext, ref pdspdcreateprcrecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDCreatePDSCRecordFromOEIP - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdcreateprcrecord); 
    
            foreach (DataRow row in pdspdcreateprcrecord.ttblpdcreateprcrecord)
            {
                results.Add(Pdcreateprcrecord.BuildPdcreateprcrecordFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Pdscmranksresults> LoadPDSPMRanks()
      {   
         var results = new List<Pdscmranksresults>();
         
         var pdspdscmranks = new pdspdscmranksDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadPDSPMRanks - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.LoadPDSPMRanks(ref pdsContext, ref pdspdscmranks, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadPDSPMRanks - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdscmranks); 
    
            foreach (DataRow row in pdspdscmranks.ttblpdscmranksresults)
            {
                results.Add(Pdscmranksresults.BuildPdscmranksresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Pdpricesheetlistresults> PDPriceSheetList(Pdpricesheetlistcriteria pdpricesheetlistcriteria)
      {   
         var results = new List<Pdpricesheetlistresults>();
         
         var pdspdpricesheetlist = new pdspdpricesheetlistDataSet();
            
         DataRow ttblpdpricesheetlistcriteriaCriteria = pdspdpricesheetlist.ttblpdpricesheetlistcriteria.NewttblpdpricesheetlistcriteriaRow();
         Pdpricesheetlistcriteria.UpdateRowFromPdpricesheetlistcriteria(ref ttblpdpricesheetlistcriteriaCriteria, pdpricesheetlistcriteria);
         pdspdpricesheetlist.ttblpdpricesheetlistcriteria.AddttblpdpricesheetlistcriteriaRow((pdspdpricesheetlistDataSet.ttblpdpricesheetlistcriteriaRow)ttblpdpricesheetlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDPriceSheetList - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDPriceSheetList(ref pdsContext, ref pdspdpricesheetlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDPriceSheetList - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdpricesheetlist); 
    
            foreach (DataRow row in pdspdpricesheetlist.ttblpdpricesheetlistresults)
            {
                results.Add(Pdpricesheetlistresults.BuildPdpricesheetlistresultsFromRow(row));
            }
            return results;
        
      }

      public AspdsetupPdsfLoadResponseAPI PdsfLoad(Pdsfloadcriteria pdsfloadcriteria)
      {   
         var result = new AspdsetupPdsfLoadResponseAPI();
         
         var pdspdsfload = new pdspdsfloadDataSet();
            
         DataRow ttblpdsfloadcriteriaCriteria = pdspdsfload.ttblpdsfloadcriteria.NewttblpdsfloadcriteriaRow();
         Pdsfloadcriteria.UpdateRowFromPdsfloadcriteria(ref ttblpdsfloadcriteriaCriteria, pdsfloadcriteria);
         pdspdsfload.ttblpdsfloadcriteria.AddttblpdsfloadcriteriaRow((pdspdsfloadDataSet.ttblpdsfloadcriteriaRow)ttblpdsfloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PdsfLoad - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PdsfLoad(ref pdsContext, ref pdspdsfload, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PdsfLoad - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsfload); 
    
         if (pdspdsfload.ttblpdsficswresults.Count > 0)
         {
            result.pdsficswresults = Pdsficswresults.BuildPdsficswresultsFromRow(pdspdsfload.ttblpdsficswresults[0]);
         }
                    
         foreach (DataRow row in pdspdsfload.ttblpdsfloadresults)
         {
            result.pdsfloadresults.Add(Pdsfloadresults.BuildPdsfloadresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Pdsaloadresults> PdsaLoad(Pdsaloadcriteria pdsaloadcriteria)
      {   
         var results = new List<Pdsaloadresults>();
         
         var pdspdsaload = new pdspdsaloadDataSet();
            
         DataRow ttblpdsaloadcriteriaCriteria = pdspdsaload.ttblpdsaloadcriteria.NewttblpdsaloadcriteriaRow();
         Pdsaloadcriteria.UpdateRowFromPdsaloadcriteria(ref ttblpdsaloadcriteriaCriteria, pdsaloadcriteria);
         pdspdsaload.ttblpdsaloadcriteria.AddttblpdsaloadcriteriaRow((pdspdsaloadDataSet.ttblpdsaloadcriteriaRow)ttblpdsaloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PdsaLoad - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PdsaLoad(ref pdsContext, ref pdspdsaload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PdsaLoad - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsaload); 
    
            foreach (DataRow row in pdspdsaload.ttblpdsaloadresults)
            {
                results.Add(Pdsaloadresults.BuildPdsaloadresultsFromRow(row));
            }
            return results;
        
      }

      public AspdsetupPDSPCustProdSearchResponseAPI PDSPCustProdSearch(Pdspcustprodcriteria pdspcustprodcriteria)
      {   
         var result = new AspdsetupPDSPCustProdSearchResponseAPI();
         
         var pdspdspcustprodsearch = new pdspdspcustprodsearchDataSet();
            
         DataRow ttblpdspcustprodcriteriaCriteria = pdspdspcustprodsearch.ttblpdspcustprodcriteria.NewttblpdspcustprodcriteriaRow();
         Pdspcustprodcriteria.UpdateRowFromPdspcustprodcriteria(ref ttblpdspcustprodcriteriaCriteria, pdspcustprodcriteria);
         pdspdspcustprodsearch.ttblpdspcustprodcriteria.AddttblpdspcustprodcriteriaRow((pdspdspcustprodsearchDataSet.ttblpdspcustprodcriteriaRow)ttblpdspcustprodcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdSearch - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdSearch(ref pdsContext, ref pdspdspcustprodsearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("PDSPCustProdSearch - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodsearch); 
    
         if (pdspdspcustprodsearch.ttblpdspcprecnoresults.Count > 0)
         {
            result.pdspcprecnoresults = Pdspcprecnoresults.BuildPdspcprecnoresultsFromRow(pdspdspcustprodsearch.ttblpdspcprecnoresults[0]);
         }
                    
         foreach (DataRow row in pdspdspcustprodsearch.ttblpdspcustprodresults)
         {
            result.pdspcustprodresults.Add(Pdspcustprodresults.BuildPdspcustprodresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AspdsetupPDSPVendSearchResponseAPI PDSPVendSearch(Pdspvendcriteria pdspvendcriteria)
      {   
         var result = new AspdsetupPDSPVendSearchResponseAPI();
         
         var pdspdspvendsearch = new pdspdspvendsearchDataSet();
            
         DataRow ttblpdspvendcriteriaCriteria = pdspdspvendsearch.ttblpdspvendcriteria.NewttblpdspvendcriteriaRow();
         Pdspvendcriteria.UpdateRowFromPdspvendcriteria(ref ttblpdspvendcriteriaCriteria, pdspvendcriteria);
         pdspdspvendsearch.ttblpdspvendcriteria.AddttblpdspvendcriteriaRow((pdspdspvendsearchDataSet.ttblpdspvendcriteriaRow)ttblpdspvendcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendSearch - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendSearch(ref pdsContext, ref pdspdspvendsearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("PDSPVendSearch - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendsearch); 
    
         if (pdspdspvendsearch.ttblpdspvdrecnoresults.Count > 0)
         {
            result.pdspvdrecnoresults = Pdspvdrecnoresults.BuildPdspvdrecnoresultsFromRow(pdspdspvendsearch.ttblpdspvdrecnoresults[0]);
         }
                    
         foreach (DataRow row in pdspdspvendsearch.ttblpdspvendresults)
         {
            result.pdspvendresults.Add(Pdspvendresults.BuildPdspvendresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AspdsetupPDSPVendContSearchResponseAPI PDSPVendContSearch(Pdspvendcontcriteria pdspvendcontcriteria)
      {   
         var result = new AspdsetupPDSPVendContSearchResponseAPI();
         
         var pdspdspvendcontsearch = new pdspdspvendcontsearchDataSet();
            
         DataRow ttblpdspvendcontcriteriaCriteria = pdspdspvendcontsearch.ttblpdspvendcontcriteria.NewttblpdspvendcontcriteriaRow();
         Pdspvendcontcriteria.UpdateRowFromPdspvendcontcriteria(ref ttblpdspvendcontcriteriaCriteria, pdspvendcontcriteria);
         pdspdspvendcontsearch.ttblpdspvendcontcriteria.AddttblpdspvendcontcriteriaRow((pdspdspvendcontsearchDataSet.ttblpdspvendcontcriteriaRow)ttblpdspvendcontcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendContSearch - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendContSearch(ref pdsContext, ref pdspdspvendcontsearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("PDSPVendContSearch - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcontsearch); 
    
         if (pdspdspvendcontsearch.ttblpdspvcrecnoresults.Count > 0)
         {
            result.pdspvcrecnoresults = Pdspvcrecnoresults.BuildPdspvcrecnoresultsFromRow(pdspdspvendcontsearch.ttblpdspvcrecnoresults[0]);
         }
                    
         foreach (DataRow row in pdspdspvendcontsearch.ttblpdspvendcontresults)
         {
            result.pdspvendcontresults.Add(Pdspvendcontresults.BuildPdspvendcontresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AspdsetupPDSPRebateSearchResponseAPI PDSPRebateSearch(Pdsprebatecriteria pdsprebatecriteria)
      {   
         var result = new AspdsetupPDSPRebateSearchResponseAPI();
         
         var pdspdsprebatesearch = new pdspdsprebatesearchDataSet();
            
         DataRow ttblpdsprebatecriteriaCriteria = pdspdsprebatesearch.ttblpdsprebatecriteria.NewttblpdsprebatecriteriaRow();
         Pdsprebatecriteria.UpdateRowFromPdsprebatecriteria(ref ttblpdsprebatecriteriaCriteria, pdsprebatecriteria);
         pdspdsprebatesearch.ttblpdsprebatecriteria.AddttblpdsprebatecriteriaRow((pdspdsprebatesearchDataSet.ttblpdsprebatecriteriaRow)ttblpdsprebatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPRebateSearch - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPRebateSearch(ref pdsContext, ref pdspdsprebatesearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("PDSPRebateSearch - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsprebatesearch); 
    
         if (pdspdsprebatesearch.ttblpdsprbrecnoresults.Count > 0)
         {
            result.pdsprbrecnoresults = Pdsprbrecnoresults.BuildPdsprbrecnoresultsFromRow(pdspdsprebatesearch.ttblpdsprbrecnoresults[0]);
         }
                    
         foreach (DataRow row in pdspdsprebatesearch.ttblpdsprebateresults)
         {
            result.pdsprebateresults.Add(Pdsprebateresults.BuildPdsprebateresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public Pdspcustprodinitresults PDSPCustProdInit(Pdspcustprodinitcriteria pdspcustprodinitcriteria)
      {   
         var result = new Pdspcustprodinitresults();
         
         var pdspdspcustprodinit = new pdspdspcustprodinitDataSet();
            
         DataRow ttblpdspcustprodinitcriteriaCriteria = pdspdspcustprodinit.ttblpdspcustprodinitcriteria.NewttblpdspcustprodinitcriteriaRow();
         Pdspcustprodinitcriteria.UpdateRowFromPdspcustprodinitcriteria(ref ttblpdspcustprodinitcriteriaCriteria, pdspcustprodinitcriteria);
         pdspdspcustprodinit.ttblpdspcustprodinitcriteria.AddttblpdspcustprodinitcriteriaRow((pdspdspcustprodinitDataSet.ttblpdspcustprodinitcriteriaRow)ttblpdspcustprodinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdInit - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdInit(ref pdsContext, ref pdspdspcustprodinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPCustProdInit - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodinit); 
    
         if (pdspdspcustprodinit.ttblpdspcustprodinitresults.Count > 0) 
         { 
             result = Pdspcustprodinitresults.BuildPdspcustprodinitresultsFromRow(pdspdspcustprodinit.ttblpdspcustprodinitresults[0]);
         } 
              
          
         return result;
          
      }

      public Pdspcustprodinitextresults PDSPCustProdInitExt(Pdspcustprodinitextcriteria pdspcustprodinitextcriteria)
      {   
         var result = new Pdspcustprodinitextresults();
         
         var pdspdspcustprodinitext = new pdspdspcustprodinitextDataSet();
            
         DataRow ttblpdspcustprodinitextcriteriaCriteria = pdspdspcustprodinitext.ttblpdspcustprodinitextcriteria.NewttblpdspcustprodinitextcriteriaRow();
         Pdspcustprodinitextcriteria.UpdateRowFromPdspcustprodinitextcriteria(ref ttblpdspcustprodinitextcriteriaCriteria, pdspcustprodinitextcriteria);
         pdspdspcustprodinitext.ttblpdspcustprodinitextcriteria.AddttblpdspcustprodinitextcriteriaRow((pdspdspcustprodinitextDataSet.ttblpdspcustprodinitextcriteriaRow)ttblpdspcustprodinitextcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdInitExt - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdInitExt(ref pdsContext, ref pdspdspcustprodinitext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPCustProdInitExt - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodinitext); 
    
         if (pdspdspcustprodinitext.ttblpdspcustprodinitextresults.Count > 0) 
         { 
             result = Pdspcustprodinitextresults.BuildPdspcustprodinitextresultsFromRow(pdspdspcustprodinitext.ttblpdspcustprodinitextresults[0]);
         } 
              
          
         return result;
          
      }

      public Pdsprebateinitresults PDSPRebateInit(AspdsetupPDSPRebateInitRequestAPI AspdsetupPDSPRebateInitRequestAPI)
      {   
         var result = new Pdsprebateinitresults();
         
         var pdspdsprebateinit = new pdspdsprebateinitDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblpdsprebateinitresultsRow = pdspdsprebateinit.ttblpdsprebateinitresults.NewttblpdsprebateinitresultsRow();
         Pdsprebateinitresults.UpdateRowFromPdsprebateinitresults(ref ttblpdsprebateinitresultsRow, AspdsetupPDSPRebateInitRequestAPI.pdsprebateinitresults);
         pdspdsprebateinit.ttblpdsprebateinitresults.AddttblpdsprebateinitresultsRow((pdspdsprebateinitDataSet.ttblpdsprebateinitresultsRow)ttblpdsprebateinitresultsRow);
          
         var  iRebRecNo = AspdsetupPDSPRebateInitRequestAPI.iRebRecNo;
            
         var  cCallType = AspdsetupPDSPRebateInitRequestAPI.cCallType;
            
         
         NLogLoggerP.Trace("PDSPRebateInit - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPRebateInit(ref pdsContext,  iRebRecNo,  cCallType, ref pdspdsprebateinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPRebateInit - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsprebateinit); 
    
         if (pdspdsprebateinit.ttblpdsprebateinitresults.Count > 0) 
         { 
             result = Pdsprebateinitresults.BuildPdsprebateinitresultsFromRow(pdspdsprebateinit.ttblpdsprebateinitresults[0]);
         } 
              
          
         return result;
          
      }

      public Pdspvendinitresults PDSPVendInit(Pdspvendinitcriteria pdspvendinitcriteria)
      {   
         var result = new Pdspvendinitresults();
         
         var pdspdspvendinit = new pdspdspvendinitDataSet();
            
         DataRow ttblpdspvendinitcriteriaCriteria = pdspdspvendinit.ttblpdspvendinitcriteria.NewttblpdspvendinitcriteriaRow();
         Pdspvendinitcriteria.UpdateRowFromPdspvendinitcriteria(ref ttblpdspvendinitcriteriaCriteria, pdspvendinitcriteria);
         pdspdspvendinit.ttblpdspvendinitcriteria.AddttblpdspvendinitcriteriaRow((pdspdspvendinitDataSet.ttblpdspvendinitcriteriaRow)ttblpdspvendinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendInit - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendInit(ref pdsContext, ref pdspdspvendinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendInit - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendinit); 
    
         if (pdspdspvendinit.ttblpdspvendinitresults.Count > 0) 
         { 
             result = Pdspvendinitresults.BuildPdspvendinitresultsFromRow(pdspdspvendinit.ttblpdspvendinitresults[0]);
         } 
              
          
         return result;
          
      }

      public Pdspvendcontinitresults PDSPVendContInit(Pdspvendcontinitcriteria pdspvendcontinitcriteria)
      {   
         var result = new Pdspvendcontinitresults();
         
         var pdspdspvendcontinit = new pdspdspvendcontinitDataSet();
            
         DataRow ttblpdspvendcontinitcriteriaCriteria = pdspdspvendcontinit.ttblpdspvendcontinitcriteria.NewttblpdspvendcontinitcriteriaRow();
         Pdspvendcontinitcriteria.UpdateRowFromPdspvendcontinitcriteria(ref ttblpdspvendcontinitcriteriaCriteria, pdspvendcontinitcriteria);
         pdspdspvendcontinit.ttblpdspvendcontinitcriteria.AddttblpdspvendcontinitcriteriaRow((pdspdspvendcontinitDataSet.ttblpdspvendcontinitcriteriaRow)ttblpdspvendcontinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendContInit - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendContInit(ref pdsContext, ref pdspdspvendcontinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendContInit - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcontinit); 
    
         if (pdspdspvendcontinit.ttblpdspvendcontinitresults.Count > 0) 
         { 
             result = Pdspvendcontinitresults.BuildPdspvendcontinitresultsFromRow(pdspdspvendcontinit.ttblpdspvendcontinitresults[0]);
         } 
              
          
         return result;
          
      }

      public AspdsetupPDSPCustProdCopyResponseAPI PDSPCustProdCopy(Pdspcustprodcopycriteria pdspcustprodcopycriteria)
      {   
         var result = new AspdsetupPDSPCustProdCopyResponseAPI();
         
         var pdspdspcustprodcopy = new pdspdspcustprodcopyDataSet();
            
         DataRow ttblpdspcustprodcopycriteriaCriteria = pdspdspcustprodcopy.ttblpdspcustprodcopycriteria.NewttblpdspcustprodcopycriteriaRow();
         Pdspcustprodcopycriteria.UpdateRowFromPdspcustprodcopycriteria(ref ttblpdspcustprodcopycriteriaCriteria, pdspcustprodcopycriteria);
         pdspdspcustprodcopy.ttblpdspcustprodcopycriteria.AddttblpdspcustprodcopycriteriaRow((pdspdspcustprodcopyDataSet.ttblpdspcustprodcopycriteriaRow)ttblpdspcustprodcopycriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdCopy - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdCopy(ref pdsContext, ref pdspdspcustprodcopy, out iPDrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPCustProdCopy - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodcopy); 
    
         if (pdspdspcustprodcopy.ttblpdspcustprodcopyresults.Count > 0)
         {
            result.pdspcustprodcopyresults = Pdspcustprodcopyresults.BuildPdspcustprodcopyresultsFromRow(pdspdspcustprodcopy.ttblpdspcustprodcopyresults[0]);
         }
                    
         result.iPDrecno = iPDrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPVendContCopyResponseAPI PDSPVendContCopy(Pdspvendcontcopycriteria pdspvendcontcopycriteria)
      {   
         var result = new AspdsetupPDSPVendContCopyResponseAPI();
         
         var pdspdspvendcontcopy = new pdspdspvendcontcopyDataSet();
            
         DataRow ttblpdspvendcontcopycriteriaCriteria = pdspdspvendcontcopy.ttblpdspvendcontcopycriteria.NewttblpdspvendcontcopycriteriaRow();
         Pdspvendcontcopycriteria.UpdateRowFromPdspvendcontcopycriteria(ref ttblpdspvendcontcopycriteriaCriteria, pdspvendcontcopycriteria);
         pdspdspvendcontcopy.ttblpdspvendcontcopycriteria.AddttblpdspvendcontcopycriteriaRow((pdspdspvendcontcopyDataSet.ttblpdspvendcontcopycriteriaRow)ttblpdspvendcontcopycriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendContCopy - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendContCopy(ref pdsContext, ref pdspdspvendcontcopy, out iPDrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendContCopy - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcontcopy); 
    
         if (pdspdspvendcontcopy.ttblpdspvendcontcopyresults.Count > 0)
         {
            result.pdspvendcontcopyresults = Pdspvendcontcopyresults.BuildPdspvendcontcopyresultsFromRow(pdspdspvendcontcopy.ttblpdspvendcontcopyresults[0]);
         }
                    
         result.iPDrecno = iPDrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPRebateCopyResponseAPI PDSPRebateCopy(Pdsprebatecopycriteria pdsprebatecopycriteria)
      {   
         var result = new AspdsetupPDSPRebateCopyResponseAPI();
         
         var pdspdsprebatecopy = new pdspdsprebatecopyDataSet();
            
         DataRow ttblpdsprebatecopycriteriaCriteria = pdspdsprebatecopy.ttblpdsprebatecopycriteria.NewttblpdsprebatecopycriteriaRow();
         Pdsprebatecopycriteria.UpdateRowFromPdsprebatecopycriteria(ref ttblpdsprebatecopycriteriaCriteria, pdsprebatecopycriteria);
         pdspdsprebatecopy.ttblpdsprebatecopycriteria.AddttblpdsprebatecopycriteriaRow((pdspdsprebatecopyDataSet.ttblpdsprebatecopycriteriaRow)ttblpdsprebatecopycriteriaCriteria);
            
         int iRebrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPRebateCopy - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPRebateCopy(ref pdsContext, ref pdspdsprebatecopy, out iRebrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPRebateCopy - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsprebatecopy); 
    
         if (pdspdsprebatecopy.ttblpdsprebatecopyresults.Count > 0)
         {
            result.pdsprebatecopyresults = Pdsprebatecopyresults.BuildPdsprebatecopyresultsFromRow(pdspdsprebatecopy.ttblpdsprebatecopyresults[0]);
         }
                    
         result.iRebrecno = iRebrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPVendCopyResponseAPI PDSPVendCopy(Pdspvendcopycriteria pdspvendcopycriteria)
      {   
         var result = new AspdsetupPDSPVendCopyResponseAPI();
         
         var pdspdspvendcopy = new pdspdspvendcopyDataSet();
            
         DataRow ttblpdspvendcopycriteriaCriteria = pdspdspvendcopy.ttblpdspvendcopycriteria.NewttblpdspvendcopycriteriaRow();
         Pdspvendcopycriteria.UpdateRowFromPdspvendcopycriteria(ref ttblpdspvendcopycriteriaCriteria, pdspvendcopycriteria);
         pdspdspvendcopy.ttblpdspvendcopycriteria.AddttblpdspvendcopycriteriaRow((pdspdspvendcopyDataSet.ttblpdspvendcopycriteriaRow)ttblpdspvendcopycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendCopy - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendCopy(ref pdsContext, ref pdspdspvendcopy, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendCopy - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcopy); 
    
         if (pdspdspvendcopy.ttblpdspvendcopyresults.Count > 0)
         {
            result.pdspvendcopyresults = Pdspvendcopyresults.BuildPdspvendcopyresultsFromRow(pdspdspvendcopy.ttblpdspvendcopyresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPCustProdAddResponseAPI PDSPCustProdAdd(Pdspcustprodaddcriteria pdspcustprodaddcriteria)
      {   
         var result = new AspdsetupPDSPCustProdAddResponseAPI();
         
         var pdspdspcustprodadd = new pdspdspcustprodaddDataSet();
            
         DataRow ttblpdspcustprodaddcriteriaCriteria = pdspdspcustprodadd.ttblpdspcustprodaddcriteria.NewttblpdspcustprodaddcriteriaRow();
         Pdspcustprodaddcriteria.UpdateRowFromPdspcustprodaddcriteria(ref ttblpdspcustprodaddcriteriaCriteria, pdspcustprodaddcriteria);
         pdspdspcustprodadd.ttblpdspcustprodaddcriteria.AddttblpdspcustprodaddcriteriaRow((pdspdspcustprodaddDataSet.ttblpdspcustprodaddcriteriaRow)ttblpdspcustprodaddcriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdAdd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdAdd(ref pdsContext,  pdspdspcustprodadd, out iPDrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPCustProdAdd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodadd); 
    
         result.iPDrecno = iPDrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPVendContAddResponseAPI PDSPVendContAdd(Pdspvendcontaddcriteria pdspvendcontaddcriteria)
      {   
         var result = new AspdsetupPDSPVendContAddResponseAPI();
         
         var pdspdspvendcontadd = new pdspdspvendcontaddDataSet();
            
         DataRow ttblpdspvendcontaddcriteriaCriteria = pdspdspvendcontadd.ttblpdspvendcontaddcriteria.NewttblpdspvendcontaddcriteriaRow();
         Pdspvendcontaddcriteria.UpdateRowFromPdspvendcontaddcriteria(ref ttblpdspvendcontaddcriteriaCriteria, pdspvendcontaddcriteria);
         pdspdspvendcontadd.ttblpdspvendcontaddcriteria.AddttblpdspvendcontaddcriteriaRow((pdspdspvendcontaddDataSet.ttblpdspvendcontaddcriteriaRow)ttblpdspvendcontaddcriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendContAdd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendContAdd(ref pdsContext,  pdspdspvendcontadd, out iPDrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendContAdd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcontadd); 
    
         result.iPDrecno = iPDrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPRebateAddResponseAPI PDSPRebateAdd(Pdsprebateaddcriteria pdsprebateaddcriteria)
      {   
         var result = new AspdsetupPDSPRebateAddResponseAPI();
         
         var pdspdsprebateadd = new pdspdsprebateaddDataSet();
            
         DataRow ttblpdsprebateaddcriteriaCriteria = pdspdsprebateadd.ttblpdsprebateaddcriteria.NewttblpdsprebateaddcriteriaRow();
         Pdsprebateaddcriteria.UpdateRowFromPdsprebateaddcriteria(ref ttblpdsprebateaddcriteriaCriteria, pdsprebateaddcriteria);
         pdspdsprebateadd.ttblpdsprebateaddcriteria.AddttblpdsprebateaddcriteriaRow((pdspdsprebateaddDataSet.ttblpdsprebateaddcriteriaRow)ttblpdsprebateaddcriteriaCriteria);
            
         int iRebrecno = 0;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPRebateAdd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPRebateAdd(ref pdsContext,  pdspdsprebateadd, out iRebrecno, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPRebateAdd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsprebateadd); 
    
         result.iRebrecno = iRebrecno;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AspdsetupPDSPVendAddResponseAPI PDSPVendAdd(Pdspvendaddcriteria pdspvendaddcriteria)
      {   
         var result = new AspdsetupPDSPVendAddResponseAPI();
         
         var pdspdspvendadd = new pdspdspvendaddDataSet();
            
         DataRow ttblpdspvendaddcriteriaCriteria = pdspdspvendadd.ttblpdspvendaddcriteria.NewttblpdspvendaddcriteriaRow();
         Pdspvendaddcriteria.UpdateRowFromPdspvendaddcriteria(ref ttblpdspvendaddcriteriaCriteria, pdspvendaddcriteria);
         pdspdspvendadd.ttblpdspvendaddcriteria.AddttblpdspvendaddcriteriaRow((pdspdspvendaddDataSet.ttblpdspvendaddcriteriaRow)ttblpdspvendaddcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPVendAdd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPVendAdd(ref pdsContext, ref pdspdspvendadd, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("PDSPVendAdd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendadd); 
    
         foreach (DataRow row in pdspdspvendadd.ttblpdspvendaddresults)
         {
            result.pdspvendaddresults.Add(Pdspvendaddresults.BuildPdspvendaddresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public string DeletePDrecord(IEnumerable<Pdspdelcriteria> pdspdelcriteria)
      {   
          
         var pdspdspdel = new pdspdspdelDataSet();
            
         foreach (var obj in pdspdelcriteria)
         {
             DataRow row = pdspdspdel.ttblpdspdelcriteria.NewttblpdspdelcriteriaRow();
             Pdspdelcriteria.UpdateRowFromPdspdelcriteria(ref row, obj);
             pdspdspdel.ttblpdspdelcriteria.AddttblpdspdelcriteriaRow((pdspdspdelDataSet.ttblpdspdelcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeletePDrecord - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.DeletePDrecord(ref pdsContext,  pdspdspdel, out cErrorMessage, out cMessage);
               }
            });
         NLogLoggerP.Info("DeletePDrecord - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspdel); 
    
         return cMessage;
      
      }

      public string CancelPDRecord(Pdspdelcriteria pdspdelcriteria)
      {   
          
         var pdspdspdel = new pdspdspdelDataSet();
            
         DataRow ttblpdspdelcriteriaCriteria = pdspdspdel.ttblpdspdelcriteria.NewttblpdspdelcriteriaRow();
         Pdspdelcriteria.UpdateRowFromPdspdelcriteria(ref ttblpdspdelcriteriaCriteria, pdspdelcriteria);
         pdspdspdel.ttblpdspdelcriteria.AddttblpdspdelcriteriaRow((pdspdspdelDataSet.ttblpdspdelcriteriaRow)ttblpdspdelcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CancelPDRecord - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.CancelPDRecord(ref pdsContext,  pdspdspdel, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("CancelPDRecord - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspdel); 
    
         return cWarningMessage;
      
      }

      public string CustProdUpd(Pdspcustprodupdcriteria pdspcustprodupdcriteria)
      {   
          
         var pdspdspcustprodupd = new pdspdspcustprodupdDataSet();
            
         DataRow ttblpdspcustprodupdcriteriaCriteria = pdspdspcustprodupd.ttblpdspcustprodupdcriteria.NewttblpdspcustprodupdcriteriaRow();
         Pdspcustprodupdcriteria.UpdateRowFromPdspcustprodupdcriteria(ref ttblpdspcustprodupdcriteriaCriteria, pdspcustprodupdcriteria);
         pdspdspcustprodupd.ttblpdspcustprodupdcriteria.AddttblpdspcustprodupdcriteriaRow((pdspdspcustprodupdDataSet.ttblpdspcustprodupdcriteriaRow)ttblpdspcustprodupdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CustProdUpd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.CustProdUpd(ref pdsContext,  pdspdspcustprodupd, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("CustProdUpd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodupd); 
    
         return cWarningMessage;
      
      }

      public string VendContUpd(Pdspvendcontupdcriteria pdspvendcontupdcriteria)
      {   
          
         var pdspdspvendcontupd = new pdspdspvendcontupdDataSet();
            
         DataRow ttblpdspvendcontupdcriteriaCriteria = pdspdspvendcontupd.ttblpdspvendcontupdcriteria.NewttblpdspvendcontupdcriteriaRow();
         Pdspvendcontupdcriteria.UpdateRowFromPdspvendcontupdcriteria(ref ttblpdspvendcontupdcriteriaCriteria, pdspvendcontupdcriteria);
         pdspdspvendcontupd.ttblpdspvendcontupdcriteria.AddttblpdspvendcontupdcriteriaRow((pdspdspvendcontupdDataSet.ttblpdspvendcontupdcriteriaRow)ttblpdspvendcontupdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VendContUpd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.VendContUpd(ref pdsContext,  pdspdspvendcontupd, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("VendContUpd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendcontupd); 
    
         return cWarningMessage;
      
      }

      public string RebateUpd(Pdsprebateupdcriteria pdsprebateupdcriteria)
      {   
          
         var pdspdsprebateupd = new pdspdsprebateupdDataSet();
            
         DataRow ttblpdsprebateupdcriteriaCriteria = pdspdsprebateupd.ttblpdsprebateupdcriteria.NewttblpdsprebateupdcriteriaRow();
         Pdsprebateupdcriteria.UpdateRowFromPdsprebateupdcriteria(ref ttblpdsprebateupdcriteriaCriteria, pdsprebateupdcriteria);
         pdspdsprebateupd.ttblpdsprebateupdcriteria.AddttblpdsprebateupdcriteriaRow((pdspdsprebateupdDataSet.ttblpdsprebateupdcriteriaRow)ttblpdsprebateupdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RebateUpd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.RebateUpd(ref pdsContext,  pdspdsprebateupd, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("RebateUpd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdsprebateupd); 
    
         return cWarningMessage;
      
      }

      public string VendorUpd(Pdspvendupdcriteria pdspvendupdcriteria)
      {   
          
         var pdspdspvendupd = new pdspdspvendupdDataSet();
            
         DataRow ttblpdspvendupdcriteriaCriteria = pdspdspvendupd.ttblpdspvendupdcriteria.NewttblpdspvendupdcriteriaRow();
         Pdspvendupdcriteria.UpdateRowFromPdspvendupdcriteria(ref ttblpdspvendupdcriteriaCriteria, pdspvendupdcriteria);
         pdspdspvendupd.ttblpdspvendupdcriteria.AddttblpdspvendupdcriteriaRow((pdspdspvendupdDataSet.ttblpdspvendupdcriteriaRow)ttblpdspvendupdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VendorUpd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.VendorUpd(ref pdsContext,  pdspdspvendupd, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("VendorUpd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspvendupd); 
    
         return cWarningMessage;
      
      }

      public AspdsetuppdsplevelResponseAPI pdsplevel(int iSecurity)
      {   
         var result = new AspdsetuppdsplevelResponseAPI();
         
         string cLevelcd = string.Empty;
         string cLeveldata = string.Empty;
         string cSecurity = string.Empty;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("pdsplevel - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.pdsplevel(ref pdsContext,  iSecurity, out cLevelcd, out cLeveldata, out cSecurity, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("pdsplevel - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cLevelcd = cLevelcd;
         result.cLeveldata = cLeveldata;
         result.cSecurity = cSecurity;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Pdsppricebrowseresults> pdsppricebrowser(Pdspdsppricecriteria pdspdsppricecriteria)
      {   
         var results = new List<Pdsppricebrowseresults>();
         
         var pdspdspprice = new pdspdsppriceDataSet();
            
         DataRow ttblpdspdsppricecriteriaCriteria = pdspdspprice.ttblpdspdsppricecriteria.NewttblpdspdsppricecriteriaRow();
         Pdspdsppricecriteria.UpdateRowFromPdspdsppricecriteria(ref ttblpdspdsppricecriteriaCriteria, pdspdsppricecriteria);
         pdspdspprice.ttblpdspdsppricecriteria.AddttblpdspdsppricecriteriaRow((pdspdsppriceDataSet.ttblpdspdsppricecriteriaRow)ttblpdspdsppricecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("pdsppricebrowser - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.pdsppricebrowser(ref pdsContext, ref pdspdspprice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("pdsppricebrowser - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspprice); 
    
            foreach (DataRow row in pdspdspprice.ttblpdsppricebrowseresults)
            {
                results.Add(Pdsppricebrowseresults.BuildPdsppricebrowseresultsFromRow(row));
            }
            return results;
        
      }

      public Pdsppricedetailresults pdsppricedetail(Pdspdsppricecriteria pdspdsppricecriteria)
      {   
         var result = new Pdsppricedetailresults();
         
         var pdspdspprice = new pdspdsppriceDataSet();
            
         DataRow ttblpdspdsppricecriteriaCriteria = pdspdspprice.ttblpdspdsppricecriteria.NewttblpdspdsppricecriteriaRow();
         Pdspdsppricecriteria.UpdateRowFromPdspdsppricecriteria(ref ttblpdspdsppricecriteriaCriteria, pdspdsppricecriteria);
         pdspdspprice.ttblpdspdsppricecriteria.AddttblpdspdsppricecriteriaRow((pdspdsppriceDataSet.ttblpdspdsppricecriteriaRow)ttblpdspdsppricecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("pdsppricedetail - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.pdsppricedetail(ref pdsContext, ref pdspdspprice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("pdsppricedetail - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspprice); 
    
         if (pdspdspprice.ttblpdsppricedetailresults.Count > 0) 
         { 
             result = Pdsppricedetailresults.BuildPdsppricedetailresultsFromRow(pdspdspprice.ttblpdsppricedetailresults[0]);
         } 
              
          
         return result;
          
      }

      public AspdsetuppdspwidgetResponseAPI pdspwidget(Pdspwidgetcriteria pdspwidgetcriteria)
      {   
         var result = new AspdsetuppdspwidgetResponseAPI();
         
         var pdspdspwidget = new pdspdspwidgetDataSet();
            
         DataRow ttblpdspwidgetcriteriaCriteria = pdspdspwidget.ttblpdspwidgetcriteria.NewttblpdspwidgetcriteriaRow();
         Pdspwidgetcriteria.UpdateRowFromPdspwidgetcriteria(ref ttblpdspwidgetcriteriaCriteria, pdspwidgetcriteria);
         pdspdspwidget.ttblpdspwidgetcriteria.AddttblpdspwidgetcriteriaRow((pdspdspwidgetDataSet.ttblpdspwidgetcriteriaRow)ttblpdspwidgetcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarning = string.Empty;
   
         
         NLogLoggerP.Trace("pdspwidget - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.pdspwidget(ref pdsContext, ref pdspdspwidget, out cErrorMessage, out cWarning);
               }
            });
         NLogLoggerP.Info("pdspwidget - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspwidget); 
    
         if (pdspdspwidget.ttblpdspwidgetresults.Count > 0)
         {
            result.pdspwidgetresults = Pdspwidgetresults.BuildPdspwidgetresultsFromRow(pdspdspwidget.ttblpdspwidgetresults[0]);
         }
                    
         result.cWarning = cWarning;
          
         return result;
          
      }

      public void pdspupdatebrowser(IEnumerable<Pdspupdatebrowsercriteria> pdspupdatebrowsercriteria)
      {   
         
         var pdspdspupdatebrowser = new pdspdspupdatebrowserDataSet();
            
         foreach (var obj in pdspupdatebrowsercriteria)
         {
             DataRow row = pdspdspupdatebrowser.ttblpdspupdatebrowsercriteria.NewttblpdspupdatebrowsercriteriaRow();
             Pdspupdatebrowsercriteria.UpdateRowFromPdspupdatebrowsercriteria(ref row, obj);
             pdspdspupdatebrowser.ttblpdspupdatebrowsercriteria.AddttblpdspupdatebrowsercriteriaRow((pdspdspupdatebrowserDataSet.ttblpdspupdatebrowsercriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("pdspupdatebrowser - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.pdspupdatebrowser(ref pdsContext,  pdspdspupdatebrowser, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("pdspupdatebrowser - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspupdatebrowser);
      }

      public IEnumerable<Pricesheetdataresults> PriceSheetData(Pricesheetdatacriteria pricesheetdatacriteria)
      {   
         var results = new List<Pricesheetdataresults>();
         
         var pdspricesheetdata = new pdspricesheetdataDataSet();
            
         DataRow ttblpricesheetdatacriteriaCriteria = pdspricesheetdata.ttblpricesheetdatacriteria.NewttblpricesheetdatacriteriaRow();
         Pricesheetdatacriteria.UpdateRowFromPricesheetdatacriteria(ref ttblpricesheetdatacriteriaCriteria, pricesheetdatacriteria);
         pdspricesheetdata.ttblpricesheetdatacriteria.AddttblpricesheetdatacriteriaRow((pdspricesheetdataDataSet.ttblpricesheetdatacriteriaRow)ttblpricesheetdatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PriceSheetData - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PriceSheetData(ref pdsContext, ref pdspricesheetdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PriceSheetData - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspricesheetdata); 
    
            foreach (DataRow row in pdspricesheetdata.ttblpricesheetdataresults)
            {
                results.Add(Pricesheetdataresults.BuildPricesheetdataresultsFromRow(row));
            }
            return results;
        
      }

      public Pdspcustprodloadresults PDSPCustProdLoad(int pvPdrecno)
      {   
         var result = new Pdspcustprodloadresults();
         
         var pdspdspcustprodload = new pdspdspcustprodloadDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPCustProdLoad - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPCustProdLoad(ref pdsContext,  pvPdrecno, out pdspdspcustprodload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPCustProdLoad - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspcustprodload); 
    
         if (pdspdspcustprodload.ttblpdspcustprodloadresults.Count > 0) 
         { 
             result = Pdspcustprodloadresults.BuildPdspcustprodloadresultsFromRow(pdspdspcustprodload.ttblpdspcustprodloadresults[0]);
         } 
              
          
         return result;
          
      }

      public int PDSPNPAdd(Pdspnpaddcriteria pdspnpaddcriteria)
      {   
          
         var pdspdspnpadd = new pdspdspnpaddDataSet();
            
         DataRow ttblpdspnpaddcriteriaCriteria = pdspdspnpadd.ttblpdspnpaddcriteria.NewttblpdspnpaddcriteriaRow();
         Pdspnpaddcriteria.UpdateRowFromPdspnpaddcriteria(ref ttblpdspnpaddcriteriaCriteria, pdspnpaddcriteria);
         pdspdspnpadd.ttblpdspnpaddcriteria.AddttblpdspnpaddcriteriaRow((pdspdspnpaddDataSet.ttblpdspnpaddcriteriaRow)ttblpdspnpaddcriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPNPAdd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPNPAdd(ref pdsContext,  pdspdspnpadd, out iPDrecno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPNPAdd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspnpadd); 
    
         return iPDrecno;
      
      }

      public AspdsetupPDSPNPCopyResponseAPI PDSPNPCopy(Pdspnpcopycriteria pdspnpcopycriteria)
      {   
         var result = new AspdsetupPDSPNPCopyResponseAPI();
         
         var pdspdspnpcopy = new pdspdspnpcopyDataSet();
            
         DataRow ttblpdspnpcopycriteriaCriteria = pdspdspnpcopy.ttblpdspnpcopycriteria.NewttblpdspnpcopycriteriaRow();
         Pdspnpcopycriteria.UpdateRowFromPdspnpcopycriteria(ref ttblpdspnpcopycriteriaCriteria, pdspnpcopycriteria);
         pdspdspnpcopy.ttblpdspnpcopycriteria.AddttblpdspnpcopycriteriaRow((pdspdspnpcopyDataSet.ttblpdspnpcopycriteriaRow)ttblpdspnpcopycriteriaCriteria);
            
         int iPDrecno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPNPCopy - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPNPCopy(ref pdsContext, ref pdspdspnpcopy, out iPDrecno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPNPCopy - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspnpcopy); 
    
         if (pdspdspnpcopy.ttblpdspnpcopyresults.Count > 0)
         {
            result.pdspnpcopyresults = Pdspnpcopyresults.BuildPdspnpcopyresultsFromRow(pdspdspnpcopy.ttblpdspnpcopyresults[0]);
         }
                    
         result.iPDrecno = iPDrecno;
          
         return result;
          
      }

      public Pdspnpinitresults PDSPNPInit(Pdspnpinitcriteria pdspnpinitcriteria)
      {   
         var result = new Pdspnpinitresults();
         
         var pdspdspnpinit = new pdspdspnpinitDataSet();
            
         DataRow ttblpdspnpinitcriteriaCriteria = pdspdspnpinit.ttblpdspnpinitcriteria.NewttblpdspnpinitcriteriaRow();
         Pdspnpinitcriteria.UpdateRowFromPdspnpinitcriteria(ref ttblpdspnpinitcriteriaCriteria, pdspnpinitcriteria);
         pdspdspnpinit.ttblpdspnpinitcriteria.AddttblpdspnpinitcriteriaRow((pdspdspnpinitDataSet.ttblpdspnpinitcriteriaRow)ttblpdspnpinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPNPInit - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPNPInit(ref pdsContext, ref pdspdspnpinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPNPInit - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspnpinit); 
    
         if (pdspdspnpinit.ttblpdspnpinitresults.Count > 0) 
         { 
             result = Pdspnpinitresults.BuildPdspnpinitresultsFromRow(pdspdspnpinit.ttblpdspnpinitresults[0]);
         } 
              
          
         return result;
          
      }

      public AspdsetupPDSPNPSearchResponseAPI PDSPNPSearch(Pdspnpcriteria pdspnpcriteria)
      {   
         var result = new AspdsetupPDSPNPSearchResponseAPI();
         
         var pdspdspnpsearch = new pdspdspnpsearchDataSet();
            
         DataRow ttblpdspnpcriteriaCriteria = pdspdspnpsearch.ttblpdspnpcriteria.NewttblpdspnpcriteriaRow();
         Pdspnpcriteria.UpdateRowFromPdspnpcriteria(ref ttblpdspnpcriteriaCriteria, pdspnpcriteria);
         pdspdspnpsearch.ttblpdspnpcriteria.AddttblpdspnpcriteriaRow((pdspdspnpsearchDataSet.ttblpdspnpcriteriaRow)ttblpdspnpcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPNPSearch - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPNPSearch(ref pdsContext, ref pdspdspnpsearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("PDSPNPSearch - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspnpsearch); 
    
         foreach (DataRow row in pdspdspnpsearch.ttblpdspnpresults)
         {
            result.pdspnpresults.Add(Pdspnpresults.BuildPdspnpresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public void PDSPNPUpd(Pdspnpupdcriteria pdspnpupdcriteria)
      {   
         
         var pdspdspnpupd = new pdspdspnpupdDataSet();
            
         DataRow ttblpdspnpupdcriteriaCriteria = pdspdspnpupd.ttblpdspnpupdcriteria.NewttblpdspnpupdcriteriaRow();
         Pdspnpupdcriteria.UpdateRowFromPdspnpupdcriteria(ref ttblpdspnpupdcriteriaCriteria, pdspnpupdcriteria);
         pdspdspnpupd.ttblpdspnpupdcriteria.AddttblpdspnpupdcriteriaRow((pdspdspnpupdDataSet.ttblpdspnpupdcriteriaRow)ttblpdspnpupdcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PDSPNPUpd - Aspdsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAspdsetupproxy = this.proxyAppObject.CreatePO_aspdsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAspdsetupproxy.PDSPNPUpd(ref pdsContext,  pdspdspnpupd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PDSPNPUpd - Aspdsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspdspnpupd);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  