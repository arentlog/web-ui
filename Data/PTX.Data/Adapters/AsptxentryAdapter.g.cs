//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PTX.Data.Adapters
{
   using com.infor.sxproxy.ptxproxy;
   using com.infor.sxproxy.ptxproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsptxsrprodlist;
   using Models.Pdsptxsrcustlist;
   using Models.Pdsptxsrpcatlist;
   using Models.Pdsptxsrrouterule;
   using Models.Pdsptxrouting;
   using Models.Pdsptxqueuelist;
   using Models.Pdsptxqueuebatchdetail;
   using Models.Pdsptxqueuedelete;
   using Models.Pdsptxtransedit;
   using Models.Complex;

   public partial class AsptxentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private PTXProxyAppObject proxyAppObject;
      
      public AsptxentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new PTXProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsptxentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Ptxsrprodlist> PTXSRProductList(Ptxsrprodcriteria ptxsrprodcriteria)
      {   
         var results = new List<Ptxsrprodlist>();
         
         var pdsptxsrprodlist = new pdsptxsrprodlistDataSet();
            
         DataRow ttblptxsrprodcriteriaCriteria = pdsptxsrprodlist.ttblptxsrprodcriteria.NewttblptxsrprodcriteriaRow();
         Ptxsrprodcriteria.UpdateRowFromPtxsrprodcriteria(ref ttblptxsrprodcriteriaCriteria, ptxsrprodcriteria);
         pdsptxsrprodlist.ttblptxsrprodcriteria.AddttblptxsrprodcriteriaRow((pdsptxsrprodlistDataSet.ttblptxsrprodcriteriaRow)ttblptxsrprodcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRProductList - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRProductList(ref pdsContext, ref pdsptxsrprodlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRProductList - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrprodlist); 
    
            foreach (DataRow row in pdsptxsrprodlist.ttblptxsrprodlist)
            {
                results.Add(Ptxsrprodlist.BuildPtxsrprodlistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Ptxsrcustlist> PTXSRCustomerList(Ptxsrcustcriteria ptxsrcustcriteria)
      {   
         var results = new List<Ptxsrcustlist>();
         
         var pdsptxsrcustlist = new pdsptxsrcustlistDataSet();
            
         DataRow ttblptxsrcustcriteriaCriteria = pdsptxsrcustlist.ttblptxsrcustcriteria.NewttblptxsrcustcriteriaRow();
         Ptxsrcustcriteria.UpdateRowFromPtxsrcustcriteria(ref ttblptxsrcustcriteriaCriteria, ptxsrcustcriteria);
         pdsptxsrcustlist.ttblptxsrcustcriteria.AddttblptxsrcustcriteriaRow((pdsptxsrcustlistDataSet.ttblptxsrcustcriteriaRow)ttblptxsrcustcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRCustomerList - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRCustomerList(ref pdsContext, ref pdsptxsrcustlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRCustomerList - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrcustlist); 
    
            foreach (DataRow row in pdsptxsrcustlist.ttblptxsrcustlist)
            {
                results.Add(Ptxsrcustlist.BuildPtxsrcustlistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Ptxsrpcatlist> PTXSRProdCatList(Ptxsrpcatcriteria ptxsrpcatcriteria)
      {   
         var results = new List<Ptxsrpcatlist>();
         
         var pdsptxsrpcatlist = new pdsptxsrpcatlistDataSet();
            
         DataRow ttblptxsrpcatcriteriaCriteria = pdsptxsrpcatlist.ttblptxsrpcatcriteria.NewttblptxsrpcatcriteriaRow();
         Ptxsrpcatcriteria.UpdateRowFromPtxsrpcatcriteria(ref ttblptxsrpcatcriteriaCriteria, ptxsrpcatcriteria);
         pdsptxsrpcatlist.ttblptxsrpcatcriteria.AddttblptxsrpcatcriteriaRow((pdsptxsrpcatlistDataSet.ttblptxsrpcatcriteriaRow)ttblptxsrpcatcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRProdCatList - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRProdCatList(ref pdsContext, ref pdsptxsrpcatlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRProdCatList - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrpcatlist); 
    
            foreach (DataRow row in pdsptxsrpcatlist.ttblptxsrpcatlist)
            {
                results.Add(Ptxsrpcatlist.BuildPtxsrpcatlistFromRow(row));
            }
            return results;
        
      }

      public void PTXSRRouteRuleCreate(Ptxsrrouterule ptxsrrouterule)
      {   
         
         var pdsptxsrrouterule = new pdsptxsrrouteruleDataSet();
            
         DataRow ttblptxsrrouteruleCriteria = pdsptxsrrouterule.ttblptxsrrouterule.NewttblptxsrrouteruleRow();
         Ptxsrrouterule.UpdateRowFromPtxsrrouterule(ref ttblptxsrrouteruleCriteria, ptxsrrouterule);
         pdsptxsrrouterule.ttblptxsrrouterule.AddttblptxsrrouteruleRow((pdsptxsrrouteruleDataSet.ttblptxsrrouteruleRow)ttblptxsrrouteruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRRouteRuleCreate - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRRouteRuleCreate(ref pdsContext,  pdsptxsrrouterule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRRouteRuleCreate - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrrouterule);
      }

      public Ptxsrrouterule PTXSRRouteRuleRetrieve(Ptxsrrouterule ptxsrrouterule)
      {   
         var result = new Ptxsrrouterule();
         
         var pdsptxsrrouterule = new pdsptxsrrouteruleDataSet();
            
         DataRow ttblptxsrrouteruleCriteria = pdsptxsrrouterule.ttblptxsrrouterule.NewttblptxsrrouteruleRow();
         Ptxsrrouterule.UpdateRowFromPtxsrrouterule(ref ttblptxsrrouteruleCriteria, ptxsrrouterule);
         pdsptxsrrouterule.ttblptxsrrouterule.AddttblptxsrrouteruleRow((pdsptxsrrouteruleDataSet.ttblptxsrrouteruleRow)ttblptxsrrouteruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRRouteRuleRetrieve - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRRouteRuleRetrieve(ref pdsContext, ref pdsptxsrrouterule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRRouteRuleRetrieve - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrrouterule); 
    
         if (pdsptxsrrouterule.ttblptxsrrouterule.Count > 0) 
         { 
             result = Ptxsrrouterule.BuildPtxsrrouteruleFromRow(pdsptxsrrouterule.ttblptxsrrouterule[0]);
         } 
              
          
         return result;
          
      }

      public void PTXSRRouteRuleUpdate(Ptxsrrouterule ptxsrrouterule)
      {   
         
         var pdsptxsrrouterule = new pdsptxsrrouteruleDataSet();
            
         DataRow ttblptxsrrouteruleCriteria = pdsptxsrrouterule.ttblptxsrrouterule.NewttblptxsrrouteruleRow();
         Ptxsrrouterule.UpdateRowFromPtxsrrouterule(ref ttblptxsrrouteruleCriteria, ptxsrrouterule);
         pdsptxsrrouterule.ttblptxsrrouterule.AddttblptxsrrouteruleRow((pdsptxsrrouteruleDataSet.ttblptxsrrouteruleRow)ttblptxsrrouteruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRRouteRuleUpdate - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRRouteRuleUpdate(ref pdsContext,  pdsptxsrrouterule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRRouteRuleUpdate - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrrouterule);
      }

      public void PTXSRRouteRuleDelete(Ptxsrrouterule ptxsrrouterule)
      {   
         
         var pdsptxsrrouterule = new pdsptxsrrouteruleDataSet();
            
         DataRow ttblptxsrrouteruleCriteria = pdsptxsrrouterule.ttblptxsrrouterule.NewttblptxsrrouteruleRow();
         Ptxsrrouterule.UpdateRowFromPtxsrrouterule(ref ttblptxsrrouteruleCriteria, ptxsrrouterule);
         pdsptxsrrouterule.ttblptxsrrouterule.AddttblptxsrrouteruleRow((pdsptxsrrouteruleDataSet.ttblptxsrrouteruleRow)ttblptxsrrouteruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXSRRouteRuleDelete - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXSRRouteRuleDelete(ref pdsContext,  pdsptxsrrouterule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXSRRouteRuleDelete - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxsrrouterule);
      }

      public Ptxroutingresults PTXGetRoutingRule(Ptxroutingcriteria ptxroutingcriteria)
      {   
         var result = new Ptxroutingresults();
         
         var pdsptxrouting = new pdsptxroutingDataSet();
            
         DataRow ttblptxroutingcriteriaCriteria = pdsptxrouting.ttblptxroutingcriteria.NewttblptxroutingcriteriaRow();
         Ptxroutingcriteria.UpdateRowFromPtxroutingcriteria(ref ttblptxroutingcriteriaCriteria, ptxroutingcriteria);
         pdsptxrouting.ttblptxroutingcriteria.AddttblptxroutingcriteriaRow((pdsptxroutingDataSet.ttblptxroutingcriteriaRow)ttblptxroutingcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXGetRoutingRule - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXGetRoutingRule(ref pdsContext, ref pdsptxrouting, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXGetRoutingRule - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxrouting); 
    
         if (pdsptxrouting.ttblptxroutingresults.Count > 0) 
         { 
             result = Ptxroutingresults.BuildPtxroutingresultsFromRow(pdsptxrouting.ttblptxroutingresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Ptxroutingresults> PTXGetRoutingRuleInquiry(Ptxroutingcriteria ptxroutingcriteria)
      {   
         var results = new List<Ptxroutingresults>();
         
         var pdsptxrouting = new pdsptxroutingDataSet();
            
         DataRow ttblptxroutingcriteriaCriteria = pdsptxrouting.ttblptxroutingcriteria.NewttblptxroutingcriteriaRow();
         Ptxroutingcriteria.UpdateRowFromPtxroutingcriteria(ref ttblptxroutingcriteriaCriteria, ptxroutingcriteria);
         pdsptxrouting.ttblptxroutingcriteria.AddttblptxroutingcriteriaRow((pdsptxroutingDataSet.ttblptxroutingcriteriaRow)ttblptxroutingcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXGetRoutingRuleInquiry - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXGetRoutingRuleInquiry(ref pdsContext, ref pdsptxrouting, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXGetRoutingRuleInquiry - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxrouting); 
    
            foreach (DataRow row in pdsptxrouting.ttblptxroutingresults)
            {
                results.Add(Ptxroutingresults.BuildPtxroutingresultsFromRow(row));
            }
            return results;
        
      }

      public AsptxentryPTXGetQueueListResponseAPI PTXGetQueueList(Ptxqueuelistcriteria ptxqueuelistcriteria)
      {   
         var result = new AsptxentryPTXGetQueueListResponseAPI();
         
         var pdsptxqueuelist = new pdsptxqueuelistDataSet();
            
         DataRow ttblptxqueuelistcriteriaCriteria = pdsptxqueuelist.ttblptxqueuelistcriteria.NewttblptxqueuelistcriteriaRow();
         Ptxqueuelistcriteria.UpdateRowFromPtxqueuelistcriteria(ref ttblptxqueuelistcriteriaCriteria, ptxqueuelistcriteria);
         pdsptxqueuelist.ttblptxqueuelistcriteria.AddttblptxqueuelistcriteriaRow((pdsptxqueuelistDataSet.ttblptxqueuelistcriteriaRow)ttblptxqueuelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("PTXGetQueueList - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXGetQueueList(ref pdsContext, ref pdsptxqueuelist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("PTXGetQueueList - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxqueuelist); 
    
         foreach (DataRow row in pdsptxqueuelist.ttblptxqueuelistresults)
         {
            result.ptxqueuelistresults.Add(Ptxqueuelistresults.BuildPtxqueuelistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsptxentryPTXGetQueueBatchDetailResponseAPI PTXGetQueueBatchDetail(Ptxqueuebatchdetailcriteria ptxqueuebatchdetailcriteria)
      {   
         var result = new AsptxentryPTXGetQueueBatchDetailResponseAPI();
         
         var pdsptxqueuebatchdetail = new pdsptxqueuebatchdetailDataSet();
            
         DataRow ttblptxqueuebatchdetailcriteriaCriteria = pdsptxqueuebatchdetail.ttblptxqueuebatchdetailcriteria.NewttblptxqueuebatchdetailcriteriaRow();
         Ptxqueuebatchdetailcriteria.UpdateRowFromPtxqueuebatchdetailcriteria(ref ttblptxqueuebatchdetailcriteriaCriteria, ptxqueuebatchdetailcriteria);
         pdsptxqueuebatchdetail.ttblptxqueuebatchdetailcriteria.AddttblptxqueuebatchdetailcriteriaRow((pdsptxqueuebatchdetailDataSet.ttblptxqueuebatchdetailcriteriaRow)ttblptxqueuebatchdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXGetQueueBatchDetail - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXGetQueueBatchDetail(ref pdsContext, ref pdsptxqueuebatchdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXGetQueueBatchDetail - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxqueuebatchdetail); 
    
         if (pdsptxqueuebatchdetail.ttblptxqueuebatchdetailhdr.Count > 0)
         {
            result.ptxqueuebatchdetailhdr = Ptxqueuebatchdetailhdr.BuildPtxqueuebatchdetailhdrFromRow(pdsptxqueuebatchdetail.ttblptxqueuebatchdetailhdr[0]);
         }
                    
         foreach (DataRow row in pdsptxqueuebatchdetail.ttblptxqueuebatchdetailresults)
         {
            result.ptxqueuebatchdetailresults.Add(Ptxqueuebatchdetailresults.BuildPtxqueuebatchdetailresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void PTXQueueDelete(IEnumerable<Ptxqueuedeletecriteria> ptxqueuedeletecriteria)
      {   
         
         var pdsptxqueuedelete = new pdsptxqueuedeleteDataSet();
            
         foreach (var obj in ptxqueuedeletecriteria)
         {
             DataRow row = pdsptxqueuedelete.ttblptxqueuedeletecriteria.NewttblptxqueuedeletecriteriaRow();
             Ptxqueuedeletecriteria.UpdateRowFromPtxqueuedeletecriteria(ref row, obj);
             pdsptxqueuedelete.ttblptxqueuedeletecriteria.AddttblptxqueuedeletecriteriaRow((pdsptxqueuedeleteDataSet.ttblptxqueuedeletecriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXQueueDelete - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXQueueDelete(ref pdsContext,  pdsptxqueuedelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXQueueDelete - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxqueuedelete);
      }

      public void PTXQueueProcessing(string cQueueType, int iOrderNo, int iOrderSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXQueueProcessing - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXQueueProcessing(ref pdsContext,  cQueueType,  iOrderNo,  iOrderSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXQueueProcessing - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void PTXQueueStatusChange(AsptxentryPTXQueueStatusChangeRequestAPI AsptxentryPTXQueueStatusChangeRequestAPI)
      {   
         
         var pdsptxqueuedelete = new pdsptxqueuedeleteDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsptxentryPTXQueueStatusChangeRequestAPI.ptxqueuedeletecriteria)
         {
            DataRow ttblptxqueuedeletecriteriaRow = pdsptxqueuedelete.ttblptxqueuedeletecriteria.NewttblptxqueuedeletecriteriaRow();
            Ptxqueuedeletecriteria.UpdateRowFromPtxqueuedeletecriteria(ref ttblptxqueuedeletecriteriaRow, obj);
            pdsptxqueuedelete.ttblptxqueuedeletecriteria.AddttblptxqueuedeletecriteriaRow((pdsptxqueuedeleteDataSet.ttblptxqueuedeletecriteriaRow)ttblptxqueuedeletecriteriaRow);
         }
          
         var  cStatusTy = AsptxentryPTXQueueStatusChangeRequestAPI.cStatusTy;
            
         
         NLogLoggerP.Trace("PTXQueueStatusChange - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXQueueStatusChange(ref pdsContext,  pdsptxqueuedelete,  cStatusTy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXQueueStatusChange - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxqueuedelete);
      }

      public IEnumerable<Ptxtranseditresults> PTXTransactionEdit(IEnumerable<Ptxtranseditcriteria> ptxtranseditcriteria)
      {   
         var results = new List<Ptxtranseditresults>();
         
         var pdsptxtransedit = new pdsptxtranseditDataSet();
            
         foreach (var obj in ptxtranseditcriteria)
         {
             DataRow row = pdsptxtransedit.ttblptxtranseditcriteria.NewttblptxtranseditcriteriaRow();
             Ptxtranseditcriteria.UpdateRowFromPtxtranseditcriteria(ref row, obj);
             pdsptxtransedit.ttblptxtranseditcriteria.AddttblptxtranseditcriteriaRow((pdsptxtranseditDataSet.ttblptxtranseditcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PTXTransactionEdit - Asptxentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxentryproxy = this.proxyAppObject.CreatePO_asptxentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxentryproxy.PTXTransactionEdit(ref pdsContext, ref pdsptxtransedit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PTXTransactionEdit - Asptxentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxtransedit); 
    
            foreach (DataRow row in pdsptxtransedit.ttblptxtranseditresults)
            {
                results.Add(Ptxtranseditresults.BuildPtxtranseditresultsFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  