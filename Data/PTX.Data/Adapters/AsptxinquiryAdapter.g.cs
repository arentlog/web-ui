//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PTX.Data.Adapters
{
   using com.infor.sxproxy.ptxproxy;
   using com.infor.sxproxy.ptxproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsptxtranslist;
   using Models.Pdsptxtranslineslist;
   using Models.Pdsptxtransheaderdetail;
   using Models.Pdsptxtranslinedetail;
   using Models.Complex;

   public partial class AsptxinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private PTXProxyAppObject proxyAppObject;
      
      public AsptxinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new PTXProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsptxinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsptxinquiryGetPTXTransactionListResponseAPI GetPTXTransactionList(Ptxtranslistcriteria ptxtranslistcriteria)
      {   
         var result = new AsptxinquiryGetPTXTransactionListResponseAPI();
         
         var pdsptxtranslist = new pdsptxtranslistDataSet();
            
         DataRow ttblptxtranslistcriteriaCriteria = pdsptxtranslist.ttblptxtranslistcriteria.NewttblptxtranslistcriteriaRow();
         Ptxtranslistcriteria.UpdateRowFromPtxtranslistcriteria(ref ttblptxtranslistcriteriaCriteria, ptxtranslistcriteria);
         pdsptxtranslist.ttblptxtranslistcriteria.AddttblptxtranslistcriteriaRow((pdsptxtranslistDataSet.ttblptxtranslistcriteriaRow)ttblptxtranslistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetPTXTransactionList - Asptxinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxinquiryproxy = this.proxyAppObject.CreatePO_asptxinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxinquiryproxy.GetPTXTransactionList(ref pdsContext, ref pdsptxtranslist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetPTXTransactionList - Asptxinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxtranslist); 
    
         foreach (DataRow row in pdsptxtranslist.ttblptxtranslisthdr)
         {
            result.ptxtranslisthdr.Add(Ptxtranslisthdr.BuildPtxtranslisthdrFromRow(row));
         }     
         foreach (DataRow row in pdsptxtranslist.ttblptxtranslistnotes)
         {
            result.ptxtranslistnotes.Add(Ptxtranslistnotes.BuildPtxtranslistnotesFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsptxinquiryGetPTXTransactionLinesListResponseAPI GetPTXTransactionLinesList(Ptxtranslineslistcriteria ptxtranslineslistcriteria)
      {   
         var result = new AsptxinquiryGetPTXTransactionLinesListResponseAPI();
         
         var pdsptxtranslineslist = new pdsptxtranslineslistDataSet();
            
         DataRow ttblptxtranslineslistcriteriaCriteria = pdsptxtranslineslist.ttblptxtranslineslistcriteria.NewttblptxtranslineslistcriteriaRow();
         Ptxtranslineslistcriteria.UpdateRowFromPtxtranslineslistcriteria(ref ttblptxtranslineslistcriteriaCriteria, ptxtranslineslistcriteria);
         pdsptxtranslineslist.ttblptxtranslineslistcriteria.AddttblptxtranslineslistcriteriaRow((pdsptxtranslineslistDataSet.ttblptxtranslineslistcriteriaRow)ttblptxtranslineslistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GetPTXTransactionLinesList - Asptxinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxinquiryproxy = this.proxyAppObject.CreatePO_asptxinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxinquiryproxy.GetPTXTransactionLinesList(ref pdsContext, ref pdsptxtranslineslist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GetPTXTransactionLinesList - Asptxinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxtranslineslist); 
    
         foreach (DataRow row in pdsptxtranslineslist.ttblptxtranslineslisthdr)
         {
            result.ptxtranslineslisthdr.Add(Ptxtranslineslisthdr.BuildPtxtranslineslisthdrFromRow(row));
         }     
         foreach (DataRow row in pdsptxtranslineslist.ttblptxtranslineslistnotes)
         {
            result.ptxtranslineslistnotes.Add(Ptxtranslineslistnotes.BuildPtxtranslineslistnotesFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsptxinquiryGetPTXTransHeaderDetailResponseAPI GetPTXTransHeaderDetail(Ptxtransheaderdetailcriteria ptxtransheaderdetailcriteria)
      {   
         var result = new AsptxinquiryGetPTXTransHeaderDetailResponseAPI();
         
         var pdsptxtransheaderdetail = new pdsptxtransheaderdetailDataSet();
            
         DataRow ttblptxtransheaderdetailcriteriaCriteria = pdsptxtransheaderdetail.ttblptxtransheaderdetailcriteria.NewttblptxtransheaderdetailcriteriaRow();
         Ptxtransheaderdetailcriteria.UpdateRowFromPtxtransheaderdetailcriteria(ref ttblptxtransheaderdetailcriteriaCriteria, ptxtransheaderdetailcriteria);
         pdsptxtransheaderdetail.ttblptxtransheaderdetailcriteria.AddttblptxtransheaderdetailcriteriaRow((pdsptxtransheaderdetailDataSet.ttblptxtransheaderdetailcriteriaRow)ttblptxtransheaderdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPTXTransHeaderDetail - Asptxinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxinquiryproxy = this.proxyAppObject.CreatePO_asptxinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxinquiryproxy.GetPTXTransHeaderDetail(ref pdsContext, ref pdsptxtransheaderdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPTXTransHeaderDetail - Asptxinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxtransheaderdetail); 
    
         foreach (DataRow row in pdsptxtransheaderdetail.ttblptxtransdetailaddons)
         {
            result.ptxtransdetailaddons.Add(Ptxtransdetailaddons.BuildPtxtransdetailaddonsFromRow(row));
         }     
         foreach (DataRow row in pdsptxtransheaderdetail.ttblptxtransdetailaddr)
         {
            result.ptxtransdetailaddr.Add(Ptxtransdetailaddr.BuildPtxtransdetailaddrFromRow(row));
         }     
         if (pdsptxtransheaderdetail.ttblptxtransdetailhdr.Count > 0)
         {
            result.ptxtransdetailhdr = Ptxtransdetailhdr.BuildPtxtransdetailhdrFromRow(pdsptxtransheaderdetail.ttblptxtransdetailhdr[0]);
         }
                    
         foreach (DataRow row in pdsptxtransheaderdetail.ttblptxtransdetailnotes)
         {
            result.ptxtransdetailnotes.Add(Ptxtransdetailnotes.BuildPtxtransdetailnotesFromRow(row));
         }     
          
         return result;
          
      }

      public AsptxinquiryGetPTXTransLineDetailResponseAPI GetPTXTransLineDetail(Ptxtranslinedetailcriteria ptxtranslinedetailcriteria)
      {   
         var result = new AsptxinquiryGetPTXTransLineDetailResponseAPI();
         
         var pdsptxtranslinedetail = new pdsptxtranslinedetailDataSet();
            
         DataRow ttblptxtranslinedetailcriteriaCriteria = pdsptxtranslinedetail.ttblptxtranslinedetailcriteria.NewttblptxtranslinedetailcriteriaRow();
         Ptxtranslinedetailcriteria.UpdateRowFromPtxtranslinedetailcriteria(ref ttblptxtranslinedetailcriteriaCriteria, ptxtranslinedetailcriteria);
         pdsptxtranslinedetail.ttblptxtranslinedetailcriteria.AddttblptxtranslinedetailcriteriaRow((pdsptxtranslinedetailDataSet.ttblptxtranslinedetailcriteriaRow)ttblptxtranslinedetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPTXTransLineDetail - Asptxinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsptxinquiryproxy = this.proxyAppObject.CreatePO_asptxinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsptxinquiryproxy.GetPTXTransLineDetail(ref pdsContext, ref pdsptxtranslinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPTXTransLineDetail - Asptxinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsptxtranslinedetail); 
    
         foreach (DataRow row in pdsptxtranslinedetail.ttblptxtransdetailcomments)
         {
            result.ptxtransdetailcomments.Add(Ptxtransdetailcomments.BuildPtxtransdetailcommentsFromRow(row));
         }     
         foreach (DataRow row in pdsptxtranslinedetail.ttblptxtransdetline)
         {
            result.ptxtransdetline.Add(Ptxtransdetline.BuildPtxtransdetlineFromRow(row));
         }     
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  