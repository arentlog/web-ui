//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.PTX.Data.Repositories
{
   using Infor.Sxe.PTX.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsptxsrprodlist;
   using Models.Pdsptxsrcustlist;
   using Models.Pdsptxsrpcatlist;
   using Models.Pdsptxsrrouterule;
   using Models.Pdsptxrouting;
   using Models.Pdsptxqueuelist;
   using Models.Pdsptxqueuebatchdetail;
   using Models.Pdsptxqueuedelete;
   using Models.Pdsptxtransedit;
   using Models.Complex;

   public partial class AsptxentryRepository : RepositoryBase
   {
      private AsptxentryAdapter adapter;
  
      public AsptxentryRepository(IProgressConnection connection)
      {
         this.adapter = new AsptxentryAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public IEnumerable<Ptxsrprodlist> PTXSRProductList(Ptxsrprodcriteria ptxsrprodcriteria)
      {
         return this.adapter.PTXSRProductList(ptxsrprodcriteria);
      }
  
      public IEnumerable<Ptxsrcustlist> PTXSRCustomerList(Ptxsrcustcriteria ptxsrcustcriteria)
      {
         return this.adapter.PTXSRCustomerList(ptxsrcustcriteria);
      }
  
      public IEnumerable<Ptxsrpcatlist> PTXSRProdCatList(Ptxsrpcatcriteria ptxsrpcatcriteria)
      {
         return this.adapter.PTXSRProdCatList(ptxsrpcatcriteria);
      }
  
      public void PTXSRRouteRuleCreate(Ptxsrrouterule ptxsrrouterule)
      {
         this.adapter.PTXSRRouteRuleCreate(ptxsrrouterule);
      }
  
      public Ptxsrrouterule PTXSRRouteRuleRetrieve(Ptxsrrouterule ptxsrrouterule)
      {
         return this.adapter.PTXSRRouteRuleRetrieve(ptxsrrouterule);
      }
  
      public void PTXSRRouteRuleUpdate(Ptxsrrouterule ptxsrrouterule)
      {
         this.adapter.PTXSRRouteRuleUpdate(ptxsrrouterule);
      }
  
      public void PTXSRRouteRuleDelete(Ptxsrrouterule ptxsrrouterule)
      {
         this.adapter.PTXSRRouteRuleDelete(ptxsrrouterule);
      }
  
      public Ptxroutingresults PTXGetRoutingRule(Ptxroutingcriteria ptxroutingcriteria)
      {
         return this.adapter.PTXGetRoutingRule(ptxroutingcriteria);
      }
  
      public IEnumerable<Ptxroutingresults> PTXGetRoutingRuleInquiry(Ptxroutingcriteria ptxroutingcriteria)
      {
         return this.adapter.PTXGetRoutingRuleInquiry(ptxroutingcriteria);
      }
  
      public AsptxentryPTXGetQueueListResponseAPI PTXGetQueueList(Ptxqueuelistcriteria ptxqueuelistcriteria)
      {
         return this.adapter.PTXGetQueueList(ptxqueuelistcriteria);
      }
  
      public AsptxentryPTXGetQueueBatchDetailResponseAPI PTXGetQueueBatchDetail(Ptxqueuebatchdetailcriteria ptxqueuebatchdetailcriteria)
      {
         return this.adapter.PTXGetQueueBatchDetail(ptxqueuebatchdetailcriteria);
      }
  
      public void PTXQueueDelete(IEnumerable<Ptxqueuedeletecriteria> ptxqueuedeletecriteria)
      {
         this.adapter.PTXQueueDelete(ptxqueuedeletecriteria);
      }
  
      public void PTXQueueProcessing(string cQueueType, int iOrderNo, int iOrderSuf)
      {
         this.adapter.PTXQueueProcessing(cQueueType, iOrderNo, iOrderSuf);
      }
  
      public void PTXQueueStatusChange(AsptxentryPTXQueueStatusChangeRequestAPI AsptxentryPTXQueueStatusChangeRequestAPI)
      {
         this.adapter.PTXQueueStatusChange(AsptxentryPTXQueueStatusChangeRequestAPI);
      }
  
      public IEnumerable<Ptxtranseditresults> PTXTransactionEdit(IEnumerable<Ptxtranseditcriteria> ptxtranseditcriteria)
      {
         return this.adapter.PTXTransactionEdit(ptxtranseditcriteria);
      }
  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  