//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AR.Data.Adapters
{
   using com.infor.sxproxy.arproxy;
   using com.infor.sxproxy.arproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsargroupvalidateselltype;
   using Models.Pdsarcustomerglfetch;
   using Models.Pdsarcustomerglsave;
   using Models.Pdsarsdsave;
   using Models.Pdsarcustomervalidateselltype;
   using Models.Pdsarsc;
   using Models.Pdsarcustomercopy;
   using Models.Pdsargroupcopy;
   using Models.Pdsarshiptocopy;
   using Models.Pdsarsasearch;
   using Models.Pdsarsbbillinglist;
   using Models.Pdsarscavgdaystopay;
   using Models.Pdsarsosearch;
   using Models.Pdsarsoadd;
   using Models.Pdsdnbilaunch;
   using Models.Pdsaremt;
   using Models.Pdsmessaging;
   using Models.Pdssplitpayrowid;
   using Models.Pdssplitpay;
   using Models.Pdsopenitem;
   using Models.Pdsarslload;
   using Models.Pdsaraosfetch;
   using Models.Pdsarsrtfetch;
   using Models.Pdsarsptgetlist;
   using Models.Pdsarspcustpaymenthistorycopy;
   using Models.Pdsarsoccreditcard;
   using Models.Pdsarsogcorpgroupcriteria;
   using Models.Pdsarsogcorpgroup;
   using Models.Pdsarstgetlist;
   using Models.Pdsarstcreateupdate;
   using Models.Pdsarstdelete;
   using Models.Complex;

   public partial class AsarsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private ARProxyAppObject proxyAppObject;
      
      public AsarsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ARProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsarsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsarsetupGroupValidateSellTypeResponseAPI GroupValidateSellType(IEnumerable<Argroupvalidateselltype> argroupvalidateselltype)
      {   
         var result = new AsarsetupGroupValidateSellTypeResponseAPI();
         
         var pdsargroupvalidateselltype = new pdsargroupvalidateselltypeDataSet();
            
         foreach (var obj in argroupvalidateselltype)
         {
             DataRow row = pdsargroupvalidateselltype.ttblargroupvalidateselltype.NewttblargroupvalidateselltypeRow();
             Argroupvalidateselltype.UpdateRowFromArgroupvalidateselltype(ref row, obj);
             pdsargroupvalidateselltype.ttblargroupvalidateselltype.AddttblargroupvalidateselltypeRow((pdsargroupvalidateselltypeDataSet.ttblargroupvalidateselltypeRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GroupValidateSellType - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.GroupValidateSellType(ref pdsContext, ref pdsargroupvalidateselltype, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("GroupValidateSellType - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsargroupvalidateselltype); 
    
         foreach (DataRow row in pdsargroupvalidateselltype.ttblargroupvalidateselltype)
         {
            result.argroupvalidateselltype.Add(Argroupvalidateselltype.BuildArgroupvalidateselltypeFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public bool IsVeraZipInstalledForEnablement()
      {   
          
         string cErrorMessage = string.Empty;
         bool lVeraZipIsInstalled = false;
   
         
         NLogLoggerP.Trace("IsVeraZipInstalledForEnablement - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.IsVeraZipInstalledForEnablement(ref pdsContext, out cErrorMessage, out lVeraZipIsInstalled);
               }
            });
         NLogLoggerP.Info("IsVeraZipInstalledForEnablement - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lVeraZipIsInstalled;
      
      }

      public Arcustomerglfetchresults ARCustomerGLFetch(Arcustomerglfetchcriteria arcustomerglfetchcriteria)
      {   
         var result = new Arcustomerglfetchresults();
         
         var pdsarcustomerglfetch = new pdsarcustomerglfetchDataSet();
            
         DataRow ttblarcustomerglfetchcriteriaCriteria = pdsarcustomerglfetch.ttblarcustomerglfetchcriteria.NewttblarcustomerglfetchcriteriaRow();
         Arcustomerglfetchcriteria.UpdateRowFromArcustomerglfetchcriteria(ref ttblarcustomerglfetchcriteriaCriteria, arcustomerglfetchcriteria);
         pdsarcustomerglfetch.ttblarcustomerglfetchcriteria.AddttblarcustomerglfetchcriteriaRow((pdsarcustomerglfetchDataSet.ttblarcustomerglfetchcriteriaRow)ttblarcustomerglfetchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARCustomerGLFetch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARCustomerGLFetch(ref pdsContext, ref pdsarcustomerglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARCustomerGLFetch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarcustomerglfetch); 
    
         if (pdsarcustomerglfetch.ttblarcustomerglfetchresults.Count > 0) 
         { 
             result = Arcustomerglfetchresults.BuildArcustomerglfetchresultsFromRow(pdsarcustomerglfetch.ttblarcustomerglfetchresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arcustomerglsave> ARCustomerGLSave(IEnumerable<Arcustomerglsave> arcustomerglsave)
      {   
         var results = new List<Arcustomerglsave>();
         
         var pdsarcustomerglsave = new pdsarcustomerglsaveDataSet();
            
         foreach (var obj in arcustomerglsave)
         {
             DataRow row = pdsarcustomerglsave.ttblarcustomerglsave.NewttblarcustomerglsaveRow();
             Arcustomerglsave.UpdateRowFromArcustomerglsave(ref row, obj);
             pdsarcustomerglsave.ttblarcustomerglsave.AddttblarcustomerglsaveRow((pdsarcustomerglsaveDataSet.ttblarcustomerglsaveRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARCustomerGLSave - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARCustomerGLSave(ref pdsContext, ref pdsarcustomerglsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARCustomerGLSave - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarcustomerglsave); 
    
            foreach (DataRow row in pdsarcustomerglsave.ttblarcustomerglsave)
            {
                results.Add(Arcustomerglsave.BuildArcustomerglsaveFromRow(row));
            }
            return results;
        
      }

      public AsarsetupARSDSaveResponseAPI ARSDSave(Arsdsave arsdsave)
      {   
         var result = new AsarsetupARSDSaveResponseAPI();
         
         var pdsarsdsave = new pdsarsdsaveDataSet();
            
         DataRow ttblarsdsaveCriteria = pdsarsdsave.ttblarsdsave.NewttblarsdsaveRow();
         Arsdsave.UpdateRowFromArsdsave(ref ttblarsdsaveCriteria, arsdsave);
         pdsarsdsave.ttblarsdsave.AddttblarsdsaveRow((pdsarsdsaveDataSet.ttblarsdsaveRow)ttblarsdsaveCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSDSave - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSDSave(ref pdsContext, ref pdsarsdsave, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ARSDSave - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsdsave); 
    
         if (pdsarsdsave.ttblarsdsave.Count > 0)
         {
            result.arsdsave = Arsdsave.BuildArsdsaveFromRow(pdsarsdsave.ttblarsdsave[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public string ValidateGLAccount(string cGLAccount)
      {   
          
         string cErrorMessage = string.Empty;
         string cGLAccountDesc = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateGLAccount - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ValidateGLAccount(ref pdsContext,  cGLAccount, out cErrorMessage, out cGLAccountDesc);
               }
            });
         NLogLoggerP.Info("ValidateGLAccount - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cGLAccountDesc;
      
      }

      public AsarsetupCustomerValidateSellTypeResponseAPI CustomerValidateSellType(IEnumerable<Arcustomervalidateselltype> arcustomervalidateselltype)
      {   
         var result = new AsarsetupCustomerValidateSellTypeResponseAPI();
         
         var pdsarcustomervalidateselltype = new pdsarcustomervalidateselltypeDataSet();
            
         foreach (var obj in arcustomervalidateselltype)
         {
             DataRow row = pdsarcustomervalidateselltype.ttblarcustomervalidateselltype.NewttblarcustomervalidateselltypeRow();
             Arcustomervalidateselltype.UpdateRowFromArcustomervalidateselltype(ref row, obj);
             pdsarcustomervalidateselltype.ttblarcustomervalidateselltype.AddttblarcustomervalidateselltypeRow((pdsarcustomervalidateselltypeDataSet.ttblarcustomervalidateselltypeRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CustomerValidateSellType - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.CustomerValidateSellType(ref pdsContext, ref pdsarcustomervalidateselltype, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("CustomerValidateSellType - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarcustomervalidateselltype); 
    
         foreach (DataRow row in pdsarcustomervalidateselltype.ttblarcustomervalidateselltype)
         {
            result.arcustomervalidateselltype.Add(Arcustomervalidateselltype.BuildArcustomervalidateselltypeFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void CustomerSaveUpateShipTos(Arsc arsc)
      {   
         
         var pdsarsc = new pdsarscDataSet();
            
         DataRow ttblarscCriteria = pdsarsc.ttblarsc.NewttblarscRow();
         Arsc.UpdateRowFromArsc(ref ttblarscCriteria, arsc);
         pdsarsc.ttblarsc.AddttblarscRow((pdsarscDataSet.ttblarscRow)ttblarscCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CustomerSaveUpateShipTos - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.CustomerSaveUpateShipTos(ref pdsContext, ref pdsarsc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CustomerSaveUpateShipTos - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsc);
      }

      public IEnumerable<Arcustomercopy> ARCustomerCopy(IEnumerable<Arcustomercopy> arcustomercopy)
      {   
         var results = new List<Arcustomercopy>();
         
         var pdsarcustomercopy = new pdsarcustomercopyDataSet();
            
         foreach (var obj in arcustomercopy)
         {
             DataRow row = pdsarcustomercopy.ttblarcustomercopy.NewttblarcustomercopyRow();
             Arcustomercopy.UpdateRowFromArcustomercopy(ref row, obj);
             pdsarcustomercopy.ttblarcustomercopy.AddttblarcustomercopyRow((pdsarcustomercopyDataSet.ttblarcustomercopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARCustomerCopy - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARCustomerCopy(ref pdsContext, ref pdsarcustomercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARCustomerCopy - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarcustomercopy); 
    
            foreach (DataRow row in pdsarcustomercopy.ttblarcustomercopy)
            {
                results.Add(Arcustomercopy.BuildArcustomercopyFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Argroupcopy> ARGroupCopy(IEnumerable<Argroupcopy> argroupcopy)
      {   
         var results = new List<Argroupcopy>();
         
         var pdsargroupcopy = new pdsargroupcopyDataSet();
            
         foreach (var obj in argroupcopy)
         {
             DataRow row = pdsargroupcopy.ttblargroupcopy.NewttblargroupcopyRow();
             Argroupcopy.UpdateRowFromArgroupcopy(ref row, obj);
             pdsargroupcopy.ttblargroupcopy.AddttblargroupcopyRow((pdsargroupcopyDataSet.ttblargroupcopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARGroupCopy - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARGroupCopy(ref pdsContext, ref pdsargroupcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARGroupCopy - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsargroupcopy); 
    
            foreach (DataRow row in pdsargroupcopy.ttblargroupcopy)
            {
                results.Add(Argroupcopy.BuildArgroupcopyFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Arshiptocopy> ARShipToCopy(IEnumerable<Arshiptocopy> arshiptocopy)
      {   
         var results = new List<Arshiptocopy>();
         
         var pdsarshiptocopy = new pdsarshiptocopyDataSet();
            
         foreach (var obj in arshiptocopy)
         {
             DataRow row = pdsarshiptocopy.ttblarshiptocopy.NewttblarshiptocopyRow();
             Arshiptocopy.UpdateRowFromArshiptocopy(ref row, obj);
             pdsarshiptocopy.ttblarshiptocopy.AddttblarshiptocopyRow((pdsarshiptocopyDataSet.ttblarshiptocopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARShipToCopy - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARShipToCopy(ref pdsContext, ref pdsarshiptocopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARShipToCopy - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarshiptocopy); 
    
            foreach (DataRow row in pdsarshiptocopy.ttblarshiptocopy)
            {
                results.Add(Arshiptocopy.BuildArshiptocopyFromRow(row));
            }
            return results;
        
      }

      public decimal ARShipToCalcEstCompletion(decimal dSalesAmt, decimal dLienPreAmt)
      {   
          
         decimal dEstCompletion = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARShipToCalcEstCompletion - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARShipToCalcEstCompletion(ref pdsContext,  dSalesAmt,  dLienPreAmt, out dEstCompletion, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARShipToCalcEstCompletion - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return dEstCompletion;
      
      }

      public IEnumerable<Arsasearchresults> ARSASearch(decimal pvCustno)
      {   
         var results = new List<Arsasearchresults>();
         
         var pdsarsasearch = new pdsarsasearchDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSASearch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSASearch(ref pdsContext,  pvCustno, out pdsarsasearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSASearch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsasearch); 
    
            foreach (DataRow row in pdsarsasearch.ttblarsasearchresults)
            {
                results.Add(Arsasearchresults.BuildArsasearchresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Arsbbillinglistresults> ARSBBillingList(Arsbbillinglistcriteria arsbbillinglistcriteria)
      {   
         var results = new List<Arsbbillinglistresults>();
         
         var pdsarsbbillinglist = new pdsarsbbillinglistDataSet();
            
         DataRow ttblarsbbillinglistcriteriaCriteria = pdsarsbbillinglist.ttblarsbbillinglistcriteria.NewttblarsbbillinglistcriteriaRow();
         Arsbbillinglistcriteria.UpdateRowFromArsbbillinglistcriteria(ref ttblarsbbillinglistcriteriaCriteria, arsbbillinglistcriteria);
         pdsarsbbillinglist.ttblarsbbillinglistcriteria.AddttblarsbbillinglistcriteriaRow((pdsarsbbillinglistDataSet.ttblarsbbillinglistcriteriaRow)ttblarsbbillinglistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSBBillingList - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSBBillingList(ref pdsContext, ref pdsarsbbillinglist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSBBillingList - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsbbillinglist); 
    
            foreach (DataRow row in pdsarsbbillinglist.ttblarsbbillinglistresults)
            {
                results.Add(Arsbbillinglistresults.BuildArsbbillinglistresultsFromRow(row));
            }
            return results;
        
      }

      public Arscavgdaystopayresults ARSCavgdaystopay(Arscavgdaystopaycriteria arscavgdaystopaycriteria)
      {   
         var result = new Arscavgdaystopayresults();
         
         var pdsarscavgdaystopay = new pdsarscavgdaystopayDataSet();
            
         DataRow ttblarscavgdaystopaycriteriaCriteria = pdsarscavgdaystopay.ttblarscavgdaystopaycriteria.NewttblarscavgdaystopaycriteriaRow();
         Arscavgdaystopaycriteria.UpdateRowFromArscavgdaystopaycriteria(ref ttblarscavgdaystopaycriteriaCriteria, arscavgdaystopaycriteria);
         pdsarscavgdaystopay.ttblarscavgdaystopaycriteria.AddttblarscavgdaystopaycriteriaRow((pdsarscavgdaystopayDataSet.ttblarscavgdaystopaycriteriaRow)ttblarscavgdaystopaycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSCavgdaystopay - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSCavgdaystopay(ref pdsContext, ref pdsarscavgdaystopay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSCavgdaystopay - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarscavgdaystopay); 
    
         if (pdsarscavgdaystopay.ttblarscavgdaystopayresults.Count > 0) 
         { 
             result = Arscavgdaystopayresults.BuildArscavgdaystopayresultsFromRow(pdsarscavgdaystopay.ttblarscavgdaystopayresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arsosearchresults> ARSOsearch(Arsosearchcriteria arsosearchcriteria)
      {   
         var results = new List<Arsosearchresults>();
         
         var pdsarsosearch = new pdsarsosearchDataSet();
            
         DataRow ttblarsosearchcriteriaCriteria = pdsarsosearch.ttblarsosearchcriteria.NewttblarsosearchcriteriaRow();
         Arsosearchcriteria.UpdateRowFromArsosearchcriteria(ref ttblarsosearchcriteriaCriteria, arsosearchcriteria);
         pdsarsosearch.ttblarsosearchcriteria.AddttblarsosearchcriteriaRow((pdsarsosearchDataSet.ttblarsosearchcriteriaRow)ttblarsosearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSOsearch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOsearch(ref pdsContext, ref pdsarsosearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOsearch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsosearch); 
    
            foreach (DataRow row in pdsarsosearch.ttblarsosearchresults)
            {
                results.Add(Arsosearchresults.BuildArsosearchresultsFromRow(row));
            }
            return results;
        
      }

      public Arsoaddresults ARSOadd(Arsoaddcriteria arsoaddcriteria)
      {   
         var result = new Arsoaddresults();
         
         var pdsarsoadd = new pdsarsoaddDataSet();
            
         DataRow ttblarsoaddcriteriaCriteria = pdsarsoadd.ttblarsoaddcriteria.NewttblarsoaddcriteriaRow();
         Arsoaddcriteria.UpdateRowFromArsoaddcriteria(ref ttblarsoaddcriteriaCriteria, arsoaddcriteria);
         pdsarsoadd.ttblarsoaddcriteria.AddttblarsoaddcriteriaRow((pdsarsoaddDataSet.ttblarsoaddcriteriaRow)ttblarsoaddcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSOadd - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOadd(ref pdsContext, ref pdsarsoadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOadd - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsoadd); 
    
         if (pdsarsoadd.ttblarsoaddresults.Count > 0) 
         { 
             result = Arsoaddresults.BuildArsoaddresultsFromRow(pdsarsoadd.ttblarsoaddresults[0]);
         } 
              
          
         return result;
          
      }

      public bool DNBiEnabled(decimal dCustNo)
      {   
          
         string cErrorMessage = string.Empty;
         bool lEnabled = false;
   
         
         NLogLoggerP.Trace("DNBiEnabled - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.DNBiEnabled(ref pdsContext,  dCustNo, out cErrorMessage, out lEnabled);
               }
            });
         NLogLoggerP.Info("DNBiEnabled - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lEnabled;
      
      }

      public Dnbilaunchresponse DNBiLaunch(Dnbilaunchrequest dnbilaunchrequest)
      {   
         var result = new Dnbilaunchresponse();
         
         var pdsdnbilaunch = new pdsdnbilaunchDataSet();
            
         DataRow ttbldnbilaunchrequestCriteria = pdsdnbilaunch.ttbldnbilaunchrequest.NewttbldnbilaunchrequestRow();
         Dnbilaunchrequest.UpdateRowFromDnbilaunchrequest(ref ttbldnbilaunchrequestCriteria, dnbilaunchrequest);
         pdsdnbilaunch.ttbldnbilaunchrequest.AddttbldnbilaunchrequestRow((pdsdnbilaunchDataSet.ttbldnbilaunchrequestRow)ttbldnbilaunchrequestCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DNBiLaunch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.DNBiLaunch(ref pdsContext, ref pdsdnbilaunch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DNBiLaunch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdnbilaunch); 
    
         if (pdsdnbilaunch.ttbldnbilaunchresponse.Count > 0) 
         { 
             result = Dnbilaunchresponse.BuildDnbilaunchresponseFromRow(pdsdnbilaunch.ttbldnbilaunchresponse[0]);
         } 
              
          
         return result;
          
      }

      public AsarsetupAREMTRetrieveResponseAPI AREMTRetrieve(Aremtcriteria aremtcriteria)
      {   
         var result = new AsarsetupAREMTRetrieveResponseAPI();
         
         var pdsaremt = new pdsaremtDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblaremtcriteriaCriteria = pdsaremt.ttblaremtcriteria.NewttblaremtcriteriaRow();
         Aremtcriteria.UpdateRowFromAremtcriteria(ref ttblaremtcriteriaCriteria, aremtcriteria);
         pdsaremt.ttblaremtcriteria.AddttblaremtcriteriaRow((pdsaremtDataSet.ttblaremtcriteriaRow)ttblaremtcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AREMTRetrieve - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.AREMTRetrieve(ref pdsContext, ref pdsaremt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AREMTRetrieve - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaremt); 
    
         foreach (DataRow row in pdsaremt.ttblaremtresults)
         {
            result.aremtresults.Add(Aremtresults.BuildAremtresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Splitpayrowid SplitPayPreValidate(Splitpayrowid splitpayrowid)
      {   
         var result = new Splitpayrowid();
         
         var pdssplitpayrowid = new pdssplitpayrowidDataSet();
            
         DataRow ttblsplitpayrowidCriteria = pdssplitpayrowid.ttblsplitpayrowid.NewttblsplitpayrowidRow();
         Splitpayrowid.UpdateRowFromSplitpayrowid(ref ttblsplitpayrowidCriteria, splitpayrowid);
         pdssplitpayrowid.ttblsplitpayrowid.AddttblsplitpayrowidRow((pdssplitpayrowidDataSet.ttblsplitpayrowidRow)ttblsplitpayrowidCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SplitPayPreValidate - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.SplitPayPreValidate(ref pdsContext, ref pdssplitpayrowid, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SplitPayPreValidate - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssplitpayrowid); 
    
         if (pdssplitpayrowid.ttblsplitpayrowid.Count > 0) 
         { 
             result = Splitpayrowid.BuildSplitpayrowidFromRow(pdssplitpayrowid.ttblsplitpayrowid[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Splitpay> SplitPayLoad(AsarsetupSplitPayLoadRequestAPI AsarsetupSplitPayLoadRequestAPI)
      {   
         var results = new List<Splitpay>();
         
         var pdssplitpayrowid = new pdssplitpayrowidDataSet();
            
         var pdssplitpay = new pdssplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsplitpayrowidRow = pdssplitpayrowid.ttblsplitpayrowid.NewttblsplitpayrowidRow();
         Splitpayrowid.UpdateRowFromSplitpayrowid(ref ttblsplitpayrowidRow, AsarsetupSplitPayLoadRequestAPI.splitpayrowid);
         pdssplitpayrowid.ttblsplitpayrowid.AddttblsplitpayrowidRow((pdssplitpayrowidDataSet.ttblsplitpayrowidRow)ttblsplitpayrowidRow);
          
         var  iPayments = AsarsetupSplitPayLoadRequestAPI.iPayments;
            
         var  iDays = AsarsetupSplitPayLoadRequestAPI.iDays;
            
         
         NLogLoggerP.Trace("SplitPayLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.SplitPayLoad(ref pdsContext,  iPayments,  iDays,  pdssplitpayrowid, out pdssplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SplitPayLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssplitpayrowid); 
    
            foreach (DataRow row in pdssplitpay.ttblsplitpay)
            {
                results.Add(Splitpay.BuildSplitpayFromRow(row));
            }
            return results;
        
      }

      public void SplitPayValidate(AsarsetupSplitPayValidateRequestAPI AsarsetupSplitPayValidateRequestAPI)
      {   
         
         var pdssplitpayrowid = new pdssplitpayrowidDataSet();
            
         var pdssplitpay = new pdssplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarsetupSplitPayValidateRequestAPI.splitpay)
         {
            DataRow ttblsplitpayRow = pdssplitpay.ttblsplitpay.NewttblsplitpayRow();
            Splitpay.UpdateRowFromSplitpay(ref ttblsplitpayRow, obj);
            pdssplitpay.ttblsplitpay.AddttblsplitpayRow((pdssplitpayDataSet.ttblsplitpayRow)ttblsplitpayRow);
         }
          
         DataRow ttblsplitpayrowidRow = pdssplitpayrowid.ttblsplitpayrowid.NewttblsplitpayrowidRow();
         Splitpayrowid.UpdateRowFromSplitpayrowid(ref ttblsplitpayrowidRow, AsarsetupSplitPayValidateRequestAPI.splitpayrowid);
         pdssplitpayrowid.ttblsplitpayrowid.AddttblsplitpayrowidRow((pdssplitpayrowidDataSet.ttblsplitpayrowidRow)ttblsplitpayrowidRow);
          
         
         NLogLoggerP.Trace("SplitPayValidate - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.SplitPayValidate(ref pdsContext,  pdssplitpayrowid,  pdssplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SplitPayValidate - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssplitpayrowid);
      }

      public void SplitPayUpdate(AsarsetupSplitPayUpdateRequestAPI AsarsetupSplitPayUpdateRequestAPI)
      {   
         
         var pdssplitpayrowid = new pdssplitpayrowidDataSet();
            
         var pdssplitpay = new pdssplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarsetupSplitPayUpdateRequestAPI.splitpay)
         {
            DataRow ttblsplitpayRow = pdssplitpay.ttblsplitpay.NewttblsplitpayRow();
            Splitpay.UpdateRowFromSplitpay(ref ttblsplitpayRow, obj);
            pdssplitpay.ttblsplitpay.AddttblsplitpayRow((pdssplitpayDataSet.ttblsplitpayRow)ttblsplitpayRow);
         }
          
         DataRow ttblsplitpayrowidRow = pdssplitpayrowid.ttblsplitpayrowid.NewttblsplitpayrowidRow();
         Splitpayrowid.UpdateRowFromSplitpayrowid(ref ttblsplitpayrowidRow, AsarsetupSplitPayUpdateRequestAPI.splitpayrowid);
         pdssplitpayrowid.ttblsplitpayrowid.AddttblsplitpayrowidRow((pdssplitpayrowidDataSet.ttblsplitpayrowidRow)ttblsplitpayrowidRow);
          
         
         NLogLoggerP.Trace("SplitPayUpdate - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.SplitPayUpdate(ref pdsContext,  pdssplitpayrowid,  pdssplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SplitPayUpdate - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssplitpayrowid);
      }

      public Openitem OpenItemLoad(Openitem openitem)
      {   
         var result = new Openitem();
         
         var pdsopenitem = new pdsopenitemDataSet();
            
         DataRow ttblopenitemCriteria = pdsopenitem.ttblopenitem.NewttblopenitemRow();
         Openitem.UpdateRowFromOpenitem(ref ttblopenitemCriteria, openitem);
         pdsopenitem.ttblopenitem.AddttblopenitemRow((pdsopenitemDataSet.ttblopenitemRow)ttblopenitemCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OpenItemLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.OpenItemLoad(ref pdsContext, ref pdsopenitem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OpenItemLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsopenitem); 
    
         if (pdsopenitem.ttblopenitem.Count > 0) 
         { 
             result = Openitem.BuildOpenitemFromRow(pdsopenitem.ttblopenitem[0]);
         } 
              
          
         return result;
          
      }

      public void OpenItemSave(Openitem openitem)
      {   
         
         var pdsopenitem = new pdsopenitemDataSet();
            
         DataRow ttblopenitemCriteria = pdsopenitem.ttblopenitem.NewttblopenitemRow();
         Openitem.UpdateRowFromOpenitem(ref ttblopenitemCriteria, openitem);
         pdsopenitem.ttblopenitem.AddttblopenitemRow((pdsopenitemDataSet.ttblopenitemRow)ttblopenitemCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OpenItemSave - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.OpenItemSave(ref pdsContext,  pdsopenitem, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OpenItemSave - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsopenitem);
      }

      public IEnumerable<Arslloadresults> ARSLLoad(Arslloadcriteria arslloadcriteria)
      {   
         var results = new List<Arslloadresults>();
         
         var pdsarslload = new pdsarslloadDataSet();
            
         DataRow ttblarslloadcriteriaCriteria = pdsarslload.ttblarslloadcriteria.NewttblarslloadcriteriaRow();
         Arslloadcriteria.UpdateRowFromArslloadcriteria(ref ttblarslloadcriteriaCriteria, arslloadcriteria);
         pdsarslload.ttblarslloadcriteria.AddttblarslloadcriteriaRow((pdsarslloadDataSet.ttblarslloadcriteriaRow)ttblarslloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSLLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSLLoad(ref pdsContext, ref pdsarslload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSLLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarslload); 
    
            foreach (DataRow row in pdsarslload.ttblarslloadresults)
            {
                results.Add(Arslloadresults.BuildArslloadresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Araosresults> ARAOSFetch(Araoscriteria araoscriteria)
      {   
         var results = new List<Araosresults>();
         
         var pdsaraosfetch = new pdsaraosfetchDataSet();
            
         DataRow ttblaraoscriteriaCriteria = pdsaraosfetch.ttblaraoscriteria.NewttblaraoscriteriaRow();
         Araoscriteria.UpdateRowFromAraoscriteria(ref ttblaraoscriteriaCriteria, araoscriteria);
         pdsaraosfetch.ttblaraoscriteria.AddttblaraoscriteriaRow((pdsaraosfetchDataSet.ttblaraoscriteriaRow)ttblaraoscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARAOSFetch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARAOSFetch(ref pdsContext, ref pdsaraosfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARAOSFetch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaraosfetch); 
    
            foreach (DataRow row in pdsaraosfetch.ttblaraosresults)
            {
                results.Add(Araosresults.BuildAraosresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Arsrtresults> ARSRTFetch(Arsrtcriteria arsrtcriteria)
      {   
         var results = new List<Arsrtresults>();
         
         var pdsarsrtfetch = new pdsarsrtfetchDataSet();
            
         DataRow ttblarsrtcriteriaCriteria = pdsarsrtfetch.ttblarsrtcriteria.NewttblarsrtcriteriaRow();
         Arsrtcriteria.UpdateRowFromArsrtcriteria(ref ttblarsrtcriteriaCriteria, arsrtcriteria);
         pdsarsrtfetch.ttblarsrtcriteria.AddttblarsrtcriteriaRow((pdsarsrtfetchDataSet.ttblarsrtcriteriaRow)ttblarsrtcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSRTFetch - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSRTFetch(ref pdsContext, ref pdsarsrtfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSRTFetch - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsrtfetch); 
    
            foreach (DataRow row in pdsarsrtfetch.ttblarsrtresults)
            {
                results.Add(Arsrtresults.BuildArsrtresultsFromRow(row));
            }
            return results;
        
      }

      public AsarsetupARSPTGetListResponseAPI ARSPTGetList(Arsptgetlistcriteria arsptgetlistcriteria)
      {   
         var result = new AsarsetupARSPTGetListResponseAPI();
         
         var pdsarsptgetlist = new pdsarsptgetlistDataSet();
            
         DataRow ttblarsptgetlistcriteriaCriteria = pdsarsptgetlist.ttblarsptgetlistcriteria.NewttblarsptgetlistcriteriaRow();
         Arsptgetlistcriteria.UpdateRowFromArsptgetlistcriteria(ref ttblarsptgetlistcriteriaCriteria, arsptgetlistcriteria);
         pdsarsptgetlist.ttblarsptgetlistcriteria.AddttblarsptgetlistcriteriaRow((pdsarsptgetlistDataSet.ttblarsptgetlistcriteriaRow)ttblarsptgetlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ARSPTGetList - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSPTGetList(ref pdsContext, ref pdsarsptgetlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ARSPTGetList - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsptgetlist); 
    
         foreach (DataRow row in pdsarsptgetlist.ttblarsptgetlistresults)
         {
            result.arsptgetlistresults.Add(Arsptgetlistresults.BuildArsptgetlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Arspcustpaymenthistorycopy ARSPCustPaymentHistoryCopy(Arspcustpaymenthistorycopy arspcustpaymenthistorycopy)
      {   
         var result = new Arspcustpaymenthistorycopy();
         
         var pdsarspcustpaymenthistorycopy = new pdsarspcustpaymenthistorycopyDataSet();
            
         DataRow ttblarspcustpaymenthistorycopyCriteria = pdsarspcustpaymenthistorycopy.ttblarspcustpaymenthistorycopy.NewttblarspcustpaymenthistorycopyRow();
         Arspcustpaymenthistorycopy.UpdateRowFromArspcustpaymenthistorycopy(ref ttblarspcustpaymenthistorycopyCriteria, arspcustpaymenthistorycopy);
         pdsarspcustpaymenthistorycopy.ttblarspcustpaymenthistorycopy.AddttblarspcustpaymenthistorycopyRow((pdsarspcustpaymenthistorycopyDataSet.ttblarspcustpaymenthistorycopyRow)ttblarspcustpaymenthistorycopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSPCustPaymentHistoryCopy - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSPCustPaymentHistoryCopy(ref pdsContext, ref pdsarspcustpaymenthistorycopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSPCustPaymentHistoryCopy - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarspcustpaymenthistorycopy); 
    
         if (pdsarspcustpaymenthistorycopy.ttblarspcustpaymenthistorycopy.Count > 0) 
         { 
             result = Arspcustpaymenthistorycopy.BuildArspcustpaymenthistorycopyFromRow(pdsarspcustpaymenthistorycopy.ttblarspcustpaymenthistorycopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arsoccreditcard> ARSOCCreditCardLoad(AsarsetupARSOCCreditCardLoadRequestAPI AsarsetupARSOCCreditCardLoadRequestAPI)
      {   
         var results = new List<Arsoccreditcard>();
         
         var pdsarsoccreditcard = new pdsarsoccreditcardDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  dCustno = AsarsetupARSOCCreditCardLoadRequestAPI.dCustno;
            
         var  cShipTo = AsarsetupARSOCCreditCardLoadRequestAPI.cShipTo;
            
         var  cMediaCd = AsarsetupARSOCCreditCardLoadRequestAPI.cMediaCd;
            
         
         NLogLoggerP.Trace("ARSOCCreditCardLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOCCreditCardLoad(ref pdsContext,  dCustno,  cShipTo,  cMediaCd, out pdsarsoccreditcard, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOCCreditCardLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsoccreditcard); 
    
            foreach (DataRow row in pdsarsoccreditcard.ttblarsoccreditcard)
            {
                results.Add(Arsoccreditcard.BuildArsoccreditcardFromRow(row));
            }
            return results;
        
      }

      public AsarsetupARSOCCreditCardAddResponseAPI ARSOCCreditCardAdd(AsarsetupARSOCCreditCardAddRequestAPI AsarsetupARSOCCreditCardAddRequestAPI)
      {   
         var result = new AsarsetupARSOCCreditCardAddResponseAPI();
         
         var pdsarsoccreditcard = new pdsarsoccreditcardDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         var  dCustno = AsarsetupARSOCCreditCardAddRequestAPI.dCustno;
            
         var  cShipTo = AsarsetupARSOCCreditCardAddRequestAPI.cShipTo;
            
         var  cMediaCd = AsarsetupARSOCCreditCardAddRequestAPI.cMediaCd;
            
         
         NLogLoggerP.Trace("ARSOCCreditCardAdd - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOCCreditCardAdd(ref pdsContext,  dCustno,  cShipTo,  cMediaCd, out pdsarsoccreditcard, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ARSOCCreditCardAdd - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsoccreditcard); 
    
         if (pdsarsoccreditcard.ttblarsoccreditcard.Count > 0)
         {
            result.arsoccreditcard = Arsoccreditcard.BuildArsoccreditcardFromRow(pdsarsoccreditcard.ttblarsoccreditcard[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void ARSOCCreditCardAddValidate(AsarsetupARSOCCreditCardAddValidateRequestAPI AsarsetupARSOCCreditCardAddValidateRequestAPI)
      {   
         
         string cErrorMessage = string.Empty;
   
         var  dCustno = AsarsetupARSOCCreditCardAddValidateRequestAPI.dCustno;
            
         var  cShipTo = AsarsetupARSOCCreditCardAddValidateRequestAPI.cShipTo;
            
         var  cMediaCd = AsarsetupARSOCCreditCardAddValidateRequestAPI.cMediaCd;
            
         
         NLogLoggerP.Trace("ARSOCCreditCardAddValidate - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOCCreditCardAddValidate(ref pdsContext,  dCustno,  cShipTo,  cMediaCd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOCCreditCardAddValidate - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Arsoccreditcard ARSOCCreditCardDelete(Arsoccreditcard arsoccreditcard)
      {   
         var result = new Arsoccreditcard();
         
         var pdsarsoccreditcard = new pdsarsoccreditcardDataSet();
            
         DataRow ttblarsoccreditcardCriteria = pdsarsoccreditcard.ttblarsoccreditcard.NewttblarsoccreditcardRow();
         Arsoccreditcard.UpdateRowFromArsoccreditcard(ref ttblarsoccreditcardCriteria, arsoccreditcard);
         pdsarsoccreditcard.ttblarsoccreditcard.AddttblarsoccreditcardRow((pdsarsoccreditcardDataSet.ttblarsoccreditcardRow)ttblarsoccreditcardCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSOCCreditCardDelete - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOCCreditCardDelete(ref pdsContext, ref pdsarsoccreditcard, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOCCreditCardDelete - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsoccreditcard); 
    
         if (pdsarsoccreditcard.ttblarsoccreditcard.Count > 0) 
         { 
             result = Arsoccreditcard.BuildArsoccreditcardFromRow(pdsarsoccreditcard.ttblarsoccreditcard[0]);
         } 
              
          
         return result;
          
      }

      public Arsoccreditcard ARSOCCreditCardModify(Arsoccreditcard arsoccreditcard)
      {   
         var result = new Arsoccreditcard();
         
         var pdsarsoccreditcard = new pdsarsoccreditcardDataSet();
            
         DataRow ttblarsoccreditcardCriteria = pdsarsoccreditcard.ttblarsoccreditcard.NewttblarsoccreditcardRow();
         Arsoccreditcard.UpdateRowFromArsoccreditcard(ref ttblarsoccreditcardCriteria, arsoccreditcard);
         pdsarsoccreditcard.ttblarsoccreditcard.AddttblarsoccreditcardRow((pdsarsoccreditcardDataSet.ttblarsoccreditcardRow)ttblarsoccreditcardCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSOCCreditCardModify - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOCCreditCardModify(ref pdsContext, ref pdsarsoccreditcard, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOCCreditCardModify - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsoccreditcard); 
    
         if (pdsarsoccreditcard.ttblarsoccreditcard.Count > 0) 
         { 
             result = Arsoccreditcard.BuildArsoccreditcardFromRow(pdsarsoccreditcard.ttblarsoccreditcard[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arsogcorpgroup> ARSOGCorpGroupLoad(Arsogcorpgroupcriteria arsogcorpgroupcriteria)
      {   
         var results = new List<Arsogcorpgroup>();
         
         var pdsarsogcorpgroupcriteria = new pdsarsogcorpgroupcriteriaDataSet();
            
         var pdsarsogcorpgroup = new pdsarsogcorpgroupDataSet();
            
         DataRow ttblarsogcorpgroupcriteriaCriteria = pdsarsogcorpgroupcriteria.ttblarsogcorpgroupcriteria.NewttblarsogcorpgroupcriteriaRow();
         Arsogcorpgroupcriteria.UpdateRowFromArsogcorpgroupcriteria(ref ttblarsogcorpgroupcriteriaCriteria, arsogcorpgroupcriteria);
         pdsarsogcorpgroupcriteria.ttblarsogcorpgroupcriteria.AddttblarsogcorpgroupcriteriaRow((pdsarsogcorpgroupcriteriaDataSet.ttblarsogcorpgroupcriteriaRow)ttblarsogcorpgroupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSOGCorpGroupLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSOGCorpGroupLoad(ref pdsContext,  pdsarsogcorpgroupcriteria, out pdsarsogcorpgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSOGCorpGroupLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsogcorpgroupcriteria); 
    
            foreach (DataRow row in pdsarsogcorpgroup.ttblarsogcorpgroup)
            {
                results.Add(Arsogcorpgroup.BuildArsogcorpgroupFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> CustomerSaveUpdateWarnings(Arsc arsc)
      {   
         var results = new List<Messaging>();
         
         var pdsarsc = new pdsarscDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblarscCriteria = pdsarsc.ttblarsc.NewttblarscRow();
         Arsc.UpdateRowFromArsc(ref ttblarscCriteria, arsc);
         pdsarsc.ttblarsc.AddttblarscRow((pdsarscDataSet.ttblarscRow)ttblarscCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CustomerSaveUpdateWarnings - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.CustomerSaveUpdateWarnings(ref pdsContext,  pdsarsc, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CustomerSaveUpdateWarnings - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarsc); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Arstgetlistresults> ARSTGetList(Arstgetlistcriteria arstgetlistcriteria)
      {   
         var results = new List<Arstgetlistresults>();
         
         var pdsarstgetlist = new pdsarstgetlistDataSet();
            
         DataRow ttblarstgetlistcriteriaCriteria = pdsarstgetlist.ttblarstgetlistcriteria.NewttblarstgetlistcriteriaRow();
         Arstgetlistcriteria.UpdateRowFromArstgetlistcriteria(ref ttblarstgetlistcriteriaCriteria, arstgetlistcriteria);
         pdsarstgetlist.ttblarstgetlistcriteria.AddttblarstgetlistcriteriaRow((pdsarstgetlistDataSet.ttblarstgetlistcriteriaRow)ttblarstgetlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSTGetList - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSTGetList(ref pdsContext, ref pdsarstgetlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSTGetList - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarstgetlist); 
    
            foreach (DataRow row in pdsarstgetlist.ttblarstgetlistresults)
            {
                results.Add(Arstgetlistresults.BuildArstgetlistresultsFromRow(row));
            }
            return results;
        
      }

      public Arstcreateupdate ARSTCreateUpdate(Arstcreateupdate arstcreateupdate)
      {   
         var result = new Arstcreateupdate();
         
         var pdsarstcreateupdate = new pdsarstcreateupdateDataSet();
            
         DataRow ttblarstcreateupdateCriteria = pdsarstcreateupdate.ttblarstcreateupdate.NewttblarstcreateupdateRow();
         Arstcreateupdate.UpdateRowFromArstcreateupdate(ref ttblarstcreateupdateCriteria, arstcreateupdate);
         pdsarstcreateupdate.ttblarstcreateupdate.AddttblarstcreateupdateRow((pdsarstcreateupdateDataSet.ttblarstcreateupdateRow)ttblarstcreateupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSTCreateUpdate - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSTCreateUpdate(ref pdsContext, ref pdsarstcreateupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSTCreateUpdate - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarstcreateupdate); 
    
         if (pdsarstcreateupdate.ttblarstcreateupdate.Count > 0) 
         { 
             result = Arstcreateupdate.BuildArstcreateupdateFromRow(pdsarstcreateupdate.ttblarstcreateupdate[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> ARSTDelete(IEnumerable<Arstdelete> arstdelete)
      {   
         var results = new List<Messaging>();
         
         var pdsarstdelete = new pdsarstdeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in arstdelete)
         {
             DataRow row = pdsarstdelete.ttblarstdelete.NewttblarstdeleteRow();
             Arstdelete.UpdateRowFromArstdelete(ref row, obj);
             pdsarstdelete.ttblarstdelete.AddttblarstdeleteRow((pdsarstdeleteDataSet.ttblarstdeleteRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSTDelete - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSTDelete(ref pdsContext,  pdsarstdelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSTDelete - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarstdelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Arstcreateupdate ARSTLoad(string pvRowpointer)
      {   
         var result = new Arstcreateupdate();
         
         var pdsarstcreateupdate = new pdsarstcreateupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARSTLoad - Asarsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarsetupproxy = this.proxyAppObject.CreatePO_asarsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarsetupproxy.ARSTLoad(ref pdsContext,  pvRowpointer, out pdsarstcreateupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARSTLoad - Asarsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarstcreateupdate); 
    
         if (pdsarstcreateupdate.ttblarstcreateupdate.Count > 0) 
         { 
             result = Arstcreateupdate.BuildArstcreateupdateFromRow(pdsarstcreateupdate.ttblarstcreateupdate[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  