//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AR.Data.Adapters
{
   using com.infor.sxproxy.arproxy;
   using com.infor.sxproxy.arproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsarsc;
   using Models.Pdsarcustomerlookup;
   using Models.Complex;

   public partial class ArscAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsarsc";
      private ARProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> arscTableControlKey;
		private readonly Tuple<string, string> arsc_customerbalanceTableControlKey;
      private pdsarscDataSet dataSet;
        
      public ArscAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ARProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsarscDataSet() { DataSetName = DataSetName };
            this.arscTableControlKey = this.dataSet.ttblarsc.GetTableControlParametersKey();
            this.arsc_customerbalanceTableControlKey = this.dataSet.ttblarsc_customerbalance.GetTableControlParametersKey();
            if (!this.tempTableControlParameters.ContainsKey(this.arscTableControlKey))
            {
               this.CreateTableControlParameters(this.arscTableControlKey);
            }
            if (!this.tempTableControlParameters.ContainsKey(this.arsc_customerbalanceTableControlKey))
            {
               this.CreateTableControlParameters(this.arsc_customerbalanceTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in ArscAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, bool fillMode, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Arscproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, fillMode, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poArscproxy = this.proxyAppObject.CreatePO_arscproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poArscproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Arscproxy - After Call");
      }
      
      private void SetAndFetch(string where, bool fillMode, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.arscTableControlKey, where, batchsize, fldList);
         this.SetFetchWhereParameters(this.arsc_customerbalanceTableControlKey, fillMode);
         this.SetTableParametersOnContext(this.arscTableControlKey, true);
         this.SetTableParametersOnContext(this.arsc_customerbalanceTableControlKey);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Arscproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poArscproxy = this.proxyAppObject.CreatePO_arscproxy())
               {
                  this.SetRequiredContextParameters();
                  poArscproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Arscproxy - After Call");
      }
   

      public Arsc GetByRowId(string rowId, bool fillMode, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fillMode, fldList);
         Arsc arsc = null;
         if (row != null)
         {
             arsc = this.BuildFromRow(row);
         }
         return arsc;
      }
   
      private DataRow GetRowByRowId(string rowId, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(arsc) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), fillMode, 1, fldList);
         return this.dataSet.ttblarsc.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Arsc> GetListByRowIdList(List<string> rowIds, bool fillMode, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(arsc)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), fillMode, batchsize, fldList);
      }

      protected Arsc Fetch(string where, bool fillMode, int batchsize, string fldList)
      {
         this.FetchWhere(where, fillMode, batchsize, fldList);
         var row = this.dataSet.ttblarsc.AsEnumerable().SingleOrDefault();
         Arsc arsc = null;
         if (row != null)
         {
             arsc = this.BuildFromRow(row);
         }
         return arsc;
      }
	  
	  
	  public IEnumerable<Arsc> GetListByRowpointers(List<string> rowpointers, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         if (rowpointers != null && rowpointers.Count > 0)
         {
           foreach (var rowpointer in rowpointers)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("arsc.rowpointer='{0}'", rowpointer);
           }
         }
         return this.GetList(where.ToString(), fillMode, rowpointers.Count, fldList);
      }
	  
	  private DataRow GetRowByRowpointer(string rowpointer, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("arsc.rowpointer = '{0}'", rowpointer);
         this.FetchWhere(where.ToString(), fillMode, 1, fldList);
         return this.dataSet.ttblarsc.AsEnumerable().SingleOrDefault();
      }
      public IEnumerable<Arsc> GetListAllByCono(int cono, bool fillMode, int batchsize, string fldList)
      {   
         cono = cono == 0 ? this.connection.CompanyNumber : cono;
         var sb = new StringBuilder();
         sb.AppendFormat("arsc.cono = {0}", cono);
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetList(string where, bool fillMode, int batchsize, string fldList)
      {
         this.FetchWhere(where, fillMode, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttblarsc.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Arsc Get(int cono, decimal custno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.Fetch(where, fillMode, batchsize, fldList);
      }
  
      public IEnumerable<Arsc> GetListByAddr(int cono, string state, string city, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(state)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.state = '{0}'", state);
         }
         if (!string.IsNullOrEmpty(city)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.city = '{0}'", city);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByAuthgrplist(string authGrpList, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(authGrpList)) 
         {
             sb.AppendFormatWithEscape("arsc.AuthGrpList = '{0}'", authGrpList);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByCredit(int cono, string creditmgr, decimal custno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(creditmgr)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.creditmgr = '{0}'", creditmgr);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByCustno2(int cono, decimal custno2, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (custno2 != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.custno2 = {0}", custno2);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByEdiptnr(int cono, string edipartner, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(edipartner)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.edipartner = '{0}'", edipartner);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByGroup(int cono, string groupid, decimal custno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(groupid)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.groupid = '{0}'", groupid);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByLkup(int cono, string lookupnm, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(lookupnm)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.lookupnm = '{0}'", lookupnm);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByMasteraccount(int mastercono, decimal mastercustno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (mastercono != int.MinValue) 
         {
             sb.AppendFormatWithEscape("arsc.mastercono = {0}", mastercono);
         }
         if (mastercustno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.mastercustno = {0}", mastercustno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByPhone(int cono, string phoneno, decimal custno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(phoneno)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.phoneno = '{0}'", phoneno);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND arsc.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public Arsc GetByRowpointer(string rowpointer, bool fillMode, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowpointer)) 
         {
             sb.AppendFormatWithEscape("arsc.rowpointer = '{0}'", rowpointer);
         }
         var where = sb.ToString();
         return this.Fetch(where, fillMode, 1, fldList);
      }

      public IEnumerable<Arsc> GetListByTransdttmz(DateTime? transdttmz, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transdttmz != null) 
         {
             sb.AppendFormatWithEscape("arsc.transdttmz = '{0}'", transdttmz);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Arsc> GetListByZipcd(int cono, string zipcd, string lookupnm, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("arsc.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(zipcd)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.zipcd = '{0}'", zipcd);
         }
         if (!string.IsNullOrEmpty(lookupnm)) 
         {
             sb.AppendFormatWithEscape(" AND arsc.lookupnm = '{0}'", lookupnm);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public Arsc BuildFromRow(DataRow row)
      {
         var returnRecord = Arsc.BuildArscFromRow(row);
         returnRecord = this.BuildExtraFromRow<Arsc>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Arsc record)
      {
         Arsc.UpdateRowFromArsc(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Arsc Insert(Arsc record)
      {
         DataRow row = this.dataSet.ttblarsc.NewttblarscRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttblarsc.AddttblarscRow((pdsarscDataSet.ttblarscRow)row);
         this.SaveChanges();
         return this.dataSet.ttblarsc.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblarsc.Rows[0]) : null;
      }
  

      public Arsc Update(Arsc record)
      {
        var row = this.GetRowByRowpointer(record.rowpointer, false, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttblarsc.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblarsc.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Arsc record)
      {
         var row = this.GetRowByRowpointer(record.rowpointer, false, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttblarsc.NewttblarscRow();
            Arsc.BuildMinimalRow(ref row, record);
            this.dataSet.ttblarsc.AddttblarscRow((pdsarscDataSet.ttblarscRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }
 
      private void DeleteUseRowID(Arsc record)
      {
         var row = this.GetRowByRowId(record.rowID, false, string.Empty);
         if (row == null)
         {
            row = this.dataSet.ttblarsc.NewttblarscRow();
            Arsc.BuildMinimalRow(ref row, record);
            this.dataSet.ttblarsc.AddttblarscRow((pdsarscDataSet.ttblarscRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Arsc() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.DeleteUseRowID(rec);
            }
         }
      }
	  
 
      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         if (rowpointers != null)
         {
            var recList = rowpointers.Select(selectRowpointer => new Arsc() { rowpointer = selectRowpointer }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }

      public ArscLookupResponseAPI Lookup(Arcustomerlookupcriteria arcustomerlookupcriteria)
      {   
         var result = new ArscLookupResponseAPI();
         
         var pdsarcustomerlookup = new pdsarcustomerlookupDataSet();
            
         DataRow ttblarcustomerlookupcriteriaCriteria = pdsarcustomerlookup.ttblarcustomerlookupcriteria.NewttblarcustomerlookupcriteriaRow();
         Arcustomerlookupcriteria.UpdateRowFromArcustomerlookupcriteria(ref ttblarcustomerlookupcriteriaCriteria, arcustomerlookupcriteria);
         pdsarcustomerlookup.ttblarcustomerlookupcriteria.AddttblarcustomerlookupcriteriaRow((pdsarcustomerlookupDataSet.ttblarcustomerlookupcriteriaRow)ttblarcustomerlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("Lookup - Arsc - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poArscproxy = this.proxyAppObject.CreatePO_arscproxy())
               {
                   this.SetRequiredContextParameters();
                   poArscproxy.Lookup(ref pdsContext, ref pdsarcustomerlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("Lookup - Arsc - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarcustomerlookup); 
    
         foreach (DataRow row in pdsarcustomerlookup.ttblarcustomerlookupresults)
         {
            result.arcustomerlookupresults.Add(Arcustomerlookupresults.BuildArcustomerlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Arsc> GetListByWordIndex(string searchTerm, bool fillMode, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         where.AppendKeywords(string.Empty, searchTerm, true, true, false);
         this.SetAndFetch(where.ToString(), fillMode, batchsize, fldList);
         this.SearchWordIndex(batchsize == 0 ? DefaultFetchWhereRowCount : batchsize , where.ToString());
         return (from DataRow row in this.dataSet.ttblarsc.Rows select this.BuildFromRow(row)).ToList();
      }
  
      protected void SearchWordIndex(int batchSize, string searchTerm)
      {
         NLogLoggerP.Trace("SearchWordIndex - Arsc - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poArscProxy = this.proxyAppObject.CreatePO_arscproxy())
               {
                   this.SetRequiredContextParameters();
                   poArscProxy.SearchWordIndex(batchSize, searchTerm, ref this.pdsContext, out this.dataSet, out string cErrorMessage, out bool moreRecords);
                   ErrorReportingHelper.ReportErrors(cErrorMessage);
                   this.ReportErrors(this.pdsContext);
                   this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SearchWordIndex - Arsc - After Call");
      }
  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  