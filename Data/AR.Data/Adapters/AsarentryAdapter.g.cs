//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AR.Data.Adapters
{
   using com.infor.sxproxy.arproxy;
   using com.infor.sxproxy.arproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsarettrans;
   using Models.Pdsaretsplitpay;
   using Models.Pdsarettranscdload;
   using Models.Pdsaretfortranscdload;
   using Models.Pdsmessaging;
   using Models.Pdsarmanualterms;
   using Models.Pdsglupdate;
   using Models.Pdsaretcm;
   using Models.Pdsaretlist;
   using Models.Pdsarexchrate;
   using Models.Pdsareceglobaldata;
   using Models.Pdsarecemaindata;
   using Models.Pdsarececheckdata;
   using Models.Pdsgleta;
   using Models.Pdsgletaparam;
   using Models.Pdsareceinvoicesdata;
   using Models.Pdsareceinvoiceslist;
   using Models.Pdsareceworeport;
   using Models.Pdsarecewodata;
   using Models.Pdsarececoddata;
   using Models.Pdsarececodlookup;
   using Models.Pdsareceinvoicesoldestcriteria;
   using Models.Pdsareceinvoicesoldestsingle;
   using Models.Pdsareceupdatescrnoutput;
   using Models.Pdsarecesimcdiv;
   using Models.Pdsareceupdatescrncriteria;
   using Models.Pdsareceupdatedata;
   using Models.Pdsarecemisccashdata;
   using Models.Pdsglopenjournal;
   using Models.Pdsareceupdatescrnsingle;
   using Models.Pdsarecewodisplay;
   using Models.Pdsarelearetadd;
   using Models.Pdsarelecheckhdr;
   using Models.Pdsarelecheckdtl;
   using Models.Pdsarelecheckdtlwo;
   using Models.Pdsareledebitadd;
   using Models.Pdsaremb;
   using Models.Complex;

   public partial class AsarentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private ARProxyAppObject proxyAppObject;
      
      public AsarentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new ARProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsarentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsarentryARETSplitPayRowLeaveResponseAPI ARETSplitPayRowLeave(AsarentryARETSplitPayRowLeaveRequestAPI AsarentryARETSplitPayRowLeaveRequestAPI)
      {   
         var result = new AsarentryARETSplitPayRowLeaveResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretsplitpay = new pdsaretsplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETSplitPayRowLeaveRequestAPI.aretsplitpay)
         {
            DataRow ttblaretsplitpayRow = pdsaretsplitpay.ttblaretsplitpay.NewttblaretsplitpayRow();
            Aretsplitpay.UpdateRowFromAretsplitpay(ref ttblaretsplitpayRow, obj);
            pdsaretsplitpay.ttblaretsplitpay.AddttblaretsplitpayRow((pdsaretsplitpayDataSet.ttblaretsplitpayRow)ttblaretsplitpayRow);
         }
          
         DataRow ttblaretsplitpayproofRow = pdsaretsplitpay.ttblaretsplitpayproof.NewttblaretsplitpayproofRow();
         Aretsplitpayproof.UpdateRowFromAretsplitpayproof(ref ttblaretsplitpayproofRow, AsarentryARETSplitPayRowLeaveRequestAPI.aretsplitpayproof);
         pdsaretsplitpay.ttblaretsplitpayproof.AddttblaretsplitpayproofRow((pdsaretsplitpayDataSet.ttblaretsplitpayproofRow)ttblaretsplitpayproofRow);
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETSplitPayRowLeaveRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETSplitPayRowLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETSplitPayRowLeave(ref pdsContext,  pdsarettrans, ref pdsaretsplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETSplitPayRowLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretsplitpay.ttblaretsplitpay)
         {
            result.aretsplitpay.Add(Aretsplitpay.BuildAretsplitpayFromRow(row));
         }     
         if (pdsaretsplitpay.ttblaretsplitpayproof.Count > 0)
         {
            result.aretsplitpayproof = Aretsplitpayproof.BuildAretsplitpayproofFromRow(pdsaretsplitpay.ttblaretsplitpayproof[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARETSplitPayUpdateResponseAPI ARETSplitPayUpdate(AsarentryARETSplitPayUpdateRequestAPI AsarentryARETSplitPayUpdateRequestAPI)
      {   
         var result = new AsarentryARETSplitPayUpdateResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretsplitpay = new pdsaretsplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETSplitPayUpdateRequestAPI.aretsplitpay)
         {
            DataRow ttblaretsplitpayRow = pdsaretsplitpay.ttblaretsplitpay.NewttblaretsplitpayRow();
            Aretsplitpay.UpdateRowFromAretsplitpay(ref ttblaretsplitpayRow, obj);
            pdsaretsplitpay.ttblaretsplitpay.AddttblaretsplitpayRow((pdsaretsplitpayDataSet.ttblaretsplitpayRow)ttblaretsplitpayRow);
         }
          
         DataRow ttblaretsplitpayproofRow = pdsaretsplitpay.ttblaretsplitpayproof.NewttblaretsplitpayproofRow();
         Aretsplitpayproof.UpdateRowFromAretsplitpayproof(ref ttblaretsplitpayproofRow, AsarentryARETSplitPayUpdateRequestAPI.aretsplitpayproof);
         pdsaretsplitpay.ttblaretsplitpayproof.AddttblaretsplitpayproofRow((pdsaretsplitpayDataSet.ttblaretsplitpayproofRow)ttblaretsplitpayproofRow);
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETSplitPayUpdateRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETSplitPayUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETSplitPayUpdate(ref pdsContext,  pdsarettrans, ref pdsaretsplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETSplitPayUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretsplitpay.ttblaretsplitpay)
         {
            result.aretsplitpay.Add(Aretsplitpay.BuildAretsplitpayFromRow(row));
         }     
         if (pdsaretsplitpay.ttblaretsplitpayproof.Count > 0)
         {
            result.aretsplitpayproof = Aretsplitpayproof.BuildAretsplitpayproofFromRow(pdsaretsplitpay.ttblaretsplitpayproof[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARETStep1ContinueBtnResponseAPI ARETStep1ContinueBtn(AsarentryARETStep1ContinueBtnRequestAPI AsarentryARETStep1ContinueBtnRequestAPI)
      {   
         var result = new AsarentryARETStep1ContinueBtnResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsarettranscdload = new pdsarettranscdloadDataSet();
            
         var pdsaretfortranscdload = new pdsaretfortranscdloadDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETStep1ContinueBtnRequestAPI.aretfortranscdload)
         {
            DataRow ttblaretfortranscdloadRow = pdsaretfortranscdload.ttblaretfortranscdload.NewttblaretfortranscdloadRow();
            Aretfortranscdload.UpdateRowFromAretfortranscdload(ref ttblaretfortranscdloadRow, obj);
            pdsaretfortranscdload.ttblaretfortranscdload.AddttblaretfortranscdloadRow((pdsaretfortranscdloadDataSet.ttblaretfortranscdloadRow)ttblaretfortranscdloadRow);
         }
          
         foreach (var obj in AsarentryARETStep1ContinueBtnRequestAPI.arettranscdload)
         {
            DataRow ttblarettranscdloadRow = pdsarettranscdload.ttblarettranscdload.NewttblarettranscdloadRow();
            Arettranscdload.UpdateRowFromArettranscdload(ref ttblarettranscdloadRow, obj);
            pdsarettranscdload.ttblarettranscdload.AddttblarettranscdloadRow((pdsarettranscdloadDataSet.ttblarettranscdloadRow)ttblarettranscdloadRow);
         }
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETStep1ContinueBtnRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETStep1ContinueBtn - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep1ContinueBtn(ref pdsContext, ref pdsarettrans,  pdsarettranscdload,  pdsaretfortranscdload, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep1ContinueBtn - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0)
         {
            result.arettrans = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Arettrans ARETStep2CancelBtn(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETStep2CancelBtn - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep2CancelBtn(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep2CancelBtn - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public Arettrans ARETStep2ClearBtn(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETStep2ClearBtn - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep2ClearBtn(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep2ClearBtn - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARETStep2ContinueBtnResponseAPI ARETStep2ContinueBtn(AsarentryARETStep2ContinueBtnRequestAPI AsarentryARETStep2ContinueBtnRequestAPI)
      {   
         var result = new AsarentryARETStep2ContinueBtnResponseAPI();
         
         var pdsarmanualterms = new pdsarmanualtermsDataSet();
            
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETStep2ContinueBtnRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         DataRow ttblarmanualtermsRow = pdsarmanualterms.ttblarmanualterms.NewttblarmanualtermsRow();
         Armanualterms.UpdateRowFromArmanualterms(ref ttblarmanualtermsRow, AsarentryARETStep2ContinueBtnRequestAPI.armanualterms);
         pdsarmanualterms.ttblarmanualterms.AddttblarmanualtermsRow((pdsarmanualtermsDataSet.ttblarmanualtermsRow)ttblarmanualtermsRow);
          
         
         NLogLoggerP.Trace("ARETStep2ContinueBtn - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep2ContinueBtn(ref pdsContext,  pdsarmanualterms, ref pdsarettrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep2ContinueBtn - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarmanualterms); 
    
         if (pdsarettrans.ttblarettrans.Count > 0)
         {
            result.arettrans = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Arettrans ARETStep3CancelAuto(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETStep3CancelAuto - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep3CancelAuto(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep3CancelAuto - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public Arettrans ARETStep3ContinueAuto(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETStep3ContinueAuto - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETStep3ContinueAuto(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETStep3ContinueAuto - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arettranscdload> ARETTranscdLoad(bool lCheckSecurity)
      {   
         var results = new List<Arettranscdload>();
         
         var pdsarettranscdload = new pdsarettranscdloadDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETTranscdLoad - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETTranscdLoad(ref pdsContext,  lCheckSecurity, out pdsarettranscdload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETTranscdLoad - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettranscdload); 
    
            foreach (DataRow row in pdsarettranscdload.ttblarettranscdload)
            {
                results.Add(Arettranscdload.BuildArettranscdloadFromRow(row));
            }
            return results;
        
      }

      public AsarentryARETTransCdValueChangedResponseAPI ARETTransCdValueChanged(Arettrans arettrans)
      {   
         var result = new AsarentryARETTransCdValueChangedResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretfortranscdload = new pdsaretfortranscdloadDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETTransCdValueChanged - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETTransCdValueChanged(ref pdsContext, ref pdsarettrans, out pdsaretfortranscdload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETTransCdValueChanged - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretfortranscdload.ttblaretfortranscdload)
         {
            result.aretfortranscdload.Add(Aretfortranscdload.BuildAretfortranscdloadFromRow(row));
         }     
         if (pdsarettrans.ttblarettrans.Count > 0)
         {
            result.arettrans = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARETUpdateResponseAPI ARETUpdate(AsarentryARETUpdateRequestAPI AsarentryARETUpdateRequestAPI)
      {   
         var result = new AsarentryARETUpdateResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsglupdate = new pdsglupdateDataSet();
            
         var pdsaretcm = new pdsaretcmDataSet();
            
         var pdsaretsplitpay = new pdsaretsplitpayDataSet();
            
         var pdsaretlist = new pdsaretlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETUpdateRequestAPI.aretcm)
         {
            DataRow ttblaretcmRow = pdsaretcm.ttblaretcm.NewttblaretcmRow();
            Aretcm.UpdateRowFromAretcm(ref ttblaretcmRow, obj);
            pdsaretcm.ttblaretcm.AddttblaretcmRow((pdsaretcmDataSet.ttblaretcmRow)ttblaretcmRow);
         }
          
         foreach (var obj in AsarentryARETUpdateRequestAPI.aretsplitpay)
         {
            DataRow ttblaretsplitpayRow = pdsaretsplitpay.ttblaretsplitpay.NewttblaretsplitpayRow();
            Aretsplitpay.UpdateRowFromAretsplitpay(ref ttblaretsplitpayRow, obj);
            pdsaretsplitpay.ttblaretsplitpay.AddttblaretsplitpayRow((pdsaretsplitpayDataSet.ttblaretsplitpayRow)ttblaretsplitpayRow);
         }
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETUpdateRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         foreach (var obj in AsarentryARETUpdateRequestAPI.glupdate)
         {
            DataRow ttblglupdateRow = pdsglupdate.ttblglupdate.NewttblglupdateRow();
            Glupdate.UpdateRowFromGlupdate(ref ttblglupdateRow, obj);
            pdsglupdate.ttblglupdate.AddttblglupdateRow((pdsglupdateDataSet.ttblglupdateRow)ttblglupdateRow);
         }
          
         
         NLogLoggerP.Trace("ARETUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETUpdate(ref pdsContext, ref pdsarettrans,  pdsglupdate,  pdsaretcm,  pdsaretsplitpay, out pdsaretlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsaretlist.ttblaretlist.Count > 0)
         {
            result.aretlist = Aretlist.BuildAretlistFromRow(pdsaretlist.ttblaretlist[0]);
         }
                    
         if (pdsarettrans.ttblarettrans.Count > 0)
         {
            result.arettrans = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Arexchrate ARExchRateInitiate(Arexchrate arexchrate)
      {   
         var result = new Arexchrate();
         
         var pdsarexchrate = new pdsarexchrateDataSet();
            
         DataRow ttblarexchrateCriteria = pdsarexchrate.ttblarexchrate.NewttblarexchrateRow();
         Arexchrate.UpdateRowFromArexchrate(ref ttblarexchrateCriteria, arexchrate);
         pdsarexchrate.ttblarexchrate.AddttblarexchrateRow((pdsarexchrateDataSet.ttblarexchrateRow)ttblarexchrateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARExchRateInitiate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARExchRateInitiate(ref pdsContext, ref pdsarexchrate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARExchRateInitiate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarexchrate); 
    
         if (pdsarexchrate.ttblarexchrate.Count > 0) 
         { 
             result = Arexchrate.BuildArexchrateFromRow(pdsarexchrate.ttblarexchrate[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARExchRateUpdateResponseAPI ARExchRateUpdate(AsarentryARExchRateUpdateRequestAPI AsarentryARExchRateUpdateRequestAPI)
      {   
         var result = new AsarentryARExchRateUpdateResponseAPI();
         
         var pdsarexchrate = new pdsarexchrateDataSet();
            
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARExchRateUpdateRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARExchRateUpdateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARExchRateUpdateRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         DataRow ttblarexchrateRow = pdsarexchrate.ttblarexchrate.NewttblarexchrateRow();
         Arexchrate.UpdateRowFromArexchrate(ref ttblarexchrateRow, AsarentryARExchRateUpdateRequestAPI.arexchrate);
         pdsarexchrate.ttblarexchrate.AddttblarexchrateRow((pdsarexchrateDataSet.ttblarexchrateRow)ttblarexchrateRow);
          
         
         NLogLoggerP.Trace("ARExchRateUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARExchRateUpdate(ref pdsContext, ref pdsarexchrate, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARExchRateUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarexchrate); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         if (pdsarexchrate.ttblarexchrate.Count > 0)
         {
            result.arexchrate = Arexchrate.BuildArexchrateFromRow(pdsarexchrate.ttblarexchrate[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARETGLETAUpdateSetupResponseAPI ARETGLETAUpdateSetup(Arettrans arettrans)
      {   
         var result = new AsarentryARETGLETAUpdateSetupResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsgletaparam = new pdsgletaparamDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETGLETAUpdateSetup - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETGLETAUpdateSetup(ref pdsContext,  pdsarettrans, out pdsgleta, out pdsgletaparam, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETGLETAUpdateSetup - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsgleta.ttblgletacriteria.Count > 0)
         {
            result.gletacriteria = Gletacriteria.BuildGletacriteriaFromRow(pdsgleta.ttblgletacriteria[0]);
         }
                    
         if (pdsgletaparam.ttblgletaparam.Count > 0)
         {
            result.gletaparam = Gletaparam.BuildGletaparamFromRow(pdsgletaparam.ttblgletaparam[0]);
         }
                    
          
         return result;
          
      }

      public Armanualterms ARManualTermsInitiate(Armanualterms armanualterms)
      {   
         var result = new Armanualterms();
         
         var pdsarmanualterms = new pdsarmanualtermsDataSet();
            
         DataRow ttblarmanualtermsCriteria = pdsarmanualterms.ttblarmanualterms.NewttblarmanualtermsRow();
         Armanualterms.UpdateRowFromArmanualterms(ref ttblarmanualtermsCriteria, armanualterms);
         pdsarmanualterms.ttblarmanualterms.AddttblarmanualtermsRow((pdsarmanualtermsDataSet.ttblarmanualtermsRow)ttblarmanualtermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARManualTermsInitiate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARManualTermsInitiate(ref pdsContext, ref pdsarmanualterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARManualTermsInitiate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarmanualterms); 
    
         if (pdsarmanualterms.ttblarmanualterms.Count > 0) 
         { 
             result = Armanualterms.BuildArmanualtermsFromRow(pdsarmanualterms.ttblarmanualterms[0]);
         } 
              
          
         return result;
          
      }

      public Armanualterms ARManualTermsResetDiscFields(AsarentryARManualTermsResetDiscFieldsRequestAPI AsarentryARManualTermsResetDiscFieldsRequestAPI)
      {   
         var result = new Armanualterms();
         
         var pdsarmanualterms = new pdsarmanualtermsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarmanualtermsRow = pdsarmanualterms.ttblarmanualterms.NewttblarmanualtermsRow();
         Armanualterms.UpdateRowFromArmanualterms(ref ttblarmanualtermsRow, AsarentryARManualTermsResetDiscFieldsRequestAPI.armanualterms);
         pdsarmanualterms.ttblarmanualterms.AddttblarmanualtermsRow((pdsarmanualtermsDataSet.ttblarmanualtermsRow)ttblarmanualtermsRow);
          
         var  cType = AsarentryARManualTermsResetDiscFieldsRequestAPI.cType;
            
         
         NLogLoggerP.Trace("ARManualTermsResetDiscFields - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARManualTermsResetDiscFields(ref pdsContext,  cType, ref pdsarmanualterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARManualTermsResetDiscFields - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarmanualterms); 
    
         if (pdsarmanualterms.ttblarmanualterms.Count > 0) 
         { 
             result = Armanualterms.BuildArmanualtermsFromRow(pdsarmanualterms.ttblarmanualterms[0]);
         } 
              
          
         return result;
          
      }

      public Armanualterms ARManualTermsUpdate(Armanualterms armanualterms)
      {   
         var result = new Armanualterms();
         
         var pdsarmanualterms = new pdsarmanualtermsDataSet();
            
         DataRow ttblarmanualtermsCriteria = pdsarmanualterms.ttblarmanualterms.NewttblarmanualtermsRow();
         Armanualterms.UpdateRowFromArmanualterms(ref ttblarmanualtermsCriteria, armanualterms);
         pdsarmanualterms.ttblarmanualterms.AddttblarmanualtermsRow((pdsarmanualtermsDataSet.ttblarmanualtermsRow)ttblarmanualtermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARManualTermsUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARManualTermsUpdate(ref pdsContext, ref pdsarmanualterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARManualTermsUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarmanualterms); 
    
         if (pdsarmanualterms.ttblarmanualterms.Count > 0) 
         { 
             result = Armanualterms.BuildArmanualtermsFromRow(pdsarmanualterms.ttblarmanualterms[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARECECancelProcessResponseAPI ARECECancelProcess(AsarentryARECECancelProcessRequestAPI AsarentryARECECancelProcessRequestAPI)
      {   
         var result = new AsarentryARECECancelProcessResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARECECancelProcessRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECancelProcessRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECancelProcessRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECECancelProcess - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECancelProcess(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECancelProcess - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECECheckFieldTriggerResponseAPI ARECECheckFieldTrigger(AsarentryARECECheckFieldTriggerRequestAPI AsarentryARECECheckFieldTriggerRequestAPI)
      {   
         var result = new AsarentryARECECheckFieldTriggerResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARECECheckFieldTriggerRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECheckFieldTriggerRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECheckFieldTriggerRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         var  cField = AsarentryARECECheckFieldTriggerRequestAPI.cField;
            
         
         NLogLoggerP.Trace("ARECECheckFieldTrigger - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECheckFieldTrigger(ref pdsContext,  cField, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECheckFieldTrigger - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECECheckInitializeResponseAPI ARECECheckInitialize(AsarentryARECECheckInitializeRequestAPI AsarentryARECECheckInitializeRequestAPI)
      {   
         var result = new AsarentryARECECheckInitializeResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARECECheckInitializeRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECheckInitializeRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECheckInitializeRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECECheckInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECheckInitialize(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECheckInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECECheckValidateResponseAPI ARECECheckValidate(AsarentryARECECheckValidateRequestAPI AsarentryARECECheckValidateRequestAPI)
      {   
         var result = new AsarentryARECECheckValidateResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool pvOK = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARECECheckValidateRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECheckValidateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECheckValidateRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         var  pvSection = AsarentryARECECheckValidateRequestAPI.pvSection;
            
         
         NLogLoggerP.Trace("ARECECheckValidate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECheckValidate(ref pdsContext,  pvSection, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, out pdsmessaging, out pvOK, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECheckValidate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.pvOK = pvOK;
          
         return result;
          
      }

      public AsarentryARECECredInvDbtInitializeResponseAPI ARECECredInvDbtInitialize(AsarentryARECECredInvDbtInitializeRequestAPI AsarentryARECECredInvDbtInitializeRequestAPI)
      {   
         var result = new AsarentryARECECredInvDbtInitializeResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECredInvDbtInitializeRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECredInvDbtInitializeRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECECredInvDbtInitializeRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         var  iJrnlNo = AsarentryARECECredInvDbtInitializeRequestAPI.iJrnlNo;
            
         
         NLogLoggerP.Trace("ARECECredInvDbtInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECredInvDbtInitialize(ref pdsContext,  iJrnlNo, ref pdsareceglobaldata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECredInvDbtInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Areceinvoiceslist> ARECECreditsCancelWriteoff(IEnumerable<Areceinvoiceslist> areceinvoiceslist)
      {   
         var results = new List<Areceinvoiceslist>();
         
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         foreach (var obj in areceinvoiceslist)
         {
             DataRow row = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
             Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref row, obj);
             pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARECECreditsCancelWriteoff - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsCancelWriteoff(ref pdsContext, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsCancelWriteoff - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceinvoiceslist); 
    
            foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
            {
                results.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
            }
            return results;
        
      }

      public AsarentryARECECreditsChooseOrigDiscResponseAPI ARECECreditsChooseOrigDisc(AsarentryARECECreditsChooseOrigDiscRequestAPI AsarentryARECECreditsChooseOrigDiscRequestAPI)
      {   
         var result = new AsarentryARECECreditsChooseOrigDiscResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsChooseOrigDiscRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECreditsChooseOrigDiscRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECECreditsChooseOrigDiscRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECreditsChooseOrigDiscRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECECreditsChooseOrigDiscRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECECreditsChooseOrigDisc - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsChooseOrigDisc(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, out pdsarecewodata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsChooseOrigDisc - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECECreditsChooseResetResponseAPI ARECECreditsChooseReset(AsarentryARECECreditsChooseResetRequestAPI AsarentryARECECreditsChooseResetRequestAPI)
      {   
         var result = new AsarentryARECECreditsChooseResetResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsChooseResetRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECreditsChooseResetRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECECreditsChooseResetRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECreditsChooseResetRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECECreditsChooseResetRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECECreditsChooseResetRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECECreditsChooseReset - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsChooseReset(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecewodata, ref pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsChooseReset - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECECreditsChooseWriteoffResponseAPI ARECECreditsChooseWriteoff(AsarentryARECECreditsChooseWriteoffRequestAPI AsarentryARECECreditsChooseWriteoffRequestAPI)
      {   
         var result = new AsarentryARECECreditsChooseWriteoffResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         bool pvLaunchWriteOff = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsChooseWriteoffRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         foreach (var obj in AsarentryARECECreditsChooseWriteoffRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         foreach (var obj in AsarentryARECECreditsChooseWriteoffRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         
         NLogLoggerP.Trace("ARECECreditsChooseWriteoff - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsChooseWriteoff(ref pdsContext,  pdsareceglobaldata, ref pdsareceinvoiceslist, ref pdsarecewodata, out pvLaunchWriteOff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsChooseWriteoff - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         result.pvLaunchWriteOff = pvLaunchWriteOff;
          
         return result;
          
      }

      public AsarentryARECECODDeleteResponseAPI ARECECODDelete(AsarentryARECECODDeleteRequestAPI AsarentryARECECODDeleteRequestAPI)
      {   
         var result = new AsarentryARECECODDeleteResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECECODDeleteRequestAPI.arececoddata)
         {
            DataRow ttblarececoddataRow = pdsarececoddata.ttblarececoddata.NewttblarececoddataRow();
            Arececoddata.UpdateRowFromArececoddata(ref ttblarececoddataRow, obj);
            pdsarececoddata.ttblarececoddata.AddttblarececoddataRow((pdsarececoddataDataSet.ttblarececoddataRow)ttblarececoddataRow);
         }
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECODDeleteRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECODDeleteRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECECODDelete - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECODDelete(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececoddata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECODDelete - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         foreach (DataRow row in pdsarececoddata.ttblarececoddata)
         {
            result.arececoddata.Add(Arececoddata.BuildArececoddataFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECECODInitializeResponseAPI ARECECODInitialize(Areceglobaldata areceglobaldata)
      {   
         var result = new AsarentryARECECODInitializeResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         DataRow ttblareceglobaldataCriteria = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataCriteria, areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARECECODInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECODInitialize(ref pdsContext, ref pdsareceglobaldata, out pdsarececoddata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECODInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececoddata.ttblarececoddata.Count > 0)
         {
            result.arececoddata = Arececoddata.BuildArececoddataFromRow(pdsarececoddata.ttblarececoddata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECECODLeaveFieldResponseAPI ARECECODLeaveField(AsarentryARECECODLeaveFieldRequestAPI AsarentryARECECODLeaveFieldRequestAPI)
      {   
         var result = new AsarentryARECECODLeaveFieldResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         var pdsarexchrate = new pdsarexchrateDataSet();
            
         var pdsarececodlookup = new pdsarececodlookupDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececoddataRow = pdsarececoddata.ttblarececoddata.NewttblarececoddataRow();
         Arececoddata.UpdateRowFromArececoddata(ref ttblarececoddataRow, AsarentryARECECODLeaveFieldRequestAPI.arececoddata);
         pdsarececoddata.ttblarececoddata.AddttblarececoddataRow((pdsarececoddataDataSet.ttblarececoddataRow)ttblarececoddataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECODLeaveFieldRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECODLeaveFieldRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         DataRow ttblarexchrateRow = pdsarexchrate.ttblarexchrate.NewttblarexchrateRow();
         Arexchrate.UpdateRowFromArexchrate(ref ttblarexchrateRow, AsarentryARECECODLeaveFieldRequestAPI.arexchrate);
         pdsarexchrate.ttblarexchrate.AddttblarexchrateRow((pdsarexchrateDataSet.ttblarexchrateRow)ttblarexchrateRow);
          
         var  cField = AsarentryARECECODLeaveFieldRequestAPI.cField;
            
         var  lUpdateProofFl = AsarentryARECECODLeaveFieldRequestAPI.lUpdateProofFl;
            
         
         NLogLoggerP.Trace("ARECECODLeaveField - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECODLeaveField(ref pdsContext,  cField,  lUpdateProofFl,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececoddata, ref pdsarexchrate, out pdsarececodlookup, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECODLeaveField - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececoddata.ttblarececoddata.Count > 0)
         {
            result.arececoddata = Arececoddata.BuildArececoddataFromRow(pdsarececoddata.ttblarececoddata[0]);
         }
                    
         foreach (DataRow row in pdsarececodlookup.ttblarececodlookup)
         {
            result.arececodlookup.Add(Arececodlookup.BuildArececodlookupFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         if (pdsarexchrate.ttblarexchrate.Count > 0)
         {
            result.arexchrate = Arexchrate.BuildArexchrateFromRow(pdsarexchrate.ttblarexchrate[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECECODValidateResponseAPI ARECECODValidate(AsarentryARECECODValidateRequestAPI AsarentryARECECODValidateRequestAPI)
      {   
         var result = new AsarentryARECECODValidateResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         bool lOK = false;
         string cCreditRefer = string.Empty;
         decimal deCreditAmount = 0;
         string cDivnos = string.Empty;
         string cDivamounts = string.Empty;
         bool lRunmisc = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECECODValidateRequestAPI.arececoddata)
         {
            DataRow ttblarececoddataRow = pdsarececoddata.ttblarececoddata.NewttblarececoddataRow();
            Arececoddata.UpdateRowFromArececoddata(ref ttblarececoddataRow, obj);
            pdsarececoddata.ttblarececoddata.AddttblarececoddataRow((pdsarececoddataDataSet.ttblarececoddataRow)ttblarececoddataRow);
         }
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECODValidateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECODValidateRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         var  iProofOption = AsarentryARECECODValidateRequestAPI.iProofOption;
            
         
         NLogLoggerP.Trace("ARECECODValidate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECODValidate(ref pdsContext,  iProofOption, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececoddata, out lOK, out cCreditRefer, out deCreditAmount, out cDivnos, out cDivamounts, out lRunmisc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECODValidate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         foreach (DataRow row in pdsarececoddata.ttblarececoddata)
         {
            result.arececoddata.Add(Arececoddata.BuildArececoddataFromRow(row));
         }     
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         result.lOK = lOK;
         result.cCreditRefer = cCreditRefer;
         result.deCreditAmount = deCreditAmount;
         result.cDivnos = cDivnos;
         result.cDivamounts = cDivamounts;
         result.lRunmisc = lRunmisc;
          
         return result;
          
      }

      public AsarentryARECECODValidateRowResponseAPI ARECECODValidateRow(AsarentryARECECODValidateRowRequestAPI AsarentryARECECODValidateRowRequestAPI)
      {   
         var result = new AsarentryARECECODValidateRowResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececoddataRow = pdsarececoddata.ttblarececoddata.NewttblarececoddataRow();
         Arececoddata.UpdateRowFromArececoddata(ref ttblarececoddataRow, AsarentryARECECODValidateRowRequestAPI.arececoddata);
         pdsarececoddata.ttblarececoddata.AddttblarececoddataRow((pdsarececoddataDataSet.ttblarececoddataRow)ttblarececoddataRow);
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECODValidateRowRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECODValidateRowRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECECODValidateRow - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECODValidateRow(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececoddata, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECODValidateRow - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececoddata.ttblarececoddata.Count > 0)
         {
            result.arececoddata = Arececoddata.BuildArececoddataFromRow(pdsarececoddata.ttblarececoddata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsarentryARECECreditsFieldLeaveResponseAPI ARECECreditsFieldLeave(AsarentryARECECreditsFieldLeaveRequestAPI AsarentryARECECreditsFieldLeaveRequestAPI)
      {   
         var result = new AsarentryARECECreditsFieldLeaveResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsFieldLeaveRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECreditsFieldLeaveRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
         Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, AsarentryARECECreditsFieldLeaveRequestAPI.areceinvoiceslist);
         pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECreditsFieldLeaveRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECECreditsFieldLeaveRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECECreditsFieldLeaveRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         var  pvJrnlno = AsarentryARECECreditsFieldLeaveRequestAPI.pvJrnlno;
            
         var  pvObject = AsarentryARECECreditsFieldLeaveRequestAPI.pvObject;
            
         
         NLogLoggerP.Trace("ARECECreditsFieldLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsFieldLeave(ref pdsContext,  pvJrnlno,  pvObject, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecewodata, ref pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsFieldLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         if (pdsareceinvoiceslist.ttblareceinvoiceslist.Count > 0)
         {
            result.areceinvoiceslist = Areceinvoiceslist.BuildAreceinvoiceslistFromRow(pdsareceinvoiceslist.ttblareceinvoiceslist[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECECreditsOKWriteoffResponseAPI ARECECreditsOKWriteoff(AsarentryARECECreditsOKWriteoffRequestAPI AsarentryARECECreditsOKWriteoffRequestAPI)
      {   
         var result = new AsarentryARECECreditsOKWriteoffResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         bool pvLaunchWriteOff = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsOKWriteoffRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECreditsOKWriteoffRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECECreditsOKWriteoffRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECreditsOKWriteoffRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECECreditsOKWriteoffRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECECreditsOKWriteoffRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         var  pvProofadjustment = AsarentryARECECreditsOKWriteoffRequestAPI.pvProofadjustment;
            
         
         NLogLoggerP.Trace("ARECECreditsOKWriteoff - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsOKWriteoff(ref pdsContext,  pvProofadjustment, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecewodata, ref pdsareceworeport, out pvLaunchWriteOff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsOKWriteoff - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
         result.pvLaunchWriteOff = pvLaunchWriteOff;
          
         return result;
          
      }

      public AsarentryARECECreditsOldestResponseAPI ARECECreditsOldest(AsarentryARECECreditsOldestRequestAPI AsarentryARECECreditsOldestRequestAPI)
      {   
         var result = new AsarentryARECECreditsOldestResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECECreditsOldestRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECECreditsOldestRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECECreditsOldestRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECECreditsOldestRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECECreditsOldestRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECECreditsOldestRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECECreditsOldest - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECECreditsOldest(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecewodata, ref pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECECreditsOldest - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEDebitDeleteResponseAPI ARECEDebitDelete(AsarentryARECEDebitDeleteRequestAPI AsarentryARECEDebitDeleteRequestAPI)
      {   
         var result = new AsarentryARECEDebitDeleteResponseAPI();
         
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEDebitDeleteRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEDebitDeleteRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECEDebitDelete - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEDebitDelete(ref pdsContext, ref pdsarecemaindata, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEDebitDelete - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecemaindata); 
    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECEDebitInitializeResponseAPI ARECEDebitInitialize(AsarentryARECEDebitInitializeRequestAPI AsarentryARECEDebitInitializeRequestAPI)
      {   
         var result = new AsarentryARECEDebitInitializeResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEDebitInitializeRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEDebitInitializeRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEDebitInitializeRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         
         NLogLoggerP.Trace("ARECEDebitInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEDebitInitialize(ref pdsContext,  pdsareceglobaldata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEDebitInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEDebitLeaveFieldResponseAPI ARECEDebitLeaveField(AsarentryARECEDebitLeaveFieldRequestAPI AsarentryARECEDebitLeaveFieldRequestAPI)
      {   
         var result = new AsarentryARECEDebitLeaveFieldResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEDebitLeaveFieldRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
         Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, AsarentryARECEDebitLeaveFieldRequestAPI.areceinvoiceslist);
         pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEDebitLeaveFieldRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         var  cField = AsarentryARECEDebitLeaveFieldRequestAPI.cField;
            
         
         NLogLoggerP.Trace("ARECEDebitLeaveField - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEDebitLeaveField(ref pdsContext,  cField, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEDebitLeaveField - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoiceslist.ttblareceinvoiceslist.Count > 0)
         {
            result.areceinvoiceslist = Areceinvoiceslist.BuildAreceinvoiceslistFromRow(pdsareceinvoiceslist.ttblareceinvoiceslist[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECEDebitValidateResponseAPI ARECEDebitValidate(AsarentryARECEDebitValidateRequestAPI AsarentryARECEDebitValidateRequestAPI)
      {   
         var result = new AsarentryARECEDebitValidateResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEDebitValidateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
         Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, AsarentryARECEDebitValidateRequestAPI.areceinvoiceslist);
         pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEDebitValidateRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         
         NLogLoggerP.Trace("ARECEDebitValidate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEDebitValidate(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoiceslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEDebitValidate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoiceslist.ttblareceinvoiceslist.Count > 0)
         {
            result.areceinvoiceslist = Areceinvoiceslist.BuildAreceinvoiceslistFromRow(pdsareceinvoiceslist.ttblareceinvoiceslist[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECEInvoicesChooseOrigDiscResponseAPI ARECEInvoicesChooseOrigDisc(AsarentryARECEInvoicesChooseOrigDiscRequestAPI AsarentryARECEInvoicesChooseOrigDiscRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesChooseOrigDiscResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesChooseOrigDiscRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesChooseOrigDiscRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEInvoicesChooseOrigDiscRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesChooseOrigDiscRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesChooseOrigDiscRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEInvoicesChooseOrigDisc - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesChooseOrigDisc(ref pdsContext,  pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, out pdsarecewodata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesChooseOrigDisc - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEInvoicesChooseResetResponseAPI ARECEInvoicesChooseReset(AsarentryARECEInvoicesChooseResetRequestAPI AsarentryARECEInvoicesChooseResetRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesChooseResetResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesChooseResetRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesChooseResetRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEInvoicesChooseResetRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesChooseResetRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesChooseResetRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEInvoicesChooseReset - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesChooseReset(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, out pdsarecewodata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesChooseReset - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEInvoicesChooseWriteoffResponseAPI ARECEInvoicesChooseWriteoff(AsarentryARECEInvoicesChooseWriteoffRequestAPI AsarentryARECEInvoicesChooseWriteoffRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesChooseWriteoffResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         bool pvLaunchWriteOff = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesChooseWriteoffRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesChooseWriteoffRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
         Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, AsarentryARECEInvoicesChooseWriteoffRequestAPI.areceinvoiceslist);
         pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesChooseWriteoffRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesChooseWriteoffRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEInvoicesChooseWriteoff - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesChooseWriteoff(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, out pdsarecewodata, out pvLaunchWriteOff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesChooseWriteoff - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         if (pdsareceinvoiceslist.ttblareceinvoiceslist.Count > 0)
         {
            result.areceinvoiceslist = Areceinvoiceslist.BuildAreceinvoiceslistFromRow(pdsareceinvoiceslist.ttblareceinvoiceslist[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
         result.pvLaunchWriteOff = pvLaunchWriteOff;
          
         return result;
          
      }

      public AsarentryARECEInvoicesFieldLeaveResponseAPI ARECEInvoicesFieldLeave(AsarentryARECEInvoicesFieldLeaveRequestAPI AsarentryARECEInvoicesFieldLeaveRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesFieldLeaveResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         bool pvLaunchWriteOff = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesFieldLeaveRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesFieldLeaveRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
         Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, AsarentryARECEInvoicesFieldLeaveRequestAPI.areceinvoiceslist);
         pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesFieldLeaveRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesFieldLeaveRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         var  pvField = AsarentryARECEInvoicesFieldLeaveRequestAPI.pvField;
            
         
         NLogLoggerP.Trace("ARECEInvoicesFieldLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesFieldLeave(ref pdsContext,  pvField, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, out pdsarecewodata, out pvLaunchWriteOff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesFieldLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         if (pdsareceinvoiceslist.ttblareceinvoiceslist.Count > 0)
         {
            result.areceinvoiceslist = Areceinvoiceslist.BuildAreceinvoiceslistFromRow(pdsareceinvoiceslist.ttblareceinvoiceslist[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
         result.pvLaunchWriteOff = pvLaunchWriteOff;
          
         return result;
          
      }

      public Areceinvoicesoldestsingle ARECEInvoicesOldestInitialize(Areceinvoicesoldestcriteria areceinvoicesoldestcriteria)
      {   
         var result = new Areceinvoicesoldestsingle();
         
         var pdsareceinvoicesoldestcriteria = new pdsareceinvoicesoldestcriteriaDataSet();
            
         var pdsareceinvoicesoldestsingle = new pdsareceinvoicesoldestsingleDataSet();
            
         DataRow ttblareceinvoicesoldestcriteriaCriteria = pdsareceinvoicesoldestcriteria.ttblareceinvoicesoldestcriteria.NewttblareceinvoicesoldestcriteriaRow();
         Areceinvoicesoldestcriteria.UpdateRowFromAreceinvoicesoldestcriteria(ref ttblareceinvoicesoldestcriteriaCriteria, areceinvoicesoldestcriteria);
         pdsareceinvoicesoldestcriteria.ttblareceinvoicesoldestcriteria.AddttblareceinvoicesoldestcriteriaRow((pdsareceinvoicesoldestcriteriaDataSet.ttblareceinvoicesoldestcriteriaRow)ttblareceinvoicesoldestcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARECEInvoicesOldestInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesOldestInitialize(ref pdsContext,  pdsareceinvoicesoldestcriteria, out pdsareceinvoicesoldestsingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesOldestInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceinvoicesoldestcriteria); 
    
         if (pdsareceinvoicesoldestsingle.ttblareceinvoicesoldestsingle.Count > 0) 
         { 
             result = Areceinvoicesoldestsingle.BuildAreceinvoicesoldestsingleFromRow(pdsareceinvoicesoldestsingle.ttblareceinvoicesoldestsingle[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARECEInvoicesOldestOKResponseAPI ARECEInvoicesOldestOK(AsarentryARECEInvoicesOldestOKRequestAPI AsarentryARECEInvoicesOldestOKRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesOldestOKResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsareceinvoicesoldestcriteria = new pdsareceinvoicesoldestcriteriaDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesOldestOKRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesOldestOKRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEInvoicesOldestOKRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblareceinvoicesoldestcriteriaRow = pdsareceinvoicesoldestcriteria.ttblareceinvoicesoldestcriteria.NewttblareceinvoicesoldestcriteriaRow();
         Areceinvoicesoldestcriteria.UpdateRowFromAreceinvoicesoldestcriteria(ref ttblareceinvoicesoldestcriteriaRow, AsarentryARECEInvoicesOldestOKRequestAPI.areceinvoicesoldestcriteria);
         pdsareceinvoicesoldestcriteria.ttblareceinvoicesoldestcriteria.AddttblareceinvoicesoldestcriteriaRow((pdsareceinvoicesoldestcriteriaDataSet.ttblareceinvoicesoldestcriteriaRow)ttblareceinvoicesoldestcriteriaRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesOldestOKRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesOldestOKRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECEInvoicesOldestOKRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEInvoicesOldestOK - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesOldestOK(ref pdsContext,  pdsareceglobaldata,  pdsareceinvoicesoldestcriteria, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecewodata, ref pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesOldestOK - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEInvoicesPIFButtonResponseAPI ARECEInvoicesPIFButton(AsarentryARECEInvoicesPIFButtonRequestAPI AsarentryARECEInvoicesPIFButtonRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesPIFButtonResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesPIFButtonRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesPIFButtonRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEInvoicesPIFButtonRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesPIFButtonRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesPIFButtonRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECEInvoicesPIFButtonRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEInvoicesPIFButton - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesPIFButton(ref pdsContext, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsareceworeport, ref pdsarecewodata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesPIFButton - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEInvoicesValidateResponseAPI ARECEInvoicesValidate(AsarentryARECEInvoicesValidateRequestAPI AsarentryARECEInvoicesValidateRequestAPI)
      {   
         var result = new AsarentryARECEInvoicesValidateResponseAPI();
         
         var pdsareceupdatescrnoutput = new pdsareceupdatescrnoutputDataSet();
            
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecesimcdiv = new pdsarecesimcdivDataSet();
            
         var pdsareceupdatescrncriteria = new pdsareceupdatescrncriteriaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEInvoicesValidateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEInvoicesValidateRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEInvoicesValidateRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEInvoicesValidateRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         foreach (var obj in AsarentryARECEInvoicesValidateRequestAPI.arecesimcdiv)
         {
            DataRow ttblarecesimcdivRow = pdsarecesimcdiv.ttblarecesimcdiv.NewttblarecesimcdivRow();
            Arecesimcdiv.UpdateRowFromArecesimcdiv(ref ttblarecesimcdivRow, obj);
            pdsarecesimcdiv.ttblarecesimcdiv.AddttblarecesimcdivRow((pdsarecesimcdivDataSet.ttblarecesimcdivRow)ttblarecesimcdivRow);
         }
          
         DataRow ttblareceupdatescrnoutputRow = pdsareceupdatescrnoutput.ttblareceupdatescrnoutput.NewttblareceupdatescrnoutputRow();
         Areceupdatescrnoutput.UpdateRowFromAreceupdatescrnoutput(ref ttblareceupdatescrnoutputRow, AsarentryARECEInvoicesValidateRequestAPI.areceupdatescrnoutput);
         pdsareceupdatescrnoutput.ttblareceupdatescrnoutput.AddttblareceupdatescrnoutputRow((pdsareceupdatescrnoutputDataSet.ttblareceupdatescrnoutputRow)ttblareceupdatescrnoutputRow);
          
         var  pvJrnlno = AsarentryARECEInvoicesValidateRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("ARECEInvoicesValidate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEInvoicesValidate(ref pdsContext,  pvJrnlno,  pdsareceupdatescrnoutput, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecesimcdiv, out pdsareceupdatescrncriteria, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEInvoicesValidate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceupdatescrnoutput); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         foreach (DataRow row in pdsarecesimcdiv.ttblarecesimcdiv)
         {
            result.arecesimcdiv.Add(Arecesimcdiv.BuildArecesimcdivFromRow(row));
         }     
         if (pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.Count > 0)
         {
            result.areceupdatescrncriteria = Areceupdatescrncriteria.BuildAreceupdatescrncriteriaFromRow(pdsareceupdatescrncriteria.ttblareceupdatescrncriteria[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEMainInitializeResponseAPI ARECEMainInitialize(AsarentryARECEMainInitializeRequestAPI AsarentryARECEMainInitializeRequestAPI)
      {   
         var result = new AsarentryARECEMainInitializeResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         var pdsareceupdatedata = new pdsareceupdatedataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEMainInitializeRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEMainInitializeRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         var  pvJrnlno = AsarentryARECEMainInitializeRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("ARECEMainInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMainInitialize(ref pdsContext,  pvJrnlno, ref pdsareceglobaldata, ref pdsarecemaindata, out pdsarececheckdata, out pdsareceupdatedata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMainInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         if (pdsareceupdatedata.ttblareceupdatedata.Count > 0)
         {
            result.areceupdatedata = Areceupdatedata.BuildAreceupdatedataFromRow(pdsareceupdatedata.ttblareceupdatedata[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECEMiscCashGLETADeleteResponseAPI ARECEMiscCashGLETADelete(AsarentryARECEMiscCashGLETADeleteRequestAPI AsarentryARECEMiscCashGLETADeleteRequestAPI)
      {   
         var result = new AsarentryARECEMiscCashGLETADeleteResponseAPI();
         
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarecemisccashdataRow = pdsarecemisccashdata.ttblarecemisccashdata.NewttblarecemisccashdataRow();
         Arecemisccashdata.UpdateRowFromArecemisccashdata(ref ttblarecemisccashdataRow, AsarentryARECEMiscCashGLETADeleteRequestAPI.arecemisccashdata);
         pdsarecemisccashdata.ttblarecemisccashdata.AddttblarecemisccashdataRow((pdsarecemisccashdataDataSet.ttblarecemisccashdataRow)ttblarecemisccashdataRow);
          
         foreach (var obj in AsarentryARECEMiscCashGLETADeleteRequestAPI.gleta)
         {
            DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
            Gleta.UpdateRowFromGleta(ref ttblgletaRow, obj);
            pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
         }
          
         
         NLogLoggerP.Trace("ARECEMiscCashGLETADelete - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMiscCashGLETADelete(ref pdsContext, ref pdsarecemisccashdata, ref pdsgleta, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMiscCashGLETADelete - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecemisccashdata); 
    
         if (pdsarecemisccashdata.ttblarecemisccashdata.Count > 0)
         {
            result.arecemisccashdata = Arecemisccashdata.BuildArecemisccashdataFromRow(pdsarecemisccashdata.ttblarecemisccashdata[0]);
         }
                    
         foreach (DataRow row in pdsgleta.ttblgleta)
         {
            result.gleta.Add(Gleta.BuildGletaFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEMiscCashGLETALeaveFieldResponseAPI ARECEMiscCashGLETALeaveField(AsarentryARECEMiscCashGLETALeaveFieldRequestAPI AsarentryARECEMiscCashGLETALeaveFieldRequestAPI)
      {   
         var result = new AsarentryARECEMiscCashGLETALeaveFieldResponseAPI();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarecemisccashdataRow = pdsarecemisccashdata.ttblarecemisccashdata.NewttblarecemisccashdataRow();
         Arecemisccashdata.UpdateRowFromArecemisccashdata(ref ttblarecemisccashdataRow, AsarentryARECEMiscCashGLETALeaveFieldRequestAPI.arecemisccashdata);
         pdsarecemisccashdata.ttblarecemisccashdata.AddttblarecemisccashdataRow((pdsarecemisccashdataDataSet.ttblarecemisccashdataRow)ttblarecemisccashdataRow);
          
         DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
         Gleta.UpdateRowFromGleta(ref ttblgletaRow, AsarentryARECEMiscCashGLETALeaveFieldRequestAPI.gleta);
         pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
          
         var  cField = AsarentryARECEMiscCashGLETALeaveFieldRequestAPI.cField;
            
         
         NLogLoggerP.Trace("ARECEMiscCashGLETALeaveField - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMiscCashGLETALeaveField(ref pdsContext,  cField, ref pdsgleta, ref pdsarecemisccashdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMiscCashGLETALeaveField - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
         if (pdsarecemisccashdata.ttblarecemisccashdata.Count > 0)
         {
            result.arecemisccashdata = Arecemisccashdata.BuildArecemisccashdataFromRow(pdsarecemisccashdata.ttblarecemisccashdata[0]);
         }
                    
         if (pdsgleta.ttblgleta.Count > 0)
         {
            result.gleta = Gleta.BuildGletaFromRow(pdsgleta.ttblgleta[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARECEMiscCashInitializeResponseAPI ARECEMiscCashInitialize(AsarentryARECEMiscCashInitializeRequestAPI AsarentryARECEMiscCashInitializeRequestAPI)
      {   
         var result = new AsarentryARECEMiscCashInitializeResponseAPI();
         
         var pdsglopenjournal = new pdsglopenjournalDataSet();
            
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEMiscCashInitializeRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEMiscCashInitializeRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         DataRow ttblglopenjournalresultsRow = pdsglopenjournal.ttblglopenjournalresults.NewttblglopenjournalresultsRow();
         Glopenjournalresults.UpdateRowFromGlopenjournalresults(ref ttblglopenjournalresultsRow, AsarentryARECEMiscCashInitializeRequestAPI.glopenjournalresults);
         pdsglopenjournal.ttblglopenjournalresults.AddttblglopenjournalresultsRow((pdsglopenjournalDataSet.ttblglopenjournalresultsRow)ttblglopenjournalresultsRow);
          
         
         NLogLoggerP.Trace("ARECEMiscCashInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMiscCashInitialize(ref pdsContext,  pdsglopenjournal, ref pdsareceglobaldata, ref pdsarecemaindata, out pdsarecemisccashdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMiscCashInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglopenjournal); 
    
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         if (pdsarecemisccashdata.ttblarecemisccashdata.Count > 0)
         {
            result.arecemisccashdata = Arecemisccashdata.BuildArecemisccashdataFromRow(pdsarecemisccashdata.ttblarecemisccashdata[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Arecemisccashdata ARECEMiscCashLeaveField(AsarentryARECEMiscCashLeaveFieldRequestAPI AsarentryARECEMiscCashLeaveFieldRequestAPI)
      {   
         var result = new Arecemisccashdata();
         
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarecemisccashdataRow = pdsarecemisccashdata.ttblarecemisccashdata.NewttblarecemisccashdataRow();
         Arecemisccashdata.UpdateRowFromArecemisccashdata(ref ttblarecemisccashdataRow, AsarentryARECEMiscCashLeaveFieldRequestAPI.arecemisccashdata);
         pdsarecemisccashdata.ttblarecemisccashdata.AddttblarecemisccashdataRow((pdsarecemisccashdataDataSet.ttblarecemisccashdataRow)ttblarecemisccashdataRow);
          
         var  cField = AsarentryARECEMiscCashLeaveFieldRequestAPI.cField;
            
         
         NLogLoggerP.Trace("ARECEMiscCashLeaveField - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMiscCashLeaveField(ref pdsContext,  cField, ref pdsarecemisccashdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMiscCashLeaveField - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecemisccashdata); 
    
         if (pdsarecemisccashdata.ttblarecemisccashdata.Count > 0) 
         { 
             result = Arecemisccashdata.BuildArecemisccashdataFromRow(pdsarecemisccashdata.ttblarecemisccashdata[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARECEMiscCashValidateResponseAPI ARECEMiscCashValidate(AsarentryARECEMiscCashValidateRequestAPI AsarentryARECEMiscCashValidateRequestAPI)
      {   
         var result = new AsarentryARECEMiscCashValidateResponseAPI();
         
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsglopenjournal = new pdsglopenjournalDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         var pdsglupdate = new pdsglupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cCreditRefer = string.Empty;
         decimal deCreditAmount = 0;
         string cDivnos = string.Empty;
         string cDivamounts = string.Empty;
         bool lOK = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEMiscCashValidateRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblarecemisccashdataRow = pdsarecemisccashdata.ttblarecemisccashdata.NewttblarecemisccashdataRow();
         Arecemisccashdata.UpdateRowFromArecemisccashdata(ref ttblarecemisccashdataRow, AsarentryARECEMiscCashValidateRequestAPI.arecemisccashdata);
         pdsarecemisccashdata.ttblarecemisccashdata.AddttblarecemisccashdataRow((pdsarecemisccashdataDataSet.ttblarecemisccashdataRow)ttblarecemisccashdataRow);
          
         foreach (var obj in AsarentryARECEMiscCashValidateRequestAPI.gleta)
         {
            DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
            Gleta.UpdateRowFromGleta(ref ttblgletaRow, obj);
            pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
         }
          
         DataRow ttblglopenjournalresultsRow = pdsglopenjournal.ttblglopenjournalresults.NewttblglopenjournalresultsRow();
         Glopenjournalresults.UpdateRowFromGlopenjournalresults(ref ttblglopenjournalresultsRow, AsarentryARECEMiscCashValidateRequestAPI.glopenjournalresults);
         pdsglopenjournal.ttblglopenjournalresults.AddttblglopenjournalresultsRow((pdsglopenjournalDataSet.ttblglopenjournalresultsRow)ttblglopenjournalresultsRow);
          
         
         NLogLoggerP.Trace("ARECEMiscCashValidate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEMiscCashValidate(ref pdsContext,  pdsareceglobaldata,  pdsglopenjournal,  pdsgleta,  pdsarecemisccashdata, out cCreditRefer, out deCreditAmount, out cDivnos, out cDivamounts, out lOK, out pdsglupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEMiscCashValidate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceglobaldata); 
    
         foreach (DataRow row in pdsglupdate.ttblglupdate)
         {
            result.glupdate.Add(Glupdate.BuildGlupdateFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.cCreditRefer = cCreditRefer;
         result.deCreditAmount = deCreditAmount;
         result.cDivnos = cDivnos;
         result.cDivamounts = cDivamounts;
         result.lOK = lOK;
          
         return result;
          
      }

      public AsarentryARECEUpdateProcessResponseAPI ARECEUpdateProcess(AsarentryARECEUpdateProcessRequestAPI AsarentryARECEUpdateProcessRequestAPI)
      {   
         var result = new AsarentryARECEUpdateProcessResponseAPI();
         
         var pdsarexchrate = new pdsarexchrateDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsareceglobaldata = new pdsareceglobaldataDataSet();
            
         var pdsarecemaindata = new pdsarecemaindataDataSet();
            
         var pdsarececheckdata = new pdsarececheckdataDataSet();
            
         var pdsareceupdatedata = new pdsareceupdatedataDataSet();
            
         var pdsareceinvoicesdata = new pdsareceinvoicesdataDataSet();
            
         var pdsareceinvoiceslist = new pdsareceinvoiceslistDataSet();
            
         var pdsarecesimcdiv = new pdsarecesimcdivDataSet();
            
         var pdsarecemisccashdata = new pdsarecemisccashdataDataSet();
            
         var pdsarececoddata = new pdsarececoddataDataSet();
            
         var pdsglopenjournal = new pdsglopenjournalDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarececheckdataRow = pdsarececheckdata.ttblarececheckdata.NewttblarececheckdataRow();
         Arececheckdata.UpdateRowFromArececheckdata(ref ttblarececheckdataRow, AsarentryARECEUpdateProcessRequestAPI.arececheckdata);
         pdsarececheckdata.ttblarececheckdata.AddttblarececheckdataRow((pdsarececheckdataDataSet.ttblarececheckdataRow)ttblarececheckdataRow);
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.arececoddata)
         {
            DataRow ttblarececoddataRow = pdsarececoddata.ttblarececoddata.NewttblarececoddataRow();
            Arececoddata.UpdateRowFromArececoddata(ref ttblarececoddataRow, obj);
            pdsarececoddata.ttblarececoddata.AddttblarececoddataRow((pdsarececoddataDataSet.ttblarececoddataRow)ttblarececoddataRow);
         }
          
         DataRow ttblareceglobaldataRow = pdsareceglobaldata.ttblareceglobaldata.NewttblareceglobaldataRow();
         Areceglobaldata.UpdateRowFromAreceglobaldata(ref ttblareceglobaldataRow, AsarentryARECEUpdateProcessRequestAPI.areceglobaldata);
         pdsareceglobaldata.ttblareceglobaldata.AddttblareceglobaldataRow((pdsareceglobaldataDataSet.ttblareceglobaldataRow)ttblareceglobaldataRow);
          
         DataRow ttblareceinvoicesdataRow = pdsareceinvoicesdata.ttblareceinvoicesdata.NewttblareceinvoicesdataRow();
         Areceinvoicesdata.UpdateRowFromAreceinvoicesdata(ref ttblareceinvoicesdataRow, AsarentryARECEUpdateProcessRequestAPI.areceinvoicesdata);
         pdsareceinvoicesdata.ttblareceinvoicesdata.AddttblareceinvoicesdataRow((pdsareceinvoicesdataDataSet.ttblareceinvoicesdataRow)ttblareceinvoicesdataRow);
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.areceinvoiceslist)
         {
            DataRow ttblareceinvoiceslistRow = pdsareceinvoiceslist.ttblareceinvoiceslist.NewttblareceinvoiceslistRow();
            Areceinvoiceslist.UpdateRowFromAreceinvoiceslist(ref ttblareceinvoiceslistRow, obj);
            pdsareceinvoiceslist.ttblareceinvoiceslist.AddttblareceinvoiceslistRow((pdsareceinvoiceslistDataSet.ttblareceinvoiceslistRow)ttblareceinvoiceslistRow);
         }
          
         DataRow ttblarecemaindataRow = pdsarecemaindata.ttblarecemaindata.NewttblarecemaindataRow();
         Arecemaindata.UpdateRowFromArecemaindata(ref ttblarecemaindataRow, AsarentryARECEUpdateProcessRequestAPI.arecemaindata);
         pdsarecemaindata.ttblarecemaindata.AddttblarecemaindataRow((pdsarecemaindataDataSet.ttblarecemaindataRow)ttblarecemaindataRow);
          
         DataRow ttblarecemisccashdataRow = pdsarecemisccashdata.ttblarecemisccashdata.NewttblarecemisccashdataRow();
         Arecemisccashdata.UpdateRowFromArecemisccashdata(ref ttblarecemisccashdataRow, AsarentryARECEUpdateProcessRequestAPI.arecemisccashdata);
         pdsarecemisccashdata.ttblarecemisccashdata.AddttblarecemisccashdataRow((pdsarecemisccashdataDataSet.ttblarecemisccashdataRow)ttblarecemisccashdataRow);
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.arecesimcdiv)
         {
            DataRow ttblarecesimcdivRow = pdsarecesimcdiv.ttblarecesimcdiv.NewttblarecesimcdivRow();
            Arecesimcdiv.UpdateRowFromArecesimcdiv(ref ttblarecesimcdivRow, obj);
            pdsarecesimcdiv.ttblarecesimcdiv.AddttblarecesimcdivRow((pdsarecesimcdivDataSet.ttblarecesimcdivRow)ttblarecesimcdivRow);
         }
          
         DataRow ttblareceupdatedataRow = pdsareceupdatedata.ttblareceupdatedata.NewttblareceupdatedataRow();
         Areceupdatedata.UpdateRowFromAreceupdatedata(ref ttblareceupdatedataRow, AsarentryARECEUpdateProcessRequestAPI.areceupdatedata);
         pdsareceupdatedata.ttblareceupdatedata.AddttblareceupdatedataRow((pdsareceupdatedataDataSet.ttblareceupdatedataRow)ttblareceupdatedataRow);
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         DataRow ttblarexchrateRow = pdsarexchrate.ttblarexchrate.NewttblarexchrateRow();
         Arexchrate.UpdateRowFromArexchrate(ref ttblarexchrateRow, AsarentryARECEUpdateProcessRequestAPI.arexchrate);
         pdsarexchrate.ttblarexchrate.AddttblarexchrateRow((pdsarexchrateDataSet.ttblarexchrateRow)ttblarexchrateRow);
          
         foreach (var obj in AsarentryARECEUpdateProcessRequestAPI.gleta)
         {
            DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
            Gleta.UpdateRowFromGleta(ref ttblgletaRow, obj);
            pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
         }
          
         DataRow ttblgletacriteriaRow = pdsgleta.ttblgletacriteria.NewttblgletacriteriaRow();
         Gletacriteria.UpdateRowFromGletacriteria(ref ttblgletacriteriaRow, AsarentryARECEUpdateProcessRequestAPI.gletacriteria);
         pdsgleta.ttblgletacriteria.AddttblgletacriteriaRow((pdsgletaDataSet.ttblgletacriteriaRow)ttblgletacriteriaRow);
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AsarentryARECEUpdateProcessRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         DataRow ttblglopenjournalcriteriaRow = pdsglopenjournal.ttblglopenjournalcriteria.NewttblglopenjournalcriteriaRow();
         Glopenjournalcriteria.UpdateRowFromGlopenjournalcriteria(ref ttblglopenjournalcriteriaRow, AsarentryARECEUpdateProcessRequestAPI.glopenjournalcriteria);
         pdsglopenjournal.ttblglopenjournalcriteria.AddttblglopenjournalcriteriaRow((pdsglopenjournalDataSet.ttblglopenjournalcriteriaRow)ttblglopenjournalcriteriaRow);
          
         DataRow ttblglopenjournalresultsRow = pdsglopenjournal.ttblglopenjournalresults.NewttblglopenjournalresultsRow();
         Glopenjournalresults.UpdateRowFromGlopenjournalresults(ref ttblglopenjournalresultsRow, AsarentryARECEUpdateProcessRequestAPI.glopenjournalresults);
         pdsglopenjournal.ttblglopenjournalresults.AddttblglopenjournalresultsRow((pdsglopenjournalDataSet.ttblglopenjournalresultsRow)ttblglopenjournalresultsRow);
          
         var  pvJrnlno = AsarentryARECEUpdateProcessRequestAPI.pvJrnlno;
            
         var  pvCodproofopt = AsarentryARECEUpdateProcessRequestAPI.pvCodproofopt;
            
         
         NLogLoggerP.Trace("ARECEUpdateProcess - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEUpdateProcess(ref pdsContext,  pvJrnlno,  pvCodproofopt,  pdsarexchrate,  pdsgleta, ref pdsareceglobaldata, ref pdsarecemaindata, ref pdsarececheckdata, ref pdsareceupdatedata, ref pdsareceinvoicesdata, ref pdsareceinvoiceslist, ref pdsarecesimcdiv, ref pdsarecemisccashdata, ref pdsarececoddata, ref pdsglopenjournal, ref pdsarecewodata, ref pdsareceworeport, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEUpdateProcess - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarexchrate); 
    
         if (pdsarececheckdata.ttblarececheckdata.Count > 0)
         {
            result.arececheckdata = Arececheckdata.BuildArececheckdataFromRow(pdsarececheckdata.ttblarececheckdata[0]);
         }
                    
         foreach (DataRow row in pdsarececoddata.ttblarececoddata)
         {
            result.arececoddata.Add(Arececoddata.BuildArececoddataFromRow(row));
         }     
         if (pdsareceglobaldata.ttblareceglobaldata.Count > 0)
         {
            result.areceglobaldata = Areceglobaldata.BuildAreceglobaldataFromRow(pdsareceglobaldata.ttblareceglobaldata[0]);
         }
                    
         if (pdsareceinvoicesdata.ttblareceinvoicesdata.Count > 0)
         {
            result.areceinvoicesdata = Areceinvoicesdata.BuildAreceinvoicesdataFromRow(pdsareceinvoicesdata.ttblareceinvoicesdata[0]);
         }
                    
         foreach (DataRow row in pdsareceinvoiceslist.ttblareceinvoiceslist)
         {
            result.areceinvoiceslist.Add(Areceinvoiceslist.BuildAreceinvoiceslistFromRow(row));
         }     
         if (pdsarecemaindata.ttblarecemaindata.Count > 0)
         {
            result.arecemaindata = Arecemaindata.BuildArecemaindataFromRow(pdsarecemaindata.ttblarecemaindata[0]);
         }
                    
         if (pdsarecemisccashdata.ttblarecemisccashdata.Count > 0)
         {
            result.arecemisccashdata = Arecemisccashdata.BuildArecemisccashdataFromRow(pdsarecemisccashdata.ttblarecemisccashdata[0]);
         }
                    
         foreach (DataRow row in pdsarecesimcdiv.ttblarecesimcdiv)
         {
            result.arecesimcdiv.Add(Arecesimcdiv.BuildArecesimcdivFromRow(row));
         }     
         if (pdsareceupdatedata.ttblareceupdatedata.Count > 0)
         {
            result.areceupdatedata = Areceupdatedata.BuildAreceupdatedataFromRow(pdsareceupdatedata.ttblareceupdatedata[0]);
         }
                    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
         if (pdsglopenjournal.ttblglopenjournalcriteria.Count > 0)
         {
            result.glopenjournalcriteria = Glopenjournalcriteria.BuildGlopenjournalcriteriaFromRow(pdsglopenjournal.ttblglopenjournalcriteria[0]);
         }
                    
         if (pdsglopenjournal.ttblglopenjournalresults.Count > 0)
         {
            result.glopenjournalresults = Glopenjournalresults.BuildGlopenjournalresultsFromRow(pdsglopenjournal.ttblglopenjournalresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Areceupdatescrnsingle ARECEUpdateScrnFieldLeave(AsarentryARECEUpdateScrnFieldLeaveRequestAPI AsarentryARECEUpdateScrnFieldLeaveRequestAPI)
      {   
         var result = new Areceupdatescrnsingle();
         
         var pdsareceupdatescrncriteria = new pdsareceupdatescrncriteriaDataSet();
            
         var pdsareceupdatescrnsingle = new pdsareceupdatescrnsingleDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceupdatescrncriteriaRow = pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.NewttblareceupdatescrncriteriaRow();
         Areceupdatescrncriteria.UpdateRowFromAreceupdatescrncriteria(ref ttblareceupdatescrncriteriaRow, AsarentryARECEUpdateScrnFieldLeaveRequestAPI.areceupdatescrncriteria);
         pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.AddttblareceupdatescrncriteriaRow((pdsareceupdatescrncriteriaDataSet.ttblareceupdatescrncriteriaRow)ttblareceupdatescrncriteriaRow);
          
         DataRow ttblareceupdatescrnsingleRow = pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.NewttblareceupdatescrnsingleRow();
         Areceupdatescrnsingle.UpdateRowFromAreceupdatescrnsingle(ref ttblareceupdatescrnsingleRow, AsarentryARECEUpdateScrnFieldLeaveRequestAPI.areceupdatescrnsingle);
         pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.AddttblareceupdatescrnsingleRow((pdsareceupdatescrnsingleDataSet.ttblareceupdatescrnsingleRow)ttblareceupdatescrnsingleRow);
          
         var  pvField = AsarentryARECEUpdateScrnFieldLeaveRequestAPI.pvField;
            
         
         NLogLoggerP.Trace("ARECEUpdateScrnFieldLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEUpdateScrnFieldLeave(ref pdsContext,  pvField,  pdsareceupdatescrncriteria, ref pdsareceupdatescrnsingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEUpdateScrnFieldLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceupdatescrncriteria); 
    
         if (pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.Count > 0) 
         { 
             result = Areceupdatescrnsingle.BuildAreceupdatescrnsingleFromRow(pdsareceupdatescrnsingle.ttblareceupdatescrnsingle[0]);
         } 
              
          
         return result;
          
      }

      public Areceupdatescrnsingle ARECEUpdateScrnInitialize(Areceupdatescrncriteria areceupdatescrncriteria)
      {   
         var result = new Areceupdatescrnsingle();
         
         var pdsareceupdatescrncriteria = new pdsareceupdatescrncriteriaDataSet();
            
         var pdsareceupdatescrnsingle = new pdsareceupdatescrnsingleDataSet();
            
         DataRow ttblareceupdatescrncriteriaCriteria = pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.NewttblareceupdatescrncriteriaRow();
         Areceupdatescrncriteria.UpdateRowFromAreceupdatescrncriteria(ref ttblareceupdatescrncriteriaCriteria, areceupdatescrncriteria);
         pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.AddttblareceupdatescrncriteriaRow((pdsareceupdatescrncriteriaDataSet.ttblareceupdatescrncriteriaRow)ttblareceupdatescrncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARECEUpdateScrnInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEUpdateScrnInitialize(ref pdsContext,  pdsareceupdatescrncriteria, out pdsareceupdatescrnsingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEUpdateScrnInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceupdatescrncriteria); 
    
         if (pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.Count > 0) 
         { 
             result = Areceupdatescrnsingle.BuildAreceupdatescrnsingleFromRow(pdsareceupdatescrnsingle.ttblareceupdatescrnsingle[0]);
         } 
              
          
         return result;
          
      }

      public Areceupdatescrnoutput ARECEUpdateScrnOK(AsarentryARECEUpdateScrnOKRequestAPI AsarentryARECEUpdateScrnOKRequestAPI)
      {   
         var result = new Areceupdatescrnoutput();
         
         var pdsareceupdatescrncriteria = new pdsareceupdatescrncriteriaDataSet();
            
         var pdsareceupdatescrnsingle = new pdsareceupdatescrnsingleDataSet();
            
         var pdsareceupdatescrnoutput = new pdsareceupdatescrnoutputDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblareceupdatescrncriteriaRow = pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.NewttblareceupdatescrncriteriaRow();
         Areceupdatescrncriteria.UpdateRowFromAreceupdatescrncriteria(ref ttblareceupdatescrncriteriaRow, AsarentryARECEUpdateScrnOKRequestAPI.areceupdatescrncriteria);
         pdsareceupdatescrncriteria.ttblareceupdatescrncriteria.AddttblareceupdatescrncriteriaRow((pdsareceupdatescrncriteriaDataSet.ttblareceupdatescrncriteriaRow)ttblareceupdatescrncriteriaRow);
          
         DataRow ttblareceupdatescrnsingleRow = pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.NewttblareceupdatescrnsingleRow();
         Areceupdatescrnsingle.UpdateRowFromAreceupdatescrnsingle(ref ttblareceupdatescrnsingleRow, AsarentryARECEUpdateScrnOKRequestAPI.areceupdatescrnsingle);
         pdsareceupdatescrnsingle.ttblareceupdatescrnsingle.AddttblareceupdatescrnsingleRow((pdsareceupdatescrnsingleDataSet.ttblareceupdatescrnsingleRow)ttblareceupdatescrnsingleRow);
          
         
         NLogLoggerP.Trace("ARECEUpdateScrnOK - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEUpdateScrnOK(ref pdsContext,  pdsareceupdatescrncriteria,  pdsareceupdatescrnsingle, out pdsareceupdatescrnoutput, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEUpdateScrnOK - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareceupdatescrncriteria); 
    
         if (pdsareceupdatescrnoutput.ttblareceupdatescrnoutput.Count > 0) 
         { 
             result = Areceupdatescrnoutput.BuildAreceupdatescrnoutputFromRow(pdsareceupdatescrnoutput.ttblareceupdatescrnoutput[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARECEWOAddResponseAPI ARECEWOAdd(AsarentryARECEWOAddRequestAPI AsarentryARECEWOAddRequestAPI)
      {   
         var result = new AsarentryARECEWOAddResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodisplay = new pdsarecewodisplayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOAddRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         DataRow ttblarecewodisplayRow = pdsarecewodisplay.ttblarecewodisplay.NewttblarecewodisplayRow();
         Arecewodisplay.UpdateRowFromArecewodisplay(ref ttblarecewodisplayRow, AsarentryARECEWOAddRequestAPI.arecewodisplay);
         pdsarecewodisplay.ttblarecewodisplay.AddttblarecewodisplayRow((pdsarecewodisplayDataSet.ttblarecewodisplayRow)ttblarecewodisplayRow);
          
         foreach (var obj in AsarentryARECEWOAddRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEWOAdd - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOAdd(ref pdsContext, ref pdsarecewodata, ref pdsareceworeport, ref pdsarecewodisplay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOAdd - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         if (pdsarecewodisplay.ttblarecewodisplay.Count > 0)
         {
            result.arecewodisplay = Arecewodisplay.BuildArecewodisplayFromRow(pdsarecewodisplay.ttblarecewodisplay[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEWOCancelResponseAPI ARECEWOCancel(AsarentryARECEWOCancelRequestAPI AsarentryARECEWOCancelRequestAPI)
      {   
         var result = new AsarentryARECEWOCancelResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOCancelRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECEWOCancelRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEWOCancel - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOCancel(ref pdsContext, ref pdsarecewodata, ref pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOCancel - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEWOFieldLeaveResponseAPI ARECEWOFieldLeave(AsarentryARECEWOFieldLeaveRequestAPI AsarentryARECEWOFieldLeaveRequestAPI)
      {   
         var result = new AsarentryARECEWOFieldLeaveResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodisplay = new pdsarecewodisplayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOFieldLeaveRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         DataRow ttblarecewodisplayRow = pdsarecewodisplay.ttblarecewodisplay.NewttblarecewodisplayRow();
         Arecewodisplay.UpdateRowFromArecewodisplay(ref ttblarecewodisplayRow, AsarentryARECEWOFieldLeaveRequestAPI.arecewodisplay);
         pdsarecewodisplay.ttblarecewodisplay.AddttblarecewodisplayRow((pdsarecewodisplayDataSet.ttblarecewodisplayRow)ttblarecewodisplayRow);
          
         foreach (var obj in AsarentryARECEWOFieldLeaveRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         var  pvSeqno = AsarentryARECEWOFieldLeaveRequestAPI.pvSeqno;
            
         var  pvField = AsarentryARECEWOFieldLeaveRequestAPI.pvField;
            
         var  pvNewfl = AsarentryARECEWOFieldLeaveRequestAPI.pvNewfl;
            
         
         NLogLoggerP.Trace("ARECEWOFieldLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOFieldLeave(ref pdsContext,  pvSeqno,  pvField,  pvNewfl, ref pdsarecewodata, ref pdsareceworeport, ref pdsarecewodisplay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOFieldLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         if (pdsarecewodisplay.ttblarecewodisplay.Count > 0)
         {
            result.arecewodisplay = Arecewodisplay.BuildArecewodisplayFromRow(pdsarecewodisplay.ttblarecewodisplay[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEWOInitializeResponseAPI ARECEWOInitialize(AsarentryARECEWOInitializeRequestAPI AsarentryARECEWOInitializeRequestAPI)
      {   
         var result = new AsarentryARECEWOInitializeResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodisplay = new pdsarecewodisplayDataSet();
            
         decimal dProofAdjustment = 0;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOInitializeRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         foreach (var obj in AsarentryARECEWOInitializeRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEWOInitialize - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOInitialize(ref pdsContext, ref pdsarecewodata, ref pdsareceworeport, out pdsarecewodisplay, out dProofAdjustment, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOInitialize - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         if (pdsarecewodisplay.ttblarecewodisplay.Count > 0)
         {
            result.arecewodisplay = Arecewodisplay.BuildArecewodisplayFromRow(pdsarecewodisplay.ttblarecewodisplay[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
         result.dProofAdjustment = dProofAdjustment;
          
         return result;
          
      }

      public AsarentryARECEWOOKResponseAPI ARECEWOOK(AsarentryARECEWOOKRequestAPI AsarentryARECEWOOKRequestAPI)
      {   
         var result = new AsarentryARECEWOOKResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodisplay = new pdsarecewodisplayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOOKRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         DataRow ttblarecewodisplayRow = pdsarecewodisplay.ttblarecewodisplay.NewttblarecewodisplayRow();
         Arecewodisplay.UpdateRowFromArecewodisplay(ref ttblarecewodisplayRow, AsarentryARECEWOOKRequestAPI.arecewodisplay);
         pdsarecewodisplay.ttblarecewodisplay.AddttblarecewodisplayRow((pdsarecewodisplayDataSet.ttblarecewodisplayRow)ttblarecewodisplayRow);
          
         foreach (var obj in AsarentryARECEWOOKRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEWOOK - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOOK(ref pdsContext, ref pdsarecewodata, ref pdsareceworeport, ref pdsarecewodisplay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOOK - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         if (pdsarecewodisplay.ttblarecewodisplay.Count > 0)
         {
            result.arecewodisplay = Arecewodisplay.BuildArecewodisplayFromRow(pdsarecewodisplay.ttblarecewodisplay[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARECEWOWriteoffTaxResponseAPI ARECEWOWriteoffTax(AsarentryARECEWOWriteoffTaxRequestAPI AsarentryARECEWOWriteoffTaxRequestAPI)
      {   
         var result = new AsarentryARECEWOWriteoffTaxResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarecewodisplay = new pdsarecewodisplayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARECEWOWriteoffTaxRequestAPI.arecewodata)
         {
            DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
            Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, obj);
            pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
         }
          
         DataRow ttblarecewodisplayRow = pdsarecewodisplay.ttblarecewodisplay.NewttblarecewodisplayRow();
         Arecewodisplay.UpdateRowFromArecewodisplay(ref ttblarecewodisplayRow, AsarentryARECEWOWriteoffTaxRequestAPI.arecewodisplay);
         pdsarecewodisplay.ttblarecewodisplay.AddttblarecewodisplayRow((pdsarecewodisplayDataSet.ttblarecewodisplayRow)ttblarecewodisplayRow);
          
         foreach (var obj in AsarentryARECEWOWriteoffTaxRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         
         NLogLoggerP.Trace("ARECEWOWriteoffTax - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARECEWOWriteoffTax(ref pdsContext, ref pdsarecewodata, ref pdsareceworeport, ref pdsarecewodisplay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARECEWOWriteoffTax - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         foreach (DataRow row in pdsarecewodata.ttblarecewodata)
         {
            result.arecewodata.Add(Arecewodata.BuildArecewodataFromRow(row));
         }     
         if (pdsarecewodisplay.ttblarecewodisplay.Count > 0)
         {
            result.arecewodisplay = Arecewodisplay.BuildArecewodisplayFromRow(pdsarecewodisplay.ttblarecewodisplay[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARELEAretAddResponseAPI ARELEAretAdd(AsarentryARELEAretAddRequestAPI AsarentryARELEAretAddRequestAPI)
      {   
         var result = new AsarentryARELEAretAddResponseAPI();
         
         var pdsarelearetadd = new pdsarelearetaddDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblarelearetcriteriaRow = pdsarelearetadd.ttblarelearetcriteria.NewttblarelearetcriteriaRow();
         Arelearetcriteria.UpdateRowFromArelearetcriteria(ref ttblarelearetcriteriaRow, AsarentryARELEAretAddRequestAPI.arelearetcriteria);
         pdsarelearetadd.ttblarelearetcriteria.AddttblarelearetcriteriaRow((pdsarelearetaddDataSet.ttblarelearetcriteriaRow)ttblarelearetcriteriaRow);
          
         foreach (var obj in AsarentryARELEAretAddRequestAPI.arelearetresults)
         {
            DataRow ttblarelearetresultsRow = pdsarelearetadd.ttblarelearetresults.NewttblarelearetresultsRow();
            Arelearetresults.UpdateRowFromArelearetresults(ref ttblarelearetresultsRow, obj);
            pdsarelearetadd.ttblarelearetresults.AddttblarelearetresultsRow((pdsarelearetaddDataSet.ttblarelearetresultsRow)ttblarelearetresultsRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEAretAddRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEAretAdd - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEAretAdd(ref pdsContext,  pdsarelearetadd, ref pdsarelecheckhdr, out pdsarelecheckdtl, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ARELEAretAdd - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelearetadd); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsarentryARELEAretLoadResponseAPI ARELEAretLoad(Arelearetcriteria arelearetcriteria)
      {   
         var result = new AsarentryARELEAretLoadResponseAPI();
         
         var pdsarelearetadd = new pdsarelearetaddDataSet();
            
         DataRow ttblarelearetcriteriaCriteria = pdsarelearetadd.ttblarelearetcriteria.NewttblarelearetcriteriaRow();
         Arelearetcriteria.UpdateRowFromArelearetcriteria(ref ttblarelearetcriteriaCriteria, arelearetcriteria);
         pdsarelearetadd.ttblarelearetcriteria.AddttblarelearetcriteriaRow((pdsarelearetaddDataSet.ttblarelearetcriteriaRow)ttblarelearetcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("ARELEAretLoad - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEAretLoad(ref pdsContext, ref pdsarelearetadd, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("ARELEAretLoad - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelearetadd); 
    
         foreach (DataRow row in pdsarelearetadd.ttblarelearetresults)
         {
            result.arelearetresults.Add(Arelearetresults.BuildArelearetresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Arelecheckhdr ARELECalcProof(AsarentryARELECalcProofRequestAPI AsarentryARELECalcProofRequestAPI)
      {   
         var result = new Arelecheckhdr();
         
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELECalcProofRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELECalcProofRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELECalcProof - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELECalcProof(ref pdsContext,  pdsarelecheckdtl, ref pdsarelecheckhdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELECalcProof - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckdtl); 
    
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0) 
         { 
             result = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARELECheckLoadResponseAPI ARELECheckLoad(string cBatch, decimal dCustno, int iCheckNo, int iSecure)
      {   
         var result = new AsarentryARELECheckLoadResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARELECheckLoad - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELECheckLoad(ref pdsContext,  cBatch,  dCustno,  iCheckNo,  iSecure, out pdsarelecheckhdr, out pdsarelecheckdtl, out pdsarelecheckdtlwo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELECheckLoad - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELECheckSaveVerifyResponseAPI ARELECheckSaveVerify(AsarentryARELECheckSaveVerifyRequestAPI AsarentryARELECheckSaveVerifyRequestAPI)
      {   
         var result = new AsarentryARELECheckSaveVerifyResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         bool lAskQuestion = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELECheckSaveVerifyRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELECheckSaveVerifyRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELECheckSaveVerify - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELECheckSaveVerify(ref pdsContext, ref pdsarelecheckhdr, ref pdsarelecheckdtl, out lAskQuestion, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELECheckSaveVerify - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
         result.lAskQuestion = lAskQuestion;
          
         return result;
          
      }

      public AsarentryARELECheckSaveFinalResponseAPI ARELECheckSaveFinal(AsarentryARELECheckSaveFinalRequestAPI AsarentryARELECheckSaveFinalRequestAPI)
      {   
         var result = new AsarentryARELECheckSaveFinalResponseAPI();
         
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELECheckSaveFinalRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         foreach (var obj in AsarentryARELECheckSaveFinalRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELECheckSaveFinalRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELECheckSaveFinal - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELECheckSaveFinal(ref pdsContext,  pdsarelecheckdtlwo, ref pdsarelecheckhdr, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELECheckSaveFinal - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckdtlwo); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELECustomerChangeResponseAPI ARELECustomerChange(AsarentryARELECustomerChangeRequestAPI AsarentryARELECustomerChangeRequestAPI)
      {   
         var result = new AsarentryARELECustomerChangeResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELECustomerChangeRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         foreach (var obj in AsarentryARELECustomerChangeRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELECustomerChangeRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         var  dNewCustno = AsarentryARELECustomerChangeRequestAPI.dNewCustno;
            
         
         NLogLoggerP.Trace("ARELECustomerChange - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELECustomerChange(ref pdsContext,  dNewCustno, ref pdsarelecheckhdr, ref pdsarelecheckdtl, ref pdsarelecheckdtlwo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELECustomerChange - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDebitAddResponseAPI ARELEDebitAdd(AsarentryARELEDebitAddRequestAPI AsarentryARELEDebitAddRequestAPI)
      {   
         var result = new AsarentryARELEDebitAddResponseAPI();
         
         var pdsareledebitadd = new pdsareledebitaddDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDebitAddRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         DataRow ttblareledebitaddRow = pdsareledebitadd.ttblareledebitadd.NewttblareledebitaddRow();
         Areledebitadd.UpdateRowFromAreledebitadd(ref ttblareledebitaddRow, AsarentryARELEDebitAddRequestAPI.areledebitadd);
         pdsareledebitadd.ttblareledebitadd.AddttblareledebitaddRow((pdsareledebitaddDataSet.ttblareledebitaddRow)ttblareledebitaddRow);
          
         
         NLogLoggerP.Trace("ARELEDebitAdd - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDebitAdd(ref pdsContext,  pdsareledebitadd, ref pdsarelecheckhdr, out pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDebitAdd - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsareledebitadd); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public Arelecheckdtl ARELEDtlChargeBackReason(Arelecheckdtl arelecheckdtl)
      {   
         var result = new Arelecheckdtl();
         
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         DataRow ttblarelecheckdtlCriteria = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlCriteria, arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARELEDtlChargeBackReason - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlChargeBackReason(ref pdsContext, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlChargeBackReason - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckdtl); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0) 
         { 
             result = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARELEDtlRecallDiscountResponseAPI ARELEDtlRecallDiscount(AsarentryARELEDtlRecallDiscountRequestAPI AsarentryARELEDtlRecallDiscountRequestAPI)
      {   
         var result = new AsarentryARELEDtlRecallDiscountResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlRecallDiscountRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlRecallDiscountRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlRecallDiscount - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlRecallDiscount(ref pdsContext, ref pdsarelecheckhdr, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlRecallDiscount - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDtlRowEntryResponseAPI ARELEDtlRowEntry(AsarentryARELEDtlRowEntryRequestAPI AsarentryARELEDtlRowEntryRequestAPI)
      {   
         var result = new AsarentryARELEDtlRowEntryResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlRowEntryRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         foreach (var obj in AsarentryARELEDtlRowEntryRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlRowEntryRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlRowEntry - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlRowEntry(ref pdsContext, ref pdsarelecheckhdr, ref pdsarelecheckdtl, ref pdsarelecheckdtlwo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlRowEntry - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDtlRowLeaveFinalResponseAPI ARELEDtlRowLeaveFinal(AsarentryARELEDtlRowLeaveFinalRequestAPI AsarentryARELEDtlRowLeaveFinalRequestAPI)
      {   
         var result = new AsarentryARELEDtlRowLeaveFinalResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlRowLeaveFinalRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlRowLeaveFinalRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlRowLeaveFinal - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlRowLeaveFinal(ref pdsContext, ref pdsarelecheckhdr, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlRowLeaveFinal - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDtlRowLeaveVerifyResponseAPI ARELEDtlRowLeaveVerify(AsarentryARELEDtlRowLeaveVerifyRequestAPI AsarentryARELEDtlRowLeaveVerifyRequestAPI)
      {   
         var result = new AsarentryARELEDtlRowLeaveVerifyResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         bool lAskQuestion = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlRowLeaveVerifyRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         foreach (var obj in AsarentryARELEDtlRowLeaveVerifyRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlRowLeaveVerifyRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlRowLeaveVerify - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlRowLeaveVerify(ref pdsContext,  pdsarelecheckhdr, ref pdsarelecheckdtl, ref pdsarelecheckdtlwo, out lAskQuestion, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlRowLeaveVerify - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         result.lAskQuestion = lAskQuestion;
          
         return result;
          
      }

      public Arelecheckdtl ARELEDtlSuspendUnsuspend(Arelecheckdtl arelecheckdtl)
      {   
         var result = new Arelecheckdtl();
         
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         DataRow ttblarelecheckdtlCriteria = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlCriteria, arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARELEDtlSuspendUnsuspend - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlSuspendUnsuspend(ref pdsContext, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlSuspendUnsuspend - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckdtl); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0) 
         { 
             result = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARELEDtlUndoChangesResponseAPI ARELEDtlUndoChanges(AsarentryARELEDtlUndoChangesRequestAPI AsarentryARELEDtlUndoChangesRequestAPI)
      {   
         var result = new AsarentryARELEDtlUndoChangesResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlUndoChangesRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         foreach (var obj in AsarentryARELEDtlUndoChangesRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlUndoChangesRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlUndoChanges - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlUndoChanges(ref pdsContext, ref pdsarelecheckhdr, ref pdsarelecheckdtl, ref pdsarelecheckdtlwo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlUndoChanges - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDtlWOFinalResponseAPI ARELEDtlWOFinal(AsarentryARELEDtlWOFinalRequestAPI AsarentryARELEDtlWOFinalRequestAPI)
      {   
         var result = new AsarentryARELEDtlWOFinalResponseAPI();
         
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarecewodataRow = pdsarecewodata.ttblarecewodata.NewttblarecewodataRow();
         Arecewodata.UpdateRowFromArecewodata(ref ttblarecewodataRow, AsarentryARELEDtlWOFinalRequestAPI.arecewodata);
         pdsarecewodata.ttblarecewodata.AddttblarecewodataRow((pdsarecewodataDataSet.ttblarecewodataRow)ttblarecewodataRow);
          
         foreach (var obj in AsarentryARELEDtlWOFinalRequestAPI.areceworeport)
         {
            DataRow ttblareceworeportRow = pdsareceworeport.ttblareceworeport.NewttblareceworeportRow();
            Areceworeport.UpdateRowFromAreceworeport(ref ttblareceworeportRow, obj);
            pdsareceworeport.ttblareceworeport.AddttblareceworeportRow((pdsareceworeportDataSet.ttblareceworeportRow)ttblareceworeportRow);
         }
          
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlWOFinalRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         foreach (var obj in AsarentryARELEDtlWOFinalRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlWOFinalRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEDtlWOFinal - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlWOFinal(ref pdsContext,  pdsarecewodata,  pdsareceworeport, ref pdsarelecheckhdr, ref pdsarelecheckdtl, ref pdsarelecheckdtlwo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlWOFinal - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarecewodata); 
    
         if (pdsarelecheckdtl.ttblarelecheckdtl.Count > 0)
         {
            result.arelecheckdtl = Arelecheckdtl.BuildArelecheckdtlFromRow(pdsarelecheckdtl.ttblarelecheckdtl[0]);
         }
                    
         foreach (DataRow row in pdsarelecheckdtlwo.ttblarelecheckdtlwo)
         {
            result.arelecheckdtlwo.Add(Arelecheckdtlwo.BuildArelecheckdtlwoFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARELEDtlWOSetupResponseAPI ARELEDtlWOSetup(AsarentryARELEDtlWOSetupRequestAPI AsarentryARELEDtlWOSetupRequestAPI)
      {   
         var result = new AsarentryARELEDtlWOSetupResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckdtlwo = new pdsarelecheckdtlwoDataSet();
            
         var pdsarecewodata = new pdsarecewodataDataSet();
            
         var pdsareceworeport = new pdsareceworeportDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
         Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, AsarentryARELEDtlWOSetupRequestAPI.arelecheckdtl);
         pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
          
         foreach (var obj in AsarentryARELEDtlWOSetupRequestAPI.arelecheckdtlwo)
         {
            DataRow ttblarelecheckdtlwoRow = pdsarelecheckdtlwo.ttblarelecheckdtlwo.NewttblarelecheckdtlwoRow();
            Arelecheckdtlwo.UpdateRowFromArelecheckdtlwo(ref ttblarelecheckdtlwoRow, obj);
            pdsarelecheckdtlwo.ttblarelecheckdtlwo.AddttblarelecheckdtlwoRow((pdsarelecheckdtlwoDataSet.ttblarelecheckdtlwoRow)ttblarelecheckdtlwoRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEDtlWOSetupRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         var  cMode = AsarentryARELEDtlWOSetupRequestAPI.cMode;
            
         
         NLogLoggerP.Trace("ARELEDtlWOSetup - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEDtlWOSetup(ref pdsContext,  cMode,  pdsarelecheckhdr,  pdsarelecheckdtl,  pdsarelecheckdtlwo, out pdsarecewodata, out pdsareceworeport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEDtlWOSetup - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         if (pdsarecewodata.ttblarecewodata.Count > 0)
         {
            result.arecewodata = Arecewodata.BuildArecewodataFromRow(pdsarecewodata.ttblarecewodata[0]);
         }
                    
         foreach (DataRow row in pdsareceworeport.ttblareceworeport)
         {
            result.areceworeport.Add(Areceworeport.BuildAreceworeportFromRow(row));
         }     
          
         return result;
          
      }

      public AsarentryARELEHdrRecallDiscountResponseAPI ARELEHdrRecallDiscount(AsarentryARELEHdrRecallDiscountRequestAPI AsarentryARELEHdrRecallDiscountRequestAPI)
      {   
         var result = new AsarentryARELEHdrRecallDiscountResponseAPI();
         
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELEHdrRecallDiscountRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEHdrRecallDiscountRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         var  cType = AsarentryARELEHdrRecallDiscountRequestAPI.cType;
            
         
         NLogLoggerP.Trace("ARELEHdrRecallDiscount - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEHdrRecallDiscount(ref pdsContext,  cType, ref pdsarelecheckhdr, ref pdsarelecheckdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEHdrRecallDiscount - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckhdr); 
    
         foreach (DataRow row in pdsarelecheckdtl.ttblarelecheckdtl)
         {
            result.arelecheckdtl.Add(Arelecheckdtl.BuildArelecheckdtlFromRow(row));
         }     
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0)
         {
            result.arelecheckhdr = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         }
                    
          
         return result;
          
      }

      public Arelecheckhdr ARELEHdrSuspendUnsuspend(AsarentryARELEHdrSuspendUnsuspendRequestAPI AsarentryARELEHdrSuspendUnsuspendRequestAPI)
      {   
         var result = new Arelecheckhdr();
         
         var pdsarelecheckdtl = new pdsarelecheckdtlDataSet();
            
         var pdsarelecheckhdr = new pdsarelecheckhdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARELEHdrSuspendUnsuspendRequestAPI.arelecheckdtl)
         {
            DataRow ttblarelecheckdtlRow = pdsarelecheckdtl.ttblarelecheckdtl.NewttblarelecheckdtlRow();
            Arelecheckdtl.UpdateRowFromArelecheckdtl(ref ttblarelecheckdtlRow, obj);
            pdsarelecheckdtl.ttblarelecheckdtl.AddttblarelecheckdtlRow((pdsarelecheckdtlDataSet.ttblarelecheckdtlRow)ttblarelecheckdtlRow);
         }
          
         DataRow ttblarelecheckhdrRow = pdsarelecheckhdr.ttblarelecheckhdr.NewttblarelecheckhdrRow();
         Arelecheckhdr.UpdateRowFromArelecheckhdr(ref ttblarelecheckhdrRow, AsarentryARELEHdrSuspendUnsuspendRequestAPI.arelecheckhdr);
         pdsarelecheckhdr.ttblarelecheckhdr.AddttblarelecheckhdrRow((pdsarelecheckhdrDataSet.ttblarelecheckhdrRow)ttblarelecheckhdrRow);
          
         
         NLogLoggerP.Trace("ARELEHdrSuspendUnsuspend - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARELEHdrSuspendUnsuspend(ref pdsContext,  pdsarelecheckdtl, ref pdsarelecheckhdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARELEHdrSuspendUnsuspend - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarelecheckdtl); 
    
         if (pdsarelecheckhdr.ttblarelecheckhdr.Count > 0) 
         { 
             result = Arelecheckhdr.BuildArelecheckhdrFromRow(pdsarelecheckhdr.ttblarelecheckhdr[0]);
         } 
              
          
         return result;
          
      }

      public Arembsingle AREMBApply(Arembsingle arembsingle)
      {   
         var result = new Arembsingle();
         
         var pdsaremb = new pdsarembDataSet();
            
         DataRow ttblarembsingleCriteria = pdsaremb.ttblarembsingle.NewttblarembsingleRow();
         Arembsingle.UpdateRowFromArembsingle(ref ttblarembsingleCriteria, arembsingle);
         pdsaremb.ttblarembsingle.AddttblarembsingleRow((pdsarembDataSet.ttblarembsingleRow)ttblarembsingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AREMBApply - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.AREMBApply(ref pdsContext, ref pdsaremb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AREMBApply - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaremb); 
    
         if (pdsaremb.ttblarembsingle.Count > 0) 
         { 
             result = Arembsingle.BuildArembsingleFromRow(pdsaremb.ttblarembsingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Arembsingle> AREMBRetrieve(AsarentryAREMBRetrieveRequestAPI AsarentryAREMBRetrieveRequestAPI)
      {   
         var results = new List<Arembsingle>();
         
         var pdsaremb = new pdsarembDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  dCustno = AsarentryAREMBRetrieveRequestAPI.dCustno;
            
         var  cShipTo = AsarentryAREMBRetrieveRequestAPI.cShipTo;
            
         var  cFieldName = AsarentryAREMBRetrieveRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("AREMBRetrieve - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.AREMBRetrieve(ref pdsContext,  dCustno,  cShipTo,  cFieldName, out pdsaremb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AREMBRetrieve - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaremb); 
    
            foreach (DataRow row in pdsaremb.ttblarembsingle)
            {
                results.Add(Arembsingle.BuildArembsingleFromRow(row));
            }
            return results;
        
      }

      public Arembsingle AREMBUpdate(Arembsingle arembsingle)
      {   
         var result = new Arembsingle();
         
         var pdsaremb = new pdsarembDataSet();
            
         DataRow ttblarembsingleCriteria = pdsaremb.ttblarembsingle.NewttblarembsingleRow();
         Arembsingle.UpdateRowFromArembsingle(ref ttblarembsingleCriteria, arembsingle);
         pdsaremb.ttblarembsingle.AddttblarembsingleRow((pdsarembDataSet.ttblarembsingleRow)ttblarembsingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AREMBUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.AREMBUpdate(ref pdsContext, ref pdsaremb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AREMBUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaremb); 
    
         if (pdsaremb.ttblarembsingle.Count > 0) 
         { 
             result = Arembsingle.BuildArembsingleFromRow(pdsaremb.ttblarembsingle[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARETCMInitiateResponseAPI ARETCMInitiate(long pvRecidARET, decimal pvIpOrigAmt, decimal pvIpOrigDisc, DateTime? pvDPostDt)
      {   
         var result = new AsarentryARETCMInitiateResponseAPI();
         
         var pdsaretcm = new pdsaretcmDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETCMInitiate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETCMInitiate(ref pdsContext,  pvRecidARET,  pvIpOrigAmt,  pvIpOrigDisc,  pvDPostDt ?? DateTime.MinValue, out pdsaretcm, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("ARETCMInitiate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaretcm); 
    
         foreach (DataRow row in pdsaretcm.ttblaretcm)
         {
            result.aretcm.Add(Aretcm.BuildAretcmFromRow(row));
         }     
         if (pdsaretcm.ttblaretcmproof.Count > 0)
         {
            result.aretcmproof = Aretcmproof.BuildAretcmproofFromRow(pdsaretcm.ttblaretcmproof[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsarentryARETCMRowLeaveResponseAPI ARETCMRowLeave(AsarentryARETCMRowLeaveRequestAPI AsarentryARETCMRowLeaveRequestAPI)
      {   
         var result = new AsarentryARETCMRowLeaveResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretcm = new pdsaretcmDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETCMRowLeaveRequestAPI.aretcm)
         {
            DataRow ttblaretcmRow = pdsaretcm.ttblaretcm.NewttblaretcmRow();
            Aretcm.UpdateRowFromAretcm(ref ttblaretcmRow, obj);
            pdsaretcm.ttblaretcm.AddttblaretcmRow((pdsaretcmDataSet.ttblaretcmRow)ttblaretcmRow);
         }
          
         DataRow ttblaretcmproofRow = pdsaretcm.ttblaretcmproof.NewttblaretcmproofRow();
         Aretcmproof.UpdateRowFromAretcmproof(ref ttblaretcmproofRow, AsarentryARETCMRowLeaveRequestAPI.aretcmproof);
         pdsaretcm.ttblaretcmproof.AddttblaretcmproofRow((pdsaretcmDataSet.ttblaretcmproofRow)ttblaretcmproofRow);
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETCMRowLeaveRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETCMRowLeave - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETCMRowLeave(ref pdsContext,  pdsarettrans, ref pdsaretcm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETCMRowLeave - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretcm.ttblaretcm)
         {
            result.aretcm.Add(Aretcm.BuildAretcmFromRow(row));
         }     
         if (pdsaretcm.ttblaretcmproof.Count > 0)
         {
            result.aretcmproof = Aretcmproof.BuildAretcmproofFromRow(pdsaretcm.ttblaretcmproof[0]);
         }
                    
          
         return result;
          
      }

      public AsarentryARETCMUpdateResponseAPI ARETCMUpdate(AsarentryARETCMUpdateRequestAPI AsarentryARETCMUpdateRequestAPI)
      {   
         var result = new AsarentryARETCMUpdateResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretcm = new pdsaretcmDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETCMUpdateRequestAPI.aretcm)
         {
            DataRow ttblaretcmRow = pdsaretcm.ttblaretcm.NewttblaretcmRow();
            Aretcm.UpdateRowFromAretcm(ref ttblaretcmRow, obj);
            pdsaretcm.ttblaretcm.AddttblaretcmRow((pdsaretcmDataSet.ttblaretcmRow)ttblaretcmRow);
         }
          
         DataRow ttblaretcmproofRow = pdsaretcm.ttblaretcmproof.NewttblaretcmproofRow();
         Aretcmproof.UpdateRowFromAretcmproof(ref ttblaretcmproofRow, AsarentryARETCMUpdateRequestAPI.aretcmproof);
         pdsaretcm.ttblaretcmproof.AddttblaretcmproofRow((pdsaretcmDataSet.ttblaretcmproofRow)ttblaretcmproofRow);
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETCMUpdateRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETCMUpdate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETCMUpdate(ref pdsContext,  pdsarettrans, ref pdsaretcm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETCMUpdate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretcm.ttblaretcm)
         {
            result.aretcm.Add(Aretcm.BuildAretcmFromRow(row));
         }     
         if (pdsaretcm.ttblaretcmproof.Count > 0)
         {
            result.aretcmproof = Aretcmproof.BuildAretcmproofFromRow(pdsaretcm.ttblaretcmproof[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Aretfortranscdload> ARETForTransCdLoad(int iTransCd)
      {   
         var results = new List<Aretfortranscdload>();
         
         var pdsaretfortranscdload = new pdsaretfortranscdloadDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETForTransCdLoad - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETForTransCdLoad(ref pdsContext,  iTransCd, out pdsaretfortranscdload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETForTransCdLoad - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaretfortranscdload); 
    
            foreach (DataRow row in pdsaretfortranscdload.ttblaretfortranscdload)
            {
                results.Add(Aretfortranscdload.BuildAretfortranscdloadFromRow(row));
            }
            return results;
        
      }

      public Arettrans ARETForTransCdValueChanged(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETForTransCdValueChanged - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETForTransCdValueChanged(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETForTransCdValueChanged - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public Arettrans ARETInitiate(int iJrnlNo)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETInitiate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETInitiate(ref pdsContext,  iJrnlNo, out pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETInitiate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public Arettrans ARETInvNoSufValueChanged(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETInvNoSufValueChanged - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETInvNoSufValueChanged(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETInvNoSufValueChanged - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Aretlist> ARETListBuild(int iJrnlNo, int iSetNo)
      {   
         var results = new List<Aretlist>();
         
         var pdsaretlist = new pdsaretlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETListBuild - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETListBuild(ref pdsContext,  iJrnlNo,  iSetNo, out pdsaretlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETListBuild - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaretlist); 
    
            foreach (DataRow row in pdsaretlist.ttblaretlist)
            {
                results.Add(Aretlist.BuildAretlistFromRow(row));
            }
            return results;
        
      }

      public AsarentryARETManualTermsProcessResponseAPI ARETManualTermsProcess(AsarentryARETManualTermsProcessRequestAPI AsarentryARETManualTermsProcessRequestAPI)
      {   
         var result = new AsarentryARETManualTermsProcessResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsarmanualterms = new pdsarmanualtermsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETManualTermsProcessRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         DataRow ttblarmanualtermsRow = pdsarmanualterms.ttblarmanualterms.NewttblarmanualtermsRow();
         Armanualterms.UpdateRowFromArmanualterms(ref ttblarmanualtermsRow, AsarentryARETManualTermsProcessRequestAPI.armanualterms);
         pdsarmanualterms.ttblarmanualterms.AddttblarmanualtermsRow((pdsarmanualtermsDataSet.ttblarmanualtermsRow)ttblarmanualtermsRow);
          
         var  cAction = AsarentryARETManualTermsProcessRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("ARETManualTermsProcess - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETManualTermsProcess(ref pdsContext,  cAction, ref pdsarettrans, ref pdsarmanualterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETManualTermsProcess - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0)
         {
            result.arettrans = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         }
                    
         if (pdsarmanualterms.ttblarmanualterms.Count > 0)
         {
            result.armanualterms = Armanualterms.BuildArmanualtermsFromRow(pdsarmanualterms.ttblarmanualterms[0]);
         }
                    
          
         return result;
          
      }

      public Arettrans ARETReferValueChanged(Arettrans arettrans)
      {   
         var result = new Arettrans();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         DataRow ttblarettransCriteria = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransCriteria, arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ARETReferValueChanged - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETReferValueChanged(ref pdsContext, ref pdsarettrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETReferValueChanged - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         if (pdsarettrans.ttblarettrans.Count > 0) 
         { 
             result = Arettrans.BuildArettransFromRow(pdsarettrans.ttblarettrans[0]);
         } 
              
          
         return result;
          
      }

      public AsarentryARETSplitPayInitiateResponseAPI ARETSplitPayInitiate(AsarentryARETSplitPayInitiateRequestAPI AsarentryARETSplitPayInitiateRequestAPI)
      {   
         var result = new AsarentryARETSplitPayInitiateResponseAPI();
         
         var pdsarettrans = new pdsarettransDataSet();
            
         var pdsaretsplitpay = new pdsaretsplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsarentryARETSplitPayInitiateRequestAPI.aretsplitpay)
         {
            DataRow ttblaretsplitpayRow = pdsaretsplitpay.ttblaretsplitpay.NewttblaretsplitpayRow();
            Aretsplitpay.UpdateRowFromAretsplitpay(ref ttblaretsplitpayRow, obj);
            pdsaretsplitpay.ttblaretsplitpay.AddttblaretsplitpayRow((pdsaretsplitpayDataSet.ttblaretsplitpayRow)ttblaretsplitpayRow);
         }
          
         DataRow ttblaretsplitpayproofRow = pdsaretsplitpay.ttblaretsplitpayproof.NewttblaretsplitpayproofRow();
         Aretsplitpayproof.UpdateRowFromAretsplitpayproof(ref ttblaretsplitpayproofRow, AsarentryARETSplitPayInitiateRequestAPI.aretsplitpayproof);
         pdsaretsplitpay.ttblaretsplitpayproof.AddttblaretsplitpayproofRow((pdsaretsplitpayDataSet.ttblaretsplitpayproofRow)ttblaretsplitpayproofRow);
          
         DataRow ttblarettransRow = pdsarettrans.ttblarettrans.NewttblarettransRow();
         Arettrans.UpdateRowFromArettrans(ref ttblarettransRow, AsarentryARETSplitPayInitiateRequestAPI.arettrans);
         pdsarettrans.ttblarettrans.AddttblarettransRow((pdsarettransDataSet.ttblarettransRow)ttblarettransRow);
          
         
         NLogLoggerP.Trace("ARETSplitPayInitiate - Asarentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsarentryproxy = this.proxyAppObject.CreatePO_asarentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsarentryproxy.ARETSplitPayInitiate(ref pdsContext,  pdsarettrans, ref pdsaretsplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ARETSplitPayInitiate - Asarentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsarettrans); 
    
         foreach (DataRow row in pdsaretsplitpay.ttblaretsplitpay)
         {
            result.aretsplitpay.Add(Aretsplitpay.BuildAretsplitpayFromRow(row));
         }     
         if (pdsaretsplitpay.ttblaretsplitpayproof.Count > 0)
         {
            result.aretsplitpayproof = Aretsplitpayproof.BuildAretsplitpayproofFromRow(pdsaretsplitpay.ttblaretsplitpayproof[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  