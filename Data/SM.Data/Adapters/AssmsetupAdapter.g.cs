//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.SM.Data.Adapters
{
   using com.infor.sxproxy.smproxy;
   using com.infor.sxproxy.smproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdssmsalesrepcopy;
   using Models.Pdssmcommissioncopy;

   public partial class AssmsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private SMProxyAppObject proxyAppObject;
      
      public AssmsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SMProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssmsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Smsalesrepcopy> SMSalesRepCopy(IEnumerable<Smsalesrepcopy> smsalesrepcopy)
      {   
         var results = new List<Smsalesrepcopy>();
         
         var pdssmsalesrepcopy = new pdssmsalesrepcopyDataSet();
            
         foreach (var obj in smsalesrepcopy)
         {
             DataRow row = pdssmsalesrepcopy.ttblsmsalesrepcopy.NewttblsmsalesrepcopyRow();
             Smsalesrepcopy.UpdateRowFromSmsalesrepcopy(ref row, obj);
             pdssmsalesrepcopy.ttblsmsalesrepcopy.AddttblsmsalesrepcopyRow((pdssmsalesrepcopyDataSet.ttblsmsalesrepcopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SMSalesRepCopy - Assmsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssmsetupproxy = this.proxyAppObject.CreatePO_assmsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssmsetupproxy.SMSalesRepCopy(ref pdsContext, ref pdssmsalesrepcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SMSalesRepCopy - Assmsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssmsalesrepcopy); 
    
            foreach (DataRow row in pdssmsalesrepcopy.ttblsmsalesrepcopy)
            {
                results.Add(Smsalesrepcopy.BuildSmsalesrepcopyFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Smcommissioncopy> SMCommissionCopy(IEnumerable<Smcommissioncopy> smcommissioncopy)
      {   
         var results = new List<Smcommissioncopy>();
         
         var pdssmcommissioncopy = new pdssmcommissioncopyDataSet();
            
         foreach (var obj in smcommissioncopy)
         {
             DataRow row = pdssmcommissioncopy.ttblsmcommissioncopy.NewttblsmcommissioncopyRow();
             Smcommissioncopy.UpdateRowFromSmcommissioncopy(ref row, obj);
             pdssmcommissioncopy.ttblsmcommissioncopy.AddttblsmcommissioncopyRow((pdssmcommissioncopyDataSet.ttblsmcommissioncopyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SMCommissionCopy - Assmsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssmsetupproxy = this.proxyAppObject.CreatePO_assmsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssmsetupproxy.SMCommissionCopy(ref pdsContext, ref pdssmcommissioncopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SMCommissionCopy - Assmsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssmcommissioncopy); 
    
            foreach (DataRow row in pdssmcommissioncopy.ttblsmcommissioncopy)
            {
                results.Add(Smcommissioncopy.BuildSmcommissioncopyFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  