//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.SA.Data.Adapters
{
   using com.infor.sxproxy.saproxy;
   using com.infor.sxproxy.saproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdssaeefldsprc;
   using Models.Pdssaeefldsdate;
   using Models.Pdssasosetupfuncsecavail;
   using Models.Pdssasosetupfuncsecset;
   using Models.Pdssasosetupfuncsecsubfunc;
   using Models.Pdssasoprofilelist;
   using Models.Pdssasaresults;
   using Models.Pdssastplresults;
   using Models.Pdssaaautablelist;
   using Models.Pdssaaautabledetail;
   using Models.Pdssastooeaddon;
   using Models.Pdsmessaging;
   using Models.Pdssastonewoeaddon;
   using Models.Pdssaccprocessor;
   using Models.Pdssasbrcat;
   using Models.Pdssasbrrule;
   using Models.Pdssasbrcriteria;
   using Models.Pdssasbrresults;
   using Models.Pdssasbrmaint;
   using Models.Pdssasttdata;
   using Models.Pdssasttslst;
   using Models.Pdssastoglfetch;
   using Models.Pdssastcglfetch;
   using Models.Pdssastfgetdetail;
   using Models.Pdssasgtglfetch;
   using Models.Pdssasgsdescription;
   using Models.Pdssasapirecord;
   using Models.Pdsjournalgettimes;
   using Models.Pdsdropboxauthkey;
   using Models.Pdssabscopyresults;
   using Models.Pdssacompany;
   using Models.Pdscompanycopy;
   using Models.Pdssasgesingle;
   using Models.Pdssasgesearch;
   using Models.Pdssastfsingle;
   using Models.Pdssastfsearch;
   using Models.Pdssaabnfetchcriteria;
   using Models.Pdssaabnfetch;
   using Models.Pdssaabnrecords;
   using Models.Pdssasttcodes;
   using Models.Pdssasttsearch;
   using Models.Pdssasttcmst;
   using Models.Pdssasttpdst;
   using Models.Pdssasttvast;
   using Models.Pdssasttsastaz;
   using Models.Pdssasttsastae;
   using Models.Pdssasttsasta;
   using Models.Pdssasttterms;
   using Models.Pdssasttsastn;
   using Models.Pdssaspuserfields;
   using Models.Pdssaspcopy;
   using Models.Pdssasgldata;
   using Models.Pdssasglglsave;
   using Models.Pdssasglcopy;
   using Models.Pdssasgtgetlist;
   using Models.Pdssasgtglsave;
   using Models.Pdssajournalcopy;
   using Models.Pdssasgaddonscriteria;
   using Models.Pdssasgaddonsresults;
   using Models.Pdssasgaddonslists;
   using Models.Pdssasggstvatadditionalsave;
   using Models.Pdssasggstvatcopy;
   using Models.Pdssasggstvatdata;
   using Models.Pdssastcdelete;
   using Models.Pdssastcresults;
   using Models.Pdssastcnotes;
   using Models.Pdssastcupdate;
   using Models.Pdssastchistorycriteria;
   using Models.Pdssastchistoryresults;
   using Models.Pdssasgscopy;
   using Models.Pdssasgscriteria;
   using Models.Pdssasgsdisplaytotals;
   using Models.Pdssasgsgldata;
   using Models.Pdssasogetoperlistcrit;
   using Models.Pdssasogetoperlistresults;
   using Models.Pdssasoopercreate;
   using Models.Pdssasosetupoper;
   using Models.Pdssasosetupuser;
   using Models.Pdssasosetupgl;
   using Models.Pdssasosetupetcc;
   using Models.Pdssasosetupaosecure;
   using Models.Pdssasosetupdivnosec;
   using Models.Pdssastztable;
   using Models.Pdssastzdata;
   using Models.Pdssastzadddata;
   using Models.Pdssastzdeletedata;
   using Models.Pdssasttorderoriginlkup;
   using Models.Pdssaeventcopy;
   using Models.Pdssaeefldsamt;
   using Models.Pdssaeefldschar;
   using Models.Complex;

   public partial class AssasetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private SAProxyAppObject proxyAppObject;
      
      public AssasetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssasetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void SAEEFValidateFldsPrc(Saeefldsprc saeefldsprc)
      {   
         
         var pdssaeefldsprc = new pdssaeefldsprcDataSet();
            
         DataRow ttblsaeefldsprcCriteria = pdssaeefldsprc.ttblsaeefldsprc.NewttblsaeefldsprcRow();
         Saeefldsprc.UpdateRowFromSaeefldsprc(ref ttblsaeefldsprcCriteria, saeefldsprc);
         pdssaeefldsprc.ttblsaeefldsprc.AddttblsaeefldsprcRow((pdssaeefldsprcDataSet.ttblsaeefldsprcRow)ttblsaeefldsprcCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEFValidateFldsPrc - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFValidateFldsPrc(ref pdsContext,  pdssaeefldsprc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFValidateFldsPrc - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldsprc);
      }

      public void SAEEFValidateFldsDate(Saeefldsdate saeefldsdate)
      {   
         
         var pdssaeefldsdate = new pdssaeefldsdateDataSet();
            
         DataRow ttblsaeefldsdateCriteria = pdssaeefldsdate.ttblsaeefldsdate.NewttblsaeefldsdateRow();
         Saeefldsdate.UpdateRowFromSaeefldsdate(ref ttblsaeefldsdateCriteria, saeefldsdate);
         pdssaeefldsdate.ttblsaeefldsdate.AddttblsaeefldsdateRow((pdssaeefldsdateDataSet.ttblsaeefldsdateRow)ttblsaeefldsdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEFValidateFldsDate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFValidateFldsDate(ref pdsContext,  pdssaeefldsdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFValidateFldsDate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldsdate);
      }

      public IEnumerable<Sasosetupfuncsecavail> SASOSetupFuncSecureLoad(AssasetupSASOSetupFuncSecureLoadRequestAPI AssasetupSASOSetupFuncSecureLoadRequestAPI)
      {   
         var results = new List<Sasosetupfuncsecavail>();
         
         var pdssasosetupfuncsecavail = new pdssasosetupfuncsecavailDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cSelectionOperList = AssasetupSASOSetupFuncSecureLoadRequestAPI.cSelectionOperList;
            
         var  cSelectionMenuSet = AssasetupSASOSetupFuncSecureLoadRequestAPI.cSelectionMenuSet;
            
         var  cSelectionRecordType = AssasetupSASOSetupFuncSecureLoadRequestAPI.cSelectionRecordType;
            
         var  cSelectionName = AssasetupSASOSetupFuncSecureLoadRequestAPI.cSelectionName;
            
         var  cSelectionTitle = AssasetupSASOSetupFuncSecureLoadRequestAPI.cSelectionTitle;
            
         
         NLogLoggerP.Trace("SASOSetupFuncSecureLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupFuncSecureLoad(ref pdsContext,  cSelectionOperList,  cSelectionMenuSet,  cSelectionRecordType,  cSelectionName,  cSelectionTitle, out pdssasosetupfuncsecavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupFuncSecureLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupfuncsecavail); 
    
            foreach (DataRow row in pdssasosetupfuncsecavail.ttblsasosetupfuncsecavail)
            {
                results.Add(Sasosetupfuncsecavail.BuildSasosetupfuncsecavailFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasosetupfuncsecset> SASOSetupFuncSecureCurrOper(string cSingleOper)
      {   
         var results = new List<Sasosetupfuncsecset>();
         
         var pdssasosetupfuncsecset = new pdssasosetupfuncsecsetDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASOSetupFuncSecureCurrOper - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupFuncSecureCurrOper(ref pdsContext,  cSingleOper, out pdssasosetupfuncsecset, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupFuncSecureCurrOper - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupfuncsecset); 
    
            foreach (DataRow row in pdssasosetupfuncsecset.ttblsasosetupfuncsecset)
            {
                results.Add(Sasosetupfuncsecset.BuildSasosetupfuncsecsetFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasosetupfuncsecset> SASOSetupFuncSecureSet(AssasetupSASOSetupFuncSecureSetRequestAPI AssasetupSASOSetupFuncSecureSetRequestAPI)
      {   
         var results = new List<Sasosetupfuncsecset>();
         
         var pdssasosetupfuncsecavail = new pdssasosetupfuncsecavailDataSet();
            
         var pdssasosetupfuncsecset = new pdssasosetupfuncsecsetDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSASOSetupFuncSecureSetRequestAPI.sasosetupfuncsecavail)
         {
            DataRow ttblsasosetupfuncsecavailRow = pdssasosetupfuncsecavail.ttblsasosetupfuncsecavail.NewttblsasosetupfuncsecavailRow();
            Sasosetupfuncsecavail.UpdateRowFromSasosetupfuncsecavail(ref ttblsasosetupfuncsecavailRow, obj);
            pdssasosetupfuncsecavail.ttblsasosetupfuncsecavail.AddttblsasosetupfuncsecavailRow((pdssasosetupfuncsecavailDataSet.ttblsasosetupfuncsecavailRow)ttblsasosetupfuncsecavailRow);
         }
          
         var  iSecurity = AssasetupSASOSetupFuncSecureSetRequestAPI.iSecurity;
            
         
         NLogLoggerP.Trace("SASOSetupFuncSecureSet - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupFuncSecureSet(ref pdsContext,  iSecurity,  pdssasosetupfuncsecavail, out pdssasosetupfuncsecset, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupFuncSecureSet - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupfuncsecavail); 
    
            foreach (DataRow row in pdssasosetupfuncsecset.ttblsasosetupfuncsecset)
            {
                results.Add(Sasosetupfuncsecset.BuildSasosetupfuncsecsetFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasosetupfuncsecsubfunc> SASOSetupFuncSecureSubFuncLoad(Sasosetupfuncsecset sasosetupfuncsecset)
      {   
         var results = new List<Sasosetupfuncsecsubfunc>();
         
         var pdssasosetupfuncsecset = new pdssasosetupfuncsecsetDataSet();
            
         var pdssasosetupfuncsecsubfunc = new pdssasosetupfuncsecsubfuncDataSet();
            
         DataRow ttblsasosetupfuncsecsetCriteria = pdssasosetupfuncsecset.ttblsasosetupfuncsecset.NewttblsasosetupfuncsecsetRow();
         Sasosetupfuncsecset.UpdateRowFromSasosetupfuncsecset(ref ttblsasosetupfuncsecsetCriteria, sasosetupfuncsecset);
         pdssasosetupfuncsecset.ttblsasosetupfuncsecset.AddttblsasosetupfuncsecsetRow((pdssasosetupfuncsecsetDataSet.ttblsasosetupfuncsecsetRow)ttblsasosetupfuncsecsetCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASOSetupFuncSecureSubFuncLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupFuncSecureSubFuncLoad(ref pdsContext,  pdssasosetupfuncsecset, out pdssasosetupfuncsecsubfunc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupFuncSecureSubFuncLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupfuncsecset); 
    
            foreach (DataRow row in pdssasosetupfuncsecsubfunc.ttblsasosetupfuncsecsubfunc)
            {
                results.Add(Sasosetupfuncsecsubfunc.BuildSasosetupfuncsecsubfuncFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasoprofilelist> SASOGetProfileList(string cSearchProfile)
      {   
         var results = new List<Sasoprofilelist>();
         
         var pdssasoprofilelist = new pdssasoprofilelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASOGetProfileList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOGetProfileList(ref pdsContext,  cSearchProfile, out pdssasoprofilelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOGetProfileList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasoprofilelist); 
    
            foreach (DataRow row in pdssasoprofilelist.ttblsasoprofilelist)
            {
                results.Add(Sasoprofilelist.BuildSasoprofilelistFromRow(row));
            }
            return results;
        
      }

      public Sasaresults SASARetrieve()
      {   
         var result = new Sasaresults();
         
         var pdssasaresults = new pdssasaresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASARetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASARetrieve(ref pdsContext, out pdssasaresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASARetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasaresults); 
    
         if (pdssasaresults.ttblsasaresults.Count > 0) 
         { 
             result = Sasaresults.BuildSasaresultsFromRow(pdssasaresults.ttblsasaresults[0]);
         } 
              
          
         return result;
          
      }

      public Sasaresults SASAUpdate(Sasaresults sasaresults)
      {   
         var result = new Sasaresults();
         
         var pdssasaresults = new pdssasaresultsDataSet();
            
         DataRow ttblsasaresultsCriteria = pdssasaresults.ttblsasaresults.NewttblsasaresultsRow();
         Sasaresults.UpdateRowFromSasaresults(ref ttblsasaresultsCriteria, sasaresults);
         pdssasaresults.ttblsasaresults.AddttblsasaresultsRow((pdssasaresultsDataSet.ttblsasaresultsRow)ttblsasaresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAUpdate(ref pdsContext, ref pdssasaresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasaresults); 
    
         if (pdssasaresults.ttblsasaresults.Count > 0) 
         { 
             result = Sasaresults.BuildSasaresultsFromRow(pdssasaresults.ttblsasaresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sastplresults> SASTPLRetrieve()
      {   
         var results = new List<Sastplresults>();
         
         var pdssastplresults = new pdssastplresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPLRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPLRetrieve(ref pdsContext, out pdssastplresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPLRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastplresults); 
    
            foreach (DataRow row in pdssastplresults.ttblsastplresults)
            {
                results.Add(Sastplresults.BuildSastplresultsFromRow(row));
            }
            return results;
        
      }

      public Sastplresults SASTPLUpdate(AssasetupSASTPLUpdateRequestAPI AssasetupSASTPLUpdateRequestAPI)
      {   
         var result = new Sastplresults();
         
         var pdssastplresults = new pdssastplresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsastplresultsRow = pdssastplresults.ttblsastplresults.NewttblsastplresultsRow();
         Sastplresults.UpdateRowFromSastplresults(ref ttblsastplresultsRow, AssasetupSASTPLUpdateRequestAPI.sastplresults);
         pdssastplresults.ttblsastplresults.AddttblsastplresultsRow((pdssastplresultsDataSet.ttblsastplresultsRow)ttblsastplresultsRow);
          
         var  cLicenseNo = AssasetupSASTPLUpdateRequestAPI.cLicenseNo;
            
         
         NLogLoggerP.Trace("SASTPLUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPLUpdate(ref pdsContext,  cLicenseNo, ref pdssastplresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPLUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastplresults); 
    
         if (pdssastplresults.ttblsastplresults.Count > 0) 
         { 
             result = Sastplresults.BuildSastplresultsFromRow(pdssastplresults.ttblsastplresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Saaautablelist> SAAAUTableListRetrieve(AssasetupSAAAUTableListRetrieveRequestAPI AssasetupSAAAUTableListRetrieveRequestAPI)
      {   
         var results = new List<Saaautablelist>();
         
         var pdssaaautablelist = new pdssaaautablelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cTableName = AssasetupSAAAUTableListRetrieveRequestAPI.cTableName;
            
         var  lOnlyAuditFlag = AssasetupSAAAUTableListRetrieveRequestAPI.lOnlyAuditFlag;
            
         
         NLogLoggerP.Trace("SAAAUTableListRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUTableListRetrieve(ref pdsContext,  cTableName,  lOnlyAuditFlag, out pdssaaautablelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAAAUTableListRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaaautablelist); 
    
            foreach (DataRow row in pdssaaautablelist.ttblsaaautablelist)
            {
                results.Add(Saaautablelist.BuildSaaautablelistFromRow(row));
            }
            return results;
        
      }

      public void SAAAUClearAuditRecords()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAAAUClearAuditRecords - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUClearAuditRecords(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAAAUClearAuditRecords - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void SAAAUSetAuditFlag(AssasetupSAAAUSetAuditFlagRequestAPI AssasetupSAAAUSetAuditFlagRequestAPI)
      {   
         
         var pdssaaautablelist = new pdssaaautablelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSAAAUSetAuditFlagRequestAPI.saaautablelist)
         {
            DataRow ttblsaaautablelistRow = pdssaaautablelist.ttblsaaautablelist.NewttblsaaautablelistRow();
            Saaautablelist.UpdateRowFromSaaautablelist(ref ttblsaaautablelistRow, obj);
            pdssaaautablelist.ttblsaaautablelist.AddttblsaaautablelistRow((pdssaaautablelistDataSet.ttblsaaautablelistRow)ttblsaaautablelistRow);
         }
          
         var  lSelect = AssasetupSAAAUSetAuditFlagRequestAPI.lSelect;
            
         
         NLogLoggerP.Trace("SAAAUSetAuditFlag - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUSetAuditFlag(ref pdsContext,  lSelect,  pdssaaautablelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAAAUSetAuditFlag - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaaautablelist);
      }

      public AssasetupSAAAUGenerateResponseAPI SAAAUGenerate(bool lGenWriteDelete)
      {   
         var result = new AssasetupSAAAUGenerateResponseAPI();
         
         string cErrorMessage = string.Empty;
         string cDeltaFileCreated = string.Empty;
         string cAuditProgramsDir = string.Empty;
   
         
         NLogLoggerP.Trace("SAAAUGenerate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUGenerate(ref pdsContext,  lGenWriteDelete, out cErrorMessage, out cDeltaFileCreated, out cAuditProgramsDir);
               }
            });
         NLogLoggerP.Info("SAAAUGenerate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cDeltaFileCreated = cDeltaFileCreated;
         result.cAuditProgramsDir = cAuditProgramsDir;
          
         return result;
          
      }

      public IEnumerable<Saaautabledetail> SAAAUDetailRetrieve(string cTableName)
      {   
         var results = new List<Saaautabledetail>();
         
         var pdssaaautabledetail = new pdssaaautabledetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAAAUDetailRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUDetailRetrieve(ref pdsContext,  cTableName, out pdssaaautabledetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAAAUDetailRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaaautabledetail); 
    
            foreach (DataRow row in pdssaaautabledetail.ttblsaaautabledetail)
            {
                results.Add(Saaautabledetail.BuildSaaautabledetailFromRow(row));
            }
            return results;
        
      }

      public void SAAAUDetailSetAuditFlag(AssasetupSAAAUDetailSetAuditFlagRequestAPI AssasetupSAAAUDetailSetAuditFlagRequestAPI)
      {   
         
         var pdssaaautabledetail = new pdssaaautabledetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSAAAUDetailSetAuditFlagRequestAPI.saaautabledetail)
         {
            DataRow ttblsaaautabledetailRow = pdssaaautabledetail.ttblsaaautabledetail.NewttblsaaautabledetailRow();
            Saaautabledetail.UpdateRowFromSaaautabledetail(ref ttblsaaautabledetailRow, obj);
            pdssaaautabledetail.ttblsaaautabledetail.AddttblsaaautabledetailRow((pdssaaautabledetailDataSet.ttblsaaautabledetailRow)ttblsaaautabledetailRow);
         }
          
         var  lSelect = AssasetupSAAAUDetailSetAuditFlagRequestAPI.lSelect;
            
         
         NLogLoggerP.Trace("SAAAUDetailSetAuditFlag - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAAAUDetailSetAuditFlag(ref pdsContext,  lSelect,  pdssaaautabledetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAAAUDetailSetAuditFlag - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaaautabledetail);
      }

      public IEnumerable<Sastooeaddon> SASTOOEAddonList(AssasetupSASTOOEAddonListRequestAPI AssasetupSASTOOEAddonListRequestAPI)
      {   
         var results = new List<Sastooeaddon>();
         
         var pdssastooeaddon = new pdssastooeaddonDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  iCodeValStart = AssasetupSASTOOEAddonListRequestAPI.iCodeValStart;
            
         
         NLogLoggerP.Trace("SASTOOEAddonList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTOOEAddonList(ref pdsContext,  iCodeValStart, out pdssastooeaddon, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTOOEAddonList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastooeaddon); 
    
            foreach (DataRow row in pdssastooeaddon.ttblsastooeaddon)
            {
                results.Add(Sastooeaddon.BuildSastooeaddonFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> SASTOOEAddonDelete(int iCodeval)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTOOEAddonDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTOOEAddonDelete(ref pdsContext,  iCodeval, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTOOEAddonDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AssasetupSASTOOEAddonCreateResponseAPI SASTOOEAddonCreate(Sastooeaddon sastooeaddon)
      {   
         var result = new AssasetupSASTOOEAddonCreateResponseAPI();
         
         var pdssastooeaddon = new pdssastooeaddonDataSet();
            
         var pdssastonewoeaddon = new pdssastonewoeaddonDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblsastooeaddonCriteria = pdssastooeaddon.ttblsastooeaddon.NewttblsastooeaddonRow();
         Sastooeaddon.UpdateRowFromSastooeaddon(ref ttblsastooeaddonCriteria, sastooeaddon);
         pdssastooeaddon.ttblsastooeaddon.AddttblsastooeaddonRow((pdssastooeaddonDataSet.ttblsastooeaddonRow)ttblsastooeaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTOOEAddonCreate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTOOEAddonCreate(ref pdsContext,  pdssastooeaddon, out pdssastonewoeaddon, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTOOEAddonCreate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastooeaddon); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssastonewoeaddon.ttblsastonewoeaddon.Count > 0)
         {
            result.sastonewoeaddon = Sastonewoeaddon.BuildSastonewoeaddonFromRow(pdssastonewoeaddon.ttblsastonewoeaddon[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTOOEAddonSave(Sastooeaddon sastooeaddon)
      {   
         var results = new List<Messaging>();
         
         var pdssastooeaddon = new pdssastooeaddonDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblsastooeaddonCriteria = pdssastooeaddon.ttblsastooeaddon.NewttblsastooeaddonRow();
         Sastooeaddon.UpdateRowFromSastooeaddon(ref ttblsastooeaddonCriteria, sastooeaddon);
         pdssastooeaddon.ttblsastooeaddon.AddttblsastooeaddonRow((pdssastooeaddonDataSet.ttblsastooeaddonRow)ttblsastooeaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTOOEAddonSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTOOEAddonSave(ref pdsContext,  pdssastooeaddon, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTOOEAddonSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastooeaddon); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Saccprocessor SASTPCreate(int iNewProcessno, int iFromProcessno)
      {   
         var result = new Saccprocessor();
         
         var pdssaccprocessor = new pdssaccprocessorDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPCreate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPCreate(ref pdsContext,  iNewProcessno,  iFromProcessno, out pdssaccprocessor, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPCreate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaccprocessor); 
    
         if (pdssaccprocessor.ttblsaccprocessor.Count > 0) 
         { 
             result = Saccprocessor.BuildSaccprocessorFromRow(pdssaccprocessor.ttblsaccprocessor[0]);
         } 
              
          
         return result;
          
      }

      public Saccprocessor SASTPRetrieve(int iProcessno)
      {   
         var result = new Saccprocessor();
         
         var pdssaccprocessor = new pdssaccprocessorDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPRetrieve(ref pdsContext,  iProcessno, out pdssaccprocessor, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaccprocessor); 
    
         if (pdssaccprocessor.ttblsaccprocessor.Count > 0) 
         { 
             result = Saccprocessor.BuildSaccprocessorFromRow(pdssaccprocessor.ttblsaccprocessor[0]);
         } 
              
          
         return result;
          
      }

      public AssasetupSASTPUpdateResponseAPI SASTPUpdate(Saccprocessor saccprocessor)
      {   
         var result = new AssasetupSASTPUpdateResponseAPI();
         
         var pdssaccprocessor = new pdssaccprocessorDataSet();
            
         DataRow ttblsaccprocessorCriteria = pdssaccprocessor.ttblsaccprocessor.NewttblsaccprocessorRow();
         Saccprocessor.UpdateRowFromSaccprocessor(ref ttblsaccprocessorCriteria, saccprocessor);
         pdssaccprocessor.ttblsaccprocessor.AddttblsaccprocessorRow((pdssaccprocessorDataSet.ttblsaccprocessorRow)ttblsaccprocessorCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPUpdate(ref pdsContext, ref pdssaccprocessor, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaccprocessor); 
    
         if (pdssaccprocessor.ttblsaccprocessor.Count > 0)
         {
            result.saccprocessor = Saccprocessor.BuildSaccprocessorFromRow(pdssaccprocessor.ttblsaccprocessor[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public void SASTPDelete(int iProcessNo)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPDelete(ref pdsContext,  iProcessNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AssasetupSASTPPingResponseAPI SASTPPing(Saccprocessor saccprocessor)
      {   
         var result = new AssasetupSASTPPingResponseAPI();
         
         var pdssaccprocessor = new pdssaccprocessorDataSet();
            
         DataRow ttblsaccprocessorCriteria = pdssaccprocessor.ttblsaccprocessor.NewttblsaccprocessorRow();
         Saccprocessor.UpdateRowFromSaccprocessor(ref ttblsaccprocessorCriteria, saccprocessor);
         pdssaccprocessor.ttblsaccprocessor.AddttblsaccprocessorRow((pdssaccprocessorDataSet.ttblsaccprocessorRow)ttblsaccprocessorCriteria);
            
         bool lPingSuccessful = false;
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPPing - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTPPing(ref pdsContext,  pdssaccprocessor, out lPingSuccessful, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPPing - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaccprocessor); 
    
         result.lPingSuccessful = lPingSuccessful;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Sasbrcategory> SASBRCatLoad()
      {   
         var results = new List<Sasbrcategory>();
         
         var pdssasbrcat = new pdssasbrcatDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASBRCatLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRCatLoad(ref pdsContext, out pdssasbrcat, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRCatLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrcat); 
    
            foreach (DataRow row in pdssasbrcat.ttblsasbrcategory)
            {
                results.Add(Sasbrcategory.BuildSasbrcategoryFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasbrrule> SASBRRuleLoad(string cCategory, bool lincludeshowall)
      {   
         var results = new List<Sasbrrule>();
         
         var pdssasbrrule = new pdssasbrruleDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASBRRuleLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRRuleLoad(ref pdsContext,  cCategory,  lincludeshowall, out pdssasbrrule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRRuleLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrrule); 
    
            foreach (DataRow row in pdssasbrrule.ttblsasbrrule)
            {
                results.Add(Sasbrrule.BuildSasbrruleFromRow(row));
            }
            return results;
        
      }

      public AssasetupSASBRLoadResponseAPI SASBRLoad(Sasbrcriteria sasbrcriteria)
      {   
         var result = new AssasetupSASBRLoadResponseAPI();
         
         var pdssasbrcriteria = new pdssasbrcriteriaDataSet();
            
         var pdssasbrresults = new pdssasbrresultsDataSet();
            
         DataRow ttblsasbrcriteriaCriteria = pdssasbrcriteria.ttblsasbrcriteria.NewttblsasbrcriteriaRow();
         Sasbrcriteria.UpdateRowFromSasbrcriteria(ref ttblsasbrcriteriaCriteria, sasbrcriteria);
         pdssasbrcriteria.ttblsasbrcriteria.AddttblsasbrcriteriaRow((pdssasbrcriteriaDataSet.ttblsasbrcriteriaRow)ttblsasbrcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("SASBRLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRLoad(ref pdsContext,  pdssasbrcriteria, out pdssasbrresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("SASBRLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrcriteria); 
    
         foreach (DataRow row in pdssasbrresults.ttblsasbrresults)
         {
            result.sasbrresults.Add(Sasbrresults.BuildSasbrresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AssasetupSASBRDetailResponseAPI SASBRDetail(AssasetupSASBRDetailRequestAPI AssasetupSASBRDetailRequestAPI)
      {   
         var result = new AssasetupSASBRDetailResponseAPI();
         
         var pdssasbrresults = new pdssasbrresultsDataSet();
            
         var pdssasbrmaint = new pdssasbrmaintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasbrresultsRow = pdssasbrresults.ttblsasbrresults.NewttblsasbrresultsRow();
         Sasbrresults.UpdateRowFromSasbrresults(ref ttblsasbrresultsRow, AssasetupSASBRDetailRequestAPI.sasbrresults);
         pdssasbrresults.ttblsasbrresults.AddttblsasbrresultsRow((pdssasbrresultsDataSet.ttblsasbrresultsRow)ttblsasbrresultsRow);
          
         var  cfunction = AssasetupSASBRDetailRequestAPI.cfunction;
            
         var  cCategory = AssasetupSASBRDetailRequestAPI.cCategory;
            
         var  cRuleType = AssasetupSASBRDetailRequestAPI.cRuleType;
            
         
         NLogLoggerP.Trace("SASBRDetail - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRDetail(ref pdsContext,  cfunction,  cCategory,  cRuleType, ref pdssasbrresults, out pdssasbrmaint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRDetail - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrresults); 
    
         if (pdssasbrmaint.ttblsasbrmaint.Count > 0)
         {
            result.sasbrmaint = Sasbrmaint.BuildSasbrmaintFromRow(pdssasbrmaint.ttblsasbrmaint[0]);
         }
                    
         if (pdssasbrresults.ttblsasbrresults.Count > 0)
         {
            result.sasbrresults = Sasbrresults.BuildSasbrresultsFromRow(pdssasbrresults.ttblsasbrresults[0]);
         }
                    
          
         return result;
          
      }

      public AssasetupSASBRFieldChangeResponseAPI SASBRFieldChange(AssasetupSASBRFieldChangeRequestAPI AssasetupSASBRFieldChangeRequestAPI)
      {   
         var result = new AssasetupSASBRFieldChangeResponseAPI();
         
         var pdssasbrresults = new pdssasbrresultsDataSet();
            
         var pdssasbrmaint = new pdssasbrmaintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasbrmaintRow = pdssasbrmaint.ttblsasbrmaint.NewttblsasbrmaintRow();
         Sasbrmaint.UpdateRowFromSasbrmaint(ref ttblsasbrmaintRow, AssasetupSASBRFieldChangeRequestAPI.sasbrmaint);
         pdssasbrmaint.ttblsasbrmaint.AddttblsasbrmaintRow((pdssasbrmaintDataSet.ttblsasbrmaintRow)ttblsasbrmaintRow);
          
         DataRow ttblsasbrresultsRow = pdssasbrresults.ttblsasbrresults.NewttblsasbrresultsRow();
         Sasbrresults.UpdateRowFromSasbrresults(ref ttblsasbrresultsRow, AssasetupSASBRFieldChangeRequestAPI.sasbrresults);
         pdssasbrresults.ttblsasbrresults.AddttblsasbrresultsRow((pdssasbrresultsDataSet.ttblsasbrresultsRow)ttblsasbrresultsRow);
          
         var  cfieldname = AssasetupSASBRFieldChangeRequestAPI.cfieldname;
            
         
         NLogLoggerP.Trace("SASBRFieldChange - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRFieldChange(ref pdsContext,  cfieldname, ref pdssasbrresults, ref pdssasbrmaint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRFieldChange - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrresults); 
    
         if (pdssasbrmaint.ttblsasbrmaint.Count > 0)
         {
            result.sasbrmaint = Sasbrmaint.BuildSasbrmaintFromRow(pdssasbrmaint.ttblsasbrmaint[0]);
         }
                    
         if (pdssasbrresults.ttblsasbrresults.Count > 0)
         {
            result.sasbrresults = Sasbrresults.BuildSasbrresultsFromRow(pdssasbrresults.ttblsasbrresults[0]);
         }
                    
          
         return result;
          
      }

      public void SASBRSave(AssasetupSASBRSaveRequestAPI AssasetupSASBRSaveRequestAPI)
      {   
         
         var pdssasbrresults = new pdssasbrresultsDataSet();
            
         var pdssasbrmaint = new pdssasbrmaintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasbrmaintRow = pdssasbrmaint.ttblsasbrmaint.NewttblsasbrmaintRow();
         Sasbrmaint.UpdateRowFromSasbrmaint(ref ttblsasbrmaintRow, AssasetupSASBRSaveRequestAPI.sasbrmaint);
         pdssasbrmaint.ttblsasbrmaint.AddttblsasbrmaintRow((pdssasbrmaintDataSet.ttblsasbrmaintRow)ttblsasbrmaintRow);
          
         DataRow ttblsasbrresultsRow = pdssasbrresults.ttblsasbrresults.NewttblsasbrresultsRow();
         Sasbrresults.UpdateRowFromSasbrresults(ref ttblsasbrresultsRow, AssasetupSASBRSaveRequestAPI.sasbrresults);
         pdssasbrresults.ttblsasbrresults.AddttblsasbrresultsRow((pdssasbrresultsDataSet.ttblsasbrresultsRow)ttblsasbrresultsRow);
          
         
         NLogLoggerP.Trace("SASBRSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRSave(ref pdsContext,  pdssasbrresults,  pdssasbrmaint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrresults);
      }

      public void SASBRDelete(IEnumerable<Sasbrresults> sasbrresults)
      {   
         
         var pdssasbrresults = new pdssasbrresultsDataSet();
            
         foreach (var obj in sasbrresults)
         {
             DataRow row = pdssasbrresults.ttblsasbrresults.NewttblsasbrresultsRow();
             Sasbrresults.UpdateRowFromSasbrresults(ref row, obj);
             pdssasbrresults.ttblsasbrresults.AddttblsasbrresultsRow((pdssasbrresultsDataSet.ttblsasbrresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASBRDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASBRDelete(ref pdsContext,  pdssasbrresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASBRDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasbrresults);
      }

      public Sasttslst SASTTLoadSLST(Sasttdata sasttdata)
      {   
         var result = new Sasttslst();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttslst = new pdssasttslstDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadSLST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadSLST(ref pdsContext,  pdssasttdata, out pdssasttslst, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadSLST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttslst.ttblsasttslst.Count > 0) 
         { 
             result = Sasttslst.BuildSasttslstFromRow(pdssasttslst.ttblsasttslst[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveSLST(AssasetupSASTTSaveSLSTRequestAPI AssasetupSASTTSaveSLSTRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttslst = new pdssasttslstDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveSLSTRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttslstRow = pdssasttslst.ttblsasttslst.NewttblsasttslstRow();
         Sasttslst.UpdateRowFromSasttslst(ref ttblsasttslstRow, AssasetupSASTTSaveSLSTRequestAPI.sasttslst);
         pdssasttslst.ttblsasttslst.AddttblsasttslstRow((pdssasttslstDataSet.ttblsasttslstRow)ttblsasttslstRow);
          
         
         NLogLoggerP.Trace("SASTTSaveSLST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveSLST(ref pdsContext,  pdssasttdata,  pdssasttslst, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveSLST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sastoglfetch SASTOGLFetch(Sastoglfetch sastoglfetch)
      {   
         var result = new Sastoglfetch();
         
         var pdssastoglfetch = new pdssastoglfetchDataSet();
            
         DataRow ttblsastoglfetchCriteria = pdssastoglfetch.ttblsastoglfetch.NewttblsastoglfetchRow();
         Sastoglfetch.UpdateRowFromSastoglfetch(ref ttblsastoglfetchCriteria, sastoglfetch);
         pdssastoglfetch.ttblsastoglfetch.AddttblsastoglfetchRow((pdssastoglfetchDataSet.ttblsastoglfetchRow)ttblsastoglfetchCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTOGLFetch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTOGLFetch(ref pdsContext, ref pdssastoglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTOGLFetch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastoglfetch); 
    
         if (pdssastoglfetch.ttblsastoglfetch.Count > 0) 
         { 
             result = Sastoglfetch.BuildSastoglfetchFromRow(pdssastoglfetch.ttblsastoglfetch[0]);
         } 
              
          
         return result;
          
      }

      public Sastcglfetch SASTCGLFetch(Sastcglfetch sastcglfetch)
      {   
         var result = new Sastcglfetch();
         
         var pdssastcglfetch = new pdssastcglfetchDataSet();
            
         DataRow ttblsastcglfetchCriteria = pdssastcglfetch.ttblsastcglfetch.NewttblsastcglfetchRow();
         Sastcglfetch.UpdateRowFromSastcglfetch(ref ttblsastcglfetchCriteria, sastcglfetch);
         pdssastcglfetch.ttblsastcglfetch.AddttblsastcglfetchRow((pdssastcglfetchDataSet.ttblsastcglfetchRow)ttblsastcglfetchCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTCGLFetch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTCGLFetch(ref pdsContext, ref pdssastcglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTCGLFetch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastcglfetch); 
    
         if (pdssastcglfetch.ttblsastcglfetch.Count > 0) 
         { 
             result = Sastcglfetch.BuildSastcglfetchFromRow(pdssastcglfetch.ttblsastcglfetch[0]);
         } 
              
          
         return result;
          
      }

      public Sastfgetdetail SASTFGetDetail(Sastfgetdetail sastfgetdetail)
      {   
         var result = new Sastfgetdetail();
         
         var pdssastfgetdetail = new pdssastfgetdetailDataSet();
            
         DataRow ttblsastfgetdetailCriteria = pdssastfgetdetail.ttblsastfgetdetail.NewttblsastfgetdetailRow();
         Sastfgetdetail.UpdateRowFromSastfgetdetail(ref ttblsastfgetdetailCriteria, sastfgetdetail);
         pdssastfgetdetail.ttblsastfgetdetail.AddttblsastfgetdetailRow((pdssastfgetdetailDataSet.ttblsastfgetdetailRow)ttblsastfgetdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTFGetDetail - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTFGetDetail(ref pdsContext, ref pdssastfgetdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTFGetDetail - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastfgetdetail); 
    
         if (pdssastfgetdetail.ttblsastfgetdetail.Count > 0) 
         { 
             result = Sastfgetdetail.BuildSastfgetdetailFromRow(pdssastfgetdetail.ttblsastfgetdetail[0]);
         } 
              
          
         return result;
          
      }

      public Sasgtglfetch SASGTGLFetch(Sasgtglfetch sasgtglfetch)
      {   
         var result = new Sasgtglfetch();
         
         var pdssasgtglfetch = new pdssasgtglfetchDataSet();
            
         DataRow ttblsasgtglfetchCriteria = pdssasgtglfetch.ttblsasgtglfetch.NewttblsasgtglfetchRow();
         Sasgtglfetch.UpdateRowFromSasgtglfetch(ref ttblsasgtglfetchCriteria, sasgtglfetch);
         pdssasgtglfetch.ttblsasgtglfetch.AddttblsasgtglfetchRow((pdssasgtglfetchDataSet.ttblsasgtglfetchRow)ttblsasgtglfetchCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGTGLFetch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGTGLFetch(ref pdsContext, ref pdssasgtglfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGTGLFetch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgtglfetch); 
    
         if (pdssasgtglfetch.ttblsasgtglfetch.Count > 0) 
         { 
             result = Sasgtglfetch.BuildSasgtglfetchFromRow(pdssasgtglfetch.ttblsasgtglfetch[0]);
         } 
              
          
         return result;
          
      }

      public Sasgsdescription SASGSDescription(Sasgsdescription sasgsdescription)
      {   
         var result = new Sasgsdescription();
         
         var pdssasgsdescription = new pdssasgsdescriptionDataSet();
            
         DataRow ttblsasgsdescriptionCriteria = pdssasgsdescription.ttblsasgsdescription.NewttblsasgsdescriptionRow();
         Sasgsdescription.UpdateRowFromSasgsdescription(ref ttblsasgsdescriptionCriteria, sasgsdescription);
         pdssasgsdescription.ttblsasgsdescription.AddttblsasgsdescriptionRow((pdssasgsdescriptionDataSet.ttblsasgsdescriptionRow)ttblsasgsdescriptionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGSDescription - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGSDescription(ref pdsContext, ref pdssasgsdescription, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGSDescription - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgsdescription); 
    
         if (pdssasgsdescription.ttblsasgsdescription.Count > 0) 
         { 
             result = Sasgsdescription.BuildSasgsdescriptionFromRow(pdssasgsdescription.ttblsasgsdescription[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sasapirecord> SASAPISearch(string cApplicationID)
      {   
         var results = new List<Sasapirecord>();
         
         var pdssasapirecord = new pdssasapirecordDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAPISearch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAPISearch(ref pdsContext,  cApplicationID, out pdssasapirecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAPISearch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasapirecord); 
    
            foreach (DataRow row in pdssasapirecord.ttblsasapirecord)
            {
                results.Add(Sasapirecord.BuildSasapirecordFromRow(row));
            }
            return results;
        
      }

      public Sasapirecord SASAPIRetrieve(Sasapirecord sasapirecord)
      {   
         var result = new Sasapirecord();
         
         var pdssasapirecord = new pdssasapirecordDataSet();
            
         DataRow ttblsasapirecordCriteria = pdssasapirecord.ttblsasapirecord.NewttblsasapirecordRow();
         Sasapirecord.UpdateRowFromSasapirecord(ref ttblsasapirecordCriteria, sasapirecord);
         pdssasapirecord.ttblsasapirecord.AddttblsasapirecordRow((pdssasapirecordDataSet.ttblsasapirecordRow)ttblsasapirecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAPIRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAPIRetrieve(ref pdsContext, ref pdssasapirecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAPIRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasapirecord); 
    
         if (pdssasapirecord.ttblsasapirecord.Count > 0) 
         { 
             result = Sasapirecord.BuildSasapirecordFromRow(pdssasapirecord.ttblsasapirecord[0]);
         } 
              
          
         return result;
          
      }

      public Sasapirecord SASAPICreate(Sasapirecord sasapirecord)
      {   
         var result = new Sasapirecord();
         
         var pdssasapirecord = new pdssasapirecordDataSet();
            
         DataRow ttblsasapirecordCriteria = pdssasapirecord.ttblsasapirecord.NewttblsasapirecordRow();
         Sasapirecord.UpdateRowFromSasapirecord(ref ttblsasapirecordCriteria, sasapirecord);
         pdssasapirecord.ttblsasapirecord.AddttblsasapirecordRow((pdssasapirecordDataSet.ttblsasapirecordRow)ttblsasapirecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAPICreate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAPICreate(ref pdsContext, ref pdssasapirecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAPICreate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasapirecord); 
    
         if (pdssasapirecord.ttblsasapirecord.Count > 0) 
         { 
             result = Sasapirecord.BuildSasapirecordFromRow(pdssasapirecord.ttblsasapirecord[0]);
         } 
              
          
         return result;
          
      }

      public void SASAPIDelete(Sasapirecord sasapirecord)
      {   
         
         var pdssasapirecord = new pdssasapirecordDataSet();
            
         DataRow ttblsasapirecordCriteria = pdssasapirecord.ttblsasapirecord.NewttblsasapirecordRow();
         Sasapirecord.UpdateRowFromSasapirecord(ref ttblsasapirecordCriteria, sasapirecord);
         pdssasapirecord.ttblsasapirecord.AddttblsasapirecordRow((pdssasapirecordDataSet.ttblsasapirecordRow)ttblsasapirecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAPIDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAPIDelete(ref pdsContext,  pdssasapirecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAPIDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasapirecord);
      }

      public void SASAPIUpdate(Sasapirecord sasapirecord)
      {   
         
         var pdssasapirecord = new pdssasapirecordDataSet();
            
         DataRow ttblsasapirecordCriteria = pdssasapirecord.ttblsasapirecord.NewttblsasapirecordRow();
         Sasapirecord.UpdateRowFromSasapirecord(ref ttblsasapirecordCriteria, sasapirecord);
         pdssasapirecord.ttblsasapirecord.AddttblsasapirecordRow((pdssasapirecordDataSet.ttblsasapirecordRow)ttblsasapirecordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASAPIUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASAPIUpdate(ref pdsContext,  pdssasapirecord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASAPIUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasapirecord);
      }

      public Journalgettimes JournalGetTimes(Journalgettimes journalgettimes)
      {   
         var result = new Journalgettimes();
         
         var pdsjournalgettimes = new pdsjournalgettimesDataSet();
            
         DataRow ttbljournalgettimesCriteria = pdsjournalgettimes.ttbljournalgettimes.NewttbljournalgettimesRow();
         Journalgettimes.UpdateRowFromJournalgettimes(ref ttbljournalgettimesCriteria, journalgettimes);
         pdsjournalgettimes.ttbljournalgettimes.AddttbljournalgettimesRow((pdsjournalgettimesDataSet.ttbljournalgettimesRow)ttbljournalgettimesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("JournalGetTimes - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.JournalGetTimes(ref pdsContext, ref pdsjournalgettimes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("JournalGetTimes - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsjournalgettimes); 
    
         if (pdsjournalgettimes.ttbljournalgettimes.Count > 0) 
         { 
             result = Journalgettimes.BuildJournalgettimesFromRow(pdsjournalgettimes.ttbljournalgettimes[0]);
         } 
              
          
         return result;
          
      }

      public Dropboxauthkey DropboxAuthKeyFieldLeave(Dropboxauthkey dropboxauthkey)
      {   
         var result = new Dropboxauthkey();
         
         var pdsdropboxauthkey = new pdsdropboxauthkeyDataSet();
            
         DataRow ttbldropboxauthkeyCriteria = pdsdropboxauthkey.ttbldropboxauthkey.NewttbldropboxauthkeyRow();
         Dropboxauthkey.UpdateRowFromDropboxauthkey(ref ttbldropboxauthkeyCriteria, dropboxauthkey);
         pdsdropboxauthkey.ttbldropboxauthkey.AddttbldropboxauthkeyRow((pdsdropboxauthkeyDataSet.ttbldropboxauthkeyRow)ttbldropboxauthkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DropboxAuthKeyFieldLeave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.DropboxAuthKeyFieldLeave(ref pdsContext, ref pdsdropboxauthkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DropboxAuthKeyFieldLeave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdropboxauthkey); 
    
         if (pdsdropboxauthkey.ttbldropboxauthkey.Count > 0) 
         { 
             result = Dropboxauthkey.BuildDropboxauthkeyFromRow(pdsdropboxauthkey.ttbldropboxauthkey[0]);
         } 
              
          
         return result;
          
      }

      public Dropboxauthkey DropboxAuthGenerateKey(Dropboxauthkey dropboxauthkey)
      {   
         var result = new Dropboxauthkey();
         
         var pdsdropboxauthkey = new pdsdropboxauthkeyDataSet();
            
         DataRow ttbldropboxauthkeyCriteria = pdsdropboxauthkey.ttbldropboxauthkey.NewttbldropboxauthkeyRow();
         Dropboxauthkey.UpdateRowFromDropboxauthkey(ref ttbldropboxauthkeyCriteria, dropboxauthkey);
         pdsdropboxauthkey.ttbldropboxauthkey.AddttbldropboxauthkeyRow((pdsdropboxauthkeyDataSet.ttbldropboxauthkeyRow)ttbldropboxauthkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DropboxAuthGenerateKey - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.DropboxAuthGenerateKey(ref pdsContext, ref pdsdropboxauthkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DropboxAuthGenerateKey - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdropboxauthkey); 
    
         if (pdsdropboxauthkey.ttbldropboxauthkey.Count > 0) 
         { 
             result = Dropboxauthkey.BuildDropboxauthkeyFromRow(pdsdropboxauthkey.ttbldropboxauthkey[0]);
         } 
              
          
         return result;
          
      }

      public Dropboxauthkey DropboxAuthTestFinalKey(Dropboxauthkey dropboxauthkey)
      {   
         var result = new Dropboxauthkey();
         
         var pdsdropboxauthkey = new pdsdropboxauthkeyDataSet();
            
         DataRow ttbldropboxauthkeyCriteria = pdsdropboxauthkey.ttbldropboxauthkey.NewttbldropboxauthkeyRow();
         Dropboxauthkey.UpdateRowFromDropboxauthkey(ref ttbldropboxauthkeyCriteria, dropboxauthkey);
         pdsdropboxauthkey.ttbldropboxauthkey.AddttbldropboxauthkeyRow((pdsdropboxauthkeyDataSet.ttbldropboxauthkeyRow)ttbldropboxauthkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DropboxAuthTestFinalKey - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.DropboxAuthTestFinalKey(ref pdsContext, ref pdsdropboxauthkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DropboxAuthTestFinalKey - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdropboxauthkey); 
    
         if (pdsdropboxauthkey.ttbldropboxauthkey.Count > 0) 
         { 
             result = Dropboxauthkey.BuildDropboxauthkeyFromRow(pdsdropboxauthkey.ttbldropboxauthkey[0]);
         } 
              
          
         return result;
          
      }

      public AssasetupSABSBatchCopyResponseAPI SABSBatchCopy(string pvFunctionnm, string pvModulenm, string pvFrombatchnm, string pvTobatchnm)
      {   
         var result = new AssasetupSABSBatchCopyResponseAPI();
         
         var pdssabscopyresults = new pdssabscopyresultsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool pvCopydonefl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SABSBatchCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SABSBatchCopy(ref pdsContext,  pvFunctionnm,  pvModulenm,  pvFrombatchnm,  pvTobatchnm, out pvCopydonefl, out pdssabscopyresults, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SABSBatchCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssabscopyresults); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssabscopyresults.ttblsabscopyresults.Count > 0)
         {
            result.sabscopyresults = Sabscopyresults.BuildSabscopyresultsFromRow(pdssabscopyresults.ttblsabscopyresults[0]);
         }
                    
         result.pvCopydonefl = pvCopydonefl;
          
         return result;
          
      }

      public IEnumerable<Messaging> SABSBatchSetInUseBy(string pvBatchnm)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SABSBatchSetInUseBy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SABSBatchSetInUseBy(ref pdsContext,  pvBatchnm, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SABSBatchSetInUseBy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> SABSBatchClearInUseBy(string pvBatchnm)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SABSBatchClearInUseBy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SABSBatchClearInUseBy(ref pdsContext,  pvBatchnm, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SABSBatchClearInUseBy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AssasetupSASCCreateResponseAPI SASCCreate(int iNewCompanyNo, string cNewCompanyName, int iFromCompanyNo)
      {   
         var result = new AssasetupSASCCreateResponseAPI();
         
         var pdssacompany = new pdssacompanyDataSet();
            
         var pdscompanycopy = new pdscompanycopyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASCCreate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASCCreate(ref pdsContext,  iNewCompanyNo,  cNewCompanyName,  iFromCompanyNo, out pdssacompany, out pdscompanycopy, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASCCreate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssacompany); 
    
         if (pdscompanycopy.ttblcompanycopy.Count > 0)
         {
            result.companycopy = Companycopy.BuildCompanycopyFromRow(pdscompanycopy.ttblcompanycopy[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssacompany.ttblsacompany.Count > 0)
         {
            result.sacompany = Sacompany.BuildSacompanyFromRow(pdssacompany.ttblsacompany[0]);
         }
                    
          
         return result;
          
      }

      public AssasetupSASCRetrieveResponseAPI SASCRetrieve(int iCompanyNo)
      {   
         var result = new AssasetupSASCRetrieveResponseAPI();
         
         var pdssacompany = new pdssacompanyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASCRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASCRetrieve(ref pdsContext,  iCompanyNo, out pdssacompany, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASCRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssacompany); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssacompany.ttblsacompany.Count > 0)
         {
            result.sacompany = Sacompany.BuildSacompanyFromRow(pdssacompany.ttblsacompany[0]);
         }
                    
          
         return result;
          
      }

      public AssasetupSASCChangeTaxDisplayResponseAPI SASCChangeTaxDisplay(Sacompany sacompany)
      {   
         var result = new AssasetupSASCChangeTaxDisplayResponseAPI();
         
         var pdssacompany = new pdssacompanyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblsacompanyCriteria = pdssacompany.ttblsacompany.NewttblsacompanyRow();
         Sacompany.UpdateRowFromSacompany(ref ttblsacompanyCriteria, sacompany);
         pdssacompany.ttblsacompany.AddttblsacompanyRow((pdssacompanyDataSet.ttblsacompanyRow)ttblsacompanyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASCChangeTaxDisplay - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASCChangeTaxDisplay(ref pdsContext, ref pdssacompany, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASCChangeTaxDisplay - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssacompany); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssacompany.ttblsacompany.Count > 0)
         {
            result.sacompany = Sacompany.BuildSacompanyFromRow(pdssacompany.ttblsacompany[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> SASCUpdate(Sacompany sacompany)
      {   
         var results = new List<Messaging>();
         
         var pdssacompany = new pdssacompanyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblsacompanyCriteria = pdssacompany.ttblsacompany.NewttblsacompanyRow();
         Sacompany.UpdateRowFromSacompany(ref ttblsacompanyCriteria, sacompany);
         pdssacompany.ttblsacompany.AddttblsacompanyRow((pdssacompanyDataSet.ttblsacompanyRow)ttblsacompanyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASCUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASCUpdate(ref pdsContext,  pdssacompany, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASCUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssacompany); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasgesingle SASGEInitialize()
      {   
         var result = new Sasgesingle();
         
         var pdssasgesingle = new pdssasgesingleDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGEInitialize - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGEInitialize(ref pdsContext, out pdssasgesingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGEInitialize - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgesingle); 
    
         if (pdssasgesingle.ttblsasgesingle.Count > 0) 
         { 
             result = Sasgesingle.BuildSasgesingleFromRow(pdssasgesingle.ttblsasgesingle[0]);
         } 
              
          
         return result;
          
      }

      public AssasetupSASGESearchResponseAPI SASGESearch(Sasgesearchcriteria sasgesearchcriteria)
      {   
         var result = new AssasetupSASGESearchResponseAPI();
         
         var pdssasgesearch = new pdssasgesearchDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblsasgesearchcriteriaCriteria = pdssasgesearch.ttblsasgesearchcriteria.NewttblsasgesearchcriteriaRow();
         Sasgesearchcriteria.UpdateRowFromSasgesearchcriteria(ref ttblsasgesearchcriteriaCriteria, sasgesearchcriteria);
         pdssasgesearch.ttblsasgesearchcriteria.AddttblsasgesearchcriteriaRow((pdssasgesearchDataSet.ttblsasgesearchcriteriaRow)ttblsasgesearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGESearch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGESearch(ref pdsContext, ref pdssasgesearch, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGESearch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgesearch); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdssasgesearch.ttblsasgesearchresults)
         {
            result.sasgesearchresults.Add(Sasgesearchresults.BuildSasgesearchresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Sastfsingle SASTFLeaveField(AssasetupSASTFLeaveFieldRequestAPI AssasetupSASTFLeaveFieldRequestAPI)
      {   
         var result = new Sastfsingle();
         
         var pdssastfsingle = new pdssastfsingleDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsastfsingleRow = pdssastfsingle.ttblsastfsingle.NewttblsastfsingleRow();
         Sastfsingle.UpdateRowFromSastfsingle(ref ttblsastfsingleRow, AssasetupSASTFLeaveFieldRequestAPI.sastfsingle);
         pdssastfsingle.ttblsastfsingle.AddttblsastfsingleRow((pdssastfsingleDataSet.ttblsastfsingleRow)ttblsastfsingleRow);
          
         var  cFieldName = AssasetupSASTFLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("SASTFLeaveField - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTFLeaveField(ref pdsContext,  cFieldName, ref pdssastfsingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTFLeaveField - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastfsingle); 
    
         if (pdssastfsingle.ttblsastfsingle.Count > 0) 
         { 
             result = Sastfsingle.BuildSastfsingleFromRow(pdssastfsingle.ttblsastfsingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sastfsearchresults> SASTFSearch(Sastfsearchcriteria sastfsearchcriteria)
      {   
         var results = new List<Sastfsearchresults>();
         
         var pdssastfsearch = new pdssastfsearchDataSet();
            
         DataRow ttblsastfsearchcriteriaCriteria = pdssastfsearch.ttblsastfsearchcriteria.NewttblsastfsearchcriteriaRow();
         Sastfsearchcriteria.UpdateRowFromSastfsearchcriteria(ref ttblsastfsearchcriteriaCriteria, sastfsearchcriteria);
         pdssastfsearch.ttblsastfsearchcriteria.AddttblsastfsearchcriteriaRow((pdssastfsearchDataSet.ttblsastfsearchcriteriaRow)ttblsastfsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTFSearch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTFSearch(ref pdsContext, ref pdssastfsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTFSearch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastfsearch); 
    
            foreach (DataRow row in pdssastfsearch.ttblsastfsearchresults)
            {
                results.Add(Sastfsearchresults.BuildSastfsearchresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saabnresults> SAABNFetch(Saabncriteria saabncriteria)
      {   
         var results = new List<Saabnresults>();
         
         var pdssaabnfetchcriteria = new pdssaabnfetchcriteriaDataSet();
            
         var pdssaabnfetch = new pdssaabnfetchDataSet();
            
         DataRow ttblsaabncriteriaCriteria = pdssaabnfetchcriteria.ttblsaabncriteria.NewttblsaabncriteriaRow();
         Saabncriteria.UpdateRowFromSaabncriteria(ref ttblsaabncriteriaCriteria, saabncriteria);
         pdssaabnfetchcriteria.ttblsaabncriteria.AddttblsaabncriteriaRow((pdssaabnfetchcriteriaDataSet.ttblsaabncriteriaRow)ttblsaabncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAABNFetch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAABNFetch(ref pdsContext,  pdssaabnfetchcriteria, out pdssaabnfetch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAABNFetch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaabnfetchcriteria); 
    
            foreach (DataRow row in pdssaabnfetch.ttblsaabnresults)
            {
                results.Add(Saabnresults.BuildSaabnresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saabnrecords> SAABNRecords()
      {   
         var results = new List<Saabnrecords>();
         
         var pdssaabnrecords = new pdssaabnrecordsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAABNRecords - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAABNRecords(ref pdsContext, out pdssaabnrecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAABNRecords - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaabnrecords); 
    
            foreach (DataRow row in pdssaabnrecords.ttblsaabnrecords)
            {
                results.Add(Saabnrecords.BuildSaabnrecordsFromRow(row));
            }
            return results;
        
      }

      public AssasetupSAABNBODCountResponseAPI SAABNBODCount(bool lAllRecords)
      {   
         var result = new AssasetupSAABNBODCountResponseAPI();
         
         string cBODMessage = string.Empty;
         bool lHitRecordMax = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAABNBODCount - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAABNBODCount(ref pdsContext,  lAllRecords, out cBODMessage, out lHitRecordMax, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAABNBODCount - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cBODMessage = cBODMessage;
         result.lHitRecordMax = lHitRecordMax;
          
         return result;
          
      }

      public IEnumerable<Sasttcodes> SASTTLoadTableCodes()
      {   
         var results = new List<Sasttcodes>();
         
         var pdssasttcodes = new pdssasttcodesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadTableCodes - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadTableCodes(ref pdsContext, out pdssasttcodes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadTableCodes - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttcodes); 
    
            foreach (DataRow row in pdssasttcodes.ttblsasttcodes)
            {
                results.Add(Sasttcodes.BuildSasttcodesFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasttdata> SASTTLoadTableData(AssasetupSASTTLoadTableDataRequestAPI AssasetupSASTTLoadTableDataRequestAPI)
      {   
         var results = new List<Sasttdata>();
         
         var pdssasttcodes = new pdssasttcodesDataSet();
            
         var pdssasttsearch = new pdssasttsearchDataSet();
            
         var pdssasttdata = new pdssasttdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttcodesRow = pdssasttcodes.ttblsasttcodes.NewttblsasttcodesRow();
         Sasttcodes.UpdateRowFromSasttcodes(ref ttblsasttcodesRow, AssasetupSASTTLoadTableDataRequestAPI.sasttcodes);
         pdssasttcodes.ttblsasttcodes.AddttblsasttcodesRow((pdssasttcodesDataSet.ttblsasttcodesRow)ttblsasttcodesRow);
          
         DataRow ttblsasttsearchcriteriaRow = pdssasttsearch.ttblsasttsearchcriteria.NewttblsasttsearchcriteriaRow();
         Sasttsearchcriteria.UpdateRowFromSasttsearchcriteria(ref ttblsasttsearchcriteriaRow, AssasetupSASTTLoadTableDataRequestAPI.sasttsearchcriteria);
         pdssasttsearch.ttblsasttsearchcriteria.AddttblsasttsearchcriteriaRow((pdssasttsearchDataSet.ttblsasttsearchcriteriaRow)ttblsasttsearchcriteriaRow);
          
         
         NLogLoggerP.Trace("SASTTLoadTableData - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadTableData(ref pdsContext,  pdssasttcodes,  pdssasttsearch, out pdssasttdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadTableData - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttcodes); 
    
            foreach (DataRow row in pdssasttdata.ttblsasttdata)
            {
                results.Add(Sasttdata.BuildSasttdataFromRow(row));
            }
            return results;
        
      }

      public AssasetupSASTTCreateResponseAPI SASTTCreate(AssasetupSASTTCreateRequestAPI AssasetupSASTTCreateRequestAPI)
      {   
         var result = new AssasetupSASTTCreateResponseAPI();
         
         var pdssasttcodes = new pdssasttcodesDataSet();
            
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttcodesRow = pdssasttcodes.ttblsasttcodes.NewttblsasttcodesRow();
         Sasttcodes.UpdateRowFromSasttcodes(ref ttblsasttcodesRow, AssasetupSASTTCreateRequestAPI.sasttcodes);
         pdssasttcodes.ttblsasttcodes.AddttblsasttcodesRow((pdssasttcodesDataSet.ttblsasttcodesRow)ttblsasttcodesRow);
          
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTCreateRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         
         NLogLoggerP.Trace("SASTTCreate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTCreate(ref pdsContext,  pdssasttcodes, ref pdssasttdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTCreate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttcodes); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdssasttdata.ttblsasttdata.Count > 0)
         {
            result.sasttdata = Sasttdata.BuildSasttdataFromRow(pdssasttdata.ttblsasttdata[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTModify(AssasetupSASTTModifyRequestAPI AssasetupSASTTModifyRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttcodes = new pdssasttcodesDataSet();
            
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttcodesRow = pdssasttcodes.ttblsasttcodes.NewttblsasttcodesRow();
         Sasttcodes.UpdateRowFromSasttcodes(ref ttblsasttcodesRow, AssasetupSASTTModifyRequestAPI.sasttcodes);
         pdssasttcodes.ttblsasttcodes.AddttblsasttcodesRow((pdssasttcodesDataSet.ttblsasttcodesRow)ttblsasttcodesRow);
          
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTModifyRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         
         NLogLoggerP.Trace("SASTTModify - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTModify(ref pdsContext,  pdssasttcodes,  pdssasttdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTModify - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttcodes); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> SASTTDelete(AssasetupSASTTDeleteRequestAPI AssasetupSASTTDeleteRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttcodes = new pdssasttcodesDataSet();
            
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttcodesRow = pdssasttcodes.ttblsasttcodes.NewttblsasttcodesRow();
         Sasttcodes.UpdateRowFromSasttcodes(ref ttblsasttcodesRow, AssasetupSASTTDeleteRequestAPI.sasttcodes);
         pdssasttcodes.ttblsasttcodes.AddttblsasttcodesRow((pdssasttcodesDataSet.ttblsasttcodesRow)ttblsasttcodesRow);
          
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTDeleteRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         
         NLogLoggerP.Trace("SASTTDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTDelete(ref pdsContext,  pdssasttcodes,  pdssasttdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttcodes); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttcmst SASTTLoadCMST(Sasttdata sasttdata)
      {   
         var result = new Sasttcmst();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttcmst = new pdssasttcmstDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadCMST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadCMST(ref pdsContext,  pdssasttdata, out pdssasttcmst, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadCMST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttcmst.ttblsasttcmst.Count > 0) 
         { 
             result = Sasttcmst.BuildSasttcmstFromRow(pdssasttcmst.ttblsasttcmst[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveCMST(AssasetupSASTTSaveCMSTRequestAPI AssasetupSASTTSaveCMSTRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttcmst = new pdssasttcmstDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttcmstRow = pdssasttcmst.ttblsasttcmst.NewttblsasttcmstRow();
         Sasttcmst.UpdateRowFromSasttcmst(ref ttblsasttcmstRow, AssasetupSASTTSaveCMSTRequestAPI.sasttcmst);
         pdssasttcmst.ttblsasttcmst.AddttblsasttcmstRow((pdssasttcmstDataSet.ttblsasttcmstRow)ttblsasttcmstRow);
          
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveCMSTRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         
         NLogLoggerP.Trace("SASTTSaveCMST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveCMST(ref pdsContext,  pdssasttdata,  pdssasttcmst, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveCMST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttpdst SASTTLoadPDST(Sasttdata sasttdata)
      {   
         var result = new Sasttpdst();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttpdst = new pdssasttpdstDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadPDST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadPDST(ref pdsContext,  pdssasttdata, out pdssasttpdst, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadPDST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttpdst.ttblsasttpdst.Count > 0) 
         { 
             result = Sasttpdst.BuildSasttpdstFromRow(pdssasttpdst.ttblsasttpdst[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSavePDST(AssasetupSASTTSavePDSTRequestAPI AssasetupSASTTSavePDSTRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttpdst = new pdssasttpdstDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSavePDSTRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttpdstRow = pdssasttpdst.ttblsasttpdst.NewttblsasttpdstRow();
         Sasttpdst.UpdateRowFromSasttpdst(ref ttblsasttpdstRow, AssasetupSASTTSavePDSTRequestAPI.sasttpdst);
         pdssasttpdst.ttblsasttpdst.AddttblsasttpdstRow((pdssasttpdstDataSet.ttblsasttpdstRow)ttblsasttpdstRow);
          
         
         NLogLoggerP.Trace("SASTTSavePDST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSavePDST(ref pdsContext,  pdssasttdata,  pdssasttpdst, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSavePDST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttvast SASTTLoadVAST(Sasttdata sasttdata)
      {   
         var result = new Sasttvast();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttvast = new pdssasttvastDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadVAST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadVAST(ref pdsContext,  pdssasttdata, out pdssasttvast, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadVAST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttvast.ttblsasttvast.Count > 0) 
         { 
             result = Sasttvast.BuildSasttvastFromRow(pdssasttvast.ttblsasttvast[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveVAST(AssasetupSASTTSaveVASTRequestAPI AssasetupSASTTSaveVASTRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttvast = new pdssasttvastDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveVASTRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttvastRow = pdssasttvast.ttblsasttvast.NewttblsasttvastRow();
         Sasttvast.UpdateRowFromSasttvast(ref ttblsasttvastRow, AssasetupSASTTSaveVASTRequestAPI.sasttvast);
         pdssasttvast.ttblsasttvast.AddttblsasttvastRow((pdssasttvastDataSet.ttblsasttvastRow)ttblsasttvastRow);
          
         
         NLogLoggerP.Trace("SASTTSaveVAST - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveVAST(ref pdsContext,  pdssasttdata,  pdssasttvast, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveVAST - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttsastaz SASTTLoadSASTAZ(Sasttdata sasttdata)
      {   
         var result = new Sasttsastaz();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastaz = new pdssasttsastazDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadSASTAZ - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadSASTAZ(ref pdsContext,  pdssasttdata, out pdssasttsastaz, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadSASTAZ - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttsastaz.ttblsasttsastaz.Count > 0) 
         { 
             result = Sasttsastaz.BuildSasttsastazFromRow(pdssasttsastaz.ttblsasttsastaz[0]);
         } 
              
          
         return result;
          
      }

      public void SASTTSaveSASTAZ(AssasetupSASTTSaveSASTAZRequestAPI AssasetupSASTTSaveSASTAZRequestAPI)
      {   
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastaz = new pdssasttsastazDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveSASTAZRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttsastazRow = pdssasttsastaz.ttblsasttsastaz.NewttblsasttsastazRow();
         Sasttsastaz.UpdateRowFromSasttsastaz(ref ttblsasttsastazRow, AssasetupSASTTSaveSASTAZRequestAPI.sasttsastaz);
         pdssasttsastaz.ttblsasttsastaz.AddttblsasttsastazRow((pdssasttsastazDataSet.ttblsasttsastazRow)ttblsasttsastazRow);
          
         
         NLogLoggerP.Trace("SASTTSaveSASTAZ - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveSASTAZ(ref pdsContext,  pdssasttdata,  pdssasttsastaz, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveSASTAZ - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata);
      }

      public IEnumerable<Sasttsastae> SASTTLoadSASTAE(Sasttdata sasttdata)
      {   
         var results = new List<Sasttsastae>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastae = new pdssasttsastaeDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadSASTAE - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadSASTAE(ref pdsContext,  pdssasttdata, out pdssasttsastae, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadSASTAE - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdssasttsastae.ttblsasttsastae)
            {
                results.Add(Sasttsastae.BuildSasttsastaeFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> SASTTSaveSASTAE(AssasetupSASTTSaveSASTAERequestAPI AssasetupSASTTSaveSASTAERequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastae = new pdssasttsastaeDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveSASTAERequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         foreach (var obj in AssasetupSASTTSaveSASTAERequestAPI.sasttsastae)
         {
            DataRow ttblsasttsastaeRow = pdssasttsastae.ttblsasttsastae.NewttblsasttsastaeRow();
            Sasttsastae.UpdateRowFromSasttsastae(ref ttblsasttsastaeRow, obj);
            pdssasttsastae.ttblsasttsastae.AddttblsasttsastaeRow((pdssasttsastaeDataSet.ttblsasttsastaeRow)ttblsasttsastaeRow);
         }
          
         
         NLogLoggerP.Trace("SASTTSaveSASTAE - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveSASTAE(ref pdsContext,  pdssasttdata,  pdssasttsastae, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveSASTAE - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttsasta SASTTLoadSASTA(Sasttdata sasttdata)
      {   
         var result = new Sasttsasta();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsasta = new pdssasttsastaDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadSASTA - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadSASTA(ref pdsContext,  pdssasttdata, out pdssasttsasta, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadSASTA - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttsasta.ttblsasttsasta.Count > 0) 
         { 
             result = Sasttsasta.BuildSasttsastaFromRow(pdssasttsasta.ttblsasttsasta[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveSASTA(AssasetupSASTTSaveSASTARequestAPI AssasetupSASTTSaveSASTARequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsasta = new pdssasttsastaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveSASTARequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttsastaRow = pdssasttsasta.ttblsasttsasta.NewttblsasttsastaRow();
         Sasttsasta.UpdateRowFromSasttsasta(ref ttblsasttsastaRow, AssasetupSASTTSaveSASTARequestAPI.sasttsasta);
         pdssasttsasta.ttblsasttsasta.AddttblsasttsastaRow((pdssasttsastaDataSet.ttblsasttsastaRow)ttblsasttsastaRow);
          
         
         NLogLoggerP.Trace("SASTTSaveSASTA - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveSASTA(ref pdsContext,  pdssasttdata,  pdssasttsasta, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveSASTA - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttterms SASTTLoadTerms(Sasttdata sasttdata)
      {   
         var result = new Sasttterms();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttterms = new pdssastttermsDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadTerms - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadTerms(ref pdsContext,  pdssasttdata, out pdssasttterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadTerms - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttterms.ttblsasttterms.Count > 0) 
         { 
             result = Sasttterms.BuildSastttermsFromRow(pdssasttterms.ttblsasttterms[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveTerms(AssasetupSASTTSaveTermsRequestAPI AssasetupSASTTSaveTermsRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttterms = new pdssastttermsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveTermsRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsastttermsRow = pdssasttterms.ttblsasttterms.NewttblsastttermsRow();
         Sasttterms.UpdateRowFromSasttterms(ref ttblsastttermsRow, AssasetupSASTTSaveTermsRequestAPI.sasttterms);
         pdssasttterms.ttblsasttterms.AddttblsastttermsRow((pdssastttermsDataSet.ttblsastttermsRow)ttblsastttermsRow);
          
         
         NLogLoggerP.Trace("SASTTSaveTerms - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveTerms(ref pdsContext,  pdssasttdata,  pdssasttterms, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveTerms - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttsastn SASTTLoadSASTN(Sasttdata sasttdata)
      {   
         var result = new Sasttsastn();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastn = new pdssasttsastnDataSet();
            
         DataRow ttblsasttdataCriteria = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataCriteria, sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTLoadSASTN - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTLoadSASTN(ref pdsContext,  pdssasttdata, out pdssasttsastn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTLoadSASTN - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
         if (pdssasttsastn.ttblsasttsastn.Count > 0) 
         { 
             result = Sasttsastn.BuildSasttsastnFromRow(pdssasttsastn.ttblsasttsastn[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> SASTTSaveSASTN(AssasetupSASTTSaveSASTNRequestAPI AssasetupSASTTSaveSASTNRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasttdata = new pdssasttdataDataSet();
            
         var pdssasttsastn = new pdssasttsastnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasttdataRow = pdssasttdata.ttblsasttdata.NewttblsasttdataRow();
         Sasttdata.UpdateRowFromSasttdata(ref ttblsasttdataRow, AssasetupSASTTSaveSASTNRequestAPI.sasttdata);
         pdssasttdata.ttblsasttdata.AddttblsasttdataRow((pdssasttdataDataSet.ttblsasttdataRow)ttblsasttdataRow);
          
         DataRow ttblsasttsastnRow = pdssasttsastn.ttblsasttsastn.NewttblsasttsastnRow();
         Sasttsastn.UpdateRowFromSasttsastn(ref ttblsasttsastnRow, AssasetupSASTTSaveSASTNRequestAPI.sasttsastn);
         pdssasttsastn.ttblsasttsastn.AddttblsasttsastnRow((pdssasttsastnDataSet.ttblsasttsastnRow)ttblsasttsastnRow);
          
         
         NLogLoggerP.Trace("SASTTSaveSASTN - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTSaveSASTN(ref pdsContext,  pdssasttdata,  pdssasttsastn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTSaveSASTN - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Sasttterms SASTTTermsChgField(AssasetupSASTTTermsChgFieldRequestAPI AssasetupSASTTTermsChgFieldRequestAPI)
      {   
         var result = new Sasttterms();
         
         var pdssasttterms = new pdssastttermsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsastttermsRow = pdssasttterms.ttblsasttterms.NewttblsastttermsRow();
         Sasttterms.UpdateRowFromSasttterms(ref ttblsastttermsRow, AssasetupSASTTTermsChgFieldRequestAPI.sasttterms);
         pdssasttterms.ttblsasttterms.AddttblsastttermsRow((pdssastttermsDataSet.ttblsastttermsRow)ttblsastttermsRow);
          
         var  cFieldName = AssasetupSASTTTermsChgFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("SASTTTermsChgField - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTTermsChgField(ref pdsContext,  cFieldName, ref pdssasttterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTTermsChgField - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttterms); 
    
         if (pdssasttterms.ttblsasttterms.Count > 0) 
         { 
             result = Sasttterms.BuildSastttermsFromRow(pdssasttterms.ttblsasttterms[0]);
         } 
              
          
         return result;
          
      }

      public Saspuserfields SASPRetrieveUserFields(string cPrinterName)
      {   
         var result = new Saspuserfields();
         
         var pdssaspuserfields = new pdssaspuserfieldsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASPRetrieveUserFields - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASPRetrieveUserFields(ref pdsContext,  cPrinterName, out pdssaspuserfields, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASPRetrieveUserFields - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaspuserfields); 
    
         if (pdssaspuserfields.ttblsaspuserfields.Count > 0) 
         { 
             result = Saspuserfields.BuildSaspuserfieldsFromRow(pdssaspuserfields.ttblsaspuserfields[0]);
         } 
              
          
         return result;
          
      }

      public Saspcopy SASPCopy(Saspcopy saspcopy)
      {   
         var result = new Saspcopy();
         
         var pdssaspcopy = new pdssaspcopyDataSet();
            
         DataRow ttblsaspcopyCriteria = pdssaspcopy.ttblsaspcopy.NewttblsaspcopyRow();
         Saspcopy.UpdateRowFromSaspcopy(ref ttblsaspcopyCriteria, saspcopy);
         pdssaspcopy.ttblsaspcopy.AddttblsaspcopyRow((pdssaspcopyDataSet.ttblsaspcopyRow)ttblsaspcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASPCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASPCopy(ref pdsContext, ref pdssaspcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASPCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaspcopy); 
    
         if (pdssaspcopy.ttblsaspcopy.Count > 0) 
         { 
             result = Saspcopy.BuildSaspcopyFromRow(pdssaspcopy.ttblsaspcopy[0]);
         } 
              
          
         return result;
          
      }

      public void SASPUpdateUserFields(Saspuserfields saspuserfields)
      {   
         
         var pdssaspuserfields = new pdssaspuserfieldsDataSet();
            
         DataRow ttblsaspuserfieldsCriteria = pdssaspuserfields.ttblsaspuserfields.NewttblsaspuserfieldsRow();
         Saspuserfields.UpdateRowFromSaspuserfields(ref ttblsaspuserfieldsCriteria, saspuserfields);
         pdssaspuserfields.ttblsaspuserfields.AddttblsaspuserfieldsRow((pdssaspuserfieldsDataSet.ttblsaspuserfieldsRow)ttblsaspuserfieldsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASPUpdateUserFields - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASPUpdateUserFields(ref pdsContext,  pdssaspuserfields, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASPUpdateUserFields - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaspuserfields);
      }

      public Sasgldata SASGLLoad(string cState, string cTaxAuth)
      {   
         var result = new Sasgldata();
         
         var pdssasgldata = new pdssasgldataDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGLLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGLLoad(ref pdsContext,  cState,  cTaxAuth, out pdssasgldata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGLLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgldata); 
    
         if (pdssasgldata.ttblsasgldata.Count > 0) 
         { 
             result = Sasgldata.BuildSasgldataFromRow(pdssasgldata.ttblsasgldata[0]);
         } 
              
          
         return result;
          
      }

      public void SASGLGLSave(AssasetupSASGLGLSaveRequestAPI AssasetupSASGLGLSaveRequestAPI)
      {   
         
         var pdssasglglsave = new pdssasglglsaveDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasglglsaveRow = pdssasglglsave.ttblsasglglsave.NewttblsasglglsaveRow();
         Sasglglsave.UpdateRowFromSasglglsave(ref ttblsasglglsaveRow, AssasetupSASGLGLSaveRequestAPI.sasglglsave);
         pdssasglglsave.ttblsasglglsave.AddttblsasglglsaveRow((pdssasglglsaveDataSet.ttblsasglglsaveRow)ttblsasglglsaveRow);
          
         var  cState = AssasetupSASGLGLSaveRequestAPI.cState;
            
         var  cTaxAuth = AssasetupSASGLGLSaveRequestAPI.cTaxAuth;
            
         var  cAction = AssasetupSASGLGLSaveRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("SASGLGLSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGLGLSave(ref pdsContext,  cState,  cTaxAuth,  cAction, ref pdssasglglsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGLGLSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasglglsave);
      }

      public Sasglcopy SASGLCopy(Sasglcopy sasglcopy)
      {   
         var result = new Sasglcopy();
         
         var pdssasglcopy = new pdssasglcopyDataSet();
            
         DataRow ttblsasglcopyCriteria = pdssasglcopy.ttblsasglcopy.NewttblsasglcopyRow();
         Sasglcopy.UpdateRowFromSasglcopy(ref ttblsasglcopyCriteria, sasglcopy);
         pdssasglcopy.ttblsasglcopy.AddttblsasglcopyRow((pdssasglcopyDataSet.ttblsasglcopyRow)ttblsasglcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGLCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGLCopy(ref pdsContext, ref pdssasglcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGLCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasglcopy); 
    
         if (pdssasglcopy.ttblsasglcopy.Count > 0) 
         { 
             result = Sasglcopy.BuildSasglcopyFromRow(pdssasglcopy.ttblsasglcopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sasgtgetlistresults> SASGTGetList(Sasgtgetlistcriteria sasgtgetlistcriteria)
      {   
         var results = new List<Sasgtgetlistresults>();
         
         var pdssasgtgetlist = new pdssasgtgetlistDataSet();
            
         DataRow ttblsasgtgetlistcriteriaCriteria = pdssasgtgetlist.ttblsasgtgetlistcriteria.NewttblsasgtgetlistcriteriaRow();
         Sasgtgetlistcriteria.UpdateRowFromSasgtgetlistcriteria(ref ttblsasgtgetlistcriteriaCriteria, sasgtgetlistcriteria);
         pdssasgtgetlist.ttblsasgtgetlistcriteria.AddttblsasgtgetlistcriteriaRow((pdssasgtgetlistDataSet.ttblsasgtgetlistcriteriaRow)ttblsasgtgetlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGTGetList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGTGetList(ref pdsContext, ref pdssasgtgetlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGTGetList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgtgetlist); 
    
            foreach (DataRow row in pdssasgtgetlist.ttblsasgtgetlistresults)
            {
                results.Add(Sasgtgetlistresults.BuildSasgtgetlistresultsFromRow(row));
            }
            return results;
        
      }

      public void SASGTGLSave(Sasgtglsave sasgtglsave)
      {   
         
         var pdssasgtglsave = new pdssasgtglsaveDataSet();
            
         DataRow ttblsasgtglsaveCriteria = pdssasgtglsave.ttblsasgtglsave.NewttblsasgtglsaveRow();
         Sasgtglsave.UpdateRowFromSasgtglsave(ref ttblsasgtglsaveCriteria, sasgtglsave);
         pdssasgtglsave.ttblsasgtglsave.AddttblsasgtglsaveRow((pdssasgtglsaveDataSet.ttblsasgtglsaveRow)ttblsasgtglsaveCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGTGLSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGTGLSave(ref pdsContext,  pdssasgtglsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGTGLSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgtglsave);
      }

      public Sajournalcopy SAJournalCopy(Sajournalcopy sajournalcopy)
      {   
         var result = new Sajournalcopy();
         
         var pdssajournalcopy = new pdssajournalcopyDataSet();
            
         DataRow ttblsajournalcopyCriteria = pdssajournalcopy.ttblsajournalcopy.NewttblsajournalcopyRow();
         Sajournalcopy.UpdateRowFromSajournalcopy(ref ttblsajournalcopyCriteria, sajournalcopy);
         pdssajournalcopy.ttblsajournalcopy.AddttblsajournalcopyRow((pdssajournalcopyDataSet.ttblsajournalcopyRow)ttblsajournalcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAJournalCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAJournalCopy(ref pdsContext, ref pdssajournalcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAJournalCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssajournalcopy); 
    
         if (pdssajournalcopy.ttblsajournalcopy.Count > 0) 
         { 
             result = Sajournalcopy.BuildSajournalcopyFromRow(pdssajournalcopy.ttblsajournalcopy[0]);
         } 
              
          
         return result;
          
      }

      public AssasetupSASGAddonsLoadResponseAPI SASGAddonsLoad(Sasgaddonscriteria sasgaddonscriteria)
      {   
         var result = new AssasetupSASGAddonsLoadResponseAPI();
         
         var pdssasgaddonscriteria = new pdssasgaddonscriteriaDataSet();
            
         var pdssasgaddonsresults = new pdssasgaddonsresultsDataSet();
            
         var pdssasgaddonslists = new pdssasgaddonslistsDataSet();
            
         DataRow ttblsasgaddonscriteriaCriteria = pdssasgaddonscriteria.ttblsasgaddonscriteria.NewttblsasgaddonscriteriaRow();
         Sasgaddonscriteria.UpdateRowFromSasgaddonscriteria(ref ttblsasgaddonscriteriaCriteria, sasgaddonscriteria);
         pdssasgaddonscriteria.ttblsasgaddonscriteria.AddttblsasgaddonscriteriaRow((pdssasgaddonscriteriaDataSet.ttblsasgaddonscriteriaRow)ttblsasgaddonscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGAddonsLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGAddonsLoad(ref pdsContext,  pdssasgaddonscriteria, out pdssasgaddonsresults, out pdssasgaddonslists, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGAddonsLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgaddonscriteria); 
    
         foreach (DataRow row in pdssasgaddonslists.ttblsasgaddonstaxability)
         {
            result.sasgaddonstaxability.Add(Sasgaddonstaxability.BuildSasgaddonstaxabilityFromRow(row));
         }     
         foreach (DataRow row in pdssasgaddonslists.ttblsasgaddonstaxgroup)
         {
            result.sasgaddonstaxgroup.Add(Sasgaddonstaxgroup.BuildSasgaddonstaxgroupFromRow(row));
         }     
         foreach (DataRow row in pdssasgaddonsresults.ttblsasgaddonsresults)
         {
            result.sasgaddonsresults.Add(Sasgaddonsresults.BuildSasgaddonsresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AssasetupSASGAddonsSaveResponseAPI SASGAddonsSave(IEnumerable<Sasgaddonsresults> sasgaddonsresults)
      {   
         var result = new AssasetupSASGAddonsSaveResponseAPI();
         
         var pdssasgaddonsresults = new pdssasgaddonsresultsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in sasgaddonsresults)
         {
             DataRow row = pdssasgaddonsresults.ttblsasgaddonsresults.NewttblsasgaddonsresultsRow();
             Sasgaddonsresults.UpdateRowFromSasgaddonsresults(ref row, obj);
             pdssasgaddonsresults.ttblsasgaddonsresults.AddttblsasgaddonsresultsRow((pdssasgaddonsresultsDataSet.ttblsasgaddonsresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGAddonsSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGAddonsSave(ref pdsContext, ref pdssasgaddonsresults, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGAddonsSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgaddonsresults); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdssasgaddonsresults.ttblsasgaddonsresults)
         {
            result.sasgaddonsresults.Add(Sasgaddonsresults.BuildSasgaddonsresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void SASGGSTVATAdditionalSave(Sasggstvatadditionalsave sasggstvatadditionalsave)
      {   
         
         var pdssasggstvatadditionalsave = new pdssasggstvatadditionalsaveDataSet();
            
         DataRow ttblsasggstvatadditionalsaveCriteria = pdssasggstvatadditionalsave.ttblsasggstvatadditionalsave.NewttblsasggstvatadditionalsaveRow();
         Sasggstvatadditionalsave.UpdateRowFromSasggstvatadditionalsave(ref ttblsasggstvatadditionalsaveCriteria, sasggstvatadditionalsave);
         pdssasggstvatadditionalsave.ttblsasggstvatadditionalsave.AddttblsasggstvatadditionalsaveRow((pdssasggstvatadditionalsaveDataSet.ttblsasggstvatadditionalsaveRow)ttblsasggstvatadditionalsaveCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGGSTVATAdditionalSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGGSTVATAdditionalSave(ref pdsContext,  pdssasggstvatadditionalsave, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGGSTVATAdditionalSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasggstvatadditionalsave);
      }

      public Sasggstvatcopy SASGGSTVATCopy(Sasggstvatcopy sasggstvatcopy)
      {   
         var result = new Sasggstvatcopy();
         
         var pdssasggstvatcopy = new pdssasggstvatcopyDataSet();
            
         DataRow ttblsasggstvatcopyCriteria = pdssasggstvatcopy.ttblsasggstvatcopy.NewttblsasggstvatcopyRow();
         Sasggstvatcopy.UpdateRowFromSasggstvatcopy(ref ttblsasggstvatcopyCriteria, sasggstvatcopy);
         pdssasggstvatcopy.ttblsasggstvatcopy.AddttblsasggstvatcopyRow((pdssasggstvatcopyDataSet.ttblsasggstvatcopyRow)ttblsasggstvatcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGGSTVATCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGGSTVATCopy(ref pdsContext, ref pdssasggstvatcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGGSTVATCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasggstvatcopy); 
    
         if (pdssasggstvatcopy.ttblsasggstvatcopy.Count > 0) 
         { 
             result = Sasggstvatcopy.BuildSasggstvatcopyFromRow(pdssasggstvatcopy.ttblsasggstvatcopy[0]);
         } 
              
          
         return result;
          
      }

      public Sasggstvatdata SASGGSTVATLoad(string cState)
      {   
         var result = new Sasggstvatdata();
         
         var pdssasggstvatdata = new pdssasggstvatdataDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGGSTVATLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGGSTVATLoad(ref pdsContext,  cState, out pdssasggstvatdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGGSTVATLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasggstvatdata); 
    
         if (pdssasggstvatdata.ttblsasggstvatdata.Count > 0) 
         { 
             result = Sasggstvatdata.BuildSasggstvatdataFromRow(pdssasggstvatdata.ttblsasggstvatdata[0]);
         } 
              
          
         return result;
          
      }

      public string ValidateGLAccount(string cGLAccount)
      {   
          
         string cErrorMessage = string.Empty;
         string cGLAccountDesc = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateGLAccount - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.ValidateGLAccount(ref pdsContext,  cGLAccount, out cErrorMessage, out cGLAccountDesc);
               }
            });
         NLogLoggerP.Info("ValidateGLAccount - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cGLAccountDesc;
      
      }

      public void SastcDelete(Sastcdelete sastcdelete)
      {   
         
         var pdssastcdelete = new pdssastcdeleteDataSet();
            
         DataRow ttblsastcdeleteCriteria = pdssastcdelete.ttblsastcdelete.NewttblsastcdeleteRow();
         Sastcdelete.UpdateRowFromSastcdelete(ref ttblsastcdeleteCriteria, sastcdelete);
         pdssastcdelete.ttblsastcdelete.AddttblsastcdeleteRow((pdssastcdeleteDataSet.ttblsastcdeleteRow)ttblsastcdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SastcDelete - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SastcDelete(ref pdsContext,  pdssastcdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SastcDelete - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastcdelete);
      }

      public Sastcupdate SASTCUpdate(AssasetupSASTCUpdateRequestAPI AssasetupSASTCUpdateRequestAPI)
      {   
         var result = new Sastcupdate();
         
         var pdssastcresults = new pdssastcresultsDataSet();
            
         var pdssastcnotes = new pdssastcnotesDataSet();
            
         var pdssastcupdate = new pdssastcupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSASTCUpdateRequestAPI.sastcnotes)
         {
            DataRow ttblsastcnotesRow = pdssastcnotes.ttblsastcnotes.NewttblsastcnotesRow();
            Sastcnotes.UpdateRowFromSastcnotes(ref ttblsastcnotesRow, obj);
            pdssastcnotes.ttblsastcnotes.AddttblsastcnotesRow((pdssastcnotesDataSet.ttblsastcnotesRow)ttblsastcnotesRow);
         }
          
         DataRow ttblsastcresultsRow = pdssastcresults.ttblsastcresults.NewttblsastcresultsRow();
         Sastcresults.UpdateRowFromSastcresults(ref ttblsastcresultsRow, AssasetupSASTCUpdateRequestAPI.sastcresults);
         pdssastcresults.ttblsastcresults.AddttblsastcresultsRow((pdssastcresultsDataSet.ttblsastcresultsRow)ttblsastcresultsRow);
          
         
         NLogLoggerP.Trace("SASTCUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTCUpdate(ref pdsContext,  pdssastcresults,  pdssastcnotes, out pdssastcupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTCUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastcresults); 
    
         if (pdssastcupdate.ttblsastcupdate.Count > 0) 
         { 
             result = Sastcupdate.BuildSastcupdateFromRow(pdssastcupdate.ttblsastcupdate[0]);
         } 
              
          
         return result;
          
      }

      public AssasetupSASTCHistoryGetListResponseAPI SASTCHistoryGetList(Sastchistorycriteria sastchistorycriteria)
      {   
         var result = new AssasetupSASTCHistoryGetListResponseAPI();
         
         var pdssastchistorycriteria = new pdssastchistorycriteriaDataSet();
            
         var pdssastchistoryresults = new pdssastchistoryresultsDataSet();
            
         DataRow ttblsastchistorycriteriaCriteria = pdssastchistorycriteria.ttblsastchistorycriteria.NewttblsastchistorycriteriaRow();
         Sastchistorycriteria.UpdateRowFromSastchistorycriteria(ref ttblsastchistorycriteriaCriteria, sastchistorycriteria);
         pdssastchistorycriteria.ttblsastchistorycriteria.AddttblsastchistorycriteriaRow((pdssastchistorycriteriaDataSet.ttblsastchistorycriteriaRow)ttblsastchistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("SASTCHistoryGetList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTCHistoryGetList(ref pdsContext,  pdssastchistorycriteria, out pdssastchistoryresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("SASTCHistoryGetList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastchistorycriteria); 
    
         foreach (DataRow row in pdssastchistoryresults.ttblsastchistoryresults)
         {
            result.sastchistoryresults.Add(Sastchistoryresults.BuildSastchistoryresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Sasgscopy SASGSCopy(Sasgscopy sasgscopy)
      {   
         var result = new Sasgscopy();
         
         var pdssasgscopy = new pdssasgscopyDataSet();
            
         DataRow ttblsasgscopyCriteria = pdssasgscopy.ttblsasgscopy.NewttblsasgscopyRow();
         Sasgscopy.UpdateRowFromSasgscopy(ref ttblsasgscopyCriteria, sasgscopy);
         pdssasgscopy.ttblsasgscopy.AddttblsasgscopyRow((pdssasgscopyDataSet.ttblsasgscopyRow)ttblsasgscopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGSCopy - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGSCopy(ref pdsContext, ref pdssasgscopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGSCopy - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgscopy); 
    
         if (pdssasgscopy.ttblsasgscopy.Count > 0) 
         { 
             result = Sasgscopy.BuildSasgscopyFromRow(pdssasgscopy.ttblsasgscopy[0]);
         } 
              
          
         return result;
          
      }

      public Sasgsdisplaytotals SASGSDisplayTotals(Sasgscriteria sasgscriteria)
      {   
         var result = new Sasgsdisplaytotals();
         
         var pdssasgscriteria = new pdssasgscriteriaDataSet();
            
         var pdssasgsdisplaytotals = new pdssasgsdisplaytotalsDataSet();
            
         DataRow ttblsasgscriteriaCriteria = pdssasgscriteria.ttblsasgscriteria.NewttblsasgscriteriaRow();
         Sasgscriteria.UpdateRowFromSasgscriteria(ref ttblsasgscriteriaCriteria, sasgscriteria);
         pdssasgscriteria.ttblsasgscriteria.AddttblsasgscriteriaRow((pdssasgscriteriaDataSet.ttblsasgscriteriaRow)ttblsasgscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGSDisplayTotals - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGSDisplayTotals(ref pdsContext,  pdssasgscriteria, out pdssasgsdisplaytotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGSDisplayTotals - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgscriteria); 
    
         if (pdssasgsdisplaytotals.ttblsasgsdisplaytotals.Count > 0) 
         { 
             result = Sasgsdisplaytotals.BuildSasgsdisplaytotalsFromRow(pdssasgsdisplaytotals.ttblsasgsdisplaytotals[0]);
         } 
              
          
         return result;
          
      }

      public Sasgsgldata SASGSGLLoad(Sasgscriteria sasgscriteria)
      {   
         var result = new Sasgsgldata();
         
         var pdssasgscriteria = new pdssasgscriteriaDataSet();
            
         var pdssasgsgldata = new pdssasgsgldataDataSet();
            
         DataRow ttblsasgscriteriaCriteria = pdssasgscriteria.ttblsasgscriteria.NewttblsasgscriteriaRow();
         Sasgscriteria.UpdateRowFromSasgscriteria(ref ttblsasgscriteriaCriteria, sasgscriteria);
         pdssasgscriteria.ttblsasgscriteria.AddttblsasgscriteriaRow((pdssasgscriteriaDataSet.ttblsasgscriteriaRow)ttblsasgscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGSGLLoad - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGSGLLoad(ref pdsContext,  pdssasgscriteria, out pdssasgsgldata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGSGLLoad - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgscriteria); 
    
         if (pdssasgsgldata.ttblsasgsgldata.Count > 0) 
         { 
             result = Sasgsgldata.BuildSasgsgldataFromRow(pdssasgsgldata.ttblsasgsgldata[0]);
         } 
              
          
         return result;
          
      }

      public void SASGSGLSave(Sasgsgldata sasgsgldata)
      {   
         
         var pdssasgsgldata = new pdssasgsgldataDataSet();
            
         DataRow ttblsasgsgldataCriteria = pdssasgsgldata.ttblsasgsgldata.NewttblsasgsgldataRow();
         Sasgsgldata.UpdateRowFromSasgsgldata(ref ttblsasgsgldataCriteria, sasgsgldata);
         pdssasgsgldata.ttblsasgsgldata.AddttblsasgsgldataRow((pdssasgsgldataDataSet.ttblsasgsgldataRow)ttblsasgsgldataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASGSGLSave - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASGSGLSave(ref pdsContext,  pdssasgsgldata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASGSGLSave - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasgsgldata);
      }

      public IEnumerable<Sasogetoperlistresults> SASOGetOperatorList(Sasogetoperlistcrit sasogetoperlistcrit)
      {   
         var results = new List<Sasogetoperlistresults>();
         
         var pdssasogetoperlistcrit = new pdssasogetoperlistcritDataSet();
            
         var pdssasogetoperlistresults = new pdssasogetoperlistresultsDataSet();
            
         DataRow ttblsasogetoperlistcritCriteria = pdssasogetoperlistcrit.ttblsasogetoperlistcrit.NewttblsasogetoperlistcritRow();
         Sasogetoperlistcrit.UpdateRowFromSasogetoperlistcrit(ref ttblsasogetoperlistcritCriteria, sasogetoperlistcrit);
         pdssasogetoperlistcrit.ttblsasogetoperlistcrit.AddttblsasogetoperlistcritRow((pdssasogetoperlistcritDataSet.ttblsasogetoperlistcritRow)ttblsasogetoperlistcritCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASOGetOperatorList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOGetOperatorList(ref pdsContext,  pdssasogetoperlistcrit, out pdssasogetoperlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOGetOperatorList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasogetoperlistcrit); 
    
            foreach (DataRow row in pdssasogetoperlistresults.ttblsasogetoperlistresults)
            {
                results.Add(Sasogetoperlistresults.BuildSasogetoperlistresultsFromRow(row));
            }
            return results;
        
      }

      public void SASODeleteOperator(Sasogetoperlistresults sasogetoperlistresults)
      {   
         
         var pdssasogetoperlistresults = new pdssasogetoperlistresultsDataSet();
            
         DataRow ttblsasogetoperlistresultsCriteria = pdssasogetoperlistresults.ttblsasogetoperlistresults.NewttblsasogetoperlistresultsRow();
         Sasogetoperlistresults.UpdateRowFromSasogetoperlistresults(ref ttblsasogetoperlistresultsCriteria, sasogetoperlistresults);
         pdssasogetoperlistresults.ttblsasogetoperlistresults.AddttblsasogetoperlistresultsRow((pdssasogetoperlistresultsDataSet.ttblsasogetoperlistresultsRow)ttblsasogetoperlistresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASODeleteOperator - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASODeleteOperator(ref pdsContext,  pdssasogetoperlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASODeleteOperator - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasogetoperlistresults);
      }

      public void SASOCreateOperator(Sasoopercreate sasoopercreate)
      {   
         
         var pdssasoopercreate = new pdssasoopercreateDataSet();
            
         DataRow ttblsasoopercreateCriteria = pdssasoopercreate.ttblsasoopercreate.NewttblsasoopercreateRow();
         Sasoopercreate.UpdateRowFromSasoopercreate(ref ttblsasoopercreateCriteria, sasoopercreate);
         pdssasoopercreate.ttblsasoopercreate.AddttblsasoopercreateRow((pdssasoopercreateDataSet.ttblsasoopercreateRow)ttblsasoopercreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASOCreateOperator - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOCreateOperator(ref pdsContext,  pdssasoopercreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOCreateOperator - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasoopercreate);
      }

      public AssasetupSASOSetupRetrieveResponseAPI SASOSetupRetrieve(AssasetupSASOSetupRetrieveRequestAPI AssasetupSASOSetupRetrieveRequestAPI)
      {   
         var result = new AssasetupSASOSetupRetrieveResponseAPI();
         
         var pdssasosetupoper = new pdssasosetupoperDataSet();
            
         var pdssasosetupuser = new pdssasosetupuserDataSet();
            
         var pdssasosetupgl = new pdssasosetupglDataSet();
            
         var pdssasosetupetcc = new pdssasosetupetccDataSet();
            
         var pdssasosetupaosecure = new pdssasosetupaosecureDataSet();
            
         var pdssasosetupdivnosec = new pdssasosetupdivnosecDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cOperList = AssasetupSASOSetupRetrieveRequestAPI.cOperList;
            
         
         NLogLoggerP.Trace("SASOSetupRetrieve - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupRetrieve(ref pdsContext,  cOperList, out pdssasosetupoper, out pdssasosetupuser, out pdssasosetupgl, out pdssasosetupetcc, out pdssasosetupaosecure, out pdssasosetupdivnosec, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupRetrieve - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupoper); 
    
         foreach (DataRow row in pdssasosetupaosecure.ttblsasosetupaosecure)
         {
            result.sasosetupaosecure.Add(Sasosetupaosecure.BuildSasosetupaosecureFromRow(row));
         }     
         foreach (DataRow row in pdssasosetupdivnosec.ttblsasosetupdivnosec)
         {
            result.sasosetupdivnosec.Add(Sasosetupdivnosec.BuildSasosetupdivnosecFromRow(row));
         }     
         foreach (DataRow row in pdssasosetupetcc.ttblsasosetupetcc)
         {
            result.sasosetupetcc.Add(Sasosetupetcc.BuildSasosetupetccFromRow(row));
         }     
         if (pdssasosetupgl.ttblsasosetupgl.Count > 0)
         {
            result.sasosetupgl = Sasosetupgl.BuildSasosetupglFromRow(pdssasosetupgl.ttblsasosetupgl[0]);
         }
                    
         if (pdssasosetupoper.ttblsasosetupoper.Count > 0)
         {
            result.sasosetupoper = Sasosetupoper.BuildSasosetupoperFromRow(pdssasosetupoper.ttblsasosetupoper[0]);
         }
                    
         if (pdssasosetupuser.ttblsasosetupuser.Count > 0)
         {
            result.sasosetupuser = Sasosetupuser.BuildSasosetupuserFromRow(pdssasosetupuser.ttblsasosetupuser[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> SASOSetupValidate(AssasetupSASOSetupValidateRequestAPI AssasetupSASOSetupValidateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssasosetupoper = new pdssasosetupoperDataSet();
            
         var pdssasosetupuser = new pdssasosetupuserDataSet();
            
         var pdssasosetupgl = new pdssasosetupglDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsasosetupglRow = pdssasosetupgl.ttblsasosetupgl.NewttblsasosetupglRow();
         Sasosetupgl.UpdateRowFromSasosetupgl(ref ttblsasosetupglRow, AssasetupSASOSetupValidateRequestAPI.sasosetupgl);
         pdssasosetupgl.ttblsasosetupgl.AddttblsasosetupglRow((pdssasosetupglDataSet.ttblsasosetupglRow)ttblsasosetupglRow);
          
         DataRow ttblsasosetupoperRow = pdssasosetupoper.ttblsasosetupoper.NewttblsasosetupoperRow();
         Sasosetupoper.UpdateRowFromSasosetupoper(ref ttblsasosetupoperRow, AssasetupSASOSetupValidateRequestAPI.sasosetupoper);
         pdssasosetupoper.ttblsasosetupoper.AddttblsasosetupoperRow((pdssasosetupoperDataSet.ttblsasosetupoperRow)ttblsasosetupoperRow);
          
         DataRow ttblsasosetupuserRow = pdssasosetupuser.ttblsasosetupuser.NewttblsasosetupuserRow();
         Sasosetupuser.UpdateRowFromSasosetupuser(ref ttblsasosetupuserRow, AssasetupSASOSetupValidateRequestAPI.sasosetupuser);
         pdssasosetupuser.ttblsasosetupuser.AddttblsasosetupuserRow((pdssasosetupuserDataSet.ttblsasosetupuserRow)ttblsasosetupuserRow);
          
         var  cOperList = AssasetupSASOSetupValidateRequestAPI.cOperList;
            
         var  cScreen = AssasetupSASOSetupValidateRequestAPI.cScreen;
            
         
         NLogLoggerP.Trace("SASOSetupValidate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupValidate(ref pdsContext,  cOperList,  cScreen,  pdssasosetupoper,  pdssasosetupuser,  pdssasosetupgl, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupValidate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupoper); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void SASOSetupFinalUpdate(AssasetupSASOSetupFinalUpdateRequestAPI AssasetupSASOSetupFinalUpdateRequestAPI)
      {   
         
         var pdssasosetupoper = new pdssasosetupoperDataSet();
            
         var pdssasosetupuser = new pdssasosetupuserDataSet();
            
         var pdssasosetupgl = new pdssasosetupglDataSet();
            
         var pdssasosetupetcc = new pdssasosetupetccDataSet();
            
         var pdssasosetupaosecure = new pdssasosetupaosecureDataSet();
            
         var pdssasosetupfuncsecset = new pdssasosetupfuncsecsetDataSet();
            
         var pdssasosetupdivnosec = new pdssasosetupdivnosecDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupaosecure)
         {
            DataRow ttblsasosetupaosecureRow = pdssasosetupaosecure.ttblsasosetupaosecure.NewttblsasosetupaosecureRow();
            Sasosetupaosecure.UpdateRowFromSasosetupaosecure(ref ttblsasosetupaosecureRow, obj);
            pdssasosetupaosecure.ttblsasosetupaosecure.AddttblsasosetupaosecureRow((pdssasosetupaosecureDataSet.ttblsasosetupaosecureRow)ttblsasosetupaosecureRow);
         }
          
         foreach (var obj in AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupdivnosec)
         {
            DataRow ttblsasosetupdivnosecRow = pdssasosetupdivnosec.ttblsasosetupdivnosec.NewttblsasosetupdivnosecRow();
            Sasosetupdivnosec.UpdateRowFromSasosetupdivnosec(ref ttblsasosetupdivnosecRow, obj);
            pdssasosetupdivnosec.ttblsasosetupdivnosec.AddttblsasosetupdivnosecRow((pdssasosetupdivnosecDataSet.ttblsasosetupdivnosecRow)ttblsasosetupdivnosecRow);
         }
          
         foreach (var obj in AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupetcc)
         {
            DataRow ttblsasosetupetccRow = pdssasosetupetcc.ttblsasosetupetcc.NewttblsasosetupetccRow();
            Sasosetupetcc.UpdateRowFromSasosetupetcc(ref ttblsasosetupetccRow, obj);
            pdssasosetupetcc.ttblsasosetupetcc.AddttblsasosetupetccRow((pdssasosetupetccDataSet.ttblsasosetupetccRow)ttblsasosetupetccRow);
         }
          
         foreach (var obj in AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupfuncsecset)
         {
            DataRow ttblsasosetupfuncsecsetRow = pdssasosetupfuncsecset.ttblsasosetupfuncsecset.NewttblsasosetupfuncsecsetRow();
            Sasosetupfuncsecset.UpdateRowFromSasosetupfuncsecset(ref ttblsasosetupfuncsecsetRow, obj);
            pdssasosetupfuncsecset.ttblsasosetupfuncsecset.AddttblsasosetupfuncsecsetRow((pdssasosetupfuncsecsetDataSet.ttblsasosetupfuncsecsetRow)ttblsasosetupfuncsecsetRow);
         }
          
         DataRow ttblsasosetupglRow = pdssasosetupgl.ttblsasosetupgl.NewttblsasosetupglRow();
         Sasosetupgl.UpdateRowFromSasosetupgl(ref ttblsasosetupglRow, AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupgl);
         pdssasosetupgl.ttblsasosetupgl.AddttblsasosetupglRow((pdssasosetupglDataSet.ttblsasosetupglRow)ttblsasosetupglRow);
          
         DataRow ttblsasosetupoperRow = pdssasosetupoper.ttblsasosetupoper.NewttblsasosetupoperRow();
         Sasosetupoper.UpdateRowFromSasosetupoper(ref ttblsasosetupoperRow, AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupoper);
         pdssasosetupoper.ttblsasosetupoper.AddttblsasosetupoperRow((pdssasosetupoperDataSet.ttblsasosetupoperRow)ttblsasosetupoperRow);
          
         DataRow ttblsasosetupuserRow = pdssasosetupuser.ttblsasosetupuser.NewttblsasosetupuserRow();
         Sasosetupuser.UpdateRowFromSasosetupuser(ref ttblsasosetupuserRow, AssasetupSASOSetupFinalUpdateRequestAPI.sasosetupuser);
         pdssasosetupuser.ttblsasosetupuser.AddttblsasosetupuserRow((pdssasosetupuserDataSet.ttblsasosetupuserRow)ttblsasosetupuserRow);
          
         var  cOperList = AssasetupSASOSetupFinalUpdateRequestAPI.cOperList;
            
         
         NLogLoggerP.Trace("SASOSetupFinalUpdate - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASOSetupFinalUpdate(ref pdsContext,  cOperList,  pdssasosetupoper,  pdssasosetupuser,  pdssasosetupgl,  pdssasosetupetcc,  pdssasosetupaosecure,  pdssasosetupfuncsecset,  pdssasosetupdivnosec, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASOSetupFinalUpdate - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasosetupoper);
      }

      public int SASSEGetNext(int ierrorno, string ctrmgrlang)
      {   
          
         int inexterrno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASSEGetNext - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASSEGetNext(ref pdsContext,  ierrorno,  ctrmgrlang, out inexterrno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASSEGetNext - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return inexterrno;
      
      }

      public IEnumerable<Sastcresults> SASTCFetch(Sastcdelete sastcdelete)
      {   
         var results = new List<Sastcresults>();
         
         var pdssastcdelete = new pdssastcdeleteDataSet();
            
         var pdssastcresults = new pdssastcresultsDataSet();
            
         DataRow ttblsastcdeleteCriteria = pdssastcdelete.ttblsastcdelete.NewttblsastcdeleteRow();
         Sastcdelete.UpdateRowFromSastcdelete(ref ttblsastcdeleteCriteria, sastcdelete);
         pdssastcdelete.ttblsastcdelete.AddttblsastcdeleteRow((pdssastcdeleteDataSet.ttblsastcdeleteRow)ttblsastcdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTCFetch - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTCFetch(ref pdsContext,  pdssastcdelete, out pdssastcresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTCFetch - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastcdelete); 
    
            foreach (DataRow row in pdssastcresults.ttblsastcresults)
            {
                results.Add(Sastcresults.BuildSastcresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sastztable> SASTZGetTableList()
      {   
         var results = new List<Sastztable>();
         
         var pdssastztable = new pdssastztableDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTZGetTableList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTZGetTableList(ref pdsContext, out pdssastztable, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTZGetTableList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastztable); 
    
            foreach (DataRow row in pdssastztable.ttblsastztable)
            {
                results.Add(Sastztable.BuildSastztableFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sastzdataresults> SASTZGetDataList(Sastzdatacriteria sastzdatacriteria)
      {   
         var results = new List<Sastzdataresults>();
         
         var pdssastzdata = new pdssastzdataDataSet();
            
         DataRow ttblsastzdatacriteriaCriteria = pdssastzdata.ttblsastzdatacriteria.NewttblsastzdatacriteriaRow();
         Sastzdatacriteria.UpdateRowFromSastzdatacriteria(ref ttblsastzdatacriteriaCriteria, sastzdatacriteria);
         pdssastzdata.ttblsastzdatacriteria.AddttblsastzdatacriteriaRow((pdssastzdataDataSet.ttblsastzdatacriteriaRow)ttblsastzdatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTZGetDataList - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTZGetDataList(ref pdsContext, ref pdssastzdata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTZGetDataList - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastzdata); 
    
            foreach (DataRow row in pdssastzdata.ttblsastzdataresults)
            {
                results.Add(Sastzdataresults.BuildSastzdataresultsFromRow(row));
            }
            return results;
        
      }

      public void SASTZAddData(Sastzadddata sastzadddata)
      {   
         
         var pdssastzadddata = new pdssastzadddataDataSet();
            
         DataRow ttblsastzadddataCriteria = pdssastzadddata.ttblsastzadddata.NewttblsastzadddataRow();
         Sastzadddata.UpdateRowFromSastzadddata(ref ttblsastzadddataCriteria, sastzadddata);
         pdssastzadddata.ttblsastzadddata.AddttblsastzadddataRow((pdssastzadddataDataSet.ttblsastzadddataRow)ttblsastzadddataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTZAddData - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTZAddData(ref pdsContext,  pdssastzadddata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTZAddData - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastzadddata);
      }

      public void SASTZSaveData(Sastzadddata sastzadddata)
      {   
         
         var pdssastzadddata = new pdssastzadddataDataSet();
            
         DataRow ttblsastzadddataCriteria = pdssastzadddata.ttblsastzadddata.NewttblsastzadddataRow();
         Sastzadddata.UpdateRowFromSastzadddata(ref ttblsastzadddataCriteria, sastzadddata);
         pdssastzadddata.ttblsastzadddata.AddttblsastzadddataRow((pdssastzadddataDataSet.ttblsastzadddataRow)ttblsastzadddataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTZSaveData - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTZSaveData(ref pdsContext,  pdssastzadddata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTZSaveData - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastzadddata);
      }

      public void SASTZDeleteData(Sastzdeletedata sastzdeletedata)
      {   
         
         var pdssastzdeletedata = new pdssastzdeletedataDataSet();
            
         DataRow ttblsastzdeletedataCriteria = pdssastzdeletedata.ttblsastzdeletedata.NewttblsastzdeletedataRow();
         Sastzdeletedata.UpdateRowFromSastzdeletedata(ref ttblsastzdeletedataCriteria, sastzdeletedata);
         pdssastzdeletedata.ttblsastzdeletedata.AddttblsastzdeletedataRow((pdssastzdeletedataDataSet.ttblsastzdeletedataRow)ttblsastzdeletedataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTZDeleteData - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTZDeleteData(ref pdsContext,  pdssastzdeletedata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTZDeleteData - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastzdeletedata);
      }

      public IEnumerable<Sasttorderoriginlkupresults> SASTTOrderOriginLookup(Sasttorderoriginlkupcriteria sasttorderoriginlkupcriteria)
      {   
         var results = new List<Sasttorderoriginlkupresults>();
         
         var pdssasttorderoriginlkup = new pdssasttorderoriginlkupDataSet();
            
         DataRow ttblsasttorderoriginlkupcriteriaCriteria = pdssasttorderoriginlkup.ttblsasttorderoriginlkupcriteria.NewttblsasttorderoriginlkupcriteriaRow();
         Sasttorderoriginlkupcriteria.UpdateRowFromSasttorderoriginlkupcriteria(ref ttblsasttorderoriginlkupcriteriaCriteria, sasttorderoriginlkupcriteria);
         pdssasttorderoriginlkup.ttblsasttorderoriginlkupcriteria.AddttblsasttorderoriginlkupcriteriaRow((pdssasttorderoriginlkupDataSet.ttblsasttorderoriginlkupcriteriaRow)ttblsasttorderoriginlkupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTTOrderOriginLookup - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SASTTOrderOriginLookup(ref pdsContext, ref pdssasttorderoriginlkup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTTOrderOriginLookup - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasttorderoriginlkup); 
    
            foreach (DataRow row in pdssasttorderoriginlkup.ttblsasttorderoriginlkupresults)
            {
                results.Add(Sasttorderoriginlkupresults.BuildSasttorderoriginlkupresultsFromRow(row));
            }
            return results;
        
      }

      public Saeventcopy SAEECopyEvent(Saeventcopy saeventcopy)
      {   
         var result = new Saeventcopy();
         
         var pdssaeventcopy = new pdssaeventcopyDataSet();
            
         DataRow ttblsaeventcopyCriteria = pdssaeventcopy.ttblsaeventcopy.NewttblsaeventcopyRow();
         Saeventcopy.UpdateRowFromSaeventcopy(ref ttblsaeventcopyCriteria, saeventcopy);
         pdssaeventcopy.ttblsaeventcopy.AddttblsaeventcopyRow((pdssaeventcopyDataSet.ttblsaeventcopyRow)ttblsaeventcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEECopyEvent - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEECopyEvent(ref pdsContext, ref pdssaeventcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEECopyEvent - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeventcopy); 
    
         if (pdssaeventcopy.ttblsaeventcopy.Count > 0) 
         { 
             result = Saeventcopy.BuildSaeventcopyFromRow(pdssaeventcopy.ttblsaeventcopy[0]);
         } 
              
          
         return result;
          
      }

      public string SAEEDeleteEvent(string cEventName)
      {   
          
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEDeleteEvent - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEDeleteEvent(ref pdsContext,  cEventName, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("SAEEDeleteEvent - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cWarningMessage;
      
      }

      public AssasetupSAEEFLoadEventFldsResponseAPI SAEEFLoadEventFlds(string cEventName)
      {   
         var result = new AssasetupSAEEFLoadEventFldsResponseAPI();
         
         var pdssaeefldsamt = new pdssaeefldsamtDataSet();
            
         var pdssaeefldschar = new pdssaeefldscharDataSet();
            
         var pdssaeefldsprc = new pdssaeefldsprcDataSet();
            
         var pdssaeefldsdate = new pdssaeefldsdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEFLoadEventFlds - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFLoadEventFlds(ref pdsContext,  cEventName, out pdssaeefldsamt, out pdssaeefldschar, out pdssaeefldsprc, out pdssaeefldsdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFLoadEventFlds - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldsamt); 
    
         foreach (DataRow row in pdssaeefldsamt.ttblsaeefldsamt)
         {
            result.saeefldsamt.Add(Saeefldsamt.BuildSaeefldsamtFromRow(row));
         }     
         foreach (DataRow row in pdssaeefldschar.ttblsaeefldschar)
         {
            result.saeefldschar.Add(Saeefldschar.BuildSaeefldscharFromRow(row));
         }     
         foreach (DataRow row in pdssaeefldsdate.ttblsaeefldsdate)
         {
            result.saeefldsdate.Add(Saeefldsdate.BuildSaeefldsdateFromRow(row));
         }     
         foreach (DataRow row in pdssaeefldsprc.ttblsaeefldsprc)
         {
            result.saeefldsprc.Add(Saeefldsprc.BuildSaeefldsprcFromRow(row));
         }     
          
         return result;
          
      }

      public void SAEEFSaveEventFlds(AssasetupSAEEFSaveEventFldsRequestAPI AssasetupSAEEFSaveEventFldsRequestAPI)
      {   
         
         var pdssaeefldsamt = new pdssaeefldsamtDataSet();
            
         var pdssaeefldschar = new pdssaeefldscharDataSet();
            
         var pdssaeefldsprc = new pdssaeefldsprcDataSet();
            
         var pdssaeefldsdate = new pdssaeefldsdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssasetupSAEEFSaveEventFldsRequestAPI.saeefldsamt)
         {
            DataRow ttblsaeefldsamtRow = pdssaeefldsamt.ttblsaeefldsamt.NewttblsaeefldsamtRow();
            Saeefldsamt.UpdateRowFromSaeefldsamt(ref ttblsaeefldsamtRow, obj);
            pdssaeefldsamt.ttblsaeefldsamt.AddttblsaeefldsamtRow((pdssaeefldsamtDataSet.ttblsaeefldsamtRow)ttblsaeefldsamtRow);
         }
          
         foreach (var obj in AssasetupSAEEFSaveEventFldsRequestAPI.saeefldschar)
         {
            DataRow ttblsaeefldscharRow = pdssaeefldschar.ttblsaeefldschar.NewttblsaeefldscharRow();
            Saeefldschar.UpdateRowFromSaeefldschar(ref ttblsaeefldscharRow, obj);
            pdssaeefldschar.ttblsaeefldschar.AddttblsaeefldscharRow((pdssaeefldscharDataSet.ttblsaeefldscharRow)ttblsaeefldscharRow);
         }
          
         foreach (var obj in AssasetupSAEEFSaveEventFldsRequestAPI.saeefldsdate)
         {
            DataRow ttblsaeefldsdateRow = pdssaeefldsdate.ttblsaeefldsdate.NewttblsaeefldsdateRow();
            Saeefldsdate.UpdateRowFromSaeefldsdate(ref ttblsaeefldsdateRow, obj);
            pdssaeefldsdate.ttblsaeefldsdate.AddttblsaeefldsdateRow((pdssaeefldsdateDataSet.ttblsaeefldsdateRow)ttblsaeefldsdateRow);
         }
          
         foreach (var obj in AssasetupSAEEFSaveEventFldsRequestAPI.saeefldsprc)
         {
            DataRow ttblsaeefldsprcRow = pdssaeefldsprc.ttblsaeefldsprc.NewttblsaeefldsprcRow();
            Saeefldsprc.UpdateRowFromSaeefldsprc(ref ttblsaeefldsprcRow, obj);
            pdssaeefldsprc.ttblsaeefldsprc.AddttblsaeefldsprcRow((pdssaeefldsprcDataSet.ttblsaeefldsprcRow)ttblsaeefldsprcRow);
         }
          
         var  cEventName = AssasetupSAEEFSaveEventFldsRequestAPI.cEventName;
            
         
         NLogLoggerP.Trace("SAEEFSaveEventFlds - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFSaveEventFlds(ref pdsContext,  cEventName,  pdssaeefldsamt,  pdssaeefldschar,  pdssaeefldsprc,  pdssaeefldsdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFSaveEventFlds - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldsamt);
      }

      public void SAEEFValidateFldsAmt(Saeefldsamt saeefldsamt)
      {   
         
         var pdssaeefldsamt = new pdssaeefldsamtDataSet();
            
         DataRow ttblsaeefldsamtCriteria = pdssaeefldsamt.ttblsaeefldsamt.NewttblsaeefldsamtRow();
         Saeefldsamt.UpdateRowFromSaeefldsamt(ref ttblsaeefldsamtCriteria, saeefldsamt);
         pdssaeefldsamt.ttblsaeefldsamt.AddttblsaeefldsamtRow((pdssaeefldsamtDataSet.ttblsaeefldsamtRow)ttblsaeefldsamtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEFValidateFldsAmt - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFValidateFldsAmt(ref pdsContext,  pdssaeefldsamt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFValidateFldsAmt - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldsamt);
      }

      public void SAEEFValidateFldsChar(Saeefldschar saeefldschar)
      {   
         
         var pdssaeefldschar = new pdssaeefldscharDataSet();
            
         DataRow ttblsaeefldscharCriteria = pdssaeefldschar.ttblsaeefldschar.NewttblsaeefldscharRow();
         Saeefldschar.UpdateRowFromSaeefldschar(ref ttblsaeefldscharCriteria, saeefldschar);
         pdssaeefldschar.ttblsaeefldschar.AddttblsaeefldscharRow((pdssaeefldscharDataSet.ttblsaeefldscharRow)ttblsaeefldscharCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEEFValidateFldsChar - Assasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssasetupproxy = this.proxyAppObject.CreatePO_assasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssasetupproxy.SAEEFValidateFldsChar(ref pdsContext,  pdssaeefldschar, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEEFValidateFldsChar - Assasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeefldschar);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  