//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.SA.Data.Adapters
{
   using com.infor.sxproxy.saproxy;
   using com.infor.sxproxy.saproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdssaegoper;
   using Models.Pdssaeggroup;
   using Models.Pdssaeaevents;
   using Models.Pdssaeaactionsummary;
   using Models.Pdssaeaaction;
   using Models.Pdssaeaflds;
   using Models.Pdssaealistcust;
   using Models.Pdssaealistreg;
   using Models.Pdssaealistprod;
   using Models.Pdssaealistpcat;
   using Models.Pdssaealistvend;
   using Models.Pdssaealistwhse;
   using Models.Pdssaeawho;
   using Models.Pdsmessaging;
   using Models.Complex;

   public partial class AssaentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SAProxyAppObject proxyAppObject;
      
      public AssaentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssaentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Saegoperresults> SAEGOperatorList(Saegopercriteria saegopercriteria)
      {   
         var results = new List<Saegoperresults>();
         
         var pdssaegoper = new pdssaegoperDataSet();
            
         DataRow ttblsaegopercriteriaCriteria = pdssaegoper.ttblsaegopercriteria.NewttblsaegopercriteriaRow();
         Saegopercriteria.UpdateRowFromSaegopercriteria(ref ttblsaegopercriteriaCriteria, saegopercriteria);
         pdssaegoper.ttblsaegopercriteria.AddttblsaegopercriteriaRow((pdssaegoperDataSet.ttblsaegopercriteriaRow)ttblsaegopercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEGOperatorList - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEGOperatorList(ref pdsContext, ref pdssaegoper, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEGOperatorList - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaegoper); 
    
            foreach (DataRow row in pdssaegoper.ttblsaegoperresults)
            {
                results.Add(Saegoperresults.BuildSaegoperresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saeggroups> SAEGOperatorGroups(string cOperator)
      {   
         var results = new List<Saeggroups>();
         
         var pdssaeggroup = new pdssaeggroupDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEGOperatorGroups - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEGOperatorGroups(ref pdsContext,  cOperator, out pdssaeggroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEGOperatorGroups - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeggroup); 
    
            foreach (DataRow row in pdssaeggroup.ttblsaeggroups)
            {
                results.Add(Saeggroups.BuildSaeggroupsFromRow(row));
            }
            return results;
        
      }

      public void SAEGAddGroupOper(string cOperList, string cGroupNm, string cDescrip)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEGAddGroupOper - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEGAddGroupOper(ref pdsContext,  cOperList,  cGroupNm,  cDescrip, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEGAddGroupOper - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void SAEGDeleteGroup(string cGroupNm)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEGDeleteGroup - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEGDeleteGroup(ref pdsContext,  cGroupNm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEGDeleteGroup - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void SAEGDeleteGroupOper(string cGroupNm, string cOper)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEGDeleteGroupOper - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEGDeleteGroupOper(ref pdsContext,  cGroupNm,  cOper, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEGDeleteGroupOper - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Saeaevents> SAEAEventsLoad(AssaentrySAEAEventsLoadRequestAPI AssaentrySAEAEventsLoadRequestAPI)
      {   
         var results = new List<Saeaevents>();
         
         var pdssaeaevents = new pdssaeaeventsDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cEventName = AssaentrySAEAEventsLoadRequestAPI.cEventName;
            
         var  cTriggerName = AssaentrySAEAEventsLoadRequestAPI.cTriggerName;
            
         var  lActiveOnly = AssaentrySAEAEventsLoadRequestAPI.lActiveOnly;
            
         
         NLogLoggerP.Trace("SAEAEventsLoad - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAEventsLoad(ref pdsContext,  cEventName,  cTriggerName,  lActiveOnly, out pdssaeaevents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAEventsLoad - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaevents); 
    
            foreach (DataRow row in pdssaeaevents.ttblsaeaevents)
            {
                results.Add(Saeaevents.BuildSaeaeventsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saeaevents> SAEAEventsUpdate(AssaentrySAEAEventsUpdateRequestAPI AssaentrySAEAEventsUpdateRequestAPI)
      {   
         var results = new List<Saeaevents>();
         
         var pdssaeaevents = new pdssaeaeventsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssaentrySAEAEventsUpdateRequestAPI.saeaevents)
         {
            DataRow ttblsaeaeventsRow = pdssaeaevents.ttblsaeaevents.NewttblsaeaeventsRow();
            Saeaevents.UpdateRowFromSaeaevents(ref ttblsaeaeventsRow, obj);
            pdssaeaevents.ttblsaeaevents.AddttblsaeaeventsRow((pdssaeaeventsDataSet.ttblsaeaeventsRow)ttblsaeaeventsRow);
         }
          
         var  cActivateFl = AssaentrySAEAEventsUpdateRequestAPI.cActivateFl;
            
         
         NLogLoggerP.Trace("SAEAEventsUpdate - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAEventsUpdate(ref pdsContext,  cActivateFl, ref pdssaeaevents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAEventsUpdate - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaevents); 
    
            foreach (DataRow row in pdssaeaevents.ttblsaeaevents)
            {
                results.Add(Saeaevents.BuildSaeaeventsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saeaactionsummary> SAEAActionSummaryLoad(string cEventName)
      {   
         var results = new List<Saeaactionsummary>();
         
         var pdssaeaactionsummary = new pdssaeaactionsummaryDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEAActionSummaryLoad - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAActionSummaryLoad(ref pdsContext,  cEventName, out pdssaeaactionsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAActionSummaryLoad - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaactionsummary); 
    
            foreach (DataRow row in pdssaeaactionsummary.ttblsaeaactionsummary)
            {
                results.Add(Saeaactionsummary.BuildSaeaactionsummaryFromRow(row));
            }
            return results;
        
      }

      public void SAEAActionDelete(IEnumerable<Saeaactionsummary> saeaactionsummary)
      {   
         
         var pdssaeaactionsummary = new pdssaeaactionsummaryDataSet();
            
         foreach (var obj in saeaactionsummary)
         {
             DataRow row = pdssaeaactionsummary.ttblsaeaactionsummary.NewttblsaeaactionsummaryRow();
             Saeaactionsummary.UpdateRowFromSaeaactionsummary(ref row, obj);
             pdssaeaactionsummary.ttblsaeaactionsummary.AddttblsaeaactionsummaryRow((pdssaeaactionsummaryDataSet.ttblsaeaactionsummaryRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEAActionDelete - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAActionDelete(ref pdsContext,  pdssaeaactionsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAActionDelete - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaactionsummary);
      }

      public AssaentrySAEAActionSetupResponseAPI SAEAActionSetup(Saeaaction saeaaction)
      {   
         var result = new AssaentrySAEAActionSetupResponseAPI();
         
         var pdssaeaaction = new pdssaeaactionDataSet();
            
         var pdssaeaflds = new pdssaeafldsDataSet();
            
         var pdssaealistcust = new pdssaealistcustDataSet();
            
         var pdssaealistreg = new pdssaealistregDataSet();
            
         var pdssaealistprod = new pdssaealistprodDataSet();
            
         var pdssaealistpcat = new pdssaealistpcatDataSet();
            
         var pdssaealistvend = new pdssaealistvendDataSet();
            
         var pdssaealistwhse = new pdssaealistwhseDataSet();
            
         var pdssaeawho = new pdssaeawhoDataSet();
            
         DataRow ttblsaeaactionCriteria = pdssaeaaction.ttblsaeaaction.NewttblsaeaactionRow();
         Saeaaction.UpdateRowFromSaeaaction(ref ttblsaeaactionCriteria, saeaaction);
         pdssaeaaction.ttblsaeaaction.AddttblsaeaactionRow((pdssaeaactionDataSet.ttblsaeaactionRow)ttblsaeaactionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEAActionSetup - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAActionSetup(ref pdsContext, ref pdssaeaaction, out pdssaeaflds, out pdssaealistcust, out pdssaealistreg, out pdssaealistprod, out pdssaealistpcat, out pdssaealistvend, out pdssaealistwhse, out pdssaeawho, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAActionSetup - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaaction); 
    
         if (pdssaeaaction.ttblsaeaaction.Count > 0)
         {
            result.saeaaction = Saeaaction.BuildSaeaactionFromRow(pdssaeaaction.ttblsaeaaction[0]);
         }
                    
         foreach (DataRow row in pdssaeaflds.ttblsaeafldsamt)
         {
            result.saeafldsamt.Add(Saeafldsamt.BuildSaeafldsamtFromRow(row));
         }     
         foreach (DataRow row in pdssaeaflds.ttblsaeafldschar)
         {
            result.saeafldschar.Add(Saeafldschar.BuildSaeafldscharFromRow(row));
         }     
         foreach (DataRow row in pdssaeaflds.ttblsaeafldsdate)
         {
            result.saeafldsdate.Add(Saeafldsdate.BuildSaeafldsdateFromRow(row));
         }     
         foreach (DataRow row in pdssaeaflds.ttblsaeafldsprc)
         {
            result.saeafldsprc.Add(Saeafldsprc.BuildSaeafldsprcFromRow(row));
         }     
         foreach (DataRow row in pdssaealistcust.ttblsaealistcust)
         {
            result.saealistcust.Add(Saealistcust.BuildSaealistcustFromRow(row));
         }     
         foreach (DataRow row in pdssaealistpcat.ttblsaealistpcat)
         {
            result.saealistpcat.Add(Saealistpcat.BuildSaealistpcatFromRow(row));
         }     
         foreach (DataRow row in pdssaealistprod.ttblsaealistprod)
         {
            result.saealistprod.Add(Saealistprod.BuildSaealistprodFromRow(row));
         }     
         foreach (DataRow row in pdssaealistreg.ttblsaealistreg)
         {
            result.saealistreg.Add(Saealistreg.BuildSaealistregFromRow(row));
         }     
         foreach (DataRow row in pdssaealistvend.ttblsaealistvend)
         {
            result.saealistvend.Add(Saealistvend.BuildSaealistvendFromRow(row));
         }     
         foreach (DataRow row in pdssaealistwhse.ttblsaealistwhse)
         {
            result.saealistwhse.Add(Saealistwhse.BuildSaealistwhseFromRow(row));
         }     
         foreach (DataRow row in pdssaeawho.ttblsaeawho)
         {
            result.saeawho.Add(Saeawho.BuildSaeawhoFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> SAEAActionUpdate(AssaentrySAEAActionUpdateRequestAPI AssaentrySAEAActionUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdssaeaaction = new pdssaeaactionDataSet();
            
         var pdssaealistcust = new pdssaealistcustDataSet();
            
         var pdssaealistreg = new pdssaealistregDataSet();
            
         var pdssaealistprod = new pdssaealistprodDataSet();
            
         var pdssaealistpcat = new pdssaealistpcatDataSet();
            
         var pdssaealistvend = new pdssaealistvendDataSet();
            
         var pdssaealistwhse = new pdssaealistwhseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsaeaactionRow = pdssaeaaction.ttblsaeaaction.NewttblsaeaactionRow();
         Saeaaction.UpdateRowFromSaeaaction(ref ttblsaeaactionRow, AssaentrySAEAActionUpdateRequestAPI.saeaaction);
         pdssaeaaction.ttblsaeaaction.AddttblsaeaactionRow((pdssaeaactionDataSet.ttblsaeaactionRow)ttblsaeaactionRow);
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistcust)
         {
            DataRow ttblsaealistcustRow = pdssaealistcust.ttblsaealistcust.NewttblsaealistcustRow();
            Saealistcust.UpdateRowFromSaealistcust(ref ttblsaealistcustRow, obj);
            pdssaealistcust.ttblsaealistcust.AddttblsaealistcustRow((pdssaealistcustDataSet.ttblsaealistcustRow)ttblsaealistcustRow);
         }
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistpcat)
         {
            DataRow ttblsaealistpcatRow = pdssaealistpcat.ttblsaealistpcat.NewttblsaealistpcatRow();
            Saealistpcat.UpdateRowFromSaealistpcat(ref ttblsaealistpcatRow, obj);
            pdssaealistpcat.ttblsaealistpcat.AddttblsaealistpcatRow((pdssaealistpcatDataSet.ttblsaealistpcatRow)ttblsaealistpcatRow);
         }
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistprod)
         {
            DataRow ttblsaealistprodRow = pdssaealistprod.ttblsaealistprod.NewttblsaealistprodRow();
            Saealistprod.UpdateRowFromSaealistprod(ref ttblsaealistprodRow, obj);
            pdssaealistprod.ttblsaealistprod.AddttblsaealistprodRow((pdssaealistprodDataSet.ttblsaealistprodRow)ttblsaealistprodRow);
         }
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistreg)
         {
            DataRow ttblsaealistregRow = pdssaealistreg.ttblsaealistreg.NewttblsaealistregRow();
            Saealistreg.UpdateRowFromSaealistreg(ref ttblsaealistregRow, obj);
            pdssaealistreg.ttblsaealistreg.AddttblsaealistregRow((pdssaealistregDataSet.ttblsaealistregRow)ttblsaealistregRow);
         }
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistvend)
         {
            DataRow ttblsaealistvendRow = pdssaealistvend.ttblsaealistvend.NewttblsaealistvendRow();
            Saealistvend.UpdateRowFromSaealistvend(ref ttblsaealistvendRow, obj);
            pdssaealistvend.ttblsaealistvend.AddttblsaealistvendRow((pdssaealistvendDataSet.ttblsaealistvendRow)ttblsaealistvendRow);
         }
          
         foreach (var obj in AssaentrySAEAActionUpdateRequestAPI.saealistwhse)
         {
            DataRow ttblsaealistwhseRow = pdssaealistwhse.ttblsaealistwhse.NewttblsaealistwhseRow();
            Saealistwhse.UpdateRowFromSaealistwhse(ref ttblsaealistwhseRow, obj);
            pdssaealistwhse.ttblsaealistwhse.AddttblsaealistwhseRow((pdssaealistwhseDataSet.ttblsaealistwhseRow)ttblsaealistwhseRow);
         }
          
         
         NLogLoggerP.Trace("SAEAActionUpdate - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAActionUpdate(ref pdsContext,  pdssaeaaction,  pdssaealistcust,  pdssaealistreg,  pdssaealistprod,  pdssaealistpcat,  pdssaealistvend,  pdssaealistwhse, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAActionUpdate - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaaction); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Saeaactionsummary> SAEAActionSummaryUpdate(AssaentrySAEAActionSummaryUpdateRequestAPI AssaentrySAEAActionSummaryUpdateRequestAPI)
      {   
         var results = new List<Saeaactionsummary>();
         
         var pdssaeaactionsummary = new pdssaeaactionsummaryDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssaentrySAEAActionSummaryUpdateRequestAPI.saeaactionsummary)
         {
            DataRow ttblsaeaactionsummaryRow = pdssaeaactionsummary.ttblsaeaactionsummary.NewttblsaeaactionsummaryRow();
            Saeaactionsummary.UpdateRowFromSaeaactionsummary(ref ttblsaeaactionsummaryRow, obj);
            pdssaeaactionsummary.ttblsaeaactionsummary.AddttblsaeaactionsummaryRow((pdssaeaactionsummaryDataSet.ttblsaeaactionsummaryRow)ttblsaeaactionsummaryRow);
         }
          
         var  cActivateFl = AssaentrySAEAActionSummaryUpdateRequestAPI.cActivateFl;
            
         
         NLogLoggerP.Trace("SAEAActionSummaryUpdate - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAActionSummaryUpdate(ref pdsContext,  cActivateFl, ref pdssaeaactionsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAActionSummaryUpdate - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeaactionsummary); 
    
            foreach (DataRow row in pdssaeaactionsummary.ttblsaeaactionsummary)
            {
                results.Add(Saeaactionsummary.BuildSaeaactionsummaryFromRow(row));
            }
            return results;
        
      }

      public string SAEAGetListNameDesc(string cListType, string cListValue, string cListValue2)
      {   
          
         string cNameDesc = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEAGetListNameDesc - Assaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssaentryproxy = this.proxyAppObject.CreatePO_assaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssaentryproxy.SAEAGetListNameDesc(ref pdsContext,  cListType,  cListValue,  cListValue2, out cNameDesc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEAGetListNameDesc - Assaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cNameDesc;
      
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  