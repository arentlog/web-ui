//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.SA.Data.Adapters
{
   using com.infor.sxproxy.saproxy;
   using com.infor.sxproxy.saproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdssastplookup;
   using Models.Pdssamultilanguages;
   using Models.Pdssaiolist;
   using Models.Pdssaeievent;
   using Models.Pdssaeiextend;
   using Models.Pdssasulookup;
   using Models.Pdssasselookup;
   using Models.Pdssaicdisconnect;
   using Models.Pdssaiclist;
   using Models.Pdssaicsummary;
   using Models.Pdssausergrplookup;
   using Models.Pdssastaauthinfo;
   using Models.Pdsauditinqtablelist;
   using Models.Pdsauditinqprimarykey;
   using Models.Pdsauditinqauditcriteria;
   using Models.Pdsauditinqauditresults;
   using Models.Pdsmessaging;
   using Models.Pdssapjcriteria;
   using Models.Pdssapjjobresults;
   using Models.Pdssapjrptmgrs;
   using Models.Pdsprintersettings;
   using Models.Pdssapjmgrdetail;
   using Models.Pdsioniobox;
   using Models.Pdsionioboxxml;
   using Models.Complex;

   public partial class AssainquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private SAProxyAppObject proxyAppObject;
      
      public AssainquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AssainquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Sastplookupresults SASTPlookup(Sastplookupcriteria sastplookupcriteria)
      {   
         var result = new Sastplookupresults();
         
         var pdssastplookup = new pdssastplookupDataSet();
            
         DataRow ttblsastplookupcriteriaCriteria = pdssastplookup.ttblsastplookupcriteria.NewttblsastplookupcriteriaRow();
         Sastplookupcriteria.UpdateRowFromSastplookupcriteria(ref ttblsastplookupcriteriaCriteria, sastplookupcriteria);
         pdssastplookup.ttblsastplookupcriteria.AddttblsastplookupcriteriaRow((pdssastplookupDataSet.ttblsastplookupcriteriaRow)ttblsastplookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTPlookup - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SASTPlookup(ref pdsContext, ref pdssastplookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTPlookup - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastplookup); 
    
         if (pdssastplookup.ttblsastplookupresults.Count > 0) 
         { 
             result = Sastplookupresults.BuildSastplookupresultsFromRow(pdssastplookup.ttblsastplookupresults[0]);
         } 
              
          
         return result;
          
      }

      public AssainquirySAMultiLanguagesBuildResponseAPI SAMultiLanguagesBuild(bool lLookupFl, string cDefaultLangCd)
      {   
         var result = new AssainquirySAMultiLanguagesBuildResponseAPI();
         
         var pdssamultilanguages = new pdssamultilanguagesDataSet();
            
         bool lLangCdHidden = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAMultiLanguagesBuild - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAMultiLanguagesBuild(ref pdsContext,  lLookupFl,  cDefaultLangCd, out pdssamultilanguages, out lLangCdHidden, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAMultiLanguagesBuild - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssamultilanguages); 
    
         foreach (DataRow row in pdssamultilanguages.ttblsamultilanguages)
         {
            result.samultilanguages.Add(Samultilanguages.BuildSamultilanguagesFromRow(row));
         }     
         result.lLangCdHidden = lLangCdHidden;
          
         return result;
          
      }

      public string SAGetCurrentLanguage()
      {   
          
         string cTrMgrLang = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAGetCurrentLanguage - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAGetCurrentLanguage(ref pdsContext, out cTrMgrLang, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAGetCurrentLanguage - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cTrMgrLang;
      
      }

      public IEnumerable<Saiolistresults> SAIOGetOperatorList(Saiolistcriteria saiolistcriteria)
      {   
         var results = new List<Saiolistresults>();
         
         var pdssaiolist = new pdssaiolistDataSet();
            
         DataRow ttblsaiolistcriteriaCriteria = pdssaiolist.ttblsaiolistcriteria.NewttblsaiolistcriteriaRow();
         Saiolistcriteria.UpdateRowFromSaiolistcriteria(ref ttblsaiolistcriteriaCriteria, saiolistcriteria);
         pdssaiolist.ttblsaiolistcriteria.AddttblsaiolistcriteriaRow((pdssaiolistDataSet.ttblsaiolistcriteriaRow)ttblsaiolistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAIOGetOperatorList - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAIOGetOperatorList(ref pdsContext, ref pdssaiolist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAIOGetOperatorList - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaiolist); 
    
            foreach (DataRow row in pdssaiolist.ttblsaiolistresults)
            {
                results.Add(Saiolistresults.BuildSaiolistresultsFromRow(row));
            }
            return results;
        
      }

      public AssainquirySAEILoadEventTransResponseAPI SAEILoadEventTrans(Saeieventcriteria saeieventcriteria)
      {   
         var result = new AssainquirySAEILoadEventTransResponseAPI();
         
         var pdssaeievent = new pdssaeieventDataSet();
            
         DataRow ttblsaeieventcriteriaCriteria = pdssaeievent.ttblsaeieventcriteria.NewttblsaeieventcriteriaRow();
         Saeieventcriteria.UpdateRowFromSaeieventcriteria(ref ttblsaeieventcriteriaCriteria, saeieventcriteria);
         pdssaeievent.ttblsaeieventcriteria.AddttblsaeieventcriteriaRow((pdssaeieventDataSet.ttblsaeieventcriteriaRow)ttblsaeieventcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("SAEILoadEventTrans - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAEILoadEventTrans(ref pdsContext, ref pdssaeievent, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("SAEILoadEventTrans - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeievent); 
    
         foreach (DataRow row in pdssaeievent.ttblsaeieventresults)
         {
            result.saeieventresults.Add(Saeieventresults.BuildSaeieventresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AssainquirySAEILoadEventExtendResponseAPI SAEILoadEventExtend(Saeiextend saeiextend)
      {   
         var result = new AssainquirySAEILoadEventExtendResponseAPI();
         
         var pdssaeiextend = new pdssaeiextendDataSet();
            
         DataRow ttblsaeiextendCriteria = pdssaeiextend.ttblsaeiextend.NewttblsaeiextendRow();
         Saeiextend.UpdateRowFromSaeiextend(ref ttblsaeiextendCriteria, saeiextend);
         pdssaeiextend.ttblsaeiextend.AddttblsaeiextendRow((pdssaeiextendDataSet.ttblsaeiextendRow)ttblsaeiextendCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAEILoadEventExtend - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAEILoadEventExtend(ref pdsContext, ref pdssaeiextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAEILoadEventExtend - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaeiextend); 
    
         if (pdssaeiextend.ttblsaeiextend.Count > 0)
         {
            result.saeiextend = Saeiextend.BuildSaeiextendFromRow(pdssaeiextend.ttblsaeiextend[0]);
         }
                    
         foreach (DataRow row in pdssaeiextend.ttblsaeiextendaction)
         {
            result.saeiextendaction.Add(Saeiextendaction.BuildSaeiextendactionFromRow(row));
         }     
         foreach (DataRow row in pdssaeiextend.ttblsaeiextendfields)
         {
            result.saeiextendfields.Add(Saeiextendfields.BuildSaeiextendfieldsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Sasulookup> SASULookup(Sasulookupcriteria sasulookupcriteria)
      {   
         var results = new List<Sasulookup>();
         
         var pdssasulookup = new pdssasulookupDataSet();
            
         DataRow ttblsasulookupcriteriaCriteria = pdssasulookup.ttblsasulookupcriteria.NewttblsasulookupcriteriaRow();
         Sasulookupcriteria.UpdateRowFromSasulookupcriteria(ref ttblsasulookupcriteriaCriteria, sasulookupcriteria);
         pdssasulookup.ttblsasulookupcriteria.AddttblsasulookupcriteriaRow((pdssasulookupDataSet.ttblsasulookupcriteriaRow)ttblsasulookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASULookup - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SASULookup(ref pdsContext, ref pdssasulookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASULookup - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasulookup); 
    
            foreach (DataRow row in pdssasulookup.ttblsasulookup)
            {
                results.Add(Sasulookup.BuildSasulookupFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sasselookupresults> SASSElookup(Sasselookupcriteria sasselookupcriteria)
      {   
         var results = new List<Sasselookupresults>();
         
         var pdssasselookup = new pdssasselookupDataSet();
            
         DataRow ttblsasselookupcriteriaCriteria = pdssasselookup.ttblsasselookupcriteria.NewttblsasselookupcriteriaRow();
         Sasselookupcriteria.UpdateRowFromSasselookupcriteria(ref ttblsasselookupcriteriaCriteria, sasselookupcriteria);
         pdssasselookup.ttblsasselookupcriteria.AddttblsasselookupcriteriaRow((pdssasselookupDataSet.ttblsasselookupcriteriaRow)ttblsasselookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASSElookup - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SASSElookup(ref pdsContext, ref pdssasselookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASSElookup - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssasselookup); 
    
            foreach (DataRow row in pdssasselookup.ttblsasselookupresults)
            {
                results.Add(Sasselookupresults.BuildSasselookupresultsFromRow(row));
            }
            return results;
        
      }

      public void SAICDisconnect(Saicdisconnect saicdisconnect)
      {   
         
         var pdssaicdisconnect = new pdssaicdisconnectDataSet();
            
         DataRow ttblsaicdisconnectCriteria = pdssaicdisconnect.ttblsaicdisconnect.NewttblsaicdisconnectRow();
         Saicdisconnect.UpdateRowFromSaicdisconnect(ref ttblsaicdisconnectCriteria, saicdisconnect);
         pdssaicdisconnect.ttblsaicdisconnect.AddttblsaicdisconnectRow((pdssaicdisconnectDataSet.ttblsaicdisconnectRow)ttblsaicdisconnectCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAICDisconnect - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAICDisconnect(ref pdsContext,  pdssaicdisconnect, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAICDisconnect - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaicdisconnect);
      }

      public IEnumerable<Saiclistresults> SAICGetConnectList(IEnumerable<Saiclistcriteria> saiclistcriteria)
      {   
         var results = new List<Saiclistresults>();
         
         var pdssaiclist = new pdssaiclistDataSet();
            
         foreach (var obj in saiclistcriteria)
         {
             DataRow row = pdssaiclist.ttblsaiclistcriteria.NewttblsaiclistcriteriaRow();
             Saiclistcriteria.UpdateRowFromSaiclistcriteria(ref row, obj);
             pdssaiclist.ttblsaiclistcriteria.AddttblsaiclistcriteriaRow((pdssaiclistDataSet.ttblsaiclistcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAICGetConnectList - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAICGetConnectList(ref pdsContext, ref pdssaiclist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAICGetConnectList - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaiclist); 
    
            foreach (DataRow row in pdssaiclist.ttblsaiclistresults)
            {
                results.Add(Saiclistresults.BuildSaiclistresultsFromRow(row));
            }
            return results;
        
      }

      public Saicsummary SAICGetConnectSummary()
      {   
         var result = new Saicsummary();
         
         var pdssaicsummary = new pdssaicsummaryDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAICGetConnectSummary - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAICGetConnectSummary(ref pdsContext, out pdssaicsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAICGetConnectSummary - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssaicsummary); 
    
         if (pdssaicsummary.ttblsaicsummary.Count > 0) 
         { 
             result = Saicsummary.BuildSaicsummaryFromRow(pdssaicsummary.ttblsaicsummary[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sausergrplookup> SAUSERGRPlookup()
      {   
         var results = new List<Sausergrplookup>();
         
         var pdssausergrplookup = new pdssausergrplookupDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAUSERGRPlookup - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAUSERGRPlookup(ref pdsContext, out pdssausergrplookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAUSERGRPlookup - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssausergrplookup); 
    
            foreach (DataRow row in pdssausergrplookup.ttblsausergrplookup)
            {
                results.Add(Sausergrplookup.BuildSausergrplookupFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Sastaauthinfo> SASTAAuthInfoLookup(string cSastaType)
      {   
         var results = new List<Sastaauthinfo>();
         
         var pdssastaauthinfo = new pdssastaauthinfoDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SASTAAuthInfoLookup - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SASTAAuthInfoLookup(ref pdsContext,  cSastaType, out pdssastaauthinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SASTAAuthInfoLookup - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssastaauthinfo); 
    
            foreach (DataRow row in pdssastaauthinfo.ttblsastaauthinfo)
            {
                results.Add(Sastaauthinfo.BuildSastaauthinfoFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Auditinqtablelist> AuditInquiryTableListGet()
      {   
         var results = new List<Auditinqtablelist>();
         
         var pdsauditinqtablelist = new pdsauditinqtablelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuditInquiryTableListGet - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryTableListGet(ref pdsContext, out pdsauditinqtablelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryTableListGet - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqtablelist); 
    
            foreach (DataRow row in pdsauditinqtablelist.ttblauditinqtablelist)
            {
                results.Add(Auditinqtablelist.BuildAuditinqtablelistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Auditinqprimarykey> AuditInquiryPrimaryKey(string cTableName)
      {   
         var results = new List<Auditinqprimarykey>();
         
         var pdsauditinqprimarykey = new pdsauditinqprimarykeyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuditInquiryPrimaryKey - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryPrimaryKey(ref pdsContext,  cTableName, out pdsauditinqprimarykey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryPrimaryKey - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqprimarykey); 
    
            foreach (DataRow row in pdsauditinqprimarykey.ttblauditinqprimarykey)
            {
                results.Add(Auditinqprimarykey.BuildAuditinqprimarykeyFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Auditinqauditresults> AuditInquiryAuditRetrieve(AssainquiryAuditInquiryAuditRetrieveRequestAPI AssainquiryAuditInquiryAuditRetrieveRequestAPI)
      {   
         var results = new List<Auditinqauditresults>();
         
         var pdsauditinqauditcriteria = new pdsauditinqauditcriteriaDataSet();
            
         var pdsauditinqprimarykey = new pdsauditinqprimarykeyDataSet();
            
         var pdsauditinqauditresults = new pdsauditinqauditresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblauditinqauditcriteriaRow = pdsauditinqauditcriteria.ttblauditinqauditcriteria.NewttblauditinqauditcriteriaRow();
         Auditinqauditcriteria.UpdateRowFromAuditinqauditcriteria(ref ttblauditinqauditcriteriaRow, AssainquiryAuditInquiryAuditRetrieveRequestAPI.auditinqauditcriteria);
         pdsauditinqauditcriteria.ttblauditinqauditcriteria.AddttblauditinqauditcriteriaRow((pdsauditinqauditcriteriaDataSet.ttblauditinqauditcriteriaRow)ttblauditinqauditcriteriaRow);
          
         foreach (var obj in AssainquiryAuditInquiryAuditRetrieveRequestAPI.auditinqprimarykey)
         {
            DataRow ttblauditinqprimarykeyRow = pdsauditinqprimarykey.ttblauditinqprimarykey.NewttblauditinqprimarykeyRow();
            Auditinqprimarykey.UpdateRowFromAuditinqprimarykey(ref ttblauditinqprimarykeyRow, obj);
            pdsauditinqprimarykey.ttblauditinqprimarykey.AddttblauditinqprimarykeyRow((pdsauditinqprimarykeyDataSet.ttblauditinqprimarykeyRow)ttblauditinqprimarykeyRow);
         }
          
         
         NLogLoggerP.Trace("AuditInquiryAuditRetrieve - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryAuditRetrieve(ref pdsContext,  pdsauditinqauditcriteria,  pdsauditinqprimarykey, out pdsauditinqauditresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryAuditRetrieve - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqauditcriteria); 
    
            foreach (DataRow row in pdsauditinqauditresults.ttblauditinqauditresults)
            {
                results.Add(Auditinqauditresults.BuildAuditinqauditresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> AuditInquiryValidatePriKey(IEnumerable<Auditinqprimarykey> auditinqprimarykey)
      {   
         var results = new List<Messaging>();
         
         var pdsauditinqprimarykey = new pdsauditinqprimarykeyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in auditinqprimarykey)
         {
             DataRow row = pdsauditinqprimarykey.ttblauditinqprimarykey.NewttblauditinqprimarykeyRow();
             Auditinqprimarykey.UpdateRowFromAuditinqprimarykey(ref row, obj);
             pdsauditinqprimarykey.ttblauditinqprimarykey.AddttblauditinqprimarykeyRow((pdsauditinqprimarykeyDataSet.ttblauditinqprimarykeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuditInquiryValidatePriKey - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryValidatePriKey(ref pdsContext,  pdsauditinqprimarykey, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryValidatePriKey - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqprimarykey); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public string AuditInquiryChangeList(Auditinqauditresults auditinqauditresults)
      {   
          
         var pdsauditinqauditresults = new pdsauditinqauditresultsDataSet();
            
         DataRow ttblauditinqauditresultsCriteria = pdsauditinqauditresults.ttblauditinqauditresults.NewttblauditinqauditresultsRow();
         Auditinqauditresults.UpdateRowFromAuditinqauditresults(ref ttblauditinqauditresultsCriteria, auditinqauditresults);
         pdsauditinqauditresults.ttblauditinqauditresults.AddttblauditinqauditresultsRow((pdsauditinqauditresultsDataSet.ttblauditinqauditresultsRow)ttblauditinqauditresultsCriteria);
            
         string cChangeList = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuditInquiryChangeList - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryChangeList(ref pdsContext,  pdsauditinqauditresults, out cChangeList, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryChangeList - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqauditresults); 
    
         return cChangeList;
      
      }

      public string AuditInquiryReferenceNote(AssainquiryAuditInquiryReferenceNoteRequestAPI AssainquiryAuditInquiryReferenceNoteRequestAPI)
      {   
          
         var pdsauditinqauditresults = new pdsauditinqauditresultsDataSet();
            
         string cReferenceOut = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblauditinqauditresultsRow = pdsauditinqauditresults.ttblauditinqauditresults.NewttblauditinqauditresultsRow();
         Auditinqauditresults.UpdateRowFromAuditinqauditresults(ref ttblauditinqauditresultsRow, AssainquiryAuditInquiryReferenceNoteRequestAPI.auditinqauditresults);
         pdsauditinqauditresults.ttblauditinqauditresults.AddttblauditinqauditresultsRow((pdsauditinqauditresultsDataSet.ttblauditinqauditresultsRow)ttblauditinqauditresultsRow);
          
         var  lRetrieve = AssainquiryAuditInquiryReferenceNoteRequestAPI.lRetrieve;
            
         var  cReferenceIn = AssainquiryAuditInquiryReferenceNoteRequestAPI.cReferenceIn;
            
         
         NLogLoggerP.Trace("AuditInquiryReferenceNote - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.AuditInquiryReferenceNote(ref pdsContext,  pdsauditinqauditresults,  lRetrieve,  cReferenceIn, out cReferenceOut, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuditInquiryReferenceNote - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsauditinqauditresults); 
    
         return cReferenceOut;
      
      }

      public IEnumerable<Sapjjobresults> SAPJLoadJobs(Sapjcriteria sapjcriteria)
      {   
         var results = new List<Sapjjobresults>();
         
         var pdssapjcriteria = new pdssapjcriteriaDataSet();
            
         var pdssapjjobresults = new pdssapjjobresultsDataSet();
            
         DataRow ttblsapjcriteriaCriteria = pdssapjcriteria.ttblsapjcriteria.NewttblsapjcriteriaRow();
         Sapjcriteria.UpdateRowFromSapjcriteria(ref ttblsapjcriteriaCriteria, sapjcriteria);
         pdssapjcriteria.ttblsapjcriteria.AddttblsapjcriteriaRow((pdssapjcriteriaDataSet.ttblsapjcriteriaRow)ttblsapjcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJLoadJobs - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJLoadJobs(ref pdsContext,  pdssapjcriteria, out pdssapjjobresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJLoadJobs - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjcriteria); 
    
            foreach (DataRow row in pdssapjjobresults.ttblsapjjobresults)
            {
                results.Add(Sapjjobresults.BuildSapjjobresultsFromRow(row));
            }
            return results;
        
      }

      public Sapjcriteria SAPJCriteriaFieldChange(AssainquirySAPJCriteriaFieldChangeRequestAPI AssainquirySAPJCriteriaFieldChangeRequestAPI)
      {   
         var result = new Sapjcriteria();
         
         var pdssapjcriteria = new pdssapjcriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsapjcriteriaRow = pdssapjcriteria.ttblsapjcriteria.NewttblsapjcriteriaRow();
         Sapjcriteria.UpdateRowFromSapjcriteria(ref ttblsapjcriteriaRow, AssainquirySAPJCriteriaFieldChangeRequestAPI.sapjcriteria);
         pdssapjcriteria.ttblsapjcriteria.AddttblsapjcriteriaRow((pdssapjcriteriaDataSet.ttblsapjcriteriaRow)ttblsapjcriteriaRow);
          
         var  pvFieldname = AssainquirySAPJCriteriaFieldChangeRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("SAPJCriteriaFieldChange - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJCriteriaFieldChange(ref pdsContext,  pvFieldname, ref pdssapjcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJCriteriaFieldChange - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjcriteria); 
    
         if (pdssapjcriteria.ttblsapjcriteria.Count > 0) 
         { 
             result = Sapjcriteria.BuildSapjcriteriaFromRow(pdssapjcriteria.ttblsapjcriteria[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sapjrptmgrs> SAPJLoadRptMgrs(Sapjcriteria sapjcriteria)
      {   
         var results = new List<Sapjrptmgrs>();
         
         var pdssapjcriteria = new pdssapjcriteriaDataSet();
            
         var pdssapjrptmgrs = new pdssapjrptmgrsDataSet();
            
         DataRow ttblsapjcriteriaCriteria = pdssapjcriteria.ttblsapjcriteria.NewttblsapjcriteriaRow();
         Sapjcriteria.UpdateRowFromSapjcriteria(ref ttblsapjcriteriaCriteria, sapjcriteria);
         pdssapjcriteria.ttblsapjcriteria.AddttblsapjcriteriaRow((pdssapjcriteriaDataSet.ttblsapjcriteriaRow)ttblsapjcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJLoadRptMgrs - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJLoadRptMgrs(ref pdsContext,  pdssapjcriteria, out pdssapjrptmgrs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJLoadRptMgrs - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjcriteria); 
    
            foreach (DataRow row in pdssapjrptmgrs.ttblsapjrptmgrs)
            {
                results.Add(Sapjrptmgrs.BuildSapjrptmgrsFromRow(row));
            }
            return results;
        
      }

      public void SAPJSendReportLog(int pvLogcono)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJSendReportLog - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJSendReportLog(ref pdsContext,  pvLogcono, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJSendReportLog - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void SAPJJobRequests(AssainquirySAPJJobRequestsRequestAPI AssainquirySAPJJobRequestsRequestAPI)
      {   
         
         var pdssapjjobresults = new pdssapjjobresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AssainquirySAPJJobRequestsRequestAPI.sapjjobresults)
         {
            DataRow ttblsapjjobresultsRow = pdssapjjobresults.ttblsapjjobresults.NewttblsapjjobresultsRow();
            Sapjjobresults.UpdateRowFromSapjjobresults(ref ttblsapjjobresultsRow, obj);
            pdssapjjobresults.ttblsapjjobresults.AddttblsapjjobresultsRow((pdssapjjobresultsDataSet.ttblsapjjobresultsRow)ttblsapjjobresultsRow);
         }
          
         var  pvAction = AssainquirySAPJJobRequestsRequestAPI.pvAction;
            
         var  pvNbrrcds = AssainquirySAPJJobRequestsRequestAPI.pvNbrrcds;
            
         var  pvAnswer = AssainquirySAPJJobRequestsRequestAPI.pvAnswer;
            
         
         NLogLoggerP.Trace("SAPJJobRequests - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJJobRequests(ref pdsContext,  pvAction,  pvNbrrcds,  pvAnswer,  pdssapjjobresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJJobRequests - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjjobresults);
      }

      public void SAPJChangePrinter(AssainquirySAPJChangePrinterRequestAPI AssainquirySAPJChangePrinterRequestAPI)
      {   
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdssapjjobresults = new pdssapjjobresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AssainquirySAPJChangePrinterRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         foreach (var obj in AssainquirySAPJChangePrinterRequestAPI.sapjjobresults)
         {
            DataRow ttblsapjjobresultsRow = pdssapjjobresults.ttblsapjjobresults.NewttblsapjjobresultsRow();
            Sapjjobresults.UpdateRowFromSapjjobresults(ref ttblsapjjobresultsRow, obj);
            pdssapjjobresults.ttblsapjjobresults.AddttblsapjjobresultsRow((pdssapjjobresultsDataSet.ttblsapjjobresultsRow)ttblsapjjobresultsRow);
         }
          
         var  pvNbrrcds = AssainquirySAPJChangePrinterRequestAPI.pvNbrrcds;
            
         
         NLogLoggerP.Trace("SAPJChangePrinter - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJChangePrinter(ref pdsContext,  pvNbrrcds,  pdsprintersettings,  pdssapjjobresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJChangePrinter - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings);
      }

      public AssainquirySAPJManagerDetailResponseAPI SAPJManagerDetail(Sapjmgrdetail sapjmgrdetail)
      {   
         var result = new AssainquirySAPJManagerDetailResponseAPI();
         
         var pdssapjmgrdetail = new pdssapjmgrdetailDataSet();
            
         DataRow ttblsapjmgrdetailCriteria = pdssapjmgrdetail.ttblsapjmgrdetail.NewttblsapjmgrdetailRow();
         Sapjmgrdetail.UpdateRowFromSapjmgrdetail(ref ttblsapjmgrdetailCriteria, sapjmgrdetail);
         pdssapjmgrdetail.ttblsapjmgrdetail.AddttblsapjmgrdetailRow((pdssapjmgrdetailDataSet.ttblsapjmgrdetailRow)ttblsapjmgrdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJManagerDetail - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJManagerDetail(ref pdsContext, ref pdssapjmgrdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJManagerDetail - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjmgrdetail); 
    
         if (pdssapjmgrdetail.ttblsapjmgrdetail.Count > 0)
         {
            result.sapjmgrdetail = Sapjmgrdetail.BuildSapjmgrdetailFromRow(pdssapjmgrdetail.ttblsapjmgrdetail[0]);
         }
                    
         foreach (DataRow row in pdssapjmgrdetail.ttblsapjmgrfiles)
         {
            result.sapjmgrfiles.Add(Sapjmgrfiles.BuildSapjmgrfilesFromRow(row));
         }     
          
         return result;
          
      }

      public void SAPJStopRptMgrs(string pvQueuename, int pvRptmgr)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJStopRptMgrs - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJStopRptMgrs(ref pdsContext,  pvQueuename,  pvRptmgr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJStopRptMgrs - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void SAPJDeleteRptMgr(string pvQueuename, int pvRptmgr)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJDeleteRptMgr - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.SAPJDeleteRptMgr(ref pdsContext,  pvQueuename,  pvRptmgr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJDeleteRptMgr - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AssainquiryIONIOBoxRetrieveResponseAPI IONIOBoxRetrieve(Ionioboxcriteria ionioboxcriteria)
      {   
         var result = new AssainquiryIONIOBoxRetrieveResponseAPI();
         
         var pdsioniobox = new pdsionioboxDataSet();
            
         DataRow ttblionioboxcriteriaCriteria = pdsioniobox.ttblionioboxcriteria.NewttblionioboxcriteriaRow();
         Ionioboxcriteria.UpdateRowFromIonioboxcriteria(ref ttblionioboxcriteriaCriteria, ionioboxcriteria);
         pdsioniobox.ttblionioboxcriteria.AddttblionioboxcriteriaRow((pdsionioboxDataSet.ttblionioboxcriteriaRow)ttblionioboxcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("IONIOBoxRetrieve - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.IONIOBoxRetrieve(ref pdsContext, ref pdsioniobox, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IONIOBoxRetrieve - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsioniobox); 
    
         foreach (DataRow row in pdsioniobox.ttblionioboxresults)
         {
            result.ionioboxresults.Add(Ionioboxresults.BuildIonioboxresultsFromRow(row));
         }     
         if (pdsioniobox.ttblionioboxsummary.Count > 0)
         {
            result.ionioboxsummary = Ionioboxsummary.BuildIonioboxsummaryFromRow(pdsioniobox.ttblionioboxsummary[0]);
         }
                    
          
         return result;
          
      }

      public Ionioboxxml IONIOBoxGetXML(Ionioboxxml ionioboxxml)
      {   
         var result = new Ionioboxxml();
         
         var pdsionioboxxml = new pdsionioboxxmlDataSet();
            
         DataRow ttblionioboxxmlCriteria = pdsionioboxxml.ttblionioboxxml.NewttblionioboxxmlRow();
         Ionioboxxml.UpdateRowFromIonioboxxml(ref ttblionioboxxmlCriteria, ionioboxxml);
         pdsionioboxxml.ttblionioboxxml.AddttblionioboxxmlRow((pdsionioboxxmlDataSet.ttblionioboxxmlRow)ttblionioboxxmlCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("IONIOBoxGetXML - Assainquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAssainquiryproxy = this.proxyAppObject.CreatePO_assainquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAssainquiryproxy.IONIOBoxGetXML(ref pdsContext, ref pdsionioboxxml, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("IONIOBoxGetXML - Assainquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsionioboxxml); 
    
         if (pdsionioboxxml.ttblionioboxxml.Count > 0) 
         { 
             result = Ionioboxxml.BuildIonioboxxmlFromRow(pdsionioboxxml.ttblionioboxxml[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  