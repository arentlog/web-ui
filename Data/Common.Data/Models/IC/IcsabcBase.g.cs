//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// ABC Stratification
   /// </summary>
   
   public partial class IcsabcBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Warehouse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Stk/OAN
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string stkoan { get; set; }

      /// <summary>
      /// Relative Sales Weight
      /// </summary>
      public decimal relwtsales { get; set; }

      /// <summary>
      /// Relative GMROI Weight
      /// </summary>
      public decimal relwtgmroi { get; set; }

      /// <summary>
      /// Relative Hits Weight
      /// </summary>
      public decimal relwthits { get; set; }

      /// <summary>
      /// Relative Importance A
      /// </summary>
      public decimal relimpa { get; set; }

      /// <summary>
      /// Relative Importance B
      /// </summary>
      public decimal relimpb { get; set; }

      /// <summary>
      /// Relative Importance C
      /// </summary>
      public decimal relimpc { get; set; }

      /// <summary>
      /// Relative Importance D
      /// </summary>
      public decimal relimpd { get; set; }

      /// <summary>
      /// Relative Spread A
      /// </summary>
      public decimal relsprda { get; set; }

      /// <summary>
      /// Relative Spread B
      /// </summary>
      public decimal relsprdb { get; set; }

      /// <summary>
      /// Relative Spread C
      /// </summary>
      public decimal relsprdc { get; set; }

      /// <summary>
      /// Relative Spread D
      /// </summary>
      public decimal relsprdd { get; set; }

      /// <summary>
      /// Sales Percent A
      /// </summary>
      public decimal salespcta { get; set; }

      /// <summary>
      /// Sales Percent B
      /// </summary>
      public decimal salespctb { get; set; }

      /// <summary>
      /// Sales Percent C
      /// </summary>
      public decimal salespctc { get; set; }

      /// <summary>
      /// GMROI Percent A
      /// </summary>
      public decimal gmroipcta { get; set; }

      /// <summary>
      /// GMROI Percent B
      /// </summary>
      public decimal gmroipctb { get; set; }

      /// <summary>
      /// GMROI Percent C
      /// </summary>
      public decimal gmroipctc { get; set; }

      /// <summary>
      /// Hits Percent A
      /// </summary>
      public decimal hitspcta { get; set; }

      /// <summary>
      /// Hits Percent B
      /// </summary>
      public decimal hitspctb { get; set; }

      /// <summary>
      /// Hits Percent C
      /// </summary>
      public decimal hitspctc { get; set; }

      /// <summary>
      /// Operator Initials
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Transaction Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Transaction Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcsabcBaseFromRow<T>(DataRow row) where T:IcsabcBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.stkoan = row.IsNull("stkoan") ? string.Empty : row.Field<string>("stkoan");
         entity.relwtsales = row.IsNull("relwtsales") ? decimal.Zero : row.Field<decimal>("relwtsales");
         entity.relwtgmroi = row.IsNull("relwtgmroi") ? decimal.Zero : row.Field<decimal>("relwtgmroi");
         entity.relwthits = row.IsNull("relwthits") ? decimal.Zero : row.Field<decimal>("relwthits");
         entity.relimpa = row.IsNull("relimpa") ? decimal.Zero : row.Field<decimal>("relimpa");
         entity.relimpb = row.IsNull("relimpb") ? decimal.Zero : row.Field<decimal>("relimpb");
         entity.relimpc = row.IsNull("relimpc") ? decimal.Zero : row.Field<decimal>("relimpc");
         entity.relimpd = row.IsNull("relimpd") ? decimal.Zero : row.Field<decimal>("relimpd");
         entity.relsprda = row.IsNull("relsprda") ? decimal.Zero : row.Field<decimal>("relsprda");
         entity.relsprdb = row.IsNull("relsprdb") ? decimal.Zero : row.Field<decimal>("relsprdb");
         entity.relsprdc = row.IsNull("relsprdc") ? decimal.Zero : row.Field<decimal>("relsprdc");
         entity.relsprdd = row.IsNull("relsprdd") ? decimal.Zero : row.Field<decimal>("relsprdd");
         entity.salespcta = row.IsNull("salespcta") ? decimal.Zero : row.Field<decimal>("salespcta");
         entity.salespctb = row.IsNull("salespctb") ? decimal.Zero : row.Field<decimal>("salespctb");
         entity.salespctc = row.IsNull("salespctc") ? decimal.Zero : row.Field<decimal>("salespctc");
         entity.gmroipcta = row.IsNull("gmroipcta") ? decimal.Zero : row.Field<decimal>("gmroipcta");
         entity.gmroipctb = row.IsNull("gmroipctb") ? decimal.Zero : row.Field<decimal>("gmroipctb");
         entity.gmroipctc = row.IsNull("gmroipctc") ? decimal.Zero : row.Field<decimal>("gmroipctc");
         entity.hitspcta = row.IsNull("hitspcta") ? decimal.Zero : row.Field<decimal>("hitspcta");
         entity.hitspctb = row.IsNull("hitspctb") ? decimal.Zero : row.Field<decimal>("hitspctb");
         entity.hitspctc = row.IsNull("hitspctc") ? decimal.Zero : row.Field<decimal>("hitspctc");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.rowID = row.Field<byte[]>("icsabcRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcsabcBase(ref DataRow row, IcsabcBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("stkoan", entity.stkoan);
         row.SetField("relwtsales", entity.relwtsales);
         row.SetField("relwtgmroi", entity.relwtgmroi);
         row.SetField("relwthits", entity.relwthits);
         row.SetField("relimpa", entity.relimpa);
         row.SetField("relimpb", entity.relimpb);
         row.SetField("relimpc", entity.relimpc);
         row.SetField("relimpd", entity.relimpd);
         row.SetField("relsprda", entity.relsprda);
         row.SetField("relsprdb", entity.relsprdb);
         row.SetField("relsprdc", entity.relsprdc);
         row.SetField("relsprdd", entity.relsprdd);
         row.SetField("salespcta", entity.salespcta);
         row.SetField("salespctb", entity.salespctb);
         row.SetField("salespctc", entity.salespctc);
         row.SetField("gmroipcta", entity.gmroipcta);
         row.SetField("gmroipctb", entity.gmroipctb);
         row.SetField("gmroipctc", entity.gmroipctc);
         row.SetField("hitspcta", entity.hitspcta);
         row.SetField("hitspctb", entity.hitspctb);
         row.SetField("hitspctc", entity.hitspctc);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("transproc", entity.transproc);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("icsabcRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcsabcBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("stkoan", entity.stkoan);
         row.SetField("icsabcRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	