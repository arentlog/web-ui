//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// Detail Lines For Non-Stocks & Drops
   /// </summary>
   
   public partial class IcenlBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Category
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string prodcat { get; set; }

      /// <summary>
      /// Type Code
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string typecd { get; set; }

      /// <summary>
      /// Det Seq#
      /// </summary>
      [Key,Order]
      public int seqnod { get; set; }

      /// <summary>
      /// Hdr Seq#
      /// </summary>
      [Key,Order]
      public int seqnoh { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Jrnl #
      /// </summary>
      public int jrnlno { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      public int setno { get; set; }

      /// <summary>
      /// Order #
      /// </summary>
      public int orderno { get; set; }

      /// <summary>
      /// Order Suffix
      /// </summary>
      public int ordersuf { get; set; }

      /// <summary>
      /// Order Type
      /// </summary>
      [StringValidationAttribute]
      public string ordtype { get; set; }

      /// <summary>
      /// Entry Type
      /// </summary>
      public bool entrytype { get; set; }

      /// <summary>
      /// Quantity
      /// </summary>
      public decimal quantity { get; set; }

      /// <summary>
      /// Amount
      /// </summary>
      public decimal amount { get; set; }

      /// <summary>
      /// Line#
      /// </summary>
      public int lineno { get; set; }

      /// <summary>
      /// Units
      /// </summary>
      [StringValidationAttribute]
      public string unit { get; set; }

      /// <summary>
      /// # Stk Units
      /// </summary>
      public decimal unitconv { get; set; }

      /// <summary>
      /// Date
      /// </summary>
      public DateTime? postdt { get; set; }

      /// <summary>
      /// Bin Loc
      /// </summary>
      [StringValidationAttribute]
      public string binloc1 { get; set; }
      [StringValidationAttribute]
      public string binloc2 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// NCNR
      /// </summary>
      [StringValidationAttribute]
      public string ncnr { get; set; }

      /// <summary>
      /// ECCN
      /// </summary>
      [StringValidationAttribute]
      public string eccnclasscd { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcenlBaseFromRow<T>(DataRow row) where T:IcenlBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.prodcat = row.IsNull("prodcat") ? string.Empty : row.Field<string>("prodcat");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.orderno = row.IsNull("orderno") ? 0 : row.Field<int>("orderno");
         entity.ordersuf = row.IsNull("ordersuf") ? 0 : row.Field<int>("ordersuf");
         entity.typecd = row.IsNull("typecd") ? string.Empty : row.Field<string>("typecd");
         entity.seqnod = row.IsNull("seqnod") ? 0 : row.Field<int>("seqnod");
         entity.ordtype = row.IsNull("ordtype") ? string.Empty : row.Field<string>("ordtype");
         entity.entrytype = row.Field<bool>("entrytype");
         entity.quantity = row.IsNull("quantity") ? decimal.Zero : row.Field<decimal>("quantity");
         entity.amount = row.IsNull("amount") ? decimal.Zero : row.Field<decimal>("amount");
         entity.lineno = row.IsNull("lineno") ? 0 : row.Field<int>("lineno");
         entity.seqnoh = row.IsNull("seqnoh") ? 0 : row.Field<int>("seqnoh");
         entity.unit = row.IsNull("unit") ? string.Empty : row.Field<string>("unit");
         entity.unitconv = row.IsNull("unitconv") ? decimal.Zero : row.Field<decimal>("unitconv");
         entity.postdt = row.Field<DateTime?>("postdt");
         entity.binloc1 = row.IsNull("binloc1") ? string.Empty : row.Field<string>("binloc1");
         entity.binloc2 = row.IsNull("binloc2") ? string.Empty : row.Field<string>("binloc2");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.ncnr = row.IsNull("ncnr") ? string.Empty : row.Field<string>("ncnr");
         entity.eccnclasscd = row.IsNull("eccnclasscd") ? string.Empty : row.Field<string>("eccnclasscd");
         entity.rowID = row.Field<byte[]>("icenlRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcenlBase(ref DataRow row, IcenlBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("prod", entity.prod);
         row.SetField("whse", entity.whse);
         row.SetField("prodcat", entity.prodcat);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("setno", entity.setno);
         row.SetField("orderno", entity.orderno);
         row.SetField("ordersuf", entity.ordersuf);
         row.SetField("typecd", entity.typecd);
         row.SetField("seqnod", entity.seqnod);
         row.SetField("ordtype", entity.ordtype);
         row.SetField("entrytype", entity.entrytype);
         row.SetField("quantity", entity.quantity);
         row.SetField("amount", entity.amount);
         row.SetField("lineno", entity.lineno);
         row.SetField("seqnoh", entity.seqnoh);
         row.SetField("unit", entity.unit);
         row.SetField("unitconv", entity.unitconv);
         row.SetField("postdt", entity.postdt);
         row.SetField("binloc1", entity.binloc1);
         row.SetField("binloc2", entity.binloc2);
         row.SetField("transproc", entity.transproc);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("ncnr", entity.ncnr);
         row.SetField("eccnclasscd", entity.eccnclasscd);
         row.SetField("icenlRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcenlBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("prod", entity.prod);
         row.SetField("whse", entity.whse);
         row.SetField("prodcat", entity.prodcat);
         row.SetField("typecd", entity.typecd);
         row.SetField("seqnod", entity.seqnod);
         row.SetField("seqnoh", entity.seqnoh);
         row.SetField("icenlRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	