//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// IC Product Cross Reference
   /// </summary>
   [EntityType("IC Product Cross Reference","icsec.detail","")]
   public partial class IcsecBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [BusContext(BusPart.AcctEntity),Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Type
      /// </summary>
      [DrillbackParam("pk",1),Key,Order,StringValidationAttribute]
      public string rectype { get; set; }

      /// <summary>
      /// Our Product
      /// </summary>
      [BusContext(BusPart.Descr),DrillbackParam("pk2",2),Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Sequence #
      /// </summary>
      [DrillbackParam("pk3",3),BusContext(BusPart.Name),Key,Order]
      public decimal keyno { get; set; }

      /// <summary>
      /// Alternate Product
      /// </summary>
      [ID(5),StringValidationAttribute]
      public string altprod { get; set; }

      /// <summary>
      /// Order Quantity
      /// </summary>
      public decimal orderqty { get; set; }

      /// <summary>
      /// Unit Buy
      /// </summary>
      [StringValidationAttribute]
      public string unitsell { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Lead Time
      /// </summary>
      public int leadtm { get; set; }

      /// <summary>
      /// Price
      /// </summary>
      public decimal price { get; set; }

      /// <summary>
      /// Last Change
      /// </summary>
      public DateTime? lastchgdt { get; set; }

      /// <summary>
      /// Buying Unit
      /// </summary>
      [StringValidationAttribute]
      public string unitbuy { get; set; }

      /// <summary>
      /// Standard Pack
      /// </summary>
      [StringValidationAttribute]
      public string unitstnd { get; set; }

      /// <summary>
      /// Customer #
      /// </summary>
      [ID(6)]
      public decimal custno { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Extended Prod
      /// </summary>
      [StringValidationAttribute]
      public string extprod { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string extproddescrip1 { get; set; }
      [StringValidationAttribute]
      public string extproddescrip2 { get; set; }

      /// <summary>
      /// Additional Print Info
      /// </summary>
      [StringValidationAttribute]
      public string addprtinfo { get; set; }

      /// <summary>
      /// Ship To
      /// </summary>
      [StringValidationAttribute]
      public string shipto { get; set; }

      /// <summary>
      /// Customer GL Account
      /// </summary>
      [StringValidationAttribute]
      public string custglacctno { get; set; }

      /// <summary>
      /// Row Pointer
      /// </summary>
      [StringValidationAttribute]
      public string rowpointer { get; set; }

      /// <summary>
      /// Sell First Type
      /// </summary>
      [StringValidationAttribute]
      public string sellfirsttype { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcsecBaseFromRow<T>(DataRow row) where T:IcsecBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.rectype = row.IsNull("rectype") ? string.Empty : row.Field<string>("rectype");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.altprod = row.IsNull("altprod") ? string.Empty : row.Field<string>("altprod");
         entity.keyno = row.IsNull("keyno") ? decimal.Zero : row.Field<decimal>("keyno");
         entity.orderqty = row.IsNull("orderqty") ? decimal.Zero : row.Field<decimal>("orderqty");
         entity.unitsell = row.IsNull("unitsell") ? string.Empty : row.Field<string>("unitsell");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.leadtm = row.IsNull("leadtm") ? 0 : row.Field<int>("leadtm");
         entity.price = row.IsNull("price") ? decimal.Zero : row.Field<decimal>("price");
         entity.lastchgdt = row.Field<DateTime?>("lastchgdt");
         entity.unitbuy = row.IsNull("unitbuy") ? string.Empty : row.Field<string>("unitbuy");
         entity.unitstnd = row.IsNull("unitstnd") ? string.Empty : row.Field<string>("unitstnd");
         entity.custno = row.IsNull("custno") ? decimal.Zero : row.Field<decimal>("custno");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.extprod = row.IsNull("extprod") ? string.Empty : row.Field<string>("extprod");
         entity.extproddescrip1 = row.IsNull("extproddescrip1") ? string.Empty : row.Field<string>("extproddescrip1");
         entity.extproddescrip2 = row.IsNull("extproddescrip2") ? string.Empty : row.Field<string>("extproddescrip2");
         entity.addprtinfo = row.IsNull("addprtinfo") ? string.Empty : row.Field<string>("addprtinfo");
         entity.shipto = row.IsNull("shipto") ? string.Empty : row.Field<string>("shipto");
         entity.custglacctno = row.IsNull("custglacctno") ? string.Empty : row.Field<string>("custglacctno");
         entity.rowpointer = row.IsNull("rowpointer") ? string.Empty : row.Field<string>("rowpointer");
         entity.sellfirsttype = row.IsNull("sellfirsttype") ? string.Empty : row.Field<string>("sellfirsttype");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.rowID = row.Field<byte[]>("icsecRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcsecBase(ref DataRow row, IcsecBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("rectype", entity.rectype);
         row.SetField("prod", entity.prod);
         row.SetField("altprod", entity.altprod);
         row.SetField("keyno", entity.keyno);
         row.SetField("orderqty", entity.orderqty);
         row.SetField("unitsell", entity.unitsell);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("leadtm", entity.leadtm);
         row.SetField("price", entity.price);
         row.SetField("lastchgdt", entity.lastchgdt);
         row.SetField("unitbuy", entity.unitbuy);
         row.SetField("unitstnd", entity.unitstnd);
         row.SetField("custno", entity.custno);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("extprod", entity.extprod);
         row.SetField("extproddescrip1", entity.extproddescrip1);
         row.SetField("extproddescrip2", entity.extproddescrip2);
         row.SetField("addprtinfo", entity.addprtinfo);
         row.SetField("shipto", entity.shipto);
         row.SetField("custglacctno", entity.custglacctno);
         row.SetField("rowpointer", entity.rowpointer);
         row.SetField("sellfirsttype", entity.sellfirsttype);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("icsecRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcsecBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("rectype", entity.rectype);
         row.SetField("prod", entity.prod);
         row.SetField("keyno", entity.keyno);
         row.SetField("icsecRowID", entity.rowID.ToByteArray());
         row.SetField("rowpointer", entity.rowpointer);

      }   
   }
}
#pragma warning restore 1591
	