//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// Inventory levels for Physical Count
   /// </summary>
   [EntityType("Physical Count","TBD","InventoryCount")]
   public partial class IcsepBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [BodContext(BodPart.AcctEntity,""),BusContext(BusPart.AcctEntity),Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [BusContext(BusPart.Location),BodContext(BodPart.Location,""),BodID(1,RequiredId.True),Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Product #
      /// </summary>
      [BusContext(BusPart.Descr),Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Bin Loc # 1
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string binloc { get; set; }

      /// <summary>
      /// Run Number
      /// </summary>
      [BodID(2,RequiredId.True),Key,Order]
      public int runno { get; set; }

      /// <summary>
      /// qtyexp
      /// </summary>
      public decimal qtyexp { get; set; }

      /// <summary>
      /// qtycnt
      /// </summary>
      public decimal qtycnt { get; set; }

      /// <summary>
      /// Ser/Lot
      /// </summary>
      public bool serlotfl { get; set; }

      /// <summary>
      /// Creation
      /// </summary>
      public DateTime? createdt { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Sequence
      /// </summary>
      public int seqno { get; set; }

      /// <summary>
      /// Product Cost
      /// </summary>
      public decimal cost { get; set; }

      /// <summary>
      /// Whse Mgr
      /// </summary>
      public bool wmfl { get; set; }

      /// <summary>
      /// Reference
      /// </summary>
      [StringValidationAttribute]
      public string refer { get; set; }

      /// <summary>
      /// Unit
      /// </summary>
      [StringValidationAttribute]
      public string unit { get; set; }

      /// <summary>
      /// Entered
      /// </summary>
      public bool entfl { get; set; }

      /// <summary>
      /// Physical Count
      /// </summary>
      public bool phyfl { get; set; }

      /// <summary>
      /// Spec Rec Link
      /// </summary>
      public int icspecrecno { get; set; }

      /// <summary>
      /// Created Manually
      /// </summary>
      public bool createfl { get; set; }

      /// <summary>
      /// xxda1
      /// </summary>
      public DateTime? lastcntdt { get; set; }

      /// <summary>
      /// Record Type
      /// </summary>
      [StringValidationAttribute]
      public string rectype { get; set; }

      /// <summary>
      /// xxl1
      /// </summary>
      public bool mustcntfl { get; set; }

      /// <summary>
      /// Serial/Lot Type
      /// </summary>
      [StringValidationAttribute]
      public string serlotty { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Customer Cost
      /// </summary>
      public decimal custcost { get; set; }

      /// <summary>
      /// Customer Quantity
      /// </summary>
      public decimal custqty { get; set; }

      /// <summary>
      /// Customer Unavailable
      /// </summary>
      public decimal custqtyunavail { get; set; }

      /// <summary>
      /// ESB Count Flag
      /// </summary>
      public bool esbcountfl { get; set; }

      /// <summary>
      /// Inventory Type
      /// </summary>
      [StringValidationAttribute]
      public string inventoryty { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcsepBaseFromRow<T>(DataRow row) where T:IcsepBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.qtyexp = row.IsNull("qtyexp") ? decimal.Zero : row.Field<decimal>("qtyexp");
         entity.qtycnt = row.IsNull("qtycnt") ? decimal.Zero : row.Field<decimal>("qtycnt");
         entity.serlotfl = row.Field<bool>("serlotfl");
         entity.binloc = row.IsNull("binloc") ? string.Empty : row.Field<string>("binloc");
         entity.runno = row.IsNull("runno") ? 0 : row.Field<int>("runno");
         entity.createdt = row.Field<DateTime?>("createdt");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.cost = row.IsNull("cost") ? decimal.Zero : row.Field<decimal>("cost");
         entity.wmfl = row.Field<bool>("wmfl");
         entity.refer = row.IsNull("refer") ? string.Empty : row.Field<string>("refer");
         entity.unit = row.IsNull("unit") ? string.Empty : row.Field<string>("unit");
         entity.entfl = row.Field<bool>("entfl");
         entity.phyfl = row.Field<bool>("phyfl");
         entity.icspecrecno = row.IsNull("icspecrecno") ? 0 : row.Field<int>("icspecrecno");
         entity.createfl = row.Field<bool>("createfl");
         entity.lastcntdt = row.Field<DateTime?>("lastcntdt");
         entity.rectype = row.IsNull("rectype") ? string.Empty : row.Field<string>("rectype");
         entity.mustcntfl = row.Field<bool>("mustcntfl");
         entity.serlotty = row.IsNull("serlotty") ? string.Empty : row.Field<string>("serlotty");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.custcost = row.IsNull("custcost") ? decimal.Zero : row.Field<decimal>("custcost");
         entity.custqty = row.IsNull("custqty") ? decimal.Zero : row.Field<decimal>("custqty");
         entity.custqtyunavail = row.IsNull("custqtyunavail") ? decimal.Zero : row.Field<decimal>("custqtyunavail");
         entity.esbcountfl = row.Field<bool>("esbcountfl");
         entity.inventoryty = row.IsNull("inventoryty") ? string.Empty : row.Field<string>("inventoryty");
         entity.rowID = row.Field<byte[]>("icsepRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcsepBase(ref DataRow row, IcsepBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("prod", entity.prod);
         row.SetField("qtyexp", entity.qtyexp);
         row.SetField("qtycnt", entity.qtycnt);
         row.SetField("serlotfl", entity.serlotfl);
         row.SetField("binloc", entity.binloc);
         row.SetField("runno", entity.runno);
         row.SetField("createdt", entity.createdt);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("seqno", entity.seqno);
         row.SetField("cost", entity.cost);
         row.SetField("wmfl", entity.wmfl);
         row.SetField("refer", entity.refer);
         row.SetField("unit", entity.unit);
         row.SetField("entfl", entity.entfl);
         row.SetField("phyfl", entity.phyfl);
         row.SetField("icspecrecno", entity.icspecrecno);
         row.SetField("createfl", entity.createfl);
         row.SetField("lastcntdt", entity.lastcntdt);
         row.SetField("rectype", entity.rectype);
         row.SetField("mustcntfl", entity.mustcntfl);
         row.SetField("serlotty", entity.serlotty);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("custcost", entity.custcost);
         row.SetField("custqty", entity.custqty);
         row.SetField("custqtyunavail", entity.custqtyunavail);
         row.SetField("esbcountfl", entity.esbcountfl);
         row.SetField("inventoryty", entity.inventoryty);
         row.SetField("icsepRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcsepBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("prod", entity.prod);
         row.SetField("binloc", entity.binloc);
         row.SetField("runno", entity.runno);
         row.SetField("icsepRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	