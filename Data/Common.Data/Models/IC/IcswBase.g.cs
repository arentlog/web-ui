//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// Warehouse Product Master
   /// </summary>
   [EntityType("IC Product Warehouse","icia.detail","ItemMaster")]
   public partial class IcswBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [BodContext(BodPart.AcctEntity,""),BusContext(BusPart.AcctEntity),Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [BusContext(BusPart.Name),BusContext(BusPart.Location),BodContext(BodPart.Location,""),DrillbackParam("pk2",2),Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [DrillbackParam("pk",1),BodID(1,RequiredId.True),BusContext(BusPart.Descr),Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// On Hand
      /// </summary>
      public decimal qtyonhand { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [StringValidationAttribute]
      public string statustype { get; set; }

      /// <summary>
      /// Extended Type
      /// </summary>
      [StringValidationAttribute]
      public string serlottype { get; set; }

      /// <summary>
      /// Base Price
      /// </summary>
      public decimal baseprice { get; set; }

      /// <summary>
      /// Price Type
      /// </summary>
      [StringValidationAttribute]
      public string pricetype { get; set; }

      /// <summary>
      /// Sales Manager
      /// </summary>
      public bool smanalfl { get; set; }

      /// <summary>
      /// Non Tax Reason
      /// </summary>
      [StringValidationAttribute]
      public string nontaxtype { get; set; }

      /// <summary>
      /// Taxable Type
      /// </summary>
      [StringValidationAttribute]
      public string taxablety { get; set; }

      /// <summary>
      /// Authorized Replenishment Path
      /// </summary>
      [StringValidationAttribute]
      public string arptype { get; set; }

      /// <summary>
      /// Push
      /// </summary>
      public bool arppushfl { get; set; }

      /// <summary>
      /// Product Line
      /// </summary>
      [StringValidationAttribute]
      public string prodline { get; set; }

      /// <summary>
      /// Family Group
      /// </summary>
      [StringValidationAttribute]
      public string famgrptype { get; set; }

      /// <summary>
      /// Vendor Product
      /// </summary>
      [ID(4),StringValidationAttribute]
      public string vendprod { get; set; }

      /// <summary>
      /// Buying Unit
      /// </summary>
      [StringValidationAttribute]
      public string unitbuy { get; set; }

      /// <summary>
      /// Standard Pack
      /// </summary>
      [StringValidationAttribute]
      public string unitstnd { get; set; }

      /// <summary>
      /// UsgMthsFrzFl
      /// </summary>
      public bool usmthsfrzfl { get; set; }

      /// <summary>
      /// Safety Allowance
      /// </summary>
      public decimal safeallamt { get; set; }

      /// <summary>
      /// Safety Allowance
      /// </summary>
      public decimal safeallpct { get; set; }

      /// <summary>
      /// Order Point/Min
      /// </summary>
      public decimal orderpt { get; set; }

      /// <summary>
      /// Line Point/Max
      /// </summary>
      public decimal linept { get; set; }

      /// <summary>
      /// Override Reason
      /// </summary>
      [StringValidationAttribute]
      public string overreasin { get; set; }

      /// <summary>
      /// Order Qty
      /// </summary>
      public decimal ordqtyout { get; set; }

      /// <summary>
      /// Override Reason
      /// </summary>
      [StringValidationAttribute]
      public string overreasout { get; set; }

      /// <summary>
      /// Order Method
      /// </summary>
      [StringValidationAttribute]
      public string ordcalcty { get; set; }

      /// <summary>
      /// Product Class
      /// </summary>
      public int @class { get; set; }

      /// <summary>
      /// Last 852 On Order
      /// </summary>
      public decimal last852onord { get; set; }

      /// <summary>
      /// Last 852 Avail
      /// </summary>
      public decimal last852avail { get; set; }

      /// <summary>
      /// Frozen Reason
      /// </summary>
      [StringValidationAttribute]
      public string frozentype { get; set; }

      /// <summary>
      /// Transfer Unit
      /// </summary>
      [StringValidationAttribute]
      public string unitwt { get; set; }

      /// <summary>
      /// Frozen Date
      /// </summary>
      [StringValidationAttribute]
      public string frozenmmyy { get; set; }

      /// <summary>
      /// Update Source
      /// </summary>
      [StringValidationAttribute]
      public string updtsrc { get; set; }

      /// <summary>
      /// Frozen Months
      /// </summary>
      public int frozenmos { get; set; }

      /// <summary>
      /// Rebate Type
      /// </summary>
      [StringValidationAttribute]
      public string rebatety { get; set; }

      /// <summary>
      /// Average
      /// </summary>
      public decimal avgcost { get; set; }

      /// <summary>
      /// Rebate Sub Type
      /// </summary>
      [StringValidationAttribute]
      public string rebsubty { get; set; }

      /// <summary>
      /// Replacement
      /// </summary>
      public decimal replcost { get; set; }

      /// <summary>
      /// Transfer Unit
      /// </summary>
      [StringValidationAttribute]
      public string transunit { get; set; }

      /// <summary>
      /// Last
      /// </summary>
      public decimal lastcost { get; set; }

      /// <summary>
      /// Usage Calculation
      /// </summary>
      [StringValidationAttribute]
      public string usagectrl { get; set; }

      /// <summary>
      /// Standard
      /// </summary>
      public decimal stndcost { get; set; }

      /// <summary>
      /// Freeze LT
      /// </summary>
      public int frozenltty { get; set; }

      /// <summary>
      /// Addon
      /// </summary>
      public decimal addoncost { get; set; }

      /// <summary>
      /// Over Expiration
      /// </summary>
      public DateTime? abcoverexpdt { get; set; }

      /// <summary>
      /// Reserved
      /// </summary>
      public decimal qtyreservd { get; set; }

      /// <summary>
      /// Committed
      /// </summary>
      public decimal qtycommit { get; set; }

      /// <summary>
      /// 852 Out
      /// </summary>
      public DateTime? rpt852dt { get; set; }

      /// <summary>
      /// Backorder
      /// </summary>
      public decimal qtybo { get; set; }

      /// <summary>
      /// Roll OAN Usage
      /// </summary>
      public bool rolloanusagefl { get; set; }

      /// <summary>
      /// WT In Transit
      /// </summary>
      public decimal qtyintrans { get; set; }

      /// <summary>
      /// On Order
      /// </summary>
      public decimal qtyonorder { get; set; }

      /// <summary>
      /// Received
      /// </summary>
      public decimal qtyrcvd { get; set; }

      /// <summary>
      /// Unavailable
      /// </summary>
      public decimal qtyunavail { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// Entered
      /// </summary>
      public DateTime? enterdt { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// Invoice
      /// </summary>
      public DateTime? lastinvdt { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// Receipt
      /// </summary>
      public DateTime? lastrcptdt { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// Cycle Cnt
      /// </summary>
      public DateTime? lastcntdt { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// PO or WT
      /// </summary>
      public DateTime? lastpowtdt { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// Last Trans
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Price Chg
      /// </summary>
      public DateTime? priceupddt { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Count Required
      /// </summary>
      public bool countfl { get; set; }

      /// <summary>
      /// Stock Level 0 for 30 Days
      /// </summary>
      public bool exout30fl { get; set; }

      /// <summary>
      /// Available < Safety Allowance
      /// </summary>
      public bool exlssfalfl { get; set; }

      /// <summary>
      /// ARP Whse
      /// </summary>
      [StringValidationAttribute]
      public string arpwhse { get; set; }

      /// <summary>
      /// ARP Vendor #
      /// </summary>
      [ID(5)]
      public decimal arpvendno { get; set; }

      /// <summary>
      /// Usage Rate
      /// </summary>
      public decimal usagerate { get; set; }

      /// <summary>
      /// Last Stock Out
      /// </summary>
      public DateTime? lastsodt { get; set; }

      /// <summary>
      /// Order Qty
      /// </summary>
      public decimal ordqtyin { get; set; }

      /// <summary>
      /// Stock Available
      /// </summary>
      public DateTime? availsodt { get; set; }

      /// <summary>
      /// Avg Lead Time
      /// </summary>
      public int leadtmavg { get; set; }

      /// <summary>
      /// Avg LT Date
      /// </summary>
      public DateTime? avgltdt { get; set; }

      /// <summary>
      /// Last LT Date
      /// </summary>
      public DateTime? lastltdt { get; set; }

      /// <summary>
      /// Prior LT Date
      /// </summary>
      public DateTime? priorltdt { get; set; }

      /// <summary>
      /// Last Lead Time
      /// </summary>
      public int leadtmlast { get; set; }

      /// <summary>
      /// Prior Lead Time
      /// </summary>
      public int leadtmprio { get; set; }

      /// <summary>
      /// Frozen By
      /// </summary>
      public bool frozenbyty { get; set; }

      /// <summary>
      /// YTD - Issues
      /// </summary>
      public decimal issueunytd { get; set; }

      /// <summary>
      /// Receipts
      /// </summary>
      public decimal rcptunytd { get; set; }

      /// <summary>
      /// Returns In
      /// </summary>
      public decimal retinunytd { get; set; }

      /// <summary>
      /// Returns Out
      /// </summary>
      public decimal retouunytd { get; set; }

      /// <summary>
      /// DATC
      /// </summary>
      public decimal datccost { get; set; }

      /// <summary>
      /// WT Ship Requests
      /// </summary>
      public decimal qtyreqshp { get; set; }

      /// <summary>
      /// WT Rcv Requests
      /// </summary>
      public decimal qtyreqrcv { get; set; }

      /// <summary>
      /// Bin Loc #1
      /// </summary>
      [StringValidationAttribute]
      public string binloc1 { get; set; }

      /// <summary>
      /// Bin Loc #2
      /// </summary>
      [StringValidationAttribute]
      public string binloc2 { get; set; }

      /// <summary>
      /// Stocked Out for 15 Days
      /// </summary>
      public bool so15fl { get; set; }

      /// <summary>
      /// # Days Stockout
      /// </summary>
      public int nodaysso { get; set; }

      /// <summary>
      /// # Stockouts
      /// </summary>
      public int notimesso { get; set; }

      /// <summary>
      /// Stnd Cost Dt
      /// </summary>
      public DateTime? stndcostdt { get; set; }

      /// <summary>
      /// Repl Cost Dt
      /// </summary>
      public DateTime? replcostdt { get; set; }

      /// <summary>
      /// Auto BO Fill
      /// </summary>
      public bool autofillfl { get; set; }

      /// <summary>
      /// Season Begin
      /// </summary>
      public int seasbegmm { get; set; }

      /// <summary>
      /// Season End
      /// </summary>
      public int seasendmm { get; set; }

      /// <summary>
      /// exbozerofl
      /// </summary>
      public bool exbozerofl { get; set; }

      /// <summary>
      /// Frozen
      /// </summary>
      public bool classfrzfl { get; set; }

      /// <summary>
      /// BO All if Short
      /// </summary>
      public bool boshortfl { get; set; }

      /// <summary>
      /// Months
      /// </summary>
      public int usgmths { get; set; }

      /// <summary>
      /// Review Days
      /// </summary>
      public int nodaysseas { get; set; }

      /// <summary>
      /// Tax Group
      /// </summary>
      public int taxgroup { get; set; }

      /// <summary>
      /// Tax Exempt Type
      /// </summary>
      [StringValidationAttribute]
      public string taxtype { get; set; }

      /// <summary>
      /// Last Foreign Cost
      /// </summary>
      public decimal lastcostfor { get; set; }

      /// <summary>
      /// HS Code
      /// </summary>
      [StringValidationAttribute]
      public string tariffcd { get; set; }

      /// <summary>
      /// G.S.T. Status
      /// </summary>
      public bool gststatus { get; set; }

      /// <summary>
      /// Demand
      /// </summary>
      public decimal qtydemand { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// LIFO Base Year Cost
      /// </summary>
      public decimal baseyrcost { get; set; }

      /// <summary>
      /// List Price
      /// </summary>
      public decimal listprice { get; set; }

      /// <summary>
      /// Whse Mgr
      /// </summary>
      public bool wmfl { get; set; }

      /// <summary>
      /// Priority
      /// </summary>
      [StringValidationAttribute]
      public string wmpriority { get; set; }

      /// <summary>
      /// Bin Type
      /// </summary>
      [StringValidationAttribute]
      public string bintype { get; set; }

      /// <summary>
      /// Allocate
      /// </summary>
      [StringValidationAttribute]
      public string wmallocty { get; set; }

      /// <summary>
      /// Restrict To
      /// </summary>
      [StringValidationAttribute]
      public string wmrestrict { get; set; }

      /// <summary>
      /// Tax Cost
      /// </summary>
      public decimal taxprice { get; set; }

      /// <summary>
      /// Tax Exempt Buying Allowed
      /// </summary>
      public bool taxexbuyfl { get; set; }

      /// <summary>
      /// Rebate
      /// </summary>
      public decimal rebatecost { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Reservation Type
      /// </summary>
      [StringValidationAttribute]
      public string reservety { get; set; }

      /// <summary>
      /// arpusage
      /// </summary>
      [StringValidationAttribute]
      public string arpusage { get; set; }

      /// <summary>
      /// Serial Receiving
      /// </summary>
      [StringValidationAttribute]
      public string snpocd { get; set; }

      /// <summary>
      /// SL Update Date
      /// </summary>
      public DateTime? slchgdt { get; set; }

      /// <summary>
      /// Extra Frt 1
      /// </summary>
      public decimal frtextra1 { get; set; }

      /// <summary>
      /// Reservation Leeway
      /// </summary>
      public int reservedays { get; set; }

      /// <summary>
      /// AutoeSrcBO
      /// </summary>
      public bool autoesrcbofl { get; set; }

      /// <summary>
      /// SeasonFrzFl
      /// </summary>
      public bool seasonfrzfl { get; set; }

      /// <summary>
      /// Safety Days
      /// </summary>
      public int safealldays { get; set; }

      /// <summary>
      /// Company Rank
      /// </summary>
      [StringValidationAttribute]
      public string companyrank { get; set; }

      /// <summary>
      /// Warehouse Rank
      /// </summary>
      [StringValidationAttribute]
      public string whserank { get; set; }

      /// <summary>
      /// SafetyFrzFl
      /// </summary>
      public bool safetyfrzfl { get; set; }

      /// <summary>
      /// Allow ASQ Calc
      /// </summary>
      public bool asqfl { get; set; }

      /// <summary>
      /// Allow High 5 Calc
      /// </summary>
      public bool hi5fl { get; set; }

      /// <summary>
      /// OP Adjust Type
      /// </summary>
      [StringValidationAttribute]
      public string ordptadjty { get; set; }

      /// <summary>
      /// Extra Frt 2
      /// </summary>
      public decimal frtextra2 { get; set; }

      /// <summary>
      /// Min Hits Per Mth
      /// </summary>
      public decimal minhits { get; set; }

      /// <summary>
      /// Min Threshold
      /// </summary>
      public decimal minthreshold { get; set; }

      /// <summary>
      /// Min Threshold Exp Dt
      /// </summary>
      public DateTime? minthreshexpdt { get; set; }

      /// <summary>
      /// Raw Order Point
      /// </summary>
      public decimal oorderpt { get; set; }

      /// <summary>
      /// Raw Line Pt
      /// </summary>
      public decimal olinept { get; set; }

      /// <summary>
      /// Seas Trend Max
      /// </summary>
      public decimal seastrendmax { get; set; }

      /// <summary>
      /// Seas Trend Min
      /// </summary>
      public decimal seastrendmin { get; set; }

      /// <summary>
      /// Seas Trend Exp Dt
      /// </summary>
      public DateTime? seastrendexpdt { get; set; }

      /// <summary>
      /// Seasonal Trend
      /// </summary>
      public decimal seastrend { get; set; }

      /// <summary>
      /// Safety Type
      /// </summary>
      [StringValidationAttribute]
      public string safeallty { get; set; }

      /// <summary>
      /// This Year Units
      /// </summary>
      public int seastrendtyu { get; set; }

      /// <summary>
      /// seastrendlyu
      /// </summary>
      public int seastrendlyu { get; set; }

      /// <summary>
      /// ASQ $ Diff
      /// </summary>
      public decimal asqdiff { get; set; }

      /// <summary>
      /// Hi-5 $ Diff
      /// </summary>
      public decimal hi5diff { get; set; }

      /// <summary>
      /// asqdifffl
      /// </summary>
      public bool asqdifffl { get; set; }

      /// <summary>
      /// hi5difffl
      /// </summary>
      public bool hi5difffl { get; set; }

      /// <summary>
      /// Freeze Ranks
      /// </summary>
      public bool rankfreezefl { get; set; }

      /// <summary>
      /// Threshold Reference
      /// </summary>
      [StringValidationAttribute]
      public string threshrefer { get; set; }

      /// <summary>
      /// Replacement Foreign Cost
      /// </summary>
      public decimal replcostfor { get; set; }

      /// <summary>
      /// Frt Free
      /// </summary>
      public bool frtfreefl { get; set; }

      /// <summary>
      /// ABC Sales Class
      /// </summary>
      [StringValidationAttribute]
      public string abcsalesclass { get; set; }

      /// <summary>
      /// ABC Quantity Class
      /// </summary>
      [StringValidationAttribute]
      public string abcqtyclass { get; set; }

      /// <summary>
      /// ABC Customer Class
      /// </summary>
      [StringValidationAttribute]
      public string abccustclass { get; set; }

      /// <summary>
      /// ABC GMROI Class
      /// </summary>
      [StringValidationAttribute]
      public string abcgmroiclass { get; set; }

      /// <summary>
      /// ABC Final Class
      /// </summary>
      [StringValidationAttribute]
      public string abcfinalclass { get; set; }

      /// <summary>
      /// ABC Classification Date
      /// </summary>
      public DateTime? abcclassdt { get; set; }

      /// <summary>
      /// User 10
      /// </summary>
      [StringValidationAttribute]
      public string user10 { get; set; }

      /// <summary>
      /// User 11
      /// </summary>
      [StringValidationAttribute]
      public string user11 { get; set; }

      /// <summary>
      /// User 12
      /// </summary>
      [StringValidationAttribute]
      public string user12 { get; set; }

      /// <summary>
      /// User 13
      /// </summary>
      [StringValidationAttribute]
      public string user13 { get; set; }

      /// <summary>
      /// User 14
      /// </summary>
      [StringValidationAttribute]
      public string user14 { get; set; }

      /// <summary>
      /// User 15
      /// </summary>
      [StringValidationAttribute]
      public string user15 { get; set; }

      /// <summary>
      /// User 16
      /// </summary>
      [StringValidationAttribute]
      public string user16 { get; set; }

      /// <summary>
      /// User 17
      /// </summary>
      [StringValidationAttribute]
      public string user17 { get; set; }

      /// <summary>
      /// User 18
      /// </summary>
      [StringValidationAttribute]
      public string user18 { get; set; }

      /// <summary>
      /// User 19
      /// </summary>
      [StringValidationAttribute]
      public string user19 { get; set; }

      /// <summary>
      /// User 20
      /// </summary>
      [StringValidationAttribute]
      public string user20 { get; set; }

      /// <summary>
      /// User 21
      /// </summary>
      [StringValidationAttribute]
      public string user21 { get; set; }

      /// <summary>
      /// User 22
      /// </summary>
      [StringValidationAttribute]
      public string user22 { get; set; }

      /// <summary>
      /// User 23
      /// </summary>
      [StringValidationAttribute]
      public string user23 { get; set; }

      /// <summary>
      /// User 24
      /// </summary>
      [StringValidationAttribute]
      public string user24 { get; set; }

      /// <summary>
      /// OAN - Non Stock
      /// </summary>
      [StringValidationAttribute]
      public string nonstockty { get; set; }

      /// <summary>
      /// Rcv as Unavail
      /// </summary>
      public bool rcvunavailfl { get; set; }

      /// <summary>
      /// Incl Unavail Reason Qty
      /// </summary>
      [StringValidationAttribute]
      public string inclunavqty { get; set; }

      /// <summary>
      /// Cust Average
      /// </summary>
      public decimal custavgcost { get; set; }

      /// <summary>
      /// Cust Last
      /// </summary>
      public decimal custlastcost { get; set; }

      /// <summary>
      /// Cust Fixed
      /// </summary>
      public decimal custfixedcost { get; set; }

      /// <summary>
      /// Cust On Hand
      /// </summary>
      public decimal custqtyonhand { get; set; }

      /// <summary>
      /// Cust On Order
      /// </summary>
      public decimal custqtyonorder { get; set; }

      /// <summary>
      /// Cust Unavailable
      /// </summary>
      public decimal custqtyunavail { get; set; }

      /// <summary>
      /// Commodity Code 1
      /// </summary>
      [StringValidationAttribute]
      public string srcommcode1 { get; set; }

      /// <summary>
      /// Commodity Code 2
      /// </summary>
      [StringValidationAttribute]
      public string srcommcode2 { get; set; }

      /// <summary>
      /// Machine
      /// </summary>
      [StringValidationAttribute]
      public string srmachine { get; set; }

      /// <summary>
      /// Regrind Flag
      /// </summary>
      public bool regrindfl { get; set; }

      /// <summary>
      /// Regrind Labor Product
      /// </summary>
      [StringValidationAttribute]
      public string laborprod { get; set; }

      /// <summary>
      /// Linked Regrind Product
      /// </summary>
      [StringValidationAttribute]
      public string linkedprod { get; set; }

      /// <summary>
      /// Bill on Receipt
      /// </summary>
      public bool billonrcptfl { get; set; }

      /// <summary>
      /// Customer Owned
      /// </summary>
      public bool custonlyfl { get; set; }

      /// <summary>
      /// Critical Product
      /// </summary>
      public bool criticalfl { get; set; }

      /// <summary>
      /// Shelf Life Product
      /// </summary>
      public bool shelflifefl { get; set; }

      /// <summary>
      /// Acquired Date
      /// </summary>
      public DateTime? acquiredt { get; set; }

      /// <summary>
      /// Surplus Type
      /// </summary>
      [StringValidationAttribute]
      public string surplusty { get; set; }

      /// <summary>
      /// Cust Received
      /// </summary>
      public decimal custqtyrcvd { get; set; }

      /// <summary>
      /// SR Counting Unit
      /// </summary>
      [StringValidationAttribute]
      public string srunitcnt { get; set; }

      /// <summary>
      /// Row Pointer
      /// </summary>
      [StringValidationAttribute]
      public string rowpointer { get; set; }

      /// <summary>
      /// NCNR
      /// </summary>
      [StringValidationAttribute]
      public string ncnr { get; set; }

      /// <summary>
      /// Country of Origin
      /// </summary>
      [StringValidationAttribute]
      public string countryoforigin { get; set; }

      /// <summary>
      /// Product Preference
      /// </summary>
      [StringValidationAttribute]
      public string prodpreference { get; set; }

      /// <summary>
      /// VA Level
      /// </summary>
      public int valevel { get; set; }

      /// <summary>
      /// Exclude Move
      /// </summary>
      public bool excludemovefl { get; set; }

      /// <summary>
      /// Total Usage Rate
      /// </summary>
      public decimal totusagerate { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }

      /// <summary>
      /// Status Change 852
      /// </summary>
      public bool edi852statuschgfl { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcswBaseFromRow<T>(DataRow row) where T:IcswBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.qtyonhand = row.IsNull("qtyonhand") ? decimal.Zero : row.Field<decimal>("qtyonhand");
         entity.statustype = row.IsNull("statustype") ? string.Empty : row.Field<string>("statustype");
         entity.serlottype = row.IsNull("serlottype") ? string.Empty : row.Field<string>("serlottype");
         entity.baseprice = row.IsNull("baseprice") ? decimal.Zero : row.Field<decimal>("baseprice");
         entity.pricetype = row.IsNull("pricetype") ? string.Empty : row.Field<string>("pricetype");
         entity.smanalfl = row.Field<bool>("smanalfl");
         entity.nontaxtype = row.IsNull("nontaxtype") ? string.Empty : row.Field<string>("nontaxtype");
         entity.taxablety = row.IsNull("taxablety") ? string.Empty : row.Field<string>("taxablety");
         entity.arptype = row.IsNull("arptype") ? string.Empty : row.Field<string>("arptype");
         entity.arppushfl = row.Field<bool>("arppushfl");
         entity.prodline = row.IsNull("prodline") ? string.Empty : row.Field<string>("prodline");
         entity.famgrptype = row.IsNull("famgrptype") ? string.Empty : row.Field<string>("famgrptype");
         entity.vendprod = row.IsNull("vendprod") ? string.Empty : row.Field<string>("vendprod");
         entity.unitbuy = row.IsNull("unitbuy") ? string.Empty : row.Field<string>("unitbuy");
         entity.unitstnd = row.IsNull("unitstnd") ? string.Empty : row.Field<string>("unitstnd");
         entity.usmthsfrzfl = row.Field<bool>("usmthsfrzfl");
         entity.safeallamt = row.IsNull("safeallamt") ? decimal.Zero : row.Field<decimal>("safeallamt");
         entity.safeallpct = row.IsNull("safeallpct") ? decimal.Zero : row.Field<decimal>("safeallpct");
         entity.orderpt = row.IsNull("orderpt") ? decimal.Zero : row.Field<decimal>("orderpt");
         entity.linept = row.IsNull("linept") ? decimal.Zero : row.Field<decimal>("linept");
         entity.overreasin = row.IsNull("overreasin") ? string.Empty : row.Field<string>("overreasin");
         entity.ordqtyout = row.IsNull("ordqtyout") ? decimal.Zero : row.Field<decimal>("ordqtyout");
         entity.overreasout = row.IsNull("overreasout") ? string.Empty : row.Field<string>("overreasout");
         entity.ordcalcty = row.IsNull("ordcalcty") ? string.Empty : row.Field<string>("ordcalcty");
         entity.@class = row.IsNull("class") ? 0 : row.Field<int>("class");
         entity.last852onord = row.IsNull("last852onord") ? decimal.Zero : row.Field<decimal>("last852onord");
         entity.last852avail = row.IsNull("last852avail") ? decimal.Zero : row.Field<decimal>("last852avail");
         entity.frozentype = row.IsNull("frozentype") ? string.Empty : row.Field<string>("frozentype");
         entity.unitwt = row.IsNull("unitwt") ? string.Empty : row.Field<string>("unitwt");
         entity.frozenmmyy = row.IsNull("frozenmmyy") ? string.Empty : row.Field<string>("frozenmmyy");
         entity.updtsrc = row.IsNull("updtsrc") ? string.Empty : row.Field<string>("updtsrc");
         entity.frozenmos = row.IsNull("frozenmos") ? 0 : row.Field<int>("frozenmos");
         entity.rebatety = row.IsNull("rebatety") ? string.Empty : row.Field<string>("rebatety");
         entity.avgcost = row.IsNull("avgcost") ? decimal.Zero : row.Field<decimal>("avgcost");
         entity.rebsubty = row.IsNull("rebsubty") ? string.Empty : row.Field<string>("rebsubty");
         entity.replcost = row.IsNull("replcost") ? decimal.Zero : row.Field<decimal>("replcost");
         entity.transunit = row.IsNull("transunit") ? string.Empty : row.Field<string>("transunit");
         entity.lastcost = row.IsNull("lastcost") ? decimal.Zero : row.Field<decimal>("lastcost");
         entity.usagectrl = row.IsNull("usagectrl") ? string.Empty : row.Field<string>("usagectrl");
         entity.stndcost = row.IsNull("stndcost") ? decimal.Zero : row.Field<decimal>("stndcost");
         entity.frozenltty = row.IsNull("frozenltty") ? 0 : row.Field<int>("frozenltty");
         entity.addoncost = row.IsNull("addoncost") ? decimal.Zero : row.Field<decimal>("addoncost");
         entity.abcoverexpdt = row.Field<DateTime?>("abcoverexpdt");
         entity.qtyreservd = row.IsNull("qtyreservd") ? decimal.Zero : row.Field<decimal>("qtyreservd");
         entity.qtycommit = row.IsNull("qtycommit") ? decimal.Zero : row.Field<decimal>("qtycommit");
         entity.rpt852dt = row.Field<DateTime?>("rpt852dt");
         entity.qtybo = row.IsNull("qtybo") ? decimal.Zero : row.Field<decimal>("qtybo");
         entity.rolloanusagefl = row.Field<bool>("rolloanusagefl");
         entity.qtyintrans = row.IsNull("qtyintrans") ? decimal.Zero : row.Field<decimal>("qtyintrans");
         entity.qtyonorder = row.IsNull("qtyonorder") ? decimal.Zero : row.Field<decimal>("qtyonorder");
         entity.qtyrcvd = row.IsNull("qtyrcvd") ? decimal.Zero : row.Field<decimal>("qtyrcvd");
         entity.qtyunavail = row.IsNull("qtyunavail") ? decimal.Zero : row.Field<decimal>("qtyunavail");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.enterdt = row.Field<DateTime?>("enterdt");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.lastinvdt = row.Field<DateTime?>("lastinvdt");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.lastrcptdt = row.Field<DateTime?>("lastrcptdt");
         entity.user6 = row.Field<decimal?>("user6");
         entity.lastcntdt = row.Field<DateTime?>("lastcntdt");
         entity.user7 = row.Field<decimal?>("user7");
         entity.lastpowtdt = row.Field<DateTime?>("lastpowtdt");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.priceupddt = row.Field<DateTime?>("priceupddt");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.countfl = row.Field<bool>("countfl");
         entity.exout30fl = row.Field<bool>("exout30fl");
         entity.exlssfalfl = row.Field<bool>("exlssfalfl");
         entity.arpwhse = row.IsNull("arpwhse") ? string.Empty : row.Field<string>("arpwhse");
         entity.arpvendno = row.IsNull("arpvendno") ? decimal.Zero : row.Field<decimal>("arpvendno");
         entity.usagerate = row.IsNull("usagerate") ? decimal.Zero : row.Field<decimal>("usagerate");
         entity.lastsodt = row.Field<DateTime?>("lastsodt");
         entity.ordqtyin = row.IsNull("ordqtyin") ? decimal.Zero : row.Field<decimal>("ordqtyin");
         entity.availsodt = row.Field<DateTime?>("availsodt");
         entity.leadtmavg = row.IsNull("leadtmavg") ? 0 : row.Field<int>("leadtmavg");
         entity.avgltdt = row.Field<DateTime?>("avgltdt");
         entity.lastltdt = row.Field<DateTime?>("lastltdt");
         entity.priorltdt = row.Field<DateTime?>("priorltdt");
         entity.leadtmlast = row.IsNull("leadtmlast") ? 0 : row.Field<int>("leadtmlast");
         entity.leadtmprio = row.IsNull("leadtmprio") ? 0 : row.Field<int>("leadtmprio");
         entity.frozenbyty = row.Field<bool>("frozenbyty");
         entity.issueunytd = row.IsNull("issueunytd") ? decimal.Zero : row.Field<decimal>("issueunytd");
         entity.rcptunytd = row.IsNull("rcptunytd") ? decimal.Zero : row.Field<decimal>("rcptunytd");
         entity.retinunytd = row.IsNull("retinunytd") ? decimal.Zero : row.Field<decimal>("retinunytd");
         entity.retouunytd = row.IsNull("retouunytd") ? decimal.Zero : row.Field<decimal>("retouunytd");
         entity.datccost = row.IsNull("datccost") ? decimal.Zero : row.Field<decimal>("datccost");
         entity.qtyreqshp = row.IsNull("qtyreqshp") ? decimal.Zero : row.Field<decimal>("qtyreqshp");
         entity.qtyreqrcv = row.IsNull("qtyreqrcv") ? decimal.Zero : row.Field<decimal>("qtyreqrcv");
         entity.binloc1 = row.IsNull("binloc1") ? string.Empty : row.Field<string>("binloc1");
         entity.binloc2 = row.IsNull("binloc2") ? string.Empty : row.Field<string>("binloc2");
         entity.so15fl = row.Field<bool>("so15fl");
         entity.nodaysso = row.IsNull("nodaysso") ? 0 : row.Field<int>("nodaysso");
         entity.notimesso = row.IsNull("notimesso") ? 0 : row.Field<int>("notimesso");
         entity.stndcostdt = row.Field<DateTime?>("stndcostdt");
         entity.replcostdt = row.Field<DateTime?>("replcostdt");
         entity.autofillfl = row.Field<bool>("autofillfl");
         entity.seasbegmm = row.IsNull("seasbegmm") ? 0 : row.Field<int>("seasbegmm");
         entity.seasendmm = row.IsNull("seasendmm") ? 0 : row.Field<int>("seasendmm");
         entity.exbozerofl = row.Field<bool>("exbozerofl");
         entity.classfrzfl = row.Field<bool>("classfrzfl");
         entity.boshortfl = row.Field<bool>("boshortfl");
         entity.usgmths = row.IsNull("usgmths") ? 0 : row.Field<int>("usgmths");
         entity.nodaysseas = row.IsNull("nodaysseas") ? 0 : row.Field<int>("nodaysseas");
         entity.taxgroup = row.IsNull("taxgroup") ? 0 : row.Field<int>("taxgroup");
         entity.taxtype = row.IsNull("taxtype") ? string.Empty : row.Field<string>("taxtype");
         entity.lastcostfor = row.IsNull("lastcostfor") ? decimal.Zero : row.Field<decimal>("lastcostfor");
         entity.tariffcd = row.IsNull("tariffcd") ? string.Empty : row.Field<string>("tariffcd");
         entity.gststatus = row.Field<bool>("gststatus");
         entity.qtydemand = row.IsNull("qtydemand") ? decimal.Zero : row.Field<decimal>("qtydemand");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.baseyrcost = row.IsNull("baseyrcost") ? decimal.Zero : row.Field<decimal>("baseyrcost");
         entity.listprice = row.IsNull("listprice") ? decimal.Zero : row.Field<decimal>("listprice");
         entity.wmfl = row.Field<bool>("wmfl");
         entity.wmpriority = row.IsNull("wmpriority") ? string.Empty : row.Field<string>("wmpriority");
         entity.bintype = row.IsNull("bintype") ? string.Empty : row.Field<string>("bintype");
         entity.wmallocty = row.IsNull("wmallocty") ? string.Empty : row.Field<string>("wmallocty");
         entity.wmrestrict = row.IsNull("wmrestrict") ? string.Empty : row.Field<string>("wmrestrict");
         entity.taxprice = row.IsNull("taxprice") ? decimal.Zero : row.Field<decimal>("taxprice");
         entity.taxexbuyfl = row.Field<bool>("taxexbuyfl");
         entity.rebatecost = row.IsNull("rebatecost") ? decimal.Zero : row.Field<decimal>("rebatecost");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.reservety = row.IsNull("reservety") ? string.Empty : row.Field<string>("reservety");
         entity.arpusage = row.IsNull("arpusage") ? string.Empty : row.Field<string>("arpusage");
         entity.snpocd = row.IsNull("snpocd") ? string.Empty : row.Field<string>("snpocd");
         entity.slchgdt = row.Field<DateTime?>("slchgdt");
         entity.frtextra1 = row.IsNull("frtextra1") ? decimal.Zero : row.Field<decimal>("frtextra1");
         entity.reservedays = row.IsNull("reservedays") ? 0 : row.Field<int>("reservedays");
         entity.autoesrcbofl = row.Field<bool>("autoesrcbofl");
         entity.seasonfrzfl = row.Field<bool>("seasonfrzfl");
         entity.safealldays = row.IsNull("safealldays") ? 0 : row.Field<int>("safealldays");
         entity.companyrank = row.IsNull("companyrank") ? string.Empty : row.Field<string>("companyrank");
         entity.whserank = row.IsNull("whserank") ? string.Empty : row.Field<string>("whserank");
         entity.safetyfrzfl = row.Field<bool>("safetyfrzfl");
         entity.asqfl = row.Field<bool>("asqfl");
         entity.hi5fl = row.Field<bool>("hi5fl");
         entity.ordptadjty = row.IsNull("ordptadjty") ? string.Empty : row.Field<string>("ordptadjty");
         entity.frtextra2 = row.IsNull("frtextra2") ? decimal.Zero : row.Field<decimal>("frtextra2");
         entity.minhits = row.IsNull("minhits") ? decimal.Zero : row.Field<decimal>("minhits");
         entity.minthreshold = row.IsNull("minthreshold") ? decimal.Zero : row.Field<decimal>("minthreshold");
         entity.minthreshexpdt = row.Field<DateTime?>("minthreshexpdt");
         entity.oorderpt = row.IsNull("oorderpt") ? decimal.Zero : row.Field<decimal>("oorderpt");
         entity.olinept = row.IsNull("olinept") ? decimal.Zero : row.Field<decimal>("olinept");
         entity.seastrendmax = row.IsNull("seastrendmax") ? decimal.Zero : row.Field<decimal>("seastrendmax");
         entity.seastrendmin = row.IsNull("seastrendmin") ? decimal.Zero : row.Field<decimal>("seastrendmin");
         entity.seastrendexpdt = row.Field<DateTime?>("seastrendexpdt");
         entity.seastrend = row.IsNull("seastrend") ? decimal.Zero : row.Field<decimal>("seastrend");
         entity.safeallty = row.IsNull("safeallty") ? string.Empty : row.Field<string>("safeallty");
         entity.seastrendtyu = row.IsNull("seastrendtyu") ? 0 : row.Field<int>("seastrendtyu");
         entity.seastrendlyu = row.IsNull("seastrendlyu") ? 0 : row.Field<int>("seastrendlyu");
         entity.asqdiff = row.IsNull("asqdiff") ? decimal.Zero : row.Field<decimal>("asqdiff");
         entity.hi5diff = row.IsNull("hi5diff") ? decimal.Zero : row.Field<decimal>("hi5diff");
         entity.asqdifffl = row.Field<bool>("asqdifffl");
         entity.hi5difffl = row.Field<bool>("hi5difffl");
         entity.rankfreezefl = row.Field<bool>("rankfreezefl");
         entity.threshrefer = row.IsNull("threshrefer") ? string.Empty : row.Field<string>("threshrefer");
         entity.replcostfor = row.IsNull("replcostfor") ? decimal.Zero : row.Field<decimal>("replcostfor");
         entity.frtfreefl = row.Field<bool>("frtfreefl");
         entity.abcsalesclass = row.IsNull("abcsalesclass") ? string.Empty : row.Field<string>("abcsalesclass");
         entity.abcqtyclass = row.IsNull("abcqtyclass") ? string.Empty : row.Field<string>("abcqtyclass");
         entity.abccustclass = row.IsNull("abccustclass") ? string.Empty : row.Field<string>("abccustclass");
         entity.abcgmroiclass = row.IsNull("abcgmroiclass") ? string.Empty : row.Field<string>("abcgmroiclass");
         entity.abcfinalclass = row.IsNull("abcfinalclass") ? string.Empty : row.Field<string>("abcfinalclass");
         entity.abcclassdt = row.Field<DateTime?>("abcclassdt");
         entity.user10 = row.IsNull("user10") ? string.Empty : row.Field<string>("user10");
         entity.user11 = row.IsNull("user11") ? string.Empty : row.Field<string>("user11");
         entity.user12 = row.IsNull("user12") ? string.Empty : row.Field<string>("user12");
         entity.user13 = row.IsNull("user13") ? string.Empty : row.Field<string>("user13");
         entity.user14 = row.IsNull("user14") ? string.Empty : row.Field<string>("user14");
         entity.user15 = row.IsNull("user15") ? string.Empty : row.Field<string>("user15");
         entity.user16 = row.IsNull("user16") ? string.Empty : row.Field<string>("user16");
         entity.user17 = row.IsNull("user17") ? string.Empty : row.Field<string>("user17");
         entity.user18 = row.IsNull("user18") ? string.Empty : row.Field<string>("user18");
         entity.user19 = row.IsNull("user19") ? string.Empty : row.Field<string>("user19");
         entity.user20 = row.IsNull("user20") ? string.Empty : row.Field<string>("user20");
         entity.user21 = row.IsNull("user21") ? string.Empty : row.Field<string>("user21");
         entity.user22 = row.IsNull("user22") ? string.Empty : row.Field<string>("user22");
         entity.user23 = row.IsNull("user23") ? string.Empty : row.Field<string>("user23");
         entity.user24 = row.IsNull("user24") ? string.Empty : row.Field<string>("user24");
         entity.nonstockty = row.IsNull("nonstockty") ? string.Empty : row.Field<string>("nonstockty");
         entity.rcvunavailfl = row.Field<bool>("rcvunavailfl");
         entity.inclunavqty = row.IsNull("inclunavqty") ? string.Empty : row.Field<string>("inclunavqty");
         entity.custavgcost = row.IsNull("custavgcost") ? decimal.Zero : row.Field<decimal>("custavgcost");
         entity.custlastcost = row.IsNull("custlastcost") ? decimal.Zero : row.Field<decimal>("custlastcost");
         entity.custfixedcost = row.IsNull("custfixedcost") ? decimal.Zero : row.Field<decimal>("custfixedcost");
         entity.custqtyonhand = row.IsNull("custqtyonhand") ? decimal.Zero : row.Field<decimal>("custqtyonhand");
         entity.custqtyonorder = row.IsNull("custqtyonorder") ? decimal.Zero : row.Field<decimal>("custqtyonorder");
         entity.custqtyunavail = row.IsNull("custqtyunavail") ? decimal.Zero : row.Field<decimal>("custqtyunavail");
         entity.srcommcode1 = row.IsNull("srcommcode1") ? string.Empty : row.Field<string>("srcommcode1");
         entity.srcommcode2 = row.IsNull("srcommcode2") ? string.Empty : row.Field<string>("srcommcode2");
         entity.srmachine = row.IsNull("srmachine") ? string.Empty : row.Field<string>("srmachine");
         entity.regrindfl = row.Field<bool>("regrindfl");
         entity.laborprod = row.IsNull("laborprod") ? string.Empty : row.Field<string>("laborprod");
         entity.linkedprod = row.IsNull("linkedprod") ? string.Empty : row.Field<string>("linkedprod");
         entity.billonrcptfl = row.Field<bool>("billonrcptfl");
         entity.custonlyfl = row.Field<bool>("custonlyfl");
         entity.criticalfl = row.Field<bool>("criticalfl");
         entity.shelflifefl = row.Field<bool>("shelflifefl");
         entity.acquiredt = row.Field<DateTime?>("acquiredt");
         entity.surplusty = row.IsNull("surplusty") ? string.Empty : row.Field<string>("surplusty");
         entity.custqtyrcvd = row.IsNull("custqtyrcvd") ? decimal.Zero : row.Field<decimal>("custqtyrcvd");
         entity.srunitcnt = row.IsNull("srunitcnt") ? string.Empty : row.Field<string>("srunitcnt");
         entity.rowpointer = row.IsNull("rowpointer") ? string.Empty : row.Field<string>("rowpointer");
         entity.ncnr = row.IsNull("ncnr") ? string.Empty : row.Field<string>("ncnr");
         entity.countryoforigin = row.IsNull("countryoforigin") ? string.Empty : row.Field<string>("countryoforigin");
         entity.prodpreference = row.IsNull("prodpreference") ? string.Empty : row.Field<string>("prodpreference");
         entity.valevel = row.IsNull("valevel") ? 0 : row.Field<int>("valevel");
         entity.excludemovefl = row.Field<bool>("excludemovefl");
         entity.totusagerate = row.IsNull("totusagerate") ? decimal.Zero : row.Field<decimal>("totusagerate");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.edi852statuschgfl = row.Field<bool>("edi852statuschgfl");
         entity.rowID = row.Field<byte[]>("icswRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcswBase(ref DataRow row, IcswBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("prod", entity.prod);
         row.SetField("qtyonhand", entity.qtyonhand);
         row.SetField("statustype", entity.statustype);
         row.SetField("serlottype", entity.serlottype);
         row.SetField("baseprice", entity.baseprice);
         row.SetField("pricetype", entity.pricetype);
         row.SetField("smanalfl", entity.smanalfl);
         row.SetField("nontaxtype", entity.nontaxtype);
         row.SetField("taxablety", entity.taxablety);
         row.SetField("arptype", entity.arptype);
         row.SetField("arppushfl", entity.arppushfl);
         row.SetField("prodline", entity.prodline);
         row.SetField("famgrptype", entity.famgrptype);
         row.SetField("vendprod", entity.vendprod);
         row.SetField("unitbuy", entity.unitbuy);
         row.SetField("unitstnd", entity.unitstnd);
         row.SetField("usmthsfrzfl", entity.usmthsfrzfl);
         row.SetField("safeallamt", entity.safeallamt);
         row.SetField("safeallpct", entity.safeallpct);
         row.SetField("orderpt", entity.orderpt);
         row.SetField("linept", entity.linept);
         row.SetField("overreasin", entity.overreasin);
         row.SetField("ordqtyout", entity.ordqtyout);
         row.SetField("overreasout", entity.overreasout);
         row.SetField("ordcalcty", entity.ordcalcty);
         row.SetField("class", entity.@class);
         row.SetField("last852onord", entity.last852onord);
         row.SetField("last852avail", entity.last852avail);
         row.SetField("frozentype", entity.frozentype);
         row.SetField("unitwt", entity.unitwt);
         row.SetField("frozenmmyy", entity.frozenmmyy);
         row.SetField("updtsrc", entity.updtsrc);
         row.SetField("frozenmos", entity.frozenmos);
         row.SetField("rebatety", entity.rebatety);
         row.SetField("avgcost", entity.avgcost);
         row.SetField("rebsubty", entity.rebsubty);
         row.SetField("replcost", entity.replcost);
         row.SetField("transunit", entity.transunit);
         row.SetField("lastcost", entity.lastcost);
         row.SetField("usagectrl", entity.usagectrl);
         row.SetField("stndcost", entity.stndcost);
         row.SetField("frozenltty", entity.frozenltty);
         row.SetField("addoncost", entity.addoncost);
         row.SetField("abcoverexpdt", entity.abcoverexpdt);
         row.SetField("qtyreservd", entity.qtyreservd);
         row.SetField("qtycommit", entity.qtycommit);
         row.SetField("rpt852dt", entity.rpt852dt);
         row.SetField("qtybo", entity.qtybo);
         row.SetField("rolloanusagefl", entity.rolloanusagefl);
         row.SetField("qtyintrans", entity.qtyintrans);
         row.SetField("qtyonorder", entity.qtyonorder);
         row.SetField("qtyrcvd", entity.qtyrcvd);
         row.SetField("qtyunavail", entity.qtyunavail);
         row.SetField("user3", entity.user3);
         row.SetField("enterdt", entity.enterdt);
         row.SetField("user4", entity.user4);
         row.SetField("lastinvdt", entity.lastinvdt);
         row.SetField("user5", entity.user5);
         row.SetField("lastrcptdt", entity.lastrcptdt);
         row.SetField("user6", entity.user6);
         row.SetField("lastcntdt", entity.lastcntdt);
         row.SetField("user7", entity.user7);
         row.SetField("lastpowtdt", entity.lastpowtdt);
         row.SetField("user8", entity.user8);
         row.SetField("transdt", entity.transdt);
         row.SetField("user9", entity.user9);
         row.SetField("priceupddt", entity.priceupddt);
         row.SetField("operinit", entity.operinit);
         row.SetField("transtm", entity.transtm);
         row.SetField("countfl", entity.countfl);
         row.SetField("exout30fl", entity.exout30fl);
         row.SetField("exlssfalfl", entity.exlssfalfl);
         row.SetField("arpwhse", entity.arpwhse);
         row.SetField("arpvendno", entity.arpvendno);
         row.SetField("usagerate", entity.usagerate);
         row.SetField("lastsodt", entity.lastsodt);
         row.SetField("ordqtyin", entity.ordqtyin);
         row.SetField("availsodt", entity.availsodt);
         row.SetField("leadtmavg", entity.leadtmavg);
         row.SetField("avgltdt", entity.avgltdt);
         row.SetField("lastltdt", entity.lastltdt);
         row.SetField("priorltdt", entity.priorltdt);
         row.SetField("leadtmlast", entity.leadtmlast);
         row.SetField("leadtmprio", entity.leadtmprio);
         row.SetField("frozenbyty", entity.frozenbyty);
         row.SetField("issueunytd", entity.issueunytd);
         row.SetField("rcptunytd", entity.rcptunytd);
         row.SetField("retinunytd", entity.retinunytd);
         row.SetField("retouunytd", entity.retouunytd);
         row.SetField("datccost", entity.datccost);
         row.SetField("qtyreqshp", entity.qtyreqshp);
         row.SetField("qtyreqrcv", entity.qtyreqrcv);
         row.SetField("binloc1", entity.binloc1);
         row.SetField("binloc2", entity.binloc2);
         row.SetField("so15fl", entity.so15fl);
         row.SetField("nodaysso", entity.nodaysso);
         row.SetField("notimesso", entity.notimesso);
         row.SetField("stndcostdt", entity.stndcostdt);
         row.SetField("replcostdt", entity.replcostdt);
         row.SetField("autofillfl", entity.autofillfl);
         row.SetField("seasbegmm", entity.seasbegmm);
         row.SetField("seasendmm", entity.seasendmm);
         row.SetField("exbozerofl", entity.exbozerofl);
         row.SetField("classfrzfl", entity.classfrzfl);
         row.SetField("boshortfl", entity.boshortfl);
         row.SetField("usgmths", entity.usgmths);
         row.SetField("nodaysseas", entity.nodaysseas);
         row.SetField("taxgroup", entity.taxgroup);
         row.SetField("taxtype", entity.taxtype);
         row.SetField("lastcostfor", entity.lastcostfor);
         row.SetField("tariffcd", entity.tariffcd);
         row.SetField("gststatus", entity.gststatus);
         row.SetField("qtydemand", entity.qtydemand);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("baseyrcost", entity.baseyrcost);
         row.SetField("listprice", entity.listprice);
         row.SetField("wmfl", entity.wmfl);
         row.SetField("wmpriority", entity.wmpriority);
         row.SetField("bintype", entity.bintype);
         row.SetField("wmallocty", entity.wmallocty);
         row.SetField("wmrestrict", entity.wmrestrict);
         row.SetField("taxprice", entity.taxprice);
         row.SetField("taxexbuyfl", entity.taxexbuyfl);
         row.SetField("rebatecost", entity.rebatecost);
         row.SetField("transproc", entity.transproc);
         row.SetField("reservety", entity.reservety);
         row.SetField("arpusage", entity.arpusage);
         row.SetField("snpocd", entity.snpocd);
         row.SetField("slchgdt", entity.slchgdt);
         row.SetField("frtextra1", entity.frtextra1);
         row.SetField("reservedays", entity.reservedays);
         row.SetField("autoesrcbofl", entity.autoesrcbofl);
         row.SetField("seasonfrzfl", entity.seasonfrzfl);
         row.SetField("safealldays", entity.safealldays);
         row.SetField("companyrank", entity.companyrank);
         row.SetField("whserank", entity.whserank);
         row.SetField("safetyfrzfl", entity.safetyfrzfl);
         row.SetField("asqfl", entity.asqfl);
         row.SetField("hi5fl", entity.hi5fl);
         row.SetField("ordptadjty", entity.ordptadjty);
         row.SetField("frtextra2", entity.frtextra2);
         row.SetField("minhits", entity.minhits);
         row.SetField("minthreshold", entity.minthreshold);
         row.SetField("minthreshexpdt", entity.minthreshexpdt);
         row.SetField("oorderpt", entity.oorderpt);
         row.SetField("olinept", entity.olinept);
         row.SetField("seastrendmax", entity.seastrendmax);
         row.SetField("seastrendmin", entity.seastrendmin);
         row.SetField("seastrendexpdt", entity.seastrendexpdt);
         row.SetField("seastrend", entity.seastrend);
         row.SetField("safeallty", entity.safeallty);
         row.SetField("seastrendtyu", entity.seastrendtyu);
         row.SetField("seastrendlyu", entity.seastrendlyu);
         row.SetField("asqdiff", entity.asqdiff);
         row.SetField("hi5diff", entity.hi5diff);
         row.SetField("asqdifffl", entity.asqdifffl);
         row.SetField("hi5difffl", entity.hi5difffl);
         row.SetField("rankfreezefl", entity.rankfreezefl);
         row.SetField("threshrefer", entity.threshrefer);
         row.SetField("replcostfor", entity.replcostfor);
         row.SetField("frtfreefl", entity.frtfreefl);
         row.SetField("abcsalesclass", entity.abcsalesclass);
         row.SetField("abcqtyclass", entity.abcqtyclass);
         row.SetField("abccustclass", entity.abccustclass);
         row.SetField("abcgmroiclass", entity.abcgmroiclass);
         row.SetField("abcfinalclass", entity.abcfinalclass);
         row.SetField("abcclassdt", entity.abcclassdt);
         row.SetField("user10", entity.user10);
         row.SetField("user11", entity.user11);
         row.SetField("user12", entity.user12);
         row.SetField("user13", entity.user13);
         row.SetField("user14", entity.user14);
         row.SetField("user15", entity.user15);
         row.SetField("user16", entity.user16);
         row.SetField("user17", entity.user17);
         row.SetField("user18", entity.user18);
         row.SetField("user19", entity.user19);
         row.SetField("user20", entity.user20);
         row.SetField("user21", entity.user21);
         row.SetField("user22", entity.user22);
         row.SetField("user23", entity.user23);
         row.SetField("user24", entity.user24);
         row.SetField("nonstockty", entity.nonstockty);
         row.SetField("rcvunavailfl", entity.rcvunavailfl);
         row.SetField("inclunavqty", entity.inclunavqty);
         row.SetField("custavgcost", entity.custavgcost);
         row.SetField("custlastcost", entity.custlastcost);
         row.SetField("custfixedcost", entity.custfixedcost);
         row.SetField("custqtyonhand", entity.custqtyonhand);
         row.SetField("custqtyonorder", entity.custqtyonorder);
         row.SetField("custqtyunavail", entity.custqtyunavail);
         row.SetField("srcommcode1", entity.srcommcode1);
         row.SetField("srcommcode2", entity.srcommcode2);
         row.SetField("srmachine", entity.srmachine);
         row.SetField("regrindfl", entity.regrindfl);
         row.SetField("laborprod", entity.laborprod);
         row.SetField("linkedprod", entity.linkedprod);
         row.SetField("billonrcptfl", entity.billonrcptfl);
         row.SetField("custonlyfl", entity.custonlyfl);
         row.SetField("criticalfl", entity.criticalfl);
         row.SetField("shelflifefl", entity.shelflifefl);
         row.SetField("acquiredt", entity.acquiredt);
         row.SetField("surplusty", entity.surplusty);
         row.SetField("custqtyrcvd", entity.custqtyrcvd);
         row.SetField("srunitcnt", entity.srunitcnt);
         row.SetField("rowpointer", entity.rowpointer);
         row.SetField("ncnr", entity.ncnr);
         row.SetField("countryoforigin", entity.countryoforigin);
         row.SetField("prodpreference", entity.prodpreference);
         row.SetField("valevel", entity.valevel);
         row.SetField("excludemovefl", entity.excludemovefl);
         row.SetField("totusagerate", entity.totusagerate);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("edi852statuschgfl", entity.edi852statuschgfl);
         row.SetField("icswRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcswBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("whse", entity.whse);
         row.SetField("prod", entity.prod);
         row.SetField("icswRowID", entity.rowID.ToByteArray());
         row.SetField("rowpointer", entity.rowpointer);

      }   
   }
}
#pragma warning restore 1591
	