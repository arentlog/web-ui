//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.IC
{
   /// <summary>
   /// Catalog Group Values
   /// </summary>
   
   public partial class IcsgvBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Attr No
      /// </summary>
      [Key,Order]
      public int attrno { get; set; }

      /// <summary>
      /// Group No
      /// </summary>
      [Key,Order]
      public int groupno { get; set; }

      /// <summary>
      /// Value No
      /// </summary>
      [Key,Order]
      public int valueno { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string descrip { get; set; }

      /// <summary>
      /// Unique Spec No
      /// </summary>
      public int unspcno { get; set; }

      /// <summary>
      /// link
      /// </summary>
      [StringValidationAttribute]
      public string link { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Node Id
      /// </summary>
      public int nodeid { get; set; }

      /// <summary>
      /// Literal Key
      /// </summary>
      [StringValidationAttribute]
      public string keyLiteral { get; set; }

      /// <summary>
      /// Batch
      /// </summary>
      [StringValidationAttribute]
      public string ecbatchnm { get; set; }

      /// <summary>
      /// Product Level
      /// </summary>
      public bool prodlevel { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildIcsgvBaseFromRow<T>(DataRow row) where T:IcsgvBase, new()
      {
         T entity = new T();
         entity.attrno = row.IsNull("attrno") ? 0 : row.Field<int>("attrno");
         entity.descrip = row.IsNull("descrip") ? string.Empty : row.Field<string>("descrip");
         entity.unspcno = row.IsNull("unspcno") ? 0 : row.Field<int>("unspcno");
         entity.groupno = row.IsNull("groupno") ? 0 : row.Field<int>("groupno");
         entity.valueno = row.IsNull("valueno") ? 0 : row.Field<int>("valueno");
         entity.link = row.IsNull("link") ? string.Empty : row.Field<string>("link");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.nodeid = row.IsNull("nodeid") ? 0 : row.Field<int>("nodeid");
         entity.keyLiteral = row.IsNull("key-literal") ? string.Empty : row.Field<string>("key-literal");
         entity.ecbatchnm = row.IsNull("ecbatchnm") ? string.Empty : row.Field<string>("ecbatchnm");
         entity.prodlevel = row.Field<bool>("prodlevel");
         entity.rowID = row.Field<byte[]>("icsgvRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromIcsgvBase(ref DataRow row, IcsgvBase entity)
      {
         row.SetField("attrno", entity.attrno);
         row.SetField("descrip", entity.descrip);
         row.SetField("unspcno", entity.unspcno);
         row.SetField("groupno", entity.groupno);
         row.SetField("valueno", entity.valueno);
         row.SetField("link", entity.link);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("transproc", entity.transproc);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("nodeid", entity.nodeid);
         row.SetField("key-literal", entity.keyLiteral);
         row.SetField("ecbatchnm", entity.ecbatchnm);
         row.SetField("prodlevel", entity.prodlevel);
         row.SetField("icsgvRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, IcsgvBase entity)
      {
         row.SetField("attrno", entity.attrno);
         row.SetField("groupno", entity.groupno);
         row.SetField("valueno", entity.valueno);
         row.SetField("icsgvRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	