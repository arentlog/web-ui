//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.GL
{
   /// <summary>
   /// Memory Storage for Statements
   /// </summary>
   
   public partial class GlsfmBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Memory Location
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string memoryloc { get; set; }

      /// <summary>
      /// Calendar Period
      /// </summary>
      [Key,Order]
      public int percal { get; set; }

      /// <summary>
      /// Design Name
      /// </summary>
      [StringValidationAttribute]
      public string groupnm { get; set; }

      /// <summary>
      /// Stored By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Stored Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Stored Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Total Level
      /// </summary>
      public decimal totlvl1 { get; set; }
      public decimal totlvl2 { get; set; }
      public decimal totlvl3 { get; set; }
      public decimal totlvl4 { get; set; }
      public decimal totlvl5 { get; set; }
      public decimal totlvl6 { get; set; }
      public decimal totlvl7 { get; set; }
      public decimal totlvl8 { get; set; }
      public decimal totlvl9 { get; set; }
      public decimal totlvl10 { get; set; }
      public decimal totlvl11 { get; set; }
      public decimal totlvl12 { get; set; }
      public decimal totlvl13 { get; set; }
      public decimal totlvl14 { get; set; }
      public decimal totlvl15 { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildGlsfmBaseFromRow<T>(DataRow row) where T:GlsfmBase, new()
      {
         T entity = new T();
         entity.memoryloc = row.IsNull("memoryloc") ? string.Empty : row.Field<string>("memoryloc");
         entity.percal = row.IsNull("percal") ? 0 : row.Field<int>("percal");
         entity.groupnm = row.IsNull("groupnm") ? string.Empty : row.Field<string>("groupnm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.totlvl1 = row.IsNull("totlvl1") ? decimal.Zero : row.Field<decimal>("totlvl1");
         entity.totlvl2 = row.IsNull("totlvl2") ? decimal.Zero : row.Field<decimal>("totlvl2");
         entity.totlvl3 = row.IsNull("totlvl3") ? decimal.Zero : row.Field<decimal>("totlvl3");
         entity.totlvl4 = row.IsNull("totlvl4") ? decimal.Zero : row.Field<decimal>("totlvl4");
         entity.totlvl5 = row.IsNull("totlvl5") ? decimal.Zero : row.Field<decimal>("totlvl5");
         entity.totlvl6 = row.IsNull("totlvl6") ? decimal.Zero : row.Field<decimal>("totlvl6");
         entity.totlvl7 = row.IsNull("totlvl7") ? decimal.Zero : row.Field<decimal>("totlvl7");
         entity.totlvl8 = row.IsNull("totlvl8") ? decimal.Zero : row.Field<decimal>("totlvl8");
         entity.totlvl9 = row.IsNull("totlvl9") ? decimal.Zero : row.Field<decimal>("totlvl9");
         entity.totlvl10 = row.IsNull("totlvl10") ? decimal.Zero : row.Field<decimal>("totlvl10");
         entity.totlvl11 = row.IsNull("totlvl11") ? decimal.Zero : row.Field<decimal>("totlvl11");
         entity.totlvl12 = row.IsNull("totlvl12") ? decimal.Zero : row.Field<decimal>("totlvl12");
         entity.totlvl13 = row.IsNull("totlvl13") ? decimal.Zero : row.Field<decimal>("totlvl13");
         entity.totlvl14 = row.IsNull("totlvl14") ? decimal.Zero : row.Field<decimal>("totlvl14");
         entity.totlvl15 = row.IsNull("totlvl15") ? decimal.Zero : row.Field<decimal>("totlvl15");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("glsfmRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromGlsfmBase(ref DataRow row, GlsfmBase entity)
      {
         row.SetField("memoryloc", entity.memoryloc);
         row.SetField("percal", entity.percal);
         row.SetField("groupnm", entity.groupnm);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("totlvl1", entity.totlvl1);
         row.SetField("totlvl2", entity.totlvl2);
         row.SetField("totlvl3", entity.totlvl3);
         row.SetField("totlvl4", entity.totlvl4);
         row.SetField("totlvl5", entity.totlvl5);
         row.SetField("totlvl6", entity.totlvl6);
         row.SetField("totlvl7", entity.totlvl7);
         row.SetField("totlvl8", entity.totlvl8);
         row.SetField("totlvl9", entity.totlvl9);
         row.SetField("totlvl10", entity.totlvl10);
         row.SetField("totlvl11", entity.totlvl11);
         row.SetField("totlvl12", entity.totlvl12);
         row.SetField("totlvl13", entity.totlvl13);
         row.SetField("totlvl14", entity.totlvl14);
         row.SetField("totlvl15", entity.totlvl15);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("glsfmRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, GlsfmBase entity)
      {
         row.SetField("memoryloc", entity.memoryloc);
         row.SetField("percal", entity.percal);
         row.SetField("glsfmRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	