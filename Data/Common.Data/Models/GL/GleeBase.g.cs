//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.GL
{
   /// <summary>
   /// Extended General Ledger References
   /// </summary>
   
   public partial class GleeBase: ModelBase, IUserFields
   {

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyno { get; set; }

      /// <summary>
      /// Trans#
      /// </summary>
      [Key,Order]
      public int transno { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      [Key,Order]
      public int setno { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Reference
      /// </summary>
      [StringValidationAttribute]
      public string reference1 { get; set; }
      [StringValidationAttribute]
      public string reference2 { get; set; }
      [StringValidationAttribute]
      public string reference3 { get; set; }
      [StringValidationAttribute]
      public string reference4 { get; set; }
      [StringValidationAttribute]
      public string reference5 { get; set; }
      [StringValidationAttribute]
      public string reference6 { get; set; }
      [StringValidationAttribute]
      public string reference7 { get; set; }
      [StringValidationAttribute]
      public string reference8 { get; set; }
      [StringValidationAttribute]
      public string reference9 { get; set; }
      [StringValidationAttribute]
      public string reference10 { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildGleeBaseFromRow<T>(DataRow row) where T:GleeBase, new()
      {
         T entity = new T();
         entity.keyno = row.IsNull("keyno") ? string.Empty : row.Field<string>("keyno");
         entity.transno = row.IsNull("transno") ? 0 : row.Field<int>("transno");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.reference1 = row.IsNull("reference1") ? string.Empty : row.Field<string>("reference1");
         entity.reference2 = row.IsNull("reference2") ? string.Empty : row.Field<string>("reference2");
         entity.reference3 = row.IsNull("reference3") ? string.Empty : row.Field<string>("reference3");
         entity.reference4 = row.IsNull("reference4") ? string.Empty : row.Field<string>("reference4");
         entity.reference5 = row.IsNull("reference5") ? string.Empty : row.Field<string>("reference5");
         entity.reference6 = row.IsNull("reference6") ? string.Empty : row.Field<string>("reference6");
         entity.reference7 = row.IsNull("reference7") ? string.Empty : row.Field<string>("reference7");
         entity.reference8 = row.IsNull("reference8") ? string.Empty : row.Field<string>("reference8");
         entity.reference9 = row.IsNull("reference9") ? string.Empty : row.Field<string>("reference9");
         entity.reference10 = row.IsNull("reference10") ? string.Empty : row.Field<string>("reference10");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("gleeRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromGleeBase(ref DataRow row, GleeBase entity)
      {
         row.SetField("keyno", entity.keyno);
         row.SetField("transno", entity.transno);
         row.SetField("setno", entity.setno);
         row.SetField("reference1", entity.reference1);
         row.SetField("reference2", entity.reference2);
         row.SetField("reference3", entity.reference3);
         row.SetField("reference4", entity.reference4);
         row.SetField("reference5", entity.reference5);
         row.SetField("reference6", entity.reference6);
         row.SetField("reference7", entity.reference7);
         row.SetField("reference8", entity.reference8);
         row.SetField("reference9", entity.reference9);
         row.SetField("reference10", entity.reference10);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("cono", entity.cono);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("gleeRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, GleeBase entity)
      {
         row.SetField("keyno", entity.keyno);
         row.SetField("transno", entity.transno);
         row.SetField("setno", entity.setno);
         row.SetField("cono", entity.cono);
         row.SetField("gleeRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	