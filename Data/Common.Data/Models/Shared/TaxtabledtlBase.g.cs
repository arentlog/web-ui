//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SHARED
{
   /// <summary>
   /// Tax Table Detail Records
   /// </summary>
   
   public partial class TaxtabledtlBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Tax Group
      /// </summary>
      [Key,Order]
      public int taxgroupno { get; set; }

      /// <summary>
      /// Tax Table Row Pointer
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string taxrowpointer { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      public int cono { get; set; }

      /// <summary>
      /// Gross Amount
      /// </summary>
      public decimal grossamt { get; set; }

      /// <summary>
      /// Gross Amount (Currency)
      /// </summary>
      public decimal grossamtcy { get; set; }

      /// <summary>
      /// Net Amount
      /// </summary>
      public decimal netamt { get; set; }

      /// <summary>
      /// Net Amt (Currency)
      /// </summary>
      public decimal netamtcy { get; set; }

      /// <summary>
      /// Tax Amount
      /// </summary>
      public decimal taxamt { get; set; }

      /// <summary>
      /// Tax Amt (Currency)
      /// </summary>
      public decimal taxamtcy { get; set; }

      /// <summary>
      /// Add On Net Amt
      /// </summary>
      public decimal addonnet { get; set; }

      /// <summary>
      /// Add On Tax Amt
      /// </summary>
      public decimal addontaxamt { get; set; }

      /// <summary>
      /// Add On Net Amt (Currency)
      /// </summary>
      public decimal addoncurrnet { get; set; }

      /// <summary>
      /// Add On Tax Amt (Currency)
      /// </summary>
      public decimal addoncurrtax { get; set; }

      /// <summary>
      /// Tax Percent
      /// </summary>
      public decimal taxpct { get; set; }

      /// <summary>
      /// Tax Group Tolerance Exceeded
      /// </summary>
      public bool exceedstolg { get; set; }

      /// <summary>
      /// Write Off Amt
      /// </summary>
      public decimal writeoffamt { get; set; }

      /// <summary>
      /// Write Off Date
      /// </summary>
      public DateTime? writeoffdt { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Add On Gross Amt
      /// </summary>
      public decimal addongrossamt { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildTaxtabledtlBaseFromRow<T>(DataRow row) where T:TaxtabledtlBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.taxgroupno = row.IsNull("taxgroupno") ? 0 : row.Field<int>("taxgroupno");
         entity.taxrowpointer = row.IsNull("taxrowpointer") ? string.Empty : row.Field<string>("taxrowpointer");
         entity.grossamt = row.IsNull("grossamt") ? decimal.Zero : row.Field<decimal>("grossamt");
         entity.grossamtcy = row.IsNull("grossamtcy") ? decimal.Zero : row.Field<decimal>("grossamtcy");
         entity.netamt = row.IsNull("netamt") ? decimal.Zero : row.Field<decimal>("netamt");
         entity.netamtcy = row.IsNull("netamtcy") ? decimal.Zero : row.Field<decimal>("netamtcy");
         entity.taxamt = row.IsNull("taxamt") ? decimal.Zero : row.Field<decimal>("taxamt");
         entity.taxamtcy = row.IsNull("taxamtcy") ? decimal.Zero : row.Field<decimal>("taxamtcy");
         entity.addonnet = row.IsNull("addonnet") ? decimal.Zero : row.Field<decimal>("addonnet");
         entity.addontaxamt = row.IsNull("addontaxamt") ? decimal.Zero : row.Field<decimal>("addontaxamt");
         entity.addoncurrnet = row.IsNull("addoncurrnet") ? decimal.Zero : row.Field<decimal>("addoncurrnet");
         entity.addoncurrtax = row.IsNull("addoncurrtax") ? decimal.Zero : row.Field<decimal>("addoncurrtax");
         entity.taxpct = row.IsNull("taxpct") ? decimal.Zero : row.Field<decimal>("taxpct");
         entity.exceedstolg = row.Field<bool>("exceedstolg");
         entity.writeoffamt = row.IsNull("writeoffamt") ? decimal.Zero : row.Field<decimal>("writeoffamt");
         entity.writeoffdt = row.Field<DateTime?>("writeoffdt");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.addongrossamt = row.IsNull("addongrossamt") ? decimal.Zero : row.Field<decimal>("addongrossamt");
         entity.rowID = row.Field<byte[]>("taxtabledtlRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromTaxtabledtlBase(ref DataRow row, TaxtabledtlBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("taxgroupno", entity.taxgroupno);
         row.SetField("taxrowpointer", entity.taxrowpointer);
         row.SetField("grossamt", entity.grossamt);
         row.SetField("grossamtcy", entity.grossamtcy);
         row.SetField("netamt", entity.netamt);
         row.SetField("netamtcy", entity.netamtcy);
         row.SetField("taxamt", entity.taxamt);
         row.SetField("taxamtcy", entity.taxamtcy);
         row.SetField("addonnet", entity.addonnet);
         row.SetField("addontaxamt", entity.addontaxamt);
         row.SetField("addoncurrnet", entity.addoncurrnet);
         row.SetField("addoncurrtax", entity.addoncurrtax);
         row.SetField("taxpct", entity.taxpct);
         row.SetField("exceedstolg", entity.exceedstolg);
         row.SetField("writeoffamt", entity.writeoffamt);
         row.SetField("writeoffdt", entity.writeoffdt);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("transproc", entity.transproc);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("addongrossamt", entity.addongrossamt);
         row.SetField("taxtabledtlRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, TaxtabledtlBase entity)
      {
         row.SetField("taxgroupno", entity.taxgroupno);
         row.SetField("taxrowpointer", entity.taxrowpointer);
         row.SetField("taxtabledtlRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	