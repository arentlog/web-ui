//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.EDI
{
   /// <summary>
   /// EDI Audit/Inquiry File.  Purpose of the file is to monitor when EDI transactions are created in Trend and written to the EDI flat files or read into Trend from the EDI flat files
   /// </summary>
   
   public partial class EdiaBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string statustype { get; set; }

      /// <summary>
      /// EDI Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string editype { get; set; }

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyfielda { get; set; }

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyfieldb { get; set; }

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyfieldc { get; set; }

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyfieldd { get; set; }

      /// <summary>
      /// Seq #
      /// </summary>
      [Key,Order]
      public int seqno { get; set; }

      /// <summary>
      /// keyfielde
      /// </summary>
      [StringValidationAttribute]
      public string keyfielde { get; set; }

      /// <summary>
      /// Interchange Control #
      /// </summary>
      public decimal isanno { get; set; }

      /// <summary>
      /// Group Control Number
      /// </summary>
      public decimal fgno { get; set; }

      /// <summary>
      /// Transaction Control #
      /// </summary>
      public decimal stno { get; set; }

      /// <summary>
      /// Created Date
      /// </summary>
      public DateTime? createdt { get; set; }

      /// <summary>
      /// Create Time
      /// </summary>
      [StringValidationAttribute]
      public string createtm { get; set; }

      /// <summary>
      /// Create Initials
      /// </summary>
      [StringValidationAttribute]
      public string createinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildEdiaBaseFromRow<T>(DataRow row) where T:EdiaBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.statustype = row.IsNull("statustype") ? string.Empty : row.Field<string>("statustype");
         entity.editype = row.IsNull("editype") ? string.Empty : row.Field<string>("editype");
         entity.keyfielda = row.IsNull("keyfielda") ? string.Empty : row.Field<string>("keyfielda");
         entity.keyfieldb = row.IsNull("keyfieldb") ? string.Empty : row.Field<string>("keyfieldb");
         entity.keyfieldc = row.IsNull("keyfieldc") ? string.Empty : row.Field<string>("keyfieldc");
         entity.keyfieldd = row.IsNull("keyfieldd") ? string.Empty : row.Field<string>("keyfieldd");
         entity.keyfielde = row.IsNull("keyfielde") ? string.Empty : row.Field<string>("keyfielde");
         entity.isanno = row.IsNull("isanno") ? decimal.Zero : row.Field<decimal>("isanno");
         entity.fgno = row.IsNull("fgno") ? decimal.Zero : row.Field<decimal>("fgno");
         entity.stno = row.IsNull("stno") ? decimal.Zero : row.Field<decimal>("stno");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.createdt = row.Field<DateTime?>("createdt");
         entity.createtm = row.IsNull("createtm") ? string.Empty : row.Field<string>("createtm");
         entity.createinit = row.IsNull("createinit") ? string.Empty : row.Field<string>("createinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("ediaRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromEdiaBase(ref DataRow row, EdiaBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("statustype", entity.statustype);
         row.SetField("editype", entity.editype);
         row.SetField("keyfielda", entity.keyfielda);
         row.SetField("keyfieldb", entity.keyfieldb);
         row.SetField("keyfieldc", entity.keyfieldc);
         row.SetField("keyfieldd", entity.keyfieldd);
         row.SetField("keyfielde", entity.keyfielde);
         row.SetField("isanno", entity.isanno);
         row.SetField("fgno", entity.fgno);
         row.SetField("stno", entity.stno);
         row.SetField("seqno", entity.seqno);
         row.SetField("createdt", entity.createdt);
         row.SetField("createtm", entity.createtm);
         row.SetField("createinit", entity.createinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("ediaRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, EdiaBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("statustype", entity.statustype);
         row.SetField("editype", entity.editype);
         row.SetField("keyfielda", entity.keyfielda);
         row.SetField("keyfieldb", entity.keyfieldb);
         row.SetField("keyfieldc", entity.keyfieldc);
         row.SetField("keyfieldd", entity.keyfieldd);
         row.SetField("seqno", entity.seqno);
         row.SetField("ediaRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	