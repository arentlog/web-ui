//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.EDI
{
   /// <summary>
   /// EDI header file.  Used to store incoming edi purchase order information
   /// </summary>
   
   public partial class EdihBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company Number
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Batch Name
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string batchnm { get; set; }

      /// <summary>
      /// Seq #
      /// </summary>
      [Key,Order]
      public int seqno { get; set; }

      /// <summary>
      /// PO
      /// </summary>
      [StringValidationAttribute]
      public string custpo { get; set; }

      /// <summary>
      /// Customer #
      /// </summary>
      public decimal custno { get; set; }

      /// <summary>
      /// Document
      /// </summary>
      [StringValidationAttribute]
      public string doctype { get; set; }

      /// <summary>
      /// Req Ship
      /// </summary>
      public DateTime? reqshipdt { get; set; }

      /// <summary>
      /// Cancel
      /// </summary>
      public DateTime? canceldt { get; set; }

      /// <summary>
      /// Ref
      /// </summary>
      [StringValidationAttribute]
      public string refer { get; set; }

      /// <summary>
      /// Type
      /// </summary>
      [StringValidationAttribute]
      public string transtype { get; set; }

      /// <summary>
      /// No Lines
      /// </summary>
      public int nolineitem { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// Taxable
      /// </summary>
      [StringValidationAttribute]
      public string taxablety { get; set; }

      /// <summary>
      /// ErrStat
      /// </summary>
      [StringValidationAttribute]
      public string errstatusty { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// DocId
      /// </summary>
      public int docid { get; set; }

      /// <summary>
      /// Error Cnt
      /// </summary>
      public int errcnt { get; set; }

      /// <summary>
      /// ExceptCnt
      /// </summary>
      public int exccnt { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Ship To
      /// </summary>
      [StringValidationAttribute]
      public string shipto { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildEdihBaseFromRow<T>(DataRow row) where T:EdihBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.batchnm = row.IsNull("batchnm") ? string.Empty : row.Field<string>("batchnm");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.custpo = row.IsNull("custpo") ? string.Empty : row.Field<string>("custpo");
         entity.custno = row.IsNull("custno") ? decimal.Zero : row.Field<decimal>("custno");
         entity.doctype = row.IsNull("doctype") ? string.Empty : row.Field<string>("doctype");
         entity.reqshipdt = row.Field<DateTime?>("reqshipdt");
         entity.canceldt = row.Field<DateTime?>("canceldt");
         entity.refer = row.IsNull("refer") ? string.Empty : row.Field<string>("refer");
         entity.transtype = row.IsNull("transtype") ? string.Empty : row.Field<string>("transtype");
         entity.nolineitem = row.IsNull("nolineitem") ? 0 : row.Field<int>("nolineitem");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.taxablety = row.IsNull("taxablety") ? string.Empty : row.Field<string>("taxablety");
         entity.errstatusty = row.IsNull("errstatusty") ? string.Empty : row.Field<string>("errstatusty");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.docid = row.IsNull("docid") ? 0 : row.Field<int>("docid");
         entity.errcnt = row.IsNull("errcnt") ? 0 : row.Field<int>("errcnt");
         entity.exccnt = row.IsNull("exccnt") ? 0 : row.Field<int>("exccnt");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.shipto = row.IsNull("shipto") ? string.Empty : row.Field<string>("shipto");
         entity.rowID = row.Field<byte[]>("edihRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromEdihBase(ref DataRow row, EdihBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("batchnm", entity.batchnm);
         row.SetField("seqno", entity.seqno);
         row.SetField("custpo", entity.custpo);
         row.SetField("custno", entity.custno);
         row.SetField("doctype", entity.doctype);
         row.SetField("reqshipdt", entity.reqshipdt);
         row.SetField("canceldt", entity.canceldt);
         row.SetField("refer", entity.refer);
         row.SetField("transtype", entity.transtype);
         row.SetField("nolineitem", entity.nolineitem);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("taxablety", entity.taxablety);
         row.SetField("errstatusty", entity.errstatusty);
         row.SetField("transproc", entity.transproc);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("docid", entity.docid);
         row.SetField("errcnt", entity.errcnt);
         row.SetField("exccnt", entity.exccnt);
         row.SetField("whse", entity.whse);
         row.SetField("shipto", entity.shipto);
         row.SetField("edihRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, EdihBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("batchnm", entity.batchnm);
         row.SetField("seqno", entity.seqno);
         row.SetField("edihRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	