//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.AR
{
   /// <summary>
   /// Sales Tax Transaction Audit File
   /// </summary>
   
   public partial class ArettBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Order #
      /// </summary>
      [Key,Order]
      public int orderno { get; set; }

      /// <summary>
      /// Order Suffix
      /// </summary>
      [Key,Order]
      public int ordersuf { get; set; }

      /// <summary>
      /// Rec Type
      /// </summary>
      [Key,Order]
      public int recty { get; set; }

      /// <summary>
      /// Tax Group
      /// </summary>
      [Key,Order]
      public int taxgroup { get; set; }

      /// <summary>
      /// Taxing State
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string statecd { get; set; }

      /// <summary>
      /// County
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string countycd { get; set; }

      /// <summary>
      /// City
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string citycd { get; set; }

      /// <summary>
      /// Other Code
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string othercd { get; set; }

      /// <summary>
      /// Tax Exempt Code
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string taxexemptcd { get; set; }

      /// <summary>
      /// Tax Exempt Amt
      /// </summary>
      public decimal taxexemptamt { get; set; }

      /// <summary>
      /// Tax Sale Rate
      /// </summary>
      public decimal taxsalert { get; set; }

      /// <summary>
      /// Tax Sale Base
      /// </summary>
      public decimal taxsalebase { get; set; }

      /// <summary>
      /// Tax Sale Amount
      /// </summary>
      public decimal taxsaleamt { get; set; }

      /// <summary>
      /// Tax Sale Adjustment
      /// </summary>
      public decimal taxsaleadj { get; set; }

      /// <summary>
      /// Tax Use Rate
      /// </summary>
      public decimal taxusert { get; set; }

      /// <summary>
      /// Tax Use Base
      /// </summary>
      public decimal taxusebase { get; set; }

      /// <summary>
      /// Tax Use Amt
      /// </summary>
      public decimal taxuseamt { get; set; }

      /// <summary>
      /// Tax Use Adjustment
      /// </summary>
      public decimal taxuseadj { get; set; }

      /// <summary>
      /// Tax Transit Rate
      /// </summary>
      public decimal taxtransrt { get; set; }

      /// <summary>
      /// Tax Transit Base
      /// </summary>
      public decimal taxtransbase { get; set; }

      /// <summary>
      /// Tax Transit Amount
      /// </summary>
      public decimal taxtransamt { get; set; }

      /// <summary>
      /// Tax Transit Adjustment
      /// </summary>
      public decimal taxtransadj { get; set; }

      /// <summary>
      /// Tax Excise Rate
      /// </summary>
      public decimal taxexcrt { get; set; }

      /// <summary>
      /// Tax Excise Base
      /// </summary>
      public decimal taxexcbase { get; set; }

      /// <summary>
      /// Tax Excise Amount
      /// </summary>
      public decimal taxexcamt { get; set; }

      /// <summary>
      /// Tax Excise Adjustment
      /// </summary>
      public decimal taxexcadj { get; set; }

      /// <summary>
      /// Tax Action Code
      /// </summary>
      [StringValidationAttribute]
      public string taxactcd { get; set; }

      /// <summary>
      /// Tax Override
      /// </summary>
      [StringValidationAttribute]
      public string taxovercd { get; set; }

      /// <summary>
      /// Tax Adjustment Code
      /// </summary>
      [StringValidationAttribute]
      public string taxadjcd { get; set; }

      /// <summary>
      /// Invoice Date
      /// </summary>
      public DateTime? invdt { get; set; }

      /// <summary>
      /// Paid
      /// </summary>
      public DateTime? paiddt { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Division #
      /// </summary>
      public int divno { get; set; }

      /// <summary>
      /// Type
      /// </summary>
      [StringValidationAttribute]
      public string transtype { get; set; }

      /// <summary>
      /// Customer #
      /// </summary>
      public decimal custno { get; set; }

      /// <summary>
      /// Default Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Addons
      /// </summary>
      public int addonno1 { get; set; }
      public int addonno2 { get; set; }
      public int addonno3 { get; set; }
      public int addonno4 { get; set; }
      public int addonno5 { get; set; }
      public int addonno6 { get; set; }
      public int addonno7 { get; set; }
      public int addonno8 { get; set; }
      public int addonno9 { get; set; }
      public int addonno10 { get; set; }

      /// <summary>
      /// Net Addon Amount
      /// </summary>
      public decimal addonnet1 { get; set; }
      public decimal addonnet2 { get; set; }
      public decimal addonnet3 { get; set; }
      public decimal addonnet4 { get; set; }
      public decimal addonnet5 { get; set; }
      public decimal addonnet6 { get; set; }
      public decimal addonnet7 { get; set; }
      public decimal addonnet8 { get; set; }
      public decimal addonnet9 { get; set; }
      public decimal addonnet10 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Tax Excise Adjusted Base
      /// </summary>
      public decimal taxexcadjbase { get; set; }

      /// <summary>
      /// Tax Sale Adjusted Base
      /// </summary>
      public decimal taxsaleadjbase { get; set; }

      /// <summary>
      /// Tax Transit Adjusted Base
      /// </summary>
      public decimal taxtransadjbase { get; set; }

      /// <summary>
      /// Tax Use Adjusted Base
      /// </summary>
      public decimal taxuseadjbase { get; set; }

      /// <summary>
      /// Tax Excise Exempt Amount
      /// </summary>
      public decimal taxexcexempt { get; set; }

      /// <summary>
      /// Tax Sales Exempt Amount
      /// </summary>
      public decimal taxsaleexempt { get; set; }

      /// <summary>
      /// Tax Transit Exempt Amount
      /// </summary>
      public decimal taxtransexempt { get; set; }

      /// <summary>
      /// Tax Use Exempt Amount
      /// </summary>
      public decimal taxuseexempt { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildArettBaseFromRow<T>(DataRow row) where T:ArettBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.orderno = row.IsNull("orderno") ? 0 : row.Field<int>("orderno");
         entity.ordersuf = row.IsNull("ordersuf") ? 0 : row.Field<int>("ordersuf");
         entity.recty = row.IsNull("recty") ? 0 : row.Field<int>("recty");
         entity.taxgroup = row.IsNull("taxgroup") ? 0 : row.Field<int>("taxgroup");
         entity.statecd = row.IsNull("statecd") ? string.Empty : row.Field<string>("statecd");
         entity.countycd = row.IsNull("countycd") ? string.Empty : row.Field<string>("countycd");
         entity.citycd = row.IsNull("citycd") ? string.Empty : row.Field<string>("citycd");
         entity.othercd = row.IsNull("othercd") ? string.Empty : row.Field<string>("othercd");
         entity.taxexemptamt = row.IsNull("taxexemptamt") ? decimal.Zero : row.Field<decimal>("taxexemptamt");
         entity.taxexemptcd = row.IsNull("taxexemptcd") ? string.Empty : row.Field<string>("taxexemptcd");
         entity.taxsalert = row.IsNull("taxsalert") ? decimal.Zero : row.Field<decimal>("taxsalert");
         entity.taxsalebase = row.IsNull("taxsalebase") ? decimal.Zero : row.Field<decimal>("taxsalebase");
         entity.taxsaleamt = row.IsNull("taxsaleamt") ? decimal.Zero : row.Field<decimal>("taxsaleamt");
         entity.taxsaleadj = row.IsNull("taxsaleadj") ? decimal.Zero : row.Field<decimal>("taxsaleadj");
         entity.taxusert = row.IsNull("taxusert") ? decimal.Zero : row.Field<decimal>("taxusert");
         entity.taxusebase = row.IsNull("taxusebase") ? decimal.Zero : row.Field<decimal>("taxusebase");
         entity.taxuseamt = row.IsNull("taxuseamt") ? decimal.Zero : row.Field<decimal>("taxuseamt");
         entity.taxuseadj = row.IsNull("taxuseadj") ? decimal.Zero : row.Field<decimal>("taxuseadj");
         entity.taxtransrt = row.IsNull("taxtransrt") ? decimal.Zero : row.Field<decimal>("taxtransrt");
         entity.taxtransbase = row.IsNull("taxtransbase") ? decimal.Zero : row.Field<decimal>("taxtransbase");
         entity.taxtransamt = row.IsNull("taxtransamt") ? decimal.Zero : row.Field<decimal>("taxtransamt");
         entity.taxtransadj = row.IsNull("taxtransadj") ? decimal.Zero : row.Field<decimal>("taxtransadj");
         entity.taxexcrt = row.IsNull("taxexcrt") ? decimal.Zero : row.Field<decimal>("taxexcrt");
         entity.taxexcbase = row.IsNull("taxexcbase") ? decimal.Zero : row.Field<decimal>("taxexcbase");
         entity.taxexcamt = row.IsNull("taxexcamt") ? decimal.Zero : row.Field<decimal>("taxexcamt");
         entity.taxexcadj = row.IsNull("taxexcadj") ? decimal.Zero : row.Field<decimal>("taxexcadj");
         entity.taxactcd = row.IsNull("taxactcd") ? string.Empty : row.Field<string>("taxactcd");
         entity.taxovercd = row.IsNull("taxovercd") ? string.Empty : row.Field<string>("taxovercd");
         entity.taxadjcd = row.IsNull("taxadjcd") ? string.Empty : row.Field<string>("taxadjcd");
         entity.invdt = row.Field<DateTime?>("invdt");
         entity.paiddt = row.Field<DateTime?>("paiddt");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.divno = row.IsNull("divno") ? 0 : row.Field<int>("divno");
         entity.transtype = row.IsNull("transtype") ? string.Empty : row.Field<string>("transtype");
         entity.custno = row.IsNull("custno") ? decimal.Zero : row.Field<decimal>("custno");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.addonno1 = row.IsNull("addonno1") ? 0 : row.Field<int>("addonno1");
         entity.addonno2 = row.IsNull("addonno2") ? 0 : row.Field<int>("addonno2");
         entity.addonno3 = row.IsNull("addonno3") ? 0 : row.Field<int>("addonno3");
         entity.addonno4 = row.IsNull("addonno4") ? 0 : row.Field<int>("addonno4");
         entity.addonno5 = row.IsNull("addonno5") ? 0 : row.Field<int>("addonno5");
         entity.addonno6 = row.IsNull("addonno6") ? 0 : row.Field<int>("addonno6");
         entity.addonno7 = row.IsNull("addonno7") ? 0 : row.Field<int>("addonno7");
         entity.addonno8 = row.IsNull("addonno8") ? 0 : row.Field<int>("addonno8");
         entity.addonno9 = row.IsNull("addonno9") ? 0 : row.Field<int>("addonno9");
         entity.addonno10 = row.IsNull("addonno10") ? 0 : row.Field<int>("addonno10");
         entity.addonnet1 = row.IsNull("addonnet1") ? decimal.Zero : row.Field<decimal>("addonnet1");
         entity.addonnet2 = row.IsNull("addonnet2") ? decimal.Zero : row.Field<decimal>("addonnet2");
         entity.addonnet3 = row.IsNull("addonnet3") ? decimal.Zero : row.Field<decimal>("addonnet3");
         entity.addonnet4 = row.IsNull("addonnet4") ? decimal.Zero : row.Field<decimal>("addonnet4");
         entity.addonnet5 = row.IsNull("addonnet5") ? decimal.Zero : row.Field<decimal>("addonnet5");
         entity.addonnet6 = row.IsNull("addonnet6") ? decimal.Zero : row.Field<decimal>("addonnet6");
         entity.addonnet7 = row.IsNull("addonnet7") ? decimal.Zero : row.Field<decimal>("addonnet7");
         entity.addonnet8 = row.IsNull("addonnet8") ? decimal.Zero : row.Field<decimal>("addonnet8");
         entity.addonnet9 = row.IsNull("addonnet9") ? decimal.Zero : row.Field<decimal>("addonnet9");
         entity.addonnet10 = row.IsNull("addonnet10") ? decimal.Zero : row.Field<decimal>("addonnet10");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.taxexcadjbase = row.IsNull("taxexcadjbase") ? decimal.Zero : row.Field<decimal>("taxexcadjbase");
         entity.taxsaleadjbase = row.IsNull("taxsaleadjbase") ? decimal.Zero : row.Field<decimal>("taxsaleadjbase");
         entity.taxtransadjbase = row.IsNull("taxtransadjbase") ? decimal.Zero : row.Field<decimal>("taxtransadjbase");
         entity.taxuseadjbase = row.IsNull("taxuseadjbase") ? decimal.Zero : row.Field<decimal>("taxuseadjbase");
         entity.taxexcexempt = row.IsNull("taxexcexempt") ? decimal.Zero : row.Field<decimal>("taxexcexempt");
         entity.taxsaleexempt = row.IsNull("taxsaleexempt") ? decimal.Zero : row.Field<decimal>("taxsaleexempt");
         entity.taxtransexempt = row.IsNull("taxtransexempt") ? decimal.Zero : row.Field<decimal>("taxtransexempt");
         entity.taxuseexempt = row.IsNull("taxuseexempt") ? decimal.Zero : row.Field<decimal>("taxuseexempt");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.rowID = row.Field<byte[]>("arettRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromArettBase(ref DataRow row, ArettBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("orderno", entity.orderno);
         row.SetField("ordersuf", entity.ordersuf);
         row.SetField("recty", entity.recty);
         row.SetField("taxgroup", entity.taxgroup);
         row.SetField("statecd", entity.statecd);
         row.SetField("countycd", entity.countycd);
         row.SetField("citycd", entity.citycd);
         row.SetField("othercd", entity.othercd);
         row.SetField("taxexemptamt", entity.taxexemptamt);
         row.SetField("taxexemptcd", entity.taxexemptcd);
         row.SetField("taxsalert", entity.taxsalert);
         row.SetField("taxsalebase", entity.taxsalebase);
         row.SetField("taxsaleamt", entity.taxsaleamt);
         row.SetField("taxsaleadj", entity.taxsaleadj);
         row.SetField("taxusert", entity.taxusert);
         row.SetField("taxusebase", entity.taxusebase);
         row.SetField("taxuseamt", entity.taxuseamt);
         row.SetField("taxuseadj", entity.taxuseadj);
         row.SetField("taxtransrt", entity.taxtransrt);
         row.SetField("taxtransbase", entity.taxtransbase);
         row.SetField("taxtransamt", entity.taxtransamt);
         row.SetField("taxtransadj", entity.taxtransadj);
         row.SetField("taxexcrt", entity.taxexcrt);
         row.SetField("taxexcbase", entity.taxexcbase);
         row.SetField("taxexcamt", entity.taxexcamt);
         row.SetField("taxexcadj", entity.taxexcadj);
         row.SetField("taxactcd", entity.taxactcd);
         row.SetField("taxovercd", entity.taxovercd);
         row.SetField("taxadjcd", entity.taxadjcd);
         row.SetField("invdt", entity.invdt);
         row.SetField("paiddt", entity.paiddt);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("divno", entity.divno);
         row.SetField("transtype", entity.transtype);
         row.SetField("custno", entity.custno);
         row.SetField("whse", entity.whse);
         row.SetField("addonno1", entity.addonno1);
         row.SetField("addonno2", entity.addonno2);
         row.SetField("addonno3", entity.addonno3);
         row.SetField("addonno4", entity.addonno4);
         row.SetField("addonno5", entity.addonno5);
         row.SetField("addonno6", entity.addonno6);
         row.SetField("addonno7", entity.addonno7);
         row.SetField("addonno8", entity.addonno8);
         row.SetField("addonno9", entity.addonno9);
         row.SetField("addonno10", entity.addonno10);
         row.SetField("addonnet1", entity.addonnet1);
         row.SetField("addonnet2", entity.addonnet2);
         row.SetField("addonnet3", entity.addonnet3);
         row.SetField("addonnet4", entity.addonnet4);
         row.SetField("addonnet5", entity.addonnet5);
         row.SetField("addonnet6", entity.addonnet6);
         row.SetField("addonnet7", entity.addonnet7);
         row.SetField("addonnet8", entity.addonnet8);
         row.SetField("addonnet9", entity.addonnet9);
         row.SetField("addonnet10", entity.addonnet10);
         row.SetField("transproc", entity.transproc);
         row.SetField("taxexcadjbase", entity.taxexcadjbase);
         row.SetField("taxsaleadjbase", entity.taxsaleadjbase);
         row.SetField("taxtransadjbase", entity.taxtransadjbase);
         row.SetField("taxuseadjbase", entity.taxuseadjbase);
         row.SetField("taxexcexempt", entity.taxexcexempt);
         row.SetField("taxsaleexempt", entity.taxsaleexempt);
         row.SetField("taxtransexempt", entity.taxtransexempt);
         row.SetField("taxuseexempt", entity.taxuseexempt);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("arettRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, ArettBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("orderno", entity.orderno);
         row.SetField("ordersuf", entity.ordersuf);
         row.SetField("recty", entity.recty);
         row.SetField("taxgroup", entity.taxgroup);
         row.SetField("statecd", entity.statecd);
         row.SetField("countycd", entity.countycd);
         row.SetField("citycd", entity.citycd);
         row.SetField("othercd", entity.othercd);
         row.SetField("taxexemptcd", entity.taxexemptcd);
         row.SetField("arettRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	