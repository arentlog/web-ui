//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// Contains master record information for each of the record formats used by the interface
   /// </summary>
   
   public partial class CommstBase: ModelBase
   {

      /// <summary>
      /// Record Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string recordType { get; set; }

      /// <summary>
      /// 
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string version { get; set; }

      /// <summary>
      /// Record Length
      /// </summary>
      public int recordLength { get; set; }

      /// <summary>
      /// End Marker
      /// </summary>
      [StringValidationAttribute]
      public string endMarker { get; set; }

      /// <summary>
      /// active
      /// </summary>
      public bool active { get; set; }

      /// <summary>
      /// upload
      /// </summary>
      public bool upload { get; set; }

      /// <summary>
      /// Transaction Type
      /// </summary>
      [StringValidationAttribute]
      public string transType { get; set; }

      /// <summary>
      /// Last Number Sent
      /// </summary>
      public decimal lastSentNumber { get; set; }

      /// <summary>
      /// Time Last Sent
      /// </summary>
      [StringValidationAttribute]
      public string lastSentTime { get; set; }

      /// <summary>
      /// Last Number Acknowledged
      /// </summary>
      public decimal lastAckNumber { get; set; }

      /// <summary>
      /// Time Last Acknowledged
      /// </summary>
      [StringValidationAttribute]
      public string lastAckTime { get; set; }

      /// <summary>
      /// Procedure Name
      /// </summary>
      [StringValidationAttribute]
      public string procedureName { get; set; }

      /// <summary>
      /// multiple
      /// </summary>
      public bool multiple { get; set; }

      /// <summary>
      /// trailer
      /// </summary>
      [StringValidationAttribute]
      public string trailer { get; set; }

      /// <summary>
      /// Store Procedure
      /// </summary>
      [StringValidationAttribute]
      public string storeProcedure { get; set; }

      /// <summary>
      /// comments
      /// </summary>
      [StringValidationAttribute]
      public string comments { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildCommstBaseFromRow<T>(DataRow row) where T:CommstBase, new()
      {
         T entity = new T();
         entity.recordType = row.IsNull("record_type") ? string.Empty : row.Field<string>("record_type");
         entity.version = row.IsNull("version") ? string.Empty : row.Field<string>("version");
         entity.recordLength = row.IsNull("record_length") ? 0 : row.Field<int>("record_length");
         entity.endMarker = row.IsNull("end_marker") ? string.Empty : row.Field<string>("end_marker");
         entity.active = row.Field<bool>("active");
         entity.upload = row.Field<bool>("upload");
         entity.transType = row.IsNull("trans_type") ? string.Empty : row.Field<string>("trans_type");
         entity.lastSentNumber = row.IsNull("last_sent_number") ? decimal.Zero : row.Field<decimal>("last_sent_number");
         entity.lastSentTime = row.IsNull("last_sent_time") ? string.Empty : row.Field<string>("last_sent_time");
         entity.lastAckNumber = row.IsNull("last_ack_number") ? decimal.Zero : row.Field<decimal>("last_ack_number");
         entity.lastAckTime = row.IsNull("last_ack_time") ? string.Empty : row.Field<string>("last_ack_time");
         entity.procedureName = row.IsNull("procedure_name") ? string.Empty : row.Field<string>("procedure_name");
         entity.multiple = row.Field<bool>("multiple");
         entity.trailer = row.IsNull("trailer") ? string.Empty : row.Field<string>("trailer");
         entity.storeProcedure = row.IsNull("store_procedure") ? string.Empty : row.Field<string>("store_procedure");
         entity.comments = row.IsNull("comments") ? string.Empty : row.Field<string>("comments");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.rowID = row.Field<byte[]>("commstRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromCommstBase(ref DataRow row, CommstBase entity)
      {
         row.SetField("record_type", entity.recordType);
         row.SetField("version", entity.version);
         row.SetField("record_length", entity.recordLength);
         row.SetField("end_marker", entity.endMarker);
         row.SetField("active", entity.active);
         row.SetField("upload", entity.upload);
         row.SetField("trans_type", entity.transType);
         row.SetField("last_sent_number", entity.lastSentNumber);
         row.SetField("last_sent_time", entity.lastSentTime);
         row.SetField("last_ack_number", entity.lastAckNumber);
         row.SetField("last_ack_time", entity.lastAckTime);
         row.SetField("procedure_name", entity.procedureName);
         row.SetField("multiple", entity.multiple);
         row.SetField("trailer", entity.trailer);
         row.SetField("store_procedure", entity.storeProcedure);
         row.SetField("comments", entity.comments);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("trans_user", entity.transUser);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("commstRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, CommstBase entity)
      {
         row.SetField("recordType", entity.recordType);
         row.SetField("version", entity.version);
         row.SetField("commstRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	