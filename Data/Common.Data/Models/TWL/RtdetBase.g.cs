//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// Receipt transaction detail
   /// </summary>
   
   public partial class RtdetBase: ModelBase
   {

      /// <summary>
      /// RT Id
      /// </summary>
      [Key,Order]
      public int rtId { get; set; }

      /// <summary>
      /// Line Number
      /// </summary>
      [Key,Order]
      public int lineNum { get; set; }

      /// <summary>
      /// Company
      /// </summary>
      [StringValidationAttribute]
      public string coNum { get; set; }

      /// <summary>
      /// Warehouse
      /// </summary>
      [StringValidationAttribute]
      public string whNum { get; set; }

      /// <summary>
      /// Vendor ID
      /// </summary>
      [StringValidationAttribute]
      public string vendorId { get; set; }

      /// <summary>
      /// Absolute Item Number
      /// </summary>
      [StringValidationAttribute]
      public string absNum { get; set; }

      /// <summary>
      /// Alternate Item Number
      /// </summary>
      [StringValidationAttribute]
      public string itemNum { get; set; }

      /// <summary>
      /// Vendor Item
      /// </summary>
      [StringValidationAttribute]
      public string vendItem { get; set; }

      /// <summary>
      /// Quantity Left
      /// </summary>
      public decimal quantity { get; set; }

      /// <summary>
      /// Actual Quantity
      /// </summary>
      public decimal actQuantity { get; set; }

      /// <summary>
      /// Expected Quantity
      /// </summary>
      public decimal expQuantity { get; set; }

      /// <summary>
      /// Quantity Ordered
      /// </summary>
      public decimal orderedQty { get; set; }

      /// <summary>
      /// B/O Count
      /// </summary>
      public int boCount { get; set; }

      /// <summary>
      /// B/O Quantity
      /// </summary>
      public decimal boQuantity { get; set; }

      /// <summary>
      /// Special Handling
      /// </summary>
      [StringValidationAttribute]
      public string specialHandling { get; set; }

      /// <summary>
      /// Cost
      /// </summary>
      public decimal itemCost { get; set; }

      /// <summary>
      /// Unit of Measure
      /// </summary>
      [StringValidationAttribute]
      public string uom { get; set; }

      /// <summary>
      /// Lot
      /// </summary>
      [StringValidationAttribute]
      public string lot { get; set; }

      /// <summary>
      /// Comments
      /// </summary>
      [StringValidationAttribute]
      public string comments { get; set; }

      /// <summary>
      /// Item Description
      /// </summary>
      [StringValidationAttribute]
      public string itemDesc { get; set; }

      /// <summary>
      /// PO Number
      /// </summary>
      [StringValidationAttribute]
      public string poNumber { get; set; }

      /// <summary>
      /// PO Suffix
      /// </summary>
      [StringValidationAttribute]
      public string poSuffix { get; set; }

      /// <summary>
      /// PO Type
      /// </summary>
      [StringValidationAttribute]
      public string poType { get; set; }

      /// <summary>
      /// po_line
      /// </summary>
      public int poLine { get; set; }

      /// <summary>
      /// line_sequence
      /// </summary>
      public int lineSequence { get; set; }

      /// <summary>
      /// asn_flag
      /// </summary>
      public bool asnFlag { get; set; }

      /// <summary>
      /// packer
      /// </summary>
      [StringValidationAttribute]
      public string packer { get; set; }

      /// <summary>
      /// Delivery
      /// </summary>
      public DateTime? delivery { get; set; }

      /// <summary>
      /// Order
      /// </summary>
      [StringValidationAttribute]
      public string rtnOrder { get; set; }

      /// <summary>
      /// Order Suffix
      /// </summary>
      [StringValidationAttribute]
      public string rtnOrderSuffix { get; set; }

      /// <summary>
      /// Line
      /// </summary>
      public int retLine { get; set; }

      /// <summary>
      /// ret_line_sequence
      /// </summary>
      public int retLineSequence { get; set; }

      /// <summary>
      /// return_fl
      /// </summary>
      [StringValidationAttribute]
      public string returnFl { get; set; }

      /// <summary>
      /// qty_unavail
      /// </summary>
      public decimal qtyUnavail { get; set; }

      /// <summary>
      /// rd_po_type
      /// </summary>
      [StringValidationAttribute]
      public string rdPoType { get; set; }

      /// <summary>
      /// line_indicator
      /// </summary>
      [StringValidationAttribute]
      public string lineIndicator { get; set; }

      /// <summary>
      /// receiver_num
      /// </summary>
      [StringValidationAttribute]
      public string receiverNum { get; set; }

      /// <summary>
      /// prod_desc
      /// </summary>
      [StringValidationAttribute]
      public string prodDesc { get; set; }

      /// <summary>
      /// packing_list
      /// </summary>
      public bool packingList { get; set; }

      /// <summary>
      /// Percent Fill
      /// </summary>
      public decimal percentFill { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [StringValidationAttribute]
      public string rowStatus { get; set; }

      /// <summary>
      /// Stock Status
      /// </summary>
      [StringValidationAttribute]
      public string stockStat { get; set; }

      /// <summary>
      /// Case Quantity
      /// </summary>
      public decimal caseQuantity { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildRtdetBaseFromRow<T>(DataRow row) where T:RtdetBase, new()
      {
         T entity = new T();
         entity.rtId = row.IsNull("rt_id") ? 0 : row.Field<int>("rt_id");
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.lineNum = row.IsNull("line_num") ? 0 : row.Field<int>("line_num");
         entity.vendorId = row.IsNull("vendor_id") ? string.Empty : row.Field<string>("vendor_id");
         entity.absNum = row.IsNull("abs_num") ? string.Empty : row.Field<string>("abs_num");
         entity.itemNum = row.IsNull("item_num") ? string.Empty : row.Field<string>("item_num");
         entity.vendItem = row.IsNull("vend_item") ? string.Empty : row.Field<string>("vend_item");
         entity.quantity = row.IsNull("quantity") ? decimal.Zero : row.Field<decimal>("quantity");
         entity.actQuantity = row.IsNull("act_quantity") ? decimal.Zero : row.Field<decimal>("act_quantity");
         entity.expQuantity = row.IsNull("exp_quantity") ? decimal.Zero : row.Field<decimal>("exp_quantity");
         entity.orderedQty = row.IsNull("ordered_qty") ? decimal.Zero : row.Field<decimal>("ordered_qty");
         entity.boCount = row.IsNull("bo_count") ? 0 : row.Field<int>("bo_count");
         entity.boQuantity = row.IsNull("bo_quantity") ? decimal.Zero : row.Field<decimal>("bo_quantity");
         entity.specialHandling = row.IsNull("special_handling") ? string.Empty : row.Field<string>("special_handling");
         entity.itemCost = row.IsNull("item_cost") ? decimal.Zero : row.Field<decimal>("item_cost");
         entity.uom = row.IsNull("uom") ? string.Empty : row.Field<string>("uom");
         entity.lot = row.IsNull("lot") ? string.Empty : row.Field<string>("lot");
         entity.comments = row.IsNull("comments") ? string.Empty : row.Field<string>("comments");
         entity.itemDesc = row.IsNull("item_desc") ? string.Empty : row.Field<string>("item_desc");
         entity.poNumber = row.IsNull("po_number") ? string.Empty : row.Field<string>("po_number");
         entity.poSuffix = row.IsNull("po_suffix") ? string.Empty : row.Field<string>("po_suffix");
         entity.poType = row.IsNull("po_type") ? string.Empty : row.Field<string>("po_type");
         entity.poLine = row.IsNull("po_line") ? 0 : row.Field<int>("po_line");
         entity.lineSequence = row.IsNull("line_sequence") ? 0 : row.Field<int>("line_sequence");
         entity.asnFlag = row.Field<bool>("asn_flag");
         entity.packer = row.IsNull("packer") ? string.Empty : row.Field<string>("packer");
         entity.delivery = row.Field<DateTime?>("delivery");
         entity.rtnOrder = row.IsNull("rtn_order") ? string.Empty : row.Field<string>("rtn_order");
         entity.rtnOrderSuffix = row.IsNull("rtn_order_suffix") ? string.Empty : row.Field<string>("rtn_order_suffix");
         entity.retLine = row.IsNull("ret_line") ? 0 : row.Field<int>("ret_line");
         entity.retLineSequence = row.IsNull("ret_line_sequence") ? 0 : row.Field<int>("ret_line_sequence");
         entity.returnFl = row.IsNull("return_fl") ? string.Empty : row.Field<string>("return_fl");
         entity.qtyUnavail = row.IsNull("qty_unavail") ? decimal.Zero : row.Field<decimal>("qty_unavail");
         entity.rdPoType = row.IsNull("rd_po_type") ? string.Empty : row.Field<string>("rd_po_type");
         entity.lineIndicator = row.IsNull("line_indicator") ? string.Empty : row.Field<string>("line_indicator");
         entity.receiverNum = row.IsNull("receiver_num") ? string.Empty : row.Field<string>("receiver_num");
         entity.prodDesc = row.IsNull("prod_desc") ? string.Empty : row.Field<string>("prod_desc");
         entity.packingList = row.Field<bool>("packing_list");
         entity.percentFill = row.IsNull("percent_fill") ? decimal.Zero : row.Field<decimal>("percent_fill");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.rowStatus = row.IsNull("row_status") ? string.Empty : row.Field<string>("row_status");
         entity.stockStat = row.IsNull("stock_stat") ? string.Empty : row.Field<string>("stock_stat");
         entity.caseQuantity = row.IsNull("case_quantity") ? decimal.Zero : row.Field<decimal>("case_quantity");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.rowID = row.Field<byte[]>("rtdetRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromRtdetBase(ref DataRow row, RtdetBase entity)
      {
         row.SetField("rt_id", entity.rtId);
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("line_num", entity.lineNum);
         row.SetField("vendor_id", entity.vendorId);
         row.SetField("abs_num", entity.absNum);
         row.SetField("item_num", entity.itemNum);
         row.SetField("vend_item", entity.vendItem);
         row.SetField("quantity", entity.quantity);
         row.SetField("act_quantity", entity.actQuantity);
         row.SetField("exp_quantity", entity.expQuantity);
         row.SetField("ordered_qty", entity.orderedQty);
         row.SetField("bo_count", entity.boCount);
         row.SetField("bo_quantity", entity.boQuantity);
         row.SetField("special_handling", entity.specialHandling);
         row.SetField("item_cost", entity.itemCost);
         row.SetField("uom", entity.uom);
         row.SetField("lot", entity.lot);
         row.SetField("comments", entity.comments);
         row.SetField("item_desc", entity.itemDesc);
         row.SetField("po_number", entity.poNumber);
         row.SetField("po_suffix", entity.poSuffix);
         row.SetField("po_type", entity.poType);
         row.SetField("po_line", entity.poLine);
         row.SetField("line_sequence", entity.lineSequence);
         row.SetField("asn_flag", entity.asnFlag);
         row.SetField("packer", entity.packer);
         row.SetField("delivery", entity.delivery);
         row.SetField("rtn_order", entity.rtnOrder);
         row.SetField("rtn_order_suffix", entity.rtnOrderSuffix);
         row.SetField("ret_line", entity.retLine);
         row.SetField("ret_line_sequence", entity.retLineSequence);
         row.SetField("return_fl", entity.returnFl);
         row.SetField("qty_unavail", entity.qtyUnavail);
         row.SetField("rd_po_type", entity.rdPoType);
         row.SetField("line_indicator", entity.lineIndicator);
         row.SetField("receiver_num", entity.receiverNum);
         row.SetField("prod_desc", entity.prodDesc);
         row.SetField("packing_list", entity.packingList);
         row.SetField("percent_fill", entity.percentFill);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("row_status", entity.rowStatus);
         row.SetField("stock_stat", entity.stockStat);
         row.SetField("case_quantity", entity.caseQuantity);
         row.SetField("trans_user", entity.transUser);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("rtdetRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, RtdetBase entity)
      {
         row.SetField("rtId", entity.rtId);
         row.SetField("lineNum", entity.lineNum);
         row.SetField("rtdetRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	