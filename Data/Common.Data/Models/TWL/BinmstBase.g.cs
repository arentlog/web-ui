//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// All locations in the warehouse
   /// </summary>
   
   public partial class BinmstBase: ModelBase
   {

      /// <summary>
      /// Company
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string coNum { get; set; }

      /// <summary>
      /// Warehouse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whNum { get; set; }

      /// <summary>
      /// Location Id
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string binNum { get; set; }

      /// <summary>
      /// Warehouse Zone
      /// </summary>
      [StringValidationAttribute]
      public string whZone { get; set; }

      /// <summary>
      /// Aisle
      /// </summary>
      public int aisle { get; set; }

      /// <summary>
      /// Location Type
      /// </summary>
      [StringValidationAttribute]
      public string locType { get; set; }

      /// <summary>
      /// Primary Pick
      /// </summary>
      public bool primPick { get; set; }

      /// <summary>
      /// P.P. Type
      /// </summary>
      [StringValidationAttribute]
      public string primPickType { get; set; }

      /// <summary>
      /// Item Number
      /// </summary>
      [StringValidationAttribute]
      public string absNum { get; set; }

      /// <summary>
      /// Minimum Level
      /// </summary>
      public decimal minLvl { get; set; }

      /// <summary>
      /// Maximum Level
      /// </summary>
      public decimal maxLvl { get; set; }

      /// <summary>
      /// Rep Quantity
      /// </summary>
      public decimal repQty { get; set; }

      /// <summary>
      /// Replenish. Unit
      /// </summary>
      [StringValidationAttribute]
      public string repUnit { get; set; }

      /// <summary>
      /// Maximum Pallets
      /// </summary>
      public int maxPal { get; set; }

      /// <summary>
      /// Maximum Weight
      /// </summary>
      public int maxWeight { get; set; }

      /// <summary>
      /// Height
      /// </summary>
      public int height { get; set; }

      /// <summary>
      /// Width
      /// </summary>
      public int width { get; set; }

      /// <summary>
      /// Depth
      /// </summary>
      public int depth { get; set; }

      /// <summary>
      /// Cube
      /// </summary>
      public decimal cube { get; set; }

      /// <summary>
      /// Pallet Footprint
      /// </summary>
      public int palletFootprint { get; set; }

      /// <summary>
      /// Stacking Height
      /// </summary>
      public int stackHeight { get; set; }

      /// <summary>
      /// Bin Hits
      /// </summary>
      public int binHits { get; set; }

      /// <summary>
      /// Inbound
      /// </summary>
      public bool inboundstgfl { get; set; }

      /// <summary>
      /// Physical
      /// </summary>
      public bool physical { get; set; }

      /// <summary>
      /// ABC
      /// </summary>
      [StringValidationAttribute]
      public string abc { get; set; }

      /// <summary>
      /// Check Quantity
      /// </summary>
      public bool checkQty { get; set; }

      /// <summary>
      /// Last Count
      /// </summary>
      [StringValidationAttribute]
      public string lastCount { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// Active
      /// </summary>
      public bool rowStatus { get; set; }

      /// <summary>
      /// Cycle Flag
      /// </summary>
      public bool cycleFlag { get; set; }

      /// <summary>
      /// Seq.
      /// </summary>
      public int pickSequence { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// ABC_Pend
      /// </summary>
      [StringValidationAttribute]
      public string abcPending { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }

      /// <summary>
      /// Putaway Group
      /// </summary>
      [StringValidationAttribute]
      public string putawayGroup { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildBinmstBaseFromRow<T>(DataRow row) where T:BinmstBase, new()
      {
         T entity = new T();
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.binNum = row.IsNull("bin_num") ? string.Empty : row.Field<string>("bin_num");
         entity.whZone = row.IsNull("wh_zone") ? string.Empty : row.Field<string>("wh_zone");
         entity.aisle = row.IsNull("aisle") ? 0 : row.Field<int>("aisle");
         entity.locType = row.IsNull("loc_type") ? string.Empty : row.Field<string>("loc_type");
         entity.primPick = row.Field<bool>("prim_pick");
         entity.primPickType = row.IsNull("prim_pick_type") ? string.Empty : row.Field<string>("prim_pick_type");
         entity.absNum = row.IsNull("abs_num") ? string.Empty : row.Field<string>("abs_num");
         entity.minLvl = row.IsNull("min_lvl") ? decimal.Zero : row.Field<decimal>("min_lvl");
         entity.maxLvl = row.IsNull("max_lvl") ? decimal.Zero : row.Field<decimal>("max_lvl");
         entity.repQty = row.IsNull("rep_qty") ? decimal.Zero : row.Field<decimal>("rep_qty");
         entity.repUnit = row.IsNull("rep_unit") ? string.Empty : row.Field<string>("rep_unit");
         entity.maxPal = row.IsNull("max_pal") ? 0 : row.Field<int>("max_pal");
         entity.maxWeight = row.IsNull("max_weight") ? 0 : row.Field<int>("max_weight");
         entity.height = row.IsNull("height") ? 0 : row.Field<int>("height");
         entity.width = row.IsNull("width") ? 0 : row.Field<int>("width");
         entity.depth = row.IsNull("depth") ? 0 : row.Field<int>("depth");
         entity.cube = row.IsNull("cube") ? decimal.Zero : row.Field<decimal>("cube");
         entity.palletFootprint = row.IsNull("pallet_footprint") ? 0 : row.Field<int>("pallet_footprint");
         entity.stackHeight = row.IsNull("stack_height") ? 0 : row.Field<int>("stack_height");
         entity.binHits = row.IsNull("bin_hits") ? 0 : row.Field<int>("bin_hits");
         entity.inboundstgfl = row.Field<bool>("inboundstgfl");
         entity.physical = row.Field<bool>("physical");
         entity.abc = row.IsNull("abc") ? string.Empty : row.Field<string>("abc");
         entity.checkQty = row.Field<bool>("check_qty");
         entity.lastCount = row.IsNull("last_count") ? string.Empty : row.Field<string>("last_count");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.rowStatus = row.Field<bool>("row_status");
         entity.cycleFlag = row.Field<bool>("cycle_flag");
         entity.pickSequence = row.IsNull("pick_sequence") ? 0 : row.Field<int>("pick_sequence");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.abcPending = row.IsNull("abc_pending") ? string.Empty : row.Field<string>("abc_pending");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.putawayGroup = row.IsNull("putaway_group") ? string.Empty : row.Field<string>("putaway_group");
         entity.rowID = row.Field<byte[]>("binmstRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromBinmstBase(ref DataRow row, BinmstBase entity)
      {
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("bin_num", entity.binNum);
         row.SetField("wh_zone", entity.whZone);
         row.SetField("aisle", entity.aisle);
         row.SetField("loc_type", entity.locType);
         row.SetField("prim_pick", entity.primPick);
         row.SetField("prim_pick_type", entity.primPickType);
         row.SetField("abs_num", entity.absNum);
         row.SetField("min_lvl", entity.minLvl);
         row.SetField("max_lvl", entity.maxLvl);
         row.SetField("rep_qty", entity.repQty);
         row.SetField("rep_unit", entity.repUnit);
         row.SetField("max_pal", entity.maxPal);
         row.SetField("max_weight", entity.maxWeight);
         row.SetField("height", entity.height);
         row.SetField("width", entity.width);
         row.SetField("depth", entity.depth);
         row.SetField("cube", entity.cube);
         row.SetField("pallet_footprint", entity.palletFootprint);
         row.SetField("stack_height", entity.stackHeight);
         row.SetField("bin_hits", entity.binHits);
         row.SetField("inboundstgfl", entity.inboundstgfl);
         row.SetField("physical", entity.physical);
         row.SetField("abc", entity.abc);
         row.SetField("check_qty", entity.checkQty);
         row.SetField("last_count", entity.lastCount);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("row_status", entity.rowStatus);
         row.SetField("cycle_flag", entity.cycleFlag);
         row.SetField("pick_sequence", entity.pickSequence);
         row.SetField("trans_user", entity.transUser);
         row.SetField("abc_pending", entity.abcPending);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("putaway_group", entity.putawayGroup);
         row.SetField("binmstRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, BinmstBase entity)
      {
         row.SetField("coNum", entity.coNum);
         row.SetField("whNum", entity.whNum);
         row.SetField("binNum", entity.binNum);
         row.SetField("binmstRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	