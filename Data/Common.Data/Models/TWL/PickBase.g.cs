//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// This is used to generate and maintain pick labels
   /// </summary>
   
   public partial class PickBase: ModelBase
   {

      /// <summary>
      /// Pick Id
      /// </summary>
      public int id { get; set; }

      /// <summary>
      /// Company
      /// </summary>
      [StringValidationAttribute]
      public string coNum { get; set; }

      /// <summary>
      /// Warehouse
      /// </summary>
      [StringValidationAttribute]
      public string whNum { get; set; }

      /// <summary>
      /// Label Batch
      /// </summary>
      public int batch { get; set; }

      /// <summary>
      /// Order
      /// </summary>
      [StringValidationAttribute]
      public string order { get; set; }

      /// <summary>
      /// Order Suffix
      /// </summary>
      [StringValidationAttribute]
      public string orderSuffix { get; set; }

      /// <summary>
      /// Line
      /// </summary>
      public int line { get; set; }

      /// <summary>
      /// line_sequence
      /// </summary>
      public int lineSequence { get; set; }

      /// <summary>
      /// Carton ID
      /// </summary>
      [StringValidationAttribute]
      public string cartonId { get; set; }

      /// <summary>
      /// Item Number
      /// </summary>
      [StringValidationAttribute]
      public string absNum { get; set; }

      /// <summary>
      /// Serial Number
      /// </summary>
      [StringValidationAttribute]
      public string serialNum { get; set; }

      /// <summary>
      /// Lot
      /// </summary>
      [StringValidationAttribute]
      public string lot { get; set; }

      /// <summary>
      /// Pick Sequence
      /// </summary>
      public int pickSequence { get; set; }

      /// <summary>
      /// Warehouse Zone
      /// </summary>
      [StringValidationAttribute]
      public string whZone { get; set; }

      /// <summary>
      /// Aisle
      /// </summary>
      public int aisle { get; set; }

      /// <summary>
      /// Location
      /// </summary>
      [StringValidationAttribute]
      public string binNum { get; set; }

      /// <summary>
      /// Quantity
      /// </summary>
      public decimal qty { get; set; }

      /// <summary>
      /// Original Qty
      /// </summary>
      public decimal origQty { get; set; }

      /// <summary>
      /// Pick Requested
      /// </summary>
      [StringValidationAttribute]
      public string dateTime { get; set; }

      /// <summary>
      /// reserved
      /// </summary>
      public bool reserved { get; set; }

      /// <summary>
      /// Printed
      /// </summary>
      public bool printed { get; set; }

      /// <summary>
      /// Pallet/Tote
      /// </summary>
      public int palletNum { get; set; }

      /// <summary>
      /// Pallet Id
      /// </summary>
      [StringValidationAttribute]
      public string palletId { get; set; }

      /// <summary>
      /// Stock Status
      /// </summary>
      [StringValidationAttribute]
      public string stockStat { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [StringValidationAttribute]
      public string pickStatus { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }

      /// <summary>
      /// Pick Seq. 2
      /// </summary>
      public int pickSeq2 { get; set; }

      /// <summary>
      /// Pick Seq. 3
      /// </summary>
      public int pickSeq3 { get; set; }

      /// <summary>
      /// Pick Weight
      /// </summary>
      public decimal weight { get; set; }

      /// <summary>
      /// Alt Whse
      /// </summary>
      [StringValidationAttribute]
      public string altwhse { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [Key,StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildPickBaseFromRow<T>(DataRow row) where T:PickBase, new()
      {
         T entity = new T();
         entity.id = row.IsNull("id") ? 0 : row.Field<int>("id");
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.batch = row.IsNull("batch") ? 0 : row.Field<int>("batch");
         entity.order = row.IsNull("order") ? string.Empty : row.Field<string>("order");
         entity.orderSuffix = row.IsNull("order_suffix") ? string.Empty : row.Field<string>("order_suffix");
         entity.line = row.IsNull("line") ? 0 : row.Field<int>("line");
         entity.lineSequence = row.IsNull("line_sequence") ? 0 : row.Field<int>("line_sequence");
         entity.cartonId = row.IsNull("carton_id") ? string.Empty : row.Field<string>("carton_id");
         entity.absNum = row.IsNull("abs_num") ? string.Empty : row.Field<string>("abs_num");
         entity.serialNum = row.IsNull("serial_num") ? string.Empty : row.Field<string>("serial_num");
         entity.lot = row.IsNull("lot") ? string.Empty : row.Field<string>("lot");
         entity.pickSequence = row.IsNull("pick_sequence") ? 0 : row.Field<int>("pick_sequence");
         entity.whZone = row.IsNull("wh_zone") ? string.Empty : row.Field<string>("wh_zone");
         entity.aisle = row.IsNull("aisle") ? 0 : row.Field<int>("aisle");
         entity.binNum = row.IsNull("bin_num") ? string.Empty : row.Field<string>("bin_num");
         entity.qty = row.IsNull("qty") ? decimal.Zero : row.Field<decimal>("qty");
         entity.origQty = row.IsNull("orig_qty") ? decimal.Zero : row.Field<decimal>("orig_qty");
         entity.dateTime = row.IsNull("date_time") ? string.Empty : row.Field<string>("date_time");
         entity.reserved = row.Field<bool>("reserved");
         entity.printed = row.Field<bool>("printed");
         entity.palletNum = row.IsNull("pallet_num") ? 0 : row.Field<int>("pallet_num");
         entity.palletId = row.IsNull("pallet_id") ? string.Empty : row.Field<string>("pallet_id");
         entity.stockStat = row.IsNull("stock_stat") ? string.Empty : row.Field<string>("stock_stat");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.pickStatus = row.IsNull("pick_status") ? string.Empty : row.Field<string>("pick_status");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.pickSeq2 = row.IsNull("pick_seq2") ? 0 : row.Field<int>("pick_seq2");
         entity.pickSeq3 = row.IsNull("pick_seq3") ? 0 : row.Field<int>("pick_seq3");
         entity.weight = row.IsNull("weight") ? decimal.Zero : row.Field<decimal>("weight");
         entity.altwhse = row.IsNull("altwhse") ? string.Empty : row.Field<string>("altwhse");
         entity.rowID = row.Field<byte[]>("pickRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromPickBase(ref DataRow row, PickBase entity)
      {
         row.SetField("id", entity.id);
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("batch", entity.batch);
         row.SetField("order", entity.order);
         row.SetField("order_suffix", entity.orderSuffix);
         row.SetField("line", entity.line);
         row.SetField("line_sequence", entity.lineSequence);
         row.SetField("carton_id", entity.cartonId);
         row.SetField("abs_num", entity.absNum);
         row.SetField("serial_num", entity.serialNum);
         row.SetField("lot", entity.lot);
         row.SetField("pick_sequence", entity.pickSequence);
         row.SetField("wh_zone", entity.whZone);
         row.SetField("aisle", entity.aisle);
         row.SetField("bin_num", entity.binNum);
         row.SetField("qty", entity.qty);
         row.SetField("orig_qty", entity.origQty);
         row.SetField("date_time", entity.dateTime);
         row.SetField("reserved", entity.reserved);
         row.SetField("printed", entity.printed);
         row.SetField("pallet_num", entity.palletNum);
         row.SetField("pallet_id", entity.palletId);
         row.SetField("stock_stat", entity.stockStat);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("pick_status", entity.pickStatus);
         row.SetField("trans_user", entity.transUser);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("pick_seq2", entity.pickSeq2);
         row.SetField("pick_seq3", entity.pickSeq3);
         row.SetField("weight", entity.weight);
         row.SetField("altwhse", entity.altwhse);
         row.SetField("pickRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, PickBase entity)
      {
         row.SetField("pickRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	