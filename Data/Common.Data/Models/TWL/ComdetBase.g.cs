//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// Contains detail record information for each of the record formats used by the interface
   /// </summary>
   
   public partial class ComdetBase: ModelBase
   {

      /// <summary>
      /// Record Type
      /// </summary>
      [StringValidationAttribute]
      public string recordType { get; set; }

      /// <summary>
      /// version
      /// </summary>
      [StringValidationAttribute]
      public string version { get; set; }

      /// <summary>
      /// Field Name
      /// </summary>
      [StringValidationAttribute]
      public string fieldName { get; set; }

      /// <summary>
      /// Starting Position
      /// </summary>
      public int fieldStart { get; set; }

      /// <summary>
      /// field_position
      /// </summary>
      public int fieldPosition { get; set; }

      /// <summary>
      /// Field Length
      /// </summary>
      public int fieldLength { get; set; }

      /// <summary>
      /// active
      /// </summary>
      public bool active { get; set; }

      /// <summary>
      /// Procedure Name
      /// </summary>
      [StringValidationAttribute]
      public string procedureName { get; set; }

      /// <summary>
      /// add_in_reply
      /// </summary>
      public bool addInReply { get; set; }

      /// <summary>
      /// Data Type
      /// </summary>
      [StringValidationAttribute]
      public string dataType { get; set; }

      /// <summary>
      /// validate
      /// </summary>
      public bool validate { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [Key,StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildComdetBaseFromRow<T>(DataRow row) where T:ComdetBase, new()
      {
         T entity = new T();
         entity.recordType = row.IsNull("record_type") ? string.Empty : row.Field<string>("record_type");
         entity.version = row.IsNull("version") ? string.Empty : row.Field<string>("version");
         entity.fieldName = row.IsNull("field_name") ? string.Empty : row.Field<string>("field_name");
         entity.fieldStart = row.IsNull("field_start") ? 0 : row.Field<int>("field_start");
         entity.fieldPosition = row.IsNull("field_position") ? 0 : row.Field<int>("field_position");
         entity.fieldLength = row.IsNull("field_length") ? 0 : row.Field<int>("field_length");
         entity.active = row.Field<bool>("active");
         entity.procedureName = row.IsNull("procedure_name") ? string.Empty : row.Field<string>("procedure_name");
         entity.addInReply = row.Field<bool>("add_in_reply");
         entity.dataType = row.IsNull("data_type") ? string.Empty : row.Field<string>("data_type");
         entity.validate = row.Field<bool>("validate");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.rowID = row.Field<byte[]>("comdetRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromComdetBase(ref DataRow row, ComdetBase entity)
      {
         row.SetField("record_type", entity.recordType);
         row.SetField("version", entity.version);
         row.SetField("field_name", entity.fieldName);
         row.SetField("field_start", entity.fieldStart);
         row.SetField("field_position", entity.fieldPosition);
         row.SetField("field_length", entity.fieldLength);
         row.SetField("active", entity.active);
         row.SetField("procedure_name", entity.procedureName);
         row.SetField("add_in_reply", entity.addInReply);
         row.SetField("data_type", entity.dataType);
         row.SetField("validate", entity.validate);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("trans_user", entity.transUser);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("comdetRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, ComdetBase entity)
      {
         row.SetField("comdetRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	