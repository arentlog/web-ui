//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.TWL
{
   /// <summary>
   /// Holds the history of an item (receipts, adjustments, shipments, returns) for trending
   /// </summary>
   
   public partial class ItemHistoryBase: ModelBase
   {

      /// <summary>
      /// Company
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string coNum { get; set; }

      /// <summary>
      /// Warehouse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whNum { get; set; }

      /// <summary>
      /// Record Date
      /// </summary>
      [Key,Order]
      public DateTime? recDate { get; set; }

      /// <summary>
      /// Record Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string recType { get; set; }

      /// <summary>
      /// Stock Status
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string stockStat { get; set; }

      /// <summary>
      /// Item Number
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string absNum { get; set; }

      /// <summary>
      /// Lot
      /// </summary>
      [StringValidationAttribute]
      public string lot { get; set; }

      /// <summary>
      /// Starting Balance
      /// </summary>
      public decimal startBal { get; set; }

      /// <summary>
      /// Receipts
      /// </summary>
      public decimal receipts { get; set; }

      /// <summary>
      /// Returns
      /// </summary>
      public decimal returns { get; set; }

      /// <summary>
      /// Adjustments
      /// </summary>
      public decimal adjustments { get; set; }

      /// <summary>
      /// Shipments
      /// </summary>
      public decimal shipments { get; set; }

      /// <summary>
      /// Shipments Unsent
      /// </summary>
      public decimal shipmentsUnsent { get; set; }

      /// <summary>
      /// End Balance
      /// </summary>
      public decimal endBal { get; set; }

      /// <summary>
      /// Record ID
      /// </summary>
      public int recId { get; set; }

      /// <summary>
      /// custom_data1
      /// </summary>
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }

      /// <summary>
      /// trans_user
      /// </summary>
      [StringValidationAttribute]
      public string transUser { get; set; }

      /// <summary>
      /// trans_date
      /// </summary>
      [StringValidationAttribute]
      public string transDate { get; set; }

      /// <summary>
      /// trans_proc
      /// </summary>
      [StringValidationAttribute]
      public string transProc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildItemHistoryBaseFromRow<T>(DataRow row) where T:ItemHistoryBase, new()
      {
         T entity = new T();
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.recDate = row.Field<DateTime?>("rec_date");
         entity.recType = row.IsNull("rec_type") ? string.Empty : row.Field<string>("rec_type");
         entity.stockStat = row.IsNull("stock_stat") ? string.Empty : row.Field<string>("stock_stat");
         entity.absNum = row.IsNull("abs_num") ? string.Empty : row.Field<string>("abs_num");
         entity.lot = row.IsNull("lot") ? string.Empty : row.Field<string>("lot");
         entity.startBal = row.IsNull("start_bal") ? decimal.Zero : row.Field<decimal>("start_bal");
         entity.receipts = row.IsNull("receipts") ? decimal.Zero : row.Field<decimal>("receipts");
         entity.returns = row.IsNull("returns") ? decimal.Zero : row.Field<decimal>("returns");
         entity.adjustments = row.IsNull("adjustments") ? decimal.Zero : row.Field<decimal>("adjustments");
         entity.shipments = row.IsNull("shipments") ? decimal.Zero : row.Field<decimal>("shipments");
         entity.shipmentsUnsent = row.IsNull("shipments_unsent") ? decimal.Zero : row.Field<decimal>("shipments_unsent");
         entity.endBal = row.IsNull("end_bal") ? decimal.Zero : row.Field<decimal>("end_bal");
         entity.recId = row.IsNull("rec_id") ? 0 : row.Field<int>("rec_id");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.rowID = row.Field<byte[]>("item_historyRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromItemHistoryBase(ref DataRow row, ItemHistoryBase entity)
      {
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("rec_date", entity.recDate);
         row.SetField("rec_type", entity.recType);
         row.SetField("stock_stat", entity.stockStat);
         row.SetField("abs_num", entity.absNum);
         row.SetField("lot", entity.lot);
         row.SetField("start_bal", entity.startBal);
         row.SetField("receipts", entity.receipts);
         row.SetField("returns", entity.returns);
         row.SetField("adjustments", entity.adjustments);
         row.SetField("shipments", entity.shipments);
         row.SetField("shipments_unsent", entity.shipmentsUnsent);
         row.SetField("end_bal", entity.endBal);
         row.SetField("rec_id", entity.recId);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("trans_user", entity.transUser);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("item_historyRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, ItemHistoryBase entity)
      {
         row.SetField("coNum", entity.coNum);
         row.SetField("whNum", entity.whNum);
         row.SetField("recDate", entity.recDate);
         row.SetField("recType", entity.recType);
         row.SetField("stockStat", entity.stockStat);
         row.SetField("absNum", entity.absNum);
         row.SetField("item_historyRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	