//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.CM
{
   /// <summary>
   /// R&D (C/M Proposal)
   /// </summary>
   
   public partial class CmsqBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Prospect #
      /// </summary>
      [Key,Order]
      public decimal prosno { get; set; }

      /// <summary>
      /// Proposal #
      /// </summary>
      [Key,Order]
      public decimal proposalno { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string description { get; set; }

      /// <summary>
      /// Proposal
      /// </summary>
      public DateTime? proposaldt { get; set; }

      /// <summary>
      /// Sale Amt
      /// </summary>
      public decimal estsaleamt { get; set; }

      /// <summary>
      /// Margin
      /// </summary>
      public decimal estmarginamt { get; set; }

      /// <summary>
      /// Early Close
      /// </summary>
      public DateTime? estearlycldt { get; set; }

      /// <summary>
      /// Late Close
      /// </summary>
      public DateTime? estlatecldt { get; set; }

      /// <summary>
      /// Actual Close
      /// </summary>
      public DateTime? closedt { get; set; }

      /// <summary>
      /// % Early
      /// </summary>
      public decimal earlyclpct { get; set; }

      /// <summary>
      /// % Late
      /// </summary>
      public decimal lateclpct { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [StringValidationAttribute]
      public string statuscd { get; set; }

      /// <summary>
      /// Lost Bus
      /// </summary>
      [StringValidationAttribute]
      public string lostbusty { get; set; }

      /// <summary>
      /// orderno
      /// </summary>
      public int orderno { get; set; }

      /// <summary>
      /// Order Suffix
      /// </summary>
      public int ordersuf { get; set; }

      /// <summary>
      /// Comment
      /// </summary>
      [StringValidationAttribute]
      public string comment { get; set; }

      /// <summary>
      /// Competition
      /// </summary>
      [StringValidationAttribute]
      public string competition { get; set; }

      /// <summary>
      /// Campaign
      /// </summary>
      [StringValidationAttribute]
      public string campaigncd { get; set; }

      /// <summary>
      /// Stage
      /// </summary>
      [StringValidationAttribute]
      public string stage { get; set; }

      /// <summary>
      /// Notes
      /// </summary>
      [StringValidationAttribute]
      public string notesfl { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Salesrep
      /// </summary>
      [StringValidationAttribute]
      public string slsrep { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildCmsqBaseFromRow<T>(DataRow row) where T:CmsqBase, new()
      {
         T entity = new T();
         entity.prosno = row.IsNull("prosno") ? decimal.Zero : row.Field<decimal>("prosno");
         entity.proposalno = row.IsNull("proposalno") ? decimal.Zero : row.Field<decimal>("proposalno");
         entity.description = row.IsNull("description") ? string.Empty : row.Field<string>("description");
         entity.proposaldt = row.Field<DateTime?>("proposaldt");
         entity.estsaleamt = row.IsNull("estsaleamt") ? decimal.Zero : row.Field<decimal>("estsaleamt");
         entity.estmarginamt = row.IsNull("estmarginamt") ? decimal.Zero : row.Field<decimal>("estmarginamt");
         entity.estearlycldt = row.Field<DateTime?>("estearlycldt");
         entity.estlatecldt = row.Field<DateTime?>("estlatecldt");
         entity.closedt = row.Field<DateTime?>("closedt");
         entity.earlyclpct = row.IsNull("earlyclpct") ? decimal.Zero : row.Field<decimal>("earlyclpct");
         entity.lateclpct = row.IsNull("lateclpct") ? decimal.Zero : row.Field<decimal>("lateclpct");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.statuscd = row.IsNull("statuscd") ? string.Empty : row.Field<string>("statuscd");
         entity.lostbusty = row.IsNull("lostbusty") ? string.Empty : row.Field<string>("lostbusty");
         entity.orderno = row.IsNull("orderno") ? 0 : row.Field<int>("orderno");
         entity.ordersuf = row.IsNull("ordersuf") ? 0 : row.Field<int>("ordersuf");
         entity.comment = row.IsNull("comment") ? string.Empty : row.Field<string>("comment");
         entity.competition = row.IsNull("competition") ? string.Empty : row.Field<string>("competition");
         entity.campaigncd = row.IsNull("campaigncd") ? string.Empty : row.Field<string>("campaigncd");
         entity.stage = row.IsNull("stage") ? string.Empty : row.Field<string>("stage");
         entity.notesfl = row.IsNull("notesfl") ? string.Empty : row.Field<string>("notesfl");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.slsrep = row.IsNull("slsrep") ? string.Empty : row.Field<string>("slsrep");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("cmsqRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromCmsqBase(ref DataRow row, CmsqBase entity)
      {
         row.SetField("prosno", entity.prosno);
         row.SetField("proposalno", entity.proposalno);
         row.SetField("description", entity.description);
         row.SetField("proposaldt", entity.proposaldt);
         row.SetField("estsaleamt", entity.estsaleamt);
         row.SetField("estmarginamt", entity.estmarginamt);
         row.SetField("estearlycldt", entity.estearlycldt);
         row.SetField("estlatecldt", entity.estlatecldt);
         row.SetField("closedt", entity.closedt);
         row.SetField("earlyclpct", entity.earlyclpct);
         row.SetField("lateclpct", entity.lateclpct);
         row.SetField("prod", entity.prod);
         row.SetField("statuscd", entity.statuscd);
         row.SetField("lostbusty", entity.lostbusty);
         row.SetField("orderno", entity.orderno);
         row.SetField("ordersuf", entity.ordersuf);
         row.SetField("comment", entity.comment);
         row.SetField("competition", entity.competition);
         row.SetField("campaigncd", entity.campaigncd);
         row.SetField("stage", entity.stage);
         row.SetField("notesfl", entity.notesfl);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("slsrep", entity.slsrep);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("cmsqRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, CmsqBase entity)
      {
         row.SetField("prosno", entity.prosno);
         row.SetField("proposalno", entity.proposalno);
         row.SetField("cmsqRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	