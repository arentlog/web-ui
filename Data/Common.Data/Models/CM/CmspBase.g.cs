//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.CM
{
   /// <summary>
   /// R&D (C/M profiles)
   /// </summary>
   
   public partial class CmspBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Prospect #
      /// </summary>
      [Key,Order]
      public decimal prosno { get; set; }

      /// <summary>
      /// Name
      /// </summary>
      [StringValidationAttribute]
      public string name { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr1 { get; set; }
      [StringValidationAttribute]
      public string addr2 { get; set; }

      /// <summary>
      /// City
      /// </summary>
      [StringValidationAttribute]
      public string city { get; set; }

      /// <summary>
      /// State
      /// </summary>
      [StringValidationAttribute]
      public string state { get; set; }

      /// <summary>
      /// Zip Code
      /// </summary>
      [StringValidationAttribute]
      public string zipcd { get; set; }

      /// <summary>
      /// Country
      /// </summary>
      [StringValidationAttribute]
      public string country { get; set; }

      /// <summary>
      /// Salesrep
      /// </summary>
      [StringValidationAttribute]
      public string slsrep { get; set; }

      /// <summary>
      /// Phone
      /// </summary>
      [StringValidationAttribute]
      public string phoneno { get; set; }

      /// <summary>
      /// Fax Phone
      /// </summary>
      [StringValidationAttribute]
      public string faxphoneno { get; set; }

      /// <summary>
      /// Number
      /// </summary>
      public int contactfreq { get; set; }

      /// <summary>
      /// Frequency
      /// </summary>
      [StringValidationAttribute]
      public string freqtype { get; set; }

      /// <summary>
      /// Last Contact
      /// </summary>
      public DateTime? lastcontdt { get; set; }

      /// <summary>
      /// Last Contact
      /// </summary>
      [StringValidationAttribute]
      public string lastconttm { get; set; }

      /// <summary>
      /// Next Contact
      /// </summary>
      public DateTime? nextcontdt { get; set; }

      /// <summary>
      /// Next Contact
      /// </summary>
      [StringValidationAttribute]
      public string nextconttm { get; set; }

      /// <summary>
      /// Type
      /// </summary>
      [StringValidationAttribute]
      public string prostype { get; set; }

      /// <summary>
      /// Size
      /// </summary>
      [StringValidationAttribute]
      public string cosize { get; set; }

      /// <summary>
      /// NAICS Codes
      /// </summary>
      public int siccd1 { get; set; }
      public int siccd2 { get; set; }
      public int siccd3 { get; set; }

      /// <summary>
      /// Rating
      /// </summary>
      [StringValidationAttribute]
      public string rating { get; set; }

      /// <summary>
      /// Stage
      /// </summary>
      [StringValidationAttribute]
      public string stage { get; set; }

      /// <summary>
      /// Comment
      /// </summary>
      [StringValidationAttribute]
      public string comment { get; set; }

      /// <summary>
      /// Competition
      /// </summary>
      [StringValidationAttribute]
      public string competition { get; set; }

      /// <summary>
      /// Best
      /// </summary>
      [StringValidationAttribute]
      public string bestcall { get; set; }

      /// <summary>
      /// Source
      /// </summary>
      [StringValidationAttribute]
      public string sourcepros { get; set; }

      /// <summary>
      /// Customer #
      /// </summary>
      public decimal custno { get; set; }

      /// <summary>
      /// Co#/Cust#
      /// </summary>
      public int conoul { get; set; }

      /// <summary>
      /// Usercd
      /// </summary>
      [StringValidationAttribute]
      public string usercd1 { get; set; }
      [StringValidationAttribute]
      public string usercd2 { get; set; }

      /// <summary>
      /// Usertype
      /// </summary>
      [StringValidationAttribute]
      public string usertype1 { get; set; }
      [StringValidationAttribute]
      public string usertype2 { get; set; }

      /// <summary>
      /// Notes
      /// </summary>
      [StringValidationAttribute]
      public string notesfl { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Default Code
      /// </summary>
      [StringValidationAttribute]
      public string autoactcd { get; set; }

      /// <summary>
      /// newrec
      /// </summary>
      public bool newrec { get; set; }

      /// <summary>
      /// Inside Slsrep
      /// </summary>
      [StringValidationAttribute]
      public string inslsrep { get; set; }

      /// <summary>
      /// SPC Default
      /// </summary>
      [StringValidationAttribute]
      public string spcdefaultty { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Elec. Proposal Type
      /// </summary>
      [StringValidationAttribute]
      public string eproptype { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr3 { get; set; }

      /// <summary>
      /// Sync To CRM
      /// </summary>
      public bool synccrmfl { get; set; }

      /// <summary>
      /// Synchronize to MDD
      /// </summary>
      public bool syncmddfl { get; set; }

      /// <summary>
      /// Row Pointer
      /// </summary>
      [StringValidationAttribute]
      public string rowpointer { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }


      /// <summary>
      /// string
      /// </summary>
      public string CompleteAddress { get { return this.addr1 + "," + this.city + "," + this.state + "," + this.zipcd + "," + this.country; } }


      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildCmspBaseFromRow<T>(DataRow row) where T:CmspBase, new()
      {
         T entity = new T();
         entity.prosno = row.IsNull("prosno") ? decimal.Zero : row.Field<decimal>("prosno");
         entity.name = row.IsNull("name") ? string.Empty : row.Field<string>("name");
         entity.addr1 = row.IsNull("addr1") ? string.Empty : row.Field<string>("addr1");
         entity.addr2 = row.IsNull("addr2") ? string.Empty : row.Field<string>("addr2");
         entity.city = row.IsNull("city") ? string.Empty : row.Field<string>("city");
         entity.state = row.IsNull("state") ? string.Empty : row.Field<string>("state");
         entity.zipcd = row.IsNull("zipcd") ? string.Empty : row.Field<string>("zipcd");
         entity.country = row.IsNull("country") ? string.Empty : row.Field<string>("country");
         entity.slsrep = row.IsNull("slsrep") ? string.Empty : row.Field<string>("slsrep");
         entity.phoneno = row.IsNull("phoneno") ? string.Empty : row.Field<string>("phoneno");
         entity.faxphoneno = row.IsNull("faxphoneno") ? string.Empty : row.Field<string>("faxphoneno");
         entity.contactfreq = row.IsNull("contactfreq") ? 0 : row.Field<int>("contactfreq");
         entity.freqtype = row.IsNull("freqtype") ? string.Empty : row.Field<string>("freqtype");
         entity.lastcontdt = row.Field<DateTime?>("lastcontdt");
         entity.lastconttm = row.IsNull("lastconttm") ? string.Empty : row.Field<string>("lastconttm");
         entity.nextcontdt = row.Field<DateTime?>("nextcontdt");
         entity.nextconttm = row.IsNull("nextconttm") ? string.Empty : row.Field<string>("nextconttm");
         entity.prostype = row.IsNull("prostype") ? string.Empty : row.Field<string>("prostype");
         entity.cosize = row.IsNull("cosize") ? string.Empty : row.Field<string>("cosize");
         entity.siccd1 = row.IsNull("siccd1") ? 0 : row.Field<int>("siccd1");
         entity.siccd2 = row.IsNull("siccd2") ? 0 : row.Field<int>("siccd2");
         entity.siccd3 = row.IsNull("siccd3") ? 0 : row.Field<int>("siccd3");
         entity.rating = row.IsNull("rating") ? string.Empty : row.Field<string>("rating");
         entity.stage = row.IsNull("stage") ? string.Empty : row.Field<string>("stage");
         entity.comment = row.IsNull("comment") ? string.Empty : row.Field<string>("comment");
         entity.competition = row.IsNull("competition") ? string.Empty : row.Field<string>("competition");
         entity.bestcall = row.IsNull("bestcall") ? string.Empty : row.Field<string>("bestcall");
         entity.sourcepros = row.IsNull("sourcepros") ? string.Empty : row.Field<string>("sourcepros");
         entity.custno = row.IsNull("custno") ? decimal.Zero : row.Field<decimal>("custno");
         entity.conoul = row.IsNull("conoul") ? 0 : row.Field<int>("conoul");
         entity.usercd1 = row.IsNull("usercd1") ? string.Empty : row.Field<string>("usercd1");
         entity.usercd2 = row.IsNull("usercd2") ? string.Empty : row.Field<string>("usercd2");
         entity.usertype1 = row.IsNull("usertype1") ? string.Empty : row.Field<string>("usertype1");
         entity.usertype2 = row.IsNull("usertype2") ? string.Empty : row.Field<string>("usertype2");
         entity.notesfl = row.IsNull("notesfl") ? string.Empty : row.Field<string>("notesfl");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.autoactcd = row.IsNull("autoactcd") ? string.Empty : row.Field<string>("autoactcd");
         entity.newrec = row.Field<bool>("newrec");
         entity.inslsrep = row.IsNull("inslsrep") ? string.Empty : row.Field<string>("inslsrep");
         entity.spcdefaultty = row.IsNull("spcdefaultty") ? string.Empty : row.Field<string>("spcdefaultty");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.eproptype = row.IsNull("eproptype") ? string.Empty : row.Field<string>("eproptype");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.addr3 = row.IsNull("addr3") ? string.Empty : row.Field<string>("addr3");
         entity.synccrmfl = row.Field<bool>("synccrmfl");
         entity.syncmddfl = row.Field<bool>("syncmddfl");
         entity.rowpointer = row.IsNull("rowpointer") ? string.Empty : row.Field<string>("rowpointer");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.rowID = row.Field<byte[]>("cmspRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromCmspBase(ref DataRow row, CmspBase entity)
      {
         row.SetField("prosno", entity.prosno);
         row.SetField("name", entity.name);
         row.SetField("addr1", entity.addr1);
         row.SetField("addr2", entity.addr2);
         row.SetField("city", entity.city);
         row.SetField("state", entity.state);
         row.SetField("zipcd", entity.zipcd);
         row.SetField("country", entity.country);
         row.SetField("slsrep", entity.slsrep);
         row.SetField("phoneno", entity.phoneno);
         row.SetField("faxphoneno", entity.faxphoneno);
         row.SetField("contactfreq", entity.contactfreq);
         row.SetField("freqtype", entity.freqtype);
         row.SetField("lastcontdt", entity.lastcontdt);
         row.SetField("lastconttm", entity.lastconttm);
         row.SetField("nextcontdt", entity.nextcontdt);
         row.SetField("nextconttm", entity.nextconttm);
         row.SetField("prostype", entity.prostype);
         row.SetField("cosize", entity.cosize);
         row.SetField("siccd1", entity.siccd1);
         row.SetField("siccd2", entity.siccd2);
         row.SetField("siccd3", entity.siccd3);
         row.SetField("rating", entity.rating);
         row.SetField("stage", entity.stage);
         row.SetField("comment", entity.comment);
         row.SetField("competition", entity.competition);
         row.SetField("bestcall", entity.bestcall);
         row.SetField("sourcepros", entity.sourcepros);
         row.SetField("custno", entity.custno);
         row.SetField("conoul", entity.conoul);
         row.SetField("usercd1", entity.usercd1);
         row.SetField("usercd2", entity.usercd2);
         row.SetField("usertype1", entity.usertype1);
         row.SetField("usertype2", entity.usertype2);
         row.SetField("notesfl", entity.notesfl);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("autoactcd", entity.autoactcd);
         row.SetField("newrec", entity.newrec);
         row.SetField("inslsrep", entity.inslsrep);
         row.SetField("spcdefaultty", entity.spcdefaultty);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("eproptype", entity.eproptype);
         row.SetField("transproc", entity.transproc);
         row.SetField("addr3", entity.addr3);
         row.SetField("synccrmfl", entity.synccrmfl);
         row.SetField("syncmddfl", entity.syncmddfl);
         row.SetField("rowpointer", entity.rowpointer);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("cmspRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, CmspBase entity)
      {
         row.SetField("prosno", entity.prosno);
         row.SetField("cmspRowID", entity.rowID.ToByteArray());
         row.SetField("rowpointer", entity.rowpointer);

      }   
   }
}
#pragma warning restore 1591
	