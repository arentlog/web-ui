//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.WM
{
   /// <summary>
   /// Warehouse Manager, Product by Bin
   /// </summary>
   
   public partial class WmsbpBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Default Whse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Bin Loc #1
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string binloc { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// On Hand
      /// </summary>
      public decimal qtyonhand { get; set; }

      /// <summary>
      /// Committed
      /// </summary>
      public decimal qtycommitted { get; set; }

      /// <summary>
      /// Received
      /// </summary>
      public decimal qtyreceived { get; set; }

      /// <summary>
      /// First Stored
      /// </summary>
      public DateTime? fstoredt { get; set; }

      /// <summary>
      /// Last Stored
      /// </summary>
      public DateTime? lstoredt { get; set; }

      /// <summary>
      /// Last Picked
      /// </summary>
      public DateTime? lpickdt { get; set; }

      /// <summary>
      /// Trans Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Trans Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Operator
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// Minimum
      /// </summary>
      public decimal minqty { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// Maximum
      /// </summary>
      public decimal maxqty { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// # Times - Stored
      /// </summary>
      public int tmstored { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// Picked
      /// </summary>
      public int tmpicked { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildWmsbpBaseFromRow<T>(DataRow row) where T:WmsbpBase, new()
      {
         T entity = new T();
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.binloc = row.IsNull("binloc") ? string.Empty : row.Field<string>("binloc");
         entity.qtyonhand = row.IsNull("qtyonhand") ? decimal.Zero : row.Field<decimal>("qtyonhand");
         entity.qtycommitted = row.IsNull("qtycommitted") ? decimal.Zero : row.Field<decimal>("qtycommitted");
         entity.qtyreceived = row.IsNull("qtyreceived") ? decimal.Zero : row.Field<decimal>("qtyreceived");
         entity.fstoredt = row.Field<DateTime?>("fstoredt");
         entity.lstoredt = row.Field<DateTime?>("lstoredt");
         entity.lpickdt = row.Field<DateTime?>("lpickdt");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.minqty = row.IsNull("minqty") ? decimal.Zero : row.Field<decimal>("minqty");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.maxqty = row.IsNull("maxqty") ? decimal.Zero : row.Field<decimal>("maxqty");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.tmstored = row.IsNull("tmstored") ? 0 : row.Field<int>("tmstored");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.tmpicked = row.IsNull("tmpicked") ? 0 : row.Field<int>("tmpicked");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("wmsbpRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromWmsbpBase(ref DataRow row, WmsbpBase entity)
      {
         row.SetField("whse", entity.whse);
         row.SetField("binloc", entity.binloc);
         row.SetField("qtyonhand", entity.qtyonhand);
         row.SetField("qtycommitted", entity.qtycommitted);
         row.SetField("qtyreceived", entity.qtyreceived);
         row.SetField("fstoredt", entity.fstoredt);
         row.SetField("lstoredt", entity.lstoredt);
         row.SetField("lpickdt", entity.lpickdt);
         row.SetField("prod", entity.prod);
         row.SetField("cono", entity.cono);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("minqty", entity.minqty);
         row.SetField("user2", entity.user2);
         row.SetField("maxqty", entity.maxqty);
         row.SetField("user3", entity.user3);
         row.SetField("tmstored", entity.tmstored);
         row.SetField("user4", entity.user4);
         row.SetField("tmpicked", entity.tmpicked);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("wmsbpRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, WmsbpBase entity)
      {
         row.SetField("whse", entity.whse);
         row.SetField("binloc", entity.binloc);
         row.SetField("prod", entity.prod);
         row.SetField("cono", entity.cono);
         row.SetField("wmsbpRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	