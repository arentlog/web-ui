//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SL
{
   /// <summary>
   /// Supplier Link History
   /// </summary>
   
   public partial class SlehBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Import Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string imptype { get; set; }

      /// <summary>
      /// Update #
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string slupdtno { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Seq#
      /// </summary>
      [Key,Order]
      public int seqno { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [Key,Order]
      public bool statustype { get; set; }

      /// <summary>
      /// G/L Credit $
      /// </summary>
      public decimal amountcr { get; set; }

      /// <summary>
      /// G/L Debit $
      /// </summary>
      public decimal amountdr { get; set; }

      /// <summary>
      /// Issue Date
      /// </summary>
      public DateTime? issuedt { get; set; }

      /// <summary>
      /// Jrnl #
      /// </summary>
      public int jrnlno { get; set; }

      /// <summary>
      /// # Added
      /// </summary>
      public int noadded { get; set; }

      /// <summary>
      /// Part # Changes
      /// </summary>
      public int nochanged { get; set; }

      /// <summary>
      /// # Price Decreases
      /// </summary>
      public int nodecreases { get; set; }

      /// <summary>
      /// # Deleted
      /// </summary>
      public int nodeleted { get; set; }

      /// <summary>
      /// # Discontinued
      /// </summary>
      public int nodiscontinued { get; set; }

      /// <summary>
      /// # of Errors
      /// </summary>
      public int noerrors { get; set; }

      /// <summary>
      /// # Price Increases
      /// </summary>
      public int noincreases { get; set; }

      /// <summary>
      /// # Reviewed
      /// </summary>
      public int noreviews { get; set; }

      /// <summary>
      /// # of Revisions
      /// </summary>
      public int norevisions { get; set; }

      /// <summary>
      /// # Unlisted
      /// </summary>
      public int nounlisted { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Calendar Period
      /// </summary>
      public int percal { get; set; }

      /// <summary>
      /// Fiscal Period
      /// </summary>
      public int perfisc { get; set; }

      /// <summary>
      /// Date Read
      /// </summary>
      public DateTime? readdt { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Date Updated
      /// </summary>
      public DateTime? updatedt { get; set; }

      /// <summary>
      /// Report Date
      /// </summary>
      public DateTime? reportdt { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      public int setno { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSlehBaseFromRow<T>(DataRow row) where T:SlehBase, new()
      {
         T entity = new T();
         entity.amountcr = row.IsNull("amountcr") ? decimal.Zero : row.Field<decimal>("amountcr");
         entity.amountdr = row.IsNull("amountdr") ? decimal.Zero : row.Field<decimal>("amountdr");
         entity.imptype = row.IsNull("imptype") ? string.Empty : row.Field<string>("imptype");
         entity.issuedt = row.Field<DateTime?>("issuedt");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.noadded = row.IsNull("noadded") ? 0 : row.Field<int>("noadded");
         entity.nochanged = row.IsNull("nochanged") ? 0 : row.Field<int>("nochanged");
         entity.nodecreases = row.IsNull("nodecreases") ? 0 : row.Field<int>("nodecreases");
         entity.nodeleted = row.IsNull("nodeleted") ? 0 : row.Field<int>("nodeleted");
         entity.nodiscontinued = row.IsNull("nodiscontinued") ? 0 : row.Field<int>("nodiscontinued");
         entity.noerrors = row.IsNull("noerrors") ? 0 : row.Field<int>("noerrors");
         entity.noincreases = row.IsNull("noincreases") ? 0 : row.Field<int>("noincreases");
         entity.noreviews = row.IsNull("noreviews") ? 0 : row.Field<int>("noreviews");
         entity.norevisions = row.IsNull("norevisions") ? 0 : row.Field<int>("norevisions");
         entity.nounlisted = row.IsNull("nounlisted") ? 0 : row.Field<int>("nounlisted");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.percal = row.IsNull("percal") ? 0 : row.Field<int>("percal");
         entity.perfisc = row.IsNull("perfisc") ? 0 : row.Field<int>("perfisc");
         entity.slupdtno = row.IsNull("slupdtno") ? string.Empty : row.Field<string>("slupdtno");
         entity.readdt = row.Field<DateTime?>("readdt");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.updatedt = row.Field<DateTime?>("updatedt");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.reportdt = row.Field<DateTime?>("reportdt");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.statustype = row.Field<bool>("statustype");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("slehRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSlehBase(ref DataRow row, SlehBase entity)
      {
         row.SetField("amountcr", entity.amountcr);
         row.SetField("amountdr", entity.amountdr);
         row.SetField("imptype", entity.imptype);
         row.SetField("issuedt", entity.issuedt);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("noadded", entity.noadded);
         row.SetField("nochanged", entity.nochanged);
         row.SetField("nodecreases", entity.nodecreases);
         row.SetField("nodeleted", entity.nodeleted);
         row.SetField("nodiscontinued", entity.nodiscontinued);
         row.SetField("noerrors", entity.noerrors);
         row.SetField("noincreases", entity.noincreases);
         row.SetField("noreviews", entity.noreviews);
         row.SetField("norevisions", entity.norevisions);
         row.SetField("nounlisted", entity.nounlisted);
         row.SetField("operinit", entity.operinit);
         row.SetField("percal", entity.percal);
         row.SetField("perfisc", entity.perfisc);
         row.SetField("slupdtno", entity.slupdtno);
         row.SetField("readdt", entity.readdt);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("updatedt", entity.updatedt);
         row.SetField("cono", entity.cono);
         row.SetField("reportdt", entity.reportdt);
         row.SetField("seqno", entity.seqno);
         row.SetField("statustype", entity.statustype);
         row.SetField("setno", entity.setno);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("slehRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SlehBase entity)
      {
         row.SetField("imptype", entity.imptype);
         row.SetField("slupdtno", entity.slupdtno);
         row.SetField("cono", entity.cono);
         row.SetField("seqno", entity.seqno);
         row.SetField("statustype", entity.statustype);
         row.SetField("slehRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	