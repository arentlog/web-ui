//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.VA
{
   /// <summary>
   /// Value Add Entry Transaction Sections - Line Items
   /// </summary>
   
   public partial class VaeslBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Va Order#
      /// </summary>
      [Key,Order]
      public int vano { get; set; }

      /// <summary>
      /// VA Order Suffix
      /// </summary>
      [Key,Order]
      public int vasuf { get; set; }

      /// <summary>
      /// Seq#
      /// </summary>
      [Key,Order]
      public int seqno { get; set; }

      /// <summary>
      /// Line#
      /// </summary>
      [Key,Order]
      public int lineno { get; set; }

      /// <summary>
      /// Non Stock
      /// </summary>
      [StringValidationAttribute]
      public string nonstockty { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [StringValidationAttribute]
      public string shipprod { get; set; }

      /// <summary>
      /// Units
      /// </summary>
      [StringValidationAttribute]
      public string unit { get; set; }

      /// <summary>
      /// # Stk Units
      /// </summary>
      public decimal unitconv { get; set; }

      /// <summary>
      /// Qty Needed
      /// </summary>
      public decimal qtyneeded { get; set; }

      /// <summary>
      /// Ordered
      /// </summary>
      public decimal qtyord { get; set; }

      /// <summary>
      /// Qty Ship
      /// </summary>
      public decimal qtyship { get; set; }

      /// <summary>
      /// Ship Qty
      /// </summary>
      public decimal stkqtyship { get; set; }

      /// <summary>
      /// Stk Qty Ord
      /// </summary>
      public decimal stkqtyord { get; set; }

      /// <summary>
      /// ARP Vendor #
      /// </summary>
      public decimal arpvendno { get; set; }

      /// <summary>
      /// ARP Line
      /// </summary>
      [StringValidationAttribute]
      public string arpprodline { get; set; }

      /// <summary>
      /// ARP Whse
      /// </summary>
      [StringValidationAttribute]
      public string arpwhse { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string proddesc { get; set; }

      /// <summary>
      /// Added From Catalog
      /// </summary>
      public bool cataddfl { get; set; }

      /// <summary>
      /// Cost Over
      /// </summary>
      public bool costoverfl { get; set; }

      /// <summary>
      /// PO/WT Type
      /// </summary>
      [StringValidationAttribute]
      public string orderalttype { get; set; }

      /// <summary>
      /// Related Order #
      /// </summary>
      public int orderaltno { get; set; }

      /// <summary>
      /// Line # Alternate
      /// </summary>
      public int linealtno { get; set; }

      /// <summary>
      /// Category
      /// </summary>
      [StringValidationAttribute]
      public string prodcat { get; set; }

      /// <summary>
      /// Cost
      /// </summary>
      public decimal prodcost { get; set; }

      /// <summary>
      /// Net Amount
      /// </summary>
      public decimal netamt { get; set; }

      /// <summary>
      /// Completed Flag
      /// </summary>
      public bool completefl { get; set; }

      /// <summary>
      /// Section Type
      /// </summary>
      [StringValidationAttribute]
      public string sctntype { get; set; }

      /// <summary>
      /// Work Date
      /// </summary>
      public DateTime? timeworkdt { get; set; }

      /// <summary>
      /// Elapsed Time
      /// </summary>
      public int timeelapsed { get; set; }

      /// <summary>
      /// Comment
      /// </summary>
      [StringValidationAttribute]
      public string timecomment { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Description 2
      /// </summary>
      [StringValidationAttribute]
      public string proddesc2 { get; set; }

      /// <summary>
      /// BO Seq#
      /// </summary>
      public int boseqno { get; set; }

      /// <summary>
      /// Original Qty Based On Total
      /// </summary>
      public bool oqtybasetotfl { get; set; }

      /// <summary>
      /// Rush
      /// </summary>
      public bool rushfl { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Labor Flat Rate Flag
      /// </summary>
      public bool laborflatrtfl { get; set; }

      /// <summary>
      /// Labor Type
      /// </summary>
      [StringValidationAttribute]
      public string labortype { get; set; }

      /// <summary>
      /// Labor Units
      /// </summary>
      public decimal laborunits { get; set; }

      /// <summary>
      /// Actual Type
      /// </summary>
      [StringValidationAttribute]
      public string timeactty { get; set; }

      /// <summary>
      /// Qty Based On Total
      /// </summary>
      public bool qtybasetotfl { get; set; }

      /// <summary>
      /// commentfl
      /// </summary>
      public bool commentfl { get; set; }

      /// <summary>
      /// Default Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Usage
      /// </summary>
      public bool usagefl { get; set; }

      /// <summary>
      /// WIP Flag
      /// </summary>
      public bool wipfl { get; set; }

      /// <summary>
      /// Sales Rep
      /// </summary>
      [StringValidationAttribute]
      public string timeslsrep { get; set; }

      /// <summary>
      /// Bin Location
      /// </summary>
      [StringValidationAttribute]
      public string binloc { get; set; }

      /// <summary>
      /// Cube
      /// </summary>
      public decimal cubes { get; set; }

      /// <summary>
      /// weight
      /// </summary>
      public decimal weight { get; set; }

      /// <summary>
      /// # Times Chg
      /// </summary>
      public int notimeschg { get; set; }

      /// <summary>
      /// Prev Qty Ship
      /// </summary>
      public decimal prevqtyship { get; set; }

      /// <summary>
      /// Pick Ticket Print
      /// </summary>
      public bool printpckfl { get; set; }

      /// <summary>
      /// qtyunavail
      /// </summary>
      public decimal qtyunavail { get; set; }

      /// <summary>
      /// Reason Unavailable
      /// </summary>
      [StringValidationAttribute]
      public string reasunavty { get; set; }

      /// <summary>
      /// Ship Qty Over
      /// </summary>
      public bool shpqtyoverfl { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      public bool statustype { get; set; }

      /// <summary>
      /// Extended Cubes
      /// </summary>
      public decimal extcubes { get; set; }

      /// <summary>
      /// Extended Weight
      /// </summary>
      public decimal extweight { get; set; }

      /// <summary>
      /// Intermediate Product Flag
      /// </summary>
      public bool intermprodfl { get; set; }

      /// <summary>
      /// Direct Order Flag
      /// </summary>
      public bool directfl { get; set; }

      /// <summary>
      /// Prev WIP Flag
      /// </summary>
      public bool prevwipfl { get; set; }

      /// <summary>
      /// Net GL Amount
      /// </summary>
      public decimal netglamt { get; set; }

      /// <summary>
      /// Spec Rec Link
      /// </summary>
      public int icspecrecno { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Cancellation Type
      /// </summary>
      [StringValidationAttribute]
      public string cancelty { get; set; }

      /// <summary>
      /// Original Qty Needed
      /// </summary>
      public decimal oqtyneeded { get; set; }

      /// <summary>
      /// Variable Length Component
      /// </summary>
      public bool lgthcompfl { get; set; }

      /// <summary>
      /// Scrap Factor
      /// </summary>
      public decimal scrapfctr { get; set; }

      /// <summary>
      /// Maximum Labor Calc Qty
      /// </summary>
      public int maxlaborcalcqty { get; set; }

      /// <summary>
      /// Cutoff Type
      /// </summary>
      [StringValidationAttribute]
      public string cutoffty { get; set; }

      /// <summary>
      /// Lead Time
      /// </summary>
      public int leadtm { get; set; }

      /// <summary>
      /// Configure VA
      /// </summary>
      public bool vacfgfl { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildVaeslBaseFromRow<T>(DataRow row) where T:VaeslBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.vano = row.IsNull("vano") ? 0 : row.Field<int>("vano");
         entity.vasuf = row.IsNull("vasuf") ? 0 : row.Field<int>("vasuf");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.lineno = row.IsNull("lineno") ? 0 : row.Field<int>("lineno");
         entity.nonstockty = row.IsNull("nonstockty") ? string.Empty : row.Field<string>("nonstockty");
         entity.shipprod = row.IsNull("shipprod") ? string.Empty : row.Field<string>("shipprod");
         entity.unit = row.IsNull("unit") ? string.Empty : row.Field<string>("unit");
         entity.unitconv = row.IsNull("unitconv") ? decimal.Zero : row.Field<decimal>("unitconv");
         entity.qtyneeded = row.IsNull("qtyneeded") ? decimal.Zero : row.Field<decimal>("qtyneeded");
         entity.qtyord = row.IsNull("qtyord") ? decimal.Zero : row.Field<decimal>("qtyord");
         entity.qtyship = row.IsNull("qtyship") ? decimal.Zero : row.Field<decimal>("qtyship");
         entity.stkqtyship = row.IsNull("stkqtyship") ? decimal.Zero : row.Field<decimal>("stkqtyship");
         entity.stkqtyord = row.IsNull("stkqtyord") ? decimal.Zero : row.Field<decimal>("stkqtyord");
         entity.arpvendno = row.IsNull("arpvendno") ? decimal.Zero : row.Field<decimal>("arpvendno");
         entity.arpprodline = row.IsNull("arpprodline") ? string.Empty : row.Field<string>("arpprodline");
         entity.arpwhse = row.IsNull("arpwhse") ? string.Empty : row.Field<string>("arpwhse");
         entity.proddesc = row.IsNull("proddesc") ? string.Empty : row.Field<string>("proddesc");
         entity.cataddfl = row.Field<bool>("cataddfl");
         entity.costoverfl = row.Field<bool>("costoverfl");
         entity.orderalttype = row.IsNull("orderalttype") ? string.Empty : row.Field<string>("orderalttype");
         entity.orderaltno = row.IsNull("orderaltno") ? 0 : row.Field<int>("orderaltno");
         entity.linealtno = row.IsNull("linealtno") ? 0 : row.Field<int>("linealtno");
         entity.prodcat = row.IsNull("prodcat") ? string.Empty : row.Field<string>("prodcat");
         entity.prodcost = row.IsNull("prodcost") ? decimal.Zero : row.Field<decimal>("prodcost");
         entity.netamt = row.IsNull("netamt") ? decimal.Zero : row.Field<decimal>("netamt");
         entity.completefl = row.Field<bool>("completefl");
         entity.sctntype = row.IsNull("sctntype") ? string.Empty : row.Field<string>("sctntype");
         entity.timeworkdt = row.Field<DateTime?>("timeworkdt");
         entity.timeelapsed = row.IsNull("timeelapsed") ? 0 : row.Field<int>("timeelapsed");
         entity.timecomment = row.IsNull("timecomment") ? string.Empty : row.Field<string>("timecomment");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.proddesc2 = row.IsNull("proddesc2") ? string.Empty : row.Field<string>("proddesc2");
         entity.boseqno = row.IsNull("boseqno") ? 0 : row.Field<int>("boseqno");
         entity.oqtybasetotfl = row.Field<bool>("oqtybasetotfl");
         entity.rushfl = row.Field<bool>("rushfl");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.laborflatrtfl = row.Field<bool>("laborflatrtfl");
         entity.labortype = row.IsNull("labortype") ? string.Empty : row.Field<string>("labortype");
         entity.laborunits = row.IsNull("laborunits") ? decimal.Zero : row.Field<decimal>("laborunits");
         entity.timeactty = row.IsNull("timeactty") ? string.Empty : row.Field<string>("timeactty");
         entity.qtybasetotfl = row.Field<bool>("qtybasetotfl");
         entity.commentfl = row.Field<bool>("commentfl");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.usagefl = row.Field<bool>("usagefl");
         entity.wipfl = row.Field<bool>("wipfl");
         entity.timeslsrep = row.IsNull("timeslsrep") ? string.Empty : row.Field<string>("timeslsrep");
         entity.binloc = row.IsNull("binloc") ? string.Empty : row.Field<string>("binloc");
         entity.cubes = row.IsNull("cubes") ? decimal.Zero : row.Field<decimal>("cubes");
         entity.weight = row.IsNull("weight") ? decimal.Zero : row.Field<decimal>("weight");
         entity.notimeschg = row.IsNull("notimeschg") ? 0 : row.Field<int>("notimeschg");
         entity.prevqtyship = row.IsNull("prevqtyship") ? decimal.Zero : row.Field<decimal>("prevqtyship");
         entity.printpckfl = row.Field<bool>("printpckfl");
         entity.qtyunavail = row.IsNull("qtyunavail") ? decimal.Zero : row.Field<decimal>("qtyunavail");
         entity.reasunavty = row.IsNull("reasunavty") ? string.Empty : row.Field<string>("reasunavty");
         entity.shpqtyoverfl = row.Field<bool>("shpqtyoverfl");
         entity.statustype = row.Field<bool>("statustype");
         entity.extcubes = row.IsNull("extcubes") ? decimal.Zero : row.Field<decimal>("extcubes");
         entity.extweight = row.IsNull("extweight") ? decimal.Zero : row.Field<decimal>("extweight");
         entity.intermprodfl = row.Field<bool>("intermprodfl");
         entity.directfl = row.Field<bool>("directfl");
         entity.prevwipfl = row.Field<bool>("prevwipfl");
         entity.netglamt = row.IsNull("netglamt") ? decimal.Zero : row.Field<decimal>("netglamt");
         entity.icspecrecno = row.IsNull("icspecrecno") ? 0 : row.Field<int>("icspecrecno");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.cancelty = row.IsNull("cancelty") ? string.Empty : row.Field<string>("cancelty");
         entity.oqtyneeded = row.IsNull("oqtyneeded") ? decimal.Zero : row.Field<decimal>("oqtyneeded");
         entity.lgthcompfl = row.Field<bool>("lgthcompfl");
         entity.scrapfctr = row.IsNull("scrapfctr") ? decimal.Zero : row.Field<decimal>("scrapfctr");
         entity.maxlaborcalcqty = row.IsNull("maxlaborcalcqty") ? 0 : row.Field<int>("maxlaborcalcqty");
         entity.cutoffty = row.IsNull("cutoffty") ? string.Empty : row.Field<string>("cutoffty");
         entity.leadtm = row.IsNull("leadtm") ? 0 : row.Field<int>("leadtm");
         entity.vacfgfl = row.Field<bool>("vacfgfl");
         entity.rowID = row.Field<byte[]>("vaeslRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromVaeslBase(ref DataRow row, VaeslBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("vano", entity.vano);
         row.SetField("vasuf", entity.vasuf);
         row.SetField("seqno", entity.seqno);
         row.SetField("lineno", entity.lineno);
         row.SetField("nonstockty", entity.nonstockty);
         row.SetField("shipprod", entity.shipprod);
         row.SetField("unit", entity.unit);
         row.SetField("unitconv", entity.unitconv);
         row.SetField("qtyneeded", entity.qtyneeded);
         row.SetField("qtyord", entity.qtyord);
         row.SetField("qtyship", entity.qtyship);
         row.SetField("stkqtyship", entity.stkqtyship);
         row.SetField("stkqtyord", entity.stkqtyord);
         row.SetField("arpvendno", entity.arpvendno);
         row.SetField("arpprodline", entity.arpprodline);
         row.SetField("arpwhse", entity.arpwhse);
         row.SetField("proddesc", entity.proddesc);
         row.SetField("cataddfl", entity.cataddfl);
         row.SetField("costoverfl", entity.costoverfl);
         row.SetField("orderalttype", entity.orderalttype);
         row.SetField("orderaltno", entity.orderaltno);
         row.SetField("linealtno", entity.linealtno);
         row.SetField("prodcat", entity.prodcat);
         row.SetField("prodcost", entity.prodcost);
         row.SetField("netamt", entity.netamt);
         row.SetField("completefl", entity.completefl);
         row.SetField("sctntype", entity.sctntype);
         row.SetField("timeworkdt", entity.timeworkdt);
         row.SetField("timeelapsed", entity.timeelapsed);
         row.SetField("timecomment", entity.timecomment);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("proddesc2", entity.proddesc2);
         row.SetField("boseqno", entity.boseqno);
         row.SetField("oqtybasetotfl", entity.oqtybasetotfl);
         row.SetField("rushfl", entity.rushfl);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("laborflatrtfl", entity.laborflatrtfl);
         row.SetField("labortype", entity.labortype);
         row.SetField("laborunits", entity.laborunits);
         row.SetField("timeactty", entity.timeactty);
         row.SetField("qtybasetotfl", entity.qtybasetotfl);
         row.SetField("commentfl", entity.commentfl);
         row.SetField("whse", entity.whse);
         row.SetField("usagefl", entity.usagefl);
         row.SetField("wipfl", entity.wipfl);
         row.SetField("timeslsrep", entity.timeslsrep);
         row.SetField("binloc", entity.binloc);
         row.SetField("cubes", entity.cubes);
         row.SetField("weight", entity.weight);
         row.SetField("notimeschg", entity.notimeschg);
         row.SetField("prevqtyship", entity.prevqtyship);
         row.SetField("printpckfl", entity.printpckfl);
         row.SetField("qtyunavail", entity.qtyunavail);
         row.SetField("reasunavty", entity.reasunavty);
         row.SetField("shpqtyoverfl", entity.shpqtyoverfl);
         row.SetField("statustype", entity.statustype);
         row.SetField("extcubes", entity.extcubes);
         row.SetField("extweight", entity.extweight);
         row.SetField("intermprodfl", entity.intermprodfl);
         row.SetField("directfl", entity.directfl);
         row.SetField("prevwipfl", entity.prevwipfl);
         row.SetField("netglamt", entity.netglamt);
         row.SetField("icspecrecno", entity.icspecrecno);
         row.SetField("transproc", entity.transproc);
         row.SetField("cancelty", entity.cancelty);
         row.SetField("oqtyneeded", entity.oqtyneeded);
         row.SetField("lgthcompfl", entity.lgthcompfl);
         row.SetField("scrapfctr", entity.scrapfctr);
         row.SetField("maxlaborcalcqty", entity.maxlaborcalcqty);
         row.SetField("cutoffty", entity.cutoffty);
         row.SetField("leadtm", entity.leadtm);
         row.SetField("vacfgfl", entity.vacfgfl);
         row.SetField("vaeslRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, VaeslBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("vano", entity.vano);
         row.SetField("vasuf", entity.vasuf);
         row.SetField("seqno", entity.seqno);
         row.SetField("lineno", entity.lineno);
         row.SetField("vaeslRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	