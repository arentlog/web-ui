//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.VA
{
   /// <summary>
   /// Value Add Setup Product Defaults - Assembly Segment Rules
   /// </summary>
   
   public partial class VaspsasrBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string shipprod { get; set; }

      /// <summary>
      /// Default Whse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Segment
      /// </summary>
      [Key,Order]
      public int segment { get; set; }

      /// <summary>
      /// Sequence
      /// </summary>
      [Key,Order]
      public int sequence { get; set; }

      /// <summary>
      /// Rule Equality 1
      /// </summary>
      [StringValidationAttribute]
      public string ruleequality1 { get; set; }

      /// <summary>
      /// Rule Union 1
      /// </summary>
      public bool ruleunion1 { get; set; }

      /// <summary>
      /// Rule Segment 1
      /// </summary>
      public int rulesegment1 { get; set; }

      /// <summary>
      /// Rule 1
      /// </summary>
      [StringValidationAttribute]
      public string rule1 { get; set; }

      /// <summary>
      /// Rule Equality 2
      /// </summary>
      [StringValidationAttribute]
      public string ruleequality2 { get; set; }

      /// <summary>
      /// Rule Union 2
      /// </summary>
      public bool ruleunion2 { get; set; }

      /// <summary>
      /// Rule Segment 2
      /// </summary>
      public int rulesegment2 { get; set; }

      /// <summary>
      /// Rule 2
      /// </summary>
      [StringValidationAttribute]
      public string rule2 { get; set; }

      /// <summary>
      /// Rule Equality 3
      /// </summary>
      [StringValidationAttribute]
      public string ruleequality3 { get; set; }

      /// <summary>
      /// Rule Union 3
      /// </summary>
      public bool ruleunion3 { get; set; }

      /// <summary>
      /// Rule Segment 3
      /// </summary>
      public int rulesegment3 { get; set; }

      /// <summary>
      /// Rule 3
      /// </summary>
      [StringValidationAttribute]
      public string rule3 { get; set; }

      /// <summary>
      /// Rule Equality 4
      /// </summary>
      [StringValidationAttribute]
      public string ruleequality4 { get; set; }

      /// <summary>
      /// Rule Union 4
      /// </summary>
      public bool ruleunion4 { get; set; }

      /// <summary>
      /// Rule Segment 4
      /// </summary>
      public int rulesegment4 { get; set; }

      /// <summary>
      /// Rule 4
      /// </summary>
      [StringValidationAttribute]
      public string rule4 { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Rule Valid Data
      /// </summary>
      [StringValidationAttribute]
      public string rulevaliddata { get; set; }

      /// <summary>
      /// Rule Error Msg
      /// </summary>
      [StringValidationAttribute]
      public string ruleerrormsg { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildVaspsasrBaseFromRow<T>(DataRow row) where T:VaspsasrBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.shipprod = row.IsNull("shipprod") ? string.Empty : row.Field<string>("shipprod");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.segment = row.IsNull("segment") ? 0 : row.Field<int>("segment");
         entity.sequence = row.IsNull("sequence") ? 0 : row.Field<int>("sequence");
         entity.ruleequality1 = row.IsNull("ruleequality1") ? string.Empty : row.Field<string>("ruleequality1");
         entity.ruleunion1 = row.Field<bool>("ruleunion1");
         entity.rulesegment1 = row.IsNull("rulesegment1") ? 0 : row.Field<int>("rulesegment1");
         entity.rule1 = row.IsNull("rule1") ? string.Empty : row.Field<string>("rule1");
         entity.ruleequality2 = row.IsNull("ruleequality2") ? string.Empty : row.Field<string>("ruleequality2");
         entity.ruleunion2 = row.Field<bool>("ruleunion2");
         entity.rulesegment2 = row.IsNull("rulesegment2") ? 0 : row.Field<int>("rulesegment2");
         entity.rule2 = row.IsNull("rule2") ? string.Empty : row.Field<string>("rule2");
         entity.ruleequality3 = row.IsNull("ruleequality3") ? string.Empty : row.Field<string>("ruleequality3");
         entity.ruleunion3 = row.Field<bool>("ruleunion3");
         entity.rulesegment3 = row.IsNull("rulesegment3") ? 0 : row.Field<int>("rulesegment3");
         entity.rule3 = row.IsNull("rule3") ? string.Empty : row.Field<string>("rule3");
         entity.ruleequality4 = row.IsNull("ruleequality4") ? string.Empty : row.Field<string>("ruleequality4");
         entity.ruleunion4 = row.Field<bool>("ruleunion4");
         entity.rulesegment4 = row.IsNull("rulesegment4") ? 0 : row.Field<int>("rulesegment4");
         entity.rule4 = row.IsNull("rule4") ? string.Empty : row.Field<string>("rule4");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.rulevaliddata = row.IsNull("rulevaliddata") ? string.Empty : row.Field<string>("rulevaliddata");
         entity.ruleerrormsg = row.IsNull("ruleerrormsg") ? string.Empty : row.Field<string>("ruleerrormsg");
         entity.rowID = row.Field<byte[]>("vaspsasrRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromVaspsasrBase(ref DataRow row, VaspsasrBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("shipprod", entity.shipprod);
         row.SetField("whse", entity.whse);
         row.SetField("segment", entity.segment);
         row.SetField("sequence", entity.sequence);
         row.SetField("ruleequality1", entity.ruleequality1);
         row.SetField("ruleunion1", entity.ruleunion1);
         row.SetField("rulesegment1", entity.rulesegment1);
         row.SetField("rule1", entity.rule1);
         row.SetField("ruleequality2", entity.ruleequality2);
         row.SetField("ruleunion2", entity.ruleunion2);
         row.SetField("rulesegment2", entity.rulesegment2);
         row.SetField("rule2", entity.rule2);
         row.SetField("ruleequality3", entity.ruleequality3);
         row.SetField("ruleunion3", entity.ruleunion3);
         row.SetField("rulesegment3", entity.rulesegment3);
         row.SetField("rule3", entity.rule3);
         row.SetField("ruleequality4", entity.ruleequality4);
         row.SetField("ruleunion4", entity.ruleunion4);
         row.SetField("rulesegment4", entity.rulesegment4);
         row.SetField("rule4", entity.rule4);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("transproc", entity.transproc);
         row.SetField("operinit", entity.operinit);
         row.SetField("rulevaliddata", entity.rulevaliddata);
         row.SetField("ruleerrormsg", entity.ruleerrormsg);
         row.SetField("vaspsasrRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, VaspsasrBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("shipprod", entity.shipprod);
         row.SetField("whse", entity.whse);
         row.SetField("segment", entity.segment);
         row.SetField("sequence", entity.sequence);
         row.SetField("vaspsasrRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	