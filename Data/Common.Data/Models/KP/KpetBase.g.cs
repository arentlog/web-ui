//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.KP
{
   /// <summary>
   /// Kit Production - Enter Transactions
   /// </summary>
   [EntityType("Kit Production - Enter Transactions","kpiw.detail","")]
   public partial class KpetBase: ModelBase, IUserFields
   {

      /// <summary>
      /// WO #
      /// </summary>
      [DrillbackParam("pk",1),Key,Order]
      public int wono { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [BusContext(BusPart.AcctEntity),Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// WO Suffix
      /// </summary>
      [DrillbackParam("pk2",2),Key,Order]
      public int wosuf { get; set; }

      /// <summary>
      /// Alt Seq #
      /// </summary>
      public int seqaltno { get; set; }

      /// <summary>
      /// Stage Code
      /// </summary>
      [BusContext(BusPart.Descr)]
      public int stagecd { get; set; }

      /// <summary>
      /// Stk Qty Ord
      /// </summary>
      public decimal stkqtyord { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [ID(5),BusContext(BusPart.Location),StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Built Qty
      /// </summary>
      public decimal stkqtyship { get; set; }

      /// <summary>
      /// Ref
      /// </summary>
      [StringValidationAttribute]
      public string refer { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [ID(6),StringValidationAttribute]
      public string shipprod { get; set; }

      /// <summary>
      /// Post Date
      /// </summary>
      public DateTime? enterdt { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      public bool statustype { get; set; }

      /// <summary>
      /// Trans Dt
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Oper
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Trans Tm
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Original Product Requested
      /// </summary>
      [StringValidationAttribute]
      public string requestprod { get; set; }

      /// <summary>
      /// No. Times Printed
      /// </summary>
      public int notimesprt { get; set; }

      /// <summary>
      /// Units
      /// </summary>
      [StringValidationAttribute]
      public string unit { get; set; }

      /// <summary>
      /// Notes
      /// </summary>
      [StringValidationAttribute]
      public string notesfl { get; set; }

      /// <summary>
      /// Cost
      /// </summary>
      public decimal prodcost { get; set; }

      /// <summary>
      /// Ordered
      /// </summary>
      public decimal qtyord { get; set; }

      /// <summary>
      /// Category
      /// </summary>
      [StringValidationAttribute]
      public string prodcat { get; set; }

      /// <summary>
      /// Required Option
      /// </summary>
      public bool reqoptfl { get; set; }

      /// <summary>
      /// Extended Type
      /// </summary>
      [StringValidationAttribute]
      public string serlottype { get; set; }

      /// <summary>
      /// Conversion Factor
      /// </summary>
      public decimal conv { get; set; }

      /// <summary>
      /// RRAR Initials
      /// </summary>
      [StringValidationAttribute]
      public string rrarinit { get; set; }

      /// <summary>
      /// Order Type
      /// </summary>
      [StringValidationAttribute]
      public string ordertype { get; set; }

      /// <summary>
      /// Related Order #
      /// </summary>
      [ID(7)]
      public int orderaltno { get; set; }

      /// <summary>
      /// Related Suffix
      /// </summary>
      [ID(8)]
      public int orderaltsuf { get; set; }

      /// <summary>
      /// Line # Alternate
      /// </summary>
      [ID(9)]
      public int linealtno { get; set; }

      /// <summary>
      /// Jrnl #
      /// </summary>
      [ID(10)]
      public int jrnlno { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      [StringValidationAttribute]
      public string statuscd { get; set; }

      /// <summary>
      /// Whse Manager Qty Shipped
      /// </summary>
      public decimal wmqtyship { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      [ID(11)]
      public int setno { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// Spec Rec Link
      /// </summary>
      public int icspecrecno { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// BO Stage
      /// </summary>
      public int bostage { get; set; }

      /// <summary>
      /// BO Exists
      /// </summary>
      public bool boexistsfl { get; set; }

      /// <summary>
      /// B/O
      /// </summary>
      public bool bofl { get; set; }

      /// <summary>
      /// BO
      /// </summary>
      public bool borelfl { get; set; }

      /// <summary>
      /// BO #
      /// </summary>
      public int bono { get; set; }

      /// <summary>
      /// Qty Ship
      /// </summary>
      public decimal qtyship { get; set; }

      /// <summary>
      /// Open Initials
      /// </summary>
      [StringValidationAttribute]
      public string openinit { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Customer Cost
      /// </summary>
      public decimal custcost { get; set; }

      /// <summary>
      /// Customer Quantity
      /// </summary>
      public decimal custqty { get; set; }

      /// <summary>
      /// ESB Process Flag
      /// </summary>
      public bool esbprocessfl { get; set; }

      /// <summary>
      /// Version #
      /// </summary>
      [ID(4)]
      public int verno { get; set; }

      /// <summary>
      /// Row Pointer
      /// </summary>
      [StringValidationAttribute]
      public string rowpointer { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildKpetBaseFromRow<T>(DataRow row) where T:KpetBase, new()
      {
         T entity = new T();
         entity.seqaltno = row.IsNull("seqaltno") ? 0 : row.Field<int>("seqaltno");
         entity.stagecd = row.IsNull("stagecd") ? 0 : row.Field<int>("stagecd");
         entity.wono = row.IsNull("wono") ? 0 : row.Field<int>("wono");
         entity.stkqtyord = row.IsNull("stkqtyord") ? decimal.Zero : row.Field<decimal>("stkqtyord");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.stkqtyship = row.IsNull("stkqtyship") ? decimal.Zero : row.Field<decimal>("stkqtyship");
         entity.refer = row.IsNull("refer") ? string.Empty : row.Field<string>("refer");
         entity.shipprod = row.IsNull("shipprod") ? string.Empty : row.Field<string>("shipprod");
         entity.enterdt = row.Field<DateTime?>("enterdt");
         entity.statustype = row.Field<bool>("statustype");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.requestprod = row.IsNull("requestprod") ? string.Empty : row.Field<string>("requestprod");
         entity.notimesprt = row.IsNull("notimesprt") ? 0 : row.Field<int>("notimesprt");
         entity.unit = row.IsNull("unit") ? string.Empty : row.Field<string>("unit");
         entity.notesfl = row.IsNull("notesfl") ? string.Empty : row.Field<string>("notesfl");
         entity.prodcost = row.IsNull("prodcost") ? decimal.Zero : row.Field<decimal>("prodcost");
         entity.qtyord = row.IsNull("qtyord") ? decimal.Zero : row.Field<decimal>("qtyord");
         entity.prodcat = row.IsNull("prodcat") ? string.Empty : row.Field<string>("prodcat");
         entity.reqoptfl = row.Field<bool>("reqoptfl");
         entity.serlottype = row.IsNull("serlottype") ? string.Empty : row.Field<string>("serlottype");
         entity.conv = row.IsNull("conv") ? decimal.Zero : row.Field<decimal>("conv");
         entity.rrarinit = row.IsNull("rrarinit") ? string.Empty : row.Field<string>("rrarinit");
         entity.ordertype = row.IsNull("ordertype") ? string.Empty : row.Field<string>("ordertype");
         entity.orderaltno = row.IsNull("orderaltno") ? 0 : row.Field<int>("orderaltno");
         entity.orderaltsuf = row.IsNull("orderaltsuf") ? 0 : row.Field<int>("orderaltsuf");
         entity.linealtno = row.IsNull("linealtno") ? 0 : row.Field<int>("linealtno");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.statuscd = row.IsNull("statuscd") ? string.Empty : row.Field<string>("statuscd");
         entity.wmqtyship = row.IsNull("wmqtyship") ? decimal.Zero : row.Field<decimal>("wmqtyship");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.icspecrecno = row.IsNull("icspecrecno") ? 0 : row.Field<int>("icspecrecno");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.wosuf = row.IsNull("wosuf") ? 0 : row.Field<int>("wosuf");
         entity.bostage = row.IsNull("bostage") ? 0 : row.Field<int>("bostage");
         entity.boexistsfl = row.Field<bool>("boexistsfl");
         entity.bofl = row.Field<bool>("bofl");
         entity.borelfl = row.Field<bool>("borelfl");
         entity.bono = row.IsNull("bono") ? 0 : row.Field<int>("bono");
         entity.qtyship = row.IsNull("qtyship") ? decimal.Zero : row.Field<decimal>("qtyship");
         entity.openinit = row.IsNull("openinit") ? string.Empty : row.Field<string>("openinit");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.custcost = row.IsNull("custcost") ? decimal.Zero : row.Field<decimal>("custcost");
         entity.custqty = row.IsNull("custqty") ? decimal.Zero : row.Field<decimal>("custqty");
         entity.esbprocessfl = row.Field<bool>("esbprocessfl");
         entity.verno = row.IsNull("verno") ? 0 : row.Field<int>("verno");
         entity.rowpointer = row.IsNull("rowpointer") ? string.Empty : row.Field<string>("rowpointer");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.rowID = row.Field<byte[]>("kpetRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromKpetBase(ref DataRow row, KpetBase entity)
      {
         row.SetField("seqaltno", entity.seqaltno);
         row.SetField("stagecd", entity.stagecd);
         row.SetField("wono", entity.wono);
         row.SetField("stkqtyord", entity.stkqtyord);
         row.SetField("whse", entity.whse);
         row.SetField("stkqtyship", entity.stkqtyship);
         row.SetField("refer", entity.refer);
         row.SetField("shipprod", entity.shipprod);
         row.SetField("enterdt", entity.enterdt);
         row.SetField("statustype", entity.statustype);
         row.SetField("transdt", entity.transdt);
         row.SetField("operinit", entity.operinit);
         row.SetField("transtm", entity.transtm);
         row.SetField("cono", entity.cono);
         row.SetField("requestprod", entity.requestprod);
         row.SetField("notimesprt", entity.notimesprt);
         row.SetField("unit", entity.unit);
         row.SetField("notesfl", entity.notesfl);
         row.SetField("prodcost", entity.prodcost);
         row.SetField("qtyord", entity.qtyord);
         row.SetField("prodcat", entity.prodcat);
         row.SetField("reqoptfl", entity.reqoptfl);
         row.SetField("serlottype", entity.serlottype);
         row.SetField("conv", entity.conv);
         row.SetField("rrarinit", entity.rrarinit);
         row.SetField("ordertype", entity.ordertype);
         row.SetField("orderaltno", entity.orderaltno);
         row.SetField("orderaltsuf", entity.orderaltsuf);
         row.SetField("linealtno", entity.linealtno);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("statuscd", entity.statuscd);
         row.SetField("wmqtyship", entity.wmqtyship);
         row.SetField("setno", entity.setno);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("icspecrecno", entity.icspecrecno);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("wosuf", entity.wosuf);
         row.SetField("bostage", entity.bostage);
         row.SetField("boexistsfl", entity.boexistsfl);
         row.SetField("bofl", entity.bofl);
         row.SetField("borelfl", entity.borelfl);
         row.SetField("bono", entity.bono);
         row.SetField("qtyship", entity.qtyship);
         row.SetField("openinit", entity.openinit);
         row.SetField("transproc", entity.transproc);
         row.SetField("custcost", entity.custcost);
         row.SetField("custqty", entity.custqty);
         row.SetField("esbprocessfl", entity.esbprocessfl);
         row.SetField("verno", entity.verno);
         row.SetField("rowpointer", entity.rowpointer);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("kpetRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, KpetBase entity)
      {
         row.SetField("wono", entity.wono);
         row.SetField("cono", entity.cono);
         row.SetField("wosuf", entity.wosuf);
         row.SetField("kpetRowID", entity.rowID.ToByteArray());
         row.SetField("rowpointer", entity.rowpointer);

      }   
   }
}
#pragma warning restore 1591
	