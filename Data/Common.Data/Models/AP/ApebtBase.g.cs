//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.AP
{
   /// <summary>
   /// AP Batch Transaction
   /// </summary>
   
   public partial class ApebtBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Seq#
      /// </summary>
      [Key,Order]
      public int seqno { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      [Key,Order]
      public int setno { get; set; }

      /// <summary>
      /// Group
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string batchnm { get; set; }

      /// <summary>
      /// Vendor #
      /// </summary>
      public decimal vendno { get; set; }

      /// <summary>
      /// invsuf
      /// </summary>
      public int invsuf { get; set; }

      /// <summary>
      /// Amount
      /// </summary>
      public decimal amount { get; set; }

      /// <summary>
      /// Discount
      /// </summary>
      public decimal discamt { get; set; }

      /// <summary>
      /// Tran Type
      /// </summary>
      public int transcd { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Invoice Date
      /// </summary>
      public DateTime? invdt { get; set; }

      /// <summary>
      /// duedt
      /// </summary>
      public DateTime? duedt { get; set; }

      /// <summary>
      /// discdt
      /// </summary>
      public DateTime? discdt { get; set; }

      /// <summary>
      /// Ref
      /// </summary>
      [StringValidationAttribute]
      public string refer { get; set; }

      /// <summary>
      /// disputefl
      /// </summary>
      public bool disputefl { get; set; }

      /// <summary>
      /// Terms
      /// </summary>
      [StringValidationAttribute]
      public string termstype { get; set; }

      /// <summary>
      /// duedays
      /// </summary>
      public int duedays { get; set; }

      /// <summary>
      /// Discount Days
      /// </summary>
      public int discdays { get; set; }

      /// <summary>
      /// Number of Payments
      /// </summary>
      public int nopays { get; set; }

      /// <summary>
      /// Frequency of Payments
      /// </summary>
      public int freqdays { get; set; }

      /// <summary>
      /// Discount %
      /// </summary>
      public decimal discpct { get; set; }

      /// <summary>
      /// AP Invoice #
      /// </summary>
      [StringValidationAttribute]
      public string apinvno { get; set; }

      /// <summary>
      /// Invoice Type
      /// </summary>
      [StringValidationAttribute]
      public string invtype { get; set; }

      /// <summary>
      /// Immed Pay
      /// </summary>
      public bool immedpyfl { get; set; }

      /// <summary>
      /// Name
      /// </summary>
      [StringValidationAttribute]
      public string name { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr1 { get; set; }
      [StringValidationAttribute]
      public string addr2 { get; set; }

      /// <summary>
      /// City
      /// </summary>
      [StringValidationAttribute]
      public string city { get; set; }

      /// <summary>
      /// State
      /// </summary>
      [StringValidationAttribute]
      public string state { get; set; }

      /// <summary>
      /// Zip Code
      /// </summary>
      [StringValidationAttribute]
      public string zipcd { get; set; }

      /// <summary>
      /// Manual Address
      /// </summary>
      public bool manaddrfl { get; set; }

      /// <summary>
      /// Check #
      /// </summary>
      public decimal checkno { get; set; }

      /// <summary>
      /// Bank #
      /// </summary>
      public int bankno { get; set; }

      /// <summary>
      /// Addon Amt
      /// </summary>
      public decimal addonamt1 { get; set; }
      public decimal addonamt2 { get; set; }

      /// <summary>
      /// G.S.T. Amount
      /// </summary>
      public decimal gsttaxamt { get; set; }

      /// <summary>
      /// P.S.T. Amount
      /// </summary>
      public decimal psttaxamt { get; set; }

      /// <summary>
      /// Currency
      /// </summary>
      [StringValidationAttribute]
      public string currencyty { get; set; }

      /// <summary>
      /// Exchange Rate
      /// </summary>
      public decimal exchgrate1 { get; set; }
      public decimal exchgrate2 { get; set; }

      /// <summary>
      /// Division #
      /// </summary>
      public int divno { get; set; }

      /// <summary>
      /// Max
      /// </summary>
      public int maxpost { get; set; }

      /// <summary>
      /// Number Of Postings
      /// </summary>
      public int nopost { get; set; }

      /// <summary>
      /// Not for Resale Amount
      /// </summary>
      public decimal notresaleamt { get; set; }

      /// <summary>
      /// Created By
      /// </summary>
      [StringValidationAttribute]
      public string createdby { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Journal #
      /// </summary>
      public int jrnlno { get; set; }

      /// <summary>
      /// Suspended?
      /// </summary>
      public bool suspfl { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr3 { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }


      /// <summary>
      /// string
      /// </summary>
      public string CompleteAddress { get { return this.addr1 + "," + this.city + "," + this.state + "," + this.zipcd; } }


      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildApebtBaseFromRow<T>(DataRow row) where T:ApebtBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.vendno = row.IsNull("vendno") ? decimal.Zero : row.Field<decimal>("vendno");
         entity.invsuf = row.IsNull("invsuf") ? 0 : row.Field<int>("invsuf");
         entity.amount = row.IsNull("amount") ? decimal.Zero : row.Field<decimal>("amount");
         entity.discamt = row.IsNull("discamt") ? decimal.Zero : row.Field<decimal>("discamt");
         entity.transcd = row.IsNull("transcd") ? 0 : row.Field<int>("transcd");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.seqno = row.IsNull("seqno") ? 0 : row.Field<int>("seqno");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.invdt = row.Field<DateTime?>("invdt");
         entity.duedt = row.Field<DateTime?>("duedt");
         entity.discdt = row.Field<DateTime?>("discdt");
         entity.refer = row.IsNull("refer") ? string.Empty : row.Field<string>("refer");
         entity.disputefl = row.Field<bool>("disputefl");
         entity.termstype = row.IsNull("termstype") ? string.Empty : row.Field<string>("termstype");
         entity.batchnm = row.IsNull("batchnm") ? string.Empty : row.Field<string>("batchnm");
         entity.duedays = row.IsNull("duedays") ? 0 : row.Field<int>("duedays");
         entity.discdays = row.IsNull("discdays") ? 0 : row.Field<int>("discdays");
         entity.nopays = row.IsNull("nopays") ? 0 : row.Field<int>("nopays");
         entity.freqdays = row.IsNull("freqdays") ? 0 : row.Field<int>("freqdays");
         entity.discpct = row.IsNull("discpct") ? decimal.Zero : row.Field<decimal>("discpct");
         entity.apinvno = row.IsNull("apinvno") ? string.Empty : row.Field<string>("apinvno");
         entity.invtype = row.IsNull("invtype") ? string.Empty : row.Field<string>("invtype");
         entity.immedpyfl = row.Field<bool>("immedpyfl");
         entity.name = row.IsNull("name") ? string.Empty : row.Field<string>("name");
         entity.addr1 = row.IsNull("addr1") ? string.Empty : row.Field<string>("addr1");
         entity.addr2 = row.IsNull("addr2") ? string.Empty : row.Field<string>("addr2");
         entity.city = row.IsNull("city") ? string.Empty : row.Field<string>("city");
         entity.state = row.IsNull("state") ? string.Empty : row.Field<string>("state");
         entity.zipcd = row.IsNull("zipcd") ? string.Empty : row.Field<string>("zipcd");
         entity.manaddrfl = row.Field<bool>("manaddrfl");
         entity.checkno = row.IsNull("checkno") ? decimal.Zero : row.Field<decimal>("checkno");
         entity.bankno = row.IsNull("bankno") ? 0 : row.Field<int>("bankno");
         entity.addonamt1 = row.IsNull("addonamt1") ? decimal.Zero : row.Field<decimal>("addonamt1");
         entity.addonamt2 = row.IsNull("addonamt2") ? decimal.Zero : row.Field<decimal>("addonamt2");
         entity.gsttaxamt = row.IsNull("gsttaxamt") ? decimal.Zero : row.Field<decimal>("gsttaxamt");
         entity.psttaxamt = row.IsNull("psttaxamt") ? decimal.Zero : row.Field<decimal>("psttaxamt");
         entity.currencyty = row.IsNull("currencyty") ? string.Empty : row.Field<string>("currencyty");
         entity.exchgrate1 = row.IsNull("exchgrate1") ? decimal.Zero : row.Field<decimal>("exchgrate1");
         entity.exchgrate2 = row.IsNull("exchgrate2") ? decimal.Zero : row.Field<decimal>("exchgrate2");
         entity.divno = row.IsNull("divno") ? 0 : row.Field<int>("divno");
         entity.maxpost = row.IsNull("maxpost") ? 0 : row.Field<int>("maxpost");
         entity.nopost = row.IsNull("nopost") ? 0 : row.Field<int>("nopost");
         entity.notresaleamt = row.IsNull("notresaleamt") ? decimal.Zero : row.Field<decimal>("notresaleamt");
         entity.createdby = row.IsNull("createdby") ? string.Empty : row.Field<string>("createdby");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.suspfl = row.Field<bool>("suspfl");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.addr3 = row.IsNull("addr3") ? string.Empty : row.Field<string>("addr3");
         entity.rowID = row.Field<byte[]>("apebtRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromApebtBase(ref DataRow row, ApebtBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("vendno", entity.vendno);
         row.SetField("invsuf", entity.invsuf);
         row.SetField("amount", entity.amount);
         row.SetField("discamt", entity.discamt);
         row.SetField("transcd", entity.transcd);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("seqno", entity.seqno);
         row.SetField("setno", entity.setno);
         row.SetField("invdt", entity.invdt);
         row.SetField("duedt", entity.duedt);
         row.SetField("discdt", entity.discdt);
         row.SetField("refer", entity.refer);
         row.SetField("disputefl", entity.disputefl);
         row.SetField("termstype", entity.termstype);
         row.SetField("batchnm", entity.batchnm);
         row.SetField("duedays", entity.duedays);
         row.SetField("discdays", entity.discdays);
         row.SetField("nopays", entity.nopays);
         row.SetField("freqdays", entity.freqdays);
         row.SetField("discpct", entity.discpct);
         row.SetField("apinvno", entity.apinvno);
         row.SetField("invtype", entity.invtype);
         row.SetField("immedpyfl", entity.immedpyfl);
         row.SetField("name", entity.name);
         row.SetField("addr1", entity.addr1);
         row.SetField("addr2", entity.addr2);
         row.SetField("city", entity.city);
         row.SetField("state", entity.state);
         row.SetField("zipcd", entity.zipcd);
         row.SetField("manaddrfl", entity.manaddrfl);
         row.SetField("checkno", entity.checkno);
         row.SetField("bankno", entity.bankno);
         row.SetField("addonamt1", entity.addonamt1);
         row.SetField("addonamt2", entity.addonamt2);
         row.SetField("gsttaxamt", entity.gsttaxamt);
         row.SetField("psttaxamt", entity.psttaxamt);
         row.SetField("currencyty", entity.currencyty);
         row.SetField("exchgrate1", entity.exchgrate1);
         row.SetField("exchgrate2", entity.exchgrate2);
         row.SetField("divno", entity.divno);
         row.SetField("maxpost", entity.maxpost);
         row.SetField("nopost", entity.nopost);
         row.SetField("notresaleamt", entity.notresaleamt);
         row.SetField("createdby", entity.createdby);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("suspfl", entity.suspfl);
         row.SetField("transproc", entity.transproc);
         row.SetField("addr3", entity.addr3);
         row.SetField("apebtRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, ApebtBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("seqno", entity.seqno);
         row.SetField("setno", entity.setno);
         row.SetField("batchnm", entity.batchnm);
         row.SetField("apebtRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	