//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.AP
{
   /// <summary>
   /// AP Batch Costing
   /// </summary>
   
   public partial class ApebcBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// PO #
      /// </summary>
      [Key,Order]
      public int pono { get; set; }

      /// <summary>
      /// Journal #
      /// </summary>
      [Key,Order]
      public int jrnlno { get; set; }

      /// <summary>
      /// Set #
      /// </summary>
      [Key,Order]
      public int setno { get; set; }

      /// <summary>
      /// PO Suf
      /// </summary>
      [Key,Order]
      public decimal posuf { get; set; }

      /// <summary>
      /// PO Lineno
      /// </summary>
      [Key,Order]
      public decimal lineno { get; set; }

      /// <summary>
      /// Vendor
      /// </summary>
      public decimal vendno { get; set; }

      /// <summary>
      /// AP Invoice #
      /// </summary>
      [StringValidationAttribute]
      public string apinvno { get; set; }

      /// <summary>
      /// Ordered Cost
      /// </summary>
      public decimal costord { get; set; }

      /// <summary>
      /// statustype
      /// </summary>
      public bool statustype { get; set; }

      /// <summary>
      /// Product Description
      /// </summary>
      [StringValidationAttribute]
      public string proddesc { get; set; }

      /// <summary>
      /// Qty Costed
      /// </summary>
      public decimal qtycost { get; set; }

      /// <summary>
      /// Invoice Cost
      /// </summary>
      public decimal cost { get; set; }

      /// <summary>
      /// Currency
      /// </summary>
      [StringValidationAttribute]
      public string currencyty { get; set; }

      /// <summary>
      /// Exchange Rate
      /// </summary>
      public decimal exchgrate1 { get; set; }
      public decimal exchgrate2 { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Received Cost
      /// </summary>
      public decimal costrcv { get; set; }

      /// <summary>
      /// Qty Ordered
      /// </summary>
      public decimal qtyord { get; set; }

      /// <summary>
      /// Qty Received
      /// </summary>
      public decimal qtyrcv { get; set; }

      /// <summary>
      /// # of Stocking Unit
      /// </summary>
      public decimal unitconv { get; set; }

      /// <summary>
      /// Each/All
      /// </summary>
      public bool eachfl { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [StringValidationAttribute]
      public string shipprod { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Autorecfl
      /// </summary>
      [StringValidationAttribute]
      public string autorecfl { get; set; }

      /// <summary>
      /// Description 2
      /// </summary>
      [StringValidationAttribute]
      public string proddesc2 { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Updated?
      /// </summary>
      public bool updatefl { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Revaluation Number
      /// </summary>
      public int revalno { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildApebcBaseFromRow<T>(DataRow row) where T:ApebcBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.vendno = row.IsNull("vendno") ? decimal.Zero : row.Field<decimal>("vendno");
         entity.apinvno = row.IsNull("apinvno") ? string.Empty : row.Field<string>("apinvno");
         entity.pono = row.IsNull("pono") ? 0 : row.Field<int>("pono");
         entity.costord = row.IsNull("costord") ? decimal.Zero : row.Field<decimal>("costord");
         entity.statustype = row.Field<bool>("statustype");
         entity.proddesc = row.IsNull("proddesc") ? string.Empty : row.Field<string>("proddesc");
         entity.qtycost = row.IsNull("qtycost") ? decimal.Zero : row.Field<decimal>("qtycost");
         entity.cost = row.IsNull("cost") ? decimal.Zero : row.Field<decimal>("cost");
         entity.currencyty = row.IsNull("currencyty") ? string.Empty : row.Field<string>("currencyty");
         entity.exchgrate1 = row.IsNull("exchgrate1") ? decimal.Zero : row.Field<decimal>("exchgrate1");
         entity.exchgrate2 = row.IsNull("exchgrate2") ? decimal.Zero : row.Field<decimal>("exchgrate2");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.setno = row.IsNull("setno") ? 0 : row.Field<int>("setno");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.costrcv = row.IsNull("costrcv") ? decimal.Zero : row.Field<decimal>("costrcv");
         entity.qtyord = row.IsNull("qtyord") ? decimal.Zero : row.Field<decimal>("qtyord");
         entity.qtyrcv = row.IsNull("qtyrcv") ? decimal.Zero : row.Field<decimal>("qtyrcv");
         entity.unitconv = row.IsNull("unitconv") ? decimal.Zero : row.Field<decimal>("unitconv");
         entity.eachfl = row.Field<bool>("eachfl");
         entity.shipprod = row.IsNull("shipprod") ? string.Empty : row.Field<string>("shipprod");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.posuf = row.IsNull("posuf") ? decimal.Zero : row.Field<decimal>("posuf");
         entity.lineno = row.IsNull("lineno") ? decimal.Zero : row.Field<decimal>("lineno");
         entity.autorecfl = row.IsNull("autorecfl") ? string.Empty : row.Field<string>("autorecfl");
         entity.proddesc2 = row.IsNull("proddesc2") ? string.Empty : row.Field<string>("proddesc2");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.updatefl = row.Field<bool>("updatefl");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.revalno = row.IsNull("revalno") ? 0 : row.Field<int>("revalno");
         entity.rowID = row.Field<byte[]>("apebcRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromApebcBase(ref DataRow row, ApebcBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("vendno", entity.vendno);
         row.SetField("apinvno", entity.apinvno);
         row.SetField("pono", entity.pono);
         row.SetField("costord", entity.costord);
         row.SetField("statustype", entity.statustype);
         row.SetField("proddesc", entity.proddesc);
         row.SetField("qtycost", entity.qtycost);
         row.SetField("cost", entity.cost);
         row.SetField("currencyty", entity.currencyty);
         row.SetField("exchgrate1", entity.exchgrate1);
         row.SetField("exchgrate2", entity.exchgrate2);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("setno", entity.setno);
         row.SetField("whse", entity.whse);
         row.SetField("costrcv", entity.costrcv);
         row.SetField("qtyord", entity.qtyord);
         row.SetField("qtyrcv", entity.qtyrcv);
         row.SetField("unitconv", entity.unitconv);
         row.SetField("eachfl", entity.eachfl);
         row.SetField("shipprod", entity.shipprod);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("posuf", entity.posuf);
         row.SetField("lineno", entity.lineno);
         row.SetField("autorecfl", entity.autorecfl);
         row.SetField("proddesc2", entity.proddesc2);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("updatefl", entity.updatefl);
         row.SetField("transproc", entity.transproc);
         row.SetField("revalno", entity.revalno);
         row.SetField("apebcRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, ApebcBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("pono", entity.pono);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("setno", entity.setno);
         row.SetField("posuf", entity.posuf);
         row.SetField("lineno", entity.lineno);
         row.SetField("apebcRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	