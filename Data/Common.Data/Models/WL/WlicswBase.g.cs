//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.WL
{
   /// <summary>
   /// Wlicsw
   /// </summary>
   
   public partial class WlicswBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Product
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Pallet Qty
      /// </summary>
      public decimal palletqty { get; set; }

      /// <summary>
      /// Whse Zone
      /// </summary>
      [StringValidationAttribute]
      public string whzone { get; set; }

      /// <summary>
      /// Counter Bin
      /// </summary>
      [StringValidationAttribute]
      public string bincntr { get; set; }

      /// <summary>
      /// Kit Build Dept
      /// </summary>
      [StringValidationAttribute]
      public string kitbuild { get; set; }

      /// <summary>
      /// Inner Pack
      /// </summary>
      public decimal boxqty { get; set; }

      /// <summary>
      /// Case Qty
      /// </summary>
      public decimal caseqty { get; set; }

      /// <summary>
      /// Pilferage
      /// </summary>
      public bool pilferfl { get; set; }

      /// <summary>
      /// Rotation Count
      /// </summary>
      public decimal rotate { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Bin Loc #1
      /// </summary>
      [StringValidationAttribute]
      public string binloc1 { get; set; }

      /// <summary>
      /// Bin Loc #2
      /// </summary>
      [StringValidationAttribute]
      public string binloc2 { get; set; }

      /// <summary>
      /// binloc1updfl
      /// </summary>
      public bool binloc1updfl { get; set; }

      /// <summary>
      /// binloc2updfl
      /// </summary>
      public bool binloc2updfl { get; set; }

      /// <summary>
      /// Update File?
      /// </summary>
      public bool updatefl { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildWlicswBaseFromRow<T>(DataRow row) where T:WlicswBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.palletqty = row.IsNull("palletqty") ? decimal.Zero : row.Field<decimal>("palletqty");
         entity.whzone = row.IsNull("whzone") ? string.Empty : row.Field<string>("whzone");
         entity.bincntr = row.IsNull("bincntr") ? string.Empty : row.Field<string>("bincntr");
         entity.kitbuild = row.IsNull("kitbuild") ? string.Empty : row.Field<string>("kitbuild");
         entity.boxqty = row.IsNull("boxqty") ? decimal.Zero : row.Field<decimal>("boxqty");
         entity.caseqty = row.IsNull("caseqty") ? decimal.Zero : row.Field<decimal>("caseqty");
         entity.pilferfl = row.Field<bool>("pilferfl");
         entity.rotate = row.IsNull("rotate") ? decimal.Zero : row.Field<decimal>("rotate");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.binloc1 = row.IsNull("binloc1") ? string.Empty : row.Field<string>("binloc1");
         entity.binloc2 = row.IsNull("binloc2") ? string.Empty : row.Field<string>("binloc2");
         entity.binloc1updfl = row.Field<bool>("binloc1updfl");
         entity.binloc2updfl = row.Field<bool>("binloc2updfl");
         entity.updatefl = row.Field<bool>("updatefl");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("wlicswRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromWlicswBase(ref DataRow row, WlicswBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("prod", entity.prod);
         row.SetField("whse", entity.whse);
         row.SetField("palletqty", entity.palletqty);
         row.SetField("whzone", entity.whzone);
         row.SetField("bincntr", entity.bincntr);
         row.SetField("kitbuild", entity.kitbuild);
         row.SetField("boxqty", entity.boxqty);
         row.SetField("caseqty", entity.caseqty);
         row.SetField("pilferfl", entity.pilferfl);
         row.SetField("rotate", entity.rotate);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("binloc1", entity.binloc1);
         row.SetField("binloc2", entity.binloc2);
         row.SetField("binloc1updfl", entity.binloc1updfl);
         row.SetField("binloc2updfl", entity.binloc2updfl);
         row.SetField("updatefl", entity.updatefl);
         row.SetField("transproc", entity.transproc);
         row.SetField("wlicswRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, WlicswBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("prod", entity.prod);
         row.SetField("whse", entity.whse);
         row.SetField("wlicswRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	