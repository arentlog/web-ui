//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SW
{
   /// <summary>
   /// Swstt
   /// </summary>
   
   public partial class SwsttBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string codeiden { get; set; }

      /// <summary>
      /// Identifier
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string codeval { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string descrip { get; set; }

      /// <summary>
      /// Doubletime Hours
      /// </summary>
      public int dthrs { get; set; }

      /// <summary>
      /// Doubletime Hours Per
      /// </summary>
      public bool dthrsperfl { get; set; }

      /// <summary>
      /// Individual Employee
      /// </summary>
      public bool indivempfl { get; set; }

      /// <summary>
      /// Mileage Associated
      /// </summary>
      public bool mileagefl { get; set; }

      /// <summary>
      /// Non-Shift OT
      /// </summary>
      public bool nonshiftotfl { get; set; }

      /// <summary>
      /// Overtime Hours
      /// </summary>
      public int othrs { get; set; }

      /// <summary>
      /// Overtime Hours Per
      /// </summary>
      public bool othrsperfl { get; set; }

      /// <summary>
      /// Payment Status
      /// </summary>
      public bool paystatusfl { get; set; }

      /// <summary>
      /// Probationary Employee Paid
      /// </summary>
      public bool probemppdfl { get; set; }

      /// <summary>
      /// Rate Impact
      /// </summary>
      public bool rateimpactfl { get; set; }

      /// <summary>
      /// Scheduled On
      /// </summary>
      [StringValidationAttribute]
      public string schedontype { get; set; }

      /// <summary>
      /// Last Change Dt
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSwsttBaseFromRow<T>(DataRow row) where T:SwsttBase, new()
      {
         T entity = new T();
         entity.codeiden = row.IsNull("codeiden") ? string.Empty : row.Field<string>("codeiden");
         entity.codeval = row.IsNull("codeval") ? string.Empty : row.Field<string>("codeval");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.descrip = row.IsNull("descrip") ? string.Empty : row.Field<string>("descrip");
         entity.dthrs = row.IsNull("dthrs") ? 0 : row.Field<int>("dthrs");
         entity.dthrsperfl = row.Field<bool>("dthrsperfl");
         entity.indivempfl = row.Field<bool>("indivempfl");
         entity.mileagefl = row.Field<bool>("mileagefl");
         entity.nonshiftotfl = row.Field<bool>("nonshiftotfl");
         entity.othrs = row.IsNull("othrs") ? 0 : row.Field<int>("othrs");
         entity.othrsperfl = row.Field<bool>("othrsperfl");
         entity.paystatusfl = row.Field<bool>("paystatusfl");
         entity.probemppdfl = row.Field<bool>("probemppdfl");
         entity.rateimpactfl = row.Field<bool>("rateimpactfl");
         entity.schedontype = row.IsNull("schedontype") ? string.Empty : row.Field<string>("schedontype");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("swsttRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSwsttBase(ref DataRow row, SwsttBase entity)
      {
         row.SetField("codeiden", entity.codeiden);
         row.SetField("codeval", entity.codeval);
         row.SetField("cono", entity.cono);
         row.SetField("descrip", entity.descrip);
         row.SetField("dthrs", entity.dthrs);
         row.SetField("dthrsperfl", entity.dthrsperfl);
         row.SetField("indivempfl", entity.indivempfl);
         row.SetField("mileagefl", entity.mileagefl);
         row.SetField("nonshiftotfl", entity.nonshiftotfl);
         row.SetField("othrs", entity.othrs);
         row.SetField("othrsperfl", entity.othrsperfl);
         row.SetField("paystatusfl", entity.paystatusfl);
         row.SetField("probemppdfl", entity.probemppdfl);
         row.SetField("rateimpactfl", entity.rateimpactfl);
         row.SetField("schedontype", entity.schedontype);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("swsttRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SwsttBase entity)
      {
         row.SetField("codeiden", entity.codeiden);
         row.SetField("codeval", entity.codeval);
         row.SetField("cono", entity.cono);
         row.SetField("swsttRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	