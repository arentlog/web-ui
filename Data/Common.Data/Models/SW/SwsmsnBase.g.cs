//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SW
{
   /// <summary>
   /// Additional time entry and payroll-related information associated with a specific technician. 
   /// </summary>
   
   public partial class SwsmsnBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Salesrep
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string slsrep { get; set; }

      /// <summary>
      /// Department #
      /// </summary>
      public int deptno { get; set; }

      /// <summary>
      /// Employee #
      /// </summary>
      public decimal empno { get; set; }

      /// <summary>
      /// Employee Type
      /// </summary>
      [StringValidationAttribute]
      public string emptype { get; set; }

      /// <summary>
      /// Allow Job Time Entry
      /// </summary>
      public bool entertimefl { get; set; }

      /// <summary>
      /// Hire Date
      /// </summary>
      public DateTime? hiredt { get; set; }

      /// <summary>
      /// Pay Type
      /// </summary>
      [StringValidationAttribute]
      public string paytype { get; set; }

      /// <summary>
      /// Current Rate
      /// </summary>
      public decimal rate { get; set; }

      /// <summary>
      /// Status
      /// </summary>
      public bool statustype { get; set; }

      /// <summary>
      /// Union #
      /// </summary>
      public int unionno { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Last Change Dt
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSwsmsnBaseFromRow<T>(DataRow row) where T:SwsmsnBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.deptno = row.IsNull("deptno") ? 0 : row.Field<int>("deptno");
         entity.empno = row.IsNull("empno") ? decimal.Zero : row.Field<decimal>("empno");
         entity.emptype = row.IsNull("emptype") ? string.Empty : row.Field<string>("emptype");
         entity.entertimefl = row.Field<bool>("entertimefl");
         entity.hiredt = row.Field<DateTime?>("hiredt");
         entity.paytype = row.IsNull("paytype") ? string.Empty : row.Field<string>("paytype");
         entity.rate = row.IsNull("rate") ? decimal.Zero : row.Field<decimal>("rate");
         entity.slsrep = row.IsNull("slsrep") ? string.Empty : row.Field<string>("slsrep");
         entity.statustype = row.Field<bool>("statustype");
         entity.unionno = row.IsNull("unionno") ? 0 : row.Field<int>("unionno");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("swsmsnRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSwsmsnBase(ref DataRow row, SwsmsnBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("deptno", entity.deptno);
         row.SetField("empno", entity.empno);
         row.SetField("emptype", entity.emptype);
         row.SetField("entertimefl", entity.entertimefl);
         row.SetField("hiredt", entity.hiredt);
         row.SetField("paytype", entity.paytype);
         row.SetField("rate", entity.rate);
         row.SetField("slsrep", entity.slsrep);
         row.SetField("statustype", entity.statustype);
         row.SetField("unionno", entity.unionno);
         row.SetField("whse", entity.whse);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("swsmsnRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SwsmsnBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("slsrep", entity.slsrep);
         row.SetField("swsmsnRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	