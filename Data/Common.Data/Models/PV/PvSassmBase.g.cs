//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.PV
{
   /// <summary>
   /// SX Enterprise GUI Menu Function Setup
   /// </summary>
   
   public partial class PvSassmBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Function
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string functionName { get; set; }

      /// <summary>
      /// Menu Set
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string menuSet { get; set; }

      /// <summary>
      /// Transl. Mgr. Lang
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string trmgrlang { get; set; }

      /// <summary>
      /// Folder Labels
      /// </summary>
      [StringValidationAttribute]
      public string folderLabels { get; set; }

      /// <summary>
      /// Folder Function Names
      /// </summary>
      [StringValidationAttribute]
      public string folderFunctionNames { get; set; }

      /// <summary>
      /// Folder Viewer Names
      /// </summary>
      [StringValidationAttribute]
      public string folderViewerName { get; set; }

      /// <summary>
      /// Key Target
      /// </summary>
      [StringValidationAttribute]
      public string keyViewer { get; set; }

      /// <summary>
      /// Browse Name
      /// </summary>
      [StringValidationAttribute]
      public string browseName { get; set; }

      /// <summary>
      /// Window Title
      /// </summary>
      [StringValidationAttribute]
      public string windowTitle { get; set; }

      /// <summary>
      /// FunctionProcedure
      /// </summary>
      [StringValidationAttribute]
      public string functionProcedure { get; set; }

      /// <summary>
      /// Delimiter
      /// </summary>
      [StringValidationAttribute]
      public string folderDelimiter { get; set; }

      /// <summary>
      /// Parent Menu
      /// </summary>
      [StringValidationAttribute]
      public string parentMenu { get; set; }

      /// <summary>
      /// Position
      /// </summary>
      public int parentPos { get; set; }

      /// <summary>
      /// Menu Title
      /// </summary>
      [StringValidationAttribute]
      public string menutitle { get; set; }

      /// <summary>
      /// Button Label
      /// </summary>
      [StringValidationAttribute]
      public string buttontitle { get; set; }

      /// <summary>
      /// Tooltip
      /// </summary>
      [StringValidationAttribute]
      public string tiptext { get; set; }

      /// <summary>
      /// Record Type
      /// </summary>
      [StringValidationAttribute]
      public string recordtype { get; set; }

      /// <summary>
      /// FunctionDirectory
      /// </summary>
      [StringValidationAttribute]
      public string functionDirectory { get; set; }

      /// <summary>
      /// FolderFunctionType
      /// </summary>
      [StringValidationAttribute]
      public string folderFunctionType { get; set; }

      /// <summary>
      /// Other links
      /// </summary>
      [StringValidationAttribute]
      public string otherLinks { get; set; }

      /// <summary>
      /// Can Execute?
      /// </summary>
      public bool canExecute { get; set; }

      /// <summary>
      /// FolderInstructions
      /// </summary>
      [StringValidationAttribute]
      public string folderInstructions { get; set; }

      /// <summary>
      /// Nxtrend_ourproc
      /// </summary>
      [StringValidationAttribute]
      public string nxtrendOurproc { get; set; }

      /// <summary>
      /// Min_Security_Level
      /// </summary>
      public int minSecurityLevel { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// CRM Subject Value
      /// </summary>
      [StringValidationAttribute]
      public string cRMSubject { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Standard
      /// </summary>
      [StringValidationAttribute]
      public string standardty { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildPvSassmBaseFromRow<T>(DataRow row) where T:PvSassmBase, new()
      {
         T entity = new T();
         entity.functionName = row.IsNull("FunctionName") ? string.Empty : row.Field<string>("FunctionName");
         entity.folderLabels = row.IsNull("FolderLabels") ? string.Empty : row.Field<string>("FolderLabels");
         entity.folderFunctionNames = row.IsNull("FolderFunctionNames") ? string.Empty : row.Field<string>("FolderFunctionNames");
         entity.folderViewerName = row.IsNull("FolderViewerName") ? string.Empty : row.Field<string>("FolderViewerName");
         entity.keyViewer = row.IsNull("KeyViewer") ? string.Empty : row.Field<string>("KeyViewer");
         entity.browseName = row.IsNull("BrowseName") ? string.Empty : row.Field<string>("BrowseName");
         entity.windowTitle = row.IsNull("WindowTitle") ? string.Empty : row.Field<string>("WindowTitle");
         entity.functionProcedure = row.IsNull("FunctionProcedure") ? string.Empty : row.Field<string>("FunctionProcedure");
         entity.folderDelimiter = row.IsNull("FolderDelimiter") ? string.Empty : row.Field<string>("FolderDelimiter");
         entity.menuSet = row.IsNull("MenuSet") ? string.Empty : row.Field<string>("MenuSet");
         entity.parentMenu = row.IsNull("ParentMenu") ? string.Empty : row.Field<string>("ParentMenu");
         entity.parentPos = row.IsNull("ParentPos") ? 0 : row.Field<int>("ParentPos");
         entity.menutitle = row.IsNull("menutitle") ? string.Empty : row.Field<string>("menutitle");
         entity.buttontitle = row.IsNull("buttontitle") ? string.Empty : row.Field<string>("buttontitle");
         entity.tiptext = row.IsNull("tiptext") ? string.Empty : row.Field<string>("tiptext");
         entity.recordtype = row.IsNull("recordtype") ? string.Empty : row.Field<string>("recordtype");
         entity.functionDirectory = row.IsNull("FunctionDirectory") ? string.Empty : row.Field<string>("FunctionDirectory");
         entity.folderFunctionType = row.IsNull("FolderFunctionType") ? string.Empty : row.Field<string>("FolderFunctionType");
         entity.otherLinks = row.IsNull("OtherLinks") ? string.Empty : row.Field<string>("OtherLinks");
         entity.canExecute = row.Field<bool>("CanExecute");
         entity.folderInstructions = row.IsNull("FolderInstructions") ? string.Empty : row.Field<string>("FolderInstructions");
         entity.nxtrendOurproc = row.IsNull("Nxtrend_ourproc") ? string.Empty : row.Field<string>("Nxtrend_ourproc");
         entity.minSecurityLevel = row.IsNull("Min_Security_Level") ? 0 : row.Field<int>("Min_Security_Level");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.cRMSubject = row.IsNull("CRMSubject") ? string.Empty : row.Field<string>("CRMSubject");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.trmgrlang = row.IsNull("trmgrlang") ? string.Empty : row.Field<string>("trmgrlang");
         entity.standardty = row.IsNull("standardty") ? string.Empty : row.Field<string>("standardty");
         entity.rowID = row.Field<byte[]>("pv_sassmRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromPvSassmBase(ref DataRow row, PvSassmBase entity)
      {
         row.SetField("FunctionName", entity.functionName);
         row.SetField("FolderLabels", entity.folderLabels);
         row.SetField("FolderFunctionNames", entity.folderFunctionNames);
         row.SetField("FolderViewerName", entity.folderViewerName);
         row.SetField("KeyViewer", entity.keyViewer);
         row.SetField("BrowseName", entity.browseName);
         row.SetField("WindowTitle", entity.windowTitle);
         row.SetField("FunctionProcedure", entity.functionProcedure);
         row.SetField("FolderDelimiter", entity.folderDelimiter);
         row.SetField("MenuSet", entity.menuSet);
         row.SetField("ParentMenu", entity.parentMenu);
         row.SetField("ParentPos", entity.parentPos);
         row.SetField("menutitle", entity.menutitle);
         row.SetField("buttontitle", entity.buttontitle);
         row.SetField("tiptext", entity.tiptext);
         row.SetField("recordtype", entity.recordtype);
         row.SetField("FunctionDirectory", entity.functionDirectory);
         row.SetField("FolderFunctionType", entity.folderFunctionType);
         row.SetField("OtherLinks", entity.otherLinks);
         row.SetField("CanExecute", entity.canExecute);
         row.SetField("FolderInstructions", entity.folderInstructions);
         row.SetField("Nxtrend_ourproc", entity.nxtrendOurproc);
         row.SetField("Min_Security_Level", entity.minSecurityLevel);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("CRMSubject", entity.cRMSubject);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("transproc", entity.transproc);
         row.SetField("trmgrlang", entity.trmgrlang);
         row.SetField("standardty", entity.standardty);
         row.SetField("pv_sassmRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, PvSassmBase entity)
      {
         row.SetField("functionName", entity.functionName);
         row.SetField("menuSet", entity.menuSet);
         row.SetField("trmgrlang", entity.trmgrlang);
         row.SetField("pv_sassmRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	