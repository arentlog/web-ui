//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.PV
{
   /// <summary>
   /// PvAttachments
   /// </summary>
   
   public partial class PvAttachmentsBase: ModelBase, IUserFields
   {

      /// <summary>
      /// 
      /// </summary>
      [Key,Order]
      public int docID { get; set; }

      /// <summary>
      /// DocKey
      /// </summary>
      [StringValidationAttribute]
      public string docKey { get; set; }

      /// <summary>
      /// DocType
      /// </summary>
      [StringValidationAttribute]
      public string docType { get; set; }

      /// <summary>
      /// DocTitle
      /// </summary>
      [StringValidationAttribute]
      public string docTitle { get; set; }

      /// <summary>
      /// KeyType
      /// </summary>
      [StringValidationAttribute]
      public string keyType { get; set; }

      /// <summary>
      /// FullName
      /// </summary>
      [StringValidationAttribute]
      public string fullName { get; set; }

      /// <summary>
      /// ShortName
      /// </summary>
      [StringValidationAttribute]
      public string shortName { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildPvAttachmentsBaseFromRow<T>(DataRow row) where T:PvAttachmentsBase, new()
      {
         T entity = new T();
         entity.docID = row.IsNull("DocID") ? 0 : row.Field<int>("DocID");
         entity.docKey = row.IsNull("DocKey") ? string.Empty : row.Field<string>("DocKey");
         entity.docType = row.IsNull("DocType") ? string.Empty : row.Field<string>("DocType");
         entity.docTitle = row.IsNull("DocTitle") ? string.Empty : row.Field<string>("DocTitle");
         entity.keyType = row.IsNull("KeyType") ? string.Empty : row.Field<string>("KeyType");
         entity.fullName = row.IsNull("FullName") ? string.Empty : row.Field<string>("FullName");
         entity.shortName = row.IsNull("ShortName") ? string.Empty : row.Field<string>("ShortName");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.rowID = row.Field<byte[]>("pv_attachmentsRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromPvAttachmentsBase(ref DataRow row, PvAttachmentsBase entity)
      {
         row.SetField("DocID", entity.docID);
         row.SetField("DocKey", entity.docKey);
         row.SetField("DocType", entity.docType);
         row.SetField("DocTitle", entity.docTitle);
         row.SetField("KeyType", entity.keyType);
         row.SetField("FullName", entity.fullName);
         row.SetField("ShortName", entity.shortName);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("pv_attachmentsRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, PvAttachmentsBase entity)
      {
         row.SetField("docID", entity.docID);
         row.SetField("pv_attachmentsRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	