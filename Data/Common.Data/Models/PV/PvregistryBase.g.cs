//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.PV
{
   /// <summary>
   /// Holds all persistent settings for users
   /// </summary>
   
   public partial class PvregistryBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Operator
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string oper { get; set; }

      /// <summary>
      /// Section
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string section { get; set; }

      /// <summary>
      /// SubSection
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string subSection { get; set; }

      /// <summary>
      /// Object
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string @object { get; set; }

      /// <summary>
      /// Keyname
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string keyname { get; set; }

      /// <summary>
      /// Function
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string pvfunction { get; set; }

      /// <summary>
      /// Value
      /// </summary>
      [StringValidationAttribute]
      public string keyValue { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildPvregistryBaseFromRow<T>(DataRow row) where T:PvregistryBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.oper = row.IsNull("Oper") ? string.Empty : row.Field<string>("Oper");
         entity.section = row.IsNull("Section") ? string.Empty : row.Field<string>("Section");
         entity.subSection = row.IsNull("SubSection") ? string.Empty : row.Field<string>("SubSection");
         entity.@object = row.IsNull("Object") ? string.Empty : row.Field<string>("Object");
         entity.keyname = row.IsNull("Keyname") ? string.Empty : row.Field<string>("Keyname");
         entity.keyValue = row.IsNull("KeyValue") ? string.Empty : row.Field<string>("KeyValue");
         entity.pvfunction = row.IsNull("pvfunction") ? string.Empty : row.Field<string>("pvfunction");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.rowID = row.Field<byte[]>("pvregistryRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromPvregistryBase(ref DataRow row, PvregistryBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("Oper", entity.oper);
         row.SetField("Section", entity.section);
         row.SetField("SubSection", entity.subSection);
         row.SetField("Object", entity.@object);
         row.SetField("Keyname", entity.keyname);
         row.SetField("KeyValue", entity.keyValue);
         row.SetField("pvfunction", entity.pvfunction);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("transproc", entity.transproc);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("pvregistryRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, PvregistryBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("oper", entity.oper);
         row.SetField("section", entity.section);
         row.SetField("subSection", entity.subSection);
         row.SetField("@object", entity.@object);
         row.SetField("keyname", entity.keyname);
         row.SetField("pvfunction", entity.pvfunction);
         row.SetField("pvregistryRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	