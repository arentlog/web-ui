//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SA
{
   /// <summary>
   /// Currency Tables
   /// </summary>
   
   public partial class SastcBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Currency
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string currencyty { get; set; }

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Short Desc
      /// </summary>
      [StringValidationAttribute]
      public string shortdesc { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string descrip { get; set; }

      /// <summary>
      /// Bank #
      /// </summary>
      public int bankno { get; set; }

      /// <summary>
      /// Currency Acct/Purchase Draft
      /// </summary>
      public bool draftfl { get; set; }

      /// <summary>
      /// Voucher Exchange Rate
      /// </summary>
      public decimal vouchexrate { get; set; }

      /// <summary>
      /// Purchase Exchange Rate
      /// </summary>
      public decimal purchexrate { get; set; }

      /// <summary>
      /// Div#
      /// </summary>
      public int gldivno { get; set; }

      /// <summary>
      /// Dept#
      /// </summary>
      public int gldeptno { get; set; }

      /// <summary>
      /// Acct#
      /// </summary>
      public int glacctno { get; set; }

      /// <summary>
      /// Sub#
      /// </summary>
      public int glsubno { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Print Decimals
      /// </summary>
      public bool decimalfl { get; set; }

      /// <summary>
      /// EDI Currency Code
      /// </summary>
      [StringValidationAttribute]
      public string edicurrency { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Sales Exchange Rate
      /// </summary>
      public decimal salesexrate { get; set; }

      /// <summary>
      /// AR Exchange Rate
      /// </summary>
      public decimal arexrate { get; set; }

      /// <summary>
      /// WT Inventory Exchange Rate
      /// </summary>
      public decimal wtinvexrate1 { get; set; }
      public decimal wtinvexrate2 { get; set; }

      /// <summary>
      /// WT Expense Addon Exchange Rate
      /// </summary>
      public decimal wtexpaddexrate1 { get; set; }
      public decimal wtexpaddexrate2 { get; set; }

      /// <summary>
      /// WT Capitalized Addon Exchange
      /// </summary>
      public decimal wtcapaddexrate1 { get; set; }
      public decimal wtcapaddexrate2 { get; set; }

      /// <summary>
      /// GL Entry Exchange Rate
      /// </summary>
      public decimal glexrate1 { get; set; }
      public decimal glexrate2 { get; set; }

      /// <summary>
      /// IC Exchange Rate
      /// </summary>
      public decimal icexrate1 { get; set; }
      public decimal icexrate2 { get; set; }

      /// <summary>
      /// Budget Exchange Rate
      /// </summary>
      public decimal budgetexrate { get; set; }

      /// <summary>
      /// Currency
      /// </summary>
      [StringValidationAttribute]
      public string stndcurrcd { get; set; }

      /// <summary>
      /// Currency Symbol
      /// </summary>
      [StringValidationAttribute]
      public string currsymbol { get; set; }

      /// <summary>
      /// Acct
      /// </summary>
      public int rvglacctno { get; set; }

      /// <summary>
      /// Dept
      /// </summary>
      public int rvgldeptno { get; set; }

      /// <summary>
      /// Div No
      /// </summary>
      public int rvgldivno { get; set; }

      /// <summary>
      /// Exch Rate
      /// </summary>
      public decimal rvglexchrate { get; set; }

      /// <summary>
      /// SubAcct No
      /// </summary>
      public int rvglsubno { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSastcBaseFromRow<T>(DataRow row) where T:SastcBase, new()
      {
         T entity = new T();
         entity.currencyty = row.IsNull("currencyty") ? string.Empty : row.Field<string>("currencyty");
         entity.shortdesc = row.IsNull("shortdesc") ? string.Empty : row.Field<string>("shortdesc");
         entity.descrip = row.IsNull("descrip") ? string.Empty : row.Field<string>("descrip");
         entity.bankno = row.IsNull("bankno") ? 0 : row.Field<int>("bankno");
         entity.draftfl = row.Field<bool>("draftfl");
         entity.vouchexrate = row.IsNull("vouchexrate") ? decimal.Zero : row.Field<decimal>("vouchexrate");
         entity.purchexrate = row.IsNull("purchexrate") ? decimal.Zero : row.Field<decimal>("purchexrate");
         entity.gldivno = row.IsNull("gldivno") ? 0 : row.Field<int>("gldivno");
         entity.gldeptno = row.IsNull("gldeptno") ? 0 : row.Field<int>("gldeptno");
         entity.glacctno = row.IsNull("glacctno") ? 0 : row.Field<int>("glacctno");
         entity.glsubno = row.IsNull("glsubno") ? 0 : row.Field<int>("glsubno");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.decimalfl = row.Field<bool>("decimalfl");
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.edicurrency = row.IsNull("edicurrency") ? string.Empty : row.Field<string>("edicurrency");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.salesexrate = row.IsNull("salesexrate") ? decimal.Zero : row.Field<decimal>("salesexrate");
         entity.arexrate = row.IsNull("arexrate") ? decimal.Zero : row.Field<decimal>("arexrate");
         entity.wtinvexrate1 = row.IsNull("wtinvexrate1") ? decimal.Zero : row.Field<decimal>("wtinvexrate1");
         entity.wtinvexrate2 = row.IsNull("wtinvexrate2") ? decimal.Zero : row.Field<decimal>("wtinvexrate2");
         entity.wtexpaddexrate1 = row.IsNull("wtexpaddexrate1") ? decimal.Zero : row.Field<decimal>("wtexpaddexrate1");
         entity.wtexpaddexrate2 = row.IsNull("wtexpaddexrate2") ? decimal.Zero : row.Field<decimal>("wtexpaddexrate2");
         entity.wtcapaddexrate1 = row.IsNull("wtcapaddexrate1") ? decimal.Zero : row.Field<decimal>("wtcapaddexrate1");
         entity.wtcapaddexrate2 = row.IsNull("wtcapaddexrate2") ? decimal.Zero : row.Field<decimal>("wtcapaddexrate2");
         entity.glexrate1 = row.IsNull("glexrate1") ? decimal.Zero : row.Field<decimal>("glexrate1");
         entity.glexrate2 = row.IsNull("glexrate2") ? decimal.Zero : row.Field<decimal>("glexrate2");
         entity.icexrate1 = row.IsNull("icexrate1") ? decimal.Zero : row.Field<decimal>("icexrate1");
         entity.icexrate2 = row.IsNull("icexrate2") ? decimal.Zero : row.Field<decimal>("icexrate2");
         entity.budgetexrate = row.IsNull("budgetexrate") ? decimal.Zero : row.Field<decimal>("budgetexrate");
         entity.stndcurrcd = row.IsNull("stndcurrcd") ? string.Empty : row.Field<string>("stndcurrcd");
         entity.currsymbol = row.IsNull("currsymbol") ? string.Empty : row.Field<string>("currsymbol");
         entity.rvglacctno = row.IsNull("rvglacctno") ? 0 : row.Field<int>("rvglacctno");
         entity.rvgldeptno = row.IsNull("rvgldeptno") ? 0 : row.Field<int>("rvgldeptno");
         entity.rvgldivno = row.IsNull("rvgldivno") ? 0 : row.Field<int>("rvgldivno");
         entity.rvglexchrate = row.IsNull("rvglexchrate") ? decimal.Zero : row.Field<decimal>("rvglexchrate");
         entity.rvglsubno = row.IsNull("rvglsubno") ? 0 : row.Field<int>("rvglsubno");
         entity.rowID = row.Field<byte[]>("sastcRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSastcBase(ref DataRow row, SastcBase entity)
      {
         row.SetField("currencyty", entity.currencyty);
         row.SetField("shortdesc", entity.shortdesc);
         row.SetField("descrip", entity.descrip);
         row.SetField("bankno", entity.bankno);
         row.SetField("draftfl", entity.draftfl);
         row.SetField("vouchexrate", entity.vouchexrate);
         row.SetField("purchexrate", entity.purchexrate);
         row.SetField("gldivno", entity.gldivno);
         row.SetField("gldeptno", entity.gldeptno);
         row.SetField("glacctno", entity.glacctno);
         row.SetField("glsubno", entity.glsubno);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("decimalfl", entity.decimalfl);
         row.SetField("cono", entity.cono);
         row.SetField("edicurrency", entity.edicurrency);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("salesexrate", entity.salesexrate);
         row.SetField("arexrate", entity.arexrate);
         row.SetField("wtinvexrate1", entity.wtinvexrate1);
         row.SetField("wtinvexrate2", entity.wtinvexrate2);
         row.SetField("wtexpaddexrate1", entity.wtexpaddexrate1);
         row.SetField("wtexpaddexrate2", entity.wtexpaddexrate2);
         row.SetField("wtcapaddexrate1", entity.wtcapaddexrate1);
         row.SetField("wtcapaddexrate2", entity.wtcapaddexrate2);
         row.SetField("glexrate1", entity.glexrate1);
         row.SetField("glexrate2", entity.glexrate2);
         row.SetField("icexrate1", entity.icexrate1);
         row.SetField("icexrate2", entity.icexrate2);
         row.SetField("budgetexrate", entity.budgetexrate);
         row.SetField("stndcurrcd", entity.stndcurrcd);
         row.SetField("currsymbol", entity.currsymbol);
         row.SetField("rvglacctno", entity.rvglacctno);
         row.SetField("rvgldeptno", entity.rvgldeptno);
         row.SetField("rvgldivno", entity.rvgldivno);
         row.SetField("rvglexchrate", entity.rvglexchrate);
         row.SetField("rvglsubno", entity.rvglsubno);
         row.SetField("sastcRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SastcBase entity)
      {
         row.SetField("currencyty", entity.currencyty);
         row.SetField("cono", entity.cono);
         row.SetField("sastcRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	