//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SA
{
   /// <summary>
   /// Journal Assignment
   /// </summary>
   [EntityType("Journal Assignment","sasj.detail","SourceSystemJournalEntry")]
   public partial class SasjBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [BodContext(BodPart.AcctEntity,""),BusContext(BusPart.AcctEntity),Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Journal #
      /// </summary>
      [BusContext(BusPart.Name),DrillbackParam("pk",1),BodID(1,RequiredId.True),Key,Order]
      public int jrnlno { get; set; }

      /// <summary>
      /// # of Postings
      /// </summary>
      public int nopostings { get; set; }

      /// <summary>
      /// Total Credits
      /// </summary>
      public decimal totcr { get; set; }

      /// <summary>
      /// Total Debits
      /// </summary>
      public decimal totdr { get; set; }

      /// <summary>
      /// Hash of #'s
      /// </summary>
      public decimal tothash { get; set; }

      /// <summary>
      /// Assigned
      /// </summary>
      public DateTime? opendt { get; set; }

      /// <summary>
      /// Assign Time
      /// </summary>
      [StringValidationAttribute]
      public string opentm { get; set; }

      /// <summary>
      /// Closed
      /// </summary>
      public DateTime? closedt { get; set; }

      /// <summary>
      /// Close Time
      /// </summary>
      [StringValidationAttribute]
      public string closetm { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Operator
      /// </summary>
      [StringValidationAttribute]
      public string oper2 { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// R&D Function Name
      /// </summary>
      [StringValidationAttribute]
      public string ourproc { get; set; }

      /// <summary>
      /// Printed
      /// </summary>
      public bool printfl { get; set; }

      /// <summary>
      /// Closed
      /// </summary>
      public bool closefl { get; set; }

      /// <summary>
      /// FRx Interfaced
      /// </summary>
      [StringValidationAttribute]
      public string frxinterface { get; set; }

      /// <summary>
      /// Proof Debits
      /// </summary>
      public decimal proofdr { get; set; }

      /// <summary>
      /// Function Name
      /// </summary>
      [StringValidationAttribute]
      public string currproc { get; set; }

      /// <summary>
      /// Proof Credits
      /// </summary>
      public decimal proofcr { get; set; }

      /// <summary>
      /// Period
      /// </summary>
      public int period { get; set; }

      /// <summary>
      /// Intellex Dt
      /// </summary>
      public DateTime? intellexdt { get; set; }

      /// <summary>
      /// Date
      /// </summary>
      public DateTime? postdt { get; set; }

      /// <summary>
      /// Batch Name
      /// </summary>
      [StringValidationAttribute]
      public string batchnm { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// Balanced
      /// </summary>
      public bool balancefl { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// SM Merged
      /// </summary>
      public bool smmergedfl { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// Fiscal Period
      /// </summary>
      public int perfisc { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// Batch Open
      /// </summary>
      public bool batchfl { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// transdttmz
      /// </summary>
      public DateTime? transdttmz { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSasjBaseFromRow<T>(DataRow row) where T:SasjBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.jrnlno = row.IsNull("jrnlno") ? 0 : row.Field<int>("jrnlno");
         entity.nopostings = row.IsNull("nopostings") ? 0 : row.Field<int>("nopostings");
         entity.totcr = row.IsNull("totcr") ? decimal.Zero : row.Field<decimal>("totcr");
         entity.totdr = row.IsNull("totdr") ? decimal.Zero : row.Field<decimal>("totdr");
         entity.tothash = row.IsNull("tothash") ? decimal.Zero : row.Field<decimal>("tothash");
         entity.opendt = row.Field<DateTime?>("opendt");
         entity.opentm = row.IsNull("opentm") ? string.Empty : row.Field<string>("opentm");
         entity.closedt = row.Field<DateTime?>("closedt");
         entity.closetm = row.IsNull("closetm") ? string.Empty : row.Field<string>("closetm");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.oper2 = row.IsNull("oper2") ? string.Empty : row.Field<string>("oper2");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.ourproc = row.IsNull("ourproc") ? string.Empty : row.Field<string>("ourproc");
         entity.printfl = row.Field<bool>("printfl");
         entity.closefl = row.Field<bool>("closefl");
         entity.frxinterface = row.IsNull("frxinterface") ? string.Empty : row.Field<string>("frxinterface");
         entity.proofdr = row.IsNull("proofdr") ? decimal.Zero : row.Field<decimal>("proofdr");
         entity.currproc = row.IsNull("currproc") ? string.Empty : row.Field<string>("currproc");
         entity.proofcr = row.IsNull("proofcr") ? decimal.Zero : row.Field<decimal>("proofcr");
         entity.period = row.IsNull("period") ? 0 : row.Field<int>("period");
         entity.intellexdt = row.Field<DateTime?>("intellexdt");
         entity.postdt = row.Field<DateTime?>("postdt");
         entity.batchnm = row.IsNull("batchnm") ? string.Empty : row.Field<string>("batchnm");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.balancefl = row.Field<bool>("balancefl");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.smmergedfl = row.Field<bool>("smmergedfl");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.perfisc = row.IsNull("perfisc") ? 0 : row.Field<int>("perfisc");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.batchfl = row.Field<bool>("batchfl");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.transdttmz = row.Field<DateTime?>("transdttmz");
         entity.rowID = row.Field<byte[]>("sasjRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSasjBase(ref DataRow row, SasjBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("nopostings", entity.nopostings);
         row.SetField("totcr", entity.totcr);
         row.SetField("totdr", entity.totdr);
         row.SetField("tothash", entity.tothash);
         row.SetField("opendt", entity.opendt);
         row.SetField("opentm", entity.opentm);
         row.SetField("closedt", entity.closedt);
         row.SetField("closetm", entity.closetm);
         row.SetField("operinit", entity.operinit);
         row.SetField("oper2", entity.oper2);
         row.SetField("transtm", entity.transtm);
         row.SetField("transdt", entity.transdt);
         row.SetField("ourproc", entity.ourproc);
         row.SetField("printfl", entity.printfl);
         row.SetField("closefl", entity.closefl);
         row.SetField("frxinterface", entity.frxinterface);
         row.SetField("proofdr", entity.proofdr);
         row.SetField("currproc", entity.currproc);
         row.SetField("proofcr", entity.proofcr);
         row.SetField("period", entity.period);
         row.SetField("intellexdt", entity.intellexdt);
         row.SetField("postdt", entity.postdt);
         row.SetField("batchnm", entity.batchnm);
         row.SetField("user1", entity.user1);
         row.SetField("balancefl", entity.balancefl);
         row.SetField("user2", entity.user2);
         row.SetField("smmergedfl", entity.smmergedfl);
         row.SetField("user3", entity.user3);
         row.SetField("perfisc", entity.perfisc);
         row.SetField("user4", entity.user4);
         row.SetField("batchfl", entity.batchfl);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("transproc", entity.transproc);
         row.SetField("transdttmz", entity.transdttmz);
         row.SetField("sasjRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SasjBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("jrnlno", entity.jrnlno);
         row.SetField("sasjRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	