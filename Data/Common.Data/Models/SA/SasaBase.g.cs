//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SA
{
   /// <summary>
   /// All System Information
   /// </summary>
   
   public partial class SasaBase: ModelBase, IUserFields
   {

      /// <summary>
      /// License Date
      /// </summary>
      public DateTime? licensedt { get; set; }

      /// <summary>
      /// Security #
      /// </summary>
      public int secure { get; set; }

      /// <summary>
      /// Time Out in Minutes
      /// </summary>
      public int timeout { get; set; }

      /// <summary>
      /// WT #
      /// </summary>
      public int begwtno { get; set; }

      /// <summary>
      /// Ending WT #
      /// </summary>
      public int endwtno { get; set; }

      /// <summary>
      /// Next WT #
      /// </summary>
      public int nextwtno { get; set; }

      /// <summary>
      /// checkdig
      /// </summary>
      public int checkdig { get; set; }

      /// <summary>
      /// A/P
      /// </summary>
      public bool modapfl { get; set; }

      /// <summary>
      /// A/R
      /// </summary>
      public bool modarfl { get; set; }

      /// <summary>
      /// I/B
      /// </summary>
      public bool modibfl { get; set; }

      /// <summary>
      /// C/M
      /// </summary>
      public bool modcmfl { get; set; }

      /// <summary>
      /// G/L
      /// </summary>
      public bool modglfl { get; set; }

      /// <summary>
      /// I/C
      /// </summary>
      public bool modicfl { get; set; }

      /// <summary>
      /// K/P
      /// </summary>
      public bool modkpfl { get; set; }

      /// <summary>
      /// O/E
      /// </summary>
      public bool modoefl { get; set; }

      /// <summary>
      /// Office
      /// </summary>
      public bool modoifl { get; set; }

      /// <summary>
      /// P/O
      /// </summary>
      public bool modpofl { get; set; }

      /// <summary>
      /// Cold Storage Directory
      /// </summary>
      [StringValidationAttribute]
      public string colddir { get; set; }

      /// <summary>
      /// Vertex
      /// </summary>
      public bool modvtfl { get; set; }

      /// <summary>
      /// Purchased Product
      /// </summary>
      [StringValidationAttribute]
      public string randdproduct { get; set; }

      /// <summary>
      /// W/T
      /// </summary>
      public bool modwtfl { get; set; }

      /// <summary>
      /// W/M
      /// </summary>
      public bool modwmfl { get; set; }

      /// <summary>
      /// EDI
      /// </summary>
      public bool modedfl { get; set; }

      /// <summary>
      /// Monitor Mode
      /// </summary>
      public bool monitorfl { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// S/V
      /// </summary>
      public bool modsvfl { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// Interface to CM from OIM
      /// </summary>
      public bool oimcmfl { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// Require CM Activity Create
      /// </summary>
      public bool oimcmreqfl { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// Software Licensed To
      /// </summary>
      [StringValidationAttribute]
      public string licenseto { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// R & D Customer #
      /// </summary>
      public decimal rdcustno { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// License #
      /// </summary>
      [StringValidationAttribute]
      public string licenseno { get; set; }

      /// <summary>
      /// AR Update CM
      /// </summary>
      public bool cmupdarfl { get; set; }

      /// <summary>
      /// CM Update AR
      /// </summary>
      public bool cmupdcmfl { get; set; }

      /// <summary>
      /// CM TB Contact #
      /// </summary>
      public int cmtbcontact { get; set; }

      /// <summary>
      /// CM Prospect Type
      /// </summary>
      [StringValidationAttribute]
      public string cmprostype { get; set; }

      /// <summary>
      /// cmcreatefmar
      /// </summary>
      public bool cmcreatefmar { get; set; }

      /// <summary>
      /// Use OIM Time Clock Function
      /// </summary>
      public bool oimpyfl { get; set; }

      /// <summary>
      /// Documentation Directory
      /// </summary>
      [StringValidationAttribute]
      public string docdir { get; set; }

      /// <summary>
      /// P/M
      /// </summary>
      public bool modpmfl { get; set; }

      /// <summary>
      /// No of Users
      /// </summary>
      public int nousers { get; set; }

      /// <summary>
      /// B/P
      /// </summary>
      public bool modbpfl { get; set; }

      /// <summary>
      /// System File Location
      /// </summary>
      [StringValidationAttribute]
      public string sysdir { get; set; }

      /// <summary>
      /// Alpha Cust#
      /// </summary>
      public bool custnofl { get; set; }

      /// <summary>
      /// P/R
      /// </summary>
      public bool modprfl { get; set; }

      /// <summary>
      /// T/Q
      /// </summary>
      public bool modtqfl { get; set; }

      /// <summary>
      /// S/L
      /// </summary>
      public bool modslfl { get; set; }

      /// <summary>
      /// I/S
      /// </summary>
      public bool modisfl { get; set; }

      /// <summary>
      /// V/A
      /// </summary>
      public bool modvafl { get; set; }

      /// <summary>
      /// B/A
      /// </summary>
      public bool modbafl { get; set; }

      /// <summary>
      /// S/W
      /// </summary>
      public bool modswfl { get; set; }

      /// <summary>
      /// RS Mod Fl
      /// </summary>
      public bool modrsfl { get; set; }

      /// <summary>
      /// Force Login
      /// </summary>
      public bool forcelogin { get; set; }

      /// <summary>
      /// W/L
      /// </summary>
      public bool modwlfl { get; set; }

      /// <summary>
      /// O/G
      /// </summary>
      public bool modogfl { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// J/M
      /// </summary>
      public bool modjmfl { get; set; }

      /// <summary>
      /// Licensing Grace Period
      /// </summary>
      public int graceperiod { get; set; }

      /// <summary>
      /// O/T
      /// </summary>
      public bool modotfl { get; set; }

      /// <summary>
      /// PTX Whse
      /// </summary>
      [StringValidationAttribute]
      public string ptxwhse { get; set; }

      /// <summary>
      /// PTX Company #
      /// </summary>
      public int ptxcono { get; set; }

      /// <summary>
      /// Password Expire Days
      /// </summary>
      public int pwmaxdays { get; set; }

      /// <summary>
      /// Password Change Days
      /// </summary>
      public int pwmindays { get; set; }

      /// <summary>
      /// Max Password
      /// </summary>
      public int pwmaxlength { get; set; }

      /// <summary>
      /// Min Password
      /// </summary>
      public int pwminlength { get; set; }

      /// <summary>
      /// Min Numeric Chars
      /// </summary>
      public int pwminnumeric { get; set; }

      /// <summary>
      /// Min Special Chars
      /// </summary>
      public int pwminspecial { get; set; }

      /// <summary>
      /// Prev Passwords Unusable
      /// </summary>
      public int pwminprev { get; set; }

      /// <summary>
      /// Max Password Attempts
      /// </summary>
      public int pwmaxattempt { get; set; }

      /// <summary>
      /// Max Logins
      /// </summary>
      public int pwmaxlogins { get; set; }

      /// <summary>
      /// Min Alpha Chars
      /// </summary>
      public int pwminalpha { get; set; }

      /// <summary>
      /// PTX Fee Whse
      /// </summary>
      [StringValidationAttribute]
      public string ptxfeewhse { get; set; }

      /// <summary>
      /// Force Company # Separation
      /// </summary>
      public bool forceconosepfl { get; set; }

      /// <summary>
      /// CC Encrypt Code Old
      /// </summary>
      public string ccenccodeold { get; set; }

      /// <summary>
      /// CC Encrypt Code New
      /// </summary>
      public string ccenccodenew { get; set; }

      /// <summary>
      /// CC Master SeqNo Old
      /// </summary>
      public int ccmstrseqold { get; set; }

      /// <summary>
      /// CC Master SeqNo New
      /// </summary>
      public int ccmstrseqnew { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [Key,StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSasaBaseFromRow<T>(DataRow row) where T:SasaBase, new()
      {
         T entity = new T();
         entity.licensedt = row.Field<DateTime?>("licensedt");
         entity.secure = row.IsNull("secure") ? 0 : row.Field<int>("secure");
         entity.timeout = row.IsNull("timeout") ? 0 : row.Field<int>("timeout");
         entity.begwtno = row.IsNull("begwtno") ? 0 : row.Field<int>("begwtno");
         entity.endwtno = row.IsNull("endwtno") ? 0 : row.Field<int>("endwtno");
         entity.nextwtno = row.IsNull("nextwtno") ? 0 : row.Field<int>("nextwtno");
         entity.checkdig = row.IsNull("checkdig") ? 0 : row.Field<int>("checkdig");
         entity.modapfl = row.Field<bool>("modapfl");
         entity.modarfl = row.Field<bool>("modarfl");
         entity.modibfl = row.Field<bool>("modibfl");
         entity.modcmfl = row.Field<bool>("modcmfl");
         entity.modglfl = row.Field<bool>("modglfl");
         entity.modicfl = row.Field<bool>("modicfl");
         entity.modkpfl = row.Field<bool>("modkpfl");
         entity.modoefl = row.Field<bool>("modoefl");
         entity.modoifl = row.Field<bool>("modoifl");
         entity.modpofl = row.Field<bool>("modpofl");
         entity.colddir = row.IsNull("colddir") ? string.Empty : row.Field<string>("colddir");
         entity.modvtfl = row.Field<bool>("modvtfl");
         entity.randdproduct = row.IsNull("randdproduct") ? string.Empty : row.Field<string>("randdproduct");
         entity.modwtfl = row.Field<bool>("modwtfl");
         entity.modwmfl = row.Field<bool>("modwmfl");
         entity.modedfl = row.Field<bool>("modedfl");
         entity.monitorfl = row.Field<bool>("monitorfl");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.modsvfl = row.Field<bool>("modsvfl");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.oimcmfl = row.Field<bool>("oimcmfl");
         entity.user6 = row.Field<decimal?>("user6");
         entity.oimcmreqfl = row.Field<bool>("oimcmreqfl");
         entity.user7 = row.Field<decimal?>("user7");
         entity.licenseto = row.IsNull("licenseto") ? string.Empty : row.Field<string>("licenseto");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.rdcustno = row.IsNull("rdcustno") ? decimal.Zero : row.Field<decimal>("rdcustno");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.licenseno = row.IsNull("licenseno") ? string.Empty : row.Field<string>("licenseno");
         entity.cmupdarfl = row.Field<bool>("cmupdarfl");
         entity.cmupdcmfl = row.Field<bool>("cmupdcmfl");
         entity.cmtbcontact = row.IsNull("cmtbcontact") ? 0 : row.Field<int>("cmtbcontact");
         entity.cmprostype = row.IsNull("cmprostype") ? string.Empty : row.Field<string>("cmprostype");
         entity.cmcreatefmar = row.Field<bool>("cmcreatefmar");
         entity.oimpyfl = row.Field<bool>("oimpyfl");
         entity.docdir = row.IsNull("docdir") ? string.Empty : row.Field<string>("docdir");
         entity.modpmfl = row.Field<bool>("modpmfl");
         entity.nousers = row.IsNull("nousers") ? 0 : row.Field<int>("nousers");
         entity.modbpfl = row.Field<bool>("modbpfl");
         entity.sysdir = row.IsNull("sysdir") ? string.Empty : row.Field<string>("sysdir");
         entity.custnofl = row.Field<bool>("custnofl");
         entity.modprfl = row.Field<bool>("modprfl");
         entity.modtqfl = row.Field<bool>("modtqfl");
         entity.modslfl = row.Field<bool>("modslfl");
         entity.modisfl = row.Field<bool>("modisfl");
         entity.modvafl = row.Field<bool>("modvafl");
         entity.modbafl = row.Field<bool>("modbafl");
         entity.modswfl = row.Field<bool>("modswfl");
         entity.modrsfl = row.Field<bool>("modrsfl");
         entity.forcelogin = row.Field<bool>("forcelogin");
         entity.modwlfl = row.Field<bool>("modwlfl");
         entity.modogfl = row.Field<bool>("modogfl");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.modjmfl = row.Field<bool>("modjmfl");
         entity.graceperiod = row.IsNull("graceperiod") ? 0 : row.Field<int>("graceperiod");
         entity.modotfl = row.Field<bool>("modotfl");
         entity.ptxwhse = row.IsNull("ptxwhse") ? string.Empty : row.Field<string>("ptxwhse");
         entity.ptxcono = row.IsNull("ptxcono") ? 0 : row.Field<int>("ptxcono");
         entity.pwmaxdays = row.IsNull("pwmaxdays") ? 0 : row.Field<int>("pwmaxdays");
         entity.pwmindays = row.IsNull("pwmindays") ? 0 : row.Field<int>("pwmindays");
         entity.pwmaxlength = row.IsNull("pwmaxlength") ? 0 : row.Field<int>("pwmaxlength");
         entity.pwminlength = row.IsNull("pwminlength") ? 0 : row.Field<int>("pwminlength");
         entity.pwminnumeric = row.IsNull("pwminnumeric") ? 0 : row.Field<int>("pwminnumeric");
         entity.pwminspecial = row.IsNull("pwminspecial") ? 0 : row.Field<int>("pwminspecial");
         entity.pwminprev = row.IsNull("pwminprev") ? 0 : row.Field<int>("pwminprev");
         entity.pwmaxattempt = row.IsNull("pwmaxattempt") ? 0 : row.Field<int>("pwmaxattempt");
         entity.pwmaxlogins = row.IsNull("pwmaxlogins") ? 0 : row.Field<int>("pwmaxlogins");
         entity.pwminalpha = row.IsNull("pwminalpha") ? 0 : row.Field<int>("pwminalpha");
         entity.ptxfeewhse = row.IsNull("ptxfeewhse") ? string.Empty : row.Field<string>("ptxfeewhse");
         entity.forceconosepfl = row.Field<bool>("forceconosepfl");
         entity.ccenccodeold = row.Field<byte[]>("ccenccodeold").ToStringEncoded();
         entity.ccenccodenew = row.Field<byte[]>("ccenccodenew").ToStringEncoded();
         entity.ccmstrseqold = row.IsNull("ccmstrseqold") ? 0 : row.Field<int>("ccmstrseqold");
         entity.ccmstrseqnew = row.IsNull("ccmstrseqnew") ? 0 : row.Field<int>("ccmstrseqnew");
         entity.rowID = row.Field<byte[]>("sasaRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSasaBase(ref DataRow row, SasaBase entity)
      {
         row.SetField("licensedt", entity.licensedt);
         row.SetField("secure", entity.secure);
         row.SetField("timeout", entity.timeout);
         row.SetField("begwtno", entity.begwtno);
         row.SetField("endwtno", entity.endwtno);
         row.SetField("nextwtno", entity.nextwtno);
         row.SetField("checkdig", entity.checkdig);
         row.SetField("modapfl", entity.modapfl);
         row.SetField("modarfl", entity.modarfl);
         row.SetField("modibfl", entity.modibfl);
         row.SetField("modcmfl", entity.modcmfl);
         row.SetField("modglfl", entity.modglfl);
         row.SetField("modicfl", entity.modicfl);
         row.SetField("modkpfl", entity.modkpfl);
         row.SetField("modoefl", entity.modoefl);
         row.SetField("modoifl", entity.modoifl);
         row.SetField("modpofl", entity.modpofl);
         row.SetField("colddir", entity.colddir);
         row.SetField("modvtfl", entity.modvtfl);
         row.SetField("randdproduct", entity.randdproduct);
         row.SetField("modwtfl", entity.modwtfl);
         row.SetField("modwmfl", entity.modwmfl);
         row.SetField("modedfl", entity.modedfl);
         row.SetField("monitorfl", entity.monitorfl);
         row.SetField("operinit", entity.operinit);
         row.SetField("user1", entity.user1);
         row.SetField("transdt", entity.transdt);
         row.SetField("user2", entity.user2);
         row.SetField("transtm", entity.transtm);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("modsvfl", entity.modsvfl);
         row.SetField("user5", entity.user5);
         row.SetField("oimcmfl", entity.oimcmfl);
         row.SetField("user6", entity.user6);
         row.SetField("oimcmreqfl", entity.oimcmreqfl);
         row.SetField("user7", entity.user7);
         row.SetField("licenseto", entity.licenseto);
         row.SetField("user8", entity.user8);
         row.SetField("rdcustno", entity.rdcustno);
         row.SetField("user9", entity.user9);
         row.SetField("licenseno", entity.licenseno);
         row.SetField("cmupdarfl", entity.cmupdarfl);
         row.SetField("cmupdcmfl", entity.cmupdcmfl);
         row.SetField("cmtbcontact", entity.cmtbcontact);
         row.SetField("cmprostype", entity.cmprostype);
         row.SetField("cmcreatefmar", entity.cmcreatefmar);
         row.SetField("oimpyfl", entity.oimpyfl);
         row.SetField("docdir", entity.docdir);
         row.SetField("modpmfl", entity.modpmfl);
         row.SetField("nousers", entity.nousers);
         row.SetField("modbpfl", entity.modbpfl);
         row.SetField("sysdir", entity.sysdir);
         row.SetField("custnofl", entity.custnofl);
         row.SetField("modprfl", entity.modprfl);
         row.SetField("modtqfl", entity.modtqfl);
         row.SetField("modslfl", entity.modslfl);
         row.SetField("modisfl", entity.modisfl);
         row.SetField("modvafl", entity.modvafl);
         row.SetField("modbafl", entity.modbafl);
         row.SetField("modswfl", entity.modswfl);
         row.SetField("modrsfl", entity.modrsfl);
         row.SetField("forcelogin", entity.forcelogin);
         row.SetField("modwlfl", entity.modwlfl);
         row.SetField("modogfl", entity.modogfl);
         row.SetField("transproc", entity.transproc);
         row.SetField("modjmfl", entity.modjmfl);
         row.SetField("graceperiod", entity.graceperiod);
         row.SetField("modotfl", entity.modotfl);
         row.SetField("ptxwhse", entity.ptxwhse);
         row.SetField("ptxcono", entity.ptxcono);
         row.SetField("pwmaxdays", entity.pwmaxdays);
         row.SetField("pwmindays", entity.pwmindays);
         row.SetField("pwmaxlength", entity.pwmaxlength);
         row.SetField("pwminlength", entity.pwminlength);
         row.SetField("pwminnumeric", entity.pwminnumeric);
         row.SetField("pwminspecial", entity.pwminspecial);
         row.SetField("pwminprev", entity.pwminprev);
         row.SetField("pwmaxattempt", entity.pwmaxattempt);
         row.SetField("pwmaxlogins", entity.pwmaxlogins);
         row.SetField("pwminalpha", entity.pwminalpha);
         row.SetField("ptxfeewhse", entity.ptxfeewhse);
         row.SetField("forceconosepfl", entity.forceconosepfl);
         row.SetField("ccenccodeold", entity.ccenccodeold.ToByteArray());
         row.SetField("ccenccodenew", entity.ccenccodenew.ToByteArray());
         row.SetField("ccmstrseqold", entity.ccmstrseqold);
         row.SetField("ccmstrseqnew", entity.ccmstrseqnew);
         row.SetField("sasaRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SasaBase entity)
      {
         row.SetField("sasaRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	