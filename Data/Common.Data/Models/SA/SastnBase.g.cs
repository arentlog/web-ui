//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SA
{
   /// <summary>
   /// System Admin Tables, Numeric
   /// </summary>
   
   public partial class SastnBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string codeiden { get; set; }

      /// <summary>
      /// Value
      /// </summary>
      [Key,Order]
      public int codeval { get; set; }

      /// <summary>
      /// Description
      /// </summary>
      [StringValidationAttribute]
      public string descrip { get; set; }

      /// <summary>
      /// Taxable
      /// </summary>
      public bool addtaxfl { get; set; }

      /// <summary>
      /// addontype
      /// </summary>
      public bool addontype { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Addon Amt
      /// </summary>
      public decimal addonamt { get; set; }

      /// <summary>
      /// Div#
      /// </summary>
      public int gldivno { get; set; }

      /// <summary>
      /// Dept#
      /// </summary>
      public int gldeptno { get; set; }

      /// <summary>
      /// EDI Addon Code
      /// </summary>
      [StringValidationAttribute]
      public string ediaddoncd { get; set; }

      /// <summary>
      /// Acct#
      /// </summary>
      public int glacctno { get; set; }

      /// <summary>
      /// Freight Appl
      /// </summary>
      [StringValidationAttribute]
      public string frghtcalcty { get; set; }

      /// <summary>
      /// Sub#
      /// </summary>
      public int glsubno { get; set; }

      /// <summary>
      /// Refund Type
      /// </summary>
      public int refundtype { get; set; }

      /// <summary>
      /// ID #
      /// </summary>
      [StringValidationAttribute]
      public string fedtaxid { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr1 { get; set; }
      [StringValidationAttribute]
      public string addr2 { get; set; }

      /// <summary>
      /// Addon Type
      /// </summary>
      public bool ccaddontype { get; set; }

      /// <summary>
      /// Name
      /// </summary>
      [StringValidationAttribute]
      public string name { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// City
      /// </summary>
      [StringValidationAttribute]
      public string city { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// State
      /// </summary>
      [StringValidationAttribute]
      public string state { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// Zip Code
      /// </summary>
      [StringValidationAttribute]
      public string zipcd { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// Add On Minimum
      /// </summary>
      public decimal addonmin { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// Zero Addon Level
      /// </summary>
      public decimal addonzero { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// Tax Group
      /// </summary>
      public int taxgroup { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// Div No 2
      /// </summary>
      public int gldivno2 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// GL Dept 2
      /// </summary>
      public int gldeptno2 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// GL Acct 2
      /// </summary>
      public int glacctno2 { get; set; }

      /// <summary>
      /// GL Sub# 2
      /// </summary>
      public int glsubno2 { get; set; }

      /// <summary>
      /// Credit Card
      /// </summary>
      public bool cctendfl { get; set; }

      /// <summary>
      /// Processor Type
      /// </summary>
      [StringValidationAttribute]
      public string processor { get; set; }

      /// <summary>
      /// Approval Addon
      /// </summary>
      public decimal ccaddon { get; set; }

      /// <summary>
      /// Credit Card Customer
      /// </summary>
      [StringValidationAttribute]
      public string cccustnm { get; set; }

      /// <summary>
      /// Minimum Authorization Amount
      /// </summary>
      public decimal authmin { get; set; }

      /// <summary>
      /// Default Charge Category
      /// </summary>
      [StringValidationAttribute]
      public string chgcat { get; set; }

      /// <summary>
      /// Credit Card Editing
      /// </summary>
      public int ccedit { get; set; }

      /// <summary>
      /// Backorder Approval Days
      /// </summary>
      public int boappdays { get; set; }

      /// <summary>
      /// Check Authorization Type
      /// </summary>
      [StringValidationAttribute]
      public string chkauthty { get; set; }

      /// <summary>
      /// Post to AR
      /// </summary>
      public bool arpost { get; set; }

      /// <summary>
      /// Prompt for Pre-Auth?
      /// </summary>
      public bool preauthppt { get; set; }

      /// <summary>
      /// Prompt for Category?
      /// </summary>
      public bool catppt { get; set; }

      /// <summary>
      /// Prompt for Card ID
      /// </summary>
      public bool ccidppt { get; set; }

      /// <summary>
      /// Address Verification?
      /// </summary>
      public bool addveri { get; set; }

      /// <summary>
      /// Check Authorization
      /// </summary>
      public bool chkauth { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }

      /// <summary>
      /// Bank #
      /// </summary>
      public int bankno { get; set; }

      /// <summary>
      /// Currency
      /// </summary>
      [StringValidationAttribute]
      public string currencyty { get; set; }

      /// <summary>
      /// Address
      /// </summary>
      [StringValidationAttribute]
      public string addr3 { get; set; }

      /// <summary>
      /// GL Impact
      /// </summary>
      public bool glimpactfl { get; set; }

      /// <summary>
      /// Freight
      /// </summary>
      public bool frtaddonfl { get; set; }

      /// <summary>
      /// Merchant ID
      /// </summary>
      [StringValidationAttribute]
      public string merchantid { get; set; }

      /// <summary>
      /// Add On Maximum
      /// </summary>
      public decimal addonmax { get; set; }

      /// <summary>
      /// Value
      /// </summary>
      public int tiedoeaddonno { get; set; }

      /// <summary>
      /// Environmental Handling Fee
      /// </summary>
      public bool ehffl { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }


      /// <summary>
      /// string
      /// </summary>
      public string CompleteAddress { get { return this.addr1 + "," + this.city + "," + this.state + "," + this.zipcd; } }


      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSastnBaseFromRow<T>(DataRow row) where T:SastnBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.codeiden = row.IsNull("codeiden") ? string.Empty : row.Field<string>("codeiden");
         entity.codeval = row.IsNull("codeval") ? 0 : row.Field<int>("codeval");
         entity.descrip = row.IsNull("descrip") ? string.Empty : row.Field<string>("descrip");
         entity.addtaxfl = row.Field<bool>("addtaxfl");
         entity.addontype = row.Field<bool>("addontype");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.addonamt = row.IsNull("addonamt") ? decimal.Zero : row.Field<decimal>("addonamt");
         entity.gldivno = row.IsNull("gldivno") ? 0 : row.Field<int>("gldivno");
         entity.gldeptno = row.IsNull("gldeptno") ? 0 : row.Field<int>("gldeptno");
         entity.ediaddoncd = row.IsNull("ediaddoncd") ? string.Empty : row.Field<string>("ediaddoncd");
         entity.glacctno = row.IsNull("glacctno") ? 0 : row.Field<int>("glacctno");
         entity.frghtcalcty = row.IsNull("frghtcalcty") ? string.Empty : row.Field<string>("frghtcalcty");
         entity.glsubno = row.IsNull("glsubno") ? 0 : row.Field<int>("glsubno");
         entity.refundtype = row.IsNull("refundtype") ? 0 : row.Field<int>("refundtype");
         entity.fedtaxid = row.IsNull("fedtaxid") ? string.Empty : row.Field<string>("fedtaxid");
         entity.addr1 = row.IsNull("addr1") ? string.Empty : row.Field<string>("addr1");
         entity.addr2 = row.IsNull("addr2") ? string.Empty : row.Field<string>("addr2");
         entity.ccaddontype = row.Field<bool>("ccaddontype");
         entity.name = row.IsNull("name") ? string.Empty : row.Field<string>("name");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.city = row.IsNull("city") ? string.Empty : row.Field<string>("city");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.state = row.IsNull("state") ? string.Empty : row.Field<string>("state");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.zipcd = row.IsNull("zipcd") ? string.Empty : row.Field<string>("zipcd");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.addonmin = row.IsNull("addonmin") ? decimal.Zero : row.Field<decimal>("addonmin");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.addonzero = row.IsNull("addonzero") ? decimal.Zero : row.Field<decimal>("addonzero");
         entity.user6 = row.Field<decimal?>("user6");
         entity.taxgroup = row.IsNull("taxgroup") ? 0 : row.Field<int>("taxgroup");
         entity.user7 = row.Field<decimal?>("user7");
         entity.gldivno2 = row.IsNull("gldivno2") ? 0 : row.Field<int>("gldivno2");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.gldeptno2 = row.IsNull("gldeptno2") ? 0 : row.Field<int>("gldeptno2");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.glacctno2 = row.IsNull("glacctno2") ? 0 : row.Field<int>("glacctno2");
         entity.glsubno2 = row.IsNull("glsubno2") ? 0 : row.Field<int>("glsubno2");
         entity.cctendfl = row.Field<bool>("cctendfl");
         entity.processor = row.IsNull("processor") ? string.Empty : row.Field<string>("processor");
         entity.ccaddon = row.IsNull("ccaddon") ? decimal.Zero : row.Field<decimal>("ccaddon");
         entity.cccustnm = row.IsNull("cccustnm") ? string.Empty : row.Field<string>("cccustnm");
         entity.authmin = row.IsNull("authmin") ? decimal.Zero : row.Field<decimal>("authmin");
         entity.chgcat = row.IsNull("chgcat") ? string.Empty : row.Field<string>("chgcat");
         entity.ccedit = row.IsNull("ccedit") ? 0 : row.Field<int>("ccedit");
         entity.boappdays = row.IsNull("boappdays") ? 0 : row.Field<int>("boappdays");
         entity.chkauthty = row.IsNull("chkauthty") ? string.Empty : row.Field<string>("chkauthty");
         entity.arpost = row.Field<bool>("arpost");
         entity.preauthppt = row.Field<bool>("preauthppt");
         entity.catppt = row.Field<bool>("catppt");
         entity.ccidppt = row.Field<bool>("ccidppt");
         entity.addveri = row.Field<bool>("addveri");
         entity.chkauth = row.Field<bool>("chkauth");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.bankno = row.IsNull("bankno") ? 0 : row.Field<int>("bankno");
         entity.currencyty = row.IsNull("currencyty") ? string.Empty : row.Field<string>("currencyty");
         entity.addr3 = row.IsNull("addr3") ? string.Empty : row.Field<string>("addr3");
         entity.glimpactfl = row.Field<bool>("glimpactfl");
         entity.frtaddonfl = row.Field<bool>("frtaddonfl");
         entity.merchantid = row.IsNull("merchantid") ? string.Empty : row.Field<string>("merchantid");
         entity.addonmax = row.IsNull("addonmax") ? decimal.Zero : row.Field<decimal>("addonmax");
         entity.tiedoeaddonno = row.IsNull("tiedoeaddonno") ? 0 : row.Field<int>("tiedoeaddonno");
         entity.ehffl = row.Field<bool>("ehffl");
         entity.rowID = row.Field<byte[]>("sastnRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSastnBase(ref DataRow row, SastnBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("codeiden", entity.codeiden);
         row.SetField("codeval", entity.codeval);
         row.SetField("descrip", entity.descrip);
         row.SetField("addtaxfl", entity.addtaxfl);
         row.SetField("addontype", entity.addontype);
         row.SetField("operinit", entity.operinit);
         row.SetField("transdt", entity.transdt);
         row.SetField("transtm", entity.transtm);
         row.SetField("addonamt", entity.addonamt);
         row.SetField("gldivno", entity.gldivno);
         row.SetField("gldeptno", entity.gldeptno);
         row.SetField("ediaddoncd", entity.ediaddoncd);
         row.SetField("glacctno", entity.glacctno);
         row.SetField("frghtcalcty", entity.frghtcalcty);
         row.SetField("glsubno", entity.glsubno);
         row.SetField("refundtype", entity.refundtype);
         row.SetField("fedtaxid", entity.fedtaxid);
         row.SetField("addr1", entity.addr1);
         row.SetField("addr2", entity.addr2);
         row.SetField("ccaddontype", entity.ccaddontype);
         row.SetField("name", entity.name);
         row.SetField("user1", entity.user1);
         row.SetField("city", entity.city);
         row.SetField("user2", entity.user2);
         row.SetField("state", entity.state);
         row.SetField("user3", entity.user3);
         row.SetField("zipcd", entity.zipcd);
         row.SetField("user4", entity.user4);
         row.SetField("addonmin", entity.addonmin);
         row.SetField("user5", entity.user5);
         row.SetField("addonzero", entity.addonzero);
         row.SetField("user6", entity.user6);
         row.SetField("taxgroup", entity.taxgroup);
         row.SetField("user7", entity.user7);
         row.SetField("gldivno2", entity.gldivno2);
         row.SetField("user8", entity.user8);
         row.SetField("gldeptno2", entity.gldeptno2);
         row.SetField("user9", entity.user9);
         row.SetField("glacctno2", entity.glacctno2);
         row.SetField("glsubno2", entity.glsubno2);
         row.SetField("cctendfl", entity.cctendfl);
         row.SetField("processor", entity.processor);
         row.SetField("ccaddon", entity.ccaddon);
         row.SetField("cccustnm", entity.cccustnm);
         row.SetField("authmin", entity.authmin);
         row.SetField("chgcat", entity.chgcat);
         row.SetField("ccedit", entity.ccedit);
         row.SetField("boappdays", entity.boappdays);
         row.SetField("chkauthty", entity.chkauthty);
         row.SetField("arpost", entity.arpost);
         row.SetField("preauthppt", entity.preauthppt);
         row.SetField("catppt", entity.catppt);
         row.SetField("ccidppt", entity.ccidppt);
         row.SetField("addveri", entity.addveri);
         row.SetField("chkauth", entity.chkauth);
         row.SetField("transproc", entity.transproc);
         row.SetField("bankno", entity.bankno);
         row.SetField("currencyty", entity.currencyty);
         row.SetField("addr3", entity.addr3);
         row.SetField("glimpactfl", entity.glimpactfl);
         row.SetField("frtaddonfl", entity.frtaddonfl);
         row.SetField("merchantid", entity.merchantid);
         row.SetField("addonmax", entity.addonmax);
         row.SetField("tiedoeaddonno", entity.tiedoeaddonno);
         row.SetField("ehffl", entity.ehffl);
         row.SetField("sastnRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SastnBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("codeiden", entity.codeiden);
         row.SetField("codeval", entity.codeval);
         row.SetField("sastnRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	