//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.SA
{
   /// <summary>
   /// System Tax Table
   /// </summary>
   
   public partial class SasstBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Zip Code
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string zipcd { get; set; }

      /// <summary>
      /// Taxing State
      /// </summary>
      [StringValidationAttribute]
      public string statecd { get; set; }

      /// <summary>
      /// Locality
      /// </summary>
      [StringValidationAttribute]
      public string taxauth { get; set; }

      /// <summary>
      /// Last Change Date
      /// </summary>
      public DateTime? transdt { get; set; }

      /// <summary>
      /// Last Change By
      /// </summary>
      [StringValidationAttribute]
      public string operinit { get; set; }

      /// <summary>
      /// Last Change Time
      /// </summary>
      [StringValidationAttribute]
      public string transtm { get; set; }

      /// <summary>
      /// Whse
      /// </summary>
      [StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// City
      /// </summary>
      [StringValidationAttribute]
      public string citycd { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// County
      /// </summary>
      [StringValidationAttribute]
      public string countycd { get; set; }

      /// <summary>
      /// Other 1
      /// </summary>
      [StringValidationAttribute]
      public string other1cd { get; set; }

      /// <summary>
      /// Other 2
      /// </summary>
      [StringValidationAttribute]
      public string other2cd { get; set; }

      /// <summary>
      /// Trans Proc
      /// </summary>
      [StringValidationAttribute]
      public string transproc { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildSasstBaseFromRow<T>(DataRow row) where T:SasstBase, new()
      {
         T entity = new T();
         entity.zipcd = row.IsNull("zipcd") ? string.Empty : row.Field<string>("zipcd");
         entity.statecd = row.IsNull("statecd") ? string.Empty : row.Field<string>("statecd");
         entity.taxauth = row.IsNull("taxauth") ? string.Empty : row.Field<string>("taxauth");
         entity.transdt = row.Field<DateTime?>("transdt");
         entity.operinit = row.IsNull("operinit") ? string.Empty : row.Field<string>("operinit");
         entity.transtm = row.IsNull("transtm") ? string.Empty : row.Field<string>("transtm");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.citycd = row.IsNull("citycd") ? string.Empty : row.Field<string>("citycd");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.countycd = row.IsNull("countycd") ? string.Empty : row.Field<string>("countycd");
         entity.other1cd = row.IsNull("other1cd") ? string.Empty : row.Field<string>("other1cd");
         entity.other2cd = row.IsNull("other2cd") ? string.Empty : row.Field<string>("other2cd");
         entity.transproc = row.IsNull("transproc") ? string.Empty : row.Field<string>("transproc");
         entity.rowID = row.Field<byte[]>("sasstRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromSasstBase(ref DataRow row, SasstBase entity)
      {
         row.SetField("zipcd", entity.zipcd);
         row.SetField("statecd", entity.statecd);
         row.SetField("taxauth", entity.taxauth);
         row.SetField("transdt", entity.transdt);
         row.SetField("operinit", entity.operinit);
         row.SetField("transtm", entity.transtm);
         row.SetField("whse", entity.whse);
         row.SetField("citycd", entity.citycd);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("countycd", entity.countycd);
         row.SetField("other1cd", entity.other1cd);
         row.SetField("other2cd", entity.other2cd);
         row.SetField("transproc", entity.transproc);
         row.SetField("sasstRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, SasstBase entity)
      {
         row.SetField("zipcd", entity.zipcd);
         row.SetField("sasstRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	