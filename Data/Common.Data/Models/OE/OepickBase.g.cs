//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 12700 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;
       
namespace Infor.Sxe.Common.Data.Models.OE
{
   /// <summary>
   /// Pick Ticket Bulk Work File
   /// </summary>
   
   public partial class OepickBase: ModelBase, IUserFields
   {

      /// <summary>
      /// Company #
      /// </summary>
      [Key,Order]
      public int cono { get; set; }

      /// <summary>
      /// Store As
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string reportnm { get; set; }

      /// <summary>
      /// Operator
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string oper2 { get; set; }

      /// <summary>
      /// Product #
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string prod { get; set; }

      /// <summary>
      /// Serial/Lot #
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string serlotno { get; set; }

      /// <summary>
      /// Extended Type
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string serlottype { get; set; }

      /// <summary>
      /// Default Whse
      /// </summary>
      [Key,Order,StringValidationAttribute]
      public string whse { get; set; }

      /// <summary>
      /// Ship Qty
      /// </summary>
      public decimal qtyship { get; set; }

      /// <summary>
      /// Bin Loc # 1
      /// </summary>
      [StringValidationAttribute]
      public string binloc { get; set; }

      /// <summary>
      /// User 1
      /// </summary>
      [StringValidationAttribute]
      public string user1 { get; set; }

      /// <summary>
      /// User 2
      /// </summary>
      [StringValidationAttribute]
      public string user2 { get; set; }

      /// <summary>
      /// User 3
      /// </summary>
      [StringValidationAttribute]
      public string user3 { get; set; }

      /// <summary>
      /// User 4
      /// </summary>
      [StringValidationAttribute]
      public string user4 { get; set; }

      /// <summary>
      /// User 5
      /// </summary>
      [StringValidationAttribute]
      public string user5 { get; set; }

      /// <summary>
      /// User 6
      /// </summary>
      public decimal? user6 { get; set; }

      /// <summary>
      /// User 7
      /// </summary>
      public decimal? user7 { get; set; }

      /// <summary>
      /// User 8
      /// </summary>
      public DateTime? user8 { get; set; }

      /// <summary>
      /// User 9
      /// </summary>
      public DateTime? user9 { get; set; }

      /// <summary>
      /// Qty From Receivers
      /// </summary>
      public decimal qtyfmrcvs { get; set; }
      
      /// <summary>
      /// Row ID
      /// </summary>
      [StringValidationAttribute]
      public string rowID { get; set; }



      /// <summary>
      /// Build a class from a database row
      /// </summary>
      public static T BuildOepickBaseFromRow<T>(DataRow row) where T:OepickBase, new()
      {
         T entity = new T();
         entity.cono = row.IsNull("cono") ? 0 : row.Field<int>("cono");
         entity.reportnm = row.IsNull("reportnm") ? string.Empty : row.Field<string>("reportnm");
         entity.oper2 = row.IsNull("oper2") ? string.Empty : row.Field<string>("oper2");
         entity.prod = row.IsNull("prod") ? string.Empty : row.Field<string>("prod");
         entity.qtyship = row.IsNull("qtyship") ? decimal.Zero : row.Field<decimal>("qtyship");
         entity.binloc = row.IsNull("binloc") ? string.Empty : row.Field<string>("binloc");
         entity.serlotno = row.IsNull("serlotno") ? string.Empty : row.Field<string>("serlotno");
         entity.serlottype = row.IsNull("serlottype") ? string.Empty : row.Field<string>("serlottype");
         entity.whse = row.IsNull("whse") ? string.Empty : row.Field<string>("whse");
         entity.user1 = row.IsNull("user1") ? string.Empty : row.Field<string>("user1");
         entity.user2 = row.IsNull("user2") ? string.Empty : row.Field<string>("user2");
         entity.user3 = row.IsNull("user3") ? string.Empty : row.Field<string>("user3");
         entity.user4 = row.IsNull("user4") ? string.Empty : row.Field<string>("user4");
         entity.user5 = row.IsNull("user5") ? string.Empty : row.Field<string>("user5");
         entity.user6 = row.Field<decimal?>("user6");
         entity.user7 = row.Field<decimal?>("user7");
         entity.user8 = row.Field<DateTime?>("user8");
         entity.user9 = row.Field<DateTime?>("user9");
         entity.qtyfmrcvs = row.IsNull("qtyfmrcvs") ? decimal.Zero : row.Field<decimal>("qtyfmrcvs");
         entity.rowID = row.Field<byte[]>("oepickRowID").ToStringEncoded();
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromOepickBase(ref DataRow row, OepickBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("reportnm", entity.reportnm);
         row.SetField("oper2", entity.oper2);
         row.SetField("prod", entity.prod);
         row.SetField("qtyship", entity.qtyship);
         row.SetField("binloc", entity.binloc);
         row.SetField("serlotno", entity.serlotno);
         row.SetField("serlottype", entity.serlottype);
         row.SetField("whse", entity.whse);
         row.SetField("user1", entity.user1);
         row.SetField("user2", entity.user2);
         row.SetField("user3", entity.user3);
         row.SetField("user4", entity.user4);
         row.SetField("user5", entity.user5);
         row.SetField("user6", entity.user6);
         row.SetField("user7", entity.user7);
         row.SetField("user8", entity.user8);
         row.SetField("user9", entity.user9);
         row.SetField("qtyfmrcvs", entity.qtyfmrcvs);
         row.SetField("oepickRowID", entity.rowID.ToByteArray());
      }   
      
      /// <summary>
      /// Build a minimal row from a class (key fields only)
      /// </summary>
      public static void BuildMinimalRow(ref DataRow row, OepickBase entity)
      {
         row.SetField("cono", entity.cono);
         row.SetField("reportnm", entity.reportnm);
         row.SetField("oper2", entity.oper2);
         row.SetField("prod", entity.prod);
         row.SetField("serlotno", entity.serlotno);
         row.SetField("serlottype", entity.serlottype);
         row.SetField("whse", entity.whse);
         row.SetField("oepickRowID", entity.rowID.ToByteArray());
      }   
   }
}
#pragma warning restore 1591
	