//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsehfeecriteria;
   using Models.Pdsehfeeresults;
   using Models.Pdsoeline;
   using Models.Pdsoeonetimecost;
   using Models.Pdsmessaging;
   using Models.Pdsoeonetimerebate;
   using Models.Pdsoelineicspclookup;
   using Models.Pdsoelinelinetiehdr;
   using Models.Pdsoelinelinetie;
   using Models.Pdscorereturntype;
   using Models.Pdscorereturnautoalloc;
   using Models.Pdscoreallocation;
   using Models.Pdscoreallocationupdate;
   using Models.Pdscoreserials;
   using Models.Pdsmultilinesourcing;
   using Models.Pdsloadtcomps;
   using Models.Pdskitcreatedetailstt;
   using Models.Pdsloadoelinesettings;
   using Models.Pdsoeheaderretrieve;
   using Models.Pdsoecalcordshptot;
   using Models.Pdsoeiolines;
   using Models.Pdsoehdr;
   using Models.Pdswlstatus;
   using Models.Pdsoelinepricing;
   using Models.Pdsoemultilinecreate;
   using Models.Pdsoelinetiedvaord;
   using Models.Pdsoelostbusinesslines;
   using Models.Pdsoelinesuperavail;
   using Models.Pdsoelinerebate;
   using Models.Pdsoeonetimerebleavefield;
   using Models.Complex;

   public partial class AsoelineextraAdapter : AdapterBase<pdsContextDataSet>
   {
      private OEProxyAppObject proxyAppObject;
      
      public AsoelineextraAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsoelineextraAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Ehfeeresults OEGetDefaultEHFee(Ehfeecriteria ehfeecriteria)
      {   
         var result = new Ehfeeresults();
         
         var pdsehfeecriteria = new pdsehfeecriteriaDataSet();
            
         var pdsehfeeresults = new pdsehfeeresultsDataSet();
            
         DataRow ttblehfeecriteriaCriteria = pdsehfeecriteria.ttblehfeecriteria.NewttblehfeecriteriaRow();
         Ehfeecriteria.UpdateRowFromEhfeecriteria(ref ttblehfeecriteriaCriteria, ehfeecriteria);
         pdsehfeecriteria.ttblehfeecriteria.AddttblehfeecriteriaRow((pdsehfeecriteriaDataSet.ttblehfeecriteriaRow)ttblehfeecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEGetDefaultEHFee - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEGetDefaultEHFee(ref pdsContext,  pdsehfeecriteria, out pdsehfeeresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEGetDefaultEHFee - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsehfeecriteria); 
    
         if (pdsehfeeresults.ttblehfeeresults.Count > 0) 
         { 
             result = Ehfeeresults.BuildEhfeeresultsFromRow(pdsehfeeresults.ttblehfeeresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineextraOEOneTimeCostInitResponseAPI OEOneTimeCostInit(AsoelineextraOEOneTimeCostInitRequestAPI AsoelineextraOEOneTimeCostInitRequestAPI)
      {   
         var result = new AsoelineextraOEOneTimeCostInitResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoeonetimecost = new pdsoeonetimecostDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOEOneTimeCostInitRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         var  lInInquiry = AsoelineextraOEOneTimeCostInitRequestAPI.lInInquiry;
            
         
         NLogLoggerP.Trace("OEOneTimeCostInit - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeCostInit(ref pdsContext,  lInInquiry,  pdsoeline, out pdsoeonetimecost, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeCostInit - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeonetimecost.ttbloeonetimecost.Count > 0)
         {
            result.oeonetimecost = Oeonetimecost.BuildOeonetimecostFromRow(pdsoeonetimecost.ttbloeonetimecost[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOEOneTimeCostLeaveFieldResponseAPI OEOneTimeCostLeaveField(AsoelineextraOEOneTimeCostLeaveFieldRequestAPI AsoelineextraOEOneTimeCostLeaveFieldRequestAPI)
      {   
         var result = new AsoelineextraOEOneTimeCostLeaveFieldResponseAPI();
         
         var pdsoeonetimecost = new pdsoeonetimecostDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeonetimecostRow = pdsoeonetimecost.ttbloeonetimecost.NewttbloeonetimecostRow();
         Oeonetimecost.UpdateRowFromOeonetimecost(ref ttbloeonetimecostRow, AsoelineextraOEOneTimeCostLeaveFieldRequestAPI.oeonetimecost);
         pdsoeonetimecost.ttbloeonetimecost.AddttbloeonetimecostRow((pdsoeonetimecostDataSet.ttbloeonetimecostRow)ttbloeonetimecostRow);
          
         var  pvFilename = AsoelineextraOEOneTimeCostLeaveFieldRequestAPI.pvFilename;
            
         
         NLogLoggerP.Trace("OEOneTimeCostLeaveField - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeCostLeaveField(ref pdsContext,  pvFilename, ref pdsoeonetimecost, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeCostLeaveField - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeonetimecost); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeonetimecost.ttbloeonetimecost.Count > 0)
         {
            result.oeonetimecost = Oeonetimecost.BuildOeonetimecostFromRow(pdsoeonetimecost.ttbloeonetimecost[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOEOneTimeCostUpdtResponseAPI OEOneTimeCostUpdt(AsoelineextraOEOneTimeCostUpdtRequestAPI AsoelineextraOEOneTimeCostUpdtRequestAPI)
      {   
         var result = new AsoelineextraOEOneTimeCostUpdtResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoeonetimecost = new pdsoeonetimecostDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOEOneTimeCostUpdtRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloeonetimecostRow = pdsoeonetimecost.ttbloeonetimecost.NewttbloeonetimecostRow();
         Oeonetimecost.UpdateRowFromOeonetimecost(ref ttbloeonetimecostRow, AsoelineextraOEOneTimeCostUpdtRequestAPI.oeonetimecost);
         pdsoeonetimecost.ttbloeonetimecost.AddttbloeonetimecostRow((pdsoeonetimecostDataSet.ttbloeonetimecostRow)ttbloeonetimecostRow);
          
         
         NLogLoggerP.Trace("OEOneTimeCostUpdt - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeCostUpdt(ref pdsContext, ref pdsoeline,  pdsoeonetimecost, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeCostUpdt - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOEOneTimeRebateInitResponseAPI OEOneTimeRebateInit(Oeline oeline)
      {   
         var result = new AsoelineextraOEOneTimeRebateInitResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoeonetimerebate = new pdsoeonetimerebateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOneTimeRebateInit - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeRebateInit(ref pdsContext,  pdsoeline, out pdsoeonetimerebate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeRebateInit - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeonetimerebate.ttbloeonetimerebate.Count > 0)
         {
            result.oeonetimerebate = Oeonetimerebate.BuildOeonetimerebateFromRow(pdsoeonetimerebate.ttbloeonetimerebate[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOEOneTimeRebateUpdtResponseAPI OEOneTimeRebateUpdt(AsoelineextraOEOneTimeRebateUpdtRequestAPI AsoelineextraOEOneTimeRebateUpdtRequestAPI)
      {   
         var result = new AsoelineextraOEOneTimeRebateUpdtResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoeonetimerebate = new pdsoeonetimerebateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOEOneTimeRebateUpdtRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloeonetimerebateRow = pdsoeonetimerebate.ttbloeonetimerebate.NewttbloeonetimerebateRow();
         Oeonetimerebate.UpdateRowFromOeonetimerebate(ref ttbloeonetimerebateRow, AsoelineextraOEOneTimeRebateUpdtRequestAPI.oeonetimerebate);
         pdsoeonetimerebate.ttbloeonetimerebate.AddttbloeonetimerebateRow((pdsoeonetimerebateDataSet.ttbloeonetimerebateRow)ttbloeonetimerebateRow);
          
         
         NLogLoggerP.Trace("OEOneTimeRebateUpdt - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeRebateUpdt(ref pdsContext, ref pdsoeline,  pdsoeonetimerebate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeRebateUpdt - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOELineICSPCLoadResponseAPI OELineICSPCLoad(Oelineicspccriteria oelineicspccriteria)
      {   
         var result = new AsoelineextraOELineICSPCLoadResponseAPI();
         
         var pdsoelineicspclookup = new pdsoelineicspclookupDataSet();
            
         DataRow ttbloelineicspccriteriaCriteria = pdsoelineicspclookup.ttbloelineicspccriteria.NewttbloelineicspccriteriaRow();
         Oelineicspccriteria.UpdateRowFromOelineicspccriteria(ref ttbloelineicspccriteriaCriteria, oelineicspccriteria);
         pdsoelineicspclookup.ttbloelineicspccriteria.AddttbloelineicspccriteriaRow((pdsoelineicspclookupDataSet.ttbloelineicspccriteriaRow)ttbloelineicspccriteriaCriteria);
            
         bool lMoreRecords = false;
         string cWarningMsg = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineICSPCLoad - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineICSPCLoad(ref pdsContext, ref pdsoelineicspclookup, out lMoreRecords, out cWarningMsg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineICSPCLoad - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineicspclookup); 
    
         if (pdsoelineicspclookup.ttbloelineicspccriteria.Count > 0)
         {
            result.oelineicspccriteria = Oelineicspccriteria.BuildOelineicspccriteriaFromRow(pdsoelineicspclookup.ttbloelineicspccriteria[0]);
         }
                    
         foreach (DataRow row in pdsoelineicspclookup.ttbloelineicspcresults)
         {
            result.oelineicspcresults.Add(Oelineicspcresults.BuildOelineicspcresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public AsoelineextraOELineICSPCUpdateResponseAPI OELineICSPCUpdate(AsoelineextraOELineICSPCUpdateRequestAPI AsoelineextraOELineICSPCUpdateRequestAPI)
      {   
         var result = new AsoelineextraOELineICSPCUpdateResponseAPI();
         
         var pdsoelineicspclookup = new pdsoelineicspclookupDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineicspccriteriaRow = pdsoelineicspclookup.ttbloelineicspccriteria.NewttbloelineicspccriteriaRow();
         Oelineicspccriteria.UpdateRowFromOelineicspccriteria(ref ttbloelineicspccriteriaRow, AsoelineextraOELineICSPCUpdateRequestAPI.oelineicspccriteria);
         pdsoelineicspclookup.ttbloelineicspccriteria.AddttbloelineicspccriteriaRow((pdsoelineicspclookupDataSet.ttbloelineicspccriteriaRow)ttbloelineicspccriteriaRow);
          
         foreach (var obj in AsoelineextraOELineICSPCUpdateRequestAPI.oelineicspcresults)
         {
            DataRow ttbloelineicspcresultsRow = pdsoelineicspclookup.ttbloelineicspcresults.NewttbloelineicspcresultsRow();
            Oelineicspcresults.UpdateRowFromOelineicspcresults(ref ttbloelineicspcresultsRow, obj);
            pdsoelineicspclookup.ttbloelineicspcresults.AddttbloelineicspcresultsRow((pdsoelineicspclookupDataSet.ttbloelineicspcresultsRow)ttbloelineicspcresultsRow);
         }
          
         
         NLogLoggerP.Trace("OELineICSPCUpdate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineICSPCUpdate(ref pdsContext, ref pdsoelineicspclookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineICSPCUpdate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineicspclookup); 
    
         if (pdsoelineicspclookup.ttbloelineicspccriteria.Count > 0)
         {
            result.oelineicspccriteria = Oelineicspccriteria.BuildOelineicspccriteriaFromRow(pdsoelineicspclookup.ttbloelineicspccriteria[0]);
         }
                    
         foreach (DataRow row in pdsoelineicspclookup.ttbloelineicspcresults)
         {
            result.oelineicspcresults.Add(Oelineicspcresults.BuildOelineicspcresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> OELineCompTieUpdate(AsoelineextraOELineCompTieUpdateRequestAPI AsoelineextraOELineCompTieUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOELineCompTieUpdateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         foreach (var obj in AsoelineextraOELineCompTieUpdateRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineextraOELineCompTieUpdateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("OELineCompTieUpdate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineCompTieUpdate(ref pdsContext,  pdsoeline,  pdsoelinelinetiehdr,  pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCompTieUpdate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Corereturntype CoreReturnTypeInit(Corereturntype corereturntype)
      {   
         var result = new Corereturntype();
         
         var pdscorereturntype = new pdscorereturntypeDataSet();
            
         DataRow ttblcorereturntypeCriteria = pdscorereturntype.ttblcorereturntype.NewttblcorereturntypeRow();
         Corereturntype.UpdateRowFromCorereturntype(ref ttblcorereturntypeCriteria, corereturntype);
         pdscorereturntype.ttblcorereturntype.AddttblcorereturntypeRow((pdscorereturntypeDataSet.ttblcorereturntypeRow)ttblcorereturntypeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreReturnTypeInit - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreReturnTypeInit(ref pdsContext, ref pdscorereturntype, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreReturnTypeInit - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscorereturntype); 
    
         if (pdscorereturntype.ttblcorereturntype.Count > 0) 
         { 
             result = Corereturntype.BuildCorereturntypeFromRow(pdscorereturntype.ttblcorereturntype[0]);
         } 
              
          
         return result;
          
      }

      public Corereturntype CoreReturnTypeChangeType(Corereturntype corereturntype)
      {   
         var result = new Corereturntype();
         
         var pdscorereturntype = new pdscorereturntypeDataSet();
            
         DataRow ttblcorereturntypeCriteria = pdscorereturntype.ttblcorereturntype.NewttblcorereturntypeRow();
         Corereturntype.UpdateRowFromCorereturntype(ref ttblcorereturntypeCriteria, corereturntype);
         pdscorereturntype.ttblcorereturntype.AddttblcorereturntypeRow((pdscorereturntypeDataSet.ttblcorereturntypeRow)ttblcorereturntypeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreReturnTypeChangeType - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreReturnTypeChangeType(ref pdsContext, ref pdscorereturntype, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreReturnTypeChangeType - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscorereturntype); 
    
         if (pdscorereturntype.ttblcorereturntype.Count > 0) 
         { 
             result = Corereturntype.BuildCorereturntypeFromRow(pdscorereturntype.ttblcorereturntype[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineextraCoreReturnTypeUpdateResponseAPI CoreReturnTypeUpdate(Corereturntype corereturntype)
      {   
         var result = new AsoelineextraCoreReturnTypeUpdateResponseAPI();
         
         var pdscorereturntype = new pdscorereturntypeDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblcorereturntypeCriteria = pdscorereturntype.ttblcorereturntype.NewttblcorereturntypeRow();
         Corereturntype.UpdateRowFromCorereturntype(ref ttblcorereturntypeCriteria, corereturntype);
         pdscorereturntype.ttblcorereturntype.AddttblcorereturntypeRow((pdscorereturntypeDataSet.ttblcorereturntypeRow)ttblcorereturntypeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreReturnTypeUpdate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreReturnTypeUpdate(ref pdsContext, ref pdscorereturntype, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreReturnTypeUpdate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscorereturntype); 
    
         if (pdscorereturntype.ttblcorereturntype.Count > 0)
         {
            result.corereturntype = Corereturntype.BuildCorereturntypeFromRow(pdscorereturntype.ttblcorereturntype[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public bool CoreReturnAutoAllocate(Corereturnautoalloc corereturnautoalloc)
      {   
          
         var pdscorereturnautoalloc = new pdscorereturnautoallocDataSet();
            
         DataRow ttblcorereturnautoallocCriteria = pdscorereturnautoalloc.ttblcorereturnautoalloc.NewttblcorereturnautoallocRow();
         Corereturnautoalloc.UpdateRowFromCorereturnautoalloc(ref ttblcorereturnautoallocCriteria, corereturnautoalloc);
         pdscorereturnautoalloc.ttblcorereturnautoalloc.AddttblcorereturnautoallocRow((pdscorereturnautoallocDataSet.ttblcorereturnautoallocRow)ttblcorereturnautoallocCriteria);
            
         bool lAllocatedFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreReturnAutoAllocate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreReturnAutoAllocate(ref pdsContext,  pdscorereturnautoalloc, out lAllocatedFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreReturnAutoAllocate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscorereturnautoalloc); 
    
         return lAllocatedFl;
      
      }

      public AsoelineextraCoreAllocationLoadResponseAPI CoreAllocationLoad(Coreallocationcriteria coreallocationcriteria)
      {   
         var result = new AsoelineextraCoreAllocationLoadResponseAPI();
         
         var pdscoreallocation = new pdscoreallocationDataSet();
            
         DataRow ttblcoreallocationcriteriaCriteria = pdscoreallocation.ttblcoreallocationcriteria.NewttblcoreallocationcriteriaRow();
         Coreallocationcriteria.UpdateRowFromCoreallocationcriteria(ref ttblcoreallocationcriteriaCriteria, coreallocationcriteria);
         pdscoreallocation.ttblcoreallocationcriteria.AddttblcoreallocationcriteriaRow((pdscoreallocationDataSet.ttblcoreallocationcriteriaRow)ttblcoreallocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreAllocationLoad - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreAllocationLoad(ref pdsContext, ref pdscoreallocation, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreAllocationLoad - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoreallocation); 
    
         if (pdscoreallocation.ttblcoreallocationcriteria.Count > 0)
         {
            result.coreallocationcriteria = Coreallocationcriteria.BuildCoreallocationcriteriaFromRow(pdscoreallocation.ttblcoreallocationcriteria[0]);
         }
                    
         foreach (DataRow row in pdscoreallocation.ttblcoreallocationresults)
         {
            result.coreallocationresults.Add(Coreallocationresults.BuildCoreallocationresultsFromRow(row));
         }     
         if (pdscoreallocation.ttblcoreallocationsingle.Count > 0)
         {
            result.coreallocationsingle = Coreallocationsingle.BuildCoreallocationsingleFromRow(pdscoreallocation.ttblcoreallocationsingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraCoreAllocationUpdateResponseAPI CoreAllocationUpdate(AsoelineextraCoreAllocationUpdateRequestAPI AsoelineextraCoreAllocationUpdateRequestAPI)
      {   
         var result = new AsoelineextraCoreAllocationUpdateResponseAPI();
         
         var pdscoreallocation = new pdscoreallocationDataSet();
            
         var pdscoreallocationupdate = new pdscoreallocationupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcoreallocationcriteriaRow = pdscoreallocation.ttblcoreallocationcriteria.NewttblcoreallocationcriteriaRow();
         Coreallocationcriteria.UpdateRowFromCoreallocationcriteria(ref ttblcoreallocationcriteriaRow, AsoelineextraCoreAllocationUpdateRequestAPI.coreallocationcriteria);
         pdscoreallocation.ttblcoreallocationcriteria.AddttblcoreallocationcriteriaRow((pdscoreallocationDataSet.ttblcoreallocationcriteriaRow)ttblcoreallocationcriteriaRow);
          
         foreach (var obj in AsoelineextraCoreAllocationUpdateRequestAPI.coreallocationresults)
         {
            DataRow ttblcoreallocationresultsRow = pdscoreallocation.ttblcoreallocationresults.NewttblcoreallocationresultsRow();
            Coreallocationresults.UpdateRowFromCoreallocationresults(ref ttblcoreallocationresultsRow, obj);
            pdscoreallocation.ttblcoreallocationresults.AddttblcoreallocationresultsRow((pdscoreallocationDataSet.ttblcoreallocationresultsRow)ttblcoreallocationresultsRow);
         }
          
         DataRow ttblcoreallocationsingleRow = pdscoreallocation.ttblcoreallocationsingle.NewttblcoreallocationsingleRow();
         Coreallocationsingle.UpdateRowFromCoreallocationsingle(ref ttblcoreallocationsingleRow, AsoelineextraCoreAllocationUpdateRequestAPI.coreallocationsingle);
         pdscoreallocation.ttblcoreallocationsingle.AddttblcoreallocationsingleRow((pdscoreallocationDataSet.ttblcoreallocationsingleRow)ttblcoreallocationsingleRow);
          
         
         NLogLoggerP.Trace("CoreAllocationUpdate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreAllocationUpdate(ref pdsContext,  pdscoreallocation, out pdscoreallocationupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreAllocationUpdate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoreallocation); 
    
         if (pdscoreallocationupdate.ttblcoreallocationupdate.Count > 0)
         {
            result.coreallocationupdate = Coreallocationupdate.BuildCoreallocationupdateFromRow(pdscoreallocationupdate.ttblcoreallocationupdate[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineextraCoreSerialsAddResponseAPI CoreSerialsAdd(AsoelineextraCoreSerialsAddRequestAPI AsoelineextraCoreSerialsAddRequestAPI)
      {   
         var result = new AsoelineextraCoreSerialsAddResponseAPI();
         
         var pdscoreserials = new pdscoreserialsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcoreserialscriteriaRow = pdscoreserials.ttblcoreserialscriteria.NewttblcoreserialscriteriaRow();
         Coreserialscriteria.UpdateRowFromCoreserialscriteria(ref ttblcoreserialscriteriaRow, AsoelineextraCoreSerialsAddRequestAPI.coreserialscriteria);
         pdscoreserials.ttblcoreserialscriteria.AddttblcoreserialscriteriaRow((pdscoreserialsDataSet.ttblcoreserialscriteriaRow)ttblcoreserialscriteriaRow);
          
         foreach (var obj in AsoelineextraCoreSerialsAddRequestAPI.coreserialsresults)
         {
            DataRow ttblcoreserialsresultsRow = pdscoreserials.ttblcoreserialsresults.NewttblcoreserialsresultsRow();
            Coreserialsresults.UpdateRowFromCoreserialsresults(ref ttblcoreserialsresultsRow, obj);
            pdscoreserials.ttblcoreserialsresults.AddttblcoreserialsresultsRow((pdscoreserialsDataSet.ttblcoreserialsresultsRow)ttblcoreserialsresultsRow);
         }
          
         var  cSerialNo = AsoelineextraCoreSerialsAddRequestAPI.cSerialNo;
            
         
         NLogLoggerP.Trace("CoreSerialsAdd - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreSerialsAdd(ref pdsContext,  cSerialNo, ref pdscoreserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreSerialsAdd - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoreserials); 
    
         if (pdscoreserials.ttblcoreserialscriteria.Count > 0)
         {
            result.coreserialscriteria = Coreserialscriteria.BuildCoreserialscriteriaFromRow(pdscoreserials.ttblcoreserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdscoreserials.ttblcoreserialsresults)
         {
            result.coreserialsresults.Add(Coreserialsresults.BuildCoreserialsresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineextraCoreSerialsDeleteResponseAPI CoreSerialsDelete(AsoelineextraCoreSerialsDeleteRequestAPI AsoelineextraCoreSerialsDeleteRequestAPI)
      {   
         var result = new AsoelineextraCoreSerialsDeleteResponseAPI();
         
         var pdscoreserials = new pdscoreserialsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblcoreserialscriteriaRow = pdscoreserials.ttblcoreserialscriteria.NewttblcoreserialscriteriaRow();
         Coreserialscriteria.UpdateRowFromCoreserialscriteria(ref ttblcoreserialscriteriaRow, AsoelineextraCoreSerialsDeleteRequestAPI.coreserialscriteria);
         pdscoreserials.ttblcoreserialscriteria.AddttblcoreserialscriteriaRow((pdscoreserialsDataSet.ttblcoreserialscriteriaRow)ttblcoreserialscriteriaRow);
          
         foreach (var obj in AsoelineextraCoreSerialsDeleteRequestAPI.coreserialsresults)
         {
            DataRow ttblcoreserialsresultsRow = pdscoreserials.ttblcoreserialsresults.NewttblcoreserialsresultsRow();
            Coreserialsresults.UpdateRowFromCoreserialsresults(ref ttblcoreserialsresultsRow, obj);
            pdscoreserials.ttblcoreserialsresults.AddttblcoreserialsresultsRow((pdscoreserialsDataSet.ttblcoreserialsresultsRow)ttblcoreserialsresultsRow);
         }
          
         var  cSerialNo = AsoelineextraCoreSerialsDeleteRequestAPI.cSerialNo;
            
         
         NLogLoggerP.Trace("CoreSerialsDelete - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreSerialsDelete(ref pdsContext,  cSerialNo, ref pdscoreserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreSerialsDelete - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoreserials); 
    
         if (pdscoreserials.ttblcoreserialscriteria.Count > 0)
         {
            result.coreserialscriteria = Coreserialscriteria.BuildCoreserialscriteriaFromRow(pdscoreserials.ttblcoreserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdscoreserials.ttblcoreserialsresults)
         {
            result.coreserialsresults.Add(Coreserialsresults.BuildCoreserialsresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineextraCoreSerialsLoadResponseAPI CoreSerialsLoad(Coreserialscriteria coreserialscriteria)
      {   
         var result = new AsoelineextraCoreSerialsLoadResponseAPI();
         
         var pdscoreserials = new pdscoreserialsDataSet();
            
         DataRow ttblcoreserialscriteriaCriteria = pdscoreserials.ttblcoreserialscriteria.NewttblcoreserialscriteriaRow();
         Coreserialscriteria.UpdateRowFromCoreserialscriteria(ref ttblcoreserialscriteriaCriteria, coreserialscriteria);
         pdscoreserials.ttblcoreserialscriteria.AddttblcoreserialscriteriaRow((pdscoreserialsDataSet.ttblcoreserialscriteriaRow)ttblcoreserialscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoreSerialsLoad - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.CoreSerialsLoad(ref pdsContext, ref pdscoreserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoreSerialsLoad - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscoreserials); 
    
         if (pdscoreserials.ttblcoreserialscriteria.Count > 0)
         {
            result.coreserialscriteria = Coreserialscriteria.BuildCoreserialscriteriaFromRow(pdscoreserials.ttblcoreserialscriteria[0]);
         }
                    
         foreach (DataRow row in pdscoreserials.ttblcoreserialsresults)
         {
            result.coreserialsresults.Add(Coreserialsresults.BuildCoreserialsresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Multilinesourcing OEMultiCompSourcingPreValidate(AsoelineextraOEMultiCompSourcingPreValidateRequestAPI AsoelineextraOEMultiCompSourcingPreValidateRequestAPI)
      {   
         var result = new Multilinesourcing();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineextraOEMultiCompSourcingPreValidateRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         DataRow ttblloadtcompssingleRow = pdsloadtcomps.ttblloadtcompssingle.NewttblloadtcompssingleRow();
         Loadtcompssingle.UpdateRowFromLoadtcompssingle(ref ttblloadtcompssingleRow, AsoelineextraOEMultiCompSourcingPreValidateRequestAPI.loadtcompssingle);
         pdsloadtcomps.ttblloadtcompssingle.AddttblloadtcompssingleRow((pdsloadtcompsDataSet.ttblloadtcompssingleRow)ttblloadtcompssingleRow);
          
         foreach (var obj in AsoelineextraOEMultiCompSourcingPreValidateRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AsoelineextraOEMultiCompSourcingPreValidateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         
         NLogLoggerP.Trace("OEMultiCompSourcingPreValidate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEMultiCompSourcingPreValidate(ref pdsContext, ref pdsmultilinesourcing,  pdsloadtcomps, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultiCompSourcingPreValidate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
         if (pdsmultilinesourcing.ttblmultilinesourcing.Count > 0) 
         { 
             result = Multilinesourcing.BuildMultilinesourcingFromRow(pdsmultilinesourcing.ttblmultilinesourcing[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineextraOEMultiCompSourcingUpdateResponseAPI OEMultiCompSourcingUpdate(AsoelineextraOEMultiCompSourcingUpdateRequestAPI AsoelineextraOEMultiCompSourcingUpdateRequestAPI)
      {   
         var result = new AsoelineextraOEMultiCompSourcingUpdateResponseAPI();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AsoelineextraOEMultiCompSourcingUpdateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         foreach (var obj in AsoelineextraOEMultiCompSourcingUpdateRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         
         NLogLoggerP.Trace("OEMultiCompSourcingUpdate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEMultiCompSourcingUpdate(ref pdsContext,  pdsmultilinesourcing, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultiCompSourcingUpdate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineextraOECompAddTieLeaveFieldResponseAPI OECompAddTieLeaveField(AsoelineextraOECompAddTieLeaveFieldRequestAPI AsoelineextraOECompAddTieLeaveFieldRequestAPI)
      {   
         var result = new AsoelineextraOECompAddTieLeaveFieldResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineextraOECompAddTieLeaveFieldRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineextraOECompAddTieLeaveFieldRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOECompAddTieLeaveFieldRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AsoelineextraOECompAddTieLeaveFieldRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineextraOECompAddTieLeaveFieldRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         var  cFieldName = AsoelineextraOECompAddTieLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("OECompAddTieLeaveField - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OECompAddTieLeaveField(ref pdsContext,  cFieldName,  pdsoeline,  pdskitcreatedetailstt,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECompAddTieLeaveField - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOECompAddTieValidateResponseAPI OECompAddTieValidate(AsoelineextraOECompAddTieValidateRequestAPI AsoelineextraOECompAddTieValidateRequestAPI)
      {   
         var result = new AsoelineextraOECompAddTieValidateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineextraOECompAddTieValidateRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineextraOECompAddTieValidateRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineextraOECompAddTieValidateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AsoelineextraOECompAddTieValidateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineextraOECompAddTieValidateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("OECompAddTieValidate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OECompAddTieValidate(ref pdsContext,  pdsoeline,  pdskitcreatedetailstt,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECompAddTieValidate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public Loadoelinesettings LoadOELineSettings()
      {   
         var result = new Loadoelinesettings();
         
         var pdsloadoelinesettings = new pdsloadoelinesettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOELineSettings - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.LoadOELineSettings(ref pdsContext, out pdsloadoelinesettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOELineSettings - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoelinesettings); 
    
         if (pdsloadoelinesettings.ttblloadoelinesettings.Count > 0) 
         { 
             result = Loadoelinesettings.BuildLoadoelinesettingsFromRow(pdsloadoelinesettings.ttblloadoelinesettings[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineextraOEGetOrderDataResponseAPI OEGetOrderData(AsoelineextraOEGetOrderDataRequestAPI AsoelineextraOEGetOrderDataRequestAPI)
      {   
         var result = new AsoelineextraOEGetOrderDataResponseAPI();
         
         var pdsoeheaderretrieve = new pdsoeheaderretrieveDataSet();
            
         var pdsoecalcordshptot = new pdsoecalcordshptotDataSet();
            
         var pdsoeiolines = new pdsoeiolinesDataSet();
            
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdswlstatus = new pdswlstatusDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloecalcordshptotcriteriaRow = pdsoecalcordshptot.ttbloecalcordshptotcriteria.NewttbloecalcordshptotcriteriaRow();
         Oecalcordshptotcriteria.UpdateRowFromOecalcordshptotcriteria(ref ttbloecalcordshptotcriteriaRow, AsoelineextraOEGetOrderDataRequestAPI.oecalcordshptotcriteria);
         pdsoecalcordshptot.ttbloecalcordshptotcriteria.AddttbloecalcordshptotcriteriaRow((pdsoecalcordshptotDataSet.ttbloecalcordshptotcriteriaRow)ttbloecalcordshptotcriteriaRow);
          
         DataRow ttbloeheaderretrievecriteriaRow = pdsoeheaderretrieve.ttbloeheaderretrievecriteria.NewttbloeheaderretrievecriteriaRow();
         Oeheaderretrievecriteria.UpdateRowFromOeheaderretrievecriteria(ref ttbloeheaderretrievecriteriaRow, AsoelineextraOEGetOrderDataRequestAPI.oeheaderretrievecriteria);
         pdsoeheaderretrieve.ttbloeheaderretrievecriteria.AddttbloeheaderretrievecriteriaRow((pdsoeheaderretrieveDataSet.ttbloeheaderretrievecriteriaRow)ttbloeheaderretrievecriteriaRow);
          
         DataRow ttbloeiolinescriteriaRow = pdsoeiolines.ttbloeiolinescriteria.NewttbloeiolinescriteriaRow();
         Oeiolinescriteria.UpdateRowFromOeiolinescriteria(ref ttbloeiolinescriteriaRow, AsoelineextraOEGetOrderDataRequestAPI.oeiolinescriteria);
         pdsoeiolines.ttbloeiolinescriteria.AddttbloeiolinescriteriaRow((pdsoeiolinesDataSet.ttbloeiolinescriteriaRow)ttbloeiolinescriteriaRow);
          
         
         NLogLoggerP.Trace("OEGetOrderData - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEGetOrderData(ref pdsContext,  pdsoeheaderretrieve, ref pdsoecalcordshptot, ref pdsoeiolines, out pdsoehdr, out pdswlstatus, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEGetOrderData - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoecalcordshptot.ttbloecalcordshptotresults.Count > 0)
         {
            result.oecalcordshptotresults = Oecalcordshptotresults.BuildOecalcordshptotresultsFromRow(pdsoecalcordshptot.ttbloecalcordshptotresults[0]);
         }
                    
         if (pdsoehdr.ttbloehdr.Count > 0)
         {
            result.oehdr = Oehdr.BuildOehdrFromRow(pdsoehdr.ttbloehdr[0]);
         }
                    
         foreach (DataRow row in pdsoeiolines.ttbloeiolinesresults)
         {
            result.oeiolinesresults.Add(Oeiolinesresults.BuildOeiolinesresultsFromRow(row));
         }     
         if (pdswlstatus.ttblwlstatus.Count > 0)
         {
            result.wlstatus = Wlstatus.BuildWlstatusFromRow(pdswlstatus.ttblwlstatus[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOELineQuickAddResponseAPI OELineQuickAdd(AsoelineextraOELineQuickAddRequestAPI AsoelineextraOELineQuickAddRequestAPI)
      {   
         var result = new AsoelineextraOELineQuickAddResponseAPI();
         
         var pdsoelinepricing = new pdsoelinepricingDataSet();
            
         var pdsoemultilinecreate = new pdsoemultilinecreateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloelinepricingcriteriaRow = pdsoelinepricing.ttbloelinepricingcriteria.NewttbloelinepricingcriteriaRow();
         Oelinepricingcriteria.UpdateRowFromOelinepricingcriteria(ref ttbloelinepricingcriteriaRow, AsoelineextraOELineQuickAddRequestAPI.oelinepricingcriteria);
         pdsoelinepricing.ttbloelinepricingcriteria.AddttbloelinepricingcriteriaRow((pdsoelinepricingDataSet.ttbloelinepricingcriteriaRow)ttbloelinepricingcriteriaRow);
          
         DataRow ttbloemultilinecreatecriteriaRow = pdsoemultilinecreate.ttbloemultilinecreatecriteria.NewttbloemultilinecreatecriteriaRow();
         Oemultilinecreatecriteria.UpdateRowFromOemultilinecreatecriteria(ref ttbloemultilinecreatecriteriaRow, AsoelineextraOELineQuickAddRequestAPI.oemultilinecreatecriteria);
         pdsoemultilinecreate.ttbloemultilinecreatecriteria.AddttbloemultilinecreatecriteriaRow((pdsoemultilinecreateDataSet.ttbloemultilinecreatecriteriaRow)ttbloemultilinecreatecriteriaRow);
          
         
         NLogLoggerP.Trace("OELineQuickAdd - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineQuickAdd(ref pdsContext, ref pdsoelinepricing, ref pdsoemultilinecreate, out pdsmessaging, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OELineQuickAdd - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinepricing); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinepricing.ttbloelinepricingresults.Count > 0)
         {
            result.oelinepricingresults = Oelinepricingresults.BuildOelinepricingresultsFromRow(pdsoelinepricing.ttbloelinepricingresults[0]);
         }
                    
         if (pdsoemultilinecreate.ttbloemultilinecreateresults.Count > 0)
         {
            result.oemultilinecreateresults = Oemultilinecreateresults.BuildOemultilinecreateresultsFromRow(pdsoemultilinecreate.ttbloemultilinecreateresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Oelinetiedvaord OELineTiedVAOrd(Oelinetiedvaord oelinetiedvaord)
      {   
         var result = new Oelinetiedvaord();
         
         var pdsoelinetiedvaord = new pdsoelinetiedvaordDataSet();
            
         DataRow ttbloelinetiedvaordCriteria = pdsoelinetiedvaord.ttbloelinetiedvaord.NewttbloelinetiedvaordRow();
         Oelinetiedvaord.UpdateRowFromOelinetiedvaord(ref ttbloelinetiedvaordCriteria, oelinetiedvaord);
         pdsoelinetiedvaord.ttbloelinetiedvaord.AddttbloelinetiedvaordRow((pdsoelinetiedvaordDataSet.ttbloelinetiedvaordRow)ttbloelinetiedvaordCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineTiedVAOrd - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineTiedVAOrd(ref pdsContext, ref pdsoelinetiedvaord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineTiedVAOrd - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinetiedvaord); 
    
         if (pdsoelinetiedvaord.ttbloelinetiedvaord.Count > 0) 
         { 
             result = Oelinetiedvaord.BuildOelinetiedvaordFromRow(pdsoelinetiedvaord.ttbloelinetiedvaord[0]);
         } 
              
          
         return result;
          
      }

      public void OELostBusinessLines(Oelostbusinesslines oelostbusinesslines)
      {   
         
         var pdsoelostbusinesslines = new pdsoelostbusinesslinesDataSet();
            
         DataRow ttbloelostbusinesslinesCriteria = pdsoelostbusinesslines.ttbloelostbusinesslines.NewttbloelostbusinesslinesRow();
         Oelostbusinesslines.UpdateRowFromOelostbusinesslines(ref ttbloelostbusinesslinesCriteria, oelostbusinesslines);
         pdsoelostbusinesslines.ttbloelostbusinesslines.AddttbloelostbusinesslinesRow((pdsoelostbusinesslinesDataSet.ttbloelostbusinesslinesRow)ttbloelostbusinesslinesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELostBusinessLines - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELostBusinessLines(ref pdsContext,  pdsoelostbusinesslines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELostBusinessLines - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelostbusinesslines);
      }

      public AsoelineextraOelinecorrectionvalidateResponseAPI Oelinecorrectionvalidate(Oeline oeline)
      {   
         var result = new AsoelineextraOelinecorrectionvalidateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("Oelinecorrectionvalidate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.Oelinecorrectionvalidate(ref pdsContext, ref pdsoeline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("Oelinecorrectionvalidate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineextraOelinesubavailinitResponseAPI Oelinesubavailinit(Oeline oeline)
      {   
         var result = new AsoelineextraOelinesubavailinitResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinesuperavail = new pdsoelinesuperavailDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("Oelinesubavailinit - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.Oelinesubavailinit(ref pdsContext,  pdsoeline, out pdsoelinesuperavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("Oelinesubavailinit - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinesuperavail.ttbloelinesuperavailcriteria.Count > 0)
         {
            result.oelinesuperavailcriteria = Oelinesuperavailcriteria.BuildOelinesuperavailcriteriaFromRow(pdsoelinesuperavail.ttbloelinesuperavailcriteria[0]);
         }
                    
         foreach (DataRow row in pdsoelinesuperavail.ttbloelinesuperavailresults)
         {
            result.oelinesuperavailresults.Add(Oelinesuperavailresults.BuildOelinesuperavailresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Oelinerebateresults Oelinerebate(Oelinerebatecriteria oelinerebatecriteria)
      {   
         var result = new Oelinerebateresults();
         
         var pdsoelinerebate = new pdsoelinerebateDataSet();
            
         DataRow ttbloelinerebatecriteriaCriteria = pdsoelinerebate.ttbloelinerebatecriteria.NewttbloelinerebatecriteriaRow();
         Oelinerebatecriteria.UpdateRowFromOelinerebatecriteria(ref ttbloelinerebatecriteriaCriteria, oelinerebatecriteria);
         pdsoelinerebate.ttbloelinerebatecriteria.AddttbloelinerebatecriteriaRow((pdsoelinerebateDataSet.ttbloelinerebatecriteriaRow)ttbloelinerebatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("Oelinerebate - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.Oelinerebate(ref pdsContext, ref pdsoelinerebate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("Oelinerebate - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinerebate); 
    
         if (pdsoelinerebate.ttbloelinerebateresults.Count > 0) 
         { 
             result = Oelinerebateresults.BuildOelinerebateresultsFromRow(pdsoelinerebate.ttbloelinerebateresults[0]);
         } 
              
          
         return result;
          
      }

      public decimal OELineMarginLeave(Oeline oeline)
      {   
          
         var pdsoeline = new pdsoelineDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         decimal dPrice = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineMarginLeave - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OELineMarginLeave(ref pdsContext,  pdsoeline, out dPrice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineMarginLeave - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         return dPrice;
      
      }

      public Oeonetimerebate OEOneTimeRebLeaveField(AsoelineextraOEOneTimeRebLeaveFieldRequestAPI AsoelineextraOEOneTimeRebLeaveFieldRequestAPI)
      {   
         var result = new Oeonetimerebate();
         
         var pdsoeonetimerebleavefield = new pdsoeonetimerebleavefieldDataSet();
            
         var pdsoeonetimerebate = new pdsoeonetimerebateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeonetimerebateRow = pdsoeonetimerebate.ttbloeonetimerebate.NewttbloeonetimerebateRow();
         Oeonetimerebate.UpdateRowFromOeonetimerebate(ref ttbloeonetimerebateRow, AsoelineextraOEOneTimeRebLeaveFieldRequestAPI.oeonetimerebate);
         pdsoeonetimerebate.ttbloeonetimerebate.AddttbloeonetimerebateRow((pdsoeonetimerebateDataSet.ttbloeonetimerebateRow)ttbloeonetimerebateRow);
          
         DataRow ttbloeonetimerebleavefieldRow = pdsoeonetimerebleavefield.ttbloeonetimerebleavefield.NewttbloeonetimerebleavefieldRow();
         Oeonetimerebleavefield.UpdateRowFromOeonetimerebleavefield(ref ttbloeonetimerebleavefieldRow, AsoelineextraOEOneTimeRebLeaveFieldRequestAPI.oeonetimerebleavefield);
         pdsoeonetimerebleavefield.ttbloeonetimerebleavefield.AddttbloeonetimerebleavefieldRow((pdsoeonetimerebleavefieldDataSet.ttbloeonetimerebleavefieldRow)ttbloeonetimerebleavefieldRow);
          
         
         NLogLoggerP.Trace("OEOneTimeRebLeaveField - Asoelineextra - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineextraproxy = this.proxyAppObject.CreatePO_asoelineextraproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineextraproxy.OEOneTimeRebLeaveField(ref pdsContext,  pdsoeonetimerebleavefield, ref pdsoeonetimerebate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOneTimeRebLeaveField - Asoelineextra - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeonetimerebleavefield); 
    
         if (pdsoeonetimerebate.ttbloeonetimerebate.Count > 0) 
         { 
             result = Oeonetimerebate.BuildOeonetimerebateFromRow(pdsoeonetimerebate.ttbloeonetimerebate[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  