//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsloadoetally;
   using Models.Pdsupdtoelinedspltt;
   using Models.Pdsoelinelinetietypelist;
   using Models.Pdsoeline;
   using Models.Pdsoelinelinetiehdr;
   using Models.Pdsoelinelinetie;
   using Models.Pdsmessaging;
   using Models.Pdsoelinenonstockhdr;
   using Models.Pdsoelinenonstock;
   using Models.Pdssupaccessrequest;
   using Models.Pdssupaccessresponse;
   using Models.Pdsoeiolines;
   using Models.Pdsoelineworksheet;
   using Models.Pdsoelinemovemultiple;
   using Models.Pdsoelinemovepricing;
   using Models.Pdsoelinepricetab;
   using Models.Pdsoelinepricetabsave;
   using Models.Pdsoelinepricetabinfo;
   using Models.Pdsoelineoptprod;
   using Models.Pdsoelinesuperavail;
   using Models.Pdsoelineviewedidata;
   using Models.Pdsoelinecrdate;
   using Models.Pdsoelinecrjur;
   using Models.Pdscreateprodfromcat;
   using Models.Pdsoebundles;
   using Models.Pdsoebundleslookup;
   using Models.Pdsoeetassemblynonstock;
   using Models.Pdsoeetassemblysegmentinfo;
   using Models.Pdsoeetassemblybuild;
   using Models.Pdsoelineassembly;
   using Models.Pdsoeetassemblyconfig;
   using Models.Pdsoeetassemblyfinal;
   using Models.Pdsoeetassemblyinfo;
   using Models.Pdsoeinitcreateprodfromcat;
   using Models.Pdskitscriteria;
   using Models.Pdsloadtcomps;
   using Models.Pdskitcreatekwdstt;
   using Models.Pdskitcheckpartialbo;
   using Models.Pdskitcrossrefcriteria;
   using Models.Pdskitcreatedetailstt;
   using Models.Pdskitnonstock;
   using Models.Pdskitsplit;
   using Models.Pdskitsplitinitialize;
   using Models.Pdskitsplitupdate;
   using Models.Pdsoelinecancelchange;
   using Models.Pdsoelinecfglaunch;
   using Models.Pdsoelinecommsubtotloadcriteria;
   using Models.Pdsoelinecommsubtot;
   using Models.Pdsoelinecommsubtotmaintlist;
   using Models.Pdsoelinecommsubtotmovecriteria;
   using Models.Pdsoelinedelete;
   using Models.Pdsoeordercopyfabwhse;
   using Models.Pdsoelineinitialize;
   using Models.Pdsoelinepricing;
   using Models.Pdsoelineretrieve;
   using Models.Pdsoelinexrefprod;
   using Models.Pdsoemultilinecreate;
   using Models.Pdsmultilinesourcing;
   using Models.Pdsoereturninvoicelist;
   using Models.Pdsoereturnlinelist;
   using Models.Pdsoereturnupdatelist;
   using Models.Pdsoereturnparams;
   using Models.Pdsoereturn;
   using Models.Pdsoelinemovesingle;
   using Models.Pdsoesourcing;
   using Models.Pdsoetallycomponent;
   using Models.Complex;

   public partial class AsoelineAdapter : AdapterBase<pdsContextDataSet>
   {
      private OEProxyAppObject proxyAppObject;
      
      public AsoelineAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsoelineAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Loadoetallysingle OETallyDeleteComponent(AsoelineOETallyDeleteComponentRequestAPI AsoelineOETallyDeleteComponentRequestAPI)
      {   
         var result = new Loadoetallysingle();
         
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOETallyDeleteComponentRequestAPI.loadoetallyresults)
         {
            DataRow ttblloadoetallyresultsRow = pdsloadoetally.ttblloadoetallyresults.NewttblloadoetallyresultsRow();
            Loadoetallyresults.UpdateRowFromLoadoetallyresults(ref ttblloadoetallyresultsRow, obj);
            pdsloadoetally.ttblloadoetallyresults.AddttblloadoetallyresultsRow((pdsloadoetallyDataSet.ttblloadoetallyresultsRow)ttblloadoetallyresultsRow);
         }
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyDeleteComponentRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         
         NLogLoggerP.Trace("OETallyDeleteComponent - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyDeleteComponent(ref pdsContext, ref pdsloadoetally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyDeleteComponent - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetally); 
    
         if (pdsloadoetally.ttblloadoetallysingle.Count > 0) 
         { 
             result = Loadoetallysingle.BuildLoadoetallysingleFromRow(pdsloadoetally.ttblloadoetallysingle[0]);
         } 
              
          
         return result;
          
      }

      public Loadoetallysingle OETallyLeaveUnit(AsoelineOETallyLeaveUnitRequestAPI AsoelineOETallyLeaveUnitRequestAPI)
      {   
         var result = new Loadoetallysingle();
         
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOETallyLeaveUnitRequestAPI.loadoetallyresults)
         {
            DataRow ttblloadoetallyresultsRow = pdsloadoetally.ttblloadoetallyresults.NewttblloadoetallyresultsRow();
            Loadoetallyresults.UpdateRowFromLoadoetallyresults(ref ttblloadoetallyresultsRow, obj);
            pdsloadoetally.ttblloadoetallyresults.AddttblloadoetallyresultsRow((pdsloadoetallyDataSet.ttblloadoetallyresultsRow)ttblloadoetallyresultsRow);
         }
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyLeaveUnitRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         
         NLogLoggerP.Trace("OETallyLeaveUnit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyLeaveUnit(ref pdsContext, ref pdsloadoetally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyLeaveUnit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetally); 
    
         if (pdsloadoetally.ttblloadoetallysingle.Count > 0) 
         { 
             result = Loadoetallysingle.BuildLoadoetallysingleFromRow(pdsloadoetally.ttblloadoetallysingle[0]);
         } 
              
          
         return result;
          
      }

      public Loadoetallycriteria OETallyUpdate(AsoelineOETallyUpdateRequestAPI AsoelineOETallyUpdateRequestAPI)
      {   
         var result = new Loadoetallycriteria();
         
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadoetallycriteriaRow = pdsloadoetally.ttblloadoetallycriteria.NewttblloadoetallycriteriaRow();
         Loadoetallycriteria.UpdateRowFromLoadoetallycriteria(ref ttblloadoetallycriteriaRow, AsoelineOETallyUpdateRequestAPI.loadoetallycriteria);
         pdsloadoetally.ttblloadoetallycriteria.AddttblloadoetallycriteriaRow((pdsloadoetallyDataSet.ttblloadoetallycriteriaRow)ttblloadoetallycriteriaRow);
          
         foreach (var obj in AsoelineOETallyUpdateRequestAPI.loadoetallyresults)
         {
            DataRow ttblloadoetallyresultsRow = pdsloadoetally.ttblloadoetallyresults.NewttblloadoetallyresultsRow();
            Loadoetallyresults.UpdateRowFromLoadoetallyresults(ref ttblloadoetallyresultsRow, obj);
            pdsloadoetally.ttblloadoetallyresults.AddttblloadoetallyresultsRow((pdsloadoetallyDataSet.ttblloadoetallyresultsRow)ttblloadoetallyresultsRow);
         }
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyUpdateRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         
         NLogLoggerP.Trace("OETallyUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyUpdate(ref pdsContext, ref pdsloadoetally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetally); 
    
         if (pdsloadoetally.ttblloadoetallycriteria.Count > 0) 
         { 
             result = Loadoetallycriteria.BuildLoadoetallycriteriaFromRow(pdsloadoetally.ttblloadoetallycriteria[0]);
         } 
              
          
         return result;
          
      }

      public Updtoelinedsplttresults UpdateOELineDisplayTT(Updtoelinedsplttcriteria updtoelinedsplttcriteria)
      {   
         var result = new Updtoelinedsplttresults();
         
         var pdsupdtoelinedspltt = new pdsupdtoelinedsplttDataSet();
            
         DataRow ttblupdtoelinedsplttcriteriaCriteria = pdsupdtoelinedspltt.ttblupdtoelinedsplttcriteria.NewttblupdtoelinedsplttcriteriaRow();
         Updtoelinedsplttcriteria.UpdateRowFromUpdtoelinedsplttcriteria(ref ttblupdtoelinedsplttcriteriaCriteria, updtoelinedsplttcriteria);
         pdsupdtoelinedspltt.ttblupdtoelinedsplttcriteria.AddttblupdtoelinedsplttcriteriaRow((pdsupdtoelinedsplttDataSet.ttblupdtoelinedsplttcriteriaRow)ttblupdtoelinedsplttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateOELineDisplayTT - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.UpdateOELineDisplayTT(ref pdsContext, ref pdsupdtoelinedspltt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateOELineDisplayTT - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsupdtoelinedspltt); 
    
         if (pdsupdtoelinedspltt.ttblupdtoelinedsplttresults.Count > 0) 
         { 
             result = Updtoelinedsplttresults.BuildUpdtoelinedsplttresultsFromRow(pdsupdtoelinedspltt.ttblupdtoelinedsplttresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oelinelinetietypelist> OELineLineTieTypeDropDown(Oelinelinetietypecrit oelinelinetietypecrit)
      {   
         var results = new List<Oelinelinetietypelist>();
         
         var pdsoelinelinetietypelist = new pdsoelinelinetietypelistDataSet();
            
         DataRow ttbloelinelinetietypecritCriteria = pdsoelinelinetietypelist.ttbloelinelinetietypecrit.NewttbloelinelinetietypecritRow();
         Oelinelinetietypecrit.UpdateRowFromOelinelinetietypecrit(ref ttbloelinelinetietypecritCriteria, oelinelinetietypecrit);
         pdsoelinelinetietypelist.ttbloelinelinetietypecrit.AddttbloelinelinetietypecritRow((pdsoelinelinetietypelistDataSet.ttbloelinelinetietypecritRow)ttbloelinelinetietypecritCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineLineTieTypeDropDown - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineLineTieTypeDropDown(ref pdsContext, ref pdsoelinelinetietypelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineLineTieTypeDropDown - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelinetietypelist); 
    
            foreach (DataRow row in pdsoelinelinetietypelist.ttbloelinelinetietypelist)
            {
                results.Add(Oelinelinetietypelist.BuildOelinelinetietypelistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelinelinetie> OELineLineTieRetrieve(AsoelineOELineLineTieRetrieveRequestAPI AsoelineOELineLineTieRetrieveRequestAPI)
      {   
         var results = new List<Oelinelinetie>();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineLineTieRetrieveRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineOELineLineTieRetrieveRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("OELineLineTieRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineLineTieRetrieve(ref pdsContext,  pdsoeline,  pdsoelinelinetiehdr, out pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineLineTieRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
            foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
            {
                results.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
            }
            return results;
        
      }

      public AsoelineOELineLineTieLeaveFieldResponseAPI OELineLineTieLeaveField(AsoelineOELineLineTieLeaveFieldRequestAPI AsoelineOELineLineTieLeaveFieldRequestAPI)
      {   
         var result = new AsoelineOELineLineTieLeaveFieldResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineLineTieLeaveFieldRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AsoelineOELineLineTieLeaveFieldRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineOELineLineTieLeaveFieldRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         var  cFieldName = AsoelineOELineLineTieLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("OELineLineTieLeaveField - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineLineTieLeaveField(ref pdsContext,  cFieldName,  pdsoeline,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineLineTieLeaveField - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOELineLineTieValidateResponseAPI OELineLineTieValidate(AsoelineOELineLineTieValidateRequestAPI AsoelineOELineLineTieValidateRequestAPI)
      {   
         var result = new AsoelineOELineLineTieValidateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinelinetiehdr = new pdsoelinelinetiehdrDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineLineTieValidateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AsoelineOELineLineTieValidateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         DataRow ttbloelinelinetiehdrRow = pdsoelinelinetiehdr.ttbloelinelinetiehdr.NewttbloelinelinetiehdrRow();
         Oelinelinetiehdr.UpdateRowFromOelinelinetiehdr(ref ttbloelinelinetiehdrRow, AsoelineOELineLineTieValidateRequestAPI.oelinelinetiehdr);
         pdsoelinelinetiehdr.ttbloelinelinetiehdr.AddttbloelinelinetiehdrRow((pdsoelinelinetiehdrDataSet.ttbloelinelinetiehdrRow)ttbloelinelinetiehdrRow);
          
         
         NLogLoggerP.Trace("OELineLineTieValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineLineTieValidate(ref pdsContext, ref pdsoeline,  pdsoelinelinetiehdr, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineLineTieValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         if (pdsoelinelinetie.ttbloelinelinetie.Count > 0)
         {
            result.oelinelinetie = Oelinelinetie.BuildOelinelinetieFromRow(pdsoelinelinetie.ttbloelinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public Oelinenonstock OELineNonStockRetrieve(AsoelineOELineNonStockRetrieveRequestAPI AsoelineOELineNonStockRetrieveRequestAPI)
      {   
         var result = new Oelinenonstock();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinenonstockhdr = new pdsoelinenonstockhdrDataSet();
            
         var pdsoelinenonstock = new pdsoelinenonstockDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineNonStockRetrieveRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinenonstockhdrRow = pdsoelinenonstockhdr.ttbloelinenonstockhdr.NewttbloelinenonstockhdrRow();
         Oelinenonstockhdr.UpdateRowFromOelinenonstockhdr(ref ttbloelinenonstockhdrRow, AsoelineOELineNonStockRetrieveRequestAPI.oelinenonstockhdr);
         pdsoelinenonstockhdr.ttbloelinenonstockhdr.AddttbloelinenonstockhdrRow((pdsoelinenonstockhdrDataSet.ttbloelinenonstockhdrRow)ttbloelinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("OELineNonStockRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineNonStockRetrieve(ref pdsContext,  pdsoeline,  pdsoelinenonstockhdr, out pdsoelinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineNonStockRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinenonstock.ttbloelinenonstock.Count > 0) 
         { 
             result = Oelinenonstock.BuildOelinenonstockFromRow(pdsoelinenonstock.ttbloelinenonstock[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> OELineNonStockValidate(AsoelineOELineNonStockValidateRequestAPI AsoelineOELineNonStockValidateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinenonstockhdr = new pdsoelinenonstockhdrDataSet();
            
         var pdsoelinenonstock = new pdsoelinenonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineNonStockValidateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinenonstockRow = pdsoelinenonstock.ttbloelinenonstock.NewttbloelinenonstockRow();
         Oelinenonstock.UpdateRowFromOelinenonstock(ref ttbloelinenonstockRow, AsoelineOELineNonStockValidateRequestAPI.oelinenonstock);
         pdsoelinenonstock.ttbloelinenonstock.AddttbloelinenonstockRow((pdsoelinenonstockDataSet.ttbloelinenonstockRow)ttbloelinenonstockRow);
          
         DataRow ttbloelinenonstockhdrRow = pdsoelinenonstockhdr.ttbloelinenonstockhdr.NewttbloelinenonstockhdrRow();
         Oelinenonstockhdr.UpdateRowFromOelinenonstockhdr(ref ttbloelinenonstockhdrRow, AsoelineOELineNonStockValidateRequestAPI.oelinenonstockhdr);
         pdsoelinenonstockhdr.ttbloelinenonstockhdr.AddttbloelinenonstockhdrRow((pdsoelinenonstockhdrDataSet.ttbloelinenonstockhdrRow)ttbloelinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("OELineNonStockValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineNonStockValidate(ref pdsContext,  pdsoeline,  pdsoelinenonstockhdr,  pdsoelinenonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineNonStockValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Oelinenonstock OELineNonStockFinal(AsoelineOELineNonStockFinalRequestAPI AsoelineOELineNonStockFinalRequestAPI)
      {   
         var result = new Oelinenonstock();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinenonstockhdr = new pdsoelinenonstockhdrDataSet();
            
         var pdsoelinenonstock = new pdsoelinenonstockDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineNonStockFinalRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinenonstockRow = pdsoelinenonstock.ttbloelinenonstock.NewttbloelinenonstockRow();
         Oelinenonstock.UpdateRowFromOelinenonstock(ref ttbloelinenonstockRow, AsoelineOELineNonStockFinalRequestAPI.oelinenonstock);
         pdsoelinenonstock.ttbloelinenonstock.AddttbloelinenonstockRow((pdsoelinenonstockDataSet.ttbloelinenonstockRow)ttbloelinenonstockRow);
          
         DataRow ttbloelinenonstockhdrRow = pdsoelinenonstockhdr.ttbloelinenonstockhdr.NewttbloelinenonstockhdrRow();
         Oelinenonstockhdr.UpdateRowFromOelinenonstockhdr(ref ttbloelinenonstockhdrRow, AsoelineOELineNonStockFinalRequestAPI.oelinenonstockhdr);
         pdsoelinenonstockhdr.ttbloelinenonstockhdr.AddttbloelinenonstockhdrRow((pdsoelinenonstockhdrDataSet.ttbloelinenonstockhdrRow)ttbloelinenonstockhdrRow);
          
         
         NLogLoggerP.Trace("OELineNonStockFinal - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineNonStockFinal(ref pdsContext,  pdsoeline,  pdsoelinenonstockhdr, ref pdsoelinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineNonStockFinal - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinenonstock.ttbloelinenonstock.Count > 0) 
         { 
             result = Oelinenonstock.BuildOelinenonstockFromRow(pdsoelinenonstock.ttbloelinenonstock[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOELineNonStockLeaveFieldResponseAPI OELineNonStockLeaveField(AsoelineOELineNonStockLeaveFieldRequestAPI AsoelineOELineNonStockLeaveFieldRequestAPI)
      {   
         var result = new AsoelineOELineNonStockLeaveFieldResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinenonstockhdr = new pdsoelinenonstockhdrDataSet();
            
         var pdsoelinenonstock = new pdsoelinenonstockDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineNonStockLeaveFieldRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinenonstockRow = pdsoelinenonstock.ttbloelinenonstock.NewttbloelinenonstockRow();
         Oelinenonstock.UpdateRowFromOelinenonstock(ref ttbloelinenonstockRow, AsoelineOELineNonStockLeaveFieldRequestAPI.oelinenonstock);
         pdsoelinenonstock.ttbloelinenonstock.AddttbloelinenonstockRow((pdsoelinenonstockDataSet.ttbloelinenonstockRow)ttbloelinenonstockRow);
          
         DataRow ttbloelinenonstockhdrRow = pdsoelinenonstockhdr.ttbloelinenonstockhdr.NewttbloelinenonstockhdrRow();
         Oelinenonstockhdr.UpdateRowFromOelinenonstockhdr(ref ttbloelinenonstockhdrRow, AsoelineOELineNonStockLeaveFieldRequestAPI.oelinenonstockhdr);
         pdsoelinenonstockhdr.ttbloelinenonstockhdr.AddttbloelinenonstockhdrRow((pdsoelinenonstockhdrDataSet.ttbloelinenonstockhdrRow)ttbloelinenonstockhdrRow);
          
         var  cFieldName = AsoelineOELineNonStockLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("OELineNonStockLeaveField - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineNonStockLeaveField(ref pdsContext,  cFieldName,  pdsoeline,  pdsoelinenonstockhdr, ref pdsoelinenonstock, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OELineNonStockLeaveField - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinenonstock.ttbloelinenonstock.Count > 0)
         {
            result.oelinenonstock = Oelinenonstock.BuildOelinenonstockFromRow(pdsoelinenonstock.ttbloelinenonstock[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public bool SupplierAccessEnabled(IEnumerable<Supaccessrequest> supaccessrequest)
      {   
          
         var pdssupaccessrequest = new pdssupaccessrequestDataSet();
            
         foreach (var obj in supaccessrequest)
         {
             DataRow row = pdssupaccessrequest.ttblsupaccessrequest.NewttblsupaccessrequestRow();
             Supaccessrequest.UpdateRowFromSupaccessrequest(ref row, obj);
             pdssupaccessrequest.ttblsupaccessrequest.AddttblsupaccessrequestRow((pdssupaccessrequestDataSet.ttblsupaccessrequestRow)row);
         }
        
         string cErrorMessage = string.Empty;
         bool lSupplierAccessEnabled = false;
   
         
         NLogLoggerP.Trace("SupplierAccessEnabled - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.SupplierAccessEnabled(ref pdsContext,  pdssupaccessrequest, out cErrorMessage, out lSupplierAccessEnabled);
               }
            });
         NLogLoggerP.Info("SupplierAccessEnabled - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssupaccessrequest); 
    
         return lSupplierAccessEnabled;
      
      }

      public string SupplierAccessLaunch(IEnumerable<Supaccessrequest> supaccessrequest)
      {   
          
         var pdssupaccessrequest = new pdssupaccessrequestDataSet();
            
         foreach (var obj in supaccessrequest)
         {
             DataRow row = pdssupaccessrequest.ttblsupaccessrequest.NewttblsupaccessrequestRow();
             Supaccessrequest.UpdateRowFromSupaccessrequest(ref row, obj);
             pdssupaccessrequest.ttblsupaccessrequest.AddttblsupaccessrequestRow((pdssupaccessrequestDataSet.ttblsupaccessrequestRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cRequestID = string.Empty;
   
         
         NLogLoggerP.Trace("SupplierAccessLaunch - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.SupplierAccessLaunch(ref pdsContext,  pdssupaccessrequest, out cErrorMessage, out cRequestID);
               }
            });
         NLogLoggerP.Info("SupplierAccessLaunch - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssupaccessrequest); 
    
         return cRequestID;
      
      }

      public IEnumerable<Supaccessresponse> SupplierAccessResponse(string cRequestID)
      {   
         var results = new List<Supaccessresponse>();
         
         var pdssupaccessresponse = new pdssupaccessresponseDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SupplierAccessResponse - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.SupplierAccessResponse(ref pdsContext,  cRequestID, out pdssupaccessresponse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SupplierAccessResponse - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssupaccessresponse); 
    
            foreach (DataRow row in pdssupaccessresponse.ttblsupaccessresponse)
            {
                results.Add(Supaccessresponse.BuildSupaccessresponseFromRow(row));
            }
            return results;
        
      }

      public AsoelineOELinePriceCostWorkSheetInitResponseAPI OELinePriceCostWorkSheetInit(AsoelineOELinePriceCostWorkSheetInitRequestAPI AsoelineOELinePriceCostWorkSheetInitRequestAPI)
      {   
         var result = new AsoelineOELinePriceCostWorkSheetInitResponseAPI();
         
         var pdsoeiolines = new pdsoeiolinesDataSet();
            
         var pdsoelineworksheet = new pdsoelineworksheetDataSet();
            
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         var pdsoelinemovepricing = new pdsoelinemovepricingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELinePriceCostWorkSheetInitRequestAPI.oeiolinesresults)
         {
            DataRow ttbloeiolinesresultsRow = pdsoeiolines.ttbloeiolinesresults.NewttbloeiolinesresultsRow();
            Oeiolinesresults.UpdateRowFromOeiolinesresults(ref ttbloeiolinesresultsRow, obj);
            pdsoeiolines.ttbloeiolinesresults.AddttbloeiolinesresultsRow((pdsoeiolinesDataSet.ttbloeiolinesresultsRow)ttbloeiolinesresultsRow);
         }
          
         var  pvOrderno = AsoelineOELinePriceCostWorkSheetInitRequestAPI.pvOrderno;
            
         var  pvOrdersuf = AsoelineOELinePriceCostWorkSheetInitRequestAPI.pvOrdersuf;
            
         var  pvProcty = AsoelineOELinePriceCostWorkSheetInitRequestAPI.pvProcty;
            
         var  pvMaint = AsoelineOELinePriceCostWorkSheetInitRequestAPI.pvMaint;
            
         
         NLogLoggerP.Trace("OELinePriceCostWorkSheetInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceCostWorkSheetInit(ref pdsContext,  pvOrderno,  pvOrdersuf,  pvProcty,  pvMaint,  pdsoeiolines, out pdsoelineworksheet, out pdsoelinemovemultiple, out pdsoelinemovepricing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceCostWorkSheetInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiolines); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
         {
            result.oelinemovemultiple.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
         }     
         foreach (DataRow row in pdsoelinemovepricing.ttbloelinemovepricing)
         {
            result.oelinemovepricing.Add(Oelinemovepricing.BuildOelinemovepricingFromRow(row));
         }     
         foreach (DataRow row in pdsoelineworksheet.ttbloelineorigprice)
         {
            result.oelineorigprice.Add(Oelineorigprice.BuildOelineorigpriceFromRow(row));
         }     
         if (pdsoelineworksheet.ttbloelineworksheet.Count > 0)
         {
            result.oelineworksheet = Oelineworksheet.BuildOelineworksheetFromRow(pdsoelineworksheet.ttbloelineworksheet[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOELinePriceCostWorkSheetDetailResponseAPI OELinePriceCostWorkSheetDetail(AsoelineOELinePriceCostWorkSheetDetailRequestAPI AsoelineOELinePriceCostWorkSheetDetailRequestAPI)
      {   
         var result = new AsoelineOELinePriceCostWorkSheetDetailResponseAPI();
         
         var pdsoelineworksheet = new pdsoelineworksheetDataSet();
            
         var pdsoelinemovepricing = new pdsoelinemovepricingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELinePriceCostWorkSheetDetailRequestAPI.oelinemovepricing)
         {
            DataRow ttbloelinemovepricingRow = pdsoelinemovepricing.ttbloelinemovepricing.NewttbloelinemovepricingRow();
            Oelinemovepricing.UpdateRowFromOelinemovepricing(ref ttbloelinemovepricingRow, obj);
            pdsoelinemovepricing.ttbloelinemovepricing.AddttbloelinemovepricingRow((pdsoelinemovepricingDataSet.ttbloelinemovepricingRow)ttbloelinemovepricingRow);
         }
          
         foreach (var obj in AsoelineOELinePriceCostWorkSheetDetailRequestAPI.oelineorigprice)
         {
            DataRow ttbloelineorigpriceRow = pdsoelineworksheet.ttbloelineorigprice.NewttbloelineorigpriceRow();
            Oelineorigprice.UpdateRowFromOelineorigprice(ref ttbloelineorigpriceRow, obj);
            pdsoelineworksheet.ttbloelineorigprice.AddttbloelineorigpriceRow((pdsoelineworksheetDataSet.ttbloelineorigpriceRow)ttbloelineorigpriceRow);
         }
          
         DataRow ttbloelineworksheetRow = pdsoelineworksheet.ttbloelineworksheet.NewttbloelineworksheetRow();
         Oelineworksheet.UpdateRowFromOelineworksheet(ref ttbloelineworksheetRow, AsoelineOELinePriceCostWorkSheetDetailRequestAPI.oelineworksheet);
         pdsoelineworksheet.ttbloelineworksheet.AddttbloelineworksheetRow((pdsoelineworksheetDataSet.ttbloelineworksheetRow)ttbloelineworksheetRow);
          
         var  pvOrderno = AsoelineOELinePriceCostWorkSheetDetailRequestAPI.pvOrderno;
            
         var  pvOrdersuf = AsoelineOELinePriceCostWorkSheetDetailRequestAPI.pvOrdersuf;
            
         var  pvMaint = AsoelineOELinePriceCostWorkSheetDetailRequestAPI.pvMaint;
            
         var  pvFieldname = AsoelineOELinePriceCostWorkSheetDetailRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("OELinePriceCostWorkSheetDetail - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceCostWorkSheetDetail(ref pdsContext,  pvOrderno,  pvOrdersuf,  pvMaint,  pvFieldname, ref pdsoelineworksheet, ref pdsoelinemovepricing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceCostWorkSheetDetail - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineworksheet); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinemovepricing.ttbloelinemovepricing)
         {
            result.oelinemovepricing.Add(Oelinemovepricing.BuildOelinemovepricingFromRow(row));
         }     
         foreach (DataRow row in pdsoelineworksheet.ttbloelineorigprice)
         {
            result.oelineorigprice.Add(Oelineorigprice.BuildOelineorigpriceFromRow(row));
         }     
         if (pdsoelineworksheet.ttbloelineworksheet.Count > 0)
         {
            result.oelineworksheet = Oelineworksheet.BuildOelineworksheetFromRow(pdsoelineworksheet.ttbloelineworksheet[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> OELinePriceCostWorkSheetUpdate(AsoelineOELinePriceCostWorkSheetUpdateRequestAPI AsoelineOELinePriceCostWorkSheetUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoelineworksheet = new pdsoelineworksheetDataSet();
            
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         var pdsoelinemovepricing = new pdsoelinemovepricingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELinePriceCostWorkSheetUpdateRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         foreach (var obj in AsoelineOELinePriceCostWorkSheetUpdateRequestAPI.oelinemovepricing)
         {
            DataRow ttbloelinemovepricingRow = pdsoelinemovepricing.ttbloelinemovepricing.NewttbloelinemovepricingRow();
            Oelinemovepricing.UpdateRowFromOelinemovepricing(ref ttbloelinemovepricingRow, obj);
            pdsoelinemovepricing.ttbloelinemovepricing.AddttbloelinemovepricingRow((pdsoelinemovepricingDataSet.ttbloelinemovepricingRow)ttbloelinemovepricingRow);
         }
          
         DataRow ttbloelineworksheetRow = pdsoelineworksheet.ttbloelineworksheet.NewttbloelineworksheetRow();
         Oelineworksheet.UpdateRowFromOelineworksheet(ref ttbloelineworksheetRow, AsoelineOELinePriceCostWorkSheetUpdateRequestAPI.oelineworksheet);
         pdsoelineworksheet.ttbloelineworksheet.AddttbloelineworksheetRow((pdsoelineworksheetDataSet.ttbloelineworksheetRow)ttbloelineworksheetRow);
          
         var  pvOrderno = AsoelineOELinePriceCostWorkSheetUpdateRequestAPI.pvOrderno;
            
         var  pvOrdersuf = AsoelineOELinePriceCostWorkSheetUpdateRequestAPI.pvOrdersuf;
            
         
         NLogLoggerP.Trace("OELinePriceCostWorkSheetUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceCostWorkSheetUpdate(ref pdsContext,  pvOrderno,  pvOrdersuf,  pdsoelineworksheet,  pdsoelinemovemultiple,  pdsoelinemovepricing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceCostWorkSheetUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineworksheet); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoelineOELinePriceTabInitResponseAPI OELinePriceTabInit(Oeline oeline)
      {   
         var result = new AsoelineOELinePriceTabInitResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinepricetab = new pdsoelinepricetabDataSet();
            
         var pdsoelinepricetabsave = new pdsoelinepricetabsaveDataSet();
            
         var pdsoelinepricetabinfo = new pdsoelinepricetabinfoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELinePriceTabInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceTabInit(ref pdsContext,  pdsoeline, out pdsoelinepricetab, out pdsoelinepricetabsave, out pdsoelinepricetabinfo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceTabInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelinepricetab.ttbloelinepricetab.Count > 0)
         {
            result.oelinepricetab = Oelinepricetab.BuildOelinepricetabFromRow(pdsoelinepricetab.ttbloelinepricetab[0]);
         }
                    
         foreach (DataRow row in pdsoelinepricetab.ttbloelinepricetabdisclvl)
         {
            result.oelinepricetabdisclvl.Add(Oelinepricetabdisclvl.BuildOelinepricetabdisclvlFromRow(row));
         }     
         foreach (DataRow row in pdsoelinepricetab.ttbloelinepricetabprevprc)
         {
            result.oelinepricetabprevprc.Add(Oelinepricetabprevprc.BuildOelinepricetabprevprcFromRow(row));
         }     
         foreach (DataRow row in pdsoelinepricetab.ttbloelinepricetabpricelvl)
         {
            result.oelinepricetabpricelvl.Add(Oelinepricetabpricelvl.BuildOelinepricetabpricelvlFromRow(row));
         }     
         if (pdsoelinepricetabinfo.ttbloelinepricetabinfo.Count > 0)
         {
            result.oelinepricetabinfo = Oelinepricetabinfo.BuildOelinepricetabinfoFromRow(pdsoelinepricetabinfo.ttbloelinepricetabinfo[0]);
         }
                    
         if (pdsoelinepricetabsave.ttbloelinepricetabsave.Count > 0)
         {
            result.oelinepricetabsave = Oelinepricetabsave.BuildOelinepricetabsaveFromRow(pdsoelinepricetabsave.ttbloelinepricetabsave[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOELinePriceTabLeaveFieldResponseAPI OELinePriceTabLeaveField(AsoelineOELinePriceTabLeaveFieldRequestAPI AsoelineOELinePriceTabLeaveFieldRequestAPI)
      {   
         var result = new AsoelineOELinePriceTabLeaveFieldResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinepricetab = new pdsoelinepricetabDataSet();
            
         var pdsoelinepricetabsave = new pdsoelinepricetabsaveDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string pvChangelist = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELinePriceTabLeaveFieldRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinepricetabRow = pdsoelinepricetab.ttbloelinepricetab.NewttbloelinepricetabRow();
         Oelinepricetab.UpdateRowFromOelinepricetab(ref ttbloelinepricetabRow, AsoelineOELinePriceTabLeaveFieldRequestAPI.oelinepricetab);
         pdsoelinepricetab.ttbloelinepricetab.AddttbloelinepricetabRow((pdsoelinepricetabDataSet.ttbloelinepricetabRow)ttbloelinepricetabRow);
          
         foreach (var obj in AsoelineOELinePriceTabLeaveFieldRequestAPI.oelinepricetabdisclvl)
         {
            DataRow ttbloelinepricetabdisclvlRow = pdsoelinepricetab.ttbloelinepricetabdisclvl.NewttbloelinepricetabdisclvlRow();
            Oelinepricetabdisclvl.UpdateRowFromOelinepricetabdisclvl(ref ttbloelinepricetabdisclvlRow, obj);
            pdsoelinepricetab.ttbloelinepricetabdisclvl.AddttbloelinepricetabdisclvlRow((pdsoelinepricetabDataSet.ttbloelinepricetabdisclvlRow)ttbloelinepricetabdisclvlRow);
         }
          
         foreach (var obj in AsoelineOELinePriceTabLeaveFieldRequestAPI.oelinepricetabprevprc)
         {
            DataRow ttbloelinepricetabprevprcRow = pdsoelinepricetab.ttbloelinepricetabprevprc.NewttbloelinepricetabprevprcRow();
            Oelinepricetabprevprc.UpdateRowFromOelinepricetabprevprc(ref ttbloelinepricetabprevprcRow, obj);
            pdsoelinepricetab.ttbloelinepricetabprevprc.AddttbloelinepricetabprevprcRow((pdsoelinepricetabDataSet.ttbloelinepricetabprevprcRow)ttbloelinepricetabprevprcRow);
         }
          
         foreach (var obj in AsoelineOELinePriceTabLeaveFieldRequestAPI.oelinepricetabpricelvl)
         {
            DataRow ttbloelinepricetabpricelvlRow = pdsoelinepricetab.ttbloelinepricetabpricelvl.NewttbloelinepricetabpricelvlRow();
            Oelinepricetabpricelvl.UpdateRowFromOelinepricetabpricelvl(ref ttbloelinepricetabpricelvlRow, obj);
            pdsoelinepricetab.ttbloelinepricetabpricelvl.AddttbloelinepricetabpricelvlRow((pdsoelinepricetabDataSet.ttbloelinepricetabpricelvlRow)ttbloelinepricetabpricelvlRow);
         }
          
         DataRow ttbloelinepricetabsaveRow = pdsoelinepricetabsave.ttbloelinepricetabsave.NewttbloelinepricetabsaveRow();
         Oelinepricetabsave.UpdateRowFromOelinepricetabsave(ref ttbloelinepricetabsaveRow, AsoelineOELinePriceTabLeaveFieldRequestAPI.oelinepricetabsave);
         pdsoelinepricetabsave.ttbloelinepricetabsave.AddttbloelinepricetabsaveRow((pdsoelinepricetabsaveDataSet.ttbloelinepricetabsaveRow)ttbloelinepricetabsaveRow);
          
         var  pvFieldname = AsoelineOELinePriceTabLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("OELinePriceTabLeaveField - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceTabLeaveField(ref pdsContext,  pvFieldname, ref pdsoeline, ref pdsoelinepricetab, ref pdsoelinepricetabsave, out pvChangelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceTabLeaveField - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         if (pdsoelinepricetab.ttbloelinepricetab.Count > 0)
         {
            result.oelinepricetab = Oelinepricetab.BuildOelinepricetabFromRow(pdsoelinepricetab.ttbloelinepricetab[0]);
         }
                    
         if (pdsoelinepricetabsave.ttbloelinepricetabsave.Count > 0)
         {
            result.oelinepricetabsave = Oelinepricetabsave.BuildOelinepricetabsaveFromRow(pdsoelinepricetabsave.ttbloelinepricetabsave[0]);
         }
                    
         result.pvChangelist = pvChangelist;
          
         return result;
          
      }

      public Oelinepricetabinfo OELinePriceTabInfo(AsoelineOELinePriceTabInfoRequestAPI AsoelineOELinePriceTabInfoRequestAPI)
      {   
         var result = new Oelinepricetabinfo();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinepricetabsave = new pdsoelinepricetabsaveDataSet();
            
         var pdsoelinepricetabinfo = new pdsoelinepricetabinfoDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELinePriceTabInfoRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinepricetabsaveRow = pdsoelinepricetabsave.ttbloelinepricetabsave.NewttbloelinepricetabsaveRow();
         Oelinepricetabsave.UpdateRowFromOelinepricetabsave(ref ttbloelinepricetabsaveRow, AsoelineOELinePriceTabInfoRequestAPI.oelinepricetabsave);
         pdsoelinepricetabsave.ttbloelinepricetabsave.AddttbloelinepricetabsaveRow((pdsoelinepricetabsaveDataSet.ttbloelinepricetabsaveRow)ttbloelinepricetabsaveRow);
          
         
         NLogLoggerP.Trace("OELinePriceTabInfo - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePriceTabInfo(ref pdsContext,  pdsoeline,  pdsoelinepricetabsave, out pdsoelinepricetabinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePriceTabInfo - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinepricetabinfo.ttbloelinepricetabinfo.Count > 0) 
         { 
             result = Oelinepricetabinfo.BuildOelinepricetabinfoFromRow(pdsoelinepricetabinfo.ttbloelinepricetabinfo[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOELineOptProdListResponseAPI OELineOptProdList(bool pvMaint, int pvOrderno, int pvOrdersuf, int pvLineno)
      {   
         var result = new AsoelineOELineOptProdListResponseAPI();
         
         var pdsoelineoptprod = new pdsoelineoptprodDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineOptProdList - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineOptProdList(ref pdsContext,  pvMaint,  pvOrderno,  pvOrdersuf,  pvLineno, out pdsoelineoptprod, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OELineOptProdList - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineoptprod); 
    
         if (pdsoelineoptprod.ttbloelineoptprod.Count > 0)
         {
            result.oelineoptprod = Oelineoptprod.BuildOelineoptprodFromRow(pdsoelineoptprod.ttbloelineoptprod[0]);
         }
                    
         foreach (DataRow row in pdsoelineoptprod.ttbloelineoptprodresults)
         {
            result.oelineoptprodresults.Add(Oelineoptprodresults.BuildOelineoptprodresultsFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoelineOELineOptProdLeaveRowResponseAPI OELineOptProdLeaveRow(AsoelineOELineOptProdLeaveRowRequestAPI AsoelineOELineOptProdLeaveRowRequestAPI)
      {   
         var result = new AsoelineOELineOptProdLeaveRowResponseAPI();
         
         var pdsoelineoptprod = new pdsoelineoptprodDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineoptprodRow = pdsoelineoptprod.ttbloelineoptprod.NewttbloelineoptprodRow();
         Oelineoptprod.UpdateRowFromOelineoptprod(ref ttbloelineoptprodRow, AsoelineOELineOptProdLeaveRowRequestAPI.oelineoptprod);
         pdsoelineoptprod.ttbloelineoptprod.AddttbloelineoptprodRow((pdsoelineoptprodDataSet.ttbloelineoptprodRow)ttbloelineoptprodRow);
          
         DataRow ttbloelineoptprodresultsRow = pdsoelineoptprod.ttbloelineoptprodresults.NewttbloelineoptprodresultsRow();
         Oelineoptprodresults.UpdateRowFromOelineoptprodresults(ref ttbloelineoptprodresultsRow, AsoelineOELineOptProdLeaveRowRequestAPI.oelineoptprodresults);
         pdsoelineoptprod.ttbloelineoptprodresults.AddttbloelineoptprodresultsRow((pdsoelineoptprodDataSet.ttbloelineoptprodresultsRow)ttbloelineoptprodresultsRow);
          
         
         NLogLoggerP.Trace("OELineOptProdLeaveRow - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineOptProdLeaveRow(ref pdsContext, ref pdsoelineoptprod, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineOptProdLeaveRow - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineoptprod); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoelineoptprod.ttbloelineoptprodresults.Count > 0)
         {
            result.oelineoptprodresults = Oelineoptprodresults.BuildOelineoptprodresultsFromRow(pdsoelineoptprod.ttbloelineoptprodresults[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> OELineOptProdUpdate(AsoelineOELineOptProdUpdateRequestAPI AsoelineOELineOptProdUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoelineoptprod = new pdsoelineoptprodDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineoptprodRow = pdsoelineoptprod.ttbloelineoptprod.NewttbloelineoptprodRow();
         Oelineoptprod.UpdateRowFromOelineoptprod(ref ttbloelineoptprodRow, AsoelineOELineOptProdUpdateRequestAPI.oelineoptprod);
         pdsoelineoptprod.ttbloelineoptprod.AddttbloelineoptprodRow((pdsoelineoptprodDataSet.ttbloelineoptprodRow)ttbloelineoptprodRow);
          
         foreach (var obj in AsoelineOELineOptProdUpdateRequestAPI.oelineoptprodresults)
         {
            DataRow ttbloelineoptprodresultsRow = pdsoelineoptprod.ttbloelineoptprodresults.NewttbloelineoptprodresultsRow();
            Oelineoptprodresults.UpdateRowFromOelineoptprodresults(ref ttbloelineoptprodresultsRow, obj);
            pdsoelineoptprod.ttbloelineoptprodresults.AddttbloelineoptprodresultsRow((pdsoelineoptprodDataSet.ttbloelineoptprodresultsRow)ttbloelineoptprodresultsRow);
         }
          
         
         NLogLoggerP.Trace("OELineOptProdUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineOptProdUpdate(ref pdsContext,  pdsoelineoptprod, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineOptProdUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineoptprod); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoelineOELineSuperAvailInitResponseAPI OELineSuperAvailInit(Oeline oeline)
      {   
         var result = new AsoelineOELineSuperAvailInitResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinesuperavail = new pdsoelinesuperavailDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineSuperAvailInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineSuperAvailInit(ref pdsContext,  pdsoeline, out pdsoelinesuperavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineSuperAvailInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         if (pdsoelinesuperavail.ttbloelinesuperavailcriteria.Count > 0)
         {
            result.oelinesuperavailcriteria = Oelinesuperavailcriteria.BuildOelinesuperavailcriteriaFromRow(pdsoelinesuperavail.ttbloelinesuperavailcriteria[0]);
         }
                    
         foreach (DataRow row in pdsoelinesuperavail.ttbloelinesuperavailresults)
         {
            result.oelinesuperavailresults.Add(Oelinesuperavailresults.BuildOelinesuperavailresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void OELineSuperAvailLeaveRow(AsoelineOELineSuperAvailLeaveRowRequestAPI AsoelineOELineSuperAvailLeaveRowRequestAPI)
      {   
         
         var pdsoelinesuperavail = new pdsoelinesuperavailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelinesuperavailcriteriaRow = pdsoelinesuperavail.ttbloelinesuperavailcriteria.NewttbloelinesuperavailcriteriaRow();
         Oelinesuperavailcriteria.UpdateRowFromOelinesuperavailcriteria(ref ttbloelinesuperavailcriteriaRow, AsoelineOELineSuperAvailLeaveRowRequestAPI.oelinesuperavailcriteria);
         pdsoelinesuperavail.ttbloelinesuperavailcriteria.AddttbloelinesuperavailcriteriaRow((pdsoelinesuperavailDataSet.ttbloelinesuperavailcriteriaRow)ttbloelinesuperavailcriteriaRow);
          
         DataRow ttbloelinesuperavailresultsRow = pdsoelinesuperavail.ttbloelinesuperavailresults.NewttbloelinesuperavailresultsRow();
         Oelinesuperavailresults.UpdateRowFromOelinesuperavailresults(ref ttbloelinesuperavailresultsRow, AsoelineOELineSuperAvailLeaveRowRequestAPI.oelinesuperavailresults);
         pdsoelinesuperavail.ttbloelinesuperavailresults.AddttbloelinesuperavailresultsRow((pdsoelinesuperavailDataSet.ttbloelinesuperavailresultsRow)ttbloelinesuperavailresultsRow);
          
         
         NLogLoggerP.Trace("OELineSuperAvailLeaveRow - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineSuperAvailLeaveRow(ref pdsContext,  pdsoelinesuperavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineSuperAvailLeaveRow - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinesuperavail);
      }

      public Oeline OELineSuperAvailUpdate(AsoelineOELineSuperAvailUpdateRequestAPI AsoelineOELineSuperAvailUpdateRequestAPI)
      {   
         var result = new Oeline();
         
         var pdsoelinesuperavail = new pdsoelinesuperavailDataSet();
            
         var pdsoeline = new pdsoelineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineSuperAvailUpdateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloelinesuperavailcriteriaRow = pdsoelinesuperavail.ttbloelinesuperavailcriteria.NewttbloelinesuperavailcriteriaRow();
         Oelinesuperavailcriteria.UpdateRowFromOelinesuperavailcriteria(ref ttbloelinesuperavailcriteriaRow, AsoelineOELineSuperAvailUpdateRequestAPI.oelinesuperavailcriteria);
         pdsoelinesuperavail.ttbloelinesuperavailcriteria.AddttbloelinesuperavailcriteriaRow((pdsoelinesuperavailDataSet.ttbloelinesuperavailcriteriaRow)ttbloelinesuperavailcriteriaRow);
          
         foreach (var obj in AsoelineOELineSuperAvailUpdateRequestAPI.oelinesuperavailresults)
         {
            DataRow ttbloelinesuperavailresultsRow = pdsoelinesuperavail.ttbloelinesuperavailresults.NewttbloelinesuperavailresultsRow();
            Oelinesuperavailresults.UpdateRowFromOelinesuperavailresults(ref ttbloelinesuperavailresultsRow, obj);
            pdsoelinesuperavail.ttbloelinesuperavailresults.AddttbloelinesuperavailresultsRow((pdsoelinesuperavailDataSet.ttbloelinesuperavailresultsRow)ttbloelinesuperavailresultsRow);
         }
          
         
         NLogLoggerP.Trace("OELineSuperAvailUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineSuperAvailUpdate(ref pdsContext,  pdsoelinesuperavail, ref pdsoeline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineSuperAvailUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinesuperavail); 
    
         if (pdsoeline.ttbloeline.Count > 0) 
         { 
             result = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOELineViewEDIErrExcResponseAPI OELineViewEDIErrExc(AsoelineOELineViewEDIErrExcRequestAPI AsoelineOELineViewEDIErrExcRequestAPI)
      {   
         var result = new AsoelineOELineViewEDIErrExcResponseAPI();
         
         var pdsoelineviewedidata = new pdsoelineviewedidataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineedicriteriaRow = pdsoelineviewedidata.ttbloelineedicriteria.NewttbloelineedicriteriaRow();
         Oelineedicriteria.UpdateRowFromOelineedicriteria(ref ttbloelineedicriteriaRow, AsoelineOELineViewEDIErrExcRequestAPI.oelineedicriteria);
         pdsoelineviewedidata.ttbloelineedicriteria.AddttbloelineedicriteriaRow((pdsoelineviewedidataDataSet.ttbloelineedicriteriaRow)ttbloelineedicriteriaRow);
          
         foreach (var obj in AsoelineOELineViewEDIErrExcRequestAPI.oelineedierrorresults)
         {
            DataRow ttbloelineedierrorresultsRow = pdsoelineviewedidata.ttbloelineedierrorresults.NewttbloelineedierrorresultsRow();
            Oelineedierrorresults.UpdateRowFromOelineedierrorresults(ref ttbloelineedierrorresultsRow, obj);
            pdsoelineviewedidata.ttbloelineedierrorresults.AddttbloelineedierrorresultsRow((pdsoelineviewedidataDataSet.ttbloelineedierrorresultsRow)ttbloelineedierrorresultsRow);
         }
          
         
         NLogLoggerP.Trace("OELineViewEDIErrExc - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineViewEDIErrExc(ref pdsContext, ref pdsoelineviewedidata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineViewEDIErrExc - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineviewedidata); 
    
         if (pdsoelineviewedidata.ttbloelineedicriteria.Count > 0)
         {
            result.oelineedicriteria = Oelineedicriteria.BuildOelineedicriteriaFromRow(pdsoelineviewedidata.ttbloelineedicriteria[0]);
         }
                    
         foreach (DataRow row in pdsoelineviewedidata.ttbloelineedierrorresults)
         {
            result.oelineedierrorresults.Add(Oelineedierrorresults.BuildOelineedierrorresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Oelinecrdate OELineCorrectionDate(Oelinecrdate oelinecrdate)
      {   
         var result = new Oelinecrdate();
         
         var pdsoelinecrdate = new pdsoelinecrdateDataSet();
            
         DataRow ttbloelinecrdateCriteria = pdsoelinecrdate.ttbloelinecrdate.NewttbloelinecrdateRow();
         Oelinecrdate.UpdateRowFromOelinecrdate(ref ttbloelinecrdateCriteria, oelinecrdate);
         pdsoelinecrdate.ttbloelinecrdate.AddttbloelinecrdateRow((pdsoelinecrdateDataSet.ttbloelinecrdateRow)ttbloelinecrdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCorrectionDate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCorrectionDate(ref pdsContext, ref pdsoelinecrdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCorrectionDate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecrdate); 
    
         if (pdsoelinecrdate.ttbloelinecrdate.Count > 0) 
         { 
             result = Oelinecrdate.BuildOelinecrdateFromRow(pdsoelinecrdate.ttbloelinecrdate[0]);
         } 
              
          
         return result;
          
      }

      public Oelinecrjur OELineCorrectionJurisdiction(Oelinecrjur oelinecrjur)
      {   
         var result = new Oelinecrjur();
         
         var pdsoelinecrjur = new pdsoelinecrjurDataSet();
            
         DataRow ttbloelinecrjurCriteria = pdsoelinecrjur.ttbloelinecrjur.NewttbloelinecrjurRow();
         Oelinecrjur.UpdateRowFromOelinecrjur(ref ttbloelinecrjurCriteria, oelinecrjur);
         pdsoelinecrjur.ttbloelinecrjur.AddttbloelinecrjurRow((pdsoelinecrjurDataSet.ttbloelinecrjurRow)ttbloelinecrjurCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCorrectionJurisdiction - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCorrectionJurisdiction(ref pdsContext, ref pdsoelinecrjur, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCorrectionJurisdiction - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecrjur); 
    
         if (pdsoelinecrjur.ttbloelinecrjur.Count > 0) 
         { 
             result = Oelinecrjur.BuildOelinecrjurFromRow(pdsoelinecrjur.ttbloelinecrjur[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineCreateProdFromCatalogResponseAPI CreateProdFromCatalog(Createprodfromcatcriteria createprodfromcatcriteria)
      {   
         var result = new AsoelineCreateProdFromCatalogResponseAPI();
         
         var pdscreateprodfromcat = new pdscreateprodfromcatDataSet();
            
         DataRow ttblcreateprodfromcatcriteriaCriteria = pdscreateprodfromcat.ttblcreateprodfromcatcriteria.NewttblcreateprodfromcatcriteriaRow();
         Createprodfromcatcriteria.UpdateRowFromCreateprodfromcatcriteria(ref ttblcreateprodfromcatcriteriaCriteria, createprodfromcatcriteria);
         pdscreateprodfromcat.ttblcreateprodfromcatcriteria.AddttblcreateprodfromcatcriteriaRow((pdscreateprodfromcatDataSet.ttblcreateprodfromcatcriteriaRow)ttblcreateprodfromcatcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateProdFromCatalog - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.CreateProdFromCatalog(ref pdsContext, ref pdscreateprodfromcat, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("CreateProdFromCatalog - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreateprodfromcat); 
    
         if (pdscreateprodfromcat.ttblcreateprodfromcatresults.Count > 0)
         {
            result.createprodfromcatresults = Createprodfromcatresults.BuildCreateprodfromcatresultsFromRow(pdscreateprodfromcat.ttblcreateprodfromcatresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoelineLoadOETallyResponseAPI LoadOETally(Loadoetallycriteria loadoetallycriteria)
      {   
         var result = new AsoelineLoadOETallyResponseAPI();
         
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         DataRow ttblloadoetallycriteriaCriteria = pdsloadoetally.ttblloadoetallycriteria.NewttblloadoetallycriteriaRow();
         Loadoetallycriteria.UpdateRowFromLoadoetallycriteria(ref ttblloadoetallycriteriaCriteria, loadoetallycriteria);
         pdsloadoetally.ttblloadoetallycriteria.AddttblloadoetallycriteriaRow((pdsloadoetallyDataSet.ttblloadoetallycriteriaRow)ttblloadoetallycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETally - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.LoadOETally(ref pdsContext, ref pdsloadoetally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETally - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetally); 
    
         foreach (DataRow row in pdsloadoetally.ttblloadoetallyresults)
         {
            result.loadoetallyresults.Add(Loadoetallyresults.BuildLoadoetallyresultsFromRow(row));
         }     
         if (pdsloadoetally.ttblloadoetallysingle.Count > 0)
         {
            result.loadoetallysingle = Loadoetallysingle.BuildLoadoetallysingleFromRow(pdsloadoetally.ttblloadoetallysingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOEBundlesAddResponseAPI OEBundlesAdd(AsoelineOEBundlesAddRequestAPI AsoelineOEBundlesAddRequestAPI)
      {   
         var result = new AsoelineOEBundlesAddResponseAPI();
         
         var pdsoebundles = new pdsoebundlesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloebundlescontrolRow = pdsoebundles.ttbloebundlescontrol.NewttbloebundlescontrolRow();
         Oebundlescontrol.UpdateRowFromOebundlescontrol(ref ttbloebundlescontrolRow, AsoelineOEBundlesAddRequestAPI.oebundlescontrol);
         pdsoebundles.ttbloebundlescontrol.AddttbloebundlescontrolRow((pdsoebundlesDataSet.ttbloebundlescontrolRow)ttbloebundlescontrolRow);
          
         DataRow ttbloebundlescriteriaRow = pdsoebundles.ttbloebundlescriteria.NewttbloebundlescriteriaRow();
         Oebundlescriteria.UpdateRowFromOebundlescriteria(ref ttbloebundlescriteriaRow, AsoelineOEBundlesAddRequestAPI.oebundlescriteria);
         pdsoebundles.ttbloebundlescriteria.AddttbloebundlescriteriaRow((pdsoebundlesDataSet.ttbloebundlescriteriaRow)ttbloebundlescriteriaRow);
          
         var  cBundleList = AsoelineOEBundlesAddRequestAPI.cBundleList;
            
         
         NLogLoggerP.Trace("OEBundlesAdd - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEBundlesAdd(ref pdsContext,  cBundleList, ref pdsoebundles, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEBundlesAdd - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoebundles); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoebundles.ttbloebundlescontrol.Count > 0)
         {
            result.oebundlescontrol = Oebundlescontrol.BuildOebundlescontrolFromRow(pdsoebundles.ttbloebundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdsoebundles.ttbloebundlesresults)
         {
            result.oebundlesresults.Add(Oebundlesresults.BuildOebundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineOEBundlesAfterDetailResponseAPI OEBundlesAfterDetail(AsoelineOEBundlesAfterDetailRequestAPI AsoelineOEBundlesAfterDetailRequestAPI)
      {   
         var result = new AsoelineOEBundlesAfterDetailResponseAPI();
         
         var pdsoebundles = new pdsoebundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloebundlescontrolRow = pdsoebundles.ttbloebundlescontrol.NewttbloebundlescontrolRow();
         Oebundlescontrol.UpdateRowFromOebundlescontrol(ref ttbloebundlescontrolRow, AsoelineOEBundlesAfterDetailRequestAPI.oebundlescontrol);
         pdsoebundles.ttbloebundlescontrol.AddttbloebundlescontrolRow((pdsoebundlesDataSet.ttbloebundlescontrolRow)ttbloebundlescontrolRow);
          
         DataRow ttbloebundlescriteriaRow = pdsoebundles.ttbloebundlescriteria.NewttbloebundlescriteriaRow();
         Oebundlescriteria.UpdateRowFromOebundlescriteria(ref ttbloebundlescriteriaRow, AsoelineOEBundlesAfterDetailRequestAPI.oebundlescriteria);
         pdsoebundles.ttbloebundlescriteria.AddttbloebundlescriteriaRow((pdsoebundlesDataSet.ttbloebundlescriteriaRow)ttbloebundlescriteriaRow);
          
         
         NLogLoggerP.Trace("OEBundlesAfterDetail - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEBundlesAfterDetail(ref pdsContext, ref pdsoebundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEBundlesAfterDetail - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoebundles); 
    
         if (pdsoebundles.ttbloebundlescontrol.Count > 0)
         {
            result.oebundlescontrol = Oebundlescontrol.BuildOebundlescontrolFromRow(pdsoebundles.ttbloebundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdsoebundles.ttbloebundlesresults)
         {
            result.oebundlesresults.Add(Oebundlesresults.BuildOebundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Oebundlescontrol OEBundlesDelete(AsoelineOEBundlesDeleteRequestAPI AsoelineOEBundlesDeleteRequestAPI)
      {   
         var result = new Oebundlescontrol();
         
         var pdsoebundles = new pdsoebundlesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloebundlescontrolRow = pdsoebundles.ttbloebundlescontrol.NewttbloebundlescontrolRow();
         Oebundlescontrol.UpdateRowFromOebundlescontrol(ref ttbloebundlescontrolRow, AsoelineOEBundlesDeleteRequestAPI.oebundlescontrol);
         pdsoebundles.ttbloebundlescontrol.AddttbloebundlescontrolRow((pdsoebundlesDataSet.ttbloebundlescontrolRow)ttbloebundlescontrolRow);
          
         DataRow ttbloebundlescriteriaRow = pdsoebundles.ttbloebundlescriteria.NewttbloebundlescriteriaRow();
         Oebundlescriteria.UpdateRowFromOebundlescriteria(ref ttbloebundlescriteriaRow, AsoelineOEBundlesDeleteRequestAPI.oebundlescriteria);
         pdsoebundles.ttbloebundlescriteria.AddttbloebundlescriteriaRow((pdsoebundlesDataSet.ttbloebundlescriteriaRow)ttbloebundlescriteriaRow);
          
         var  cBundleID = AsoelineOEBundlesDeleteRequestAPI.cBundleID;
            
         
         NLogLoggerP.Trace("OEBundlesDelete - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEBundlesDelete(ref pdsContext,  cBundleID, ref pdsoebundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEBundlesDelete - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoebundles); 
    
         if (pdsoebundles.ttbloebundlescontrol.Count > 0) 
         { 
             result = Oebundlescontrol.BuildOebundlescontrolFromRow(pdsoebundles.ttbloebundlescontrol[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOEBundlesLoadResponseAPI OEBundlesLoad(Oebundlescriteria oebundlescriteria)
      {   
         var result = new AsoelineOEBundlesLoadResponseAPI();
         
         var pdsoebundles = new pdsoebundlesDataSet();
            
         DataRow ttbloebundlescriteriaCriteria = pdsoebundles.ttbloebundlescriteria.NewttbloebundlescriteriaRow();
         Oebundlescriteria.UpdateRowFromOebundlescriteria(ref ttbloebundlescriteriaCriteria, oebundlescriteria);
         pdsoebundles.ttbloebundlescriteria.AddttbloebundlescriteriaRow((pdsoebundlesDataSet.ttbloebundlescriteriaRow)ttbloebundlescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEBundlesLoad - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEBundlesLoad(ref pdsContext, ref pdsoebundles, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEBundlesLoad - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoebundles); 
    
         if (pdsoebundles.ttbloebundlescontrol.Count > 0)
         {
            result.oebundlescontrol = Oebundlescontrol.BuildOebundlescontrolFromRow(pdsoebundles.ttbloebundlescontrol[0]);
         }
                    
         foreach (DataRow row in pdsoebundles.ttbloebundlesresults)
         {
            result.oebundlesresults.Add(Oebundlesresults.BuildOebundlesresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Oebundleslookupresults> OEBundlesLookup(Oebundleslookupcriteria oebundleslookupcriteria)
      {   
         var results = new List<Oebundleslookupresults>();
         
         var pdsoebundleslookup = new pdsoebundleslookupDataSet();
            
         DataRow ttbloebundleslookupcriteriaCriteria = pdsoebundleslookup.ttbloebundleslookupcriteria.NewttbloebundleslookupcriteriaRow();
         Oebundleslookupcriteria.UpdateRowFromOebundleslookupcriteria(ref ttbloebundleslookupcriteriaCriteria, oebundleslookupcriteria);
         pdsoebundleslookup.ttbloebundleslookupcriteria.AddttbloebundleslookupcriteriaRow((pdsoebundleslookupDataSet.ttbloebundleslookupcriteriaRow)ttbloebundleslookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEBundlesLookup - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEBundlesLookup(ref pdsContext, ref pdsoebundleslookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEBundlesLookup - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoebundleslookup); 
    
            foreach (DataRow row in pdsoebundleslookup.ttbloebundleslookupresults)
            {
                results.Add(Oebundleslookupresults.BuildOebundleslookupresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelineassembly> OEETAssemblyBuild(AsoelineOEETAssemblyBuildRequestAPI AsoelineOEETAssemblyBuildRequestAPI)
      {   
         var results = new List<Oelineassembly>();
         
         var pdsoeetassemblynonstock = new pdsoeetassemblynonstockDataSet();
            
         var pdsoeetassemblysegmentinfo = new pdsoeetassemblysegmentinfoDataSet();
            
         var pdsoeetassemblybuild = new pdsoeetassemblybuildDataSet();
            
         var pdsoelineassembly = new pdsoelineassemblyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeetassemblybuildcriteriaRow = pdsoeetassemblybuild.ttbloeetassemblybuildcriteria.NewttbloeetassemblybuildcriteriaRow();
         Oeetassemblybuildcriteria.UpdateRowFromOeetassemblybuildcriteria(ref ttbloeetassemblybuildcriteriaRow, AsoelineOEETAssemblyBuildRequestAPI.oeetassemblybuildcriteria);
         pdsoeetassemblybuild.ttbloeetassemblybuildcriteria.AddttbloeetassemblybuildcriteriaRow((pdsoeetassemblybuildDataSet.ttbloeetassemblybuildcriteriaRow)ttbloeetassemblybuildcriteriaRow);
          
         DataRow ttbloeetassemblynonstockcriteriaRow = pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.NewttbloeetassemblynonstockcriteriaRow();
         Oeetassemblynonstockcriteria.UpdateRowFromOeetassemblynonstockcriteria(ref ttbloeetassemblynonstockcriteriaRow, AsoelineOEETAssemblyBuildRequestAPI.oeetassemblynonstockcriteria);
         pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.AddttbloeetassemblynonstockcriteriaRow((pdsoeetassemblynonstockDataSet.ttbloeetassemblynonstockcriteriaRow)ttbloeetassemblynonstockcriteriaRow);
          
         foreach (var obj in AsoelineOEETAssemblyBuildRequestAPI.oeetassemblynonstockresults)
         {
            DataRow ttbloeetassemblynonstockresultsRow = pdsoeetassemblynonstock.ttbloeetassemblynonstockresults.NewttbloeetassemblynonstockresultsRow();
            Oeetassemblynonstockresults.UpdateRowFromOeetassemblynonstockresults(ref ttbloeetassemblynonstockresultsRow, obj);
            pdsoeetassemblynonstock.ttbloeetassemblynonstockresults.AddttbloeetassemblynonstockresultsRow((pdsoeetassemblynonstockDataSet.ttbloeetassemblynonstockresultsRow)ttbloeetassemblynonstockresultsRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyBuildRequestAPI.oeetassemblysegmentdelim)
         {
            DataRow ttbloeetassemblysegmentdelimRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.NewttbloeetassemblysegmentdelimRow();
            Oeetassemblysegmentdelim.UpdateRowFromOeetassemblysegmentdelim(ref ttbloeetassemblysegmentdelimRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.AddttbloeetassemblysegmentdelimRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentdelimRow)ttbloeetassemblysegmentdelimRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyBuildRequestAPI.oeetassemblysegmentinfo)
         {
            DataRow ttbloeetassemblysegmentinfoRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.NewttbloeetassemblysegmentinfoRow();
            Oeetassemblysegmentinfo.UpdateRowFromOeetassemblysegmentinfo(ref ttbloeetassemblysegmentinfoRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.AddttbloeetassemblysegmentinfoRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentinfoRow)ttbloeetassemblysegmentinfoRow);
         }
          
         
         NLogLoggerP.Trace("OEETAssemblyBuild - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyBuild(ref pdsContext,  pdsoeetassemblynonstock,  pdsoeetassemblysegmentinfo,  pdsoeetassemblybuild, out pdsoelineassembly, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyBuild - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblynonstock); 
    
            foreach (DataRow row in pdsoelineassembly.ttbloelineassembly)
            {
                results.Add(Oelineassembly.BuildOelineassemblyFromRow(row));
            }
            return results;
        
      }

      public AsoelineOEETAssemblyConfigInitResponseAPI OEETAssemblyConfigInit(Oeetassemblyconfigcriteria oeetassemblyconfigcriteria)
      {   
         var result = new AsoelineOEETAssemblyConfigInitResponseAPI();
         
         var pdsoeetassemblyconfig = new pdsoeetassemblyconfigDataSet();
            
         var pdsoeetassemblysegmentinfo = new pdsoeetassemblysegmentinfoDataSet();
            
         DataRow ttbloeetassemblyconfigcriteriaCriteria = pdsoeetassemblyconfig.ttbloeetassemblyconfigcriteria.NewttbloeetassemblyconfigcriteriaRow();
         Oeetassemblyconfigcriteria.UpdateRowFromOeetassemblyconfigcriteria(ref ttbloeetassemblyconfigcriteriaCriteria, oeetassemblyconfigcriteria);
         pdsoeetassemblyconfig.ttbloeetassemblyconfigcriteria.AddttbloeetassemblyconfigcriteriaRow((pdsoeetassemblyconfigDataSet.ttbloeetassemblyconfigcriteriaRow)ttbloeetassemblyconfigcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEETAssemblyConfigInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyConfigInit(ref pdsContext, ref pdsoeetassemblyconfig, out pdsoeetassemblysegmentinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyConfigInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblyconfig); 
    
         if (pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle.Count > 0)
         {
            result.oeetassemblyconfigsingle = Oeetassemblyconfigsingle.BuildOeetassemblyconfigsingleFromRow(pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle[0]);
         }
                    
         foreach (DataRow row in pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim)
         {
            result.oeetassemblysegmentdelim.Add(Oeetassemblysegmentdelim.BuildOeetassemblysegmentdelimFromRow(row));
         }     
         foreach (DataRow row in pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo)
         {
            result.oeetassemblysegmentinfo.Add(Oeetassemblysegmentinfo.BuildOeetassemblysegmentinfoFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineOEETAssemblyConfigValidateResponseAPI OEETAssemblyConfigValidate(AsoelineOEETAssemblyConfigValidateRequestAPI AsoelineOEETAssemblyConfigValidateRequestAPI)
      {   
         var result = new AsoelineOEETAssemblyConfigValidateResponseAPI();
         
         var pdsoeetassemblyconfig = new pdsoeetassemblyconfigDataSet();
            
         var pdsoeetassemblysegmentinfo = new pdsoeetassemblysegmentinfoDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloeetassemblyconfigcriteriaRow = pdsoeetassemblyconfig.ttbloeetassemblyconfigcriteria.NewttbloeetassemblyconfigcriteriaRow();
         Oeetassemblyconfigcriteria.UpdateRowFromOeetassemblyconfigcriteria(ref ttbloeetassemblyconfigcriteriaRow, AsoelineOEETAssemblyConfigValidateRequestAPI.oeetassemblyconfigcriteria);
         pdsoeetassemblyconfig.ttbloeetassemblyconfigcriteria.AddttbloeetassemblyconfigcriteriaRow((pdsoeetassemblyconfigDataSet.ttbloeetassemblyconfigcriteriaRow)ttbloeetassemblyconfigcriteriaRow);
          
         DataRow ttbloeetassemblyconfigsingleRow = pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle.NewttbloeetassemblyconfigsingleRow();
         Oeetassemblyconfigsingle.UpdateRowFromOeetassemblyconfigsingle(ref ttbloeetassemblyconfigsingleRow, AsoelineOEETAssemblyConfigValidateRequestAPI.oeetassemblyconfigsingle);
         pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle.AddttbloeetassemblyconfigsingleRow((pdsoeetassemblyconfigDataSet.ttbloeetassemblyconfigsingleRow)ttbloeetassemblyconfigsingleRow);
          
         foreach (var obj in AsoelineOEETAssemblyConfigValidateRequestAPI.oeetassemblysegmentdelim)
         {
            DataRow ttbloeetassemblysegmentdelimRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.NewttbloeetassemblysegmentdelimRow();
            Oeetassemblysegmentdelim.UpdateRowFromOeetassemblysegmentdelim(ref ttbloeetassemblysegmentdelimRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.AddttbloeetassemblysegmentdelimRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentdelimRow)ttbloeetassemblysegmentdelimRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyConfigValidateRequestAPI.oeetassemblysegmentinfo)
         {
            DataRow ttbloeetassemblysegmentinfoRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.NewttbloeetassemblysegmentinfoRow();
            Oeetassemblysegmentinfo.UpdateRowFromOeetassemblysegmentinfo(ref ttbloeetassemblysegmentinfoRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.AddttbloeetassemblysegmentinfoRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentinfoRow)ttbloeetassemblysegmentinfoRow);
         }
          
         
         NLogLoggerP.Trace("OEETAssemblyConfigValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyConfigValidate(ref pdsContext, ref pdsoeetassemblyconfig,  pdsoeetassemblysegmentinfo, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyConfigValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblyconfig); 
    
         if (pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle.Count > 0)
         {
            result.oeetassemblyconfigsingle = Oeetassemblyconfigsingle.BuildOeetassemblyconfigsingleFromRow(pdsoeetassemblyconfig.ttbloeetassemblyconfigsingle[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoelineOEETAssemblyFinalResponseAPI OEETAssemblyFinal(AsoelineOEETAssemblyFinalRequestAPI AsoelineOEETAssemblyFinalRequestAPI)
      {   
         var result = new AsoelineOEETAssemblyFinalResponseAPI();
         
         var pdsoeetassemblynonstock = new pdsoeetassemblynonstockDataSet();
            
         var pdsoeetassemblysegmentinfo = new pdsoeetassemblysegmentinfoDataSet();
            
         var pdsoeetassemblyfinal = new pdsoeetassemblyfinalDataSet();
            
         var pdsoeline = new pdsoelineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeetassemblyfinalcriteriaRow = pdsoeetassemblyfinal.ttbloeetassemblyfinalcriteria.NewttbloeetassemblyfinalcriteriaRow();
         Oeetassemblyfinalcriteria.UpdateRowFromOeetassemblyfinalcriteria(ref ttbloeetassemblyfinalcriteriaRow, AsoelineOEETAssemblyFinalRequestAPI.oeetassemblyfinalcriteria);
         pdsoeetassemblyfinal.ttbloeetassemblyfinalcriteria.AddttbloeetassemblyfinalcriteriaRow((pdsoeetassemblyfinalDataSet.ttbloeetassemblyfinalcriteriaRow)ttbloeetassemblyfinalcriteriaRow);
          
         DataRow ttbloeetassemblynonstockcriteriaRow = pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.NewttbloeetassemblynonstockcriteriaRow();
         Oeetassemblynonstockcriteria.UpdateRowFromOeetassemblynonstockcriteria(ref ttbloeetassemblynonstockcriteriaRow, AsoelineOEETAssemblyFinalRequestAPI.oeetassemblynonstockcriteria);
         pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.AddttbloeetassemblynonstockcriteriaRow((pdsoeetassemblynonstockDataSet.ttbloeetassemblynonstockcriteriaRow)ttbloeetassemblynonstockcriteriaRow);
          
         foreach (var obj in AsoelineOEETAssemblyFinalRequestAPI.oeetassemblynonstockresults)
         {
            DataRow ttbloeetassemblynonstockresultsRow = pdsoeetassemblynonstock.ttbloeetassemblynonstockresults.NewttbloeetassemblynonstockresultsRow();
            Oeetassemblynonstockresults.UpdateRowFromOeetassemblynonstockresults(ref ttbloeetassemblynonstockresultsRow, obj);
            pdsoeetassemblynonstock.ttbloeetassemblynonstockresults.AddttbloeetassemblynonstockresultsRow((pdsoeetassemblynonstockDataSet.ttbloeetassemblynonstockresultsRow)ttbloeetassemblynonstockresultsRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyFinalRequestAPI.oeetassemblysegmentdelim)
         {
            DataRow ttbloeetassemblysegmentdelimRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.NewttbloeetassemblysegmentdelimRow();
            Oeetassemblysegmentdelim.UpdateRowFromOeetassemblysegmentdelim(ref ttbloeetassemblysegmentdelimRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.AddttbloeetassemblysegmentdelimRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentdelimRow)ttbloeetassemblysegmentdelimRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyFinalRequestAPI.oeetassemblysegmentinfo)
         {
            DataRow ttbloeetassemblysegmentinfoRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.NewttbloeetassemblysegmentinfoRow();
            Oeetassemblysegmentinfo.UpdateRowFromOeetassemblysegmentinfo(ref ttbloeetassemblysegmentinfoRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.AddttbloeetassemblysegmentinfoRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentinfoRow)ttbloeetassemblysegmentinfoRow);
         }
          
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOEETAssemblyFinalRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         
         NLogLoggerP.Trace("OEETAssemblyFinal - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyFinal(ref pdsContext,  pdsoeetassemblynonstock,  pdsoeetassemblysegmentinfo, ref pdsoeetassemblyfinal, ref pdsoeline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyFinal - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblynonstock); 
    
         if (pdsoeetassemblyfinal.ttbloeetassemblyfinalcriteria.Count > 0)
         {
            result.oeetassemblyfinalcriteria = Oeetassemblyfinalcriteria.BuildOeetassemblyfinalcriteriaFromRow(pdsoeetassemblyfinal.ttbloeetassemblyfinalcriteria[0]);
         }
                    
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
          
         return result;
          
      }

      public Oeetassemblyinfosingle OEETAssemblyInfoInit(Oeetassemblyinfocriteria oeetassemblyinfocriteria)
      {   
         var result = new Oeetassemblyinfosingle();
         
         var pdsoeetassemblyinfo = new pdsoeetassemblyinfoDataSet();
            
         DataRow ttbloeetassemblyinfocriteriaCriteria = pdsoeetassemblyinfo.ttbloeetassemblyinfocriteria.NewttbloeetassemblyinfocriteriaRow();
         Oeetassemblyinfocriteria.UpdateRowFromOeetassemblyinfocriteria(ref ttbloeetassemblyinfocriteriaCriteria, oeetassemblyinfocriteria);
         pdsoeetassemblyinfo.ttbloeetassemblyinfocriteria.AddttbloeetassemblyinfocriteriaRow((pdsoeetassemblyinfoDataSet.ttbloeetassemblyinfocriteriaRow)ttbloeetassemblyinfocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEETAssemblyInfoInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyInfoInit(ref pdsContext, ref pdsoeetassemblyinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyInfoInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblyinfo); 
    
         if (pdsoeetassemblyinfo.ttbloeetassemblyinfosingle.Count > 0) 
         { 
             result = Oeetassemblyinfosingle.BuildOeetassemblyinfosingleFromRow(pdsoeetassemblyinfo.ttbloeetassemblyinfosingle[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOEETAssemblyInfoValidateResponseAPI OEETAssemblyInfoValidate(AsoelineOEETAssemblyInfoValidateRequestAPI AsoelineOEETAssemblyInfoValidateRequestAPI)
      {   
         var result = new AsoelineOEETAssemblyInfoValidateResponseAPI();
         
         var pdsoeetassemblyinfo = new pdsoeetassemblyinfoDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloeetassemblyinfocriteriaRow = pdsoeetassemblyinfo.ttbloeetassemblyinfocriteria.NewttbloeetassemblyinfocriteriaRow();
         Oeetassemblyinfocriteria.UpdateRowFromOeetassemblyinfocriteria(ref ttbloeetassemblyinfocriteriaRow, AsoelineOEETAssemblyInfoValidateRequestAPI.oeetassemblyinfocriteria);
         pdsoeetassemblyinfo.ttbloeetassemblyinfocriteria.AddttbloeetassemblyinfocriteriaRow((pdsoeetassemblyinfoDataSet.ttbloeetassemblyinfocriteriaRow)ttbloeetassemblyinfocriteriaRow);
          
         DataRow ttbloeetassemblyinfosingleRow = pdsoeetassemblyinfo.ttbloeetassemblyinfosingle.NewttbloeetassemblyinfosingleRow();
         Oeetassemblyinfosingle.UpdateRowFromOeetassemblyinfosingle(ref ttbloeetassemblyinfosingleRow, AsoelineOEETAssemblyInfoValidateRequestAPI.oeetassemblyinfosingle);
         pdsoeetassemblyinfo.ttbloeetassemblyinfosingle.AddttbloeetassemblyinfosingleRow((pdsoeetassemblyinfoDataSet.ttbloeetassemblyinfosingleRow)ttbloeetassemblyinfosingleRow);
          
         
         NLogLoggerP.Trace("OEETAssemblyInfoValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyInfoValidate(ref pdsContext, ref pdsoeetassemblyinfo, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyInfoValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblyinfo); 
    
         if (pdsoeetassemblyinfo.ttbloeetassemblyinfosingle.Count > 0)
         {
            result.oeetassemblyinfosingle = Oeetassemblyinfosingle.BuildOeetassemblyinfosingleFromRow(pdsoeetassemblyinfo.ttbloeetassemblyinfosingle[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public IEnumerable<Oeetassemblynonstockresults> OEETAssemblyNonStock(AsoelineOEETAssemblyNonStockRequestAPI AsoelineOEETAssemblyNonStockRequestAPI)
      {   
         var results = new List<Oeetassemblynonstockresults>();
         
         var pdsoeetassemblysegmentinfo = new pdsoeetassemblysegmentinfoDataSet();
            
         var pdsoeetassemblynonstock = new pdsoeetassemblynonstockDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeetassemblynonstockcriteriaRow = pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.NewttbloeetassemblynonstockcriteriaRow();
         Oeetassemblynonstockcriteria.UpdateRowFromOeetassemblynonstockcriteria(ref ttbloeetassemblynonstockcriteriaRow, AsoelineOEETAssemblyNonStockRequestAPI.oeetassemblynonstockcriteria);
         pdsoeetassemblynonstock.ttbloeetassemblynonstockcriteria.AddttbloeetassemblynonstockcriteriaRow((pdsoeetassemblynonstockDataSet.ttbloeetassemblynonstockcriteriaRow)ttbloeetassemblynonstockcriteriaRow);
          
         foreach (var obj in AsoelineOEETAssemblyNonStockRequestAPI.oeetassemblysegmentdelim)
         {
            DataRow ttbloeetassemblysegmentdelimRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.NewttbloeetassemblysegmentdelimRow();
            Oeetassemblysegmentdelim.UpdateRowFromOeetassemblysegmentdelim(ref ttbloeetassemblysegmentdelimRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentdelim.AddttbloeetassemblysegmentdelimRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentdelimRow)ttbloeetassemblysegmentdelimRow);
         }
          
         foreach (var obj in AsoelineOEETAssemblyNonStockRequestAPI.oeetassemblysegmentinfo)
         {
            DataRow ttbloeetassemblysegmentinfoRow = pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.NewttbloeetassemblysegmentinfoRow();
            Oeetassemblysegmentinfo.UpdateRowFromOeetassemblysegmentinfo(ref ttbloeetassemblysegmentinfoRow, obj);
            pdsoeetassemblysegmentinfo.ttbloeetassemblysegmentinfo.AddttbloeetassemblysegmentinfoRow((pdsoeetassemblysegmentinfoDataSet.ttbloeetassemblysegmentinfoRow)ttbloeetassemblysegmentinfoRow);
         }
          
         
         NLogLoggerP.Trace("OEETAssemblyNonStock - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEETAssemblyNonStock(ref pdsContext,  pdsoeetassemblysegmentinfo, ref pdsoeetassemblynonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAssemblyNonStock - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetassemblysegmentinfo); 
    
            foreach (DataRow row in pdsoeetassemblynonstock.ttbloeetassemblynonstockresults)
            {
                results.Add(Oeetassemblynonstockresults.BuildOeetassemblynonstockresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oeinitcreateprodresults> OEInitCreateProdFromCat(Oeinitcreateprodcriteria oeinitcreateprodcriteria)
      {   
         var results = new List<Oeinitcreateprodresults>();
         
         var pdsoeinitcreateprodfromcat = new pdsoeinitcreateprodfromcatDataSet();
            
         DataRow ttbloeinitcreateprodcriteriaCriteria = pdsoeinitcreateprodfromcat.ttbloeinitcreateprodcriteria.NewttbloeinitcreateprodcriteriaRow();
         Oeinitcreateprodcriteria.UpdateRowFromOeinitcreateprodcriteria(ref ttbloeinitcreateprodcriteriaCriteria, oeinitcreateprodcriteria);
         pdsoeinitcreateprodfromcat.ttbloeinitcreateprodcriteria.AddttbloeinitcreateprodcriteriaRow((pdsoeinitcreateprodfromcatDataSet.ttbloeinitcreateprodcriteriaRow)ttbloeinitcreateprodcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEInitCreateProdFromCat - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEInitCreateProdFromCat(ref pdsContext, ref pdsoeinitcreateprodfromcat, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEInitCreateProdFromCat - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeinitcreateprodfromcat); 
    
            foreach (DataRow row in pdsoeinitcreateprodfromcat.ttbloeinitcreateprodresults)
            {
                results.Add(Oeinitcreateprodresults.BuildOeinitcreateprodresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oeiolinesresults> OEIOLineListFetch(Oeiolinescriteria oeiolinescriteria)
      {   
         var results = new List<Oeiolinesresults>();
         
         var pdsoeiolines = new pdsoeiolinesDataSet();
            
         DataRow ttbloeiolinescriteriaCriteria = pdsoeiolines.ttbloeiolinescriteria.NewttbloeiolinescriteriaRow();
         Oeiolinescriteria.UpdateRowFromOeiolinescriteria(ref ttbloeiolinescriteriaCriteria, oeiolinescriteria);
         pdsoeiolines.ttbloeiolinescriteria.AddttbloeiolinescriteriaRow((pdsoeiolinesDataSet.ttbloeiolinescriteriaRow)ttbloeiolinescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLineListFetch - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEIOLineListFetch(ref pdsContext, ref pdsoeiolines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLineListFetch - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiolines); 
    
            foreach (DataRow row in pdsoeiolines.ttbloeiolinesresults)
            {
                results.Add(Oeiolinesresults.BuildOeiolinesresultsFromRow(row));
            }
            return results;
        
      }

      public AsoelineKitAddGroupResponseAPI KitAddGroup(AsoelineKitAddGroupRequestAPI AsoelineKitAddGroupRequestAPI)
      {   
         var result = new AsoelineKitAddGroupResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoelineKitAddGroupRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         foreach (var obj in AsoelineKitAddGroupRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         var  cGroupNm = AsoelineKitAddGroupRequestAPI.cGroupNm;
            
         var  iAddBefore = AsoelineKitAddGroupRequestAPI.iAddBefore;
            
         var  iGrpQty = AsoelineKitAddGroupRequestAPI.iGrpQty;
            
         var  cFabWhse = AsoelineKitAddGroupRequestAPI.cFabWhse;
            
         
         NLogLoggerP.Trace("KitAddGroup - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitAddGroup(ref pdsContext,  cGroupNm,  iAddBefore,  iGrpQty,  cFabWhse,  pdskitscriteria, out pdsloadtcomps, ref pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitAddGroup - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitAddKeywordResponseAPI KitAddKeyword(AsoelineKitAddKeywordRequestAPI AsoelineKitAddKeywordRequestAPI)
      {   
         var result = new AsoelineKitAddKeywordResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdskitcreatekwdstt = new pdskitcreatekwdsttDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineKitAddKeywordRequestAPI.kitcreatekwdsttresults)
         {
            DataRow ttblkitcreatekwdsttresultsRow = pdskitcreatekwdstt.ttblkitcreatekwdsttresults.NewttblkitcreatekwdsttresultsRow();
            Kitcreatekwdsttresults.UpdateRowFromKitcreatekwdsttresults(ref ttblkitcreatekwdsttresultsRow, obj);
            pdskitcreatekwdstt.ttblkitcreatekwdsttresults.AddttblkitcreatekwdsttresultsRow((pdskitcreatekwdsttDataSet.ttblkitcreatekwdsttresultsRow)ttblkitcreatekwdsttresultsRow);
         }
          
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoelineKitAddKeywordRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         foreach (var obj in AsoelineKitAddKeywordRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         var  cKeyword = AsoelineKitAddKeywordRequestAPI.cKeyword;
            
         
         NLogLoggerP.Trace("KitAddKeyword - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitAddKeyword(ref pdsContext,  cKeyword,  pdskitscriteria,  pdskitcreatekwdstt, out pdsloadtcomps, ref pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitAddKeyword - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitCheckPartialBOResponseAPI KitCheckPartialBO(Kitcheckpartialbo kitcheckpartialbo)
      {   
         var result = new AsoelineKitCheckPartialBOResponseAPI();
         
         var pdskitcheckpartialbo = new pdskitcheckpartialboDataSet();
            
         DataRow ttblkitcheckpartialboCriteria = pdskitcheckpartialbo.ttblkitcheckpartialbo.NewttblkitcheckpartialboRow();
         Kitcheckpartialbo.UpdateRowFromKitcheckpartialbo(ref ttblkitcheckpartialboCriteria, kitcheckpartialbo);
         pdskitcheckpartialbo.ttblkitcheckpartialbo.AddttblkitcheckpartialboRow((pdskitcheckpartialboDataSet.ttblkitcheckpartialboRow)ttblkitcheckpartialboCriteria);
            
         bool lKitPtlBoFl = false;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitCheckPartialBO - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitCheckPartialBO(ref pdsContext,  pdskitcheckpartialbo, out lKitPtlBoFl, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("KitCheckPartialBO - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcheckpartialbo); 
    
         result.lKitPtlBoFl = lKitPtlBoFl;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoelineKitCrossReferenceResponseAPI KitCrossReference(AsoelineKitCrossReferenceRequestAPI AsoelineKitCrossReferenceRequestAPI)
      {   
         var result = new AsoelineKitCrossReferenceResponseAPI();
         
         var pdskitcrossrefcriteria = new pdskitcrossrefcriteriaDataSet();
            
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcrossrefcriteriaRow = pdskitcrossrefcriteria.ttblkitcrossrefcriteria.NewttblkitcrossrefcriteriaRow();
         Kitcrossrefcriteria.UpdateRowFromKitcrossrefcriteria(ref ttblkitcrossrefcriteriaRow, AsoelineKitCrossReferenceRequestAPI.kitcrossrefcriteria);
         pdskitcrossrefcriteria.ttblkitcrossrefcriteria.AddttblkitcrossrefcriteriaRow((pdskitcrossrefcriteriaDataSet.ttblkitcrossrefcriteriaRow)ttblkitcrossrefcriteriaRow);
          
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoelineKitCrossReferenceRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         foreach (var obj in AsoelineKitCrossReferenceRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         foreach (var obj in AsoelineKitCrossReferenceRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         foreach (var obj in AsoelineKitCrossReferenceRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         
         NLogLoggerP.Trace("KitCrossReference - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitCrossReference(ref pdsContext,  pdskitcrossrefcriteria,  pdskitscriteria, ref pdsloadtcomps, ref pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitCrossReference - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcrossrefcriteria); 
    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitDeleteResponseAPI KitDelete(AsoelineKitDeleteRequestAPI AsoelineKitDeleteRequestAPI)
      {   
         var result = new AsoelineKitDeleteResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoelineKitDeleteRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         foreach (var obj in AsoelineKitDeleteRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         foreach (var obj in AsoelineKitDeleteRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         
         NLogLoggerP.Trace("KitDelete - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitDelete(ref pdsContext,  pdskitscriteria, ref pdsloadtcomps, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitDelete - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitDetailFieldLeaveResponseAPI KitDetailFieldLeave(AsoelineKitDetailFieldLeaveRequestAPI AsoelineKitDetailFieldLeaveRequestAPI)
      {   
         var result = new AsoelineKitDetailFieldLeaveResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineKitDetailFieldLeaveRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineKitDetailFieldLeaveRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         var  cField = AsoelineKitDetailFieldLeaveRequestAPI.cField;
            
         var  cOrderType = AsoelineKitDetailFieldLeaveRequestAPI.cOrderType;
            
         
         NLogLoggerP.Trace("KitDetailFieldLeave - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitDetailFieldLeave(ref pdsContext,  cField,  cOrderType, ref pdskitcreatedetailstt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitDetailFieldLeave - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         if (pdskitcreatedetailstt.ttblkitcreatedetailsttresults.Count > 0)
         {
            result.kitcreatedetailsttresults = Kitcreatedetailsttresults.BuildKitcreatedetailsttresultsFromRow(pdskitcreatedetailstt.ttblkitcreatedetailsttresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitDetailUpdateResponseAPI KitDetailUpdate(AsoelineKitDetailUpdateRequestAPI AsoelineKitDetailUpdateRequestAPI)
      {   
         var result = new AsoelineKitDetailUpdateResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineKitDetailUpdateRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineKitDetailUpdateRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         
         NLogLoggerP.Trace("KitDetailUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitDetailUpdate(ref pdsContext, ref pdskitcreatedetailstt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitDetailUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         if (pdskitcreatedetailstt.ttblkitcreatedetailsttresults.Count > 0)
         {
            result.kitcreatedetailsttresults = Kitcreatedetailsttresults.BuildKitcreatedetailsttresultsFromRow(pdskitcreatedetailstt.ttblkitcreatedetailsttresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitLoadNonstockResponseAPI KitLoadNonstock(AsoelineKitLoadNonstockRequestAPI AsoelineKitLoadNonstockRequestAPI)
      {   
         var result = new AsoelineKitLoadNonstockResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdskitnonstock = new pdskitnonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineKitLoadNonstockRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineKitLoadNonstockRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         
         NLogLoggerP.Trace("KitLoadNonstock - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitLoadNonstock(ref pdsContext,  pdskitcreatedetailstt, out pdskitnonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitLoadNonstock - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         if (pdskitnonstock.ttblkitnonstocksingle.Count > 0)
         {
            result.kitnonstocksingle = Kitnonstocksingle.BuildKitnonstocksingleFromRow(pdskitnonstock.ttblkitnonstocksingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitOptionCreateResponseAPI KitOptionCreate(AsoelineKitOptionCreateRequestAPI AsoelineKitOptionCreateRequestAPI)
      {   
         var result = new AsoelineKitOptionCreateResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoelineKitOptionCreateRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         foreach (var obj in AsoelineKitOptionCreateRequestAPI.loadtcompsresults)
         {
            DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
            Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, obj);
            pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
         }
          
         DataRow ttblloadtcompssingleRow = pdsloadtcomps.ttblloadtcompssingle.NewttblloadtcompssingleRow();
         Loadtcompssingle.UpdateRowFromLoadtcompssingle(ref ttblloadtcompssingleRow, AsoelineKitOptionCreateRequestAPI.loadtcompssingle);
         pdsloadtcomps.ttblloadtcompssingle.AddttblloadtcompssingleRow((pdsloadtcompsDataSet.ttblloadtcompssingleRow)ttblloadtcompssingleRow);
          
         foreach (var obj in AsoelineKitOptionCreateRequestAPI.loadtcompssubresults)
         {
            DataRow ttblloadtcompssubresultsRow = pdsloadtcomps.ttblloadtcompssubresults.NewttblloadtcompssubresultsRow();
            Loadtcompssubresults.UpdateRowFromLoadtcompssubresults(ref ttblloadtcompssubresultsRow, obj);
            pdsloadtcomps.ttblloadtcompssubresults.AddttblloadtcompssubresultsRow((pdsloadtcompsDataSet.ttblloadtcompssubresultsRow)ttblloadtcompssubresultsRow);
         }
          
         foreach (var obj in AsoelineKitOptionCreateRequestAPI.oelinelinetie)
         {
            DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
            Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, obj);
            pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
         }
          
         
         NLogLoggerP.Trace("KitOptionCreate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitOptionCreate(ref pdsContext,  pdskitscriteria, ref pdsloadtcomps, ref pdsoelinelinetie, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitOptionCreate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
         foreach (DataRow row in pdsoelinelinetie.ttbloelinelinetie)
         {
            result.oelinelinetie.Add(Oelinelinetie.BuildOelinelinetieFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineKitRefreshNonstockResponseAPI KitRefreshNonstock(Kitnonstocksingle kitnonstocksingle)
      {   
         var result = new AsoelineKitRefreshNonstockResponseAPI();
         
         var pdskitnonstock = new pdskitnonstockDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblkitnonstocksingleCriteria = pdskitnonstock.ttblkitnonstocksingle.NewttblkitnonstocksingleRow();
         Kitnonstocksingle.UpdateRowFromKitnonstocksingle(ref ttblkitnonstocksingleCriteria, kitnonstocksingle);
         pdskitnonstock.ttblkitnonstocksingle.AddttblkitnonstocksingleRow((pdskitnonstockDataSet.ttblkitnonstocksingleRow)ttblkitnonstocksingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitRefreshNonstock - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitRefreshNonstock(ref pdsContext, ref pdskitnonstock, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitRefreshNonstock - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitnonstock); 
    
         if (pdskitnonstock.ttblkitnonstocksingle.Count > 0)
         {
            result.kitnonstocksingle = Kitnonstocksingle.BuildKitnonstocksingleFromRow(pdskitnonstock.ttblkitnonstocksingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Kitsplit KitSplitClear(Kitsplit kitsplit)
      {   
         var result = new Kitsplit();
         
         var pdskitsplit = new pdskitsplitDataSet();
            
         DataRow ttblkitsplitCriteria = pdskitsplit.ttblkitsplit.NewttblkitsplitRow();
         Kitsplit.UpdateRowFromKitsplit(ref ttblkitsplitCriteria, kitsplit);
         pdskitsplit.ttblkitsplit.AddttblkitsplitRow((pdskitsplitDataSet.ttblkitsplitRow)ttblkitsplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitSplitClear - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitSplitClear(ref pdsContext, ref pdskitsplit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitSplitClear - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitsplit); 
    
         if (pdskitsplit.ttblkitsplit.Count > 0) 
         { 
             result = Kitsplit.BuildKitsplitFromRow(pdskitsplit.ttblkitsplit[0]);
         } 
              
          
         return result;
          
      }

      public Kitsplit KitSplitInitialize(Kitsplitinitialize kitsplitinitialize)
      {   
         var result = new Kitsplit();
         
         var pdskitsplitinitialize = new pdskitsplitinitializeDataSet();
            
         var pdskitsplit = new pdskitsplitDataSet();
            
         DataRow ttblkitsplitinitializeCriteria = pdskitsplitinitialize.ttblkitsplitinitialize.NewttblkitsplitinitializeRow();
         Kitsplitinitialize.UpdateRowFromKitsplitinitialize(ref ttblkitsplitinitializeCriteria, kitsplitinitialize);
         pdskitsplitinitialize.ttblkitsplitinitialize.AddttblkitsplitinitializeRow((pdskitsplitinitializeDataSet.ttblkitsplitinitializeRow)ttblkitsplitinitializeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitSplitInitialize - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitSplitInitialize(ref pdsContext,  pdskitsplitinitialize, out pdskitsplit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitSplitInitialize - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitsplitinitialize); 
    
         if (pdskitsplit.ttblkitsplit.Count > 0) 
         { 
             result = Kitsplit.BuildKitsplitFromRow(pdskitsplit.ttblkitsplit[0]);
         } 
              
          
         return result;
          
      }

      public Kitsplit KitSplitLeavePercent(Kitsplit kitsplit)
      {   
         var result = new Kitsplit();
         
         var pdskitsplit = new pdskitsplitDataSet();
            
         DataRow ttblkitsplitCriteria = pdskitsplit.ttblkitsplit.NewttblkitsplitRow();
         Kitsplit.UpdateRowFromKitsplit(ref ttblkitsplitCriteria, kitsplit);
         pdskitsplit.ttblkitsplit.AddttblkitsplitRow((pdskitsplitDataSet.ttblkitsplitRow)ttblkitsplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitSplitLeavePercent - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitSplitLeavePercent(ref pdsContext, ref pdskitsplit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitSplitLeavePercent - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitsplit); 
    
         if (pdskitsplit.ttblkitsplit.Count > 0) 
         { 
             result = Kitsplit.BuildKitsplitFromRow(pdskitsplit.ttblkitsplit[0]);
         } 
              
          
         return result;
          
      }

      public Kitsplit KitSplitLeavePrice(Kitsplit kitsplit)
      {   
         var result = new Kitsplit();
         
         var pdskitsplit = new pdskitsplitDataSet();
            
         DataRow ttblkitsplitCriteria = pdskitsplit.ttblkitsplit.NewttblkitsplitRow();
         Kitsplit.UpdateRowFromKitsplit(ref ttblkitsplitCriteria, kitsplit);
         pdskitsplit.ttblkitsplit.AddttblkitsplitRow((pdskitsplitDataSet.ttblkitsplitRow)ttblkitsplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitSplitLeavePrice - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitSplitLeavePrice(ref pdsContext, ref pdskitsplit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitSplitLeavePrice - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitsplit); 
    
         if (pdskitsplit.ttblkitsplit.Count > 0) 
         { 
             result = Kitsplit.BuildKitsplitFromRow(pdskitsplit.ttblkitsplit[0]);
         } 
              
          
         return result;
          
      }

      public Kitsplitupdate KitSplitUpdate(Kitsplit kitsplit)
      {   
         var result = new Kitsplitupdate();
         
         var pdskitsplit = new pdskitsplitDataSet();
            
         var pdskitsplitupdate = new pdskitsplitupdateDataSet();
            
         DataRow ttblkitsplitCriteria = pdskitsplit.ttblkitsplit.NewttblkitsplitRow();
         Kitsplit.UpdateRowFromKitsplit(ref ttblkitsplitCriteria, kitsplit);
         pdskitsplit.ttblkitsplit.AddttblkitsplitRow((pdskitsplitDataSet.ttblkitsplitRow)ttblkitsplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitSplitUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitSplitUpdate(ref pdsContext,  pdskitsplit, out pdskitsplitupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitSplitUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitsplit); 
    
         if (pdskitsplitupdate.ttblkitsplitupdate.Count > 0) 
         { 
             result = Kitsplitupdate.BuildKitsplitupdateFromRow(pdskitsplitupdate.ttblkitsplitupdate[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineKitUpdateNonstockResponseAPI KitUpdateNonstock(AsoelineKitUpdateNonstockRequestAPI AsoelineKitUpdateNonstockRequestAPI)
      {   
         var result = new AsoelineKitUpdateNonstockResponseAPI();
         
         var pdskitnonstock = new pdskitnonstockDataSet();
            
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitcreatedetailsttcriteriaRow = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaRow, AsoelineKitUpdateNonstockRequestAPI.kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaRow);
          
         DataRow ttblkitcreatedetailsttresultsRow = pdskitcreatedetailstt.ttblkitcreatedetailsttresults.NewttblkitcreatedetailsttresultsRow();
         Kitcreatedetailsttresults.UpdateRowFromKitcreatedetailsttresults(ref ttblkitcreatedetailsttresultsRow, AsoelineKitUpdateNonstockRequestAPI.kitcreatedetailsttresults);
         pdskitcreatedetailstt.ttblkitcreatedetailsttresults.AddttblkitcreatedetailsttresultsRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttresultsRow)ttblkitcreatedetailsttresultsRow);
          
         DataRow ttblkitnonstocksingleRow = pdskitnonstock.ttblkitnonstocksingle.NewttblkitnonstocksingleRow();
         Kitnonstocksingle.UpdateRowFromKitnonstocksingle(ref ttblkitnonstocksingleRow, AsoelineKitUpdateNonstockRequestAPI.kitnonstocksingle);
         pdskitnonstock.ttblkitnonstocksingle.AddttblkitnonstocksingleRow((pdskitnonstockDataSet.ttblkitnonstocksingleRow)ttblkitnonstocksingleRow);
          
         
         NLogLoggerP.Trace("KitUpdateNonstock - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.KitUpdateNonstock(ref pdsContext,  pdskitnonstock, ref pdskitcreatedetailstt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitUpdateNonstock - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitnonstock); 
    
         if (pdskitcreatedetailstt.ttblkitcreatedetailsttresults.Count > 0)
         {
            result.kitcreatedetailsttresults = Kitcreatedetailsttresults.BuildKitcreatedetailsttresultsFromRow(pdskitcreatedetailstt.ttblkitcreatedetailsttresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public void OELineCancelChange(Oelinecancelchangecriteria oelinecancelchangecriteria)
      {   
         
         var pdsoelinecancelchange = new pdsoelinecancelchangeDataSet();
            
         DataRow ttbloelinecancelchangecriteriaCriteria = pdsoelinecancelchange.ttbloelinecancelchangecriteria.NewttbloelinecancelchangecriteriaRow();
         Oelinecancelchangecriteria.UpdateRowFromOelinecancelchangecriteria(ref ttbloelinecancelchangecriteriaCriteria, oelinecancelchangecriteria);
         pdsoelinecancelchange.ttbloelinecancelchangecriteria.AddttbloelinecancelchangecriteriaRow((pdsoelinecancelchangeDataSet.ttbloelinecancelchangecriteriaRow)ttbloelinecancelchangecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCancelChange - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCancelChange(ref pdsContext,  pdsoelinecancelchange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCancelChange - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecancelchange);
      }

      public AsoelineOELineCfgExecFuncResponseAPI OELineCfgExecFunc(AsoelineOELineCfgExecFuncRequestAPI AsoelineOELineCfgExecFuncRequestAPI)
      {   
         var result = new AsoelineOELineCfgExecFuncResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         bool lCfgSuccessFl = false;
         string cWarnMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineCfgExecFuncRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         var  lGetComponentsFl = AsoelineOELineCfgExecFuncRequestAPI.lGetComponentsFl;
            
         
         NLogLoggerP.Trace("OELineCfgExecFunc - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCfgExecFunc(ref pdsContext,  pdsoeline,  lGetComponentsFl, out lCfgSuccessFl, out cWarnMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCfgExecFunc - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         result.lCfgSuccessFl = lCfgSuccessFl;
         result.cWarnMessage = cWarnMessage;
          
         return result;
          
      }

      public bool OELineCfgFinish(Oeline oeline)
      {   
          
         var pdsoeline = new pdsoelineDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         bool lCfgSuccessFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCfgFinish - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCfgFinish(ref pdsContext,  pdsoeline, out lCfgSuccessFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCfgFinish - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         return lCfgSuccessFl;
      
      }

      public string OELineCfgLaunch(Oelinecfglaunch oelinecfglaunch)
      {   
          
         var pdsoelinecfglaunch = new pdsoelinecfglaunchDataSet();
            
         DataRow ttbloelinecfglaunchCriteria = pdsoelinecfglaunch.ttbloelinecfglaunch.NewttbloelinecfglaunchRow();
         Oelinecfglaunch.UpdateRowFromOelinecfglaunch(ref ttbloelinecfglaunchCriteria, oelinecfglaunch);
         pdsoelinecfglaunch.ttbloelinecfglaunch.AddttbloelinecfglaunchRow((pdsoelinecfglaunchDataSet.ttbloelinecfglaunchRow)ttbloelinecfglaunchCriteria);
            
         string cCfgURL = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCfgLaunch - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCfgLaunch(ref pdsContext,  pdsoelinecfglaunch, out cCfgURL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCfgLaunch - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecfglaunch); 
    
         return cCfgURL;
      
      }

      public bool OELineCfgLoad(Oeline oeline)
      {   
          
         var pdsoeline = new pdsoelineDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         bool lCfgSuccessFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCfgLoad - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCfgLoad(ref pdsContext,  pdsoeline, out lCfgSuccessFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCfgLoad - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         return lCfgSuccessFl;
      
      }

      public AsoelineOELineCommSubTotLoadResponseAPI OELineCommSubTotLoad(Oelinecommsubtotloadcriteria oelinecommsubtotloadcriteria)
      {   
         var result = new AsoelineOELineCommSubTotLoadResponseAPI();
         
         var pdsoelinecommsubtotloadcriteria = new pdsoelinecommsubtotloadcriteriaDataSet();
            
         var pdsoelinecommsubtot = new pdsoelinecommsubtotDataSet();
            
         DataRow ttbloelinecommsubtotloadcriteriaCriteria = pdsoelinecommsubtotloadcriteria.ttbloelinecommsubtotloadcriteria.NewttbloelinecommsubtotloadcriteriaRow();
         Oelinecommsubtotloadcriteria.UpdateRowFromOelinecommsubtotloadcriteria(ref ttbloelinecommsubtotloadcriteriaCriteria, oelinecommsubtotloadcriteria);
         pdsoelinecommsubtotloadcriteria.ttbloelinecommsubtotloadcriteria.AddttbloelinecommsubtotloadcriteriaRow((pdsoelinecommsubtotloadcriteriaDataSet.ttbloelinecommsubtotloadcriteriaRow)ttbloelinecommsubtotloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineCommSubTotLoad - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCommSubTotLoad(ref pdsContext,  pdsoelinecommsubtotloadcriteria, out pdsoelinecommsubtot, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCommSubTotLoad - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecommsubtotloadcriteria); 
    
         foreach (DataRow row in pdsoelinecommsubtot.ttbloelinecommsubtotresults)
         {
            result.oelinecommsubtotresults.Add(Oelinecommsubtotresults.BuildOelinecommsubtotresultsFromRow(row));
         }     
         if (pdsoelinecommsubtot.ttbloelinecommsubtotsingle.Count > 0)
         {
            result.oelinecommsubtotsingle = Oelinecommsubtotsingle.BuildOelinecommsubtotsingleFromRow(pdsoelinecommsubtot.ttbloelinecommsubtotsingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOELineCommSubTotMaintResponseAPI OELineCommSubTotMaint(AsoelineOELineCommSubTotMaintRequestAPI AsoelineOELineCommSubTotMaintRequestAPI)
      {   
         var result = new AsoelineOELineCommSubTotMaintResponseAPI();
         
         var pdsoelinecommsubtotmaintlist = new pdsoelinecommsubtotmaintlistDataSet();
            
         var pdsoelinecommsubtot = new pdsoelinecommsubtotDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELineCommSubTotMaintRequestAPI.oelinecommsubtotresults)
         {
            DataRow ttbloelinecommsubtotresultsRow = pdsoelinecommsubtot.ttbloelinecommsubtotresults.NewttbloelinecommsubtotresultsRow();
            Oelinecommsubtotresults.UpdateRowFromOelinecommsubtotresults(ref ttbloelinecommsubtotresultsRow, obj);
            pdsoelinecommsubtot.ttbloelinecommsubtotresults.AddttbloelinecommsubtotresultsRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotresultsRow)ttbloelinecommsubtotresultsRow);
         }
          
         DataRow ttbloelinecommsubtotsingleRow = pdsoelinecommsubtot.ttbloelinecommsubtotsingle.NewttbloelinecommsubtotsingleRow();
         Oelinecommsubtotsingle.UpdateRowFromOelinecommsubtotsingle(ref ttbloelinecommsubtotsingleRow, AsoelineOELineCommSubTotMaintRequestAPI.oelinecommsubtotsingle);
         pdsoelinecommsubtot.ttbloelinecommsubtotsingle.AddttbloelinecommsubtotsingleRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotsingleRow)ttbloelinecommsubtotsingleRow);
          
         foreach (var obj in AsoelineOELineCommSubTotMaintRequestAPI.oelinecommsubtotmaintlist)
         {
            DataRow ttbloelinecommsubtotmaintlistRow = pdsoelinecommsubtotmaintlist.ttbloelinecommsubtotmaintlist.NewttbloelinecommsubtotmaintlistRow();
            Oelinecommsubtotmaintlist.UpdateRowFromOelinecommsubtotmaintlist(ref ttbloelinecommsubtotmaintlistRow, obj);
            pdsoelinecommsubtotmaintlist.ttbloelinecommsubtotmaintlist.AddttbloelinecommsubtotmaintlistRow((pdsoelinecommsubtotmaintlistDataSet.ttbloelinecommsubtotmaintlistRow)ttbloelinecommsubtotmaintlistRow);
         }
          
         var  iSecurity = AsoelineOELineCommSubTotMaintRequestAPI.iSecurity;
            
         
         NLogLoggerP.Trace("OELineCommSubTotMaint - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCommSubTotMaint(ref pdsContext,  iSecurity,  pdsoelinecommsubtotmaintlist, ref pdsoelinecommsubtot, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCommSubTotMaint - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecommsubtotmaintlist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinecommsubtot.ttbloelinecommsubtotresults)
         {
            result.oelinecommsubtotresults.Add(Oelinecommsubtotresults.BuildOelinecommsubtotresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Oelinecommsubtotresults> OELineCommSubTotMove(AsoelineOELineCommSubTotMoveRequestAPI AsoelineOELineCommSubTotMoveRequestAPI)
      {   
         var results = new List<Oelinecommsubtotresults>();
         
         var pdsoelinecommsubtotmovecriteria = new pdsoelinecommsubtotmovecriteriaDataSet();
            
         var pdsoelinecommsubtot = new pdsoelinecommsubtotDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELineCommSubTotMoveRequestAPI.oelinecommsubtotresults)
         {
            DataRow ttbloelinecommsubtotresultsRow = pdsoelinecommsubtot.ttbloelinecommsubtotresults.NewttbloelinecommsubtotresultsRow();
            Oelinecommsubtotresults.UpdateRowFromOelinecommsubtotresults(ref ttbloelinecommsubtotresultsRow, obj);
            pdsoelinecommsubtot.ttbloelinecommsubtotresults.AddttbloelinecommsubtotresultsRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotresultsRow)ttbloelinecommsubtotresultsRow);
         }
          
         DataRow ttbloelinecommsubtotsingleRow = pdsoelinecommsubtot.ttbloelinecommsubtotsingle.NewttbloelinecommsubtotsingleRow();
         Oelinecommsubtotsingle.UpdateRowFromOelinecommsubtotsingle(ref ttbloelinecommsubtotsingleRow, AsoelineOELineCommSubTotMoveRequestAPI.oelinecommsubtotsingle);
         pdsoelinecommsubtot.ttbloelinecommsubtotsingle.AddttbloelinecommsubtotsingleRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotsingleRow)ttbloelinecommsubtotsingleRow);
          
         DataRow ttbloelinecommsubtotmovecriteriaRow = pdsoelinecommsubtotmovecriteria.ttbloelinecommsubtotmovecriteria.NewttbloelinecommsubtotmovecriteriaRow();
         Oelinecommsubtotmovecriteria.UpdateRowFromOelinecommsubtotmovecriteria(ref ttbloelinecommsubtotmovecriteriaRow, AsoelineOELineCommSubTotMoveRequestAPI.oelinecommsubtotmovecriteria);
         pdsoelinecommsubtotmovecriteria.ttbloelinecommsubtotmovecriteria.AddttbloelinecommsubtotmovecriteriaRow((pdsoelinecommsubtotmovecriteriaDataSet.ttbloelinecommsubtotmovecriteriaRow)ttbloelinecommsubtotmovecriteriaRow);
          
         
         NLogLoggerP.Trace("OELineCommSubTotMove - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCommSubTotMove(ref pdsContext,  pdsoelinecommsubtotmovecriteria, ref pdsoelinecommsubtot, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCommSubTotMove - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecommsubtotmovecriteria); 
    
            foreach (DataRow row in pdsoelinecommsubtot.ttbloelinecommsubtotresults)
            {
                results.Add(Oelinecommsubtotresults.BuildOelinecommsubtotresultsFromRow(row));
            }
            return results;
        
      }

      public void OELineCommSubTotUpdate(AsoelineOELineCommSubTotUpdateRequestAPI AsoelineOELineCommSubTotUpdateRequestAPI)
      {   
         
         var pdsoelinecommsubtot = new pdsoelinecommsubtotDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOELineCommSubTotUpdateRequestAPI.oelinecommsubtotresults)
         {
            DataRow ttbloelinecommsubtotresultsRow = pdsoelinecommsubtot.ttbloelinecommsubtotresults.NewttbloelinecommsubtotresultsRow();
            Oelinecommsubtotresults.UpdateRowFromOelinecommsubtotresults(ref ttbloelinecommsubtotresultsRow, obj);
            pdsoelinecommsubtot.ttbloelinecommsubtotresults.AddttbloelinecommsubtotresultsRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotresultsRow)ttbloelinecommsubtotresultsRow);
         }
          
         DataRow ttbloelinecommsubtotsingleRow = pdsoelinecommsubtot.ttbloelinecommsubtotsingle.NewttbloelinecommsubtotsingleRow();
         Oelinecommsubtotsingle.UpdateRowFromOelinecommsubtotsingle(ref ttbloelinecommsubtotsingleRow, AsoelineOELineCommSubTotUpdateRequestAPI.oelinecommsubtotsingle);
         pdsoelinecommsubtot.ttbloelinecommsubtotsingle.AddttbloelinecommsubtotsingleRow((pdsoelinecommsubtotDataSet.ttbloelinecommsubtotsingleRow)ttbloelinecommsubtotsingleRow);
          
         
         NLogLoggerP.Trace("OELineCommSubTotUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCommSubTotUpdate(ref pdsContext,  pdsoelinecommsubtot, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineCommSubTotUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinecommsubtot);
      }

      public AsoelineOELineCreateResponseAPI OELineCreate(AsoelineOELineCreateRequestAPI AsoelineOELineCreateRequestAPI)
      {   
         var result = new AsoelineOELineCreateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelineassembly = new pdsoelineassemblyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         foreach (var obj in AsoelineOELineCreateRequestAPI.oelineassembly)
         {
            DataRow ttbloelineassemblyRow = pdsoelineassembly.ttbloelineassembly.NewttbloelineassemblyRow();
            Oelineassembly.UpdateRowFromOelineassembly(ref ttbloelineassemblyRow, obj);
            pdsoelineassembly.ttbloelineassembly.AddttbloelineassemblyRow((pdsoelineassemblyDataSet.ttbloelineassemblyRow)ttbloelineassemblyRow);
         }
          
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineCreateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         var  lMaintMode = AsoelineOELineCreateRequestAPI.lMaintMode;
            
         var  cChangeList = AsoelineOELineCreateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("OELineCreate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineCreate(ref pdsContext,  lMaintMode,  cChangeList, ref pdsoeline,  pdsoelineassembly, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("OELineCreate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public string OELineDelete(Oelinedeletecriteria oelinedeletecriteria)
      {   
          
         var pdsoelinedelete = new pdsoelinedeleteDataSet();
            
         DataRow ttbloelinedeletecriteriaCriteria = pdsoelinedelete.ttbloelinedeletecriteria.NewttbloelinedeletecriteriaRow();
         Oelinedeletecriteria.UpdateRowFromOelinedeletecriteria(ref ttbloelinedeletecriteriaCriteria, oelinedeletecriteria);
         pdsoelinedelete.ttbloelinedeletecriteria.AddttbloelinedeletecriteriaRow((pdsoelinedeleteDataSet.ttbloelinedeletecriteriaRow)ttbloelinedeletecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineDelete - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineDelete(ref pdsContext,  pdsoelinedelete, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OELineDelete - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinedelete); 
    
         return cWarningMessage;
      
      }

      public Oeordercopyfabwhse OELineFabWhseInit(Oeordercopyfabwhse oeordercopyfabwhse)
      {   
         var result = new Oeordercopyfabwhse();
         
         var pdsoeordercopyfabwhse = new pdsoeordercopyfabwhseDataSet();
            
         DataRow ttbloeordercopyfabwhseCriteria = pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.NewttbloeordercopyfabwhseRow();
         Oeordercopyfabwhse.UpdateRowFromOeordercopyfabwhse(ref ttbloeordercopyfabwhseCriteria, oeordercopyfabwhse);
         pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.AddttbloeordercopyfabwhseRow((pdsoeordercopyfabwhseDataSet.ttbloeordercopyfabwhseRow)ttbloeordercopyfabwhseCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineFabWhseInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineFabWhseInit(ref pdsContext, ref pdsoeordercopyfabwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineFabWhseInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopyfabwhse); 
    
         if (pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.Count > 0) 
         { 
             result = Oeordercopyfabwhse.BuildOeordercopyfabwhseFromRow(pdsoeordercopyfabwhse.ttbloeordercopyfabwhse[0]);
         } 
              
          
         return result;
          
      }

      public Oeordercopyfabwhse OELineFabWhseValidate(AsoelineOELineFabWhseValidateRequestAPI AsoelineOELineFabWhseValidateRequestAPI)
      {   
         var result = new Oeordercopyfabwhse();
         
         var pdsoeordercopyfabwhse = new pdsoeordercopyfabwhseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordercopyfabwhseRow = pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.NewttbloeordercopyfabwhseRow();
         Oeordercopyfabwhse.UpdateRowFromOeordercopyfabwhse(ref ttbloeordercopyfabwhseRow, AsoelineOELineFabWhseValidateRequestAPI.oeordercopyfabwhse);
         pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.AddttbloeordercopyfabwhseRow((pdsoeordercopyfabwhseDataSet.ttbloeordercopyfabwhseRow)ttbloeordercopyfabwhseRow);
          
         var  lCopyConfig = AsoelineOELineFabWhseValidateRequestAPI.lCopyConfig;
            
         
         NLogLoggerP.Trace("OELineFabWhseValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineFabWhseValidate(ref pdsContext,  lCopyConfig, ref pdsoeordercopyfabwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineFabWhseValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopyfabwhse); 
    
         if (pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.Count > 0) 
         { 
             result = Oeordercopyfabwhse.BuildOeordercopyfabwhseFromRow(pdsoeordercopyfabwhse.ttbloeordercopyfabwhse[0]);
         } 
              
          
         return result;
          
      }

      public Oeline OELineInitialize(Oelineinitializecriteria oelineinitializecriteria)
      {   
         var result = new Oeline();
         
         var pdsoelineinitialize = new pdsoelineinitializeDataSet();
            
         var pdsoeline = new pdsoelineDataSet();
            
         DataRow ttbloelineinitializecriteriaCriteria = pdsoelineinitialize.ttbloelineinitializecriteria.NewttbloelineinitializecriteriaRow();
         Oelineinitializecriteria.UpdateRowFromOelineinitializecriteria(ref ttbloelineinitializecriteriaCriteria, oelineinitializecriteria);
         pdsoelineinitialize.ttbloelineinitializecriteria.AddttbloelineinitializecriteriaRow((pdsoelineinitializeDataSet.ttbloelineinitializecriteriaRow)ttbloelineinitializecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineInitialize - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineInitialize(ref pdsContext,  pdsoelineinitialize, out pdsoeline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineInitialize - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineinitialize); 
    
         if (pdsoeline.ttbloeline.Count > 0) 
         { 
             result = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOELinePricingResponseAPI OELinePricing(IEnumerable<Oelinepricingcriteria> oelinepricingcriteria)
      {   
         var result = new AsoelineOELinePricingResponseAPI();
         
         var pdsoelinepricing = new pdsoelinepricingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oelinepricingcriteria)
         {
             DataRow row = pdsoelinepricing.ttbloelinepricingcriteria.NewttbloelinepricingcriteriaRow();
             Oelinepricingcriteria.UpdateRowFromOelinepricingcriteria(ref row, obj);
             pdsoelinepricing.ttbloelinepricingcriteria.AddttbloelinepricingcriteriaRow((pdsoelinepricingDataSet.ttbloelinepricingcriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELinePricing - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELinePricing(ref pdsContext, ref pdsoelinepricing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELinePricing - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinepricing); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoelinepricing.ttbloelinepricingresults)
         {
            result.oelinepricingresults.Add(Oelinepricingresults.BuildOelinepricingresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineOELineRetrieveResponseAPI OELineRetrieve(Oelineretrievecriteria oelineretrievecriteria)
      {   
         var result = new AsoelineOELineRetrieveResponseAPI();
         
         var pdsoelineretrieve = new pdsoelineretrieveDataSet();
            
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloelineretrievecriteriaCriteria = pdsoelineretrieve.ttbloelineretrievecriteria.NewttbloelineretrievecriteriaRow();
         Oelineretrievecriteria.UpdateRowFromOelineretrievecriteria(ref ttbloelineretrievecriteriaCriteria, oelineretrievecriteria);
         pdsoelineretrieve.ttbloelineretrievecriteria.AddttbloelineretrievecriteriaRow((pdsoelineretrieveDataSet.ttbloelineretrievecriteriaRow)ttbloelineretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineRetrieve(ref pdsContext,  pdsoelineretrieve, out pdsoeline, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("OELineRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelineretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public IEnumerable<Oelinesuperavailresults> OELineSupersedeAvailability(Oelinesuperavailcriteria oelinesuperavailcriteria)
      {   
         var results = new List<Oelinesuperavailresults>();
         
         var pdsoelinesuperavail = new pdsoelinesuperavailDataSet();
            
         DataRow ttbloelinesuperavailcriteriaCriteria = pdsoelinesuperavail.ttbloelinesuperavailcriteria.NewttbloelinesuperavailcriteriaRow();
         Oelinesuperavailcriteria.UpdateRowFromOelinesuperavailcriteria(ref ttbloelinesuperavailcriteriaCriteria, oelinesuperavailcriteria);
         pdsoelinesuperavail.ttbloelinesuperavailcriteria.AddttbloelinesuperavailcriteriaRow((pdsoelinesuperavailDataSet.ttbloelinesuperavailcriteriaRow)ttbloelinesuperavailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineSupersedeAvailability - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineSupersedeAvailability(ref pdsContext, ref pdsoelinesuperavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineSupersedeAvailability - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinesuperavail); 
    
            foreach (DataRow row in pdsoelinesuperavail.ttbloelinesuperavailresults)
            {
                results.Add(Oelinesuperavailresults.BuildOelinesuperavailresultsFromRow(row));
            }
            return results;
        
      }

      public AsoelineOELineUpdateResponseAPI OELineUpdate(AsoelineOELineUpdateRequestAPI AsoelineOELineUpdateRequestAPI)
      {   
         var result = new AsoelineOELineUpdateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineUpdateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         var  lMaintMode = AsoelineOELineUpdateRequestAPI.lMaintMode;
            
         var  cChangeList = AsoelineOELineUpdateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("OELineUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineUpdate(ref pdsContext,  lMaintMode,  cChangeList, ref pdsoeline, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("OELineUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AsoelineOELineValidateResponseAPI OELineValidate(AsoelineOELineValidateRequestAPI AsoelineOELineValidateRequestAPI)
      {   
         var result = new AsoelineOELineValidateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoelinexrefprod = new pdsoelinexrefprodDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
         string cUpdateMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOELineValidateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         var  lMaintMode = AsoelineOELineValidateRequestAPI.lMaintMode;
            
         var  cChangeList = AsoelineOELineValidateRequestAPI.cChangeList;
            
         
         NLogLoggerP.Trace("OELineValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OELineValidate(ref pdsContext,  lMaintMode,  cChangeList, ref pdsoeline, out pdsoelinexrefprod, out pdsmessaging, out cErrorMessage, out cUpdateMessage);
               }
            });
         NLogLoggerP.Info("OELineValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
         foreach (DataRow row in pdsoelinexrefprod.ttbloelinexrefprodlist)
         {
            result.oelinexrefprodlist.Add(Oelinexrefprodlist.BuildOelinexrefprodlistFromRow(row));
         }     
         result.cUpdateMessage = cUpdateMessage;
          
         return result;
          
      }

      public AsoelineOEMultiLineCreateResponseAPI OEMultiLineCreate(AsoelineOEMultiLineCreateRequestAPI AsoelineOEMultiLineCreateRequestAPI)
      {   
         var result = new AsoelineOEMultiLineCreateResponseAPI();
         
         var pdsoemultilinecreate = new pdsoemultilinecreateDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloemultilinecreatecriteriaRow = pdsoemultilinecreate.ttbloemultilinecreatecriteria.NewttbloemultilinecreatecriteriaRow();
         Oemultilinecreatecriteria.UpdateRowFromOemultilinecreatecriteria(ref ttbloemultilinecreatecriteriaRow, AsoelineOEMultiLineCreateRequestAPI.oemultilinecreatecriteria);
         pdsoemultilinecreate.ttbloemultilinecreatecriteria.AddttbloemultilinecreatecriteriaRow((pdsoemultilinecreateDataSet.ttbloemultilinecreatecriteriaRow)ttbloemultilinecreatecriteriaRow);
          
         foreach (var obj in AsoelineOEMultiLineCreateRequestAPI.oemultilinecreateprodlist)
         {
            DataRow ttbloemultilinecreateprodlistRow = pdsoemultilinecreate.ttbloemultilinecreateprodlist.NewttbloemultilinecreateprodlistRow();
            Oemultilinecreateprodlist.UpdateRowFromOemultilinecreateprodlist(ref ttbloemultilinecreateprodlistRow, obj);
            pdsoemultilinecreate.ttbloemultilinecreateprodlist.AddttbloemultilinecreateprodlistRow((pdsoemultilinecreateDataSet.ttbloemultilinecreateprodlistRow)ttbloemultilinecreateprodlistRow);
         }
          
         
         NLogLoggerP.Trace("OEMultiLineCreate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultiLineCreate(ref pdsContext, ref pdsoemultilinecreate, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEMultiLineCreate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoemultilinecreate); 
    
         if (pdsoemultilinecreate.ttbloemultilinecreateresults.Count > 0)
         {
            result.oemultilinecreateresults = Oemultilinecreateresults.BuildOemultilinecreateresultsFromRow(pdsoemultilinecreate.ttbloemultilinecreateresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Multilinesourcing OEMultiLineSourcingPreValidate(AsoelineOEMultiLineSourcingPreValidateRequestAPI AsoelineOEMultiLineSourcingPreValidateRequestAPI)
      {   
         var result = new Multilinesourcing();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsoeiolines = new pdsoeiolinesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AsoelineOEMultiLineSourcingPreValidateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         foreach (var obj in AsoelineOEMultiLineSourcingPreValidateRequestAPI.oeiolinesresults)
         {
            DataRow ttbloeiolinesresultsRow = pdsoeiolines.ttbloeiolinesresults.NewttbloeiolinesresultsRow();
            Oeiolinesresults.UpdateRowFromOeiolinesresults(ref ttbloeiolinesresultsRow, obj);
            pdsoeiolines.ttbloeiolinesresults.AddttbloeiolinesresultsRow((pdsoeiolinesDataSet.ttbloeiolinesresultsRow)ttbloeiolinesresultsRow);
         }
          
         
         NLogLoggerP.Trace("OEMultiLineSourcingPreValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultiLineSourcingPreValidate(ref pdsContext, ref pdsmultilinesourcing,  pdsoeiolines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultiLineSourcingPreValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
         if (pdsmultilinesourcing.ttblmultilinesourcing.Count > 0) 
         { 
             result = Multilinesourcing.BuildMultilinesourcingFromRow(pdsmultilinesourcing.ttblmultilinesourcing[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> OEMultiLineSourcingUpdate(AsoelineOEMultiLineSourcingUpdateRequestAPI AsoelineOEMultiLineSourcingUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsmultilinesourcing = new pdsmultilinesourcingDataSet();
            
         var pdsoelinelinetie = new pdsoelinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblmultilinesourcingRow = pdsmultilinesourcing.ttblmultilinesourcing.NewttblmultilinesourcingRow();
         Multilinesourcing.UpdateRowFromMultilinesourcing(ref ttblmultilinesourcingRow, AsoelineOEMultiLineSourcingUpdateRequestAPI.multilinesourcing);
         pdsmultilinesourcing.ttblmultilinesourcing.AddttblmultilinesourcingRow((pdsmultilinesourcingDataSet.ttblmultilinesourcingRow)ttblmultilinesourcingRow);
          
         DataRow ttbloelinelinetieRow = pdsoelinelinetie.ttbloelinelinetie.NewttbloelinelinetieRow();
         Oelinelinetie.UpdateRowFromOelinelinetie(ref ttbloelinelinetieRow, AsoelineOEMultiLineSourcingUpdateRequestAPI.oelinelinetie);
         pdsoelinelinetie.ttbloelinelinetie.AddttbloelinelinetieRow((pdsoelinelinetieDataSet.ttbloelinelinetieRow)ttbloelinelinetieRow);
          
         
         NLogLoggerP.Trace("OEMultiLineSourcingUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultiLineSourcingUpdate(ref pdsContext,  pdsmultilinesourcing,  pdsoelinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultiLineSourcingUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmultilinesourcing); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oereturninvoicelistresults> OEReturnBuildInvoiceList(Oereturninvoicelistcriteria oereturninvoicelistcriteria)
      {   
         var results = new List<Oereturninvoicelistresults>();
         
         var pdsoereturninvoicelist = new pdsoereturninvoicelistDataSet();
            
         DataRow ttbloereturninvoicelistcriteriaCriteria = pdsoereturninvoicelist.ttbloereturninvoicelistcriteria.NewttbloereturninvoicelistcriteriaRow();
         Oereturninvoicelistcriteria.UpdateRowFromOereturninvoicelistcriteria(ref ttbloereturninvoicelistcriteriaCriteria, oereturninvoicelistcriteria);
         pdsoereturninvoicelist.ttbloereturninvoicelistcriteria.AddttbloereturninvoicelistcriteriaRow((pdsoereturninvoicelistDataSet.ttbloereturninvoicelistcriteriaRow)ttbloereturninvoicelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnBuildInvoiceList - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnBuildInvoiceList(ref pdsContext, ref pdsoereturninvoicelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnBuildInvoiceList - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturninvoicelist); 
    
            foreach (DataRow row in pdsoereturninvoicelist.ttbloereturninvoicelistresults)
            {
                results.Add(Oereturninvoicelistresults.BuildOereturninvoicelistresultsFromRow(row));
            }
            return results;
        
      }

      public AsoelineOEReturnNoProdBuildLineListResponseAPI OEReturnNoProdBuildLineList(Oereturnlinelistcriteria oereturnlinelistcriteria)
      {   
         var result = new AsoelineOEReturnNoProdBuildLineListResponseAPI();
         
         var pdsoereturnlinelist = new pdsoereturnlinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloereturnlinelistcriteriaCriteria = pdsoereturnlinelist.ttbloereturnlinelistcriteria.NewttbloereturnlinelistcriteriaRow();
         Oereturnlinelistcriteria.UpdateRowFromOereturnlinelistcriteria(ref ttbloereturnlinelistcriteriaCriteria, oereturnlinelistcriteria);
         pdsoereturnlinelist.ttbloereturnlinelistcriteria.AddttbloereturnlinelistcriteriaRow((pdsoereturnlinelistDataSet.ttbloereturnlinelistcriteriaRow)ttbloereturnlinelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnNoProdBuildLineList - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnNoProdBuildLineList(ref pdsContext, ref pdsoereturnlinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnNoProdBuildLineList - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturnlinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoereturnlinelist.ttbloereturnlinelistresults)
         {
            result.oereturnlinelistresults.Add(Oereturnlinelistresults.BuildOereturnlinelistresultsFromRow(row));
         }     
         if (pdsoereturnlinelist.ttbloereturnlinelistsingle.Count > 0)
         {
            result.oereturnlinelistsingle = Oereturnlinelistsingle.BuildOereturnlinelistsingleFromRow(pdsoereturnlinelist.ttbloereturnlinelistsingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOEReturnNoProdFinalUpdateResponseAPI OEReturnNoProdFinalUpdate(AsoelineOEReturnNoProdFinalUpdateRequestAPI AsoelineOEReturnNoProdFinalUpdateRequestAPI)
      {   
         var result = new AsoelineOEReturnNoProdFinalUpdateResponseAPI();
         
         var pdsoereturnupdatelist = new pdsoereturnupdatelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cRetForceLineList = string.Empty;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEReturnNoProdFinalUpdateRequestAPI.oereturnupdatelist)
         {
            DataRow ttbloereturnupdatelistRow = pdsoereturnupdatelist.ttbloereturnupdatelist.NewttbloereturnupdatelistRow();
            Oereturnupdatelist.UpdateRowFromOereturnupdatelist(ref ttbloereturnupdatelistRow, obj);
            pdsoereturnupdatelist.ttbloereturnupdatelist.AddttbloereturnupdatelistRow((pdsoereturnupdatelistDataSet.ttbloereturnupdatelistRow)ttbloereturnupdatelistRow);
         }
          
         var  iOrderNo = AsoelineOEReturnNoProdFinalUpdateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoelineOEReturnNoProdFinalUpdateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OEReturnNoProdFinalUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnNoProdFinalUpdate(ref pdsContext,  iOrderNo,  iOrderSuf,  pdsoereturnupdatelist, out cRetForceLineList, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnNoProdFinalUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturnupdatelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.cRetForceLineList = cRetForceLineList;
          
         return result;
          
      }

      public AsoelineOEReturnNoProdLeaveRowResponseAPI OEReturnNoProdLeaveRow(AsoelineOEReturnNoProdLeaveRowRequestAPI AsoelineOEReturnNoProdLeaveRowRequestAPI)
      {   
         var result = new AsoelineOEReturnNoProdLeaveRowResponseAPI();
         
         var pdsoereturnlinelist = new pdsoereturnlinelistDataSet();
            
         var pdsoereturnupdatelist = new pdsoereturnupdatelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloereturnlinelistcriteriaRow = pdsoereturnlinelist.ttbloereturnlinelistcriteria.NewttbloereturnlinelistcriteriaRow();
         Oereturnlinelistcriteria.UpdateRowFromOereturnlinelistcriteria(ref ttbloereturnlinelistcriteriaRow, AsoelineOEReturnNoProdLeaveRowRequestAPI.oereturnlinelistcriteria);
         pdsoereturnlinelist.ttbloereturnlinelistcriteria.AddttbloereturnlinelistcriteriaRow((pdsoereturnlinelistDataSet.ttbloereturnlinelistcriteriaRow)ttbloereturnlinelistcriteriaRow);
          
         DataRow ttbloereturnlinelistresultsRow = pdsoereturnlinelist.ttbloereturnlinelistresults.NewttbloereturnlinelistresultsRow();
         Oereturnlinelistresults.UpdateRowFromOereturnlinelistresults(ref ttbloereturnlinelistresultsRow, AsoelineOEReturnNoProdLeaveRowRequestAPI.oereturnlinelistresults);
         pdsoereturnlinelist.ttbloereturnlinelistresults.AddttbloereturnlinelistresultsRow((pdsoereturnlinelistDataSet.ttbloereturnlinelistresultsRow)ttbloereturnlinelistresultsRow);
          
         DataRow ttbloereturnlinelistsingleRow = pdsoereturnlinelist.ttbloereturnlinelistsingle.NewttbloereturnlinelistsingleRow();
         Oereturnlinelistsingle.UpdateRowFromOereturnlinelistsingle(ref ttbloereturnlinelistsingleRow, AsoelineOEReturnNoProdLeaveRowRequestAPI.oereturnlinelistsingle);
         pdsoereturnlinelist.ttbloereturnlinelistsingle.AddttbloereturnlinelistsingleRow((pdsoereturnlinelistDataSet.ttbloereturnlinelistsingleRow)ttbloereturnlinelistsingleRow);
          
         foreach (var obj in AsoelineOEReturnNoProdLeaveRowRequestAPI.oereturnupdatelist)
         {
            DataRow ttbloereturnupdatelistRow = pdsoereturnupdatelist.ttbloereturnupdatelist.NewttbloereturnupdatelistRow();
            Oereturnupdatelist.UpdateRowFromOereturnupdatelist(ref ttbloereturnupdatelistRow, obj);
            pdsoereturnupdatelist.ttbloereturnupdatelist.AddttbloereturnupdatelistRow((pdsoereturnupdatelistDataSet.ttbloereturnupdatelistRow)ttbloereturnupdatelistRow);
         }
          
         
         NLogLoggerP.Trace("OEReturnNoProdLeaveRow - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnNoProdLeaveRow(ref pdsContext, ref pdsoereturnlinelist, ref pdsoereturnupdatelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnNoProdLeaveRow - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturnlinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoereturnlinelist.ttbloereturnlinelistresults.Count > 0)
         {
            result.oereturnlinelistresults = Oereturnlinelistresults.BuildOereturnlinelistresultsFromRow(pdsoereturnlinelist.ttbloereturnlinelistresults[0]);
         }
                    
         foreach (DataRow row in pdsoereturnupdatelist.ttbloereturnupdatelist)
         {
            result.oereturnupdatelist.Add(Oereturnupdatelist.BuildOereturnupdatelistFromRow(row));
         }     
          
         return result;
          
      }

      public AsoelineOEReturnNoProdRetrieveResponseAPI OEReturnNoProdRetrieve(Oereturnparams oereturnparams)
      {   
         var result = new AsoelineOEReturnNoProdRetrieveResponseAPI();
         
         var pdsoereturnparams = new pdsoereturnparamsDataSet();
            
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloereturnparamsCriteria = pdsoereturnparams.ttbloereturnparams.NewttbloereturnparamsRow();
         Oereturnparams.UpdateRowFromOereturnparams(ref ttbloereturnparamsCriteria, oereturnparams);
         pdsoereturnparams.ttbloereturnparams.AddttbloereturnparamsRow((pdsoereturnparamsDataSet.ttbloereturnparamsRow)ttbloereturnparamsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnNoProdRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnNoProdRetrieve(ref pdsContext,  pdsoereturnparams, out pdsoereturn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnNoProdRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturnparams); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoereturn.ttbloereturn.Count > 0)
         {
            result.oereturn = Oereturn.BuildOereturnFromRow(pdsoereturn.ttbloereturn[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOEReturnLoadReasonFieldsResponseAPI OEReturnLoadReasonFields(Oereturn oereturn)
      {   
         var result = new AsoelineOEReturnLoadReasonFieldsResponseAPI();
         
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloereturnCriteria = pdsoereturn.ttbloereturn.NewttbloereturnRow();
         Oereturn.UpdateRowFromOereturn(ref ttbloereturnCriteria, oereturn);
         pdsoereturn.ttbloereturn.AddttbloereturnRow((pdsoereturnDataSet.ttbloereturnRow)ttbloereturnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnLoadReasonFields - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnLoadReasonFields(ref pdsContext, ref pdsoereturn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnLoadReasonFields - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturn); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoereturn.ttbloereturn.Count > 0)
         {
            result.oereturn = Oereturn.BuildOereturnFromRow(pdsoereturn.ttbloereturn[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Oereturnupdatelist> OEReturnNoProdUpdate(AsoelineOEReturnNoProdUpdateRequestAPI AsoelineOEReturnNoProdUpdateRequestAPI)
      {   
         var results = new List<Oereturnupdatelist>();
         
         var pdsoereturnparams = new pdsoereturnparamsDataSet();
            
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsoereturnupdatelist = new pdsoereturnupdatelistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloereturnRow = pdsoereturn.ttbloereturn.NewttbloereturnRow();
         Oereturn.UpdateRowFromOereturn(ref ttbloereturnRow, AsoelineOEReturnNoProdUpdateRequestAPI.oereturn);
         pdsoereturn.ttbloereturn.AddttbloereturnRow((pdsoereturnDataSet.ttbloereturnRow)ttbloereturnRow);
          
         DataRow ttbloereturnparamsRow = pdsoereturnparams.ttbloereturnparams.NewttbloereturnparamsRow();
         Oereturnparams.UpdateRowFromOereturnparams(ref ttbloereturnparamsRow, AsoelineOEReturnNoProdUpdateRequestAPI.oereturnparams);
         pdsoereturnparams.ttbloereturnparams.AddttbloereturnparamsRow((pdsoereturnparamsDataSet.ttbloereturnparamsRow)ttbloereturnparamsRow);
          
         foreach (var obj in AsoelineOEReturnNoProdUpdateRequestAPI.oereturnupdatelist)
         {
            DataRow ttbloereturnupdatelistRow = pdsoereturnupdatelist.ttbloereturnupdatelist.NewttbloereturnupdatelistRow();
            Oereturnupdatelist.UpdateRowFromOereturnupdatelist(ref ttbloereturnupdatelistRow, obj);
            pdsoereturnupdatelist.ttbloereturnupdatelist.AddttbloereturnupdatelistRow((pdsoereturnupdatelistDataSet.ttbloereturnupdatelistRow)ttbloereturnupdatelistRow);
         }
          
         
         NLogLoggerP.Trace("OEReturnNoProdUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnNoProdUpdate(ref pdsContext,  pdsoereturnparams,  pdsoereturn, ref pdsoereturnupdatelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnNoProdUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturnparams); 
    
            foreach (DataRow row in pdsoereturnupdatelist.ttbloereturnupdatelist)
            {
                results.Add(Oereturnupdatelist.BuildOereturnupdatelistFromRow(row));
            }
            return results;
        
      }

      public AsoelineOEReturnRetrieveResponseAPI OEReturnRetrieve(Oeline oeline)
      {   
         var result = new AsoelineOEReturnRetrieveResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloelineCriteria = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineCriteria, oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnRetrieve(ref pdsContext,  pdsoeline, out pdsoereturn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoereturn.ttbloereturn.Count > 0)
         {
            result.oereturn = Oereturn.BuildOereturnFromRow(pdsoereturn.ttbloereturn[0]);
         }
                    
          
         return result;
          
      }

      public Oereturn OEReturnSelectInvoice(AsoelineOEReturnSelectInvoiceRequestAPI AsoelineOEReturnSelectInvoiceRequestAPI)
      {   
         var result = new Oereturn();
         
         var pdsoereturninvoicelist = new pdsoereturninvoicelistDataSet();
            
         var pdsoereturn = new pdsoereturnDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloereturnRow = pdsoereturn.ttbloereturn.NewttbloereturnRow();
         Oereturn.UpdateRowFromOereturn(ref ttbloereturnRow, AsoelineOEReturnSelectInvoiceRequestAPI.oereturn);
         pdsoereturn.ttbloereturn.AddttbloereturnRow((pdsoereturnDataSet.ttbloereturnRow)ttbloereturnRow);
          
         DataRow ttbloereturninvoicelistcriteriaRow = pdsoereturninvoicelist.ttbloereturninvoicelistcriteria.NewttbloereturninvoicelistcriteriaRow();
         Oereturninvoicelistcriteria.UpdateRowFromOereturninvoicelistcriteria(ref ttbloereturninvoicelistcriteriaRow, AsoelineOEReturnSelectInvoiceRequestAPI.oereturninvoicelistcriteria);
         pdsoereturninvoicelist.ttbloereturninvoicelistcriteria.AddttbloereturninvoicelistcriteriaRow((pdsoereturninvoicelistDataSet.ttbloereturninvoicelistcriteriaRow)ttbloereturninvoicelistcriteriaRow);
          
         foreach (var obj in AsoelineOEReturnSelectInvoiceRequestAPI.oereturninvoicelistresults)
         {
            DataRow ttbloereturninvoicelistresultsRow = pdsoereturninvoicelist.ttbloereturninvoicelistresults.NewttbloereturninvoicelistresultsRow();
            Oereturninvoicelistresults.UpdateRowFromOereturninvoicelistresults(ref ttbloereturninvoicelistresultsRow, obj);
            pdsoereturninvoicelist.ttbloereturninvoicelistresults.AddttbloereturninvoicelistresultsRow((pdsoereturninvoicelistDataSet.ttbloereturninvoicelistresultsRow)ttbloereturninvoicelistresultsRow);
         }
          
         
         NLogLoggerP.Trace("OEReturnSelectInvoice - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnSelectInvoice(ref pdsContext,  pdsoereturninvoicelist, ref pdsoereturn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnSelectInvoice - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturninvoicelist); 
    
         if (pdsoereturn.ttbloereturn.Count > 0) 
         { 
             result = Oereturn.BuildOereturnFromRow(pdsoereturn.ttbloereturn[0]);
         } 
              
          
         return result;
          
      }

      public AsoelineOEReturnUpdateResponseAPI OEReturnUpdate(AsoelineOEReturnUpdateRequestAPI AsoelineOEReturnUpdateRequestAPI)
      {   
         var result = new AsoelineOEReturnUpdateResponseAPI();
         
         var pdsoeline = new pdsoelineDataSet();
            
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloelineRow = pdsoeline.ttbloeline.NewttbloelineRow();
         Oeline.UpdateRowFromOeline(ref ttbloelineRow, AsoelineOEReturnUpdateRequestAPI.oeline);
         pdsoeline.ttbloeline.AddttbloelineRow((pdsoelineDataSet.ttbloelineRow)ttbloelineRow);
          
         DataRow ttbloereturnRow = pdsoereturn.ttbloereturn.NewttbloereturnRow();
         Oereturn.UpdateRowFromOereturn(ref ttbloereturnRow, AsoelineOEReturnUpdateRequestAPI.oereturn);
         pdsoereturn.ttbloereturn.AddttbloereturnRow((pdsoereturnDataSet.ttbloereturnRow)ttbloereturnRow);
          
         
         NLogLoggerP.Trace("OEReturnUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnUpdate(ref pdsContext, ref pdsoeline,  pdsoereturn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeline.ttbloeline.Count > 0)
         {
            result.oeline = Oeline.BuildOelineFromRow(pdsoeline.ttbloeline[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOEReturnValidateResponseAPI OEReturnValidate(Oereturn oereturn)
      {   
         var result = new AsoelineOEReturnValidateResponseAPI();
         
         var pdsoereturn = new pdsoereturnDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloereturnCriteria = pdsoereturn.ttbloereturn.NewttbloereturnRow();
         Oereturn.UpdateRowFromOereturn(ref ttbloereturnCriteria, oereturn);
         pdsoereturn.ttbloereturn.AddttbloereturnRow((pdsoereturnDataSet.ttbloereturnRow)ttbloereturnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEReturnValidate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEReturnValidate(ref pdsContext, ref pdsoereturn, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEReturnValidate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoereturn); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoereturn.ttbloereturn.Count > 0)
         {
            result.oereturn = Oereturn.BuildOereturnFromRow(pdsoereturn.ttbloereturn[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Oelinemovemultiple> OEMultipleLineMoveRetrieve(int iOrderNo, int iOrderSuf, bool lMaintMode)
      {   
         var results = new List<Oelinemovemultiple>();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEMultipleLineMoveRetrieve - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveRetrieve(ref pdsContext,  iOrderNo,  iOrderSuf,  lMaintMode, out pdsoelinemovemultiple, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveRetrieve - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
            foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
            {
                results.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
            }
            return results;
        
      }

      public Oelinemovemultiple OEMultipleLineMoveCommDelete(Oelinemovemultiple oelinemovemultiple)
      {   
         var result = new Oelinemovemultiple();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         DataRow ttbloelinemovemultipleCriteria = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
         Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleCriteria, oelinemovemultiple);
         pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEMultipleLineMoveCommDelete - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveCommDelete(ref pdsContext, ref pdsoelinemovemultiple, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveCommDelete - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
         if (pdsoelinemovemultiple.ttbloelinemovemultiple.Count > 0) 
         { 
             result = Oelinemovemultiple.BuildOelinemovemultipleFromRow(pdsoelinemovemultiple.ttbloelinemovemultiple[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oelinemovemultiple> OEMultipleLineMoveCommUpdt(AsoelineOEMultipleLineMoveCommUpdtRequestAPI AsoelineOEMultipleLineMoveCommUpdtRequestAPI)
      {   
         var results = new List<Oelinemovemultiple>();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMoveCommUpdtRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         var  cMaintMode = AsoelineOEMultipleLineMoveCommUpdtRequestAPI.cMaintMode;
            
         var  cAddType = AsoelineOEMultipleLineMoveCommUpdtRequestAPI.cAddType;
            
         var  cLineType = AsoelineOEMultipleLineMoveCommUpdtRequestAPI.cLineType;
            
         var  cCommDesc1 = AsoelineOEMultipleLineMoveCommUpdtRequestAPI.cCommDesc1;
            
         var  cCommDesc2 = AsoelineOEMultipleLineMoveCommUpdtRequestAPI.cCommDesc2;
            
         
         NLogLoggerP.Trace("OEMultipleLineMoveCommUpdt - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveCommUpdt(ref pdsContext, ref pdsoelinemovemultiple,  cMaintMode,  cAddType,  cLineType,  cCommDesc1,  cCommDesc2, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveCommUpdt - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
            foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
            {
                results.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelinemovemultiple> OEMultipleLineMoveMove(AsoelineOEMultipleLineMoveMoveRequestAPI AsoelineOEMultipleLineMoveMoveRequestAPI)
      {   
         var results = new List<Oelinemovemultiple>();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMoveMoveRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         var  cMoveType = AsoelineOEMultipleLineMoveMoveRequestAPI.cMoveType;
            
         var  iMoveToLn = AsoelineOEMultipleLineMoveMoveRequestAPI.iMoveToLn;
            
         
         NLogLoggerP.Trace("OEMultipleLineMoveMove - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveMove(ref pdsContext, ref pdsoelinemovemultiple,  cMoveType,  iMoveToLn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveMove - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
            foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
            {
                results.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelinemovepricing> OEMultipleLineMovePriceCostInit(AsoelineOEMultipleLineMovePriceCostInitRequestAPI AsoelineOEMultipleLineMovePriceCostInitRequestAPI)
      {   
         var results = new List<Oelinemovepricing>();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         var pdsoelinemovepricing = new pdsoelinemovepricingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMovePriceCostInitRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         var  cProcessType = AsoelineOEMultipleLineMovePriceCostInitRequestAPI.cProcessType;
            
         
         NLogLoggerP.Trace("OEMultipleLineMovePriceCostInit - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMovePriceCostInit(ref pdsContext,  pdsoelinemovemultiple,  cProcessType, out pdsoelinemovepricing, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMovePriceCostInit - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
            foreach (DataRow row in pdsoelinemovepricing.ttbloelinemovepricing)
            {
                results.Add(Oelinemovepricing.BuildOelinemovepricingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelinemovemultiple> OEMultipleLineMovePriceCostUpdt(AsoelineOEMultipleLineMovePriceCostUpdtRequestAPI AsoelineOEMultipleLineMovePriceCostUpdtRequestAPI)
      {   
         var results = new List<Oelinemovemultiple>();
         
         var pdsoelinemovepricing = new pdsoelinemovepricingDataSet();
            
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMovePriceCostUpdtRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         foreach (var obj in AsoelineOEMultipleLineMovePriceCostUpdtRequestAPI.oelinemovepricing)
         {
            DataRow ttbloelinemovepricingRow = pdsoelinemovepricing.ttbloelinemovepricing.NewttbloelinemovepricingRow();
            Oelinemovepricing.UpdateRowFromOelinemovepricing(ref ttbloelinemovepricingRow, obj);
            pdsoelinemovepricing.ttbloelinemovepricing.AddttbloelinemovepricingRow((pdsoelinemovepricingDataSet.ttbloelinemovepricingRow)ttbloelinemovepricingRow);
         }
          
         var  cLastUpdate = AsoelineOEMultipleLineMovePriceCostUpdtRequestAPI.cLastUpdate;
            
         
         NLogLoggerP.Trace("OEMultipleLineMovePriceCostUpdt - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMovePriceCostUpdt(ref pdsContext,  pdsoelinemovepricing, ref pdsoelinemovemultiple,  cLastUpdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMovePriceCostUpdt - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovepricing); 
    
            foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
            {
                results.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oelinemovemultiple> OEMultipleLineMoveSetPrintFlag(AsoelineOEMultipleLineMoveSetPrintFlagRequestAPI AsoelineOEMultipleLineMoveSetPrintFlagRequestAPI)
      {   
         var results = new List<Oelinemovemultiple>();
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMoveSetPrintFlagRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         var  lPrintFlag = AsoelineOEMultipleLineMoveSetPrintFlagRequestAPI.lPrintFlag;
            
         
         NLogLoggerP.Trace("OEMultipleLineMoveSetPrintFlag - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveSetPrintFlag(ref pdsContext, ref pdsoelinemovemultiple,  lPrintFlag, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveSetPrintFlag - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple); 
    
            foreach (DataRow row in pdsoelinemovemultiple.ttbloelinemovemultiple)
            {
                results.Add(Oelinemovemultiple.BuildOelinemovemultipleFromRow(row));
            }
            return results;
        
      }

      public void OEMultipleLineMoveUpdate(AsoelineOEMultipleLineMoveUpdateRequestAPI AsoelineOEMultipleLineMoveUpdateRequestAPI)
      {   
         
         var pdsoelinemovemultiple = new pdsoelinemovemultipleDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoelineOEMultipleLineMoveUpdateRequestAPI.oelinemovemultiple)
         {
            DataRow ttbloelinemovemultipleRow = pdsoelinemovemultiple.ttbloelinemovemultiple.NewttbloelinemovemultipleRow();
            Oelinemovemultiple.UpdateRowFromOelinemovemultiple(ref ttbloelinemovemultipleRow, obj);
            pdsoelinemovemultiple.ttbloelinemovemultiple.AddttbloelinemovemultipleRow((pdsoelinemovemultipleDataSet.ttbloelinemovemultipleRow)ttbloelinemovemultipleRow);
         }
          
         var  iOrderNo = AsoelineOEMultipleLineMoveUpdateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoelineOEMultipleLineMoveUpdateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OEMultipleLineMoveUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OEMultipleLineMoveUpdate(ref pdsContext,  pdsoelinemovemultiple,  iOrderNo,  iOrderSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEMultipleLineMoveUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovemultiple);
      }

      public void OESingleLineMove(IEnumerable<Oelinemovesingle> oelinemovesingle)
      {   
         
         var pdsoelinemovesingle = new pdsoelinemovesingleDataSet();
            
         foreach (var obj in oelinemovesingle)
         {
             DataRow row = pdsoelinemovesingle.ttbloelinemovesingle.NewttbloelinemovesingleRow();
             Oelinemovesingle.UpdateRowFromOelinemovesingle(ref row, obj);
             pdsoelinemovesingle.ttbloelinemovesingle.AddttbloelinemovesingleRow((pdsoelinemovesingleDataSet.ttbloelinemovesingleRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESingleLineMove - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OESingleLineMove(ref pdsContext,  pdsoelinemovesingle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESingleLineMove - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinemovesingle);
      }

      public IEnumerable<Messaging> OESourcingUpdate(Oesourcing oesourcing)
      {   
         var results = new List<Messaging>();
         
         var pdsoesourcing = new pdsoesourcingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloesourcingCriteria = pdsoesourcing.ttbloesourcing.NewttbloesourcingRow();
         Oesourcing.UpdateRowFromOesourcing(ref ttbloesourcingCriteria, oesourcing);
         pdsoesourcing.ttbloesourcing.AddttbloesourcingRow((pdsoesourcingDataSet.ttbloesourcingRow)ttbloesourcingCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESourcingUpdate - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OESourcingUpdate(ref pdsContext,  pdsoesourcing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESourcingUpdate - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesourcing); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoelineOETallyAddChangeComponentResponseAPI OETallyAddChangeComponent(AsoelineOETallyAddChangeComponentRequestAPI AsoelineOETallyAddChangeComponentRequestAPI)
      {   
         var result = new AsoelineOETallyAddChangeComponentResponseAPI();
         
         var pdsoetallycomponent = new pdsoetallycomponentDataSet();
            
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadoetallycriteriaRow = pdsloadoetally.ttblloadoetallycriteria.NewttblloadoetallycriteriaRow();
         Loadoetallycriteria.UpdateRowFromLoadoetallycriteria(ref ttblloadoetallycriteriaRow, AsoelineOETallyAddChangeComponentRequestAPI.loadoetallycriteria);
         pdsloadoetally.ttblloadoetallycriteria.AddttblloadoetallycriteriaRow((pdsloadoetallyDataSet.ttblloadoetallycriteriaRow)ttblloadoetallycriteriaRow);
          
         foreach (var obj in AsoelineOETallyAddChangeComponentRequestAPI.loadoetallyresults)
         {
            DataRow ttblloadoetallyresultsRow = pdsloadoetally.ttblloadoetallyresults.NewttblloadoetallyresultsRow();
            Loadoetallyresults.UpdateRowFromLoadoetallyresults(ref ttblloadoetallyresultsRow, obj);
            pdsloadoetally.ttblloadoetallyresults.AddttblloadoetallyresultsRow((pdsloadoetallyDataSet.ttblloadoetallyresultsRow)ttblloadoetallyresultsRow);
         }
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyAddChangeComponentRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         DataRow ttbloetallycomponentRow = pdsoetallycomponent.ttbloetallycomponent.NewttbloetallycomponentRow();
         Oetallycomponent.UpdateRowFromOetallycomponent(ref ttbloetallycomponentRow, AsoelineOETallyAddChangeComponentRequestAPI.oetallycomponent);
         pdsoetallycomponent.ttbloetallycomponent.AddttbloetallycomponentRow((pdsoetallycomponentDataSet.ttbloetallycomponentRow)ttbloetallycomponentRow);
          
         
         NLogLoggerP.Trace("OETallyAddChangeComponent - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyAddChangeComponent(ref pdsContext, ref pdsoetallycomponent, ref pdsloadoetally, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyAddChangeComponent - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetallycomponent); 
    
         foreach (DataRow row in pdsloadoetally.ttblloadoetallyresults)
         {
            result.loadoetallyresults.Add(Loadoetallyresults.BuildLoadoetallyresultsFromRow(row));
         }     
         if (pdsloadoetally.ttblloadoetallysingle.Count > 0)
         {
            result.loadoetallysingle = Loadoetallysingle.BuildLoadoetallysingleFromRow(pdsloadoetally.ttblloadoetallysingle[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoetallycomponent.ttbloetallycomponent.Count > 0)
         {
            result.oetallycomponent = Oetallycomponent.BuildOetallycomponentFromRow(pdsoetallycomponent.ttbloetallycomponent[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOETallyCalcNewMixResponseAPI OETallyCalcNewMix(AsoelineOETallyCalcNewMixRequestAPI AsoelineOETallyCalcNewMixRequestAPI)
      {   
         var result = new AsoelineOETallyCalcNewMixResponseAPI();
         
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadoetallycriteriaRow = pdsloadoetally.ttblloadoetallycriteria.NewttblloadoetallycriteriaRow();
         Loadoetallycriteria.UpdateRowFromLoadoetallycriteria(ref ttblloadoetallycriteriaRow, AsoelineOETallyCalcNewMixRequestAPI.loadoetallycriteria);
         pdsloadoetally.ttblloadoetallycriteria.AddttblloadoetallycriteriaRow((pdsloadoetallyDataSet.ttblloadoetallycriteriaRow)ttblloadoetallycriteriaRow);
          
         foreach (var obj in AsoelineOETallyCalcNewMixRequestAPI.loadoetallyresults)
         {
            DataRow ttblloadoetallyresultsRow = pdsloadoetally.ttblloadoetallyresults.NewttblloadoetallyresultsRow();
            Loadoetallyresults.UpdateRowFromLoadoetallyresults(ref ttblloadoetallyresultsRow, obj);
            pdsloadoetally.ttblloadoetallyresults.AddttblloadoetallyresultsRow((pdsloadoetallyDataSet.ttblloadoetallyresultsRow)ttblloadoetallyresultsRow);
         }
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyCalcNewMixRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         
         NLogLoggerP.Trace("OETallyCalcNewMix - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyCalcNewMix(ref pdsContext, ref pdsloadoetally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyCalcNewMix - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetally); 
    
         foreach (DataRow row in pdsloadoetally.ttblloadoetallyresults)
         {
            result.loadoetallyresults.Add(Loadoetallyresults.BuildLoadoetallyresultsFromRow(row));
         }     
         if (pdsloadoetally.ttblloadoetallysingle.Count > 0)
         {
            result.loadoetallysingle = Loadoetallysingle.BuildLoadoetallysingleFromRow(pdsloadoetally.ttblloadoetallysingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoelineOETallyCompLeaveProdResponseAPI OETallyCompLeaveProd(AsoelineOETallyCompLeaveProdRequestAPI AsoelineOETallyCompLeaveProdRequestAPI)
      {   
         var result = new AsoelineOETallyCompLeaveProdResponseAPI();
         
         var pdsoetallycomponent = new pdsoetallycomponentDataSet();
            
         var pdsloadoetally = new pdsloadoetallyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadoetallycriteriaRow = pdsloadoetally.ttblloadoetallycriteria.NewttblloadoetallycriteriaRow();
         Loadoetallycriteria.UpdateRowFromLoadoetallycriteria(ref ttblloadoetallycriteriaRow, AsoelineOETallyCompLeaveProdRequestAPI.loadoetallycriteria);
         pdsloadoetally.ttblloadoetallycriteria.AddttblloadoetallycriteriaRow((pdsloadoetallyDataSet.ttblloadoetallycriteriaRow)ttblloadoetallycriteriaRow);
          
         DataRow ttblloadoetallysingleRow = pdsloadoetally.ttblloadoetallysingle.NewttblloadoetallysingleRow();
         Loadoetallysingle.UpdateRowFromLoadoetallysingle(ref ttblloadoetallysingleRow, AsoelineOETallyCompLeaveProdRequestAPI.loadoetallysingle);
         pdsloadoetally.ttblloadoetallysingle.AddttblloadoetallysingleRow((pdsloadoetallyDataSet.ttblloadoetallysingleRow)ttblloadoetallysingleRow);
          
         DataRow ttbloetallycomponentRow = pdsoetallycomponent.ttbloetallycomponent.NewttbloetallycomponentRow();
         Oetallycomponent.UpdateRowFromOetallycomponent(ref ttbloetallycomponentRow, AsoelineOETallyCompLeaveProdRequestAPI.oetallycomponent);
         pdsoetallycomponent.ttbloetallycomponent.AddttbloetallycomponentRow((pdsoetallycomponentDataSet.ttbloetallycomponentRow)ttbloetallycomponentRow);
          
         
         NLogLoggerP.Trace("OETallyCompLeaveProd - Asoeline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoelineproxy = this.proxyAppObject.CreatePO_asoelineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoelineproxy.OETallyCompLeaveProd(ref pdsContext, ref pdsoetallycomponent, ref pdsloadoetally, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETallyCompLeaveProd - Asoeline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetallycomponent); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoetallycomponent.ttbloetallycomponent.Count > 0)
         {
            result.oetallycomponent = Oetallycomponent.BuildOetallycomponentFromRow(pdsoetallycomponent.ttbloetallycomponent[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  