//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsoeel;
   using Models.Pdsloadoeeltt;
   using Models.Complex;

   public partial class OeelAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsoeel";
      private OEProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> oeelTableControlKey;
		
      private pdsoeelDataSet dataSet;
        
      public OeelAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsoeelDataSet() { DataSetName = DataSetName };
            this.oeelTableControlKey = this.dataSet.ttbloeel.GetTableControlParametersKey();
            
            if (!this.tempTableControlParameters.ContainsKey(this.oeelTableControlKey))
            {
               this.CreateTableControlParameters(this.oeelTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in OeelAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Oeelproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poOeelproxy = this.proxyAppObject.CreatePO_oeelproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poOeelproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Oeelproxy - After Call");
      }
      
      private void SetAndFetch(string where, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.oeelTableControlKey, where, batchsize, fldList);
         this.SetTableParametersOnContext(this.oeelTableControlKey, true);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Oeelproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poOeelproxy = this.proxyAppObject.CreatePO_oeelproxy())
               {
                  this.SetRequiredContextParameters();
                  poOeelproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Oeelproxy - After Call");
      }
   

      public Oeel GetByRowId(string rowId, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fldList);
         Oeel oeel = null;
         if (row != null)
         {
             oeel = this.BuildFromRow(row);
         }
         return oeel;
      }
   
      private DataRow GetRowByRowId(string rowId, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(oeel) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttbloeel.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Oeel> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(oeel)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), batchsize, fldList);
      }

      protected Oeel Fetch(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         var row = this.dataSet.ttbloeel.AsEnumerable().SingleOrDefault();
         Oeel oeel = null;
         if (row != null)
         {
             oeel = this.BuildFromRow(row);
         }
         return oeel;
      }
	  
	  
	  public IEnumerable<Oeel> GetListByRowpointers(List<string> rowpointers, string fldList)
      {
         var where = new StringBuilder();
         if (rowpointers != null && rowpointers.Count > 0)
         {
           foreach (var rowpointer in rowpointers)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("oeel.rowpointer='{0}'", rowpointer);
           }
         }
         return this.GetList(where.ToString(), rowpointers.Count, fldList);
      }
	  
	  private DataRow GetRowByRowpointer(string rowpointer, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("oeel.rowpointer = '{0}'", rowpointer);
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttbloeel.AsEnumerable().SingleOrDefault();
      }
      public IEnumerable<Oeel> GetListAllByCono(int cono, int batchsize, string fldList)
      {   
         cono = cono == 0 ? this.connection.CompanyNumber : cono;
         var sb = new StringBuilder();
         sb.AppendFormat("oeel.cono = {0}", cono);
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Oeel> GetList(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttbloeel.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Oeel Get(int cono, int orderno, int ordersuf, int lineno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("oeel.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (orderno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.orderno = {0}", orderno);
         }
         if (ordersuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.ordersuf = {0}", ordersuf);
         }
         if (lineno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.lineno = {0}", lineno);
         }
         var where = sb.ToString();
         return this.Fetch(where, batchsize, fldList);
      }
  
      public IEnumerable<Oeel> GetListByFill(int cono, string statustype, string whse, DateTime? invoicedt, string shipprod, string specnstype, int bono, string transtype, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("oeel.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(statustype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.statustype = '{0}'", statustype);
         }
         if (!string.IsNullOrEmpty(whse)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.whse = '{0}'", whse);
         }
         if (invoicedt != null) 
         {
             sb.AppendFormatWithEscape(" AND oeel.invoicedt = '{0}'", invoicedt);
         }
         if (!string.IsNullOrEmpty(shipprod)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.shipprod = '{0}'", shipprod);
         }
         if (!string.IsNullOrEmpty(specnstype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.specnstype = '{0}'", specnstype);
         }
         if (bono != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.bono = {0}", bono);
         }
         if (!string.IsNullOrEmpty(transtype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.transtype = '{0}'", transtype);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Oeel> GetListByProd(int cono, string shipprod, decimal custno, DateTime? enterdt, int orderno, int ordersuf, int lineno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("oeel.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(shipprod)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.shipprod = '{0}'", shipprod);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.custno = {0}", custno);
         }
         if (enterdt != null) 
         {
             sb.AppendFormatWithEscape(" AND oeel.enterdt = '{0}'", enterdt);
         }
         if (orderno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.orderno = {0}", orderno);
         }
         if (ordersuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.ordersuf = {0}", ordersuf);
         }
         if (lineno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.lineno = {0}", lineno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Oeel GetByRowpointer(string rowpointer, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowpointer)) 
         {
             sb.AppendFormatWithEscape("oeel.rowpointer = '{0}'", rowpointer);
         }
         var where = sb.ToString();
         return this.Fetch(where, 1, fldList);
      }

      public IEnumerable<Oeel> GetListBySpecns(int cono, string statustype, string specnstype, string whse, string ordertype, decimal arpvendno, string arpprodline, string shipprod, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("oeel.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(statustype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.statustype = '{0}'", statustype);
         }
         if (!string.IsNullOrEmpty(specnstype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.specnstype = '{0}'", specnstype);
         }
         if (!string.IsNullOrEmpty(whse)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.whse = '{0}'", whse);
         }
         if (!string.IsNullOrEmpty(ordertype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.ordertype = '{0}'", ordertype);
         }
         if (arpvendno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.arpvendno = {0}", arpvendno);
         }
         if (!string.IsNullOrEmpty(arpprodline)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.arpprodline = '{0}'", arpprodline);
         }
         if (!string.IsNullOrEmpty(shipprod)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.shipprod = '{0}'", shipprod);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Oeel> GetListByTransdttmz(DateTime? transdttmz, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transdttmz != null) 
         {
             sb.AppendFormatWithEscape("oeel.transdttmz = '{0}'", transdttmz);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Oeel> GetListByWhse(int cono, string whse, string shipprod, string transtype, decimal custno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("oeel.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(whse)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.whse = '{0}'", whse);
         }
         if (!string.IsNullOrEmpty(shipprod)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.shipprod = '{0}'", shipprod);
         }
         if (!string.IsNullOrEmpty(transtype)) 
         {
             sb.AppendFormatWithEscape(" AND oeel.transtype = '{0}'", transtype);
         }
         if (custno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND oeel.custno = {0}", custno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Oeel BuildFromRow(DataRow row)
      {
         var returnRecord = Oeel.BuildOeelFromRow(row);
         returnRecord = this.BuildExtraFromRow<Oeel>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Oeel record)
      {
         Oeel.UpdateRowFromOeel(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Oeel Insert(Oeel record)
      {
         DataRow row = this.dataSet.ttbloeel.NewttbloeelRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttbloeel.AddttbloeelRow((pdsoeelDataSet.ttbloeelRow)row);
         this.SaveChanges();
         return this.dataSet.ttbloeel.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttbloeel.Rows[0]) : null;
      }
  

      public Oeel Update(Oeel record)
      {
        var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttbloeel.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttbloeel.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Oeel record)
      {
         var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttbloeel.NewttbloeelRow();
            Oeel.BuildMinimalRow(ref row, record);
            this.dataSet.ttbloeel.AddttbloeelRow((pdsoeelDataSet.ttbloeelRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }
 
      private void DeleteUseRowID(Oeel record)
      {
         var row = this.GetRowByRowId(record.rowID, string.Empty);
         if (row == null)
         {
            row = this.dataSet.ttbloeel.NewttbloeelRow();
            Oeel.BuildMinimalRow(ref row, record);
            this.dataSet.ttbloeel.AddttbloeelRow((pdsoeelDataSet.ttbloeelRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Oeel() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.DeleteUseRowID(rec);
            }
         }
      }
	  
 
      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         if (rowpointers != null)
         {
            var recList = rowpointers.Select(selectRowpointer => new Oeel() { rowpointer = selectRowpointer }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }

      public OeelLookupResponseAPI Lookup(Loadoeelttcriteria loadoeelttcriteria)
      {   
         var result = new OeelLookupResponseAPI();
         
         var pdsloadoeeltt = new pdsloadoeelttDataSet();
            
         DataRow ttblloadoeelttcriteriaCriteria = pdsloadoeeltt.ttblloadoeelttcriteria.NewttblloadoeelttcriteriaRow();
         Loadoeelttcriteria.UpdateRowFromLoadoeelttcriteria(ref ttblloadoeelttcriteriaCriteria, loadoeelttcriteria);
         pdsloadoeeltt.ttblloadoeelttcriteria.AddttblloadoeelttcriteriaRow((pdsloadoeelttDataSet.ttblloadoeelttcriteriaRow)ttblloadoeelttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("Lookup - Oeel - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poOeelproxy = this.proxyAppObject.CreatePO_oeelproxy())
               {
                   this.SetRequiredContextParameters();
                   poOeelproxy.Lookup(ref pdsContext, ref pdsloadoeeltt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("Lookup - Oeel - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeeltt); 
    
         foreach (DataRow row in pdsloadoeeltt.ttblloadoeelttresults)
         {
            result.loadoeelttresults.Add(Loadoeelttresults.BuildLoadoeelttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  