//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdscrtimplcorestt;
   using Models.Pdscreateoealloctt;
   using Models.Pdscorescrtretstt;
   using Models.Pdscrtserialcorestt;
   using Models.Pdscrtbundleidrcds;
   using Models.Pdscreatetoeelmtt;
   using Models.Pdsgetcomplist;
   using Models.Pdsloadtcomps;
   using Models.Pdsgetedilinedata;
   using Models.Pdskitcreatedetailstt;
   using Models.Pdsmessaging;
   using Models.Pdskitscriteria;
   using Models.Pdskitcreatekwdstt;
   using Models.Pdsloadoeelalltt;
   using Models.Pdsloadoeelctt;
   using Models.Pdsloadoeelktt;
   using Models.Pdsloadoeelmtt;
   using Models.Pdsoeaddons;
   using Models.Pdsoecalcordmargin;
   using Models.Pdsoecalcordshptot;
   using Models.Pdscrttaxdisptt;
   using Models.Pdsoeioloadlnext;
   using Models.Pdsoeioloadlnhist;
   using Models.Pdsoeipaltprodload;
   using Models.Pdsoeipcreatequotes;
   using Models.Pdsoeipdisplay;
   using Models.Pdsoelinehist;
   using Models.Pdsoeoriglinehist;
   using Models.Pdsoetenderhistory;
   using Models.Pdsreportcchist;
   using Models.Pdstiecreatetiett;
   using Models.Pdsoeirinitialize;
   using Models.Pdsoeirholdall;
   using Models.Pdsoeirorderlist;
   using Models.Pdsoeirupdateorder;
   using Models.Pdsoeirapproveorders;
   using Models.Pdsoeirapproveintlorders;
   using Models.Pdsoeirquotestostock;
   using Models.Pdsoeirheaderfieldsinit;
   using Models.Pdsoeirheaderunlock;
   using Models.Pdsoeirheaderretrieve;
   using Models.Pdsoeircustomercredit;
   using Models.Pdsoeircchistory;
   using Models.Pdsoeirccdetail;
   using Models.Pdsoeixinquiry;
   using Models.Pdsoeixdelete;
   using Models.Pdsoelinelist;
   using Models.Pdsoeprodhistory;
   using Models.Pdsoeorderhistory;
   using Models.Pdsoeioloadordtot;
   using Models.Pdsoeioloadordtax;
   using Models.Pdsoeioloadordhist;
   using Models.Pdsoeioloadlinetabs;
   using Models.Pdsoeiolineext;
   using Models.Pdsoessreupdate;
   using Models.Pdsoessresearch;
   using Models.Pdsoeifsearch;
   using Models.Pdsoeiftiedorders;
   using Models.Complex;

   public partial class AsoeinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private OEProxyAppObject proxyAppObject;
      
      public AsoeinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsoeinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsoeinquiryCoresCreateImpliedCoresTTResponseAPI CoresCreateImpliedCoresTT(Crtimplcoresttcriteria crtimplcoresttcriteria)
      {   
         var result = new AsoeinquiryCoresCreateImpliedCoresTTResponseAPI();
         
         var pdscrtimplcorestt = new pdscrtimplcoresttDataSet();
            
         DataRow ttblcrtimplcoresttcriteriaCriteria = pdscrtimplcorestt.ttblcrtimplcoresttcriteria.NewttblcrtimplcoresttcriteriaRow();
         Crtimplcoresttcriteria.UpdateRowFromCrtimplcoresttcriteria(ref ttblcrtimplcoresttcriteriaCriteria, crtimplcoresttcriteria);
         pdscrtimplcorestt.ttblcrtimplcoresttcriteria.AddttblcrtimplcoresttcriteriaRow((pdscrtimplcoresttDataSet.ttblcrtimplcoresttcriteriaRow)ttblcrtimplcoresttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         decimal dTotalChg = 0;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("CoresCreateImpliedCoresTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CoresCreateImpliedCoresTT(ref pdsContext, ref pdscrtimplcorestt, out cErrorMessage, out dTotalChg, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("CoresCreateImpliedCoresTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrtimplcorestt); 
    
         foreach (DataRow row in pdscrtimplcorestt.ttblcrtimplcoresttresults)
         {
            result.crtimplcoresttresults.Add(Crtimplcoresttresults.BuildCrtimplcoresttresultsFromRow(row));
         }     
         result.dTotalChg = dTotalChg;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Createoeallocttresults> CoresCreateOEAllocationTT(Createoeallocttcriteria createoeallocttcriteria)
      {   
         var results = new List<Createoeallocttresults>();
         
         var pdscreateoealloctt = new pdscreateoeallocttDataSet();
            
         DataRow ttblcreateoeallocttcriteriaCriteria = pdscreateoealloctt.ttblcreateoeallocttcriteria.NewttblcreateoeallocttcriteriaRow();
         Createoeallocttcriteria.UpdateRowFromCreateoeallocttcriteria(ref ttblcreateoeallocttcriteriaCriteria, createoeallocttcriteria);
         pdscreateoealloctt.ttblcreateoeallocttcriteria.AddttblcreateoeallocttcriteriaRow((pdscreateoeallocttDataSet.ttblcreateoeallocttcriteriaRow)ttblcreateoeallocttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoresCreateOEAllocationTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CoresCreateOEAllocationTT(ref pdsContext, ref pdscreateoealloctt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoresCreateOEAllocationTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreateoealloctt); 
    
            foreach (DataRow row in pdscreateoealloctt.ttblcreateoeallocttresults)
            {
                results.Add(Createoeallocttresults.BuildCreateoeallocttresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryCoresCreateReturnsTTResponseAPI CoresCreateReturnsTT(Corescrtretsttcriteria corescrtretsttcriteria)
      {   
         var result = new AsoeinquiryCoresCreateReturnsTTResponseAPI();
         
         var pdscorescrtretstt = new pdscorescrtretsttDataSet();
            
         DataRow ttblcorescrtretsttcriteriaCriteria = pdscorescrtretstt.ttblcorescrtretsttcriteria.NewttblcorescrtretsttcriteriaRow();
         Corescrtretsttcriteria.UpdateRowFromCorescrtretsttcriteria(ref ttblcorescrtretsttcriteriaCriteria, corescrtretsttcriteria);
         pdscorescrtretstt.ttblcorescrtretsttcriteria.AddttblcorescrtretsttcriteriaRow((pdscorescrtretsttDataSet.ttblcorescrtretsttcriteriaRow)ttblcorescrtretsttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lOK = false;
   
         
         NLogLoggerP.Trace("CoresCreateReturnsTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CoresCreateReturnsTT(ref pdsContext, ref pdscorescrtretstt, out cErrorMessage, out lOK);
               }
            });
         NLogLoggerP.Info("CoresCreateReturnsTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscorescrtretstt); 
    
         foreach (DataRow row in pdscorescrtretstt.ttblcorescrtretsttresults)
         {
            result.corescrtretsttresults.Add(Corescrtretsttresults.BuildCorescrtretsttresultsFromRow(row));
         }     
         result.lOK = lOK;
          
         return result;
          
      }

      public IEnumerable<Crtserialcoresttresults> CoresCreateSerialCoresTT(Crtserialcoresttcriteria crtserialcoresttcriteria)
      {   
         var results = new List<Crtserialcoresttresults>();
         
         var pdscrtserialcorestt = new pdscrtserialcoresttDataSet();
            
         DataRow ttblcrtserialcoresttcriteriaCriteria = pdscrtserialcorestt.ttblcrtserialcoresttcriteria.NewttblcrtserialcoresttcriteriaRow();
         Crtserialcoresttcriteria.UpdateRowFromCrtserialcoresttcriteria(ref ttblcrtserialcoresttcriteriaCriteria, crtserialcoresttcriteria);
         pdscrtserialcorestt.ttblcrtserialcoresttcriteria.AddttblcrtserialcoresttcriteriaRow((pdscrtserialcoresttDataSet.ttblcrtserialcoresttcriteriaRow)ttblcrtserialcoresttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CoresCreateSerialCoresTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CoresCreateSerialCoresTT(ref pdsContext, ref pdscrtserialcorestt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CoresCreateSerialCoresTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrtserialcorestt); 
    
            foreach (DataRow row in pdscrtserialcorestt.ttblcrtserialcoresttresults)
            {
                results.Add(Crtserialcoresttresults.BuildCrtserialcoresttresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryCreateBundleidRecordsResponseAPI CreateBundleidRecords(Crtbundleidrcdscriteria crtbundleidrcdscriteria)
      {   
         var result = new AsoeinquiryCreateBundleidRecordsResponseAPI();
         
         var pdscrtbundleidrcds = new pdscrtbundleidrcdsDataSet();
            
         DataRow ttblcrtbundleidrcdscriteriaCriteria = pdscrtbundleidrcds.ttblcrtbundleidrcdscriteria.NewttblcrtbundleidrcdscriteriaRow();
         Crtbundleidrcdscriteria.UpdateRowFromCrtbundleidrcdscriteria(ref ttblcrtbundleidrcdscriteriaCriteria, crtbundleidrcdscriteria);
         pdscrtbundleidrcds.ttblcrtbundleidrcdscriteria.AddttblcrtbundleidrcdscriteriaRow((pdscrtbundleidrcdsDataSet.ttblcrtbundleidrcdscriteriaRow)ttblcrtbundleidrcdscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateBundleidRecords - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CreateBundleidRecords(ref pdsContext, ref pdscrtbundleidrcds, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateBundleidRecords - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrtbundleidrcds); 
    
         foreach (DataRow row in pdscrtbundleidrcds.ttblcrtbundleidrcdsdtlresults)
         {
            result.crtbundleidrcdsdtlresults.Add(Crtbundleidrcdsdtlresults.BuildCrtbundleidrcdsdtlresultsFromRow(row));
         }     
         foreach (DataRow row in pdscrtbundleidrcds.ttblcrtbundleidrcdshdrresults)
         {
            result.crtbundleidrcdshdrresults.Add(Crtbundleidrcdshdrresults.BuildCrtbundleidrcdshdrresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Createtoeelmttresults> CreateTOeelmFromOeelm(Createtoeelmttcriteria createtoeelmttcriteria)
      {   
         var results = new List<Createtoeelmttresults>();
         
         var pdscreatetoeelmtt = new pdscreatetoeelmttDataSet();
            
         DataRow ttblcreatetoeelmttcriteriaCriteria = pdscreatetoeelmtt.ttblcreatetoeelmttcriteria.NewttblcreatetoeelmttcriteriaRow();
         Createtoeelmttcriteria.UpdateRowFromCreatetoeelmttcriteria(ref ttblcreatetoeelmttcriteriaCriteria, createtoeelmttcriteria);
         pdscreatetoeelmtt.ttblcreatetoeelmttcriteria.AddttblcreatetoeelmttcriteriaRow((pdscreatetoeelmttDataSet.ttblcreatetoeelmttcriteriaRow)ttblcreatetoeelmttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateTOeelmFromOeelm - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.CreateTOeelmFromOeelm(ref pdsContext, ref pdscreatetoeelmtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateTOeelmFromOeelm - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreatetoeelmtt); 
    
            foreach (DataRow row in pdscreatetoeelmtt.ttblcreatetoeelmttresults)
            {
                results.Add(Createtoeelmttresults.BuildCreatetoeelmttresultsFromRow(row));
            }
            return results;
        
      }

      public Getcomplistresults GetComponentList(Getcomplistcriteria getcomplistcriteria)
      {   
         var result = new Getcomplistresults();
         
         var pdsgetcomplist = new pdsgetcomplistDataSet();
            
         DataRow ttblgetcomplistcriteriaCriteria = pdsgetcomplist.ttblgetcomplistcriteria.NewttblgetcomplistcriteriaRow();
         Getcomplistcriteria.UpdateRowFromGetcomplistcriteria(ref ttblgetcomplistcriteriaCriteria, getcomplistcriteria);
         pdsgetcomplist.ttblgetcomplistcriteria.AddttblgetcomplistcriteriaRow((pdsgetcomplistDataSet.ttblgetcomplistcriteriaRow)ttblgetcomplistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetComponentList - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.GetComponentList(ref pdsContext, ref pdsgetcomplist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetComponentList - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetcomplist); 
    
         if (pdsgetcomplist.ttblgetcomplistresults.Count > 0) 
         { 
             result = Getcomplistresults.BuildGetcomplistresultsFromRow(pdsgetcomplist.ttblgetcomplistresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoeinquiryComponentCheckSerLotResponseAPI ComponentCheckSerLot(AsoeinquiryComponentCheckSerLotRequestAPI AsoeinquiryComponentCheckSerLotRequestAPI)
      {   
         var result = new AsoeinquiryComponentCheckSerLotResponseAPI();
         
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         bool pvLaunchfl = false;
         decimal pvDNoSNLots = 0;
         decimal pvDNoSNLotsKits = 0;
         string cErrorMessage = string.Empty;
   
         DataRow ttblloadtcompsresultsRow = pdsloadtcomps.ttblloadtcompsresults.NewttblloadtcompsresultsRow();
         Loadtcompsresults.UpdateRowFromLoadtcompsresults(ref ttblloadtcompsresultsRow, AsoeinquiryComponentCheckSerLotRequestAPI.loadtcompsresults);
         pdsloadtcomps.ttblloadtcompsresults.AddttblloadtcompsresultsRow((pdsloadtcompsDataSet.ttblloadtcompsresultsRow)ttblloadtcompsresultsRow);
          
         var  pvIsfrommenufl = AsoeinquiryComponentCheckSerLotRequestAPI.pvIsfrommenufl;
            
         
         NLogLoggerP.Trace("ComponentCheckSerLot - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.ComponentCheckSerLot(ref pdsContext,  pvIsfrommenufl,  pdsloadtcomps, out pvLaunchfl, out pvDNoSNLots, out pvDNoSNLotsKits, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ComponentCheckSerLot - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadtcomps); 
    
         result.pvLaunchfl = pvLaunchfl;
         result.pvDNoSNLots = pvDNoSNLots;
         result.pvDNoSNLotsKits = pvDNoSNLotsKits;
          
         return result;
          
      }

      public Getedilinedataresults GetEDILineData(Getedilinedatacriteria getedilinedatacriteria)
      {   
         var result = new Getedilinedataresults();
         
         var pdsgetedilinedata = new pdsgetedilinedataDataSet();
            
         DataRow ttblgetedilinedatacriteriaCriteria = pdsgetedilinedata.ttblgetedilinedatacriteria.NewttblgetedilinedatacriteriaRow();
         Getedilinedatacriteria.UpdateRowFromGetedilinedatacriteria(ref ttblgetedilinedatacriteriaCriteria, getedilinedatacriteria);
         pdsgetedilinedata.ttblgetedilinedatacriteria.AddttblgetedilinedatacriteriaRow((pdsgetedilinedataDataSet.ttblgetedilinedatacriteriaRow)ttblgetedilinedatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetEDILineData - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.GetEDILineData(ref pdsContext, ref pdsgetedilinedata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetEDILineData - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetedilinedata); 
    
         if (pdsgetedilinedata.ttblgetedilinedataresults.Count > 0) 
         { 
             result = Getedilinedataresults.BuildGetedilinedataresultsFromRow(pdsgetedilinedata.ttblgetedilinedataresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoeinquiryKitCreateDetailsTTResponseAPI KitCreateDetailsTT(Kitcreatedetailsttcriteria kitcreatedetailsttcriteria)
      {   
         var result = new AsoeinquiryKitCreateDetailsTTResponseAPI();
         
         var pdskitcreatedetailstt = new pdskitcreatedetailsttDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblkitcreatedetailsttcriteriaCriteria = pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.NewttblkitcreatedetailsttcriteriaRow();
         Kitcreatedetailsttcriteria.UpdateRowFromKitcreatedetailsttcriteria(ref ttblkitcreatedetailsttcriteriaCriteria, kitcreatedetailsttcriteria);
         pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.AddttblkitcreatedetailsttcriteriaRow((pdskitcreatedetailsttDataSet.ttblkitcreatedetailsttcriteriaRow)ttblkitcreatedetailsttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitCreateDetailsTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.KitCreateDetailsTT(ref pdsContext, ref pdskitcreatedetailstt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitCreateDetailsTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitcreatedetailstt); 
    
         if (pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria.Count > 0)
         {
            result.kitcreatedetailsttcriteria = Kitcreatedetailsttcriteria.BuildKitcreatedetailsttcriteriaFromRow(pdskitcreatedetailstt.ttblkitcreatedetailsttcriteria[0]);
         }
                    
         if (pdskitcreatedetailstt.ttblkitcreatedetailsttresults.Count > 0)
         {
            result.kitcreatedetailsttresults = Kitcreatedetailsttresults.BuildKitcreatedetailsttresultsFromRow(pdskitcreatedetailstt.ttblkitcreatedetailsttresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeinquiryKitCreateKeywordsTTResponseAPI KitCreateKeywordsTT(AsoeinquiryKitCreateKeywordsTTRequestAPI AsoeinquiryKitCreateKeywordsTTRequestAPI)
      {   
         var result = new AsoeinquiryKitCreateKeywordsTTResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdskitcreatekwdstt = new pdskitcreatekwdsttDataSet();
            
         bool lKeyWdAddEnabledFl = false;
         string cErrorMessage = string.Empty;
   
         DataRow ttblkitscriteriaRow = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaRow, AsoeinquiryKitCreateKeywordsTTRequestAPI.kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaRow);
          
         var  cKeyWords = AsoeinquiryKitCreateKeywordsTTRequestAPI.cKeyWords;
            
         
         NLogLoggerP.Trace("KitCreateKeywordsTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.KitCreateKeywordsTT(ref pdsContext,  cKeyWords,  pdskitscriteria, out pdskitcreatekwdstt, out lKeyWdAddEnabledFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitCreateKeywordsTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         foreach (DataRow row in pdskitcreatekwdstt.ttblkitcreatekwdsttresults)
         {
            result.kitcreatekwdsttresults.Add(Kitcreatekwdsttresults.BuildKitcreatekwdsttresultsFromRow(row));
         }     
         result.lKeyWdAddEnabledFl = lKeyWdAddEnabledFl;
          
         return result;
          
      }

      public AsoeinquiryLoadOeelAllTTResponseAPI LoadOeelAllTT(Loadoeelallttcriteria loadoeelallttcriteria)
      {   
         var result = new AsoeinquiryLoadOeelAllTTResponseAPI();
         
         var pdsloadoeelalltt = new pdsloadoeelallttDataSet();
            
         DataRow ttblloadoeelallttcriteriaCriteria = pdsloadoeelalltt.ttblloadoeelallttcriteria.NewttblloadoeelallttcriteriaRow();
         Loadoeelallttcriteria.UpdateRowFromLoadoeelallttcriteria(ref ttblloadoeelallttcriteriaCriteria, loadoeelallttcriteria);
         pdsloadoeelalltt.ttblloadoeelallttcriteria.AddttblloadoeelallttcriteriaRow((pdsloadoeelallttDataSet.ttblloadoeelallttcriteriaRow)ttblloadoeelallttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LoadOeelAllTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadOeelAllTT(ref pdsContext, ref pdsloadoeelalltt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LoadOeelAllTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeelalltt); 
    
         foreach (DataRow row in pdsloadoeelalltt.ttblloadoeelallttresults)
         {
            result.loadoeelallttresults.Add(Loadoeelallttresults.BuildLoadoeelallttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Loadoeelcttresults> LoadOEELCTempTable(Loadoeelcttcriteria loadoeelcttcriteria)
      {   
         var results = new List<Loadoeelcttresults>();
         
         var pdsloadoeelctt = new pdsloadoeelcttDataSet();
            
         DataRow ttblloadoeelcttcriteriaCriteria = pdsloadoeelctt.ttblloadoeelcttcriteria.NewttblloadoeelcttcriteriaRow();
         Loadoeelcttcriteria.UpdateRowFromLoadoeelcttcriteria(ref ttblloadoeelcttcriteriaCriteria, loadoeelcttcriteria);
         pdsloadoeelctt.ttblloadoeelcttcriteria.AddttblloadoeelcttcriteriaRow((pdsloadoeelcttDataSet.ttblloadoeelcttcriteriaRow)ttblloadoeelcttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOEELCTempTable - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadOEELCTempTable(ref pdsContext, ref pdsloadoeelctt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOEELCTempTable - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeelctt); 
    
            foreach (DataRow row in pdsloadoeelctt.ttblloadoeelcttresults)
            {
                results.Add(Loadoeelcttresults.BuildLoadoeelcttresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryLoadOeelkTTResponseAPI LoadOeelkTT(Loadoeelkttcriteria loadoeelkttcriteria)
      {   
         var result = new AsoeinquiryLoadOeelkTTResponseAPI();
         
         var pdsloadoeelktt = new pdsloadoeelkttDataSet();
            
         DataRow ttblloadoeelkttcriteriaCriteria = pdsloadoeelktt.ttblloadoeelkttcriteria.NewttblloadoeelkttcriteriaRow();
         Loadoeelkttcriteria.UpdateRowFromLoadoeelkttcriteria(ref ttblloadoeelkttcriteriaCriteria, loadoeelkttcriteria);
         pdsloadoeelktt.ttblloadoeelkttcriteria.AddttblloadoeelkttcriteriaRow((pdsloadoeelkttDataSet.ttblloadoeelkttcriteriaRow)ttblloadoeelkttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LoadOeelkTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadOeelkTT(ref pdsContext, ref pdsloadoeelktt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LoadOeelkTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeelktt); 
    
         foreach (DataRow row in pdsloadoeelktt.ttblloadoeelkttresults)
         {
            result.loadoeelkttresults.Add(Loadoeelkttresults.BuildLoadoeelkttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsoeinquiryLoadOeelmTTResponseAPI LoadOeelmTT(Loadoeelmttcriteria loadoeelmttcriteria)
      {   
         var result = new AsoeinquiryLoadOeelmTTResponseAPI();
         
         var pdsloadoeelmtt = new pdsloadoeelmttDataSet();
            
         DataRow ttblloadoeelmttcriteriaCriteria = pdsloadoeelmtt.ttblloadoeelmttcriteria.NewttblloadoeelmttcriteriaRow();
         Loadoeelmttcriteria.UpdateRowFromLoadoeelmttcriteria(ref ttblloadoeelmttcriteriaCriteria, loadoeelmttcriteria);
         pdsloadoeelmtt.ttblloadoeelmttcriteria.AddttblloadoeelmttcriteriaRow((pdsloadoeelmttDataSet.ttblloadoeelmttcriteriaRow)ttblloadoeelmttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("LoadOeelmTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadOeelmTT(ref pdsContext, ref pdsloadoeelmtt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("LoadOeelmTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeelmtt); 
    
         foreach (DataRow row in pdsloadoeelmtt.ttblloadoeelmttresults)
         {
            result.loadoeelmttresults.Add(Loadoeelmttresults.BuildLoadoeelmttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Oeaddons> LoadOrderAddons(int iOrderNo, int iOrderSuf, bool lInquiryMode)
      {   
         var results = new List<Oeaddons>();
         
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOrderAddons - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadOrderAddons(ref pdsContext,  iOrderNo,  iOrderSuf,  lInquiryMode, out pdsoeaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOrderAddons - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeaddons); 
    
            foreach (DataRow row in pdsoeaddons.ttbloeaddons)
            {
                results.Add(Oeaddons.BuildOeaddonsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryLoadTCompsResponseAPI LoadTComps(Kitscriteria kitscriteria)
      {   
         var result = new AsoeinquiryLoadTCompsResponseAPI();
         
         var pdskitscriteria = new pdskitscriteriaDataSet();
            
         var pdsloadtcomps = new pdsloadtcompsDataSet();
            
         DataRow ttblkitscriteriaCriteria = pdskitscriteria.ttblkitscriteria.NewttblkitscriteriaRow();
         Kitscriteria.UpdateRowFromKitscriteria(ref ttblkitscriteriaCriteria, kitscriteria);
         pdskitscriteria.ttblkitscriteria.AddttblkitscriteriaRow((pdskitscriteriaDataSet.ttblkitscriteriaRow)ttblkitscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadTComps - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.LoadTComps(ref pdsContext, ref pdskitscriteria, out pdsloadtcomps, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadTComps - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitscriteria); 
    
         if (pdskitscriteria.ttblkitscriteria.Count > 0)
         {
            result.kitscriteria = Kitscriteria.BuildKitscriteriaFromRow(pdskitscriteria.ttblkitscriteria[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompsresults)
         {
            result.loadtcompsresults.Add(Loadtcompsresults.BuildLoadtcompsresultsFromRow(row));
         }     
         if (pdsloadtcomps.ttblloadtcompssingle.Count > 0)
         {
            result.loadtcompssingle = Loadtcompssingle.BuildLoadtcompssingleFromRow(pdsloadtcomps.ttblloadtcompssingle[0]);
         }
                    
         foreach (DataRow row in pdsloadtcomps.ttblloadtcompssubresults)
         {
            result.loadtcompssubresults.Add(Loadtcompssubresults.BuildLoadtcompssubresultsFromRow(row));
         }     
          
         return result;
          
      }

      public Oecalcordmarginresults OECalcOrderMargin(Oecalcordmargincriteria oecalcordmargincriteria)
      {   
         var result = new Oecalcordmarginresults();
         
         var pdsoecalcordmargin = new pdsoecalcordmarginDataSet();
            
         DataRow ttbloecalcordmargincriteriaCriteria = pdsoecalcordmargin.ttbloecalcordmargincriteria.NewttbloecalcordmargincriteriaRow();
         Oecalcordmargincriteria.UpdateRowFromOecalcordmargincriteria(ref ttbloecalcordmargincriteriaCriteria, oecalcordmargincriteria);
         pdsoecalcordmargin.ttbloecalcordmargincriteria.AddttbloecalcordmargincriteriaRow((pdsoecalcordmarginDataSet.ttbloecalcordmargincriteriaRow)ttbloecalcordmargincriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECalcOrderMargin - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OECalcOrderMargin(ref pdsContext, ref pdsoecalcordmargin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECalcOrderMargin - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoecalcordmargin); 
    
         if (pdsoecalcordmargin.ttbloecalcordmarginresults.Count > 0) 
         { 
             result = Oecalcordmarginresults.BuildOecalcordmarginresultsFromRow(pdsoecalcordmargin.ttbloecalcordmarginresults[0]);
         } 
              
          
         return result;
          
      }

      public Oecalcordshptotresults OECalculateOrdShpTotals(Oecalcordshptotcriteria oecalcordshptotcriteria)
      {   
         var result = new Oecalcordshptotresults();
         
         var pdsoecalcordshptot = new pdsoecalcordshptotDataSet();
            
         DataRow ttbloecalcordshptotcriteriaCriteria = pdsoecalcordshptot.ttbloecalcordshptotcriteria.NewttbloecalcordshptotcriteriaRow();
         Oecalcordshptotcriteria.UpdateRowFromOecalcordshptotcriteria(ref ttbloecalcordshptotcriteriaCriteria, oecalcordshptotcriteria);
         pdsoecalcordshptot.ttbloecalcordshptotcriteria.AddttbloecalcordshptotcriteriaRow((pdsoecalcordshptotDataSet.ttbloecalcordshptotcriteriaRow)ttbloecalcordshptotcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECalculateOrdShpTotals - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OECalculateOrdShpTotals(ref pdsContext, ref pdsoecalcordshptot, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECalculateOrdShpTotals - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoecalcordshptot); 
    
         if (pdsoecalcordshptot.ttbloecalcordshptotresults.Count > 0) 
         { 
             result = Oecalcordshptotresults.BuildOecalcordshptotresultsFromRow(pdsoecalcordshptot.ttbloecalcordshptotresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Crttaxdispttresults> OEIOCreateTaxDisplayTT(Crttaxdispttcriteria crttaxdispttcriteria)
      {   
         var results = new List<Crttaxdispttresults>();
         
         var pdscrttaxdisptt = new pdscrttaxdispttDataSet();
            
         DataRow ttblcrttaxdispttcriteriaCriteria = pdscrttaxdisptt.ttblcrttaxdispttcriteria.NewttblcrttaxdispttcriteriaRow();
         Crttaxdispttcriteria.UpdateRowFromCrttaxdispttcriteria(ref ttblcrttaxdispttcriteriaCriteria, crttaxdispttcriteria);
         pdscrttaxdisptt.ttblcrttaxdispttcriteria.AddttblcrttaxdispttcriteriaRow((pdscrttaxdispttDataSet.ttblcrttaxdispttcriteriaRow)ttblcrttaxdispttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOCreateTaxDisplayTT - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOCreateTaxDisplayTT(ref pdsContext, ref pdscrttaxdisptt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOCreateTaxDisplayTT - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscrttaxdisptt); 
    
            foreach (DataRow row in pdscrttaxdisptt.ttblcrttaxdispttresults)
            {
                results.Add(Crttaxdispttresults.BuildCrttaxdispttresultsFromRow(row));
            }
            return results;
        
      }

      public Oeioloadlnextresults OEIOLoadLineExtended(Oeioloadlnextcriteria oeioloadlnextcriteria)
      {   
         var result = new Oeioloadlnextresults();
         
         var pdsoeioloadlnext = new pdsoeioloadlnextDataSet();
            
         DataRow ttbloeioloadlnextcriteriaCriteria = pdsoeioloadlnext.ttbloeioloadlnextcriteria.NewttbloeioloadlnextcriteriaRow();
         Oeioloadlnextcriteria.UpdateRowFromOeioloadlnextcriteria(ref ttbloeioloadlnextcriteriaCriteria, oeioloadlnextcriteria);
         pdsoeioloadlnext.ttbloeioloadlnextcriteria.AddttbloeioloadlnextcriteriaRow((pdsoeioloadlnextDataSet.ttbloeioloadlnextcriteriaRow)ttbloeioloadlnextcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadLineExtended - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadLineExtended(ref pdsContext, ref pdsoeioloadlnext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadLineExtended - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadlnext); 
    
         if (pdsoeioloadlnext.ttbloeioloadlnextresults.Count > 0) 
         { 
             result = Oeioloadlnextresults.BuildOeioloadlnextresultsFromRow(pdsoeioloadlnext.ttbloeioloadlnextresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeioloadlnhistresults> OEIOLoadLineHistory(Oeioloadlnhistcriteria oeioloadlnhistcriteria)
      {   
         var results = new List<Oeioloadlnhistresults>();
         
         var pdsoeioloadlnhist = new pdsoeioloadlnhistDataSet();
            
         DataRow ttbloeioloadlnhistcriteriaCriteria = pdsoeioloadlnhist.ttbloeioloadlnhistcriteria.NewttbloeioloadlnhistcriteriaRow();
         Oeioloadlnhistcriteria.UpdateRowFromOeioloadlnhistcriteria(ref ttbloeioloadlnhistcriteriaCriteria, oeioloadlnhistcriteria);
         pdsoeioloadlnhist.ttbloeioloadlnhistcriteria.AddttbloeioloadlnhistcriteriaRow((pdsoeioloadlnhistDataSet.ttbloeioloadlnhistcriteriaRow)ttbloeioloadlnhistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadLineHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadLineHistory(ref pdsContext, ref pdsoeioloadlnhist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadLineHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadlnhist); 
    
            foreach (DataRow row in pdsoeioloadlnhist.ttbloeioloadlnhistresults)
            {
                results.Add(Oeioloadlnhistresults.BuildOeioloadlnhistresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryOEIPAltProdLoadResponseAPI OEIPAltProdLoad(Oeipaltprodloadcriteria oeipaltprodloadcriteria)
      {   
         var result = new AsoeinquiryOEIPAltProdLoadResponseAPI();
         
         var pdsoeipaltprodload = new pdsoeipaltprodloadDataSet();
            
         DataRow ttbloeipaltprodloadcriteriaCriteria = pdsoeipaltprodload.ttbloeipaltprodloadcriteria.NewttbloeipaltprodloadcriteriaRow();
         Oeipaltprodloadcriteria.UpdateRowFromOeipaltprodloadcriteria(ref ttbloeipaltprodloadcriteriaCriteria, oeipaltprodloadcriteria);
         pdsoeipaltprodload.ttbloeipaltprodloadcriteria.AddttbloeipaltprodloadcriteriaRow((pdsoeipaltprodloadDataSet.ttbloeipaltprodloadcriteriaRow)ttbloeipaltprodloadcriteriaCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIPAltProdLoad - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIPAltProdLoad(ref pdsContext, ref pdsoeipaltprodload, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIPAltProdLoad - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeipaltprodload); 
    
         foreach (DataRow row in pdsoeipaltprodload.ttbloeipaltprodloadresults)
         {
            result.oeipaltprodloadresults.Add(Oeipaltprodloadresults.BuildOeipaltprodloadresultsFromRow(row));
         }     
         if (pdsoeipaltprodload.ttbloeipaltprodloadsingle.Count > 0)
         {
            result.oeipaltprodloadsingle = Oeipaltprodloadsingle.BuildOeipaltprodloadsingleFromRow(pdsoeipaltprodload.ttbloeipaltprodloadsingle[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoeinquiryOEIPCreateQuotesResponseAPI OEIPCreateQuotes(IEnumerable<Oeipcreatequotesprod> oeipcreatequotesprod)
      {   
         var result = new AsoeinquiryOEIPCreateQuotesResponseAPI();
         
         var pdsoeipcreatequotes = new pdsoeipcreatequotesDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeipcreatequotesprod)
         {
             DataRow row = pdsoeipcreatequotes.ttbloeipcreatequotesprod.NewttbloeipcreatequotesprodRow();
             Oeipcreatequotesprod.UpdateRowFromOeipcreatequotesprod(ref row, obj);
             pdsoeipcreatequotes.ttbloeipcreatequotesprod.AddttbloeipcreatequotesprodRow((pdsoeipcreatequotesDataSet.ttbloeipcreatequotesprodRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIPCreateQuotes - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIPCreateQuotes(ref pdsContext, ref pdsoeipcreatequotes, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIPCreateQuotes - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeipcreatequotes); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeipcreatequotes.ttbloeipcreatequotesorder)
         {
            result.oeipcreatequotesorder.Add(Oeipcreatequotesorder.BuildOeipcreatequotesorderFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeinquiryOEIPDisplayResponseAPI OEIPDisplay(Oeipdisplaycriteria oeipdisplaycriteria)
      {   
         var result = new AsoeinquiryOEIPDisplayResponseAPI();
         
         var pdsoeipdisplay = new pdsoeipdisplayDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeipdisplaycriteriaCriteria = pdsoeipdisplay.ttbloeipdisplaycriteria.NewttbloeipdisplaycriteriaRow();
         Oeipdisplaycriteria.UpdateRowFromOeipdisplaycriteria(ref ttbloeipdisplaycriteriaCriteria, oeipdisplaycriteria);
         pdsoeipdisplay.ttbloeipdisplaycriteria.AddttbloeipdisplaycriteriaRow((pdsoeipdisplayDataSet.ttbloeipdisplaycriteriaRow)ttbloeipdisplaycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIPDisplay - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIPDisplay(ref pdsContext, ref pdsoeipdisplay, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIPDisplay - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeipdisplay); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeipdisplay.ttbloeipdisplayresults.Count > 0)
         {
            result.oeipdisplayresults = Oeipdisplayresults.BuildOeipdisplayresultsFromRow(pdsoeipdisplay.ttbloeipdisplayresults[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Oelinehistresults> OELineHistory(Oelinehistcriteria oelinehistcriteria)
      {   
         var results = new List<Oelinehistresults>();
         
         var pdsoelinehist = new pdsoelinehistDataSet();
            
         DataRow ttbloelinehistcriteriaCriteria = pdsoelinehist.ttbloelinehistcriteria.NewttbloelinehistcriteriaRow();
         Oelinehistcriteria.UpdateRowFromOelinehistcriteria(ref ttbloelinehistcriteriaCriteria, oelinehistcriteria);
         pdsoelinehist.ttbloelinehistcriteria.AddttbloelinehistcriteriaRow((pdsoelinehistDataSet.ttbloelinehistcriteriaRow)ttbloelinehistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OELineHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OELineHistory(ref pdsContext, ref pdsoelinehist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELineHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinehist); 
    
            foreach (DataRow row in pdsoelinehist.ttbloelinehistresults)
            {
                results.Add(Oelinehistresults.BuildOelinehistresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oeoriglinehistresults> OEOrigLineHistory(Oeoriglinehistcriteria oeoriglinehistcriteria)
      {   
         var results = new List<Oeoriglinehistresults>();
         
         var pdsoeoriglinehist = new pdsoeoriglinehistDataSet();
            
         DataRow ttbloeoriglinehistcriteriaCriteria = pdsoeoriglinehist.ttbloeoriglinehistcriteria.NewttbloeoriglinehistcriteriaRow();
         Oeoriglinehistcriteria.UpdateRowFromOeoriglinehistcriteria(ref ttbloeoriglinehistcriteriaCriteria, oeoriglinehistcriteria);
         pdsoeoriglinehist.ttbloeoriglinehistcriteria.AddttbloeoriglinehistcriteriaRow((pdsoeoriglinehistDataSet.ttbloeoriglinehistcriteriaRow)ttbloeoriglinehistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrigLineHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEOrigLineHistory(ref pdsContext, ref pdsoeoriglinehist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrigLineHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeoriglinehist); 
    
            foreach (DataRow row in pdsoeoriglinehist.ttbloeoriglinehistresults)
            {
                results.Add(Oeoriglinehistresults.BuildOeoriglinehistresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryOETenderHistoryResponseAPI OETenderHistory(Oetenderhistorycriteria oetenderhistorycriteria)
      {   
         var result = new AsoeinquiryOETenderHistoryResponseAPI();
         
         var pdsoetenderhistory = new pdsoetenderhistoryDataSet();
            
         DataRow ttbloetenderhistorycriteriaCriteria = pdsoetenderhistory.ttbloetenderhistorycriteria.NewttbloetenderhistorycriteriaRow();
         Oetenderhistorycriteria.UpdateRowFromOetenderhistorycriteria(ref ttbloetenderhistorycriteriaCriteria, oetenderhistorycriteria);
         pdsoetenderhistory.ttbloetenderhistorycriteria.AddttbloetenderhistorycriteriaRow((pdsoetenderhistoryDataSet.ttbloetenderhistorycriteriaRow)ttbloetenderhistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OETenderHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OETenderHistory(ref pdsContext, ref pdsoetenderhistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETenderHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetenderhistory); 
    
         foreach (DataRow row in pdsoetenderhistory.ttbloetenderhistoryresults)
         {
            result.oetenderhistoryresults.Add(Oetenderhistoryresults.BuildOetenderhistoryresultsFromRow(row));
         }     
         if (pdsoetenderhistory.ttbloetenderhistorysingle.Count > 0)
         {
            result.oetenderhistorysingle = Oetenderhistorysingle.BuildOetenderhistorysingleFromRow(pdsoetenderhistory.ttbloetenderhistorysingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Reportcchistresults> ReportCreditCardHist(Reportcchistcriteria reportcchistcriteria)
      {   
         var results = new List<Reportcchistresults>();
         
         var pdsreportcchist = new pdsreportcchistDataSet();
            
         DataRow ttblreportcchistcriteriaCriteria = pdsreportcchist.ttblreportcchistcriteria.NewttblreportcchistcriteriaRow();
         Reportcchistcriteria.UpdateRowFromReportcchistcriteria(ref ttblreportcchistcriteriaCriteria, reportcchistcriteria);
         pdsreportcchist.ttblreportcchistcriteria.AddttblreportcchistcriteriaRow((pdsreportcchistDataSet.ttblreportcchistcriteriaRow)ttblreportcchistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReportCreditCardHist - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.ReportCreditCardHist(ref pdsContext, ref pdsreportcchist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReportCreditCardHist - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreportcchist); 
    
            foreach (DataRow row in pdsreportcchist.ttblreportcchistresults)
            {
                results.Add(Reportcchistresults.BuildReportcchistresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Tiecreatetiettresults> TieCreateTieTempTable(Tiecreatetiettcriteria tiecreatetiettcriteria)
      {   
         var results = new List<Tiecreatetiettresults>();
         
         var pdstiecreatetiett = new pdstiecreatetiettDataSet();
            
         DataRow ttbltiecreatetiettcriteriaCriteria = pdstiecreatetiett.ttbltiecreatetiettcriteria.NewttbltiecreatetiettcriteriaRow();
         Tiecreatetiettcriteria.UpdateRowFromTiecreatetiettcriteria(ref ttbltiecreatetiettcriteriaCriteria, tiecreatetiettcriteria);
         pdstiecreatetiett.ttbltiecreatetiettcriteria.AddttbltiecreatetiettcriteriaRow((pdstiecreatetiettDataSet.ttbltiecreatetiettcriteriaRow)ttbltiecreatetiettcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TieCreateTieTempTable - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.TieCreateTieTempTable(ref pdsContext, ref pdstiecreatetiett, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TieCreateTieTempTable - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiecreatetiett); 
    
            foreach (DataRow row in pdstiecreatetiett.ttbltiecreatetiettresults)
            {
                results.Add(Tiecreatetiettresults.BuildTiecreatetiettresultsFromRow(row));
            }
            return results;
        
      }

      public Oeirinitialize OEIRInitialize()
      {   
         var result = new Oeirinitialize();
         
         var pdsoeirinitialize = new pdsoeirinitializeDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRInitialize - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRInitialize(ref pdsContext, out pdsoeirinitialize, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRInitialize - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirinitialize); 
    
         if (pdsoeirinitialize.ttbloeirinitialize.Count > 0) 
         { 
             result = Oeirinitialize.BuildOeirinitializeFromRow(pdsoeirinitialize.ttbloeirinitialize[0]);
         } 
              
          
         return result;
          
      }

      public bool OEIRValidateApprovalSecurity(int pvOrderno, int pvOrdersuf)
      {   
          
         bool pvEditingokfl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRValidateApprovalSecurity - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRValidateApprovalSecurity(ref pdsContext,  pvOrderno,  pvOrdersuf, out pvEditingokfl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRValidateApprovalSecurity - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvEditingokfl;
      
      }

      public void OEIRHoldAll(Oeirholdall oeirholdall)
      {   
         
         var pdsoeirholdall = new pdsoeirholdallDataSet();
            
         DataRow ttbloeirholdallCriteria = pdsoeirholdall.ttbloeirholdall.NewttbloeirholdallRow();
         Oeirholdall.UpdateRowFromOeirholdall(ref ttbloeirholdallCriteria, oeirholdall);
         pdsoeirholdall.ttbloeirholdall.AddttbloeirholdallRow((pdsoeirholdallDataSet.ttbloeirholdallRow)ttbloeirholdallCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRHoldAll - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRHoldAll(ref pdsContext,  pdsoeirholdall, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRHoldAll - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirholdall);
      }

      public IEnumerable<Messaging> OEIRReleaseAll(Oeirholdall oeirholdall)
      {   
         var results = new List<Messaging>();
         
         var pdsoeirholdall = new pdsoeirholdallDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeirholdallCriteria = pdsoeirholdall.ttbloeirholdall.NewttbloeirholdallRow();
         Oeirholdall.UpdateRowFromOeirholdall(ref ttbloeirholdallCriteria, oeirholdall);
         pdsoeirholdall.ttbloeirholdall.AddttbloeirholdallRow((pdsoeirholdallDataSet.ttbloeirholdallRow)ttbloeirholdallCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRReleaseAll - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRReleaseAll(ref pdsContext,  pdsoeirholdall, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRReleaseAll - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirholdall); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oeirorderlistresults> OEIROrderList(Oeirorderlistcriteria oeirorderlistcriteria)
      {   
         var results = new List<Oeirorderlistresults>();
         
         var pdsoeirorderlist = new pdsoeirorderlistDataSet();
            
         DataRow ttbloeirorderlistcriteriaCriteria = pdsoeirorderlist.ttbloeirorderlistcriteria.NewttbloeirorderlistcriteriaRow();
         Oeirorderlistcriteria.UpdateRowFromOeirorderlistcriteria(ref ttbloeirorderlistcriteriaCriteria, oeirorderlistcriteria);
         pdsoeirorderlist.ttbloeirorderlistcriteria.AddttbloeirorderlistcriteriaRow((pdsoeirorderlistDataSet.ttbloeirorderlistcriteriaRow)ttbloeirorderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIROrderList - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIROrderList(ref pdsContext, ref pdsoeirorderlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIROrderList - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirorderlist); 
    
            foreach (DataRow row in pdsoeirorderlist.ttbloeirorderlistresults)
            {
                results.Add(Oeirorderlistresults.BuildOeirorderlistresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryOEIRUpdateOrderResponseAPI OEIRUpdateOrder(Oeirupdateorder oeirupdateorder)
      {   
         var result = new AsoeinquiryOEIRUpdateOrderResponseAPI();
         
         var pdsoeirupdateorder = new pdsoeirupdateorderDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeirupdateorderCriteria = pdsoeirupdateorder.ttbloeirupdateorder.NewttbloeirupdateorderRow();
         Oeirupdateorder.UpdateRowFromOeirupdateorder(ref ttbloeirupdateorderCriteria, oeirupdateorder);
         pdsoeirupdateorder.ttbloeirupdateorder.AddttbloeirupdateorderRow((pdsoeirupdateorderDataSet.ttbloeirupdateorderRow)ttbloeirupdateorderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRUpdateOrder - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRUpdateOrder(ref pdsContext, ref pdsoeirupdateorder, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRUpdateOrder - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirupdateorder); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeirupdateorder.ttbloeirupdateorder.Count > 0)
         {
            result.oeirupdateorder = Oeirupdateorder.BuildOeirupdateorderFromRow(pdsoeirupdateorder.ttbloeirupdateorder[0]);
         }
                    
          
         return result;
          
      }

      public AsoeinquiryOEIRApproveOrdersResponseAPI OEIRApproveOrders(IEnumerable<Oeirapproveorders> oeirapproveorders)
      {   
         var result = new AsoeinquiryOEIRApproveOrdersResponseAPI();
         
         var pdsoeirapproveorders = new pdsoeirapproveordersDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeirapproveorders)
         {
             DataRow row = pdsoeirapproveorders.ttbloeirapproveorders.NewttbloeirapproveordersRow();
             Oeirapproveorders.UpdateRowFromOeirapproveorders(ref row, obj);
             pdsoeirapproveorders.ttbloeirapproveorders.AddttbloeirapproveordersRow((pdsoeirapproveordersDataSet.ttbloeirapproveordersRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRApproveOrders - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRApproveOrders(ref pdsContext, ref pdsoeirapproveorders, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRApproveOrders - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirapproveorders); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeirapproveorders.ttbloeirapproveorders)
         {
            result.oeirapproveorders.Add(Oeirapproveorders.BuildOeirapproveordersFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeinquiryOEIRApproveInternationalOrdersResponseAPI OEIRApproveInternationalOrders(IEnumerable<Oeirapproveintlorders> oeirapproveintlorders)
      {   
         var result = new AsoeinquiryOEIRApproveInternationalOrdersResponseAPI();
         
         var pdsoeirapproveintlorders = new pdsoeirapproveintlordersDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeirapproveintlorders)
         {
             DataRow row = pdsoeirapproveintlorders.ttbloeirapproveintlorders.NewttbloeirapproveintlordersRow();
             Oeirapproveintlorders.UpdateRowFromOeirapproveintlorders(ref row, obj);
             pdsoeirapproveintlorders.ttbloeirapproveintlorders.AddttbloeirapproveintlordersRow((pdsoeirapproveintlordersDataSet.ttbloeirapproveintlordersRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRApproveInternationalOrders - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRApproveInternationalOrders(ref pdsContext, ref pdsoeirapproveintlorders, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRApproveInternationalOrders - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirapproveintlorders); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeirapproveintlorders.ttbloeirapproveintlorders)
         {
            result.oeirapproveintlorders.Add(Oeirapproveintlorders.BuildOeirapproveintlordersFromRow(row));
         }     
          
         return result;
          
      }

      public void OEIRConvertQuotesToStock(IEnumerable<Oeirquotestostock> oeirquotestostock)
      {   
         
         var pdsoeirquotestostock = new pdsoeirquotestostockDataSet();
            
         foreach (var obj in oeirquotestostock)
         {
             DataRow row = pdsoeirquotestostock.ttbloeirquotestostock.NewttbloeirquotestostockRow();
             Oeirquotestostock.UpdateRowFromOeirquotestostock(ref row, obj);
             pdsoeirquotestostock.ttbloeirquotestostock.AddttbloeirquotestostockRow((pdsoeirquotestostockDataSet.ttbloeirquotestostockRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRConvertQuotesToStock - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRConvertQuotesToStock(ref pdsContext,  pdsoeirquotestostock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRConvertQuotesToStock - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirquotestostock);
      }

      public Oeirheaderfieldsinitresults OEIRHeaderFieldsInit(Oeirheaderfieldsinitcriteria oeirheaderfieldsinitcriteria)
      {   
         var result = new Oeirheaderfieldsinitresults();
         
         var pdsoeirheaderfieldsinit = new pdsoeirheaderfieldsinitDataSet();
            
         DataRow ttbloeirheaderfieldsinitcriteriaCriteria = pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitcriteria.NewttbloeirheaderfieldsinitcriteriaRow();
         Oeirheaderfieldsinitcriteria.UpdateRowFromOeirheaderfieldsinitcriteria(ref ttbloeirheaderfieldsinitcriteriaCriteria, oeirheaderfieldsinitcriteria);
         pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitcriteria.AddttbloeirheaderfieldsinitcriteriaRow((pdsoeirheaderfieldsinitDataSet.ttbloeirheaderfieldsinitcriteriaRow)ttbloeirheaderfieldsinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRHeaderFieldsInit - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRHeaderFieldsInit(ref pdsContext, ref pdsoeirheaderfieldsinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRHeaderFieldsInit - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirheaderfieldsinit); 
    
         if (pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitresults.Count > 0) 
         { 
             result = Oeirheaderfieldsinitresults.BuildOeirheaderfieldsinitresultsFromRow(pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitresults[0]);
         } 
              
          
         return result;
          
      }

      public void OEIRHeaderUnlock(Oeirheaderunlock oeirheaderunlock)
      {   
         
         var pdsoeirheaderunlock = new pdsoeirheaderunlockDataSet();
            
         DataRow ttbloeirheaderunlockCriteria = pdsoeirheaderunlock.ttbloeirheaderunlock.NewttbloeirheaderunlockRow();
         Oeirheaderunlock.UpdateRowFromOeirheaderunlock(ref ttbloeirheaderunlockCriteria, oeirheaderunlock);
         pdsoeirheaderunlock.ttbloeirheaderunlock.AddttbloeirheaderunlockRow((pdsoeirheaderunlockDataSet.ttbloeirheaderunlockRow)ttbloeirheaderunlockCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRHeaderUnlock - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRHeaderUnlock(ref pdsContext,  pdsoeirheaderunlock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRHeaderUnlock - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirheaderunlock);
      }

      public IEnumerable<Messaging> OEIRHeaderFieldsUpdate(AsoeinquiryOEIRHeaderFieldsUpdateRequestAPI AsoeinquiryOEIRHeaderFieldsUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoeirheaderfieldsinit = new pdsoeirheaderfieldsinitDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeirheaderfieldsinitcriteriaRow = pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitcriteria.NewttbloeirheaderfieldsinitcriteriaRow();
         Oeirheaderfieldsinitcriteria.UpdateRowFromOeirheaderfieldsinitcriteria(ref ttbloeirheaderfieldsinitcriteriaRow, AsoeinquiryOEIRHeaderFieldsUpdateRequestAPI.oeirheaderfieldsinitcriteria);
         pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitcriteria.AddttbloeirheaderfieldsinitcriteriaRow((pdsoeirheaderfieldsinitDataSet.ttbloeirheaderfieldsinitcriteriaRow)ttbloeirheaderfieldsinitcriteriaRow);
          
         DataRow ttbloeirheaderfieldsinitresultsRow = pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitresults.NewttbloeirheaderfieldsinitresultsRow();
         Oeirheaderfieldsinitresults.UpdateRowFromOeirheaderfieldsinitresults(ref ttbloeirheaderfieldsinitresultsRow, AsoeinquiryOEIRHeaderFieldsUpdateRequestAPI.oeirheaderfieldsinitresults);
         pdsoeirheaderfieldsinit.ttbloeirheaderfieldsinitresults.AddttbloeirheaderfieldsinitresultsRow((pdsoeirheaderfieldsinitDataSet.ttbloeirheaderfieldsinitresultsRow)ttbloeirheaderfieldsinitresultsRow);
          
         
         NLogLoggerP.Trace("OEIRHeaderFieldsUpdate - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRHeaderFieldsUpdate(ref pdsContext,  pdsoeirheaderfieldsinit, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRHeaderFieldsUpdate - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirheaderfieldsinit); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void OEIRCheckDrilldownAccess(Oeirupdateorder oeirupdateorder)
      {   
         
         var pdsoeirupdateorder = new pdsoeirupdateorderDataSet();
            
         DataRow ttbloeirupdateorderCriteria = pdsoeirupdateorder.ttbloeirupdateorder.NewttbloeirupdateorderRow();
         Oeirupdateorder.UpdateRowFromOeirupdateorder(ref ttbloeirupdateorderCriteria, oeirupdateorder);
         pdsoeirupdateorder.ttbloeirupdateorder.AddttbloeirupdateorderRow((pdsoeirupdateorderDataSet.ttbloeirupdateorderRow)ttbloeirupdateorderCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRCheckDrilldownAccess - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRCheckDrilldownAccess(ref pdsContext,  pdsoeirupdateorder, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRCheckDrilldownAccess - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirupdateorder);
      }

      public Oeirheaderretrieveresults OEIRHeaderRetrieve(AsoeinquiryOEIRHeaderRetrieveRequestAPI AsoeinquiryOEIRHeaderRetrieveRequestAPI)
      {   
         var result = new Oeirheaderretrieveresults();
         
         var pdsoeirheaderretrieve = new pdsoeirheaderretrieveDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeinquiryOEIRHeaderRetrieveRequestAPI.oeirheaderretrieveaddons)
         {
            DataRow ttbloeirheaderretrieveaddonsRow = pdsoeirheaderretrieve.ttbloeirheaderretrieveaddons.NewttbloeirheaderretrieveaddonsRow();
            Oeirheaderretrieveaddons.UpdateRowFromOeirheaderretrieveaddons(ref ttbloeirheaderretrieveaddonsRow, obj);
            pdsoeirheaderretrieve.ttbloeirheaderretrieveaddons.AddttbloeirheaderretrieveaddonsRow((pdsoeirheaderretrieveDataSet.ttbloeirheaderretrieveaddonsRow)ttbloeirheaderretrieveaddonsRow);
         }
          
         DataRow ttbloeirheaderretrievecriteriaRow = pdsoeirheaderretrieve.ttbloeirheaderretrievecriteria.NewttbloeirheaderretrievecriteriaRow();
         Oeirheaderretrievecriteria.UpdateRowFromOeirheaderretrievecriteria(ref ttbloeirheaderretrievecriteriaRow, AsoeinquiryOEIRHeaderRetrieveRequestAPI.oeirheaderretrievecriteria);
         pdsoeirheaderretrieve.ttbloeirheaderretrievecriteria.AddttbloeirheaderretrievecriteriaRow((pdsoeirheaderretrieveDataSet.ttbloeirheaderretrievecriteriaRow)ttbloeirheaderretrievecriteriaRow);
          
         
         NLogLoggerP.Trace("OEIRHeaderRetrieve - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRHeaderRetrieve(ref pdsContext, ref pdsoeirheaderretrieve, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRHeaderRetrieve - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirheaderretrieve); 
    
         if (pdsoeirheaderretrieve.ttbloeirheaderretrieveresults.Count > 0) 
         { 
             result = Oeirheaderretrieveresults.BuildOeirheaderretrieveresultsFromRow(pdsoeirheaderretrieve.ttbloeirheaderretrieveresults[0]);
         } 
              
          
         return result;
          
      }

      public Oeircustomercreditresults OEIRCustomerCredit(Oeircustomercreditcriteria oeircustomercreditcriteria)
      {   
         var result = new Oeircustomercreditresults();
         
         var pdsoeircustomercredit = new pdsoeircustomercreditDataSet();
            
         DataRow ttbloeircustomercreditcriteriaCriteria = pdsoeircustomercredit.ttbloeircustomercreditcriteria.NewttbloeircustomercreditcriteriaRow();
         Oeircustomercreditcriteria.UpdateRowFromOeircustomercreditcriteria(ref ttbloeircustomercreditcriteriaCriteria, oeircustomercreditcriteria);
         pdsoeircustomercredit.ttbloeircustomercreditcriteria.AddttbloeircustomercreditcriteriaRow((pdsoeircustomercreditDataSet.ttbloeircustomercreditcriteriaRow)ttbloeircustomercreditcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRCustomerCredit - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRCustomerCredit(ref pdsContext, ref pdsoeircustomercredit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRCustomerCredit - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeircustomercredit); 
    
         if (pdsoeircustomercredit.ttbloeircustomercreditresults.Count > 0) 
         { 
             result = Oeircustomercreditresults.BuildOeircustomercreditresultsFromRow(pdsoeircustomercredit.ttbloeircustomercreditresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeircchistoryresults> OEIRCCHistory(Oeircchistorycriteria oeircchistorycriteria)
      {   
         var results = new List<Oeircchistoryresults>();
         
         var pdsoeircchistory = new pdsoeircchistoryDataSet();
            
         DataRow ttbloeircchistorycriteriaCriteria = pdsoeircchistory.ttbloeircchistorycriteria.NewttbloeircchistorycriteriaRow();
         Oeircchistorycriteria.UpdateRowFromOeircchistorycriteria(ref ttbloeircchistorycriteriaCriteria, oeircchistorycriteria);
         pdsoeircchistory.ttbloeircchistorycriteria.AddttbloeircchistorycriteriaRow((pdsoeircchistoryDataSet.ttbloeircchistorycriteriaRow)ttbloeircchistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRCCHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRCCHistory(ref pdsContext, ref pdsoeircchistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRCCHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeircchistory); 
    
            foreach (DataRow row in pdsoeircchistory.ttbloeircchistoryresults)
            {
                results.Add(Oeircchistoryresults.BuildOeircchistoryresultsFromRow(row));
            }
            return results;
        
      }

      public Oeirccdetailresults OEIRCCDetail(Oeirccdetailcriteria oeirccdetailcriteria)
      {   
         var result = new Oeirccdetailresults();
         
         var pdsoeirccdetail = new pdsoeirccdetailDataSet();
            
         DataRow ttbloeirccdetailcriteriaCriteria = pdsoeirccdetail.ttbloeirccdetailcriteria.NewttbloeirccdetailcriteriaRow();
         Oeirccdetailcriteria.UpdateRowFromOeirccdetailcriteria(ref ttbloeirccdetailcriteriaCriteria, oeirccdetailcriteria);
         pdsoeirccdetail.ttbloeirccdetailcriteria.AddttbloeirccdetailcriteriaRow((pdsoeirccdetailDataSet.ttbloeirccdetailcriteriaRow)ttbloeirccdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIRCCDetail - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRCCDetail(ref pdsContext, ref pdsoeirccdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRCCDetail - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirccdetail); 
    
         if (pdsoeirccdetail.ttbloeirccdetailresults.Count > 0) 
         { 
             result = Oeirccdetailresults.BuildOeirccdetailresultsFromRow(pdsoeirccdetail.ttbloeirccdetailresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoeinquiryOEIXBuildListResponseAPI OEIXBuildList(Oeixcriteria oeixcriteria)
      {   
         var result = new AsoeinquiryOEIXBuildListResponseAPI();
         
         var pdsoeixinquiry = new pdsoeixinquiryDataSet();
            
         DataRow ttbloeixcriteriaCriteria = pdsoeixinquiry.ttbloeixcriteria.NewttbloeixcriteriaRow();
         Oeixcriteria.UpdateRowFromOeixcriteria(ref ttbloeixcriteriaCriteria, oeixcriteria);
         pdsoeixinquiry.ttbloeixcriteria.AddttbloeixcriteriaRow((pdsoeixinquiryDataSet.ttbloeixcriteriaRow)ttbloeixcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIXBuildList - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIXBuildList(ref pdsContext, ref pdsoeixinquiry, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIXBuildList - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeixinquiry); 
    
         foreach (DataRow row in pdsoeixinquiry.ttbloeixinquiry)
         {
            result.oeixinquiry.Add(Oeixinquiry.BuildOeixinquiryFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void OEIXDeleteList(IEnumerable<Oeixdeletelist> oeixdeletelist)
      {   
         
         var pdsoeixdelete = new pdsoeixdeleteDataSet();
            
         foreach (var obj in oeixdeletelist)
         {
             DataRow row = pdsoeixdelete.ttbloeixdeletelist.NewttbloeixdeletelistRow();
             Oeixdeletelist.UpdateRowFromOeixdeletelist(ref row, obj);
             pdsoeixdelete.ttbloeixdeletelist.AddttbloeixdeletelistRow((pdsoeixdeleteDataSet.ttbloeixdeletelistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIXDeleteList - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIXDeleteList(ref pdsContext,  pdsoeixdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIXDeleteList - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeixdelete);
      }

      public bool OECheckCancelAllLinesTieAuth(int pvOrderno, int pvOrdersuf)
      {   
          
         bool pvAuthreqfl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECheckCancelAllLinesTieAuth - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OECheckCancelAllLinesTieAuth(ref pdsContext,  pvOrderno,  pvOrdersuf, out pvAuthreqfl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECheckCancelAllLinesTieAuth - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvAuthreqfl;
      
      }

      public bool OECheckCancelLineTieAuth(IEnumerable<Oelinelist> oelinelist)
      {   
          
         var pdsoelinelist = new pdsoelinelistDataSet();
            
         foreach (var obj in oelinelist)
         {
             DataRow row = pdsoelinelist.ttbloelinelist.NewttbloelinelistRow();
             Oelinelist.UpdateRowFromOelinelist(ref row, obj);
             pdsoelinelist.ttbloelinelist.AddttbloelinelistRow((pdsoelinelistDataSet.ttbloelinelistRow)row);
         }
        
         bool pvAuthreqfl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECheckCancelLineTieAuth - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OECheckCancelLineTieAuth(ref pdsContext,  pdsoelinelist, out pvAuthreqfl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECheckCancelLineTieAuth - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoelinelist); 
    
         return pvAuthreqfl;
      
      }

      public AsoeinquiryOEESAuthPointInfoResponseAPI OEESAuthPointInfo(int pvOrderno, int pvOrdersuf)
      {   
         var result = new AsoeinquiryOEESAuthPointInfoResponseAPI();
         
         bool pvPackagesexist = false;
         string pvCustselltype = string.Empty;
         bool pvIsfullytendered = false;
         string pvWlauthtype = string.Empty;
         bool pvIssignaturerequired = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESAuthPointInfo - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEESAuthPointInfo(ref pdsContext,  pvOrderno,  pvOrdersuf, out pvPackagesexist, out pvCustselltype, out pvIsfullytendered, out pvWlauthtype, out pvIssignaturerequired, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESAuthPointInfo - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.pvPackagesexist = pvPackagesexist;
         result.pvCustselltype = pvCustselltype;
         result.pvIsfullytendered = pvIsfullytendered;
         result.pvWlauthtype = pvWlauthtype;
         result.pvIssignaturerequired = pvIssignaturerequired;
          
         return result;
          
      }

      public AsoeinquiryOEIRAuthPointInfoResponseAPI OEIRAuthPointInfo(AsoeinquiryOEIRAuthPointInfoRequestAPI AsoeinquiryOEIRAuthPointInfoRequestAPI)
      {   
         var result = new AsoeinquiryOEIRAuthPointInfoResponseAPI();
         
         string pvCustselltype = string.Empty;
         bool pvTermscodfl = false;
         string cErrorMessage = string.Empty;
   
         var  pvCustno = AsoeinquiryOEIRAuthPointInfoRequestAPI.pvCustno;
            
         var  pvTermstype = AsoeinquiryOEIRAuthPointInfoRequestAPI.pvTermstype;
            
         
         NLogLoggerP.Trace("OEIRAuthPointInfo - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIRAuthPointInfo(ref pdsContext,  pvCustno,  pvTermstype, out pvCustselltype, out pvTermscodfl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIRAuthPointInfo - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.pvCustselltype = pvCustselltype;
         result.pvTermscodfl = pvTermscodfl;
          
         return result;
          
      }

      public IEnumerable<Oeprodhistory> OEProductHistory(decimal dCustomerNumber, int iRecordLimit)
      {   
         var results = new List<Oeprodhistory>();
         
         var pdsoeprodhistory = new pdsoeprodhistoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEProductHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEProductHistory(ref pdsContext,  dCustomerNumber,  iRecordLimit, out pdsoeprodhistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEProductHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeprodhistory); 
    
            foreach (DataRow row in pdsoeprodhistory.ttbloeprodhistory)
            {
                results.Add(Oeprodhistory.BuildOeprodhistoryFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oeorderhistory> OEOrderHistory(decimal dCustomerNumber, int iRecordLimit)
      {   
         var results = new List<Oeorderhistory>();
         
         var pdsoeorderhistory = new pdsoeorderhistoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEOrderHistory(ref pdsContext,  dCustomerNumber,  iRecordLimit, out pdsoeorderhistory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeorderhistory); 
    
            foreach (DataRow row in pdsoeorderhistory.ttbloeorderhistory)
            {
                results.Add(Oeorderhistory.BuildOeorderhistoryFromRow(row));
            }
            return results;
        
      }

      public AsoeinquiryOEIOLoadOrderTotalsResponseAPI OEIOLoadOrderTotals(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeinquiryOEIOLoadOrderTotalsResponseAPI();
         
         var pdsoeioloadordtot = new pdsoeioloadordtotDataSet();
            
         string lcImgSig = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadOrderTotals - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadOrderTotals(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeioloadordtot, out lcImgSig, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadOrderTotals - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadordtot); 
    
         if (pdsoeioloadordtot.ttbloeioloadordtot.Count > 0)
         {
            result.oeioloadordtot = Oeioloadordtot.BuildOeioloadordtotFromRow(pdsoeioloadordtot.ttbloeioloadordtot[0]);
         }
                    
         result.lcImgSig = lcImgSig;
          
         return result;
          
      }

      public AsoeinquiryOEIOLoadOrderTaxesResponseAPI OEIOLoadOrderTaxes(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeinquiryOEIOLoadOrderTaxesResponseAPI();
         
         var pdsoeioloadordtax = new pdsoeioloadordtaxDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadOrderTaxes - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadOrderTaxes(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeioloadordtax, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadOrderTaxes - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadordtax); 
    
         if (pdsoeioloadordtax.ttbloeioloadordtax.Count > 0)
         {
            result.oeioloadordtax = Oeioloadordtax.BuildOeioloadordtaxFromRow(pdsoeioloadordtax.ttbloeioloadordtax[0]);
         }
                    
         foreach (DataRow row in pdsoeioloadordtax.ttbloeioloadordtaxar)
         {
            result.oeioloadordtaxar.Add(Oeioloadordtaxar.BuildOeioloadordtaxarFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Oeioloadordhist> OEIOLoadOrderHistory(int iOrderNo, int iOrderSuf)
      {   
         var results = new List<Oeioloadordhist>();
         
         var pdsoeioloadordhist = new pdsoeioloadordhistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadOrderHistory - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadOrderHistory(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeioloadordhist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadOrderHistory - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadordhist); 
    
            foreach (DataRow row in pdsoeioloadordhist.ttbloeioloadordhist)
            {
                results.Add(Oeioloadordhist.BuildOeioloadordhistFromRow(row));
            }
            return results;
        
      }

      public Oeioloadlinetabsresults OEIOLoadLineTabs(Oeioloadlinetabscriteria oeioloadlinetabscriteria)
      {   
         var result = new Oeioloadlinetabsresults();
         
         var pdsoeioloadlinetabs = new pdsoeioloadlinetabsDataSet();
            
         DataRow ttbloeioloadlinetabscriteriaCriteria = pdsoeioloadlinetabs.ttbloeioloadlinetabscriteria.NewttbloeioloadlinetabscriteriaRow();
         Oeioloadlinetabscriteria.UpdateRowFromOeioloadlinetabscriteria(ref ttbloeioloadlinetabscriteriaCriteria, oeioloadlinetabscriteria);
         pdsoeioloadlinetabs.ttbloeioloadlinetabscriteria.AddttbloeioloadlinetabscriteriaRow((pdsoeioloadlinetabsDataSet.ttbloeioloadlinetabscriteriaRow)ttbloeioloadlinetabscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOLoadLineTabs - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOLoadLineTabs(ref pdsContext, ref pdsoeioloadlinetabs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOLoadLineTabs - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeioloadlinetabs); 
    
         if (pdsoeioloadlinetabs.ttbloeioloadlinetabsresults.Count > 0) 
         { 
             result = Oeioloadlinetabsresults.BuildOeioloadlinetabsresultsFromRow(pdsoeioloadlinetabs.ttbloeioloadlinetabsresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeiolineextresults> OEIOExtline(Oeiolineextcriteria oeiolineextcriteria)
      {   
         var results = new List<Oeiolineextresults>();
         
         var pdsoeiolineext = new pdsoeiolineextDataSet();
            
         DataRow ttbloeiolineextcriteriaCriteria = pdsoeiolineext.ttbloeiolineextcriteria.NewttbloeiolineextcriteriaRow();
         Oeiolineextcriteria.UpdateRowFromOeiolineextcriteria(ref ttbloeiolineextcriteriaCriteria, oeiolineextcriteria);
         pdsoeiolineext.ttbloeiolineextcriteria.AddttbloeiolineextcriteriaRow((pdsoeiolineextDataSet.ttbloeiolineextcriteriaRow)ttbloeiolineextcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIOExtline - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIOExtline(ref pdsContext, ref pdsoeiolineext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIOExtline - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiolineext); 
    
            foreach (DataRow row in pdsoeiolineext.ttbloeiolineextresults)
            {
                results.Add(Oeiolineextresults.BuildOeiolineextresultsFromRow(row));
            }
            return results;
        
      }

      public Oessreupdate OESSREAdd(Oessreupdate oessreupdate)
      {   
         var result = new Oessreupdate();
         
         var pdsoessreupdate = new pdsoessreupdateDataSet();
            
         DataRow ttbloessreupdateCriteria = pdsoessreupdate.ttbloessreupdate.NewttbloessreupdateRow();
         Oessreupdate.UpdateRowFromOessreupdate(ref ttbloessreupdateCriteria, oessreupdate);
         pdsoessreupdate.ttbloessreupdate.AddttbloessreupdateRow((pdsoessreupdateDataSet.ttbloessreupdateRow)ttbloessreupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESSREAdd - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OESSREAdd(ref pdsContext, ref pdsoessreupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESSREAdd - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoessreupdate); 
    
         if (pdsoessreupdate.ttbloessreupdate.Count > 0) 
         { 
             result = Oessreupdate.BuildOessreupdateFromRow(pdsoessreupdate.ttbloessreupdate[0]);
         } 
              
          
         return result;
          
      }

      public Oessreupdate OESSREChange(Oessreupdate oessreupdate)
      {   
         var result = new Oessreupdate();
         
         var pdsoessreupdate = new pdsoessreupdateDataSet();
            
         DataRow ttbloessreupdateCriteria = pdsoessreupdate.ttbloessreupdate.NewttbloessreupdateRow();
         Oessreupdate.UpdateRowFromOessreupdate(ref ttbloessreupdateCriteria, oessreupdate);
         pdsoessreupdate.ttbloessreupdate.AddttbloessreupdateRow((pdsoessreupdateDataSet.ttbloessreupdateRow)ttbloessreupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESSREChange - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OESSREChange(ref pdsContext, ref pdsoessreupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESSREChange - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoessreupdate); 
    
         if (pdsoessreupdate.ttbloessreupdate.Count > 0) 
         { 
             result = Oessreupdate.BuildOessreupdateFromRow(pdsoessreupdate.ttbloessreupdate[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oessreupdate> OESSREDelete(IEnumerable<Oessreupdate> oessreupdate)
      {   
         var results = new List<Oessreupdate>();
         
         var pdsoessreupdate = new pdsoessreupdateDataSet();
            
         foreach (var obj in oessreupdate)
         {
             DataRow row = pdsoessreupdate.ttbloessreupdate.NewttbloessreupdateRow();
             Oessreupdate.UpdateRowFromOessreupdate(ref row, obj);
             pdsoessreupdate.ttbloessreupdate.AddttbloessreupdateRow((pdsoessreupdateDataSet.ttbloessreupdateRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESSREDelete - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OESSREDelete(ref pdsContext, ref pdsoessreupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESSREDelete - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoessreupdate); 
    
            foreach (DataRow row in pdsoessreupdate.ttbloessreupdate)
            {
                results.Add(Oessreupdate.BuildOessreupdateFromRow(row));
            }
            return results;
        
      }

      public Oessreupdate OESSRERetrieve(Oessreupdate oessreupdate)
      {   
         var result = new Oessreupdate();
         
         var pdsoessreupdate = new pdsoessreupdateDataSet();
            
         DataRow ttbloessreupdateCriteria = pdsoessreupdate.ttbloessreupdate.NewttbloessreupdateRow();
         Oessreupdate.UpdateRowFromOessreupdate(ref ttbloessreupdateCriteria, oessreupdate);
         pdsoessreupdate.ttbloessreupdate.AddttbloessreupdateRow((pdsoessreupdateDataSet.ttbloessreupdateRow)ttbloessreupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESSRERetrieve - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OESSRERetrieve(ref pdsContext, ref pdsoessreupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESSRERetrieve - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoessreupdate); 
    
         if (pdsoessreupdate.ttbloessreupdate.Count > 0) 
         { 
             result = Oessreupdate.BuildOessreupdateFromRow(pdsoessreupdate.ttbloessreupdate[0]);
         } 
              
          
         return result;
          
      }

      public AsoeinquiryOESSRESearchResponseAPI OESSRESearch(Oessresearchcriteria oessresearchcriteria)
      {   
         var result = new AsoeinquiryOESSRESearchResponseAPI();
         
         var pdsoessresearch = new pdsoessresearchDataSet();
            
         DataRow ttbloessresearchcriteriaCriteria = pdsoessresearch.ttbloessresearchcriteria.NewttbloessresearchcriteriaRow();
         Oessresearchcriteria.UpdateRowFromOessresearchcriteria(ref ttbloessresearchcriteriaCriteria, oessresearchcriteria);
         pdsoessresearch.ttbloessresearchcriteria.AddttbloessresearchcriteriaRow((pdsoessresearchDataSet.ttbloessresearchcriteriaRow)ttbloessresearchcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESSRESearch - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OESSRESearch(ref pdsContext, ref pdsoessresearch, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESSRESearch - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoessresearch); 
    
         foreach (DataRow row in pdsoessresearch.ttbloessresearchresults)
         {
            result.oessresearchresults.Add(Oessresearchresults.BuildOessresearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsoeinquiryOEIFSearchResponseAPI OEIFSearch(Oeifsearchcriteria oeifsearchcriteria)
      {   
         var result = new AsoeinquiryOEIFSearchResponseAPI();
         
         var pdsoeifsearch = new pdsoeifsearchDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeifsearchcriteriaCriteria = pdsoeifsearch.ttbloeifsearchcriteria.NewttbloeifsearchcriteriaRow();
         Oeifsearchcriteria.UpdateRowFromOeifsearchcriteria(ref ttbloeifsearchcriteriaCriteria, oeifsearchcriteria);
         pdsoeifsearch.ttbloeifsearchcriteria.AddttbloeifsearchcriteriaRow((pdsoeifsearchDataSet.ttbloeifsearchcriteriaRow)ttbloeifsearchcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIFSearch - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIFSearch(ref pdsContext, ref pdsoeifsearch, out pdsmessaging, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIFSearch - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeifsearch); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeifsearch.ttbloeifsearchresults)
         {
            result.oeifsearchresults.Add(Oeifsearchresults.BuildOeifsearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsoeinquiryOEIFUpdateResponseAPI OEIFUpdate(AsoeinquiryOEIFUpdateRequestAPI AsoeinquiryOEIFUpdateRequestAPI)
      {   
         var result = new AsoeinquiryOEIFUpdateResponseAPI();
         
         var pdsoeifsearch = new pdsoeifsearchDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeifsearchcriteriaRow = pdsoeifsearch.ttbloeifsearchcriteria.NewttbloeifsearchcriteriaRow();
         Oeifsearchcriteria.UpdateRowFromOeifsearchcriteria(ref ttbloeifsearchcriteriaRow, AsoeinquiryOEIFUpdateRequestAPI.oeifsearchcriteria);
         pdsoeifsearch.ttbloeifsearchcriteria.AddttbloeifsearchcriteriaRow((pdsoeifsearchDataSet.ttbloeifsearchcriteriaRow)ttbloeifsearchcriteriaRow);
          
         foreach (var obj in AsoeinquiryOEIFUpdateRequestAPI.oeifsearchresults)
         {
            DataRow ttbloeifsearchresultsRow = pdsoeifsearch.ttbloeifsearchresults.NewttbloeifsearchresultsRow();
            Oeifsearchresults.UpdateRowFromOeifsearchresults(ref ttbloeifsearchresultsRow, obj);
            pdsoeifsearch.ttbloeifsearchresults.AddttbloeifsearchresultsRow((pdsoeifsearchDataSet.ttbloeifsearchresultsRow)ttbloeifsearchresultsRow);
         }
          
         
         NLogLoggerP.Trace("OEIFUpdate - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIFUpdate(ref pdsContext, ref pdsoeifsearch, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIFUpdate - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeifsearch); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeifsearch.ttbloeifsearchresults)
         {
            result.oeifsearchresults.Add(Oeifsearchresults.BuildOeifsearchresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Oeiftiedorders> OEIFTiedOrders(int pvOrderno, int pvOrdersuf)
      {   
         var results = new List<Oeiftiedorders>();
         
         var pdsoeiftiedorders = new pdsoeiftiedordersDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEIFTiedOrders - Asoeinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeinquiryproxy = this.proxyAppObject.CreatePO_asoeinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeinquiryproxy.OEIFTiedOrders(ref pdsContext,  pvOrderno,  pvOrdersuf, out pdsoeiftiedorders, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEIFTiedOrders - Asoeinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiftiedorders); 
    
            foreach (DataRow row in pdsoeiftiedorders.ttbloeiftiedorders)
            {
                results.Add(Oeiftiedorders.BuildOeiftiedordersFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  