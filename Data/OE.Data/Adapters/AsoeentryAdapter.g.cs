//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsoefulfillmentload;
   using Models.Pdsmessaging;
   using Models.Pdsoefulfillmentsubmit;
   using Models.Pdsoefulfillmentaddwhse;
   using Models.Pdsoesignature;
   using Models.Pdsfrtrateshopload;
   using Models.Pdskitdetailsubs;
   using Models.Pdsoeblanket;
   using Models.Pdsoeblanketcheckshipto;
   using Models.Pdsoeblanketupdate;
   using Models.Pdsoeblanketdelete;
   using Models.Pdsoeblanketrelease;
   using Models.Pdsoeblanketflushdates;
   using Models.Pdsoeblanketbanner;
   using Models.Pdsoeblanketheader;
   using Models.Pdsoeblanketlines;
   using Models.Pdsoeblanketupdbyrelease;
   using Models.Pdsoeersdetailline;
   using Models.Pdsicentryserials;
   using Models.Pdsicentrylots;
   using Models.Pdsoeesdetailclosecriteria;
   using Models.Pdsoeesdetailhdrload;
   using Models.Pdsoeesdetailhdrcommon;
   using Models.Pdsoeaddons;
   using Models.Pdsoeesdetailline;
   using Models.Pdsoeesdetaillineextend;
   using Models.Pdsoeesloadorderlist;
   using Models.Pdsoeesshipordermultiple;
   using Models.Pdswlstatus;
   using Models.Pdsoeetprintloadcriteria;
   using Models.Pdsoeetprintglobals;
   using Models.Pdsoeetprint;
   using Models.Pdsprintersettings;
   using Models.Pdsoeetprintlaunchcriteria;
   using Models.Pdsoeetautoprintchk;
   using Models.Pdsoeeclines;
   using Models.Pdsoeeccriteria;
   using Models.Pdsoeetdupcustpo;
   using Models.Pdsoegetprodtierslist;
   using Models.Pdsoeercriteria;
   using Models.Pdsoeerdetail;
   using Models.Pdsoeeraddrselect;
   using Models.Pdsoeesdetaillineaftertally;
   using Models.Pdsmanrebsearch;
   using Models.Pdsmanrebattach;
   using Models.Pdsmanrebcreate;
   using Models.Pdsmanrebremove;
   using Models.Pdsemailforshipnotecriteria;
   using Models.Pdsemailforshipnotice;
   using Models.Pdsoesfsearch;
   using Models.Pdsoesfaddchg;
   using Models.Pdsoesflist;
   using Models.Complex;

   public partial class AsoeentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private OEProxyAppObject proxyAppObject;
      
      public AsoeentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsoeentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsoeentryOEFulfillmentSaveResponseAPI OEFulfillmentSave(AsoeentryOEFulfillmentSaveRequestAPI AsoeentryOEFulfillmentSaveRequestAPI)
      {   
         var result = new AsoeentryOEFulfillmentSaveResponseAPI();
         
         var pdsoefulfillmentload = new pdsoefulfillmentloadDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloefulfillmentcriteriaRow = pdsoefulfillmentload.ttbloefulfillmentcriteria.NewttbloefulfillmentcriteriaRow();
         Oefulfillmentcriteria.UpdateRowFromOefulfillmentcriteria(ref ttbloefulfillmentcriteriaRow, AsoeentryOEFulfillmentSaveRequestAPI.oefulfillmentcriteria);
         pdsoefulfillmentload.ttbloefulfillmentcriteria.AddttbloefulfillmentcriteriaRow((pdsoefulfillmentloadDataSet.ttbloefulfillmentcriteriaRow)ttbloefulfillmentcriteriaRow);
          
         foreach (var obj in AsoeentryOEFulfillmentSaveRequestAPI.oefulfillmentresults)
         {
            DataRow ttbloefulfillmentresultsRow = pdsoefulfillmentload.ttbloefulfillmentresults.NewttbloefulfillmentresultsRow();
            Oefulfillmentresults.UpdateRowFromOefulfillmentresults(ref ttbloefulfillmentresultsRow, obj);
            pdsoefulfillmentload.ttbloefulfillmentresults.AddttbloefulfillmentresultsRow((pdsoefulfillmentloadDataSet.ttbloefulfillmentresultsRow)ttbloefulfillmentresultsRow);
         }
          
         
         NLogLoggerP.Trace("OEFulfillmentSave - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEFulfillmentSave(ref pdsContext, ref pdsoefulfillmentload, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEFulfillmentSave - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoefulfillmentload); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoefulfillmentload.ttbloefulfillmentcriteria.Count > 0)
         {
            result.oefulfillmentcriteria = Oefulfillmentcriteria.BuildOefulfillmentcriteriaFromRow(pdsoefulfillmentload.ttbloefulfillmentcriteria[0]);
         }
                    
         foreach (DataRow row in pdsoefulfillmentload.ttbloefulfillmentresults)
         {
            result.oefulfillmentresults.Add(Oefulfillmentresults.BuildOefulfillmentresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> OEFulfillmentSubmit(Oefulfillmentsubmit oefulfillmentsubmit)
      {   
         var results = new List<Messaging>();
         
         var pdsoefulfillmentsubmit = new pdsoefulfillmentsubmitDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloefulfillmentsubmitCriteria = pdsoefulfillmentsubmit.ttbloefulfillmentsubmit.NewttbloefulfillmentsubmitRow();
         Oefulfillmentsubmit.UpdateRowFromOefulfillmentsubmit(ref ttbloefulfillmentsubmitCriteria, oefulfillmentsubmit);
         pdsoefulfillmentsubmit.ttbloefulfillmentsubmit.AddttbloefulfillmentsubmitRow((pdsoefulfillmentsubmitDataSet.ttbloefulfillmentsubmitRow)ttbloefulfillmentsubmitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEFulfillmentSubmit - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEFulfillmentSubmit(ref pdsContext,  pdsoefulfillmentsubmit, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEFulfillmentSubmit - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoefulfillmentsubmit); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> OEFulfillmentAddWhse(Oefulfillmentaddwhse oefulfillmentaddwhse)
      {   
         var results = new List<Messaging>();
         
         var pdsoefulfillmentaddwhse = new pdsoefulfillmentaddwhseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloefulfillmentaddwhseCriteria = pdsoefulfillmentaddwhse.ttbloefulfillmentaddwhse.NewttbloefulfillmentaddwhseRow();
         Oefulfillmentaddwhse.UpdateRowFromOefulfillmentaddwhse(ref ttbloefulfillmentaddwhseCriteria, oefulfillmentaddwhse);
         pdsoefulfillmentaddwhse.ttbloefulfillmentaddwhse.AddttbloefulfillmentaddwhseRow((pdsoefulfillmentaddwhseDataSet.ttbloefulfillmentaddwhseRow)ttbloefulfillmentaddwhseCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEFulfillmentAddWhse - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEFulfillmentAddWhse(ref pdsContext,  pdsoefulfillmentaddwhse, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEFulfillmentAddWhse - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoefulfillmentaddwhse); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Oesignature OESignatureSave(Oesignature oesignature)
      {   
         var result = new Oesignature();
         
         var pdsoesignature = new pdsoesignatureDataSet();
            
         DataRow ttbloesignatureCriteria = pdsoesignature.ttbloesignature.NewttbloesignatureRow();
         Oesignature.UpdateRowFromOesignature(ref ttbloesignatureCriteria, oesignature);
         pdsoesignature.ttbloesignature.AddttbloesignatureRow((pdsoesignatureDataSet.ttbloesignatureRow)ttbloesignatureCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESignatureSave - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OESignatureSave(ref pdsContext, ref pdsoesignature, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESignatureSave - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesignature); 
    
         if (pdsoesignature.ttbloesignature.Count > 0) 
         { 
             result = Oesignature.BuildOesignatureFromRow(pdsoesignature.ttbloesignature[0]);
         } 
              
          
         return result;
          
      }

      public AsoeentryFrtRateShopLoadResponseAPI FrtRateShopLoad(int iOrderNo, int iOrderSuf, string cOurProc, string cUserField)
      {   
         var result = new AsoeentryFrtRateShopLoadResponseAPI();
         
         var pdsfrtrateshopload = new pdsfrtrateshoploadDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FrtRateShopLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.FrtRateShopLoad(ref pdsContext,  iOrderNo,  iOrderSuf,  cOurProc,  cUserField, out pdsfrtrateshopload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FrtRateShopLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsfrtrateshopload); 
    
         foreach (DataRow row in pdsfrtrateshopload.ttblfrtrateshoploadlist)
         {
            result.frtrateshoploadlist.Add(Frtrateshoploadlist.BuildFrtrateshoploadlistFromRow(row));
         }     
         if (pdsfrtrateshopload.ttblfrtrateshoploadsingle.Count > 0)
         {
            result.frtrateshoploadsingle = Frtrateshoploadsingle.BuildFrtrateshoploadsingleFromRow(pdsfrtrateshopload.ttblfrtrateshoploadsingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Frtrateshoploadlist> FrtRateShopRecalc(Frtrateshoploadsingle frtrateshoploadsingle)
      {   
         var results = new List<Frtrateshoploadlist>();
         
         var pdsfrtrateshopload = new pdsfrtrateshoploadDataSet();
            
         DataRow ttblfrtrateshoploadsingleCriteria = pdsfrtrateshopload.ttblfrtrateshoploadsingle.NewttblfrtrateshoploadsingleRow();
         Frtrateshoploadsingle.UpdateRowFromFrtrateshoploadsingle(ref ttblfrtrateshoploadsingleCriteria, frtrateshoploadsingle);
         pdsfrtrateshopload.ttblfrtrateshoploadsingle.AddttblfrtrateshoploadsingleRow((pdsfrtrateshoploadDataSet.ttblfrtrateshoploadsingleRow)ttblfrtrateshoploadsingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FrtRateShopRecalc - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.FrtRateShopRecalc(ref pdsContext, ref pdsfrtrateshopload, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FrtRateShopRecalc - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsfrtrateshopload); 
    
            foreach (DataRow row in pdsfrtrateshopload.ttblfrtrateshoploadlist)
            {
                results.Add(Frtrateshoploadlist.BuildFrtrateshoploadlistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Kitdetailsubsresults> KitDetailSubsLaunch(Kitdetailsubscriteria kitdetailsubscriteria)
      {   
         var results = new List<Kitdetailsubsresults>();
         
         var pdskitdetailsubs = new pdskitdetailsubsDataSet();
            
         DataRow ttblkitdetailsubscriteriaCriteria = pdskitdetailsubs.ttblkitdetailsubscriteria.NewttblkitdetailsubscriteriaRow();
         Kitdetailsubscriteria.UpdateRowFromKitdetailsubscriteria(ref ttblkitdetailsubscriteriaCriteria, kitdetailsubscriteria);
         pdskitdetailsubs.ttblkitdetailsubscriteria.AddttblkitdetailsubscriteriaRow((pdskitdetailsubsDataSet.ttblkitdetailsubscriteriaRow)ttblkitdetailsubscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("KitDetailSubsLaunch - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.KitDetailSubsLaunch(ref pdsContext, ref pdskitdetailsubs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("KitDetailSubsLaunch - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdskitdetailsubs); 
    
            foreach (DataRow row in pdskitdetailsubs.ttblkitdetailsubsresults)
            {
                results.Add(Kitdetailsubsresults.BuildKitdetailsubsresultsFromRow(row));
            }
            return results;
        
      }

      public void OEDCSaveRouteHold(int iOrderNo, int iOrderSuf, bool lRouteHold)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEDCSaveRouteHold - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEDCSaveRouteHold(ref pdsContext,  iOrderNo,  iOrderSuf,  lRouteHold, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEDCSaveRouteHold - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AsoeentryOEERBValidateBlanketOrderResponseAPI OEERBValidateBlanketOrder(Oeblanketcriteria oeblanketcriteria)
      {   
         var result = new AsoeentryOEERBValidateBlanketOrderResponseAPI();
         
         var pdsoeblanket = new pdsoeblanketDataSet();
            
         DataRow ttbloeblanketcriteriaCriteria = pdsoeblanket.ttbloeblanketcriteria.NewttbloeblanketcriteriaRow();
         Oeblanketcriteria.UpdateRowFromOeblanketcriteria(ref ttbloeblanketcriteriaCriteria, oeblanketcriteria);
         pdsoeblanket.ttbloeblanketcriteria.AddttbloeblanketcriteriaRow((pdsoeblanketDataSet.ttbloeblanketcriteriaRow)ttbloeblanketcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBValidateBlanketOrder - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBValidateBlanketOrder(ref pdsContext, ref pdsoeblanket, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBValidateBlanketOrder - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanket); 
    
         foreach (DataRow row in pdsoeblanket.ttbloeblanketresults)
         {
            result.oeblanketresults.Add(Oeblanketresults.BuildOeblanketresultsFromRow(row));
         }     
         if (pdsoeblanket.ttbloeblanketvalidatesingle.Count > 0)
         {
            result.oeblanketvalidatesingle = Oeblanketvalidatesingle.BuildOeblanketvalidatesingleFromRow(pdsoeblanket.ttbloeblanketvalidatesingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEERBBuildBlanketTempTableResponseAPI OEERBBuildBlanketTempTable(Oeblanketcriteria oeblanketcriteria)
      {   
         var result = new AsoeentryOEERBBuildBlanketTempTableResponseAPI();
         
         var pdsoeblanket = new pdsoeblanketDataSet();
            
         DataRow ttbloeblanketcriteriaCriteria = pdsoeblanket.ttbloeblanketcriteria.NewttbloeblanketcriteriaRow();
         Oeblanketcriteria.UpdateRowFromOeblanketcriteria(ref ttbloeblanketcriteriaCriteria, oeblanketcriteria);
         pdsoeblanket.ttbloeblanketcriteria.AddttbloeblanketcriteriaRow((pdsoeblanketDataSet.ttbloeblanketcriteriaRow)ttbloeblanketcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBBuildBlanketTempTable - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBBuildBlanketTempTable(ref pdsContext, ref pdsoeblanket, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBBuildBlanketTempTable - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanket); 
    
         foreach (DataRow row in pdsoeblanket.ttbloeblanketresults)
         {
            result.oeblanketresults.Add(Oeblanketresults.BuildOeblanketresultsFromRow(row));
         }     
         if (pdsoeblanket.ttbloeblanketvalidatesingle.Count > 0)
         {
            result.oeblanketvalidatesingle = Oeblanketvalidatesingle.BuildOeblanketvalidatesingleFromRow(pdsoeblanket.ttbloeblanketvalidatesingle[0]);
         }
                    
          
         return result;
          
      }

      public Oeblanketcheckshiptosingle OEERBCheckChangeOfShipTo(Oeblanketcheckshiptocriteria oeblanketcheckshiptocriteria)
      {   
         var result = new Oeblanketcheckshiptosingle();
         
         var pdsoeblanketcheckshipto = new pdsoeblanketcheckshiptoDataSet();
            
         DataRow ttbloeblanketcheckshiptocriteriaCriteria = pdsoeblanketcheckshipto.ttbloeblanketcheckshiptocriteria.NewttbloeblanketcheckshiptocriteriaRow();
         Oeblanketcheckshiptocriteria.UpdateRowFromOeblanketcheckshiptocriteria(ref ttbloeblanketcheckshiptocriteriaCriteria, oeblanketcheckshiptocriteria);
         pdsoeblanketcheckshipto.ttbloeblanketcheckshiptocriteria.AddttbloeblanketcheckshiptocriteriaRow((pdsoeblanketcheckshiptoDataSet.ttbloeblanketcheckshiptocriteriaRow)ttbloeblanketcheckshiptocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBCheckChangeOfShipTo - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBCheckChangeOfShipTo(ref pdsContext, ref pdsoeblanketcheckshipto, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBCheckChangeOfShipTo - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketcheckshipto); 
    
         if (pdsoeblanketcheckshipto.ttbloeblanketcheckshiptosingle.Count > 0) 
         { 
             result = Oeblanketcheckshiptosingle.BuildOeblanketcheckshiptosingleFromRow(pdsoeblanketcheckshipto.ttbloeblanketcheckshiptosingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketupdateresults OEERBUpdateExistingOrder(Oeblanketupdatecriteria oeblanketupdatecriteria)
      {   
         var result = new Oeblanketupdateresults();
         
         var pdsoeblanketupdate = new pdsoeblanketupdateDataSet();
            
         DataRow ttbloeblanketupdatecriteriaCriteria = pdsoeblanketupdate.ttbloeblanketupdatecriteria.NewttbloeblanketupdatecriteriaRow();
         Oeblanketupdatecriteria.UpdateRowFromOeblanketupdatecriteria(ref ttbloeblanketupdatecriteriaCriteria, oeblanketupdatecriteria);
         pdsoeblanketupdate.ttbloeblanketupdatecriteria.AddttbloeblanketupdatecriteriaRow((pdsoeblanketupdateDataSet.ttbloeblanketupdatecriteriaRow)ttbloeblanketupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBUpdateExistingOrder - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBUpdateExistingOrder(ref pdsContext, ref pdsoeblanketupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBUpdateExistingOrder - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketupdate); 
    
         if (pdsoeblanketupdate.ttbloeblanketupdateresults.Count > 0) 
         { 
             result = Oeblanketupdateresults.BuildOeblanketupdateresultsFromRow(pdsoeblanketupdate.ttbloeblanketupdateresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeblanketdeleteresults> OEERBDeleteBlanketReleases(AsoeentryOEERBDeleteBlanketReleasesRequestAPI AsoeentryOEERBDeleteBlanketReleasesRequestAPI)
      {   
         var results = new List<Oeblanketdeleteresults>();
         
         var pdsoeblanketdelete = new pdsoeblanketdeleteDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketdeletecriteriaRow = pdsoeblanketdelete.ttbloeblanketdeletecriteria.NewttbloeblanketdeletecriteriaRow();
         Oeblanketdeletecriteria.UpdateRowFromOeblanketdeletecriteria(ref ttbloeblanketdeletecriteriaRow, AsoeentryOEERBDeleteBlanketReleasesRequestAPI.oeblanketdeletecriteria);
         pdsoeblanketdelete.ttbloeblanketdeletecriteria.AddttbloeblanketdeletecriteriaRow((pdsoeblanketdeleteDataSet.ttbloeblanketdeletecriteriaRow)ttbloeblanketdeletecriteriaRow);
          
         foreach (var obj in AsoeentryOEERBDeleteBlanketReleasesRequestAPI.oeblanketdeleteorders)
         {
            DataRow ttbloeblanketdeleteordersRow = pdsoeblanketdelete.ttbloeblanketdeleteorders.NewttbloeblanketdeleteordersRow();
            Oeblanketdeleteorders.UpdateRowFromOeblanketdeleteorders(ref ttbloeblanketdeleteordersRow, obj);
            pdsoeblanketdelete.ttbloeblanketdeleteorders.AddttbloeblanketdeleteordersRow((pdsoeblanketdeleteDataSet.ttbloeblanketdeleteordersRow)ttbloeblanketdeleteordersRow);
         }
          
         
         NLogLoggerP.Trace("OEERBDeleteBlanketReleases - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBDeleteBlanketReleases(ref pdsContext, ref pdsoeblanketdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBDeleteBlanketReleases - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketdelete); 
    
            foreach (DataRow row in pdsoeblanketdelete.ttbloeblanketdeleteresults)
            {
                results.Add(Oeblanketdeleteresults.BuildOeblanketdeleteresultsFromRow(row));
            }
            return results;
        
      }

      public Oeblanketreleasesingle OEERBSetupScreenForNextRelease(Oeblanketreleasecriteria oeblanketreleasecriteria)
      {   
         var result = new Oeblanketreleasesingle();
         
         var pdsoeblanketrelease = new pdsoeblanketreleaseDataSet();
            
         DataRow ttbloeblanketreleasecriteriaCriteria = pdsoeblanketrelease.ttbloeblanketreleasecriteria.NewttbloeblanketreleasecriteriaRow();
         Oeblanketreleasecriteria.UpdateRowFromOeblanketreleasecriteria(ref ttbloeblanketreleasecriteriaCriteria, oeblanketreleasecriteria);
         pdsoeblanketrelease.ttbloeblanketreleasecriteria.AddttbloeblanketreleasecriteriaRow((pdsoeblanketreleaseDataSet.ttbloeblanketreleasecriteriaRow)ttbloeblanketreleasecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBSetupScreenForNextRelease - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBSetupScreenForNextRelease(ref pdsContext, ref pdsoeblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBSetupScreenForNextRelease - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketrelease); 
    
         if (pdsoeblanketrelease.ttbloeblanketreleasesingle.Count > 0) 
         { 
             result = Oeblanketreleasesingle.BuildOeblanketreleasesingleFromRow(pdsoeblanketrelease.ttbloeblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public AsoeentryOEERBCreateNewBlanketReleaseResponseAPI OEERBCreateNewBlanketRelease(AsoeentryOEERBCreateNewBlanketReleaseRequestAPI AsoeentryOEERBCreateNewBlanketReleaseRequestAPI)
      {   
         var result = new AsoeentryOEERBCreateNewBlanketReleaseResponseAPI();
         
         var pdsoeblanketrelease = new pdsoeblanketreleaseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketreleasecriteriaRow = pdsoeblanketrelease.ttbloeblanketreleasecriteria.NewttbloeblanketreleasecriteriaRow();
         Oeblanketreleasecriteria.UpdateRowFromOeblanketreleasecriteria(ref ttbloeblanketreleasecriteriaRow, AsoeentryOEERBCreateNewBlanketReleaseRequestAPI.oeblanketreleasecriteria);
         pdsoeblanketrelease.ttbloeblanketreleasecriteria.AddttbloeblanketreleasecriteriaRow((pdsoeblanketreleaseDataSet.ttbloeblanketreleasecriteriaRow)ttbloeblanketreleasecriteriaRow);
          
         DataRow ttbloeblanketreleasesingleRow = pdsoeblanketrelease.ttbloeblanketreleasesingle.NewttbloeblanketreleasesingleRow();
         Oeblanketreleasesingle.UpdateRowFromOeblanketreleasesingle(ref ttbloeblanketreleasesingleRow, AsoeentryOEERBCreateNewBlanketReleaseRequestAPI.oeblanketreleasesingle);
         pdsoeblanketrelease.ttbloeblanketreleasesingle.AddttbloeblanketreleasesingleRow((pdsoeblanketreleaseDataSet.ttbloeblanketreleasesingleRow)ttbloeblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("OEERBCreateNewBlanketRelease - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBCreateNewBlanketRelease(ref pdsContext, ref pdsoeblanketrelease, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBCreateNewBlanketRelease - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketrelease); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeblanketrelease.ttbloeblanketreleasesingle.Count > 0)
         {
            result.oeblanketreleasesingle = Oeblanketreleasesingle.BuildOeblanketreleasesingleFromRow(pdsoeblanketrelease.ttbloeblanketreleasesingle[0]);
         }
                    
          
         return result;
          
      }

      public Oeblanketreleasesingle OEERBDisplayShipToInformation(AsoeentryOEERBDisplayShipToInformationRequestAPI AsoeentryOEERBDisplayShipToInformationRequestAPI)
      {   
         var result = new Oeblanketreleasesingle();
         
         var pdsoeblanketrelease = new pdsoeblanketreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketreleasecriteriaRow = pdsoeblanketrelease.ttbloeblanketreleasecriteria.NewttbloeblanketreleasecriteriaRow();
         Oeblanketreleasecriteria.UpdateRowFromOeblanketreleasecriteria(ref ttbloeblanketreleasecriteriaRow, AsoeentryOEERBDisplayShipToInformationRequestAPI.oeblanketreleasecriteria);
         pdsoeblanketrelease.ttbloeblanketreleasecriteria.AddttbloeblanketreleasecriteriaRow((pdsoeblanketreleaseDataSet.ttbloeblanketreleasecriteriaRow)ttbloeblanketreleasecriteriaRow);
          
         DataRow ttbloeblanketreleasesingleRow = pdsoeblanketrelease.ttbloeblanketreleasesingle.NewttbloeblanketreleasesingleRow();
         Oeblanketreleasesingle.UpdateRowFromOeblanketreleasesingle(ref ttbloeblanketreleasesingleRow, AsoeentryOEERBDisplayShipToInformationRequestAPI.oeblanketreleasesingle);
         pdsoeblanketrelease.ttbloeblanketreleasesingle.AddttbloeblanketreleasesingleRow((pdsoeblanketreleaseDataSet.ttbloeblanketreleasesingleRow)ttbloeblanketreleasesingleRow);
          
         
         NLogLoggerP.Trace("OEERBDisplayShipToInformation - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBDisplayShipToInformation(ref pdsContext, ref pdsoeblanketrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBDisplayShipToInformation - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketrelease); 
    
         if (pdsoeblanketrelease.ttbloeblanketreleasesingle.Count > 0) 
         { 
             result = Oeblanketreleasesingle.BuildOeblanketreleasesingleFromRow(pdsoeblanketrelease.ttbloeblanketreleasesingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketflushdatessingle OEERBFlushDatesValidate(Oeblanketflushdatessingle oeblanketflushdatessingle)
      {   
         var result = new Oeblanketflushdatessingle();
         
         var pdsoeblanketflushdates = new pdsoeblanketflushdatesDataSet();
            
         DataRow ttbloeblanketflushdatessingleCriteria = pdsoeblanketflushdates.ttbloeblanketflushdatessingle.NewttbloeblanketflushdatessingleRow();
         Oeblanketflushdatessingle.UpdateRowFromOeblanketflushdatessingle(ref ttbloeblanketflushdatessingleCriteria, oeblanketflushdatessingle);
         pdsoeblanketflushdates.ttbloeblanketflushdatessingle.AddttbloeblanketflushdatessingleRow((pdsoeblanketflushdatesDataSet.ttbloeblanketflushdatessingleRow)ttbloeblanketflushdatessingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBFlushDatesValidate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBFlushDatesValidate(ref pdsContext, ref pdsoeblanketflushdates, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBFlushDatesValidate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketflushdates); 
    
         if (pdsoeblanketflushdates.ttbloeblanketflushdatessingle.Count > 0) 
         { 
             result = Oeblanketflushdatessingle.BuildOeblanketflushdatessingleFromRow(pdsoeblanketflushdates.ttbloeblanketflushdatessingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketflushdatessingle OEERBFlushOrderDates(Oeblanketflushdatessingle oeblanketflushdatessingle)
      {   
         var result = new Oeblanketflushdatessingle();
         
         var pdsoeblanketflushdates = new pdsoeblanketflushdatesDataSet();
            
         DataRow ttbloeblanketflushdatessingleCriteria = pdsoeblanketflushdates.ttbloeblanketflushdatessingle.NewttbloeblanketflushdatessingleRow();
         Oeblanketflushdatessingle.UpdateRowFromOeblanketflushdatessingle(ref ttbloeblanketflushdatessingleCriteria, oeblanketflushdatessingle);
         pdsoeblanketflushdates.ttbloeblanketflushdatessingle.AddttbloeblanketflushdatessingleRow((pdsoeblanketflushdatesDataSet.ttbloeblanketflushdatessingleRow)ttbloeblanketflushdatessingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBFlushOrderDates - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBFlushOrderDates(ref pdsContext, ref pdsoeblanketflushdates, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBFlushOrderDates - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketflushdates); 
    
         if (pdsoeblanketflushdates.ttbloeblanketflushdatessingle.Count > 0) 
         { 
             result = Oeblanketflushdatessingle.BuildOeblanketflushdatessingleFromRow(pdsoeblanketflushdates.ttbloeblanketflushdatessingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketbannersingle OEERBInitializeBannner(Oeblanketbannercriteria oeblanketbannercriteria)
      {   
         var result = new Oeblanketbannersingle();
         
         var pdsoeblanketbanner = new pdsoeblanketbannerDataSet();
            
         DataRow ttbloeblanketbannercriteriaCriteria = pdsoeblanketbanner.ttbloeblanketbannercriteria.NewttbloeblanketbannercriteriaRow();
         Oeblanketbannercriteria.UpdateRowFromOeblanketbannercriteria(ref ttbloeblanketbannercriteriaCriteria, oeblanketbannercriteria);
         pdsoeblanketbanner.ttbloeblanketbannercriteria.AddttbloeblanketbannercriteriaRow((pdsoeblanketbannerDataSet.ttbloeblanketbannercriteriaRow)ttbloeblanketbannercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBInitializeBannner - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBInitializeBannner(ref pdsContext, ref pdsoeblanketbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBInitializeBannner - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketbanner); 
    
         if (pdsoeblanketbanner.ttbloeblanketbannersingle.Count > 0) 
         { 
             result = Oeblanketbannersingle.BuildOeblanketbannersingleFromRow(pdsoeblanketbanner.ttbloeblanketbannersingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketheadersingle OEERBDisplayBlanketHeader(Oeblanketheadercriteria oeblanketheadercriteria)
      {   
         var result = new Oeblanketheadersingle();
         
         var pdsoeblanketheader = new pdsoeblanketheaderDataSet();
            
         DataRow ttbloeblanketheadercriteriaCriteria = pdsoeblanketheader.ttbloeblanketheadercriteria.NewttbloeblanketheadercriteriaRow();
         Oeblanketheadercriteria.UpdateRowFromOeblanketheadercriteria(ref ttbloeblanketheadercriteriaCriteria, oeblanketheadercriteria);
         pdsoeblanketheader.ttbloeblanketheadercriteria.AddttbloeblanketheadercriteriaRow((pdsoeblanketheaderDataSet.ttbloeblanketheadercriteriaRow)ttbloeblanketheadercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBDisplayBlanketHeader - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBDisplayBlanketHeader(ref pdsContext, ref pdsoeblanketheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBDisplayBlanketHeader - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketheader); 
    
         if (pdsoeblanketheader.ttbloeblanketheadersingle.Count > 0) 
         { 
             result = Oeblanketheadersingle.BuildOeblanketheadersingleFromRow(pdsoeblanketheader.ttbloeblanketheadersingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeblanketheadersingle OEERBUpdateBlanketHeader(AsoeentryOEERBUpdateBlanketHeaderRequestAPI AsoeentryOEERBUpdateBlanketHeaderRequestAPI)
      {   
         var result = new Oeblanketheadersingle();
         
         var pdsoeblanketheader = new pdsoeblanketheaderDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketheadercriteriaRow = pdsoeblanketheader.ttbloeblanketheadercriteria.NewttbloeblanketheadercriteriaRow();
         Oeblanketheadercriteria.UpdateRowFromOeblanketheadercriteria(ref ttbloeblanketheadercriteriaRow, AsoeentryOEERBUpdateBlanketHeaderRequestAPI.oeblanketheadercriteria);
         pdsoeblanketheader.ttbloeblanketheadercriteria.AddttbloeblanketheadercriteriaRow((pdsoeblanketheaderDataSet.ttbloeblanketheadercriteriaRow)ttbloeblanketheadercriteriaRow);
          
         DataRow ttbloeblanketheadersingleRow = pdsoeblanketheader.ttbloeblanketheadersingle.NewttbloeblanketheadersingleRow();
         Oeblanketheadersingle.UpdateRowFromOeblanketheadersingle(ref ttbloeblanketheadersingleRow, AsoeentryOEERBUpdateBlanketHeaderRequestAPI.oeblanketheadersingle);
         pdsoeblanketheader.ttbloeblanketheadersingle.AddttbloeblanketheadersingleRow((pdsoeblanketheaderDataSet.ttbloeblanketheadersingleRow)ttbloeblanketheadersingleRow);
          
         
         NLogLoggerP.Trace("OEERBUpdateBlanketHeader - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBUpdateBlanketHeader(ref pdsContext, ref pdsoeblanketheader, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBUpdateBlanketHeader - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketheader); 
    
         if (pdsoeblanketheader.ttbloeblanketheadersingle.Count > 0) 
         { 
             result = Oeblanketheadersingle.BuildOeblanketheadersingleFromRow(pdsoeblanketheader.ttbloeblanketheadersingle[0]);
         } 
              
          
         return result;
          
      }

      public AsoeentryOEERBLogOffResponseAPI OEERBLogOff(Oeblanketbannercriteria oeblanketbannercriteria)
      {   
         var result = new AsoeentryOEERBLogOffResponseAPI();
         
         var pdsoeblanketbanner = new pdsoeblanketbannerDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeblanketbannercriteriaCriteria = pdsoeblanketbanner.ttbloeblanketbannercriteria.NewttbloeblanketbannercriteriaRow();
         Oeblanketbannercriteria.UpdateRowFromOeblanketbannercriteria(ref ttbloeblanketbannercriteriaCriteria, oeblanketbannercriteria);
         pdsoeblanketbanner.ttbloeblanketbannercriteria.AddttbloeblanketbannercriteriaRow((pdsoeblanketbannerDataSet.ttbloeblanketbannercriteriaRow)ttbloeblanketbannercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBLogOff - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBLogOff(ref pdsContext, ref pdsoeblanketbanner, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBLogOff - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketbanner); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeblanketbanner.ttbloeblanketbannersingle.Count > 0)
         {
            result.oeblanketbannersingle = Oeblanketbannersingle.BuildOeblanketbannersingleFromRow(pdsoeblanketbanner.ttbloeblanketbannersingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEERBBuildBlanketLinesResponseAPI OEERBBuildBlanketLines(Oeblanketlinescriteria oeblanketlinescriteria)
      {   
         var result = new AsoeentryOEERBBuildBlanketLinesResponseAPI();
         
         var pdsoeblanketlines = new pdsoeblanketlinesDataSet();
            
         DataRow ttbloeblanketlinescriteriaCriteria = pdsoeblanketlines.ttbloeblanketlinescriteria.NewttbloeblanketlinescriteriaRow();
         Oeblanketlinescriteria.UpdateRowFromOeblanketlinescriteria(ref ttbloeblanketlinescriteriaCriteria, oeblanketlinescriteria);
         pdsoeblanketlines.ttbloeblanketlinescriteria.AddttbloeblanketlinescriteriaRow((pdsoeblanketlinesDataSet.ttbloeblanketlinescriteriaRow)ttbloeblanketlinescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBBuildBlanketLines - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBBuildBlanketLines(ref pdsContext, ref pdsoeblanketlines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBBuildBlanketLines - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketlines); 
    
         foreach (DataRow row in pdsoeblanketlines.ttbloeblanketlinesresults)
         {
            result.oeblanketlinesresults.Add(Oeblanketlinesresults.BuildOeblanketlinesresultsFromRow(row));
         }     
         if (pdsoeblanketlines.ttbloeblanketlinessingle.Count > 0)
         {
            result.oeblanketlinessingle = Oeblanketlinessingle.BuildOeblanketlinessingleFromRow(pdsoeblanketlines.ttbloeblanketlinessingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEERBUpdateBlanketLineResponseAPI OEERBUpdateBlanketLine(AsoeentryOEERBUpdateBlanketLineRequestAPI AsoeentryOEERBUpdateBlanketLineRequestAPI)
      {   
         var result = new AsoeentryOEERBUpdateBlanketLineResponseAPI();
         
         var pdsoeblanketlines = new pdsoeblanketlinesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketlinescriteriaRow = pdsoeblanketlines.ttbloeblanketlinescriteria.NewttbloeblanketlinescriteriaRow();
         Oeblanketlinescriteria.UpdateRowFromOeblanketlinescriteria(ref ttbloeblanketlinescriteriaRow, AsoeentryOEERBUpdateBlanketLineRequestAPI.oeblanketlinescriteria);
         pdsoeblanketlines.ttbloeblanketlinescriteria.AddttbloeblanketlinescriteriaRow((pdsoeblanketlinesDataSet.ttbloeblanketlinescriteriaRow)ttbloeblanketlinescriteriaRow);
          
         foreach (var obj in AsoeentryOEERBUpdateBlanketLineRequestAPI.oeblanketlinesresults)
         {
            DataRow ttbloeblanketlinesresultsRow = pdsoeblanketlines.ttbloeblanketlinesresults.NewttbloeblanketlinesresultsRow();
            Oeblanketlinesresults.UpdateRowFromOeblanketlinesresults(ref ttbloeblanketlinesresultsRow, obj);
            pdsoeblanketlines.ttbloeblanketlinesresults.AddttbloeblanketlinesresultsRow((pdsoeblanketlinesDataSet.ttbloeblanketlinesresultsRow)ttbloeblanketlinesresultsRow);
         }
          
         DataRow ttbloeblanketlinessingleRow = pdsoeblanketlines.ttbloeblanketlinessingle.NewttbloeblanketlinessingleRow();
         Oeblanketlinessingle.UpdateRowFromOeblanketlinessingle(ref ttbloeblanketlinessingleRow, AsoeentryOEERBUpdateBlanketLineRequestAPI.oeblanketlinessingle);
         pdsoeblanketlines.ttbloeblanketlinessingle.AddttbloeblanketlinessingleRow((pdsoeblanketlinesDataSet.ttbloeblanketlinessingleRow)ttbloeblanketlinessingleRow);
          
         
         NLogLoggerP.Trace("OEERBUpdateBlanketLine - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBUpdateBlanketLine(ref pdsContext, ref pdsoeblanketlines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBUpdateBlanketLine - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketlines); 
    
         if (pdsoeblanketlines.ttbloeblanketlinescriteria.Count > 0)
         {
            result.oeblanketlinescriteria = Oeblanketlinescriteria.BuildOeblanketlinescriteriaFromRow(pdsoeblanketlines.ttbloeblanketlinescriteria[0]);
         }
                    
         foreach (DataRow row in pdsoeblanketlines.ttbloeblanketlinesresults)
         {
            result.oeblanketlinesresults.Add(Oeblanketlinesresults.BuildOeblanketlinesresultsFromRow(row));
         }     
         if (pdsoeblanketlines.ttbloeblanketlinessingle.Count > 0)
         {
            result.oeblanketlinessingle = Oeblanketlinessingle.BuildOeblanketlinessingleFromRow(pdsoeblanketlines.ttbloeblanketlinessingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEERBInitBlanketUpdByReleaseResponseAPI OEERBInitBlanketUpdByRelease(Oeblanketupdbyreleasecrit oeblanketupdbyreleasecrit)
      {   
         var result = new AsoeentryOEERBInitBlanketUpdByReleaseResponseAPI();
         
         var pdsoeblanketupdbyrelease = new pdsoeblanketupdbyreleaseDataSet();
            
         DataRow ttbloeblanketupdbyreleasecritCriteria = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.NewttbloeblanketupdbyreleasecritRow();
         Oeblanketupdbyreleasecrit.UpdateRowFromOeblanketupdbyreleasecrit(ref ttbloeblanketupdbyreleasecritCriteria, oeblanketupdbyreleasecrit);
         pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.AddttbloeblanketupdbyreleasecritRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleasecritRow)ttbloeblanketupdbyreleasecritCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERBInitBlanketUpdByRelease - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBInitBlanketUpdByRelease(ref pdsContext, ref pdsoeblanketupdbyrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBInitBlanketUpdByRelease - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketupdbyrelease); 
    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults)
         {
            result.oeblanketupdbyreleaseresults.Add(Oeblanketupdbyreleaseresults.BuildOeblanketupdbyreleaseresultsFromRow(row));
         }     
         if (pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.Count > 0)
         {
            result.oeblanketupdbyreleasesingle = Oeblanketupdbyreleasesingle.BuildOeblanketupdbyreleasesingleFromRow(pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle[0]);
         }
                    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyrelupdresults)
         {
            result.oeblanketupdbyrelupdresults.Add(Oeblanketupdbyrelupdresults.BuildOeblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEERBBlanketUpdByReleaseUpdateResponseAPI OEERBBlanketUpdByReleaseUpdate(AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI)
      {   
         var result = new AsoeentryOEERBBlanketUpdByReleaseUpdateResponseAPI();
         
         var pdsoeblanketupdbyrelease = new pdsoeblanketupdbyreleaseDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketupdbyreleasecritRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.NewttbloeblanketupdbyreleasecritRow();
         Oeblanketupdbyreleasecrit.UpdateRowFromOeblanketupdbyreleasecrit(ref ttbloeblanketupdbyreleasecritRow, AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI.oeblanketupdbyreleasecrit);
         pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.AddttbloeblanketupdbyreleasecritRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleasecritRow)ttbloeblanketupdbyreleasecritRow);
          
         foreach (var obj in AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI.oeblanketupdbyreleaseresults)
         {
            DataRow ttbloeblanketupdbyreleaseresultsRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults.NewttbloeblanketupdbyreleaseresultsRow();
            Oeblanketupdbyreleaseresults.UpdateRowFromOeblanketupdbyreleaseresults(ref ttbloeblanketupdbyreleaseresultsRow, obj);
            pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults.AddttbloeblanketupdbyreleaseresultsRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleaseresultsRow)ttbloeblanketupdbyreleaseresultsRow);
         }
          
         DataRow ttbloeblanketupdbyreleasesingleRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.NewttbloeblanketupdbyreleasesingleRow();
         Oeblanketupdbyreleasesingle.UpdateRowFromOeblanketupdbyreleasesingle(ref ttbloeblanketupdbyreleasesingleRow, AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI.oeblanketupdbyreleasesingle);
         pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.AddttbloeblanketupdbyreleasesingleRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleasesingleRow)ttbloeblanketupdbyreleasesingleRow);
          
         foreach (var obj in AsoeentryOEERBBlanketUpdByReleaseUpdateRequestAPI.oeblanketupdbyrelupdresults)
         {
            DataRow ttbloeblanketupdbyrelupdresultsRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyrelupdresults.NewttbloeblanketupdbyrelupdresultsRow();
            Oeblanketupdbyrelupdresults.UpdateRowFromOeblanketupdbyrelupdresults(ref ttbloeblanketupdbyrelupdresultsRow, obj);
            pdsoeblanketupdbyrelease.ttbloeblanketupdbyrelupdresults.AddttbloeblanketupdbyrelupdresultsRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyrelupdresultsRow)ttbloeblanketupdbyrelupdresultsRow);
         }
          
         
         NLogLoggerP.Trace("OEERBBlanketUpdByReleaseUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBBlanketUpdByReleaseUpdate(ref pdsContext, ref pdsoeblanketupdbyrelease, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBBlanketUpdByReleaseUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketupdbyrelease); 
    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults)
         {
            result.oeblanketupdbyreleaseresults.Add(Oeblanketupdbyreleaseresults.BuildOeblanketupdbyreleaseresultsFromRow(row));
         }     
         if (pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.Count > 0)
         {
            result.oeblanketupdbyreleasesingle = Oeblanketupdbyreleasesingle.BuildOeblanketupdbyreleasesingleFromRow(pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle[0]);
         }
                    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyrelupdresults)
         {
            result.oeblanketupdbyrelupdresults.Add(Oeblanketupdbyrelupdresults.BuildOeblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEERBBlanketUpdByReleaseFinalUpdateResponseAPI OEERBBlanketUpdByReleaseFinalUpdate(AsoeentryOEERBBlanketUpdByReleaseFinalUpdateRequestAPI AsoeentryOEERBBlanketUpdByReleaseFinalUpdateRequestAPI)
      {   
         var result = new AsoeentryOEERBBlanketUpdByReleaseFinalUpdateResponseAPI();
         
         var pdsoeblanketupdbyrelease = new pdsoeblanketupdbyreleaseDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeblanketupdbyreleasecritRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.NewttbloeblanketupdbyreleasecritRow();
         Oeblanketupdbyreleasecrit.UpdateRowFromOeblanketupdbyreleasecrit(ref ttbloeblanketupdbyreleasecritRow, AsoeentryOEERBBlanketUpdByReleaseFinalUpdateRequestAPI.oeblanketupdbyreleasecrit);
         pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.AddttbloeblanketupdbyreleasecritRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleasecritRow)ttbloeblanketupdbyreleasecritRow);
          
         foreach (var obj in AsoeentryOEERBBlanketUpdByReleaseFinalUpdateRequestAPI.oeblanketupdbyreleaseresults)
         {
            DataRow ttbloeblanketupdbyreleaseresultsRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults.NewttbloeblanketupdbyreleaseresultsRow();
            Oeblanketupdbyreleaseresults.UpdateRowFromOeblanketupdbyreleaseresults(ref ttbloeblanketupdbyreleaseresultsRow, obj);
            pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults.AddttbloeblanketupdbyreleaseresultsRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleaseresultsRow)ttbloeblanketupdbyreleaseresultsRow);
         }
          
         DataRow ttbloeblanketupdbyreleasesingleRow = pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.NewttbloeblanketupdbyreleasesingleRow();
         Oeblanketupdbyreleasesingle.UpdateRowFromOeblanketupdbyreleasesingle(ref ttbloeblanketupdbyreleasesingleRow, AsoeentryOEERBBlanketUpdByReleaseFinalUpdateRequestAPI.oeblanketupdbyreleasesingle);
         pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.AddttbloeblanketupdbyreleasesingleRow((pdsoeblanketupdbyreleaseDataSet.ttbloeblanketupdbyreleasesingleRow)ttbloeblanketupdbyreleasesingleRow);
          
         
         NLogLoggerP.Trace("OEERBBlanketUpdByReleaseFinalUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERBBlanketUpdByReleaseFinalUpdate(ref pdsContext, ref pdsoeblanketupdbyrelease, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERBBlanketUpdByReleaseFinalUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeblanketupdbyrelease); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit.Count > 0)
         {
            result.oeblanketupdbyreleasecrit = Oeblanketupdbyreleasecrit.BuildOeblanketupdbyreleasecritFromRow(pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasecrit[0]);
         }
                    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleaseresults)
         {
            result.oeblanketupdbyreleaseresults.Add(Oeblanketupdbyreleaseresults.BuildOeblanketupdbyreleaseresultsFromRow(row));
         }     
         if (pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle.Count > 0)
         {
            result.oeblanketupdbyreleasesingle = Oeblanketupdbyreleasesingle.BuildOeblanketupdbyreleasesingleFromRow(pdsoeblanketupdbyrelease.ttbloeblanketupdbyreleasesingle[0]);
         }
                    
         foreach (DataRow row in pdsoeblanketupdbyrelease.ttbloeblanketupdbyrelupdresults)
         {
            result.oeblanketupdbyrelupdresults.Add(Oeblanketupdbyrelupdresults.BuildOeblanketupdbyrelupdresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEERSDetailLineLoadResponseAPI OEERSDetailLineLoad(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeentryOEERSDetailLineLoadResponseAPI();
         
         var pdsoeersdetailline = new pdsoeersdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERSDetailLineLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERSDetailLineLoad(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeersdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERSDetailLineLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeersdetailline); 
    
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinelineseq)
         {
            result.oeersdetaillinelineseq.Add(Oeersdetaillinelineseq.BuildOeersdetaillinelineseqFromRow(row));
         }     
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillineoeers)
         {
            result.oeersdetaillineoeers.Add(Oeersdetaillineoeers.BuildOeersdetaillineoeersFromRow(row));
         }     
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinesnlot)
         {
            result.oeersdetaillinesnlot.Add(Oeersdetaillinesnlot.BuildOeersdetaillinesnlotFromRow(row));
         }     
          
         return result;
          
      }

      public void OEERSDetailLineUpdate(AsoeentryOEERSDetailLineUpdateRequestAPI AsoeentryOEERSDetailLineUpdateRequestAPI)
      {   
         
         var pdsoeersdetailline = new pdsoeersdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEERSDetailLineUpdateRequestAPI.oeersdetaillinelineseq)
         {
            DataRow ttbloeersdetaillinelineseqRow = pdsoeersdetailline.ttbloeersdetaillinelineseq.NewttbloeersdetaillinelineseqRow();
            Oeersdetaillinelineseq.UpdateRowFromOeersdetaillinelineseq(ref ttbloeersdetaillinelineseqRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinelineseq.AddttbloeersdetaillinelineseqRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinelineseqRow)ttbloeersdetaillinelineseqRow);
         }
          
         foreach (var obj in AsoeentryOEERSDetailLineUpdateRequestAPI.oeersdetaillineoeers)
         {
            DataRow ttbloeersdetaillineoeersRow = pdsoeersdetailline.ttbloeersdetaillineoeers.NewttbloeersdetaillineoeersRow();
            Oeersdetaillineoeers.UpdateRowFromOeersdetaillineoeers(ref ttbloeersdetaillineoeersRow, obj);
            pdsoeersdetailline.ttbloeersdetaillineoeers.AddttbloeersdetaillineoeersRow((pdsoeersdetaillineDataSet.ttbloeersdetaillineoeersRow)ttbloeersdetaillineoeersRow);
         }
          
         foreach (var obj in AsoeentryOEERSDetailLineUpdateRequestAPI.oeersdetaillinesnlot)
         {
            DataRow ttbloeersdetaillinesnlotRow = pdsoeersdetailline.ttbloeersdetaillinesnlot.NewttbloeersdetaillinesnlotRow();
            Oeersdetaillinesnlot.UpdateRowFromOeersdetaillinesnlot(ref ttbloeersdetaillinesnlotRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinesnlot.AddttbloeersdetaillinesnlotRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinesnlotRow)ttbloeersdetaillinesnlotRow);
         }
          
         
         NLogLoggerP.Trace("OEERSDetailLineUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERSDetailLineUpdate(ref pdsContext,  pdsoeersdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERSDetailLineUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeersdetailline);
      }

      public AsoeentryOEERSDetailLineUpdateValidateResponseAPI OEERSDetailLineUpdateValidate(AsoeentryOEERSDetailLineUpdateValidateRequestAPI AsoeentryOEERSDetailLineUpdateValidateRequestAPI)
      {   
         var result = new AsoeentryOEERSDetailLineUpdateValidateResponseAPI();
         
         var pdsoeersdetailline = new pdsoeersdetaillineDataSet();
            
         bool lLaunchSerLotFl = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEERSDetailLineUpdateValidateRequestAPI.oeersdetaillinelineseq)
         {
            DataRow ttbloeersdetaillinelineseqRow = pdsoeersdetailline.ttbloeersdetaillinelineseq.NewttbloeersdetaillinelineseqRow();
            Oeersdetaillinelineseq.UpdateRowFromOeersdetaillinelineseq(ref ttbloeersdetaillinelineseqRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinelineseq.AddttbloeersdetaillinelineseqRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinelineseqRow)ttbloeersdetaillinelineseqRow);
         }
          
         foreach (var obj in AsoeentryOEERSDetailLineUpdateValidateRequestAPI.oeersdetaillineoeers)
         {
            DataRow ttbloeersdetaillineoeersRow = pdsoeersdetailline.ttbloeersdetaillineoeers.NewttbloeersdetaillineoeersRow();
            Oeersdetaillineoeers.UpdateRowFromOeersdetaillineoeers(ref ttbloeersdetaillineoeersRow, obj);
            pdsoeersdetailline.ttbloeersdetaillineoeers.AddttbloeersdetaillineoeersRow((pdsoeersdetaillineDataSet.ttbloeersdetaillineoeersRow)ttbloeersdetaillineoeersRow);
         }
          
         foreach (var obj in AsoeentryOEERSDetailLineUpdateValidateRequestAPI.oeersdetaillinesnlot)
         {
            DataRow ttbloeersdetaillinesnlotRow = pdsoeersdetailline.ttbloeersdetaillinesnlot.NewttbloeersdetaillinesnlotRow();
            Oeersdetaillinesnlot.UpdateRowFromOeersdetaillinesnlot(ref ttbloeersdetaillinesnlotRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinesnlot.AddttbloeersdetaillinesnlotRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinesnlotRow)ttbloeersdetaillinesnlotRow);
         }
          
         var  iOrderNo = AsoeentryOEERSDetailLineUpdateValidateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeentryOEERSDetailLineUpdateValidateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OEERSDetailLineUpdateValidate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERSDetailLineUpdateValidate(ref pdsContext,  iOrderNo,  iOrderSuf, ref pdsoeersdetailline, out lLaunchSerLotFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERSDetailLineUpdateValidate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeersdetailline); 
    
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinelineseq)
         {
            result.oeersdetaillinelineseq.Add(Oeersdetaillinelineseq.BuildOeersdetaillinelineseqFromRow(row));
         }     
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillineoeers)
         {
            result.oeersdetaillineoeers.Add(Oeersdetaillineoeers.BuildOeersdetaillineoeersFromRow(row));
         }     
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinesnlot)
         {
            result.oeersdetaillinesnlot.Add(Oeersdetaillinesnlot.BuildOeersdetaillinesnlotFromRow(row));
         }     
         result.lLaunchSerLotFl = lLaunchSerLotFl;
          
         return result;
          
      }

      public AsoeentryOEERSDetailLineSerialFinishResponseAPI OEERSDetailLineSerialFinish(AsoeentryOEERSDetailLineSerialFinishRequestAPI AsoeentryOEERSDetailLineSerialFinishRequestAPI)
      {   
         var result = new AsoeentryOEERSDetailLineSerialFinishResponseAPI();
         
         var pdsicentryserials = new pdsicentryserialsDataSet();
            
         var pdsoeersdetailline = new pdsoeersdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentryserialscriteriaRow = pdsicentryserials.ttblicentryserialscriteria.NewttblicentryserialscriteriaRow();
         Icentryserialscriteria.UpdateRowFromIcentryserialscriteria(ref ttblicentryserialscriteriaRow, AsoeentryOEERSDetailLineSerialFinishRequestAPI.icentryserialscriteria);
         pdsicentryserials.ttblicentryserialscriteria.AddttblicentryserialscriteriaRow((pdsicentryserialsDataSet.ttblicentryserialscriteriaRow)ttblicentryserialscriteriaRow);
          
         foreach (var obj in AsoeentryOEERSDetailLineSerialFinishRequestAPI.icentryserialslist)
         {
            DataRow ttblicentryserialslistRow = pdsicentryserials.ttblicentryserialslist.NewttblicentryserialslistRow();
            Icentryserialslist.UpdateRowFromIcentryserialslist(ref ttblicentryserialslistRow, obj);
            pdsicentryserials.ttblicentryserialslist.AddttblicentryserialslistRow((pdsicentryserialsDataSet.ttblicentryserialslistRow)ttblicentryserialslistRow);
         }
          
         DataRow ttbloeersdetaillinelineseqRow = pdsoeersdetailline.ttbloeersdetaillinelineseq.NewttbloeersdetaillinelineseqRow();
         Oeersdetaillinelineseq.UpdateRowFromOeersdetaillinelineseq(ref ttbloeersdetaillinelineseqRow, AsoeentryOEERSDetailLineSerialFinishRequestAPI.oeersdetaillinelineseq);
         pdsoeersdetailline.ttbloeersdetaillinelineseq.AddttbloeersdetaillinelineseqRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinelineseqRow)ttbloeersdetaillinelineseqRow);
          
         DataRow ttbloeersdetaillineoeersRow = pdsoeersdetailline.ttbloeersdetaillineoeers.NewttbloeersdetaillineoeersRow();
         Oeersdetaillineoeers.UpdateRowFromOeersdetaillineoeers(ref ttbloeersdetaillineoeersRow, AsoeentryOEERSDetailLineSerialFinishRequestAPI.oeersdetaillineoeers);
         pdsoeersdetailline.ttbloeersdetaillineoeers.AddttbloeersdetaillineoeersRow((pdsoeersdetaillineDataSet.ttbloeersdetaillineoeersRow)ttbloeersdetaillineoeersRow);
          
         foreach (var obj in AsoeentryOEERSDetailLineSerialFinishRequestAPI.oeersdetaillinesnlot)
         {
            DataRow ttbloeersdetaillinesnlotRow = pdsoeersdetailline.ttbloeersdetaillinesnlot.NewttbloeersdetaillinesnlotRow();
            Oeersdetaillinesnlot.UpdateRowFromOeersdetaillinesnlot(ref ttbloeersdetaillinesnlotRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinesnlot.AddttbloeersdetaillinesnlotRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinesnlotRow)ttbloeersdetaillinesnlotRow);
         }
          
         var  iLineNo = AsoeentryOEERSDetailLineSerialFinishRequestAPI.iLineNo;
            
         var  iSeqNo = AsoeentryOEERSDetailLineSerialFinishRequestAPI.iSeqNo;
            
         
         NLogLoggerP.Trace("OEERSDetailLineSerialFinish - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERSDetailLineSerialFinish(ref pdsContext,  iLineNo,  iSeqNo,  pdsicentryserials, ref pdsoeersdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERSDetailLineSerialFinish - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentryserials); 
    
         if (pdsoeersdetailline.ttbloeersdetaillinelineseq.Count > 0)
         {
            result.oeersdetaillinelineseq = Oeersdetaillinelineseq.BuildOeersdetaillinelineseqFromRow(pdsoeersdetailline.ttbloeersdetaillinelineseq[0]);
         }
                    
         if (pdsoeersdetailline.ttbloeersdetaillineoeers.Count > 0)
         {
            result.oeersdetaillineoeers = Oeersdetaillineoeers.BuildOeersdetaillineoeersFromRow(pdsoeersdetailline.ttbloeersdetaillineoeers[0]);
         }
                    
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinesnlot)
         {
            result.oeersdetaillinesnlot.Add(Oeersdetaillinesnlot.BuildOeersdetaillinesnlotFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEERSDetailLineLotFinishResponseAPI OEERSDetailLineLotFinish(AsoeentryOEERSDetailLineLotFinishRequestAPI AsoeentryOEERSDetailLineLotFinishRequestAPI)
      {   
         var result = new AsoeentryOEERSDetailLineLotFinishResponseAPI();
         
         var pdsicentrylots = new pdsicentrylotsDataSet();
            
         var pdsoeersdetailline = new pdsoeersdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblicentrylotscriteriaRow = pdsicentrylots.ttblicentrylotscriteria.NewttblicentrylotscriteriaRow();
         Icentrylotscriteria.UpdateRowFromIcentrylotscriteria(ref ttblicentrylotscriteriaRow, AsoeentryOEERSDetailLineLotFinishRequestAPI.icentrylotscriteria);
         pdsicentrylots.ttblicentrylotscriteria.AddttblicentrylotscriteriaRow((pdsicentrylotsDataSet.ttblicentrylotscriteriaRow)ttblicentrylotscriteriaRow);
          
         foreach (var obj in AsoeentryOEERSDetailLineLotFinishRequestAPI.icentrylotslist)
         {
            DataRow ttblicentrylotslistRow = pdsicentrylots.ttblicentrylotslist.NewttblicentrylotslistRow();
            Icentrylotslist.UpdateRowFromIcentrylotslist(ref ttblicentrylotslistRow, obj);
            pdsicentrylots.ttblicentrylotslist.AddttblicentrylotslistRow((pdsicentrylotsDataSet.ttblicentrylotslistRow)ttblicentrylotslistRow);
         }
          
         DataRow ttbloeersdetaillinelineseqRow = pdsoeersdetailline.ttbloeersdetaillinelineseq.NewttbloeersdetaillinelineseqRow();
         Oeersdetaillinelineseq.UpdateRowFromOeersdetaillinelineseq(ref ttbloeersdetaillinelineseqRow, AsoeentryOEERSDetailLineLotFinishRequestAPI.oeersdetaillinelineseq);
         pdsoeersdetailline.ttbloeersdetaillinelineseq.AddttbloeersdetaillinelineseqRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinelineseqRow)ttbloeersdetaillinelineseqRow);
          
         DataRow ttbloeersdetaillineoeersRow = pdsoeersdetailline.ttbloeersdetaillineoeers.NewttbloeersdetaillineoeersRow();
         Oeersdetaillineoeers.UpdateRowFromOeersdetaillineoeers(ref ttbloeersdetaillineoeersRow, AsoeentryOEERSDetailLineLotFinishRequestAPI.oeersdetaillineoeers);
         pdsoeersdetailline.ttbloeersdetaillineoeers.AddttbloeersdetaillineoeersRow((pdsoeersdetaillineDataSet.ttbloeersdetaillineoeersRow)ttbloeersdetaillineoeersRow);
          
         foreach (var obj in AsoeentryOEERSDetailLineLotFinishRequestAPI.oeersdetaillinesnlot)
         {
            DataRow ttbloeersdetaillinesnlotRow = pdsoeersdetailline.ttbloeersdetaillinesnlot.NewttbloeersdetaillinesnlotRow();
            Oeersdetaillinesnlot.UpdateRowFromOeersdetaillinesnlot(ref ttbloeersdetaillinesnlotRow, obj);
            pdsoeersdetailline.ttbloeersdetaillinesnlot.AddttbloeersdetaillinesnlotRow((pdsoeersdetaillineDataSet.ttbloeersdetaillinesnlotRow)ttbloeersdetaillinesnlotRow);
         }
          
         var  iLineNo = AsoeentryOEERSDetailLineLotFinishRequestAPI.iLineNo;
            
         var  iSeqNo = AsoeentryOEERSDetailLineLotFinishRequestAPI.iSeqNo;
            
         
         NLogLoggerP.Trace("OEERSDetailLineLotFinish - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERSDetailLineLotFinish(ref pdsContext,  iLineNo,  iSeqNo,  pdsicentrylots, ref pdsoeersdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERSDetailLineLotFinish - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsicentrylots); 
    
         if (pdsoeersdetailline.ttbloeersdetaillinelineseq.Count > 0)
         {
            result.oeersdetaillinelineseq = Oeersdetaillinelineseq.BuildOeersdetaillinelineseqFromRow(pdsoeersdetailline.ttbloeersdetaillinelineseq[0]);
         }
                    
         if (pdsoeersdetailline.ttbloeersdetaillineoeers.Count > 0)
         {
            result.oeersdetaillineoeers = Oeersdetaillineoeers.BuildOeersdetaillineoeersFromRow(pdsoeersdetailline.ttbloeersdetaillineoeers[0]);
         }
                    
         foreach (DataRow row in pdsoeersdetailline.ttbloeersdetaillinesnlot)
         {
            result.oeersdetaillinesnlot.Add(Oeersdetaillinesnlot.BuildOeersdetaillinesnlotFromRow(row));
         }     
          
         return result;
          
      }

      public string OEESDetailClose(Oeesdetailclosecriteria oeesdetailclosecriteria)
      {   
          
         var pdsoeesdetailclosecriteria = new pdsoeesdetailclosecriteriaDataSet();
            
         DataRow ttbloeesdetailclosecriteriaCriteria = pdsoeesdetailclosecriteria.ttbloeesdetailclosecriteria.NewttbloeesdetailclosecriteriaRow();
         Oeesdetailclosecriteria.UpdateRowFromOeesdetailclosecriteria(ref ttbloeesdetailclosecriteriaCriteria, oeesdetailclosecriteria);
         pdsoeesdetailclosecriteria.ttbloeesdetailclosecriteria.AddttbloeesdetailclosecriteriaRow((pdsoeesdetailclosecriteriaDataSet.ttbloeesdetailclosecriteriaRow)ttbloeesdetailclosecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailClose - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailClose(ref pdsContext,  pdsoeesdetailclosecriteria, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailClose - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailclosecriteria); 
    
         return cWarningMessage;
      
      }

      public AsoeentryOEESDetailHdrGeoCodeSettingsResponseAPI OEESDetailHdrGeoCodeSettings(string cCountryCd, bool lShipToFl, bool lModVTFl, string cTaxInterfaceTy, string cType, string cUserField)
      {   
         var result = new AsoeentryOEESDetailHdrGeoCodeSettingsResponseAPI();
         
         string cGeoCodeValue = string.Empty;
         bool lGeoCodeEnabled = false;
         bool lBtnGeoCodeEnabled = false;
         bool lOutOfCityFlEnabled = false;
         bool lOutOfCityFlChecked = false;
         bool lForceGeoCode = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailHdrGeoCodeSettings - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailHdrGeoCodeSettings(ref pdsContext,  cCountryCd,  lShipToFl,  lModVTFl,  cTaxInterfaceTy,  cType,  cUserField, ref cGeoCodeValue, out lGeoCodeEnabled, out lBtnGeoCodeEnabled, out lOutOfCityFlEnabled, out lOutOfCityFlChecked, out lForceGeoCode, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailHdrGeoCodeSettings - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cGeoCodeValue = cGeoCodeValue;
         result.lGeoCodeEnabled = lGeoCodeEnabled;
         result.lBtnGeoCodeEnabled = lBtnGeoCodeEnabled;
         result.lOutOfCityFlEnabled = lOutOfCityFlEnabled;
         result.lOutOfCityFlChecked = lOutOfCityFlChecked;
         result.lForceGeoCode = lForceGeoCode;
          
         return result;
          
      }

      public AsoeentryOEESDetailHdrLoadResponseAPI OEESDetailHdrLoad(Oeesdetailhdrloadcriteria oeesdetailhdrloadcriteria)
      {   
         var result = new AsoeentryOEESDetailHdrLoadResponseAPI();
         
         var pdsoeesdetailhdrload = new pdsoeesdetailhdrloadDataSet();
            
         var pdsoeesdetailhdrcommon = new pdsoeesdetailhdrcommonDataSet();
            
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         DataRow ttbloeesdetailhdrloadcriteriaCriteria = pdsoeesdetailhdrload.ttbloeesdetailhdrloadcriteria.NewttbloeesdetailhdrloadcriteriaRow();
         Oeesdetailhdrloadcriteria.UpdateRowFromOeesdetailhdrloadcriteria(ref ttbloeesdetailhdrloadcriteriaCriteria, oeesdetailhdrloadcriteria);
         pdsoeesdetailhdrload.ttbloeesdetailhdrloadcriteria.AddttbloeesdetailhdrloadcriteriaRow((pdsoeesdetailhdrloadDataSet.ttbloeesdetailhdrloadcriteriaRow)ttbloeesdetailhdrloadcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailHdrLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailHdrLoad(ref pdsContext,  pdsoeesdetailhdrload, out pdsoeesdetailhdrcommon, out pdsoeaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailHdrLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailhdrload); 
    
         foreach (DataRow row in pdsoeaddons.ttbloeaddons)
         {
            result.oeaddons.Add(Oeaddons.BuildOeaddonsFromRow(row));
         }     
         if (pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.Count > 0)
         {
            result.oeesdetailhdrsingle = Oeesdetailhdrsingle.BuildOeesdetailhdrsingleFromRow(pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEESDetailHdrRecalcResponseAPI OEESDetailHdrRecalc(AsoeentryOEESDetailHdrRecalcRequestAPI AsoeentryOEESDetailHdrRecalcRequestAPI)
      {   
         var result = new AsoeentryOEESDetailHdrRecalcResponseAPI();
         
         var pdsoeesdetailhdrcommon = new pdsoeesdetailhdrcommonDataSet();
            
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lLaunchBtnGeoCode = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailHdrRecalcRequestAPI.oeaddons)
         {
            DataRow ttbloeaddonsRow = pdsoeaddons.ttbloeaddons.NewttbloeaddonsRow();
            Oeaddons.UpdateRowFromOeaddons(ref ttbloeaddonsRow, obj);
            pdsoeaddons.ttbloeaddons.AddttbloeaddonsRow((pdsoeaddonsDataSet.ttbloeaddonsRow)ttbloeaddonsRow);
         }
          
         DataRow ttbloeesdetailhdrsingleRow = pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.NewttbloeesdetailhdrsingleRow();
         Oeesdetailhdrsingle.UpdateRowFromOeesdetailhdrsingle(ref ttbloeesdetailhdrsingleRow, AsoeentryOEESDetailHdrRecalcRequestAPI.oeesdetailhdrsingle);
         pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.AddttbloeesdetailhdrsingleRow((pdsoeesdetailhdrcommonDataSet.ttbloeesdetailhdrsingleRow)ttbloeesdetailhdrsingleRow);
          
         
         NLogLoggerP.Trace("OEESDetailHdrRecalc - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailHdrRecalc(ref pdsContext, ref pdsoeesdetailhdrcommon, ref pdsoeaddons, out lLaunchBtnGeoCode, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailHdrRecalc - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailhdrcommon); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeaddons.ttbloeaddons)
         {
            result.oeaddons.Add(Oeaddons.BuildOeaddonsFromRow(row));
         }     
         if (pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.Count > 0)
         {
            result.oeesdetailhdrsingle = Oeesdetailhdrsingle.BuildOeesdetailhdrsingleFromRow(pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle[0]);
         }
                    
         result.lLaunchBtnGeoCode = lLaunchBtnGeoCode;
          
         return result;
          
      }

      public AsoeentryOEESDetailHdrUpdtResponseAPI OEESDetailHdrUpdt(AsoeentryOEESDetailHdrUpdtRequestAPI AsoeentryOEESDetailHdrUpdtRequestAPI)
      {   
         var result = new AsoeentryOEESDetailHdrUpdtResponseAPI();
         
         var pdsoeesdetailhdrcommon = new pdsoeesdetailhdrcommonDataSet();
            
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lLaunchBtnGEOCode = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailHdrUpdtRequestAPI.oeaddons)
         {
            DataRow ttbloeaddonsRow = pdsoeaddons.ttbloeaddons.NewttbloeaddonsRow();
            Oeaddons.UpdateRowFromOeaddons(ref ttbloeaddonsRow, obj);
            pdsoeaddons.ttbloeaddons.AddttbloeaddonsRow((pdsoeaddonsDataSet.ttbloeaddonsRow)ttbloeaddonsRow);
         }
          
         DataRow ttbloeesdetailhdrsingleRow = pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.NewttbloeesdetailhdrsingleRow();
         Oeesdetailhdrsingle.UpdateRowFromOeesdetailhdrsingle(ref ttbloeesdetailhdrsingleRow, AsoeentryOEESDetailHdrUpdtRequestAPI.oeesdetailhdrsingle);
         pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.AddttbloeesdetailhdrsingleRow((pdsoeesdetailhdrcommonDataSet.ttbloeesdetailhdrsingleRow)ttbloeesdetailhdrsingleRow);
          
         
         NLogLoggerP.Trace("OEESDetailHdrUpdt - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailHdrUpdt(ref pdsContext, ref pdsoeesdetailhdrcommon, ref pdsoeaddons, out lLaunchBtnGEOCode, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailHdrUpdt - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailhdrcommon); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeaddons.ttbloeaddons)
         {
            result.oeaddons.Add(Oeaddons.BuildOeaddonsFromRow(row));
         }     
         if (pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle.Count > 0)
         {
            result.oeesdetailhdrsingle = Oeesdetailhdrsingle.BuildOeesdetailhdrsingleFromRow(pdsoeesdetailhdrcommon.ttbloeesdetailhdrsingle[0]);
         }
                    
         result.lLaunchBtnGEOCode = lLaunchBtnGEOCode;
          
         return result;
          
      }

      public AsoeentryOEESDetailLineAfterSerLotResponseAPI OEESDetailLineAfterSerLot(AsoeentryOEESDetailLineAfterSerLotRequestAPI AsoeentryOEESDetailLineAfterSerLotRequestAPI)
      {   
         var result = new AsoeentryOEESDetailLineAfterSerLotResponseAPI();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailLineAfterSerLotRequestAPI.oeesdetaillinelist)
         {
            DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
            Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, obj);
            pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
         }
          
         DataRow ttbloeesdetaillinesingleRow = pdsoeesdetailline.ttbloeesdetaillinesingle.NewttbloeesdetaillinesingleRow();
         Oeesdetaillinesingle.UpdateRowFromOeesdetaillinesingle(ref ttbloeesdetaillinesingleRow, AsoeentryOEESDetailLineAfterSerLotRequestAPI.oeesdetaillinesingle);
         pdsoeesdetailline.ttbloeesdetaillinesingle.AddttbloeesdetaillinesingleRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinesingleRow)ttbloeesdetaillinesingleRow);
          
         var  iLineNo = AsoeentryOEESDetailLineAfterSerLotRequestAPI.iLineNo;
            
         var  dSerLotOutQty = AsoeentryOEESDetailLineAfterSerLotRequestAPI.dSerLotOutQty;
            
         var  dSerLotQtyUnAvail = AsoeentryOEESDetailLineAfterSerLotRequestAPI.dSerLotQtyUnAvail;
            
         
         NLogLoggerP.Trace("OEESDetailLineAfterSerLot - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineAfterSerLot(ref pdsContext,  iLineNo,  dSerLotOutQty,  dSerLotQtyUnAvail, ref pdsoeesdetailline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineAfterSerLot - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesdetailline.ttbloeesdetaillinelist)
         {
            result.oeesdetaillinelist.Add(Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEESDetailLineCheckSerLotResponseAPI OEESDetailLineCheckSerLot(AsoeentryOEESDetailLineCheckSerLotRequestAPI AsoeentryOEESDetailLineCheckSerLotRequestAPI)
      {   
         var result = new AsoeentryOEESDetailLineCheckSerLotResponseAPI();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         bool lLaunchFl = false;
         decimal dNoSNLots = 0;
         decimal dNoSerLotKits = 0;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailLineCheckSerLotRequestAPI.oeesdetaillinelist)
         {
            DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
            Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, obj);
            pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
         }
          
         DataRow ttbloeesdetaillinesingleRow = pdsoeesdetailline.ttbloeesdetaillinesingle.NewttbloeesdetaillinesingleRow();
         Oeesdetaillinesingle.UpdateRowFromOeesdetaillinesingle(ref ttbloeesdetaillinesingleRow, AsoeentryOEESDetailLineCheckSerLotRequestAPI.oeesdetaillinesingle);
         pdsoeesdetailline.ttbloeesdetaillinesingle.AddttbloeesdetaillinesingleRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinesingleRow)ttbloeesdetaillinesingleRow);
          
         var  iLineNo = AsoeentryOEESDetailLineCheckSerLotRequestAPI.iLineNo;
            
         var  lIsFromMenu = AsoeentryOEESDetailLineCheckSerLotRequestAPI.lIsFromMenu;
            
         
         NLogLoggerP.Trace("OEESDetailLineCheckSerLot - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineCheckSerLot(ref pdsContext,  iLineNo,  lIsFromMenu,  pdsoeesdetailline, out lLaunchFl, out dNoSNLots, out dNoSerLotKits, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineCheckSerLot - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
         result.lLaunchFl = lLaunchFl;
         result.dNoSNLots = dNoSNLots;
         result.dNoSerLotKits = dNoSerLotKits;
          
         return result;
          
      }

      public Oeesdetaillineextendsingle OEESDetailLineExtendLoad(int iOrderNo, int iOrderSuf, int iLineNo, string cSpecCostTy, string cBinLoc)
      {   
         var result = new Oeesdetaillineextendsingle();
         
         var pdsoeesdetaillineextend = new pdsoeesdetaillineextendDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailLineExtendLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineExtendLoad(ref pdsContext,  iOrderNo,  iOrderSuf,  iLineNo,  cSpecCostTy,  cBinLoc, out pdsoeesdetaillineextend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineExtendLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetaillineextend); 
    
         if (pdsoeesdetaillineextend.ttbloeesdetaillineextendsingle.Count > 0) 
         { 
             result = Oeesdetaillineextendsingle.BuildOeesdetaillineextendsingleFromRow(pdsoeesdetaillineextend.ttbloeesdetaillineextendsingle[0]);
         } 
              
          
         return result;
          
      }

      public bool OEESDetailLineExtendUpdate(Oeesdetaillineextendsingle oeesdetaillineextendsingle)
      {   
          
         var pdsoeesdetaillineextend = new pdsoeesdetaillineextendDataSet();
            
         DataRow ttbloeesdetaillineextendsingleCriteria = pdsoeesdetaillineextend.ttbloeesdetaillineextendsingle.NewttbloeesdetaillineextendsingleRow();
         Oeesdetaillineextendsingle.UpdateRowFromOeesdetaillineextendsingle(ref ttbloeesdetaillineextendsingleCriteria, oeesdetaillineextendsingle);
         pdsoeesdetaillineextend.ttbloeesdetaillineextendsingle.AddttbloeesdetaillineextendsingleRow((pdsoeesdetaillineextendDataSet.ttbloeesdetaillineextendsingleRow)ttbloeesdetaillineextendsingleCriteria);
            
         bool lUpdateFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailLineExtendUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineExtendUpdate(ref pdsContext,  pdsoeesdetaillineextend, out lUpdateFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineExtendUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetaillineextend); 
    
         return lUpdateFl;
      
      }

      public AsoeentryOEESDetailLineLoadResponseAPI OEESDetailLineLoad(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeentryOEESDetailLineLoadResponseAPI();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESDetailLineLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineLoad(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeesdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
         foreach (DataRow row in pdsoeesdetailline.ttbloeesdetaillinelist)
         {
            result.oeesdetaillinelist.Add(Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(row));
         }     
         if (pdsoeesdetailline.ttbloeesdetaillinesingle.Count > 0)
         {
            result.oeesdetaillinesingle = Oeesdetaillinesingle.BuildOeesdetaillinesingleFromRow(pdsoeesdetailline.ttbloeesdetaillinesingle[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Oeesdetaillinelist> OEESDetailLineReReserve(AsoeentryOEESDetailLineReReserveRequestAPI AsoeentryOEESDetailLineReReserveRequestAPI)
      {   
         var results = new List<Oeesdetaillinelist>();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailLineReReserveRequestAPI.oeesdetaillinelist)
         {
            DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
            Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, obj);
            pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
         }
          
         DataRow ttbloeesdetaillinesingleRow = pdsoeesdetailline.ttbloeesdetaillinesingle.NewttbloeesdetaillinesingleRow();
         Oeesdetaillinesingle.UpdateRowFromOeesdetaillinesingle(ref ttbloeesdetaillinesingleRow, AsoeentryOEESDetailLineReReserveRequestAPI.oeesdetaillinesingle);
         pdsoeesdetailline.ttbloeesdetaillinesingle.AddttbloeesdetaillinesingleRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinesingleRow)ttbloeesdetaillinesingleRow);
          
         
         NLogLoggerP.Trace("OEESDetailLineReReserve - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineReReserve(ref pdsContext, ref pdsoeesdetailline, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineReReserve - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
            foreach (DataRow row in pdsoeesdetailline.ttbloeesdetaillinelist)
            {
                results.Add(Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(row));
            }
            return results;
        
      }

      public AsoeentryOEESDetailLineRowUpdateResponseAPI OEESDetailLineRowUpdate(AsoeentryOEESDetailLineRowUpdateRequestAPI AsoeentryOEESDetailLineRowUpdateRequestAPI)
      {   
         var result = new AsoeentryOEESDetailLineRowUpdateResponseAPI();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lSelectNextRow = false;
         bool lSelectPrevRow = false;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEESDetailLineRowUpdateRequestAPI.oeesdetaillinelist)
         {
            DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
            Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, obj);
            pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
         }
          
         DataRow ttbloeesdetaillinesingleRow = pdsoeesdetailline.ttbloeesdetaillinesingle.NewttbloeesdetaillinesingleRow();
         Oeesdetaillinesingle.UpdateRowFromOeesdetaillinesingle(ref ttbloeesdetaillinesingleRow, AsoeentryOEESDetailLineRowUpdateRequestAPI.oeesdetaillinesingle);
         pdsoeesdetailline.ttbloeesdetaillinesingle.AddttbloeesdetaillinesingleRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinesingleRow)ttbloeesdetaillinesingleRow);
          
         var  iLineNo = AsoeentryOEESDetailLineRowUpdateRequestAPI.iLineNo;
            
         var  dNewQtyShipped = AsoeentryOEESDetailLineRowUpdateRequestAPI.dNewQtyShipped;
            
         var  lNewBOFl = AsoeentryOEESDetailLineRowUpdateRequestAPI.lNewBOFl;
            
         var  lPromptsPresented = AsoeentryOEESDetailLineRowUpdateRequestAPI.lPromptsPresented;
            
         var  lReqCountFl = AsoeentryOEESDetailLineRowUpdateRequestAPI.lReqCountFl;
            
         var  lAdjustQtyOrd = AsoeentryOEESDetailLineRowUpdateRequestAPI.lAdjustQtyOrd;
            
         
         NLogLoggerP.Trace("OEESDetailLineRowUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineRowUpdate(ref pdsContext,  iLineNo,  dNewQtyShipped,  lNewBOFl,  lPromptsPresented,  lReqCountFl,  lAdjustQtyOrd, ref pdsoeesdetailline, out lSelectNextRow, out lSelectPrevRow, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineRowUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesdetailline.ttbloeesdetaillinelist)
         {
            result.oeesdetaillinelist.Add(Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(row));
         }     
         result.lSelectNextRow = lSelectNextRow;
         result.lSelectPrevRow = lSelectPrevRow;
          
         return result;
          
      }

      public AsoeentryOEESDetailLineSetQtyShipToZeroResponseAPI OEESDetailLineSetQtyShipToZero(AsoeentryOEESDetailLineSetQtyShipToZeroRequestAPI AsoeentryOEESDetailLineSetQtyShipToZeroRequestAPI)
      {   
         var result = new AsoeentryOEESDetailLineSetQtyShipToZeroResponseAPI();
         
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         bool lSelectNextLine = false;
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
         Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, AsoeentryOEESDetailLineSetQtyShipToZeroRequestAPI.oeesdetaillinelist);
         pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
          
         DataRow ttbloeesdetaillinesingleRow = pdsoeesdetailline.ttbloeesdetaillinesingle.NewttbloeesdetaillinesingleRow();
         Oeesdetaillinesingle.UpdateRowFromOeesdetaillinesingle(ref ttbloeesdetaillinesingleRow, AsoeentryOEESDetailLineSetQtyShipToZeroRequestAPI.oeesdetaillinesingle);
         pdsoeesdetailline.ttbloeesdetaillinesingle.AddttbloeesdetaillinesingleRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinesingleRow)ttbloeesdetaillinesingleRow);
          
         
         NLogLoggerP.Trace("OEESDetailLineSetQtyShipToZero - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineSetQtyShipToZero(ref pdsContext, ref pdsoeesdetailline, out lSelectNextLine, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineSetQtyShipToZero - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetailline); 
    
         if (pdsoeesdetailline.ttbloeesdetaillinelist.Count > 0)
         {
            result.oeesdetaillinelist = Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(pdsoeesdetailline.ttbloeesdetaillinelist[0]);
         }
                    
         result.lSelectNextLine = lSelectNextLine;
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoeentryOEESLaunchDetailCheckResponseAPI OEESLaunchDetailCheck(int iOrderNo, int iOrderSuf, int iJrnlNo)
      {   
         var result = new AsoeentryOEESLaunchDetailCheckResponseAPI();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lLaunchOK = false;
         string cInitTabChoice = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESLaunchDetailCheck - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESLaunchDetailCheck(ref pdsContext,  iOrderNo,  iOrderSuf,  iJrnlNo, out lLaunchOK, out cInitTabChoice, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESLaunchDetailCheck - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lLaunchOK = lLaunchOK;
         result.cInitTabChoice = cInitTabChoice;
          
         return result;
          
      }

      public AsoeentryOEESLoadOrderListResponseAPI OEESLoadOrderList(Oeesloadorderlistcriteria oeesloadorderlistcriteria)
      {   
         var result = new AsoeentryOEESLoadOrderListResponseAPI();
         
         var pdsoeesloadorderlist = new pdsoeesloadorderlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeesloadorderlistcriteriaCriteria = pdsoeesloadorderlist.ttbloeesloadorderlistcriteria.NewttbloeesloadorderlistcriteriaRow();
         Oeesloadorderlistcriteria.UpdateRowFromOeesloadorderlistcriteria(ref ttbloeesloadorderlistcriteriaCriteria, oeesloadorderlistcriteria);
         pdsoeesloadorderlist.ttbloeesloadorderlistcriteria.AddttbloeesloadorderlistcriteriaRow((pdsoeesloadorderlistDataSet.ttbloeesloadorderlistcriteriaRow)ttbloeesloadorderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESLoadOrderList - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESLoadOrderList(ref pdsContext, ref pdsoeesloadorderlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESLoadOrderList - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesloadorderlist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesloadorderlist.ttbloeesloadorderlistresults)
         {
            result.oeesloadorderlistresults.Add(Oeesloadorderlistresults.BuildOeesloadorderlistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> OEESReserveOrder(int iOrderNo, int iOrderSuf)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESReserveOrder - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESReserveOrder(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESReserveOrder - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeentryOEESReserveOrderMultipleResponseAPI OEESReserveOrderMultiple(IEnumerable<Oeesshipordermultiple> oeesshipordermultiple)
      {   
         var result = new AsoeentryOEESReserveOrderMultipleResponseAPI();
         
         var pdsoeesshipordermultiple = new pdsoeesshipordermultipleDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeesshipordermultiple)
         {
             DataRow row = pdsoeesshipordermultiple.ttbloeesshipordermultiple.NewttbloeesshipordermultipleRow();
             Oeesshipordermultiple.UpdateRowFromOeesshipordermultiple(ref row, obj);
             pdsoeesshipordermultiple.ttbloeesshipordermultiple.AddttbloeesshipordermultipleRow((pdsoeesshipordermultipleDataSet.ttbloeesshipordermultipleRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESReserveOrderMultiple - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESReserveOrderMultiple(ref pdsContext, ref pdsoeesshipordermultiple, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESReserveOrderMultiple - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesshipordermultiple); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesshipordermultiple.ttbloeesshipordermultiple)
         {
            result.oeesshipordermultiple.Add(Oeesshipordermultiple.BuildOeesshipordermultipleFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOEESShipOrderMultipleResponseAPI OEESShipOrderMultiple(IEnumerable<Oeesshipordermultiple> oeesshipordermultiple)
      {   
         var result = new AsoeentryOEESShipOrderMultipleResponseAPI();
         
         var pdsoeesshipordermultiple = new pdsoeesshipordermultipleDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeesshipordermultiple)
         {
             DataRow row = pdsoeesshipordermultiple.ttbloeesshipordermultiple.NewttbloeesshipordermultipleRow();
             Oeesshipordermultiple.UpdateRowFromOeesshipordermultiple(ref row, obj);
             pdsoeesshipordermultiple.ttbloeesshipordermultiple.AddttbloeesshipordermultipleRow((pdsoeesshipordermultipleDataSet.ttbloeesshipordermultipleRow)row);
         }
        
         bool lIBRSFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESShipOrderMultiple - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESShipOrderMultiple(ref pdsContext, ref pdsoeesshipordermultiple, out lIBRSFl, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESShipOrderMultiple - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesshipordermultiple); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesshipordermultiple.ttbloeesshipordermultiple)
         {
            result.oeesshipordermultiple.Add(Oeesshipordermultiple.BuildOeesshipordermultipleFromRow(row));
         }     
         result.lIBRSFl = lIBRSFl;
          
         return result;
          
      }

      public AsoeentryOEESShipUnShipOrderResponseAPI OEESShipUnShipOrder(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeentryOEESShipUnShipOrderResponseAPI();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lIBRSFlag = false;
         int iStageCd = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESShipUnShipOrder - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESShipUnShipOrder(ref pdsContext,  iOrderNo,  iOrderSuf, out lIBRSFlag, out iStageCd, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESShipUnShipOrder - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lIBRSFlag = lIBRSFlag;
         result.iStageCd = iStageCd;
          
         return result;
          
      }

      public AsoeentryOEESSplitToBackOrderCheckResponseAPI OEESSplitToBackOrderCheck(int iOrderNo, int iOrderSuf)
      {   
         var result = new AsoeentryOEESSplitToBackOrderCheckResponseAPI();
         
         var pdswlstatus = new pdswlstatusDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         bool lSplitOK = false;
         string cInitTabChoice = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEESSplitToBackOrderCheck - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESSplitToBackOrderCheck(ref pdsContext,  iOrderNo,  iOrderSuf, out lSplitOK, out cInitTabChoice, out pdswlstatus, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESSplitToBackOrderCheck - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswlstatus); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdswlstatus.ttblwlstatus.Count > 0)
         {
            result.wlstatus = Wlstatus.BuildWlstatusFromRow(pdswlstatus.ttblwlstatus[0]);
         }
                    
         result.lSplitOK = lSplitOK;
         result.cInitTabChoice = cInitTabChoice;
          
         return result;
          
      }

      public AsoeentryOEETPrintLoadResponseAPI OEETPrintLoad(AsoeentryOEETPrintLoadRequestAPI AsoeentryOEETPrintLoadRequestAPI)
      {   
         var result = new AsoeentryOEETPrintLoadResponseAPI();
         
         var pdsoeetprintloadcriteria = new pdsoeetprintloadcriteriaDataSet();
            
         var pdsoeetprintglobals = new pdsoeetprintglobalsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeetprintglobalsRow = pdsoeetprintglobals.ttbloeetprintglobals.NewttbloeetprintglobalsRow();
         Oeetprintglobals.UpdateRowFromOeetprintglobals(ref ttbloeetprintglobalsRow, AsoeentryOEETPrintLoadRequestAPI.oeetprintglobals);
         pdsoeetprintglobals.ttbloeetprintglobals.AddttbloeetprintglobalsRow((pdsoeetprintglobalsDataSet.ttbloeetprintglobalsRow)ttbloeetprintglobalsRow);
          
         DataRow ttbloeetprintloadcriteriaRow = pdsoeetprintloadcriteria.ttbloeetprintloadcriteria.NewttbloeetprintloadcriteriaRow();
         Oeetprintloadcriteria.UpdateRowFromOeetprintloadcriteria(ref ttbloeetprintloadcriteriaRow, AsoeentryOEETPrintLoadRequestAPI.oeetprintloadcriteria);
         pdsoeetprintloadcriteria.ttbloeetprintloadcriteria.AddttbloeetprintloadcriteriaRow((pdsoeetprintloadcriteriaDataSet.ttbloeetprintloadcriteriaRow)ttbloeetprintloadcriteriaRow);
          
         
         NLogLoggerP.Trace("OEETPrintLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETPrintLoad(ref pdsContext,  pdsoeetprintloadcriteria, ref pdsoeetprintglobals, out pdsoeetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETPrintLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetprintloadcriteria); 
    
         foreach (DataRow row in pdsoeetprint.ttbloeetprintreportlist)
         {
            result.oeetprintreportlist.Add(Oeetprintreportlist.BuildOeetprintreportlistFromRow(row));
         }     
         if (pdsoeetprint.ttbloeetprintscreensingle.Count > 0)
         {
            result.oeetprintscreensingle = Oeetprintscreensingle.BuildOeetprintscreensingleFromRow(pdsoeetprint.ttbloeetprintscreensingle[0]);
         }
                    
         if (pdsoeetprintglobals.ttbloeetprintglobals.Count > 0)
         {
            result.oeetprintglobals = Oeetprintglobals.BuildOeetprintglobalsFromRow(pdsoeetprintglobals.ttbloeetprintglobals[0]);
         }
                    
          
         return result;
          
      }

      public AsoeentryOEETPrintLoadChangeOrderResponseAPI OEETPrintLoadChangeOrder(AsoeentryOEETPrintLoadChangeOrderRequestAPI AsoeentryOEETPrintLoadChangeOrderRequestAPI)
      {   
         var result = new AsoeentryOEETPrintLoadChangeOrderResponseAPI();
         
         var pdsoeetprintloadcriteria = new pdsoeetprintloadcriteriaDataSet();
            
         var pdsoeetprintglobals = new pdsoeetprintglobalsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEETPrintLoadChangeOrderRequestAPI.oeetprintreportlist)
         {
            DataRow ttbloeetprintreportlistRow = pdsoeetprint.ttbloeetprintreportlist.NewttbloeetprintreportlistRow();
            Oeetprintreportlist.UpdateRowFromOeetprintreportlist(ref ttbloeetprintreportlistRow, obj);
            pdsoeetprint.ttbloeetprintreportlist.AddttbloeetprintreportlistRow((pdsoeetprintDataSet.ttbloeetprintreportlistRow)ttbloeetprintreportlistRow);
         }
          
         DataRow ttbloeetprintscreensingleRow = pdsoeetprint.ttbloeetprintscreensingle.NewttbloeetprintscreensingleRow();
         Oeetprintscreensingle.UpdateRowFromOeetprintscreensingle(ref ttbloeetprintscreensingleRow, AsoeentryOEETPrintLoadChangeOrderRequestAPI.oeetprintscreensingle);
         pdsoeetprint.ttbloeetprintscreensingle.AddttbloeetprintscreensingleRow((pdsoeetprintDataSet.ttbloeetprintscreensingleRow)ttbloeetprintscreensingleRow);
          
         DataRow ttbloeetprintglobalsRow = pdsoeetprintglobals.ttbloeetprintglobals.NewttbloeetprintglobalsRow();
         Oeetprintglobals.UpdateRowFromOeetprintglobals(ref ttbloeetprintglobalsRow, AsoeentryOEETPrintLoadChangeOrderRequestAPI.oeetprintglobals);
         pdsoeetprintglobals.ttbloeetprintglobals.AddttbloeetprintglobalsRow((pdsoeetprintglobalsDataSet.ttbloeetprintglobalsRow)ttbloeetprintglobalsRow);
          
         DataRow ttbloeetprintloadcriteriaRow = pdsoeetprintloadcriteria.ttbloeetprintloadcriteria.NewttbloeetprintloadcriteriaRow();
         Oeetprintloadcriteria.UpdateRowFromOeetprintloadcriteria(ref ttbloeetprintloadcriteriaRow, AsoeentryOEETPrintLoadChangeOrderRequestAPI.oeetprintloadcriteria);
         pdsoeetprintloadcriteria.ttbloeetprintloadcriteria.AddttbloeetprintloadcriteriaRow((pdsoeetprintloadcriteriaDataSet.ttbloeetprintloadcriteriaRow)ttbloeetprintloadcriteriaRow);
          
         
         NLogLoggerP.Trace("OEETPrintLoadChangeOrder - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETPrintLoadChangeOrder(ref pdsContext,  pdsoeetprintloadcriteria, ref pdsoeetprintglobals, ref pdsoeetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETPrintLoadChangeOrder - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetprintloadcriteria); 
    
         foreach (DataRow row in pdsoeetprint.ttbloeetprintreportlist)
         {
            result.oeetprintreportlist.Add(Oeetprintreportlist.BuildOeetprintreportlistFromRow(row));
         }     
         if (pdsoeetprint.ttbloeetprintscreensingle.Count > 0)
         {
            result.oeetprintscreensingle = Oeetprintscreensingle.BuildOeetprintscreensingleFromRow(pdsoeetprint.ttbloeetprintscreensingle[0]);
         }
                    
         if (pdsoeetprintglobals.ttbloeetprintglobals.Count > 0)
         {
            result.oeetprintglobals = Oeetprintglobals.BuildOeetprintglobalsFromRow(pdsoeetprintglobals.ttbloeetprintglobals[0]);
         }
                    
          
         return result;
          
      }

      public Oeetprintscreensingle OEETPrintValidate(AsoeentryOEETPrintValidateRequestAPI AsoeentryOEETPrintValidateRequestAPI)
      {   
         var result = new Oeetprintscreensingle();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEETPrintValidateRequestAPI.oeetprintreportlist)
         {
            DataRow ttbloeetprintreportlistRow = pdsoeetprint.ttbloeetprintreportlist.NewttbloeetprintreportlistRow();
            Oeetprintreportlist.UpdateRowFromOeetprintreportlist(ref ttbloeetprintreportlistRow, obj);
            pdsoeetprint.ttbloeetprintreportlist.AddttbloeetprintreportlistRow((pdsoeetprintDataSet.ttbloeetprintreportlistRow)ttbloeetprintreportlistRow);
         }
          
         DataRow ttbloeetprintscreensingleRow = pdsoeetprint.ttbloeetprintscreensingle.NewttbloeetprintscreensingleRow();
         Oeetprintscreensingle.UpdateRowFromOeetprintscreensingle(ref ttbloeetprintscreensingleRow, AsoeentryOEETPrintValidateRequestAPI.oeetprintscreensingle);
         pdsoeetprint.ttbloeetprintscreensingle.AddttbloeetprintscreensingleRow((pdsoeetprintDataSet.ttbloeetprintscreensingleRow)ttbloeetprintscreensingleRow);
          
         foreach (var obj in AsoeentryOEETPrintValidateRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  iOrderNo = AsoeentryOEETPrintValidateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeentryOEETPrintValidateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OEETPrintValidate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETPrintValidate(ref pdsContext,  iOrderNo,  iOrderSuf,  pdsprintersettings, ref pdsoeetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETPrintValidate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         if (pdsoeetprint.ttbloeetprintscreensingle.Count > 0) 
         { 
             result = Oeetprintscreensingle.BuildOeetprintscreensingleFromRow(pdsoeetprint.ttbloeetprintscreensingle[0]);
         } 
              
          
         return result;
          
      }

      public void OEETPrintLaunch(AsoeentryOEETPrintLaunchRequestAPI AsoeentryOEETPrintLaunchRequestAPI)
      {   
         
         var pdsoeetprintlaunchcriteria = new pdsoeetprintlaunchcriteriaDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOEETPrintLaunchRequestAPI.oeetprintreportlist)
         {
            DataRow ttbloeetprintreportlistRow = pdsoeetprint.ttbloeetprintreportlist.NewttbloeetprintreportlistRow();
            Oeetprintreportlist.UpdateRowFromOeetprintreportlist(ref ttbloeetprintreportlistRow, obj);
            pdsoeetprint.ttbloeetprintreportlist.AddttbloeetprintreportlistRow((pdsoeetprintDataSet.ttbloeetprintreportlistRow)ttbloeetprintreportlistRow);
         }
          
         DataRow ttbloeetprintscreensingleRow = pdsoeetprint.ttbloeetprintscreensingle.NewttbloeetprintscreensingleRow();
         Oeetprintscreensingle.UpdateRowFromOeetprintscreensingle(ref ttbloeetprintscreensingleRow, AsoeentryOEETPrintLaunchRequestAPI.oeetprintscreensingle);
         pdsoeetprint.ttbloeetprintscreensingle.AddttbloeetprintscreensingleRow((pdsoeetprintDataSet.ttbloeetprintscreensingleRow)ttbloeetprintscreensingleRow);
          
         DataRow ttbloeetprintlaunchcriteriaRow = pdsoeetprintlaunchcriteria.ttbloeetprintlaunchcriteria.NewttbloeetprintlaunchcriteriaRow();
         Oeetprintlaunchcriteria.UpdateRowFromOeetprintlaunchcriteria(ref ttbloeetprintlaunchcriteriaRow, AsoeentryOEETPrintLaunchRequestAPI.oeetprintlaunchcriteria);
         pdsoeetprintlaunchcriteria.ttbloeetprintlaunchcriteria.AddttbloeetprintlaunchcriteriaRow((pdsoeetprintlaunchcriteriaDataSet.ttbloeetprintlaunchcriteriaRow)ttbloeetprintlaunchcriteriaRow);
          
         foreach (var obj in AsoeentryOEETPrintLaunchRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         
         NLogLoggerP.Trace("OEETPrintLaunch - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETPrintLaunch(ref pdsContext,  pdsoeetprintlaunchcriteria,  pdsprintersettings,  pdsoeetprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETPrintLaunch - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetprintlaunchcriteria);
      }

      public Oeetautoprintchk OEETAutoPrintLaunchCheck(Oeetautoprintchk oeetautoprintchk)
      {   
         var result = new Oeetautoprintchk();
         
         var pdsoeetautoprintchk = new pdsoeetautoprintchkDataSet();
            
         DataRow ttbloeetautoprintchkCriteria = pdsoeetautoprintchk.ttbloeetautoprintchk.NewttbloeetautoprintchkRow();
         Oeetautoprintchk.UpdateRowFromOeetautoprintchk(ref ttbloeetautoprintchkCriteria, oeetautoprintchk);
         pdsoeetautoprintchk.ttbloeetautoprintchk.AddttbloeetautoprintchkRow((pdsoeetautoprintchkDataSet.ttbloeetautoprintchkRow)ttbloeetautoprintchkCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEETAutoPrintLaunchCheck - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETAutoPrintLaunchCheck(ref pdsContext, ref pdsoeetautoprintchk, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETAutoPrintLaunchCheck - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetautoprintchk); 
    
         if (pdsoeetautoprintchk.ttbloeetautoprintchk.Count > 0) 
         { 
             result = Oeetautoprintchk.BuildOeetautoprintchkFromRow(pdsoeetautoprintchk.ttbloeetautoprintchk[0]);
         } 
              
          
         return result;
          
      }

      public Oeeclines OEECFieldLeave(AsoeentryOEECFieldLeaveRequestAPI AsoeentryOEECFieldLeaveRequestAPI)
      {   
         var result = new Oeeclines();
         
         var pdsoeeclines = new pdsoeeclinesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeeclinesRow = pdsoeeclines.ttbloeeclines.NewttbloeeclinesRow();
         Oeeclines.UpdateRowFromOeeclines(ref ttbloeeclinesRow, AsoeentryOEECFieldLeaveRequestAPI.oeeclines);
         pdsoeeclines.ttbloeeclines.AddttbloeeclinesRow((pdsoeeclinesDataSet.ttbloeeclinesRow)ttbloeeclinesRow);
          
         var  cField = AsoeentryOEECFieldLeaveRequestAPI.cField;
            
         
         NLogLoggerP.Trace("OEECFieldLeave - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEECFieldLeave(ref pdsContext,  cField, ref pdsoeeclines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEECFieldLeave - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeeclines); 
    
         if (pdsoeeclines.ttbloeeclines.Count > 0) 
         { 
             result = Oeeclines.BuildOeeclinesFromRow(pdsoeeclines.ttbloeeclines[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeeclines> OEECLoadLines(Oeeccriteria oeeccriteria)
      {   
         var results = new List<Oeeclines>();
         
         var pdsoeeccriteria = new pdsoeeccriteriaDataSet();
            
         var pdsoeeclines = new pdsoeeclinesDataSet();
            
         DataRow ttbloeeccriteriaCriteria = pdsoeeccriteria.ttbloeeccriteria.NewttbloeeccriteriaRow();
         Oeeccriteria.UpdateRowFromOeeccriteria(ref ttbloeeccriteriaCriteria, oeeccriteria);
         pdsoeeccriteria.ttbloeeccriteria.AddttbloeeccriteriaRow((pdsoeeccriteriaDataSet.ttbloeeccriteriaRow)ttbloeeccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEECLoadLines - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEECLoadLines(ref pdsContext,  pdsoeeccriteria, out pdsoeeclines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEECLoadLines - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeeccriteria); 
    
            foreach (DataRow row in pdsoeeclines.ttbloeeclines)
            {
                results.Add(Oeeclines.BuildOeeclinesFromRow(row));
            }
            return results;
        
      }

      public void OEECRowPreSelect(Oeeclines oeeclines)
      {   
         
         var pdsoeeclines = new pdsoeeclinesDataSet();
            
         DataRow ttbloeeclinesCriteria = pdsoeeclines.ttbloeeclines.NewttbloeeclinesRow();
         Oeeclines.UpdateRowFromOeeclines(ref ttbloeeclinesCriteria, oeeclines);
         pdsoeeclines.ttbloeeclines.AddttbloeeclinesRow((pdsoeeclinesDataSet.ttbloeeclinesRow)ttbloeeclinesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEECRowPreSelect - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEECRowPreSelect(ref pdsContext,  pdsoeeclines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEECRowPreSelect - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeeclines);
      }

      public void OEECUpdateLines(Oeeclines oeeclines)
      {   
         
         var pdsoeeclines = new pdsoeeclinesDataSet();
            
         DataRow ttbloeeclinesCriteria = pdsoeeclines.ttbloeeclines.NewttbloeeclinesRow();
         Oeeclines.UpdateRowFromOeeclines(ref ttbloeeclinesCriteria, oeeclines);
         pdsoeeclines.ttbloeeclines.AddttbloeeclinesRow((pdsoeeclinesDataSet.ttbloeeclinesRow)ttbloeeclinesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEECUpdateLines - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEECUpdateLines(ref pdsContext,  pdsoeeclines, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEECUpdateLines - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeeclines);
      }

      public IEnumerable<Oeetdupcustporesults> OEETDupCustPoGetList(Oeetdupcustpocriteria oeetdupcustpocriteria)
      {   
         var results = new List<Oeetdupcustporesults>();
         
         var pdsoeetdupcustpo = new pdsoeetdupcustpoDataSet();
            
         DataRow ttbloeetdupcustpocriteriaCriteria = pdsoeetdupcustpo.ttbloeetdupcustpocriteria.NewttbloeetdupcustpocriteriaRow();
         Oeetdupcustpocriteria.UpdateRowFromOeetdupcustpocriteria(ref ttbloeetdupcustpocriteriaCriteria, oeetdupcustpocriteria);
         pdsoeetdupcustpo.ttbloeetdupcustpocriteria.AddttbloeetdupcustpocriteriaRow((pdsoeetdupcustpoDataSet.ttbloeetdupcustpocriteriaRow)ttbloeetdupcustpocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEETDupCustPoGetList - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEETDupCustPoGetList(ref pdsContext, ref pdsoeetdupcustpo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEETDupCustPoGetList - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetdupcustpo); 
    
            foreach (DataRow row in pdsoeetdupcustpo.ttbloeetdupcustporesults)
            {
                results.Add(Oeetdupcustporesults.BuildOeetdupcustporesultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Oegetprodtierslist> OEGetProductTiersList(AsoeentryOEGetProductTiersListRequestAPI AsoeentryOEGetProductTiersListRequestAPI)
      {   
         var results = new List<Oegetprodtierslist>();
         
         var pdsoegetprodtierslist = new pdsoegetprodtierslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  iOrderNo = AsoeentryOEGetProductTiersListRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeentryOEGetProductTiersListRequestAPI.iOrderSuf;
            
         var  cProduct = AsoeentryOEGetProductTiersListRequestAPI.cProduct;
            
         
         NLogLoggerP.Trace("OEGetProductTiersList - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEGetProductTiersList(ref pdsContext,  iOrderNo,  iOrderSuf,  cProduct, out pdsoegetprodtierslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEGetProductTiersList - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoegetprodtierslist); 
    
            foreach (DataRow row in pdsoegetprodtierslist.ttbloegetprodtierslist)
            {
                results.Add(Oegetprodtierslist.BuildOegetprodtierslistFromRow(row));
            }
            return results;
        
      }

      public AsoeentryOEERShipRequestLoadResponseAPI OEERShipRequestLoad(Oeercriteria oeercriteria)
      {   
         var result = new AsoeentryOEERShipRequestLoadResponseAPI();
         
         var pdsoeercriteria = new pdsoeercriteriaDataSet();
            
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         DataRow ttbloeercriteriaCriteria = pdsoeercriteria.ttbloeercriteria.NewttbloeercriteriaRow();
         Oeercriteria.UpdateRowFromOeercriteria(ref ttbloeercriteriaCriteria, oeercriteria);
         pdsoeercriteria.ttbloeercriteria.AddttbloeercriteriaRow((pdsoeercriteriaDataSet.ttbloeercriteriaRow)ttbloeercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("OEERShipRequestLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestLoad(ref pdsContext,  pdsoeercriteria, out pdsoeerdetail, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("OEERShipRequestLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeercriteria); 
    
         foreach (DataRow row in pdsoeerdetail.ttbloeerdetail)
         {
            result.oeerdetail.Add(Oeerdetail.BuildOeerdetailFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void OEERShipRequestDelete(IEnumerable<Oeerdetail> oeerdetail)
      {   
         
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         foreach (var obj in oeerdetail)
         {
             DataRow row = pdsoeerdetail.ttbloeerdetail.NewttbloeerdetailRow();
             Oeerdetail.UpdateRowFromOeerdetail(ref row, obj);
             pdsoeerdetail.ttbloeerdetail.AddttbloeerdetailRow((pdsoeerdetailDataSet.ttbloeerdetailRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERShipRequestDelete - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestDelete(ref pdsContext,  pdsoeerdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERShipRequestDelete - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeerdetail);
      }

      public Oeerdetail OEERShipRequestAdd()
      {   
         var result = new Oeerdetail();
         
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERShipRequestAdd - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestAdd(ref pdsContext, out pdsoeerdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERShipRequestAdd - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeerdetail); 
    
         if (pdsoeerdetail.ttbloeerdetail.Count > 0) 
         { 
             result = Oeerdetail.BuildOeerdetailFromRow(pdsoeerdetail.ttbloeerdetail[0]);
         } 
              
          
         return result;
          
      }

      public Oeerdetail OEERShipRequestPrint(AsoeentryOEERShipRequestPrintRequestAPI AsoeentryOEERShipRequestPrintRequestAPI)
      {   
         var result = new Oeerdetail();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeerdetailRow = pdsoeerdetail.ttbloeerdetail.NewttbloeerdetailRow();
         Oeerdetail.UpdateRowFromOeerdetail(ref ttbloeerdetailRow, AsoeentryOEERShipRequestPrintRequestAPI.oeerdetail);
         pdsoeerdetail.ttbloeerdetail.AddttbloeerdetailRow((pdsoeerdetailDataSet.ttbloeerdetailRow)ttbloeerdetailRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsoeentryOEERShipRequestPrintRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("OEERShipRequestPrint - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestPrint(ref pdsContext,  pdsprintersettings, ref pdsoeerdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERShipRequestPrint - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         if (pdsoeerdetail.ttbloeerdetail.Count > 0) 
         { 
             result = Oeerdetail.BuildOeerdetailFromRow(pdsoeerdetail.ttbloeerdetail[0]);
         } 
              
          
         return result;
          
      }

      public Oeerdetail OEERShipRequestUpdate(Oeerdetail oeerdetail)
      {   
         var result = new Oeerdetail();
         
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         DataRow ttbloeerdetailCriteria = pdsoeerdetail.ttbloeerdetail.NewttbloeerdetailRow();
         Oeerdetail.UpdateRowFromOeerdetail(ref ttbloeerdetailCriteria, oeerdetail);
         pdsoeerdetail.ttbloeerdetail.AddttbloeerdetailRow((pdsoeerdetailDataSet.ttbloeerdetailRow)ttbloeerdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEERShipRequestUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestUpdate(ref pdsContext, ref pdsoeerdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERShipRequestUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeerdetail); 
    
         if (pdsoeerdetail.ttbloeerdetail.Count > 0) 
         { 
             result = Oeerdetail.BuildOeerdetailFromRow(pdsoeerdetail.ttbloeerdetail[0]);
         } 
              
          
         return result;
          
      }

      public Oeerdetail OEERShipRequestAddrSelect(AsoeentryOEERShipRequestAddrSelectRequestAPI AsoeentryOEERShipRequestAddrSelectRequestAPI)
      {   
         var result = new Oeerdetail();
         
         var pdsoeeraddrselect = new pdsoeeraddrselectDataSet();
            
         var pdsoeerdetail = new pdsoeerdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeeraddrselectRow = pdsoeeraddrselect.ttbloeeraddrselect.NewttbloeeraddrselectRow();
         Oeeraddrselect.UpdateRowFromOeeraddrselect(ref ttbloeeraddrselectRow, AsoeentryOEERShipRequestAddrSelectRequestAPI.oeeraddrselect);
         pdsoeeraddrselect.ttbloeeraddrselect.AddttbloeeraddrselectRow((pdsoeeraddrselectDataSet.ttbloeeraddrselectRow)ttbloeeraddrselectRow);
          
         DataRow ttbloeerdetailRow = pdsoeerdetail.ttbloeerdetail.NewttbloeerdetailRow();
         Oeerdetail.UpdateRowFromOeerdetail(ref ttbloeerdetailRow, AsoeentryOEERShipRequestAddrSelectRequestAPI.oeerdetail);
         pdsoeerdetail.ttbloeerdetail.AddttbloeerdetailRow((pdsoeerdetailDataSet.ttbloeerdetailRow)ttbloeerdetailRow);
          
         
         NLogLoggerP.Trace("OEERShipRequestAddrSelect - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEERShipRequestAddrSelect(ref pdsContext,  pdsoeeraddrselect, ref pdsoeerdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEERShipRequestAddrSelect - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeeraddrselect); 
    
         if (pdsoeerdetail.ttbloeerdetail.Count > 0) 
         { 
             result = Oeerdetail.BuildOeerdetailFromRow(pdsoeerdetail.ttbloeerdetail[0]);
         } 
              
          
         return result;
          
      }

      public bool UpdateTallyPrevFields(int iOrderNo, int iOrderSuf, int iLineNo)
      {   
          
         bool lHoldDelayFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateTallyPrevFields - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.UpdateTallyPrevFields(ref pdsContext,  iOrderNo,  iOrderSuf,  iLineNo, out lHoldDelayFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateTallyPrevFields - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lHoldDelayFl;
      
      }

      public AsoeentryOEESDetailLineAfterTallyResponseAPI OEESDetailLineAfterTally(AsoeentryOEESDetailLineAfterTallyRequestAPI AsoeentryOEESDetailLineAfterTallyRequestAPI)
      {   
         var result = new AsoeentryOEESDetailLineAfterTallyResponseAPI();
         
         var pdsoeesdetaillineaftertally = new pdsoeesdetaillineaftertallyDataSet();
            
         var pdsoeesdetailline = new pdsoeesdetaillineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeesdetaillineaftertallyRow = pdsoeesdetaillineaftertally.ttbloeesdetaillineaftertally.NewttbloeesdetaillineaftertallyRow();
         Oeesdetaillineaftertally.UpdateRowFromOeesdetaillineaftertally(ref ttbloeesdetaillineaftertallyRow, AsoeentryOEESDetailLineAfterTallyRequestAPI.oeesdetaillineaftertally);
         pdsoeesdetaillineaftertally.ttbloeesdetaillineaftertally.AddttbloeesdetaillineaftertallyRow((pdsoeesdetaillineaftertallyDataSet.ttbloeesdetaillineaftertallyRow)ttbloeesdetaillineaftertallyRow);
          
         foreach (var obj in AsoeentryOEESDetailLineAfterTallyRequestAPI.oeesdetaillinelist)
         {
            DataRow ttbloeesdetaillinelistRow = pdsoeesdetailline.ttbloeesdetaillinelist.NewttbloeesdetaillinelistRow();
            Oeesdetaillinelist.UpdateRowFromOeesdetaillinelist(ref ttbloeesdetaillinelistRow, obj);
            pdsoeesdetailline.ttbloeesdetaillinelist.AddttbloeesdetaillinelistRow((pdsoeesdetaillineDataSet.ttbloeesdetaillinelistRow)ttbloeesdetaillinelistRow);
         }
          
         
         NLogLoggerP.Trace("OEESDetailLineAfterTally - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEESDetailLineAfterTally(ref pdsContext,  pdsoeesdetaillineaftertally, ref pdsoeesdetailline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEESDetailLineAfterTally - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeesdetaillineaftertally); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeesdetailline.ttbloeesdetaillinelist)
         {
            result.oeesdetaillinelist.Add(Oeesdetaillinelist.BuildOeesdetaillinelistFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeentryOeetManRebSearchResponseAPI OeetManRebSearch(Manrebsearchcriteria manrebsearchcriteria)
      {   
         var result = new AsoeentryOeetManRebSearchResponseAPI();
         
         var pdsmanrebsearch = new pdsmanrebsearchDataSet();
            
         DataRow ttblmanrebsearchcriteriaCriteria = pdsmanrebsearch.ttblmanrebsearchcriteria.NewttblmanrebsearchcriteriaRow();
         Manrebsearchcriteria.UpdateRowFromManrebsearchcriteria(ref ttblmanrebsearchcriteriaCriteria, manrebsearchcriteria);
         pdsmanrebsearch.ttblmanrebsearchcriteria.AddttblmanrebsearchcriteriaRow((pdsmanrebsearchDataSet.ttblmanrebsearchcriteriaRow)ttblmanrebsearchcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMorerecords = false;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("OeetManRebSearch - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OeetManRebSearch(ref pdsContext, ref pdsmanrebsearch, out cErrorMessage, out lMorerecords, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("OeetManRebSearch - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmanrebsearch); 
    
         foreach (DataRow row in pdsmanrebsearch.ttblmanrebsearchresults)
         {
            result.manrebsearchresults.Add(Manrebsearchresults.BuildManrebsearchresultsFromRow(row));
         }     
         result.lMorerecords = lMorerecords;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public decimal OeetManRebAttach(Manrebattachcriteria manrebattachcriteria)
      {   
          
         var pdsmanrebattach = new pdsmanrebattachDataSet();
            
         DataRow ttblmanrebattachcriteriaCriteria = pdsmanrebattach.ttblmanrebattachcriteria.NewttblmanrebattachcriteriaRow();
         Manrebattachcriteria.UpdateRowFromManrebattachcriteria(ref ttblmanrebattachcriteriaCriteria, manrebattachcriteria);
         pdsmanrebattach.ttblmanrebattachcriteria.AddttblmanrebattachcriteriaRow((pdsmanrebattachDataSet.ttblmanrebattachcriteriaRow)ttblmanrebattachcriteriaCriteria);
            
         decimal vRecalcprice = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OeetManRebAttach - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OeetManRebAttach(ref pdsContext,  pdsmanrebattach, out vRecalcprice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OeetManRebAttach - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmanrebattach); 
    
         return vRecalcprice;
      
      }

      public AsoeentryOeetmanrebcreateResponseAPI Oeetmanrebcreate(Manrebcreatecriteria manrebcreatecriteria)
      {   
         var result = new AsoeentryOeetmanrebcreateResponseAPI();
         
         var pdsmanrebcreate = new pdsmanrebcreateDataSet();
            
         DataRow ttblmanrebcreatecriteriaCriteria = pdsmanrebcreate.ttblmanrebcreatecriteria.NewttblmanrebcreatecriteriaRow();
         Manrebcreatecriteria.UpdateRowFromManrebcreatecriteria(ref ttblmanrebcreatecriteriaCriteria, manrebcreatecriteria);
         pdsmanrebcreate.ttblmanrebcreatecriteria.AddttblmanrebcreatecriteriaRow((pdsmanrebcreateDataSet.ttblmanrebcreatecriteriaRow)ttblmanrebcreatecriteriaCriteria);
            
         int iRebrecno = 0;
         decimal vRecalcprice = 0;
         string cErrorMessage = string.Empty;
         string cWarningMsg = string.Empty;
   
         
         NLogLoggerP.Trace("Oeetmanrebcreate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.Oeetmanrebcreate(ref pdsContext,  pdsmanrebcreate, out iRebrecno, out vRecalcprice, out cErrorMessage, out cWarningMsg);
               }
            });
         NLogLoggerP.Info("Oeetmanrebcreate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmanrebcreate); 
    
         result.iRebrecno = iRebrecno;
         result.vRecalcprice = vRecalcprice;
         result.cWarningMsg = cWarningMsg;
          
         return result;
          
      }

      public decimal OeetManRebRemove(Manrebremcriteria manrebremcriteria)
      {   
          
         var pdsmanrebremove = new pdsmanrebremoveDataSet();
            
         DataRow ttblmanrebremcriteriaCriteria = pdsmanrebremove.ttblmanrebremcriteria.NewttblmanrebremcriteriaRow();
         Manrebremcriteria.UpdateRowFromManrebremcriteria(ref ttblmanrebremcriteriaCriteria, manrebremcriteria);
         pdsmanrebremove.ttblmanrebremcriteria.AddttblmanrebremcriteriaRow((pdsmanrebremoveDataSet.ttblmanrebremcriteriaRow)ttblmanrebremcriteriaCriteria);
            
         decimal vRecalcprice = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OeetManRebRemove - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OeetManRebRemove(ref pdsContext,  pdsmanrebremove, out vRecalcprice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OeetManRebRemove - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmanrebremove); 
    
         return vRecalcprice;
      
      }

      public IEnumerable<Emailforshipnoticeresults> EmailListForShipNotice(Emailforshipnoticecriteria emailforshipnoticecriteria)
      {   
         var results = new List<Emailforshipnoticeresults>();
         
         var pdsemailforshipnotecriteria = new pdsemailforshipnotecriteriaDataSet();
            
         var pdsemailforshipnotice = new pdsemailforshipnoticeDataSet();
            
         DataRow ttblemailforshipnoticecriteriaCriteria = pdsemailforshipnotecriteria.ttblemailforshipnoticecriteria.NewttblemailforshipnoticecriteriaRow();
         Emailforshipnoticecriteria.UpdateRowFromEmailforshipnoticecriteria(ref ttblemailforshipnoticecriteriaCriteria, emailforshipnoticecriteria);
         pdsemailforshipnotecriteria.ttblemailforshipnoticecriteria.AddttblemailforshipnoticecriteriaRow((pdsemailforshipnotecriteriaDataSet.ttblemailforshipnoticecriteriaRow)ttblemailforshipnoticecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("EmailListForShipNotice - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.EmailListForShipNotice(ref pdsContext,  pdsemailforshipnotecriteria, out pdsemailforshipnotice, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("EmailListForShipNotice - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsemailforshipnotecriteria); 
    
            foreach (DataRow row in pdsemailforshipnotice.ttblemailforshipnoticeresults)
            {
                results.Add(Emailforshipnoticeresults.BuildEmailforshipnoticeresultsFromRow(row));
            }
            return results;
        
      }

      public void EmailListForShipNotificationsUpdate(AsoeentryEmailListForShipNotificationsUpdateRequestAPI AsoeentryEmailListForShipNotificationsUpdateRequestAPI)
      {   
         
         var pdsemailforshipnotice = new pdsemailforshipnoticeDataSet();
            
         var pdsemailforshipnotecriteria = new pdsemailforshipnotecriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblemailforshipnoticecriteriaRow = pdsemailforshipnotecriteria.ttblemailforshipnoticecriteria.NewttblemailforshipnoticecriteriaRow();
         Emailforshipnoticecriteria.UpdateRowFromEmailforshipnoticecriteria(ref ttblemailforshipnoticecriteriaRow, AsoeentryEmailListForShipNotificationsUpdateRequestAPI.emailforshipnoticecriteria);
         pdsemailforshipnotecriteria.ttblemailforshipnoticecriteria.AddttblemailforshipnoticecriteriaRow((pdsemailforshipnotecriteriaDataSet.ttblemailforshipnoticecriteriaRow)ttblemailforshipnoticecriteriaRow);
          
         foreach (var obj in AsoeentryEmailListForShipNotificationsUpdateRequestAPI.emailforshipnoticeresults)
         {
            DataRow ttblemailforshipnoticeresultsRow = pdsemailforshipnotice.ttblemailforshipnoticeresults.NewttblemailforshipnoticeresultsRow();
            Emailforshipnoticeresults.UpdateRowFromEmailforshipnoticeresults(ref ttblemailforshipnoticeresultsRow, obj);
            pdsemailforshipnotice.ttblemailforshipnoticeresults.AddttblemailforshipnoticeresultsRow((pdsemailforshipnoticeDataSet.ttblemailforshipnoticeresultsRow)ttblemailforshipnoticeresultsRow);
         }
          
         
         NLogLoggerP.Trace("EmailListForShipNotificationsUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.EmailListForShipNotificationsUpdate(ref pdsContext,  pdsemailforshipnotice,  pdsemailforshipnotecriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("EmailListForShipNotificationsUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsemailforshipnotice);
      }

      public AsoeentryOESFSearchResponseAPI OESFSearch(Oesfsearchcriteria oesfsearchcriteria)
      {   
         var result = new AsoeentryOESFSearchResponseAPI();
         
         var pdsoesfsearch = new pdsoesfsearchDataSet();
            
         DataRow ttbloesfsearchcriteriaCriteria = pdsoesfsearch.ttbloesfsearchcriteria.NewttbloesfsearchcriteriaRow();
         Oesfsearchcriteria.UpdateRowFromOesfsearchcriteria(ref ttbloesfsearchcriteriaCriteria, oesfsearchcriteria);
         pdsoesfsearch.ttbloesfsearchcriteria.AddttbloesfsearchcriteriaRow((pdsoesfsearchDataSet.ttbloesfsearchcriteriaRow)ttbloesfsearchcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESFSearch - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OESFSearch(ref pdsContext, ref pdsoesfsearch, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESFSearch - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesfsearch); 
    
         foreach (DataRow row in pdsoesfsearch.ttbloesfsearchresults)
         {
            result.oesfsearchresults.Add(Oesfsearchresults.BuildOesfsearchresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Oesfaddchg OESFLoad(string pvRowpointer)
      {   
         var result = new Oesfaddchg();
         
         var pdsoesfaddchg = new pdsoesfaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESFLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OESFLoad(ref pdsContext,  pvRowpointer, out pdsoesfaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESFLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesfaddchg); 
    
         if (pdsoesfaddchg.ttbloesfaddchg.Count > 0) 
         { 
             result = Oesfaddchg.BuildOesfaddchgFromRow(pdsoesfaddchg.ttbloesfaddchg[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oesflist> OESFLoadList(Oesfaddchg oesfaddchg)
      {   
         var results = new List<Oesflist>();
         
         var pdsoesfaddchg = new pdsoesfaddchgDataSet();
            
         var pdsoesflist = new pdsoesflistDataSet();
            
         DataRow ttbloesfaddchgCriteria = pdsoesfaddchg.ttbloesfaddchg.NewttbloesfaddchgRow();
         Oesfaddchg.UpdateRowFromOesfaddchg(ref ttbloesfaddchgCriteria, oesfaddchg);
         pdsoesfaddchg.ttbloesfaddchg.AddttbloesfaddchgRow((pdsoesfaddchgDataSet.ttbloesfaddchgRow)ttbloesfaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OESFLoadList - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OESFLoadList(ref pdsContext,  pdsoesfaddchg, out pdsoesflist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESFLoadList - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesfaddchg); 
    
            foreach (DataRow row in pdsoesflist.ttbloesflist)
            {
                results.Add(Oesflist.BuildOesflistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> OESFUpdate(AsoeentryOESFUpdateRequestAPI AsoeentryOESFUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoesfaddchg = new pdsoesfaddchgDataSet();
            
         var pdsoesflist = new pdsoesflistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeentryOESFUpdateRequestAPI.oesfaddchg)
         {
            DataRow ttbloesfaddchgRow = pdsoesfaddchg.ttbloesfaddchg.NewttbloesfaddchgRow();
            Oesfaddchg.UpdateRowFromOesfaddchg(ref ttbloesfaddchgRow, obj);
            pdsoesfaddchg.ttbloesfaddchg.AddttbloesfaddchgRow((pdsoesfaddchgDataSet.ttbloesfaddchgRow)ttbloesfaddchgRow);
         }
          
         foreach (var obj in AsoeentryOESFUpdateRequestAPI.oesflist)
         {
            DataRow ttbloesflistRow = pdsoesflist.ttbloesflist.NewttbloesflistRow();
            Oesflist.UpdateRowFromOesflist(ref ttbloesflistRow, obj);
            pdsoesflist.ttbloesflist.AddttbloesflistRow((pdsoesflistDataSet.ttbloesflistRow)ttbloesflistRow);
         }
          
         
         NLogLoggerP.Trace("OESFUpdate - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OESFUpdate(ref pdsContext,  pdsoesfaddchg,  pdsoesflist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OESFUpdate - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoesfaddchg); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeentryOEFulfillmentLoadResponseAPI OEFulfillmentLoad(Oefulfillmentcriteria oefulfillmentcriteria)
      {   
         var result = new AsoeentryOEFulfillmentLoadResponseAPI();
         
         var pdsoefulfillmentload = new pdsoefulfillmentloadDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloefulfillmentcriteriaCriteria = pdsoefulfillmentload.ttbloefulfillmentcriteria.NewttbloefulfillmentcriteriaRow();
         Oefulfillmentcriteria.UpdateRowFromOefulfillmentcriteria(ref ttbloefulfillmentcriteriaCriteria, oefulfillmentcriteria);
         pdsoefulfillmentload.ttbloefulfillmentcriteria.AddttbloefulfillmentcriteriaRow((pdsoefulfillmentloadDataSet.ttbloefulfillmentcriteriaRow)ttbloefulfillmentcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEFulfillmentLoad - Asoeentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeentryproxy = this.proxyAppObject.CreatePO_asoeentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeentryproxy.OEFulfillmentLoad(ref pdsContext, ref pdsoefulfillmentload, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEFulfillmentLoad - Asoeentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoefulfillmentload); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoefulfillmentload.ttbloefulfillmentcriteria.Count > 0)
         {
            result.oefulfillmentcriteria = Oefulfillmentcriteria.BuildOefulfillmentcriteriaFromRow(pdsoefulfillmentload.ttbloefulfillmentcriteria[0]);
         }
                    
         foreach (DataRow row in pdsoefulfillmentload.ttbloefulfillmentresults)
         {
            result.oefulfillmentresults.Add(Oefulfillmentresults.BuildOefulfillmentresultsFromRow(row));
         }     
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  