//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.OE.Data.Adapters
{
   using com.infor.sxproxy.oeproxy;
   using com.infor.sxproxy.oeproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsaddoeaddon;
   using Models.Pdsoeaddons;
   using Models.Pdsoeirccauthorize;
   using Models.Pdscalcsubtotals;
   using Models.Pdsmessaging;
   using Models.Pdstendering;
   using Models.Pdsloadoeaddonlist;
   using Models.Pdsloadoetaxcombos;
   using Models.Pdsloadoetaxsettings;
   using Models.Pdsoehdr;
   using Models.Pdstenderingload;
   using Models.Pdspayments;
   using Models.Pdsoeetcardlookup;
   using Models.Pdsloadoetranstypes;
   using Models.Pdsoecalcdiscnet;
   using Models.Pdsoecopyquote;
   using Models.Pdsoedisccalcupdate;
   using Models.Pdsoefloorplan;
   using Models.Pdsoeheaderchangedates;
   using Models.Pdsoeheaderfinish;
   using Models.Pdsoeheaderretrieve;
   using Models.Pdswlstatus;
   using Models.Pdsoeheadertaxrecalc;
   using Models.Pdsoeiohdrlist;
   using Models.Pdsoeordercancel;
   using Models.Pdsoeordercheckautoship;
   using Models.Pdsoeordercopyaddorder;
   using Models.Pdsoeordercopyorderlist;
   using Models.Pdsoeordercopy;
   using Models.Pdsoeordercopylinelist;
   using Models.Pdsoeordercopyfabwhse;
   using Models.Pdsoeordercopypricing;
   using Models.Pdsoeordersuspendloadcriteria;
   using Models.Pdsoeordersuspendglobals;
   using Models.Pdsoeordersuspend;
   using Models.Pdsprintersettings;
   using Models.Pdssubmitreport;
   using Models.Pdsgeocodelookup;
   using Models.Pdsoetaxdetail;
   using Models.Pdsoetenderingupdate;
   using Models.Pdsoeheaderviewedidata;
   using Models.Pdsoeheaderroa;
   using Models.Pdsoeetprint;
   using Models.Pdsoeheadercrrmpopup;
   using Models.Pdsoeheadermaintcustpo;
   using Models.Pdsoeimportfile;
   using Models.Pdsoeimportdata;
   using Models.Pdsoewtbillingsearch;
   using Models.Complex;

   public partial class AsoeheaderAdapter : AdapterBase<pdsContextDataSet>
   {
      private OEProxyAppObject proxyAppObject;
      
      public AsoeheaderAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new OEProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsoeheaderAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Oeaddons> AddOEAddon(AsoeheaderAddOEAddonRequestAPI AsoeheaderAddOEAddonRequestAPI)
      {   
         var results = new List<Oeaddons>();
         
         var pdsaddoeaddon = new pdsaddoeaddonDataSet();
            
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbladdoeaddoncriteriaRow = pdsaddoeaddon.ttbladdoeaddoncriteria.NewttbladdoeaddoncriteriaRow();
         Addoeaddoncriteria.UpdateRowFromAddoeaddoncriteria(ref ttbladdoeaddoncriteriaRow, AsoeheaderAddOEAddonRequestAPI.addoeaddoncriteria);
         pdsaddoeaddon.ttbladdoeaddoncriteria.AddttbladdoeaddoncriteriaRow((pdsaddoeaddonDataSet.ttbladdoeaddoncriteriaRow)ttbladdoeaddoncriteriaRow);
          
         foreach (var obj in AsoeheaderAddOEAddonRequestAPI.oeaddons)
         {
            DataRow ttbloeaddonsRow = pdsoeaddons.ttbloeaddons.NewttbloeaddonsRow();
            Oeaddons.UpdateRowFromOeaddons(ref ttbloeaddonsRow, obj);
            pdsoeaddons.ttbloeaddons.AddttbloeaddonsRow((pdsoeaddonsDataSet.ttbloeaddonsRow)ttbloeaddonsRow);
         }
          
         
         NLogLoggerP.Trace("AddOEAddon - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.AddOEAddon(ref pdsContext,  pdsaddoeaddon, ref pdsoeaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AddOEAddon - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaddoeaddon); 
    
            foreach (DataRow row in pdsoeaddons.ttbloeaddons)
            {
                results.Add(Oeaddons.BuildOeaddonsFromRow(row));
            }
            return results;
        
      }

      public string AuthorizeOEIRCreditCard(Oeirccauthorize oeirccauthorize)
      {   
          
         var pdsoeirccauthorize = new pdsoeirccauthorizeDataSet();
            
         DataRow ttbloeirccauthorizeCriteria = pdsoeirccauthorize.ttbloeirccauthorize.NewttbloeirccauthorizeRow();
         Oeirccauthorize.UpdateRowFromOeirccauthorize(ref ttbloeirccauthorizeCriteria, oeirccauthorize);
         pdsoeirccauthorize.ttbloeirccauthorize.AddttbloeirccauthorizeRow((pdsoeirccauthorizeDataSet.ttbloeirccauthorizeRow)ttbloeirccauthorizeCriteria);
            
         string cResultMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AuthorizeOEIRCreditCard - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.AuthorizeOEIRCreditCard(ref pdsContext,  pdsoeirccauthorize, out cResultMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AuthorizeOEIRCreditCard - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeirccauthorize); 
    
         return cResultMessage;
      
      }

      public Calcsubtotalsresults CalculateRunningSubTotals(Calcsubtotalscriteria calcsubtotalscriteria)
      {   
         var result = new Calcsubtotalsresults();
         
         var pdscalcsubtotals = new pdscalcsubtotalsDataSet();
            
         DataRow ttblcalcsubtotalscriteriaCriteria = pdscalcsubtotals.ttblcalcsubtotalscriteria.NewttblcalcsubtotalscriteriaRow();
         Calcsubtotalscriteria.UpdateRowFromCalcsubtotalscriteria(ref ttblcalcsubtotalscriteriaCriteria, calcsubtotalscriteria);
         pdscalcsubtotals.ttblcalcsubtotalscriteria.AddttblcalcsubtotalscriteriaRow((pdscalcsubtotalsDataSet.ttblcalcsubtotalscriteriaRow)ttblcalcsubtotalscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CalculateRunningSubTotals - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.CalculateRunningSubTotals(ref pdsContext, ref pdscalcsubtotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CalculateRunningSubTotals - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscalcsubtotals); 
    
         if (pdscalcsubtotals.ttblcalcsubtotalsresults.Count > 0) 
         { 
             result = Calcsubtotalsresults.BuildCalcsubtotalsresultsFromRow(pdscalcsubtotals.ttblcalcsubtotalsresults[0]);
         } 
              
          
         return result;
          
      }

      public Oeaddons ChangeOEAddon(AsoeheaderChangeOEAddonRequestAPI AsoeheaderChangeOEAddonRequestAPI)
      {   
         var result = new Oeaddons();
         
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeaddonsRow = pdsoeaddons.ttbloeaddons.NewttbloeaddonsRow();
         Oeaddons.UpdateRowFromOeaddons(ref ttbloeaddonsRow, AsoeheaderChangeOEAddonRequestAPI.oeaddons);
         pdsoeaddons.ttbloeaddons.AddttbloeaddonsRow((pdsoeaddonsDataSet.ttbloeaddonsRow)ttbloeaddonsRow);
          
         var  iNewAddonNo = AsoeheaderChangeOEAddonRequestAPI.iNewAddonNo;
            
         var  dNewAddonAmt = AsoeheaderChangeOEAddonRequestAPI.dNewAddonAmt;
            
         var  lNewAddonType = AsoeheaderChangeOEAddonRequestAPI.lNewAddonType;
            
         
         NLogLoggerP.Trace("ChangeOEAddon - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.ChangeOEAddon(ref pdsContext,  iNewAddonNo,  dNewAddonAmt,  lNewAddonType, ref pdsoeaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ChangeOEAddon - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeaddons); 
    
         if (pdsoeaddons.ttbloeaddons.Count > 0) 
         { 
             result = Oeaddons.BuildOeaddonsFromRow(pdsoeaddons.ttbloeaddons[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> CreateQuoteRevision(int iOrderNo, int iOrderSuf)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateQuoteRevision - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.CreateQuoteRevision(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateQuoteRevision - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderLoadCenPOSSaleResponseAPI LoadCenPOSSale(IEnumerable<Tendering> tendering)
      {   
         var result = new AsoeheaderLoadCenPOSSaleResponseAPI();
         
         var pdstendering = new pdstenderingDataSet();
            
         foreach (var obj in tendering)
         {
             DataRow row = pdstendering.ttbltendering.NewttbltenderingRow();
             Tendering.UpdateRowFromTendering(ref row, obj);
             pdstendering.ttbltendering.AddttbltenderingRow((pdstenderingDataSet.ttbltenderingRow)row);
         }
        
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadCenPOSSale - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadCenPOSSale(ref pdsContext, ref pdstendering, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("LoadCenPOSSale - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstendering); 
    
         foreach (DataRow row in pdstendering.ttbltendering)
         {
            result.tendering.Add(Tendering.BuildTenderingFromRow(row));
         }     
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public string LoadLevel3LineData(int iOrderNo, int iOrderSuf)
      {   
          
         string cLineData = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadLevel3LineData - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadLevel3LineData(ref pdsContext,  iOrderNo,  iOrderSuf, out cLineData, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadLevel3LineData - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cLineData;
      
      }

      public IEnumerable<Loadoeaddonlist> LoadOEAddonList(int iOrderNo, int iOrderSuf)
      {   
         var results = new List<Loadoeaddonlist>();
         
         var pdsloadoeaddonlist = new pdsloadoeaddonlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOEAddonList - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOEAddonList(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsloadoeaddonlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOEAddonList - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoeaddonlist); 
    
            foreach (DataRow row in pdsloadoeaddonlist.ttblloadoeaddonlist)
            {
                results.Add(Loadoeaddonlist.BuildLoadoeaddonlistFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderLoadOEBannerWarehouseResponseAPI LoadOEBannerWarehouse(decimal dCustNo, string cShipTo)
      {   
         var result = new AsoeheaderLoadOEBannerWarehouseResponseAPI();
         
         string cWhse = string.Empty;
         string cCustPo = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOEBannerWarehouse - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOEBannerWarehouse(ref pdsContext,  dCustNo,  cShipTo, out cWhse, out cCustPo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOEBannerWarehouse - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cWhse = cWhse;
         result.cCustPo = cCustPo;
          
         return result;
          
      }

      public Loadoetaxcombosresults LoadOETaxCombos(Loadoetaxcomboscriteria loadoetaxcomboscriteria)
      {   
         var result = new Loadoetaxcombosresults();
         
         var pdsloadoetaxcombos = new pdsloadoetaxcombosDataSet();
            
         DataRow ttblloadoetaxcomboscriteriaCriteria = pdsloadoetaxcombos.ttblloadoetaxcomboscriteria.NewttblloadoetaxcomboscriteriaRow();
         Loadoetaxcomboscriteria.UpdateRowFromLoadoetaxcomboscriteria(ref ttblloadoetaxcomboscriteriaCriteria, loadoetaxcomboscriteria);
         pdsloadoetaxcombos.ttblloadoetaxcomboscriteria.AddttblloadoetaxcomboscriteriaRow((pdsloadoetaxcombosDataSet.ttblloadoetaxcomboscriteriaRow)ttblloadoetaxcomboscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETaxCombos - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETaxCombos(ref pdsContext, ref pdsloadoetaxcombos, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETaxCombos - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetaxcombos); 
    
         if (pdsloadoetaxcombos.ttblloadoetaxcombosresults.Count > 0) 
         { 
             result = Loadoetaxcombosresults.BuildLoadoetaxcombosresultsFromRow(pdsloadoetaxcombos.ttblloadoetaxcombosresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderLoadOETaxSettingsResponseAPI LoadOETaxSettings(Loadoetaxsettingscriteria loadoetaxsettingscriteria)
      {   
         var result = new AsoeheaderLoadOETaxSettingsResponseAPI();
         
         var pdsloadoetaxsettings = new pdsloadoetaxsettingsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblloadoetaxsettingscriteriaCriteria = pdsloadoetaxsettings.ttblloadoetaxsettingscriteria.NewttblloadoetaxsettingscriteriaRow();
         Loadoetaxsettingscriteria.UpdateRowFromLoadoetaxsettingscriteria(ref ttblloadoetaxsettingscriteriaCriteria, loadoetaxsettingscriteria);
         pdsloadoetaxsettings.ttblloadoetaxsettingscriteria.AddttblloadoetaxsettingscriteriaRow((pdsloadoetaxsettingsDataSet.ttblloadoetaxsettingscriteriaRow)ttblloadoetaxsettingscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETaxSettings - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETaxSettings(ref pdsContext, ref pdsloadoetaxsettings, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETaxSettings - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetaxsettings); 
    
         if (pdsloadoetaxsettings.ttblloadoetaxsettingsresults.Count > 0)
         {
            result.loadoetaxsettingsresults = Loadoetaxsettingsresults.BuildLoadoetaxsettingsresultsFromRow(pdsloadoetaxsettings.ttblloadoetaxsettingsresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeheaderLoadOETenderingResponseAPI LoadOETendering(AsoeheaderLoadOETenderingRequestAPI AsoeheaderLoadOETenderingRequestAPI)
      {   
         var result = new AsoeheaderLoadOETenderingResponseAPI();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdstendering = new pdstenderingDataSet();
            
         var pdstenderingload = new pdstenderingloadDataSet();
            
         var pdspayments = new pdspaymentsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloehdrRow = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrRow, AsoeheaderLoadOETenderingRequestAPI.oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrRow);
          
         var  lMaintMode = AsoeheaderLoadOETenderingRequestAPI.lMaintMode;
            
         
         NLogLoggerP.Trace("LoadOETendering - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETendering(ref pdsContext,  lMaintMode,  pdsoehdr, out pdstendering, out pdstenderingload, out pdspayments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETendering - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
         foreach (DataRow row in pdspayments.ttblpaymentnumbers)
         {
            result.paymentnumbers.Add(Paymentnumbers.BuildPaymentnumbersFromRow(row));
         }     
         foreach (DataRow row in pdspayments.ttblpaymenttypes)
         {
            result.paymenttypes.Add(Paymenttypes.BuildPaymenttypesFromRow(row));
         }     
         foreach (DataRow row in pdstendering.ttbltendering)
         {
            result.tendering.Add(Tendering.BuildTenderingFromRow(row));
         }     
         foreach (DataRow row in pdstenderingload.ttbltenderingcchist)
         {
            result.tenderingcchist.Add(Tenderingcchist.BuildTenderingcchistFromRow(row));
         }     
         foreach (DataRow row in pdstenderingload.ttbltenderingglhist)
         {
            result.tenderingglhist.Add(Tenderingglhist.BuildTenderingglhistFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Oeetcardlookupresults> LoadOETenderingCard(Oeetcardlookupcriteria oeetcardlookupcriteria)
      {   
         var results = new List<Oeetcardlookupresults>();
         
         var pdsoeetcardlookup = new pdsoeetcardlookupDataSet();
            
         DataRow ttbloeetcardlookupcriteriaCriteria = pdsoeetcardlookup.ttbloeetcardlookupcriteria.NewttbloeetcardlookupcriteriaRow();
         Oeetcardlookupcriteria.UpdateRowFromOeetcardlookupcriteria(ref ttbloeetcardlookupcriteriaCriteria, oeetcardlookupcriteria);
         pdsoeetcardlookup.ttbloeetcardlookupcriteria.AddttbloeetcardlookupcriteriaRow((pdsoeetcardlookupDataSet.ttbloeetcardlookupcriteriaRow)ttbloeetcardlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETenderingCard - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETenderingCard(ref pdsContext, ref pdsoeetcardlookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETenderingCard - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeetcardlookup); 
    
            foreach (DataRow row in pdsoeetcardlookup.ttbloeetcardlookupresults)
            {
                results.Add(Oeetcardlookupresults.BuildOeetcardlookupresultsFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderLoadOETenderingMerchantResponseAPI LoadOETenderingMerchant(string cWhse, int iMediaCd)
      {   
         var result = new AsoeheaderLoadOETenderingMerchantResponseAPI();
         
         string cMerchantID = string.Empty;
         string cMerchantUserID = string.Empty;
         string cMerchantUserPW = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETenderingMerchant - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETenderingMerchant(ref pdsContext,  cWhse,  iMediaCd, out cMerchantID, out cMerchantUserID, out cMerchantUserPW, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETenderingMerchant - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cMerchantID = cMerchantID;
         result.cMerchantUserID = cMerchantUserID;
         result.cMerchantUserPW = cMerchantUserPW;
          
         return result;
          
      }

      public AsoeheaderLoadOETransTypesResponseAPI LoadOETransTypes(bool lCheckSecurity)
      {   
         var result = new AsoeheaderLoadOETransTypesResponseAPI();
         
         var pdsloadoetranstypes = new pdsloadoetranstypesDataSet();
            
         bool lFinancialIntegration = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("LoadOETransTypes - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.LoadOETransTypes(ref pdsContext,  lCheckSecurity, out pdsloadoetranstypes, out lFinancialIntegration, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("LoadOETransTypes - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsloadoetranstypes); 
    
         foreach (DataRow row in pdsloadoetranstypes.ttblloadoetranstypes)
         {
            result.loadoetranstypes.Add(Loadoetranstypes.BuildLoadoetranstypesFromRow(row));
         }     
         result.lFinancialIntegration = lFinancialIntegration;
          
         return result;
          
      }

      public decimal OECalculateDiscountNet(Oecalcdiscnetcriteria oecalcdiscnetcriteria)
      {   
          
         var pdsoecalcdiscnet = new pdsoecalcdiscnetDataSet();
            
         DataRow ttbloecalcdiscnetcriteriaCriteria = pdsoecalcdiscnet.ttbloecalcdiscnetcriteria.NewttbloecalcdiscnetcriteriaRow();
         Oecalcdiscnetcriteria.UpdateRowFromOecalcdiscnetcriteria(ref ttbloecalcdiscnetcriteriaCriteria, oecalcdiscnetcriteria);
         pdsoecalcdiscnet.ttbloecalcdiscnetcriteria.AddttbloecalcdiscnetcriteriaRow((pdsoecalcdiscnetDataSet.ttbloecalcdiscnetcriteriaRow)ttbloecalcdiscnetcriteriaCriteria);
            
         decimal dWODiscNet = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECalculateDiscountNet - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OECalculateDiscountNet(ref pdsContext,  pdsoecalcdiscnet, out dWODiscNet, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECalculateDiscountNet - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoecalcdiscnet); 
    
         return dWODiscNet;
      
      }

      public AsoeheaderOECopyQuoteResponseAPI OECopyQuote(Oecopyquotecriteria oecopyquotecriteria)
      {   
         var result = new AsoeheaderOECopyQuoteResponseAPI();
         
         var pdsoecopyquote = new pdsoecopyquoteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloecopyquotecriteriaCriteria = pdsoecopyquote.ttbloecopyquotecriteria.NewttbloecopyquotecriteriaRow();
         Oecopyquotecriteria.UpdateRowFromOecopyquotecriteria(ref ttbloecopyquotecriteriaCriteria, oecopyquotecriteria);
         pdsoecopyquote.ttbloecopyquotecriteria.AddttbloecopyquotecriteriaRow((pdsoecopyquoteDataSet.ttbloecopyquotecriteriaRow)ttbloecopyquotecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OECopyQuote - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OECopyQuote(ref pdsContext, ref pdsoecopyquote, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OECopyQuote - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoecopyquote); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoecopyquote.ttbloecopyquoteresults.Count > 0)
         {
            result.oecopyquoteresults = Oecopyquoteresults.BuildOecopyquoteresultsFromRow(pdsoecopyquote.ttbloecopyquoteresults[0]);
         }
                    
          
         return result;
          
      }

      public void OEDiscountCalculatorUpdate(Oedisccalcupdatecriteria oedisccalcupdatecriteria)
      {   
         
         var pdsoedisccalcupdate = new pdsoedisccalcupdateDataSet();
            
         DataRow ttbloedisccalcupdatecriteriaCriteria = pdsoedisccalcupdate.ttbloedisccalcupdatecriteria.NewttbloedisccalcupdatecriteriaRow();
         Oedisccalcupdatecriteria.UpdateRowFromOedisccalcupdatecriteria(ref ttbloedisccalcupdatecriteriaCriteria, oedisccalcupdatecriteria);
         pdsoedisccalcupdate.ttbloedisccalcupdatecriteria.AddttbloedisccalcupdatecriteriaRow((pdsoedisccalcupdateDataSet.ttbloedisccalcupdatecriteriaRow)ttbloedisccalcupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEDiscountCalculatorUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEDiscountCalculatorUpdate(ref pdsContext,  pdsoedisccalcupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEDiscountCalculatorUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoedisccalcupdate);
      }

      public Oefloorplan OEFloorPlanUpdate(Oefloorplan oefloorplan)
      {   
         var result = new Oefloorplan();
         
         var pdsoefloorplan = new pdsoefloorplanDataSet();
            
         DataRow ttbloefloorplanCriteria = pdsoefloorplan.ttbloefloorplan.NewttbloefloorplanRow();
         Oefloorplan.UpdateRowFromOefloorplan(ref ttbloefloorplanCriteria, oefloorplan);
         pdsoefloorplan.ttbloefloorplan.AddttbloefloorplanRow((pdsoefloorplanDataSet.ttbloefloorplanRow)ttbloefloorplanCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEFloorPlanUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEFloorPlanUpdate(ref pdsContext, ref pdsoefloorplan, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEFloorPlanUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoefloorplan); 
    
         if (pdsoefloorplan.ttbloefloorplan.Count > 0) 
         { 
             result = Oefloorplan.BuildOefloorplanFromRow(pdsoefloorplan.ttbloefloorplan[0]);
         } 
              
          
         return result;
          
      }

      public void OEHeaderChangeDates(Oeheaderchangedatescriteria oeheaderchangedatescriteria)
      {   
         
         var pdsoeheaderchangedates = new pdsoeheaderchangedatesDataSet();
            
         DataRow ttbloeheaderchangedatescriteriaCriteria = pdsoeheaderchangedates.ttbloeheaderchangedatescriteria.NewttbloeheaderchangedatescriteriaRow();
         Oeheaderchangedatescriteria.UpdateRowFromOeheaderchangedatescriteria(ref ttbloeheaderchangedatescriteriaCriteria, oeheaderchangedatescriteria);
         pdsoeheaderchangedates.ttbloeheaderchangedatescriteria.AddttbloeheaderchangedatescriteriaRow((pdsoeheaderchangedatesDataSet.ttbloeheaderchangedatescriteriaRow)ttbloeheaderchangedatescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderChangeDates - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderChangeDates(ref pdsContext,  pdsoeheaderchangedates, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderChangeDates - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderchangedates);
      }

      public AsoeheaderOEHeaderCreateResponseAPI OEHeaderCreate(Oehdr oehdr)
      {   
         var result = new AsoeheaderOEHeaderCreateResponseAPI();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloehdrCriteria = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrCriteria, oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrCriteria);
            
         int iNewOrderNo = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderCreate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderCreate(ref pdsContext,  pdsoehdr, out pdsmessaging, out iNewOrderNo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderCreate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.iNewOrderNo = iNewOrderNo;
          
         return result;
          
      }

      public AsoeheaderOEHeaderFinishResponseAPI OEHeaderFinish(Oeheaderfinishcriteria oeheaderfinishcriteria)
      {   
         var result = new AsoeheaderOEHeaderFinishResponseAPI();
         
         var pdsoeheaderfinish = new pdsoeheaderfinishDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeheaderfinishcriteriaCriteria = pdsoeheaderfinish.ttbloeheaderfinishcriteria.NewttbloeheaderfinishcriteriaRow();
         Oeheaderfinishcriteria.UpdateRowFromOeheaderfinishcriteria(ref ttbloeheaderfinishcriteriaCriteria, oeheaderfinishcriteria);
         pdsoeheaderfinish.ttbloeheaderfinishcriteria.AddttbloeheaderfinishcriteriaRow((pdsoeheaderfinishDataSet.ttbloeheaderfinishcriteriaRow)ttbloeheaderfinishcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderFinish - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderFinish(ref pdsContext, ref pdsoeheaderfinish, out pdsmessaging, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderFinish - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderfinish); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheaderfinish.ttbloeheaderfinishresults.Count > 0)
         {
            result.oeheaderfinishresults = Oeheaderfinishresults.BuildOeheaderfinishresultsFromRow(pdsoeheaderfinish.ttbloeheaderfinishresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsoeheaderOEHeaderRetrieveResponseAPI OEHeaderRetrieve(Oeheaderretrievecriteria oeheaderretrievecriteria)
      {   
         var result = new AsoeheaderOEHeaderRetrieveResponseAPI();
         
         var pdsoeheaderretrieve = new pdsoeheaderretrieveDataSet();
            
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdswlstatus = new pdswlstatusDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeheaderretrievecriteriaCriteria = pdsoeheaderretrieve.ttbloeheaderretrievecriteria.NewttbloeheaderretrievecriteriaRow();
         Oeheaderretrievecriteria.UpdateRowFromOeheaderretrievecriteria(ref ttbloeheaderretrievecriteriaCriteria, oeheaderretrievecriteria);
         pdsoeheaderretrieve.ttbloeheaderretrievecriteria.AddttbloeheaderretrievecriteriaRow((pdsoeheaderretrieveDataSet.ttbloeheaderretrievecriteriaRow)ttbloeheaderretrievecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderRetrieve - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderRetrieve(ref pdsContext,  pdsoeheaderretrieve, out pdsoehdr, out pdswlstatus, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderRetrieve - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderretrieve); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoehdr.ttbloehdr.Count > 0)
         {
            result.oehdr = Oehdr.BuildOehdrFromRow(pdsoehdr.ttbloehdr[0]);
         }
                    
         if (pdswlstatus.ttblwlstatus.Count > 0)
         {
            result.wlstatus = Wlstatus.BuildWlstatusFromRow(pdswlstatus.ttblwlstatus[0]);
         }
                    
          
         return result;
          
      }

      public void OEHeaderSoftLock(int iOrderNo, int iOrderSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderSoftLock - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderSoftLock(ref pdsContext,  iOrderNo,  iOrderSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderSoftLock - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public string OEHeaderTaxRecalc(Oeheadertaxrecalccriteria oeheadertaxrecalccriteria)
      {   
          
         var pdsoeheadertaxrecalc = new pdsoeheadertaxrecalcDataSet();
            
         DataRow ttbloeheadertaxrecalccriteriaCriteria = pdsoeheadertaxrecalc.ttbloeheadertaxrecalccriteria.NewttbloeheadertaxrecalccriteriaRow();
         Oeheadertaxrecalccriteria.UpdateRowFromOeheadertaxrecalccriteria(ref ttbloeheadertaxrecalccriteriaCriteria, oeheadertaxrecalccriteria);
         pdsoeheadertaxrecalc.ttbloeheadertaxrecalccriteria.AddttbloeheadertaxrecalccriteriaRow((pdsoeheadertaxrecalcDataSet.ttbloeheadertaxrecalccriteriaRow)ttbloeheadertaxrecalccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderTaxRecalc - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderTaxRecalc(ref pdsContext,  pdsoeheadertaxrecalc, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderTaxRecalc - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheadertaxrecalc); 
    
         return cWarningMessage;
      
      }

      public IEnumerable<Messaging> OEHeaderUpdate(AsoeheaderOEHeaderUpdateRequestAPI AsoeheaderOEHeaderUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloehdrRow = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrRow, AsoeheaderOEHeaderUpdateRequestAPI.oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrRow);
          
         var  lMaintMode = AsoeheaderOEHeaderUpdateRequestAPI.lMaintMode;
            
         
         NLogLoggerP.Trace("OEHeaderUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderUpdate(ref pdsContext,  lMaintMode,  pdsoehdr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOEIOHeaderListFetchResponseAPI OEIOHeaderListFetch(Oeiohdrlistcriteria oeiohdrlistcriteria)
      {   
         var result = new AsoeheaderOEIOHeaderListFetchResponseAPI();
         
         var pdsoeiohdrlist = new pdsoeiohdrlistDataSet();
            
         DataRow ttbloeiohdrlistcriteriaCriteria = pdsoeiohdrlist.ttbloeiohdrlistcriteria.NewttbloeiohdrlistcriteriaRow();
         Oeiohdrlistcriteria.UpdateRowFromOeiohdrlistcriteria(ref ttbloeiohdrlistcriteriaCriteria, oeiohdrlistcriteria);
         pdsoeiohdrlist.ttbloeiohdrlistcriteria.AddttbloeiohdrlistcriteriaRow((pdsoeiohdrlistDataSet.ttbloeiohdrlistcriteriaRow)ttbloeiohdrlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("OEIOHeaderListFetch - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEIOHeaderListFetch(ref pdsContext, ref pdsoeiohdrlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("OEIOHeaderListFetch - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiohdrlist); 
    
         foreach (DataRow row in pdsoeiohdrlist.ttbloeiohdrlistresults)
         {
            result.oeiohdrlistresults.Add(Oeiohdrlistresults.BuildOeiohdrlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsoeheaderOEIOSimpleSearchListResponseAPI OEIOSimpleSearchList(AsoeheaderOEIOSimpleSearchListRequestAPI AsoeheaderOEIOSimpleSearchListRequestAPI)
      {   
         var result = new AsoeheaderOEIOSimpleSearchListResponseAPI();
         
         var pdsoeiohdrlist = new pdsoeiohdrlistDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         var  iBatchSize = AsoeheaderOEIOSimpleSearchListRequestAPI.iBatchSize;
            
         var  cSearchString = AsoeheaderOEIOSimpleSearchListRequestAPI.cSearchString;
            
         
         NLogLoggerP.Trace("OEIOSimpleSearchList - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEIOSimpleSearchList(ref pdsContext,  iBatchSize,  cSearchString, out pdsoeiohdrlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("OEIOSimpleSearchList - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeiohdrlist); 
    
         foreach (DataRow row in pdsoeiohdrlist.ttbloeiohdrlistresults)
         {
            result.oeiohdrlistresults.Add(Oeiohdrlistresults.BuildOeiohdrlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public string OEOrderCancel(Oeordercancel oeordercancel)
      {   
          
         var pdsoeordercancel = new pdsoeordercancelDataSet();
            
         DataRow ttbloeordercancelCriteria = pdsoeordercancel.ttbloeordercancel.NewttbloeordercancelRow();
         Oeordercancel.UpdateRowFromOeordercancel(ref ttbloeordercancelCriteria, oeordercancel);
         pdsoeordercancel.ttbloeordercancel.AddttbloeordercancelRow((pdsoeordercancelDataSet.ttbloeordercancelRow)ttbloeordercancelCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCancel - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCancel(ref pdsContext,  pdsoeordercancel, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCancel - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercancel); 
    
         return cWarningMessage;
      
      }

      public void OEOrderCancelValidate(Oeordercancel oeordercancel)
      {   
         
         var pdsoeordercancel = new pdsoeordercancelDataSet();
            
         DataRow ttbloeordercancelCriteria = pdsoeordercancel.ttbloeordercancel.NewttbloeordercancelRow();
         Oeordercancel.UpdateRowFromOeordercancel(ref ttbloeordercancelCriteria, oeordercancel);
         pdsoeordercancel.ttbloeordercancel.AddttbloeordercancelRow((pdsoeordercancelDataSet.ttbloeordercancelRow)ttbloeordercancelCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCancelValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCancelValidate(ref pdsContext,  pdsoeordercancel, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCancelValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercancel);
      }

      public AsoeheaderOEOrderCheckAutoShipResponseAPI OEOrderCheckAutoShip(Oeordercheckautoship oeordercheckautoship)
      {   
         var result = new AsoeheaderOEOrderCheckAutoShipResponseAPI();
         
         var pdsoeordercheckautoship = new pdsoeordercheckautoshipDataSet();
            
         DataRow ttbloeordercheckautoshipCriteria = pdsoeordercheckautoship.ttbloeordercheckautoship.NewttbloeordercheckautoshipRow();
         Oeordercheckautoship.UpdateRowFromOeordercheckautoship(ref ttbloeordercheckautoshipCriteria, oeordercheckautoship);
         pdsoeordercheckautoship.ttbloeordercheckautoship.AddttbloeordercheckautoshipRow((pdsoeordercheckautoshipDataSet.ttbloeordercheckautoshipRow)ttbloeordercheckautoshipCriteria);
            
         string cAutoShip = string.Empty;
         bool cCenPOSSigReqd = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCheckAutoShip - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCheckAutoShip(ref pdsContext,  pdsoeordercheckautoship, out cAutoShip, out cCenPOSSigReqd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCheckAutoShip - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercheckautoship); 
    
         result.cAutoShip = cAutoShip;
         result.cCenPOSSigReqd = cCenPOSSigReqd;
          
         return result;
          
      }

      public AsoeheaderOEOrderCopyAddOrderResponseAPI OEOrderCopyAddOrder(AsoeheaderOEOrderCopyAddOrderRequestAPI AsoeheaderOEOrderCopyAddOrderRequestAPI)
      {   
         var result = new AsoeheaderOEOrderCopyAddOrderResponseAPI();
         
         var pdsoeordercopyaddorder = new pdsoeordercopyaddorderDataSet();
            
         var pdsoeordercopyorderlist = new pdsoeordercopyorderlistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordercopyaddorderRow = pdsoeordercopyaddorder.ttbloeordercopyaddorder.NewttbloeordercopyaddorderRow();
         Oeordercopyaddorder.UpdateRowFromOeordercopyaddorder(ref ttbloeordercopyaddorderRow, AsoeheaderOEOrderCopyAddOrderRequestAPI.oeordercopyaddorder);
         pdsoeordercopyaddorder.ttbloeordercopyaddorder.AddttbloeordercopyaddorderRow((pdsoeordercopyaddorderDataSet.ttbloeordercopyaddorderRow)ttbloeordercopyaddorderRow);
          
         foreach (var obj in AsoeheaderOEOrderCopyAddOrderRequestAPI.oeordercopyorderlist)
         {
            DataRow ttbloeordercopyorderlistRow = pdsoeordercopyorderlist.ttbloeordercopyorderlist.NewttbloeordercopyorderlistRow();
            Oeordercopyorderlist.UpdateRowFromOeordercopyorderlist(ref ttbloeordercopyorderlistRow, obj);
            pdsoeordercopyorderlist.ttbloeordercopyorderlist.AddttbloeordercopyorderlistRow((pdsoeordercopyorderlistDataSet.ttbloeordercopyorderlistRow)ttbloeordercopyorderlistRow);
         }
          
         
         NLogLoggerP.Trace("OEOrderCopyAddOrder - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyAddOrder(ref pdsContext,  pdsoeordercopyaddorder, ref pdsoeordercopyorderlist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyAddOrder - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopyaddorder); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeordercopyorderlist.ttbloeordercopyorderlist)
         {
            result.oeordercopyorderlist.Add(Oeordercopyorderlist.BuildOeordercopyorderlistFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeheaderOEOrderCopyContinueResponseAPI OEOrderCopyContinue(AsoeheaderOEOrderCopyContinueRequestAPI AsoeheaderOEOrderCopyContinueRequestAPI)
      {   
         var result = new AsoeheaderOEOrderCopyContinueResponseAPI();
         
         var pdsoeordercopy = new pdsoeordercopyDataSet();
            
         var pdsoeordercopyorderlist = new pdsoeordercopyorderlistDataSet();
            
         var pdsoeordercopylinelist = new pdsoeordercopylinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordercopyRow = pdsoeordercopy.ttbloeordercopy.NewttbloeordercopyRow();
         Oeordercopy.UpdateRowFromOeordercopy(ref ttbloeordercopyRow, AsoeheaderOEOrderCopyContinueRequestAPI.oeordercopy);
         pdsoeordercopy.ttbloeordercopy.AddttbloeordercopyRow((pdsoeordercopyDataSet.ttbloeordercopyRow)ttbloeordercopyRow);
          
         foreach (var obj in AsoeheaderOEOrderCopyContinueRequestAPI.oeordercopyorderlist)
         {
            DataRow ttbloeordercopyorderlistRow = pdsoeordercopyorderlist.ttbloeordercopyorderlist.NewttbloeordercopyorderlistRow();
            Oeordercopyorderlist.UpdateRowFromOeordercopyorderlist(ref ttbloeordercopyorderlistRow, obj);
            pdsoeordercopyorderlist.ttbloeordercopyorderlist.AddttbloeordercopyorderlistRow((pdsoeordercopyorderlistDataSet.ttbloeordercopyorderlistRow)ttbloeordercopyorderlistRow);
         }
          
         
         NLogLoggerP.Trace("OEOrderCopyContinue - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyContinue(ref pdsContext, ref pdsoeordercopy, ref pdsoeordercopyorderlist, out pdsoeordercopylinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyContinue - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeordercopy.ttbloeordercopy.Count > 0)
         {
            result.oeordercopy = Oeordercopy.BuildOeordercopyFromRow(pdsoeordercopy.ttbloeordercopy[0]);
         }
                    
         foreach (DataRow row in pdsoeordercopylinelist.ttbloeordercopylinelist)
         {
            result.oeordercopylinelist.Add(Oeordercopylinelist.BuildOeordercopylinelistFromRow(row));
         }     
         foreach (DataRow row in pdsoeordercopyorderlist.ttbloeordercopyorderlist)
         {
            result.oeordercopyorderlist.Add(Oeordercopyorderlist.BuildOeordercopyorderlistFromRow(row));
         }     
          
         return result;
          
      }

      public Oeordercopyfabwhse OEOrderCopyFabWhseInit(Oeordercopyfabwhse oeordercopyfabwhse)
      {   
         var result = new Oeordercopyfabwhse();
         
         var pdsoeordercopyfabwhse = new pdsoeordercopyfabwhseDataSet();
            
         DataRow ttbloeordercopyfabwhseCriteria = pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.NewttbloeordercopyfabwhseRow();
         Oeordercopyfabwhse.UpdateRowFromOeordercopyfabwhse(ref ttbloeordercopyfabwhseCriteria, oeordercopyfabwhse);
         pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.AddttbloeordercopyfabwhseRow((pdsoeordercopyfabwhseDataSet.ttbloeordercopyfabwhseRow)ttbloeordercopyfabwhseCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyFabWhseInit - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyFabWhseInit(ref pdsContext, ref pdsoeordercopyfabwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyFabWhseInit - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopyfabwhse); 
    
         if (pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.Count > 0) 
         { 
             result = Oeordercopyfabwhse.BuildOeordercopyfabwhseFromRow(pdsoeordercopyfabwhse.ttbloeordercopyfabwhse[0]);
         } 
              
          
         return result;
          
      }

      public void OEOrderCopyFabWhseValidate(Oeordercopyfabwhse oeordercopyfabwhse)
      {   
         
         var pdsoeordercopyfabwhse = new pdsoeordercopyfabwhseDataSet();
            
         DataRow ttbloeordercopyfabwhseCriteria = pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.NewttbloeordercopyfabwhseRow();
         Oeordercopyfabwhse.UpdateRowFromOeordercopyfabwhse(ref ttbloeordercopyfabwhseCriteria, oeordercopyfabwhse);
         pdsoeordercopyfabwhse.ttbloeordercopyfabwhse.AddttbloeordercopyfabwhseRow((pdsoeordercopyfabwhseDataSet.ttbloeordercopyfabwhseRow)ttbloeordercopyfabwhseCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyFabWhseValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyFabWhseValidate(ref pdsContext,  pdsoeordercopyfabwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyFabWhseValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopyfabwhse);
      }

      public Oeordercopy OEOrderCopyInitialize()
      {   
         var result = new Oeordercopy();
         
         var pdsoeordercopy = new pdsoeordercopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyInitialize - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyInitialize(ref pdsContext, out pdsoeordercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyInitialize - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopy); 
    
         if (pdsoeordercopy.ttbloeordercopy.Count > 0) 
         { 
             result = Oeordercopy.BuildOeordercopyFromRow(pdsoeordercopy.ttbloeordercopy[0]);
         } 
              
          
         return result;
          
      }

      public Oeordercopy OEOrderCopyLeaveCustShipto(Oeordercopy oeordercopy)
      {   
         var result = new Oeordercopy();
         
         var pdsoeordercopy = new pdsoeordercopyDataSet();
            
         DataRow ttbloeordercopyCriteria = pdsoeordercopy.ttbloeordercopy.NewttbloeordercopyRow();
         Oeordercopy.UpdateRowFromOeordercopy(ref ttbloeordercopyCriteria, oeordercopy);
         pdsoeordercopy.ttbloeordercopy.AddttbloeordercopyRow((pdsoeordercopyDataSet.ttbloeordercopyRow)ttbloeordercopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyLeaveCustShipto - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyLeaveCustShipto(ref pdsContext, ref pdsoeordercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyLeaveCustShipto - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopy); 
    
         if (pdsoeordercopy.ttbloeordercopy.Count > 0) 
         { 
             result = Oeordercopy.BuildOeordercopyFromRow(pdsoeordercopy.ttbloeordercopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Oeordercopylinelist> OEOrderCopyLinesConvert(IEnumerable<Oeordercopylinelist> oeordercopylinelist)
      {   
         var results = new List<Oeordercopylinelist>();
         
         var pdsoeordercopylinelist = new pdsoeordercopylinelistDataSet();
            
         foreach (var obj in oeordercopylinelist)
         {
             DataRow row = pdsoeordercopylinelist.ttbloeordercopylinelist.NewttbloeordercopylinelistRow();
             Oeordercopylinelist.UpdateRowFromOeordercopylinelist(ref row, obj);
             pdsoeordercopylinelist.ttbloeordercopylinelist.AddttbloeordercopylinelistRow((pdsoeordercopylinelistDataSet.ttbloeordercopylinelistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyLinesConvert - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyLinesConvert(ref pdsContext, ref pdsoeordercopylinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyLinesConvert - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopylinelist); 
    
            foreach (DataRow row in pdsoeordercopylinelist.ttbloeordercopylinelist)
            {
                results.Add(Oeordercopylinelist.BuildOeordercopylinelistFromRow(row));
            }
            return results;
        
      }

      public Oeordercopypricing OEOrderCopyPDInitialize(int iOrderNo, int iOrderSuf)
      {   
         var result = new Oeordercopypricing();
         
         var pdsoeordercopypricing = new pdsoeordercopypricingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyPDInitialize - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyPDInitialize(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoeordercopypricing, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyPDInitialize - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopypricing); 
    
         if (pdsoeordercopypricing.ttbloeordercopypricing.Count > 0) 
         { 
             result = Oeordercopypricing.BuildOeordercopypricingFromRow(pdsoeordercopypricing.ttbloeordercopypricing[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> OEOrderCopyPDUpdate(Oeordercopypricing oeordercopypricing)
      {   
         var results = new List<Messaging>();
         
         var pdsoeordercopypricing = new pdsoeordercopypricingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeordercopypricingCriteria = pdsoeordercopypricing.ttbloeordercopypricing.NewttbloeordercopypricingRow();
         Oeordercopypricing.UpdateRowFromOeordercopypricing(ref ttbloeordercopypricingCriteria, oeordercopypricing);
         pdsoeordercopypricing.ttbloeordercopypricing.AddttbloeordercopypricingRow((pdsoeordercopypricingDataSet.ttbloeordercopypricingRow)ttbloeordercopypricingCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEOrderCopyPDUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyPDUpdate(ref pdsContext,  pdsoeordercopypricing, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyPDUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopypricing); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOEOrderCopyUpdateResponseAPI OEOrderCopyUpdate(AsoeheaderOEOrderCopyUpdateRequestAPI AsoeheaderOEOrderCopyUpdateRequestAPI)
      {   
         var result = new AsoeheaderOEOrderCopyUpdateResponseAPI();
         
         var pdsoeordercopy = new pdsoeordercopyDataSet();
            
         var pdsoeordercopyorderlist = new pdsoeordercopyorderlistDataSet();
            
         var pdsoeordercopylinelist = new pdsoeordercopylinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordercopyRow = pdsoeordercopy.ttbloeordercopy.NewttbloeordercopyRow();
         Oeordercopy.UpdateRowFromOeordercopy(ref ttbloeordercopyRow, AsoeheaderOEOrderCopyUpdateRequestAPI.oeordercopy);
         pdsoeordercopy.ttbloeordercopy.AddttbloeordercopyRow((pdsoeordercopyDataSet.ttbloeordercopyRow)ttbloeordercopyRow);
          
         foreach (var obj in AsoeheaderOEOrderCopyUpdateRequestAPI.oeordercopylinelist)
         {
            DataRow ttbloeordercopylinelistRow = pdsoeordercopylinelist.ttbloeordercopylinelist.NewttbloeordercopylinelistRow();
            Oeordercopylinelist.UpdateRowFromOeordercopylinelist(ref ttbloeordercopylinelistRow, obj);
            pdsoeordercopylinelist.ttbloeordercopylinelist.AddttbloeordercopylinelistRow((pdsoeordercopylinelistDataSet.ttbloeordercopylinelistRow)ttbloeordercopylinelistRow);
         }
          
         foreach (var obj in AsoeheaderOEOrderCopyUpdateRequestAPI.oeordercopyorderlist)
         {
            DataRow ttbloeordercopyorderlistRow = pdsoeordercopyorderlist.ttbloeordercopyorderlist.NewttbloeordercopyorderlistRow();
            Oeordercopyorderlist.UpdateRowFromOeordercopyorderlist(ref ttbloeordercopyorderlistRow, obj);
            pdsoeordercopyorderlist.ttbloeordercopyorderlist.AddttbloeordercopyorderlistRow((pdsoeordercopyorderlistDataSet.ttbloeordercopyorderlistRow)ttbloeordercopyorderlistRow);
         }
          
         
         NLogLoggerP.Trace("OEOrderCopyUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyUpdate(ref pdsContext, ref pdsoeordercopy,  pdsoeordercopyorderlist,  pdsoeordercopylinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeordercopy.ttbloeordercopy.Count > 0)
         {
            result.oeordercopy = Oeordercopy.BuildOeordercopyFromRow(pdsoeordercopy.ttbloeordercopy[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> OEOrderCopyValidate(AsoeheaderOEOrderCopyValidateRequestAPI AsoeheaderOEOrderCopyValidateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoeordercopy = new pdsoeordercopyDataSet();
            
         var pdsoeordercopyorderlist = new pdsoeordercopyorderlistDataSet();
            
         var pdsoeordercopylinelist = new pdsoeordercopylinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordercopyRow = pdsoeordercopy.ttbloeordercopy.NewttbloeordercopyRow();
         Oeordercopy.UpdateRowFromOeordercopy(ref ttbloeordercopyRow, AsoeheaderOEOrderCopyValidateRequestAPI.oeordercopy);
         pdsoeordercopy.ttbloeordercopy.AddttbloeordercopyRow((pdsoeordercopyDataSet.ttbloeordercopyRow)ttbloeordercopyRow);
          
         foreach (var obj in AsoeheaderOEOrderCopyValidateRequestAPI.oeordercopylinelist)
         {
            DataRow ttbloeordercopylinelistRow = pdsoeordercopylinelist.ttbloeordercopylinelist.NewttbloeordercopylinelistRow();
            Oeordercopylinelist.UpdateRowFromOeordercopylinelist(ref ttbloeordercopylinelistRow, obj);
            pdsoeordercopylinelist.ttbloeordercopylinelist.AddttbloeordercopylinelistRow((pdsoeordercopylinelistDataSet.ttbloeordercopylinelistRow)ttbloeordercopylinelistRow);
         }
          
         foreach (var obj in AsoeheaderOEOrderCopyValidateRequestAPI.oeordercopyorderlist)
         {
            DataRow ttbloeordercopyorderlistRow = pdsoeordercopyorderlist.ttbloeordercopyorderlist.NewttbloeordercopyorderlistRow();
            Oeordercopyorderlist.UpdateRowFromOeordercopyorderlist(ref ttbloeordercopyorderlistRow, obj);
            pdsoeordercopyorderlist.ttbloeordercopyorderlist.AddttbloeordercopyorderlistRow((pdsoeordercopyorderlistDataSet.ttbloeordercopyorderlistRow)ttbloeordercopyorderlistRow);
         }
          
         
         NLogLoggerP.Trace("OEOrderCopyValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderCopyValidate(ref pdsContext,  pdsoeordercopy,  pdsoeordercopyorderlist,  pdsoeordercopylinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderCopyValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordercopy); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOEOrderSuspendLoadResponseAPI OEOrderSuspendLoad(AsoeheaderOEOrderSuspendLoadRequestAPI AsoeheaderOEOrderSuspendLoadRequestAPI)
      {   
         var result = new AsoeheaderOEOrderSuspendLoadResponseAPI();
         
         var pdsoeordersuspendloadcriteria = new pdsoeordersuspendloadcriteriaDataSet();
            
         var pdsoeordersuspendglobals = new pdsoeordersuspendglobalsDataSet();
            
         var pdsoeordersuspend = new pdsoeordersuspendDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordersuspendglobalsRow = pdsoeordersuspendglobals.ttbloeordersuspendglobals.NewttbloeordersuspendglobalsRow();
         Oeordersuspendglobals.UpdateRowFromOeordersuspendglobals(ref ttbloeordersuspendglobalsRow, AsoeheaderOEOrderSuspendLoadRequestAPI.oeordersuspendglobals);
         pdsoeordersuspendglobals.ttbloeordersuspendglobals.AddttbloeordersuspendglobalsRow((pdsoeordersuspendglobalsDataSet.ttbloeordersuspendglobalsRow)ttbloeordersuspendglobalsRow);
          
         DataRow ttbloeordersuspendloadcriteriaRow = pdsoeordersuspendloadcriteria.ttbloeordersuspendloadcriteria.NewttbloeordersuspendloadcriteriaRow();
         Oeordersuspendloadcriteria.UpdateRowFromOeordersuspendloadcriteria(ref ttbloeordersuspendloadcriteriaRow, AsoeheaderOEOrderSuspendLoadRequestAPI.oeordersuspendloadcriteria);
         pdsoeordersuspendloadcriteria.ttbloeordersuspendloadcriteria.AddttbloeordersuspendloadcriteriaRow((pdsoeordersuspendloadcriteriaDataSet.ttbloeordersuspendloadcriteriaRow)ttbloeordersuspendloadcriteriaRow);
          
         
         NLogLoggerP.Trace("OEOrderSuspendLoad - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderSuspendLoad(ref pdsContext,  pdsoeordersuspendloadcriteria, ref pdsoeordersuspendglobals, out pdsoeordersuspend, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderSuspendLoad - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordersuspendloadcriteria); 
    
         if (pdsoeordersuspend.ttbloeordersuspendsingle.Count > 0)
         {
            result.oeordersuspendsingle = Oeordersuspendsingle.BuildOeordersuspendsingleFromRow(pdsoeordersuspend.ttbloeordersuspendsingle[0]);
         }
                    
         if (pdsoeordersuspendglobals.ttbloeordersuspendglobals.Count > 0)
         {
            result.oeordersuspendglobals = Oeordersuspendglobals.BuildOeordersuspendglobalsFromRow(pdsoeordersuspendglobals.ttbloeordersuspendglobals[0]);
         }
                    
          
         return result;
          
      }

      public Oeordersuspendsingle OEOrderSuspendProcess(AsoeheaderOEOrderSuspendProcessRequestAPI AsoeheaderOEOrderSuspendProcessRequestAPI)
      {   
         var result = new Oeordersuspendsingle();
         
         var pdsoeordersuspend = new pdsoeordersuspendDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordersuspendsingleRow = pdsoeordersuspend.ttbloeordersuspendsingle.NewttbloeordersuspendsingleRow();
         Oeordersuspendsingle.UpdateRowFromOeordersuspendsingle(ref ttbloeordersuspendsingleRow, AsoeheaderOEOrderSuspendProcessRequestAPI.oeordersuspendsingle);
         pdsoeordersuspend.ttbloeordersuspendsingle.AddttbloeordersuspendsingleRow((pdsoeordersuspendDataSet.ttbloeordersuspendsingleRow)ttbloeordersuspendsingleRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsoeheaderOEOrderSuspendProcessRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("OEOrderSuspendProcess - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderSuspendProcess(ref pdsContext, ref pdsoeordersuspend,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderSuspendProcess - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordersuspend); 
    
         if (pdsoeordersuspend.ttbloeordersuspendsingle.Count > 0) 
         { 
             result = Oeordersuspendsingle.BuildOeordersuspendsingleFromRow(pdsoeordersuspend.ttbloeordersuspendsingle[0]);
         } 
              
          
         return result;
          
      }

      public Oeordersuspendsingle OEOrderSuspendValidate(AsoeheaderOEOrderSuspendValidateRequestAPI AsoeheaderOEOrderSuspendValidateRequestAPI)
      {   
         var result = new Oeordersuspendsingle();
         
         var pdsoeordersuspend = new pdsoeordersuspendDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeordersuspendsingleRow = pdsoeordersuspend.ttbloeordersuspendsingle.NewttbloeordersuspendsingleRow();
         Oeordersuspendsingle.UpdateRowFromOeordersuspendsingle(ref ttbloeordersuspendsingleRow, AsoeheaderOEOrderSuspendValidateRequestAPI.oeordersuspendsingle);
         pdsoeordersuspend.ttbloeordersuspendsingle.AddttbloeordersuspendsingleRow((pdsoeordersuspendDataSet.ttbloeordersuspendsingleRow)ttbloeordersuspendsingleRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsoeheaderOEOrderSuspendValidateRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("OEOrderSuspendValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEOrderSuspendValidate(ref pdsContext, ref pdsoeordersuspend,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEOrderSuspendValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeordersuspend); 
    
         if (pdsoeordersuspend.ttbloeordersuspendsingle.Count > 0) 
         { 
             result = Oeordersuspendsingle.BuildOeordersuspendsingleFromRow(pdsoeordersuspend.ttbloeordersuspendsingle[0]);
         } 
              
          
         return result;
          
      }

      public void OEPrintAck(Submitreport submitreport)
      {   
         
         var pdssubmitreport = new pdssubmitreportDataSet();
            
         DataRow ttblsubmitreportCriteria = pdssubmitreport.ttblsubmitreport.NewttblsubmitreportRow();
         Submitreport.UpdateRowFromSubmitreport(ref ttblsubmitreportCriteria, submitreport);
         pdssubmitreport.ttblsubmitreport.AddttblsubmitreportRow((pdssubmitreportDataSet.ttblsubmitreportRow)ttblsubmitreportCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEPrintAck - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEPrintAck(ref pdsContext,  pdssubmitreport, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEPrintAck - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssubmitreport);
      }

      public AsoeheaderOEProcessGeoCodeResponseAPI OEProcessGeoCode(Geocodelookupcriteria geocodelookupcriteria)
      {   
         var result = new AsoeheaderOEProcessGeoCodeResponseAPI();
         
         var pdsgeocodelookup = new pdsgeocodelookupDataSet();
            
         DataRow ttblgeocodelookupcriteriaCriteria = pdsgeocodelookup.ttblgeocodelookupcriteria.NewttblgeocodelookupcriteriaRow();
         Geocodelookupcriteria.UpdateRowFromGeocodelookupcriteria(ref ttblgeocodelookupcriteriaCriteria, geocodelookupcriteria);
         pdsgeocodelookup.ttblgeocodelookupcriteria.AddttblgeocodelookupcriteriaRow((pdsgeocodelookupDataSet.ttblgeocodelookupcriteriaRow)ttblgeocodelookupcriteriaCriteria);
            
         string cOutputCode = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEProcessGeoCode - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEProcessGeoCode(ref pdsContext, ref pdsgeocodelookup, out cOutputCode, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEProcessGeoCode - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgeocodelookup); 
    
         foreach (DataRow row in pdsgeocodelookup.ttblgeocodelookupresults)
         {
            result.geocodelookupresults.Add(Geocodelookupresults.BuildGeocodelookupresultsFromRow(row));
         }     
         result.cOutputCode = cOutputCode;
          
         return result;
          
      }

      public void OERemoveSoftLock(int iOrderNo, int iOrderSuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OERemoveSoftLock - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OERemoveSoftLock(ref pdsContext,  iOrderNo,  iOrderSuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OERemoveSoftLock - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void OETaxDetailCreate(AsoeheaderOETaxDetailCreateRequestAPI AsoeheaderOETaxDetailCreateRequestAPI)
      {   
         
         var pdsoetaxdetail = new pdsoetaxdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloetaxdetailRow = pdsoetaxdetail.ttbloetaxdetail.NewttbloetaxdetailRow();
         Oetaxdetail.UpdateRowFromOetaxdetail(ref ttbloetaxdetailRow, AsoeheaderOETaxDetailCreateRequestAPI.oetaxdetail);
         pdsoetaxdetail.ttbloetaxdetail.AddttbloetaxdetailRow((pdsoetaxdetailDataSet.ttbloetaxdetailRow)ttbloetaxdetailRow);
          
         var  iOrderNo = AsoeheaderOETaxDetailCreateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeheaderOETaxDetailCreateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OETaxDetailCreate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETaxDetailCreate(ref pdsContext,  iOrderNo,  iOrderSuf,  pdsoetaxdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETaxDetailCreate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetaxdetail);
      }

      public void OETaxDetailDelete(AsoeheaderOETaxDetailDeleteRequestAPI AsoeheaderOETaxDetailDeleteRequestAPI)
      {   
         
         var pdsoetaxdetail = new pdsoetaxdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloetaxdetailRow = pdsoetaxdetail.ttbloetaxdetail.NewttbloetaxdetailRow();
         Oetaxdetail.UpdateRowFromOetaxdetail(ref ttbloetaxdetailRow, AsoeheaderOETaxDetailDeleteRequestAPI.oetaxdetail);
         pdsoetaxdetail.ttbloetaxdetail.AddttbloetaxdetailRow((pdsoetaxdetailDataSet.ttbloetaxdetailRow)ttbloetaxdetailRow);
          
         var  iOrderNo = AsoeheaderOETaxDetailDeleteRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeheaderOETaxDetailDeleteRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OETaxDetailDelete - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETaxDetailDelete(ref pdsContext,  iOrderNo,  iOrderSuf,  pdsoetaxdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETaxDetailDelete - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetaxdetail);
      }

      public IEnumerable<Oetaxdetail> OETaxDetailRetrieve(int iOrderNo, int iOrderSuf)
      {   
         var results = new List<Oetaxdetail>();
         
         var pdsoetaxdetail = new pdsoetaxdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OETaxDetailRetrieve - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETaxDetailRetrieve(ref pdsContext,  iOrderNo,  iOrderSuf, out pdsoetaxdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETaxDetailRetrieve - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetaxdetail); 
    
            foreach (DataRow row in pdsoetaxdetail.ttbloetaxdetail)
            {
                results.Add(Oetaxdetail.BuildOetaxdetailFromRow(row));
            }
            return results;
        
      }

      public void OETaxDetailUpdate(AsoeheaderOETaxDetailUpdateRequestAPI AsoeheaderOETaxDetailUpdateRequestAPI)
      {   
         
         var pdsoetaxdetail = new pdsoetaxdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloetaxdetailRow = pdsoetaxdetail.ttbloetaxdetail.NewttbloetaxdetailRow();
         Oetaxdetail.UpdateRowFromOetaxdetail(ref ttbloetaxdetailRow, AsoeheaderOETaxDetailUpdateRequestAPI.oetaxdetail);
         pdsoetaxdetail.ttbloetaxdetail.AddttbloetaxdetailRow((pdsoetaxdetailDataSet.ttbloetaxdetailRow)ttbloetaxdetailRow);
          
         var  iOrderNo = AsoeheaderOETaxDetailUpdateRequestAPI.iOrderNo;
            
         var  iOrderSuf = AsoeheaderOETaxDetailUpdateRequestAPI.iOrderSuf;
            
         
         NLogLoggerP.Trace("OETaxDetailUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETaxDetailUpdate(ref pdsContext,  iOrderNo,  iOrderSuf,  pdsoetaxdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETaxDetailUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetaxdetail);
      }

      public IEnumerable<Messaging> OETaxesTotalsUpdate(AsoeheaderOETaxesTotalsUpdateRequestAPI AsoeheaderOETaxesTotalsUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdsoeaddons = new pdsoeaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeheaderOETaxesTotalsUpdateRequestAPI.oeaddons)
         {
            DataRow ttbloeaddonsRow = pdsoeaddons.ttbloeaddons.NewttbloeaddonsRow();
            Oeaddons.UpdateRowFromOeaddons(ref ttbloeaddonsRow, obj);
            pdsoeaddons.ttbloeaddons.AddttbloeaddonsRow((pdsoeaddonsDataSet.ttbloeaddonsRow)ttbloeaddonsRow);
         }
          
         DataRow ttbloehdrRow = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrRow, AsoeheaderOETaxesTotalsUpdateRequestAPI.oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrRow);
          
         var  lMaintMode = AsoeheaderOETaxesTotalsUpdateRequestAPI.lMaintMode;
            
         
         NLogLoggerP.Trace("OETaxesTotalsUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETaxesTotalsUpdate(ref pdsContext,  lMaintMode,  pdsoehdr,  pdsoeaddons, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETaxesTotalsUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOETenderingUpdateResponseAPI OETenderingUpdate(AsoeheaderOETenderingUpdateRequestAPI AsoeheaderOETenderingUpdateRequestAPI)
      {   
         var result = new AsoeheaderOETenderingUpdateResponseAPI();
         
         var pdsoetenderingupdate = new pdsoetenderingupdateDataSet();
            
         var pdstendering = new pdstenderingDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloetenderingupdatecriteriaRow = pdsoetenderingupdate.ttbloetenderingupdatecriteria.NewttbloetenderingupdatecriteriaRow();
         Oetenderingupdatecriteria.UpdateRowFromOetenderingupdatecriteria(ref ttbloetenderingupdatecriteriaRow, AsoeheaderOETenderingUpdateRequestAPI.oetenderingupdatecriteria);
         pdsoetenderingupdate.ttbloetenderingupdatecriteria.AddttbloetenderingupdatecriteriaRow((pdsoetenderingupdateDataSet.ttbloetenderingupdatecriteriaRow)ttbloetenderingupdatecriteriaRow);
          
         foreach (var obj in AsoeheaderOETenderingUpdateRequestAPI.tendering)
         {
            DataRow ttbltenderingRow = pdstendering.ttbltendering.NewttbltenderingRow();
            Tendering.UpdateRowFromTendering(ref ttbltenderingRow, obj);
            pdstendering.ttbltendering.AddttbltenderingRow((pdstenderingDataSet.ttbltenderingRow)ttbltenderingRow);
         }
          
         
         NLogLoggerP.Trace("OETenderingUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OETenderingUpdate(ref pdsContext, ref pdsoetenderingupdate,  pdstendering, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OETenderingUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoetenderingupdate); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoetenderingupdate.ttbloetenderingupdateresults.Count > 0)
         {
            result.oetenderingupdateresults = Oetenderingupdateresults.BuildOetenderingupdateresultsFromRow(pdsoetenderingupdate.ttbloetenderingupdateresults[0]);
         }
                    
          
         return result;
          
      }

      public AsoeheaderOEHeaderViewEDIErrExcInitResponseAPI OEHeaderViewEDIErrExcInit(AsoeheaderOEHeaderViewEDIErrExcInitRequestAPI AsoeheaderOEHeaderViewEDIErrExcInitRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderViewEDIErrExcInitResponseAPI();
         
         var pdsoeheaderviewedidata = new pdsoeheaderviewedidataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderedicriteriaRow = pdsoeheaderviewedidata.ttbloeheaderedicriteria.NewttbloeheaderedicriteriaRow();
         Oeheaderedicriteria.UpdateRowFromOeheaderedicriteria(ref ttbloeheaderedicriteriaRow, AsoeheaderOEHeaderViewEDIErrExcInitRequestAPI.oeheaderedicriteria);
         pdsoeheaderviewedidata.ttbloeheaderedicriteria.AddttbloeheaderedicriteriaRow((pdsoeheaderviewedidataDataSet.ttbloeheaderedicriteriaRow)ttbloeheaderedicriteriaRow);
          
         DataRow ttbloeheaderediresultsRow = pdsoeheaderviewedidata.ttbloeheaderediresults.NewttbloeheaderediresultsRow();
         Oeheaderediresults.UpdateRowFromOeheaderediresults(ref ttbloeheaderediresultsRow, AsoeheaderOEHeaderViewEDIErrExcInitRequestAPI.oeheaderediresults);
         pdsoeheaderviewedidata.ttbloeheaderediresults.AddttbloeheaderediresultsRow((pdsoeheaderviewedidataDataSet.ttbloeheaderediresultsRow)ttbloeheaderediresultsRow);
          
         
         NLogLoggerP.Trace("OEHeaderViewEDIErrExcInit - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderViewEDIErrExcInit(ref pdsContext, ref pdsoeheaderviewedidata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderViewEDIErrExcInit - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderviewedidata); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeheaderviewedidata.ttbloeheaderedierrorresults)
         {
            result.oeheaderedierrorresults.Add(Oeheaderedierrorresults.BuildOeheaderedierrorresultsFromRow(row));
         }     
         if (pdsoeheaderviewedidata.ttbloeheaderediresults.Count > 0)
         {
            result.oeheaderediresults = Oeheaderediresults.BuildOeheaderediresultsFromRow(pdsoeheaderviewedidata.ttbloeheaderediresults[0]);
         }
                    
          
         return result;
          
      }

      public AsoeheaderOEHeaderViewEDIErrExcActionResponseAPI OEHeaderViewEDIErrExcAction(AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderViewEDIErrExcActionResponseAPI();
         
         var pdsoeheaderviewedidata = new pdsoeheaderviewedidataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderedicriteriaRow = pdsoeheaderviewedidata.ttbloeheaderedicriteria.NewttbloeheaderedicriteriaRow();
         Oeheaderedicriteria.UpdateRowFromOeheaderedicriteria(ref ttbloeheaderedicriteriaRow, AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI.oeheaderedicriteria);
         pdsoeheaderviewedidata.ttbloeheaderedicriteria.AddttbloeheaderedicriteriaRow((pdsoeheaderviewedidataDataSet.ttbloeheaderedicriteriaRow)ttbloeheaderedicriteriaRow);
          
         foreach (var obj in AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI.oeheaderedierrorresults)
         {
            DataRow ttbloeheaderedierrorresultsRow = pdsoeheaderviewedidata.ttbloeheaderedierrorresults.NewttbloeheaderedierrorresultsRow();
            Oeheaderedierrorresults.UpdateRowFromOeheaderedierrorresults(ref ttbloeheaderedierrorresultsRow, obj);
            pdsoeheaderviewedidata.ttbloeheaderedierrorresults.AddttbloeheaderedierrorresultsRow((pdsoeheaderviewedidataDataSet.ttbloeheaderedierrorresultsRow)ttbloeheaderedierrorresultsRow);
         }
          
         DataRow ttbloeheaderediresultsRow = pdsoeheaderviewedidata.ttbloeheaderediresults.NewttbloeheaderediresultsRow();
         Oeheaderediresults.UpdateRowFromOeheaderediresults(ref ttbloeheaderediresultsRow, AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI.oeheaderediresults);
         pdsoeheaderviewedidata.ttbloeheaderediresults.AddttbloeheaderediresultsRow((pdsoeheaderviewedidataDataSet.ttbloeheaderediresultsRow)ttbloeheaderediresultsRow);
          
         var  pvFieldname = AsoeheaderOEHeaderViewEDIErrExcActionRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("OEHeaderViewEDIErrExcAction - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderViewEDIErrExcAction(ref pdsContext,  pvFieldname, ref pdsoeheaderviewedidata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderViewEDIErrExcAction - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderviewedidata); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeheaderviewedidata.ttbloeheaderedierrorresults)
         {
            result.oeheaderedierrorresults.Add(Oeheaderedierrorresults.BuildOeheaderedierrorresultsFromRow(row));
         }     
         if (pdsoeheaderviewedidata.ttbloeheaderediresults.Count > 0)
         {
            result.oeheaderediresults = Oeheaderediresults.BuildOeheaderediresultsFromRow(pdsoeheaderviewedidata.ttbloeheaderediresults[0]);
         }
                    
          
         return result;
          
      }

      public Oeheaderediresults OEHeaderViewEDIErrExcFinish(AsoeheaderOEHeaderViewEDIErrExcFinishRequestAPI AsoeheaderOEHeaderViewEDIErrExcFinishRequestAPI)
      {   
         var result = new Oeheaderediresults();
         
         var pdsoeheaderviewedidata = new pdsoeheaderviewedidataDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderedicriteriaRow = pdsoeheaderviewedidata.ttbloeheaderedicriteria.NewttbloeheaderedicriteriaRow();
         Oeheaderedicriteria.UpdateRowFromOeheaderedicriteria(ref ttbloeheaderedicriteriaRow, AsoeheaderOEHeaderViewEDIErrExcFinishRequestAPI.oeheaderedicriteria);
         pdsoeheaderviewedidata.ttbloeheaderedicriteria.AddttbloeheaderedicriteriaRow((pdsoeheaderviewedidataDataSet.ttbloeheaderedicriteriaRow)ttbloeheaderedicriteriaRow);
          
         DataRow ttbloeheaderediresultsRow = pdsoeheaderviewedidata.ttbloeheaderediresults.NewttbloeheaderediresultsRow();
         Oeheaderediresults.UpdateRowFromOeheaderediresults(ref ttbloeheaderediresultsRow, AsoeheaderOEHeaderViewEDIErrExcFinishRequestAPI.oeheaderediresults);
         pdsoeheaderviewedidata.ttbloeheaderediresults.AddttbloeheaderediresultsRow((pdsoeheaderviewedidataDataSet.ttbloeheaderediresultsRow)ttbloeheaderediresultsRow);
          
         
         NLogLoggerP.Trace("OEHeaderViewEDIErrExcFinish - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderViewEDIErrExcFinish(ref pdsContext, ref pdsoeheaderviewedidata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderViewEDIErrExcFinish - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderviewedidata); 
    
         if (pdsoeheaderviewedidata.ttbloeheaderediresults.Count > 0) 
         { 
             result = Oeheaderediresults.BuildOeheaderediresultsFromRow(pdsoeheaderviewedidata.ttbloeheaderediresults[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderOEHeaderLeaveFieldResponseAPI OEHeaderLeaveField(AsoeheaderOEHeaderLeaveFieldRequestAPI AsoeheaderOEHeaderLeaveFieldRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderLeaveFieldResponseAPI();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloehdrRow = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrRow, AsoeheaderOEHeaderLeaveFieldRequestAPI.oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrRow);
          
         var  pvFieldname = AsoeheaderOEHeaderLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("OEHeaderLeaveField - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderLeaveField(ref pdsContext,  pvFieldname, ref pdsoehdr, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderLeaveField - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoehdr.ttbloehdr.Count > 0)
         {
            result.oehdr = Oehdr.BuildOehdrFromRow(pdsoehdr.ttbloehdr[0]);
         }
                    
          
         return result;
          
      }

      public Oeheaderroa OEHeaderROAInitialize()
      {   
         var result = new Oeheaderroa();
         
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderROAInitialize - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROAInitialize(ref pdsContext, out pdsoeheaderroa, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROAInitialize - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderroa); 
    
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0) 
         { 
             result = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderOEHeaderROALeaveFieldResponseAPI OEHeaderROALeaveField(AsoeheaderOEHeaderROALeaveFieldRequestAPI AsoeheaderOEHeaderROALeaveFieldRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderROALeaveFieldResponseAPI();
         
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderroaRow = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaRow, AsoeheaderOEHeaderROALeaveFieldRequestAPI.oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaRow);
          
         var  pvFieldname = AsoeheaderOEHeaderROALeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("OEHeaderROALeaveField - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROALeaveField(ref pdsContext,  pvFieldname, ref pdsoeheaderroa, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROALeaveField - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderroa); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0)
         {
            result.oeheaderroa = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         }
                    
          
         return result;
          
      }

      public Oeheaderroa OEHeaderROAValidate(AsoeheaderOEHeaderROAValidateRequestAPI AsoeheaderOEHeaderROAValidateRequestAPI)
      {   
         var result = new Oeheaderroa();
         
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderroaRow = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaRow, AsoeheaderOEHeaderROAValidateRequestAPI.oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaRow);
          
         var  pvJrnlno = AsoeheaderOEHeaderROAValidateRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("OEHeaderROAValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROAValidate(ref pdsContext,  pvJrnlno, ref pdsoeheaderroa, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROAValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderroa); 
    
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0) 
         { 
             result = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderOEHeaderROAUpdateResponseAPI OEHeaderROAUpdate(AsoeheaderOEHeaderROAUpdateRequestAPI AsoeheaderOEHeaderROAUpdateRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderROAUpdateResponseAPI();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeheaderOEHeaderROAUpdateRequestAPI.oeetprintreportlist)
         {
            DataRow ttbloeetprintreportlistRow = pdsoeetprint.ttbloeetprintreportlist.NewttbloeetprintreportlistRow();
            Oeetprintreportlist.UpdateRowFromOeetprintreportlist(ref ttbloeetprintreportlistRow, obj);
            pdsoeetprint.ttbloeetprintreportlist.AddttbloeetprintreportlistRow((pdsoeetprintDataSet.ttbloeetprintreportlistRow)ttbloeetprintreportlistRow);
         }
          
         DataRow ttbloeheaderroaRow = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaRow, AsoeheaderOEHeaderROAUpdateRequestAPI.oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaRow);
          
         foreach (var obj in AsoeheaderOEHeaderROAUpdateRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  pvJrnlno = AsoeheaderOEHeaderROAUpdateRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("OEHeaderROAUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROAUpdate(ref pdsContext,  pvJrnlno,  pdsprintersettings,  pdsoeetprint, ref pdsoeheaderroa, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROAUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0)
         {
            result.oeheaderroa = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         }
                    
          
         return result;
          
      }

      public Oeheaderroa OEHeaderROACancel(Oeheaderroa oeheaderroa)
      {   
         var result = new Oeheaderroa();
         
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         DataRow ttbloeheaderroaCriteria = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaCriteria, oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderROACancel - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROACancel(ref pdsContext, ref pdsoeheaderroa, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROACancel - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderroa); 
    
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0) 
         { 
             result = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderOEHeaderROABeforeOneTimeResponseAPI OEHeaderROABeforeOneTime(AsoeheaderOEHeaderROABeforeOneTimeRequestAPI AsoeheaderOEHeaderROABeforeOneTimeRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderROABeforeOneTimeResponseAPI();
         
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheaderroaRow = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaRow, AsoeheaderOEHeaderROABeforeOneTimeRequestAPI.oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaRow);
          
         var  pvJrnlno = AsoeheaderOEHeaderROABeforeOneTimeRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("OEHeaderROABeforeOneTime - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROABeforeOneTime(ref pdsContext,  pvJrnlno, ref pdsoeheaderroa, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROABeforeOneTime - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheaderroa); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0)
         {
            result.oeheaderroa = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         }
                    
          
         return result;
          
      }

      public AsoeheaderOEHeaderROAAfterOneTimeResponseAPI OEHeaderROAAfterOneTime(AsoeheaderOEHeaderROAAfterOneTimeRequestAPI AsoeheaderOEHeaderROAAfterOneTimeRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderROAAfterOneTimeResponseAPI();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsoeetprint = new pdsoeetprintDataSet();
            
         var pdsoeheaderroa = new pdsoeheaderroaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeheaderOEHeaderROAAfterOneTimeRequestAPI.oeetprintreportlist)
         {
            DataRow ttbloeetprintreportlistRow = pdsoeetprint.ttbloeetprintreportlist.NewttbloeetprintreportlistRow();
            Oeetprintreportlist.UpdateRowFromOeetprintreportlist(ref ttbloeetprintreportlistRow, obj);
            pdsoeetprint.ttbloeetprintreportlist.AddttbloeetprintreportlistRow((pdsoeetprintDataSet.ttbloeetprintreportlistRow)ttbloeetprintreportlistRow);
         }
          
         DataRow ttbloeheaderroaRow = pdsoeheaderroa.ttbloeheaderroa.NewttbloeheaderroaRow();
         Oeheaderroa.UpdateRowFromOeheaderroa(ref ttbloeheaderroaRow, AsoeheaderOEHeaderROAAfterOneTimeRequestAPI.oeheaderroa);
         pdsoeheaderroa.ttbloeheaderroa.AddttbloeheaderroaRow((pdsoeheaderroaDataSet.ttbloeheaderroaRow)ttbloeheaderroaRow);
          
         foreach (var obj in AsoeheaderOEHeaderROAAfterOneTimeRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  pvJrnlno = AsoeheaderOEHeaderROAAfterOneTimeRequestAPI.pvJrnlno;
            
         
         NLogLoggerP.Trace("OEHeaderROAAfterOneTime - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderROAAfterOneTime(ref pdsContext,  pvJrnlno,  pdsprintersettings,  pdsoeetprint, ref pdsoeheaderroa, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderROAAfterOneTime - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheaderroa.ttbloeheaderroa.Count > 0)
         {
            result.oeheaderroa = Oeheaderroa.BuildOeheaderroaFromRow(pdsoeheaderroa.ttbloeheaderroa[0]);
         }
                    
          
         return result;
          
      }

      public Oeheadercrrmpopup OEHeaderCRRMPopupValidate(Oeheadercrrmpopup oeheadercrrmpopup)
      {   
         var result = new Oeheadercrrmpopup();
         
         var pdsoeheadercrrmpopup = new pdsoeheadercrrmpopupDataSet();
            
         DataRow ttbloeheadercrrmpopupCriteria = pdsoeheadercrrmpopup.ttbloeheadercrrmpopup.NewttbloeheadercrrmpopupRow();
         Oeheadercrrmpopup.UpdateRowFromOeheadercrrmpopup(ref ttbloeheadercrrmpopupCriteria, oeheadercrrmpopup);
         pdsoeheadercrrmpopup.ttbloeheadercrrmpopup.AddttbloeheadercrrmpopupRow((pdsoeheadercrrmpopupDataSet.ttbloeheadercrrmpopupRow)ttbloeheadercrrmpopupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderCRRMPopupValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderCRRMPopupValidate(ref pdsContext, ref pdsoeheadercrrmpopup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderCRRMPopupValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheadercrrmpopup); 
    
         if (pdsoeheadercrrmpopup.ttbloeheadercrrmpopup.Count > 0) 
         { 
             result = Oeheadercrrmpopup.BuildOeheadercrrmpopupFromRow(pdsoeheadercrrmpopup.ttbloeheadercrrmpopup[0]);
         } 
              
          
         return result;
          
      }

      public AsoeheaderOELoadForceTenderResponseAPI OELoadForceTender(AsoeheaderOELoadForceTenderRequestAPI AsoeheaderOELoadForceTenderRequestAPI)
      {   
         var result = new AsoeheaderOELoadForceTenderResponseAPI();
         
         var pdsoehdr = new pdsoehdrDataSet();
            
         string cForceTender = string.Empty;
         decimal dForceTenderAmt = 0;
         string cErrorMessage = string.Empty;
   
         DataRow ttbloehdrRow = pdsoehdr.ttbloehdr.NewttbloehdrRow();
         Oehdr.UpdateRowFromOehdr(ref ttbloehdrRow, AsoeheaderOELoadForceTenderRequestAPI.oehdr);
         pdsoehdr.ttbloehdr.AddttbloehdrRow((pdsoehdrDataSet.ttbloehdrRow)ttbloehdrRow);
          
         var  lMaintMode = AsoeheaderOELoadForceTenderRequestAPI.lMaintMode;
            
         var  cTenderTy = AsoeheaderOELoadForceTenderRequestAPI.cTenderTy;
            
         
         NLogLoggerP.Trace("OELoadForceTender - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OELoadForceTender(ref pdsContext,  lMaintMode,  cTenderTy,  pdsoehdr, out cForceTender, out dForceTenderAmt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OELoadForceTender - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoehdr); 
    
         result.cForceTender = cForceTender;
         result.dForceTenderAmt = dForceTenderAmt;
          
         return result;
          
      }

      public AsoeheaderOEHeaderMaintCustPOLeaveFieldResponseAPI OEHeaderMaintCustPOLeaveField(AsoeheaderOEHeaderMaintCustPOLeaveFieldRequestAPI AsoeheaderOEHeaderMaintCustPOLeaveFieldRequestAPI)
      {   
         var result = new AsoeheaderOEHeaderMaintCustPOLeaveFieldResponseAPI();
         
         var pdsoeheadermaintcustpo = new pdsoeheadermaintcustpoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloeheadermaintcustpoRow = pdsoeheadermaintcustpo.ttbloeheadermaintcustpo.NewttbloeheadermaintcustpoRow();
         Oeheadermaintcustpo.UpdateRowFromOeheadermaintcustpo(ref ttbloeheadermaintcustpoRow, AsoeheaderOEHeaderMaintCustPOLeaveFieldRequestAPI.oeheadermaintcustpo);
         pdsoeheadermaintcustpo.ttbloeheadermaintcustpo.AddttbloeheadermaintcustpoRow((pdsoeheadermaintcustpoDataSet.ttbloeheadermaintcustpoRow)ttbloeheadermaintcustpoRow);
          
         var  cFieldName = AsoeheaderOEHeaderMaintCustPOLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("OEHeaderMaintCustPOLeaveField - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderMaintCustPOLeaveField(ref pdsContext,  cFieldName, ref pdsoeheadermaintcustpo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderMaintCustPOLeaveField - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheadermaintcustpo); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsoeheadermaintcustpo.ttbloeheadermaintcustpo.Count > 0)
         {
            result.oeheadermaintcustpo = Oeheadermaintcustpo.BuildOeheadermaintcustpoFromRow(pdsoeheadermaintcustpo.ttbloeheadermaintcustpo[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> OEHeaderMaintCustPOUpdate(Oeheadermaintcustpo oeheadermaintcustpo)
      {   
         var results = new List<Messaging>();
         
         var pdsoeheadermaintcustpo = new pdsoeheadermaintcustpoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbloeheadermaintcustpoCriteria = pdsoeheadermaintcustpo.ttbloeheadermaintcustpo.NewttbloeheadermaintcustpoRow();
         Oeheadermaintcustpo.UpdateRowFromOeheadermaintcustpo(ref ttbloeheadermaintcustpoCriteria, oeheadermaintcustpo);
         pdsoeheadermaintcustpo.ttbloeheadermaintcustpo.AddttbloeheadermaintcustpoRow((pdsoeheadermaintcustpoDataSet.ttbloeheadermaintcustpoRow)ttbloeheadermaintcustpoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEHeaderMaintCustPOUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEHeaderMaintCustPOUpdate(ref pdsContext,  pdsoeheadermaintcustpo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEHeaderMaintCustPOUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeheadermaintcustpo); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOEImportLoadResponseAPI OEImportLoad(AsoeheaderOEImportLoadRequestAPI AsoeheaderOEImportLoadRequestAPI)
      {   
         var result = new AsoeheaderOEImportLoadResponseAPI();
         
         var pdsoeimportfile = new pdsoeimportfileDataSet();
            
         var pdsoeimportdata = new pdsoeimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeheaderOEImportLoadRequestAPI.oeimportfile)
         {
            DataRow ttbloeimportfileRow = pdsoeimportfile.ttbloeimportfile.NewttbloeimportfileRow();
            Oeimportfile.UpdateRowFromOeimportfile(ref ttbloeimportfileRow, obj);
            pdsoeimportfile.ttbloeimportfile.AddttbloeimportfileRow((pdsoeimportfileDataSet.ttbloeimportfileRow)ttbloeimportfileRow);
         }
          
         var  iMaxLines = AsoeheaderOEImportLoadRequestAPI.iMaxLines;
            
         
         NLogLoggerP.Trace("OEImportLoad - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEImportLoad(ref pdsContext,  iMaxLines,  pdsoeimportfile, out pdsoeimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEImportLoad - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeimportfile); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeimportdata.ttbloeimportdata)
         {
            result.oeimportdata.Add(Oeimportdata.BuildOeimportdataFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> OEImportUpdate(AsoeheaderOEImportUpdateRequestAPI AsoeheaderOEImportUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoeimportdata = new pdsoeimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsoeheaderOEImportUpdateRequestAPI.oeimportdata)
         {
            DataRow ttbloeimportdataRow = pdsoeimportdata.ttbloeimportdata.NewttbloeimportdataRow();
            Oeimportdata.UpdateRowFromOeimportdata(ref ttbloeimportdataRow, obj);
            pdsoeimportdata.ttbloeimportdata.AddttbloeimportdataRow((pdsoeimportdataDataSet.ttbloeimportdataRow)ttbloeimportdataRow);
         }
          
         var  iOrderNo = AsoeheaderOEImportUpdateRequestAPI.iOrderNo;
            
         var  iWorkSheetNo = AsoeheaderOEImportUpdateRequestAPI.iWorkSheetNo;
            
         
         NLogLoggerP.Trace("OEImportUpdate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEImportUpdate(ref pdsContext,  iOrderNo,  iWorkSheetNo,  pdsoeimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEImportUpdate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeimportdata); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsoeheaderOEImportValidateResponseAPI OEImportValidate(IEnumerable<Oeimportdata> oeimportdata)
      {   
         var result = new AsoeheaderOEImportValidateResponseAPI();
         
         var pdsoeimportdata = new pdsoeimportdataDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in oeimportdata)
         {
             DataRow row = pdsoeimportdata.ttbloeimportdata.NewttbloeimportdataRow();
             Oeimportdata.UpdateRowFromOeimportdata(ref row, obj);
             pdsoeimportdata.ttbloeimportdata.AddttbloeimportdataRow((pdsoeimportdataDataSet.ttbloeimportdataRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEImportValidate - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEImportValidate(ref pdsContext, ref pdsoeimportdata, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEImportValidate - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoeimportdata); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsoeimportdata.ttbloeimportdata)
         {
            result.oeimportdata.Add(Oeimportdata.BuildOeimportdataFromRow(row));
         }     
          
         return result;
          
      }

      public AsoeheaderOEWTBillingSearchResponseAPI OEWTBillingSearch(Oewtbillingcriteria oewtbillingcriteria)
      {   
         var result = new AsoeheaderOEWTBillingSearchResponseAPI();
         
         var pdsoewtbillingsearch = new pdsoewtbillingsearchDataSet();
            
         DataRow ttbloewtbillingcriteriaCriteria = pdsoewtbillingsearch.ttbloewtbillingcriteria.NewttbloewtbillingcriteriaRow();
         Oewtbillingcriteria.UpdateRowFromOewtbillingcriteria(ref ttbloewtbillingcriteriaCriteria, oewtbillingcriteria);
         pdsoewtbillingsearch.ttbloewtbillingcriteria.AddttbloewtbillingcriteriaRow((pdsoewtbillingsearchDataSet.ttbloewtbillingcriteriaRow)ttbloewtbillingcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OEWTBillingSearch - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEWTBillingSearch(ref pdsContext, ref pdsoewtbillingsearch, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEWTBillingSearch - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoewtbillingsearch); 
    
         foreach (DataRow row in pdsoewtbillingsearch.ttbloewtbillingresults)
         {
            result.oewtbillingresults.Add(Oewtbillingresults.BuildOewtbillingresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Messaging> OEWTBillingUpdt(AsoeheaderOEWTBillingUpdtRequestAPI AsoeheaderOEWTBillingUpdtRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsoewtbillingsearch = new pdsoewtbillingsearchDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbloewtbillingcriteriaRow = pdsoewtbillingsearch.ttbloewtbillingcriteria.NewttbloewtbillingcriteriaRow();
         Oewtbillingcriteria.UpdateRowFromOewtbillingcriteria(ref ttbloewtbillingcriteriaRow, AsoeheaderOEWTBillingUpdtRequestAPI.oewtbillingcriteria);
         pdsoewtbillingsearch.ttbloewtbillingcriteria.AddttbloewtbillingcriteriaRow((pdsoewtbillingsearchDataSet.ttbloewtbillingcriteriaRow)ttbloewtbillingcriteriaRow);
          
         foreach (var obj in AsoeheaderOEWTBillingUpdtRequestAPI.oewtbillingresults)
         {
            DataRow ttbloewtbillingresultsRow = pdsoewtbillingsearch.ttbloewtbillingresults.NewttbloewtbillingresultsRow();
            Oewtbillingresults.UpdateRowFromOewtbillingresults(ref ttbloewtbillingresultsRow, obj);
            pdsoewtbillingsearch.ttbloewtbillingresults.AddttbloewtbillingresultsRow((pdsoewtbillingsearchDataSet.ttbloewtbillingresultsRow)ttbloewtbillingresultsRow);
         }
          
         var  cUpdType = AsoeheaderOEWTBillingUpdtRequestAPI.cUpdType;
            
         
         NLogLoggerP.Trace("OEWTBillingUpdt - Asoeheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsoeheaderproxy = this.proxyAppObject.CreatePO_asoeheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsoeheaderproxy.OEWTBillingUpdt(ref pdsContext,  cUpdType,  pdsoewtbillingsearch, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OEWTBillingUpdt - Asoeheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsoewtbillingsearch); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  