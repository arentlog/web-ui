//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.SL.Data.Adapters
{
   using com.infor.sxproxy.slproxy;
   using com.infor.sxproxy.slproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsslimportdefcopy;
   using Models.Pdsslehgetheadlist;
   using Models.Pdssledgetprodlist;
   using Models.Pdssledgetproddetail;
   using Models.Pdssledgetheadlist;
   using Models.Pdssleeprodlistcriteria;
   using Models.Pdssleeprodlistresults;
   using Models.Pdssleeproductfull;
   using Models.Pdssleeproderrorholdcd;
   using Models.Pdssleechgstatuscode;
   using Models.Pdsslpricecostmultcopy;
   using Models.Pdsslnewitemdefaultscopy;
   using Models.Pdsslimportdeffix;
   using Models.Complex;

   public partial class AsslsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private SLProxyAppObject proxyAppObject;
      
      public AsslsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new SLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsslsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Slimportdefcopy SLImportDefCopy(Slimportdefcopy slimportdefcopy)
      {   
         var result = new Slimportdefcopy();
         
         var pdsslimportdefcopy = new pdsslimportdefcopyDataSet();
            
         DataRow ttblslimportdefcopyCriteria = pdsslimportdefcopy.ttblslimportdefcopy.NewttblslimportdefcopyRow();
         Slimportdefcopy.UpdateRowFromSlimportdefcopy(ref ttblslimportdefcopyCriteria, slimportdefcopy);
         pdsslimportdefcopy.ttblslimportdefcopy.AddttblslimportdefcopyRow((pdsslimportdefcopyDataSet.ttblslimportdefcopyRow)ttblslimportdefcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLImportDefCopy - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLImportDefCopy(ref pdsContext, ref pdsslimportdefcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLImportDefCopy - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsslimportdefcopy); 
    
         if (pdsslimportdefcopy.ttblslimportdefcopy.Count > 0) 
         { 
             result = Slimportdefcopy.BuildSlimportdefcopyFromRow(pdsslimportdefcopy.ttblslimportdefcopy[0]);
         } 
              
          
         return result;
          
      }

      public AsslsetupSLEHGetHeaderListResponseAPI SLEHGetHeaderList(string cImptype, string cDisplayType, int iRecordLimit)
      {   
         var result = new AsslsetupSLEHGetHeaderListResponseAPI();
         
         var pdsslehgetheadlist = new pdsslehgetheadlistDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("SLEHGetHeaderList - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEHGetHeaderList(ref pdsContext,  cImptype,  cDisplayType,  iRecordLimit, out pdsslehgetheadlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("SLEHGetHeaderList - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsslehgetheadlist); 
    
         foreach (DataRow row in pdsslehgetheadlist.ttblslehgetheadlistresults)
         {
            result.slehgetheadlistresults.Add(Slehgetheadlistresults.BuildSlehgetheadlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Sledgetprodlistresults> SLEDGetProdList(AsslsetupSLEDGetProdListRequestAPI AsslsetupSLEDGetProdListRequestAPI)
      {   
         var results = new List<Sledgetprodlistresults>();
         
         var pdssledgetprodlist = new pdssledgetprodlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsledgetprodlistcriteriaRow = pdssledgetprodlist.ttblsledgetprodlistcriteria.NewttblsledgetprodlistcriteriaRow();
         Sledgetprodlistcriteria.UpdateRowFromSledgetprodlistcriteria(ref ttblsledgetprodlistcriteriaRow, AsslsetupSLEDGetProdListRequestAPI.sledgetprodlistcriteria);
         pdssledgetprodlist.ttblsledgetprodlistcriteria.AddttblsledgetprodlistcriteriaRow((pdssledgetprodlistDataSet.ttblsledgetprodlistcriteriaRow)ttblsledgetprodlistcriteriaRow);
          
         
         NLogLoggerP.Trace("SLEDGetProdList - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEDGetProdList(ref pdsContext, ref pdssledgetprodlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEDGetProdList - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssledgetprodlist); 
    
            foreach (DataRow row in pdssledgetprodlist.ttblsledgetprodlistresults)
            {
                results.Add(Sledgetprodlistresults.BuildSledgetprodlistresultsFromRow(row));
            }
            return results;
        
      }

      public Sledgetproddetailresults SLEDGetProdDetail(string cImptype, bool lStatusType, string cSLUpdtNo, string cProd, string cWhse)
      {   
         var result = new Sledgetproddetailresults();
         
         var pdssledgetproddetail = new pdssledgetproddetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEDGetProdDetail - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEDGetProdDetail(ref pdsContext,  cImptype,  lStatusType,  cSLUpdtNo,  cProd,  cWhse, out pdssledgetproddetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEDGetProdDetail - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssledgetproddetail); 
    
         if (pdssledgetproddetail.ttblsledgetproddetailresults.Count > 0) 
         { 
             result = Sledgetproddetailresults.BuildSledgetproddetailresultsFromRow(pdssledgetproddetail.ttblsledgetproddetailresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sledgetheadlistresults> SLEDGetHeadList(string cProd, string cWhse)
      {   
         var results = new List<Sledgetheadlistresults>();
         
         var pdssledgetheadlist = new pdssledgetheadlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEDGetHeadList - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEDGetHeadList(ref pdsContext,  cProd,  cWhse, out pdssledgetheadlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEDGetHeadList - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssledgetheadlist); 
    
            foreach (DataRow row in pdssledgetheadlist.ttblsledgetheadlistresults)
            {
                results.Add(Sledgetheadlistresults.BuildSledgetheadlistresultsFromRow(row));
            }
            return results;
        
      }

      public AsslsetupSLEEGetProductListResponseAPI SLEEGetProductList(Sleeprodlistcriteria sleeprodlistcriteria)
      {   
         var result = new AsslsetupSLEEGetProductListResponseAPI();
         
         var pdssleeprodlistcriteria = new pdssleeprodlistcriteriaDataSet();
            
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         DataRow ttblsleeprodlistcriteriaCriteria = pdssleeprodlistcriteria.ttblsleeprodlistcriteria.NewttblsleeprodlistcriteriaRow();
         Sleeprodlistcriteria.UpdateRowFromSleeprodlistcriteria(ref ttblsleeprodlistcriteriaCriteria, sleeprodlistcriteria);
         pdssleeprodlistcriteria.ttblsleeprodlistcriteria.AddttblsleeprodlistcriteriaRow((pdssleeprodlistcriteriaDataSet.ttblsleeprodlistcriteriaRow)ttblsleeprodlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("SLEEGetProductList - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEGetProductList(ref pdsContext,  pdssleeprodlistcriteria, out pdssleeprodlistresults, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("SLEEGetProductList - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistcriteria); 
    
         foreach (DataRow row in pdssleeprodlistresults.ttblsleeprodlistresults)
         {
            result.sleeprodlistresults.Add(Sleeprodlistresults.BuildSleeprodlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void SLEEProductListDelete(IEnumerable<Sleeprodlistresults> sleeprodlistresults)
      {   
         
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         foreach (var obj in sleeprodlistresults)
         {
             DataRow row = pdssleeprodlistresults.ttblsleeprodlistresults.NewttblsleeprodlistresultsRow();
             Sleeprodlistresults.UpdateRowFromSleeprodlistresults(ref row, obj);
             pdssleeprodlistresults.ttblsleeprodlistresults.AddttblsleeprodlistresultsRow((pdssleeprodlistresultsDataSet.ttblsleeprodlistresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEEProductListDelete - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductListDelete(ref pdsContext,  pdssleeprodlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductListDelete - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistresults);
      }

      public AsslsetupSLEEProductListUpdateResponseAPI SLEEProductListUpdate(AsslsetupSLEEProductListUpdateRequestAPI AsslsetupSLEEProductListUpdateRequestAPI)
      {   
         var result = new AsslsetupSLEEProductListUpdateResponseAPI();
         
         var pdssleeprodlistcriteria = new pdssleeprodlistcriteriaDataSet();
            
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         DataRow ttblsleeprodlistcriteriaRow = pdssleeprodlistcriteria.ttblsleeprodlistcriteria.NewttblsleeprodlistcriteriaRow();
         Sleeprodlistcriteria.UpdateRowFromSleeprodlistcriteria(ref ttblsleeprodlistcriteriaRow, AsslsetupSLEEProductListUpdateRequestAPI.sleeprodlistcriteria);
         pdssleeprodlistcriteria.ttblsleeprodlistcriteria.AddttblsleeprodlistcriteriaRow((pdssleeprodlistcriteriaDataSet.ttblsleeprodlistcriteriaRow)ttblsleeprodlistcriteriaRow);
          
         DataRow ttblsleeprodlistresultsRow = pdssleeprodlistresults.ttblsleeprodlistresults.NewttblsleeprodlistresultsRow();
         Sleeprodlistresults.UpdateRowFromSleeprodlistresults(ref ttblsleeprodlistresultsRow, AsslsetupSLEEProductListUpdateRequestAPI.sleeprodlistresults);
         pdssleeprodlistresults.ttblsleeprodlistresults.AddttblsleeprodlistresultsRow((pdssleeprodlistresultsDataSet.ttblsleeprodlistresultsRow)ttblsleeprodlistresultsRow);
          
         
         NLogLoggerP.Trace("SLEEProductListUpdate - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductListUpdate(ref pdsContext,  pdssleeprodlistcriteria, ref pdssleeprodlistresults, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductListUpdate - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistcriteria); 
    
         if (pdssleeprodlistresults.ttblsleeprodlistresults.Count > 0)
         {
            result.sleeprodlistresults = Sleeprodlistresults.BuildSleeprodlistresultsFromRow(pdssleeprodlistresults.ttblsleeprodlistresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Sleeproductfull SLEEProductFullRetrieve(Sleeproductfull sleeproductfull)
      {   
         var result = new Sleeproductfull();
         
         var pdssleeproductfull = new pdssleeproductfullDataSet();
            
         DataRow ttblsleeproductfullCriteria = pdssleeproductfull.ttblsleeproductfull.NewttblsleeproductfullRow();
         Sleeproductfull.UpdateRowFromSleeproductfull(ref ttblsleeproductfullCriteria, sleeproductfull);
         pdssleeproductfull.ttblsleeproductfull.AddttblsleeproductfullRow((pdssleeproductfullDataSet.ttblsleeproductfullRow)ttblsleeproductfullCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEEProductFullRetrieve - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductFullRetrieve(ref pdsContext, ref pdssleeproductfull, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductFullRetrieve - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeproductfull); 
    
         if (pdssleeproductfull.ttblsleeproductfull.Count > 0) 
         { 
             result = Sleeproductfull.BuildSleeproductfullFromRow(pdssleeproductfull.ttblsleeproductfull[0]);
         } 
              
          
         return result;
          
      }

      public Sleeprodlistresults SLEEProductFullUpdate(AsslsetupSLEEProductFullUpdateRequestAPI AsslsetupSLEEProductFullUpdateRequestAPI)
      {   
         var result = new Sleeprodlistresults();
         
         var pdssleeprodlistcriteria = new pdssleeprodlistcriteriaDataSet();
            
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         var pdssleeproductfull = new pdssleeproductfullDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsleeprodlistcriteriaRow = pdssleeprodlistcriteria.ttblsleeprodlistcriteria.NewttblsleeprodlistcriteriaRow();
         Sleeprodlistcriteria.UpdateRowFromSleeprodlistcriteria(ref ttblsleeprodlistcriteriaRow, AsslsetupSLEEProductFullUpdateRequestAPI.sleeprodlistcriteria);
         pdssleeprodlistcriteria.ttblsleeprodlistcriteria.AddttblsleeprodlistcriteriaRow((pdssleeprodlistcriteriaDataSet.ttblsleeprodlistcriteriaRow)ttblsleeprodlistcriteriaRow);
          
         DataRow ttblsleeprodlistresultsRow = pdssleeprodlistresults.ttblsleeprodlistresults.NewttblsleeprodlistresultsRow();
         Sleeprodlistresults.UpdateRowFromSleeprodlistresults(ref ttblsleeprodlistresultsRow, AsslsetupSLEEProductFullUpdateRequestAPI.sleeprodlistresults);
         pdssleeprodlistresults.ttblsleeprodlistresults.AddttblsleeprodlistresultsRow((pdssleeprodlistresultsDataSet.ttblsleeprodlistresultsRow)ttblsleeprodlistresultsRow);
          
         DataRow ttblsleeproductfullRow = pdssleeproductfull.ttblsleeproductfull.NewttblsleeproductfullRow();
         Sleeproductfull.UpdateRowFromSleeproductfull(ref ttblsleeproductfullRow, AsslsetupSLEEProductFullUpdateRequestAPI.sleeproductfull);
         pdssleeproductfull.ttblsleeproductfull.AddttblsleeproductfullRow((pdssleeproductfullDataSet.ttblsleeproductfullRow)ttblsleeproductfullRow);
          
         
         NLogLoggerP.Trace("SLEEProductFullUpdate - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductFullUpdate(ref pdsContext,  pdssleeprodlistcriteria, ref pdssleeprodlistresults,  pdssleeproductfull, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductFullUpdate - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistcriteria); 
    
         if (pdssleeprodlistresults.ttblsleeprodlistresults.Count > 0) 
         { 
             result = Sleeprodlistresults.BuildSleeprodlistresultsFromRow(pdssleeprodlistresults.ttblsleeprodlistresults[0]);
         } 
              
          
         return result;
          
      }

      public Sleeproductfull SLEEProductAddPrepare()
      {   
         var result = new Sleeproductfull();
         
         var pdssleeproductfull = new pdssleeproductfullDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEEProductAddPrepare - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductAddPrepare(ref pdsContext, out pdssleeproductfull, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductAddPrepare - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeproductfull); 
    
         if (pdssleeproductfull.ttblsleeproductfull.Count > 0) 
         { 
             result = Sleeproductfull.BuildSleeproductfullFromRow(pdssleeproductfull.ttblsleeproductfull[0]);
         } 
              
          
         return result;
          
      }

      public Sleeproductfull SLEEProductAddFieldChange(AsslsetupSLEEProductAddFieldChangeRequestAPI AsslsetupSLEEProductAddFieldChangeRequestAPI)
      {   
         var result = new Sleeproductfull();
         
         var pdssleeproductfull = new pdssleeproductfullDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsleeproductfullRow = pdssleeproductfull.ttblsleeproductfull.NewttblsleeproductfullRow();
         Sleeproductfull.UpdateRowFromSleeproductfull(ref ttblsleeproductfullRow, AsslsetupSLEEProductAddFieldChangeRequestAPI.sleeproductfull);
         pdssleeproductfull.ttblsleeproductfull.AddttblsleeproductfullRow((pdssleeproductfullDataSet.ttblsleeproductfullRow)ttblsleeproductfullRow);
          
         var  cFieldName = AsslsetupSLEEProductAddFieldChangeRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("SLEEProductAddFieldChange - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductAddFieldChange(ref pdsContext,  cFieldName, ref pdssleeproductfull, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductAddFieldChange - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeproductfull); 
    
         if (pdssleeproductfull.ttblsleeproductfull.Count > 0) 
         { 
             result = Sleeproductfull.BuildSleeproductfullFromRow(pdssleeproductfull.ttblsleeproductfull[0]);
         } 
              
          
         return result;
          
      }

      public Sleeprodlistresults SLEEProductAddUpdate(AsslsetupSLEEProductAddUpdateRequestAPI AsslsetupSLEEProductAddUpdateRequestAPI)
      {   
         var result = new Sleeprodlistresults();
         
         var pdssleeprodlistcriteria = new pdssleeprodlistcriteriaDataSet();
            
         var pdssleeproductfull = new pdssleeproductfullDataSet();
            
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsleeprodlistcriteriaRow = pdssleeprodlistcriteria.ttblsleeprodlistcriteria.NewttblsleeprodlistcriteriaRow();
         Sleeprodlistcriteria.UpdateRowFromSleeprodlistcriteria(ref ttblsleeprodlistcriteriaRow, AsslsetupSLEEProductAddUpdateRequestAPI.sleeprodlistcriteria);
         pdssleeprodlistcriteria.ttblsleeprodlistcriteria.AddttblsleeprodlistcriteriaRow((pdssleeprodlistcriteriaDataSet.ttblsleeprodlistcriteriaRow)ttblsleeprodlistcriteriaRow);
          
         DataRow ttblsleeproductfullRow = pdssleeproductfull.ttblsleeproductfull.NewttblsleeproductfullRow();
         Sleeproductfull.UpdateRowFromSleeproductfull(ref ttblsleeproductfullRow, AsslsetupSLEEProductAddUpdateRequestAPI.sleeproductfull);
         pdssleeproductfull.ttblsleeproductfull.AddttblsleeproductfullRow((pdssleeproductfullDataSet.ttblsleeproductfullRow)ttblsleeproductfullRow);
          
         
         NLogLoggerP.Trace("SLEEProductAddUpdate - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductAddUpdate(ref pdsContext,  pdssleeprodlistcriteria,  pdssleeproductfull, out pdssleeprodlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductAddUpdate - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistcriteria); 
    
         if (pdssleeprodlistresults.ttblsleeprodlistresults.Count > 0) 
         { 
             result = Sleeprodlistresults.BuildSleeprodlistresultsFromRow(pdssleeprodlistresults.ttblsleeprodlistresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Sleeproderrorholdcd> SLEEProductErrorHoldCodes(Sleeprodlistresults sleeprodlistresults)
      {   
         var results = new List<Sleeproderrorholdcd>();
         
         var pdssleeprodlistresults = new pdssleeprodlistresultsDataSet();
            
         var pdssleeproderrorholdcd = new pdssleeproderrorholdcdDataSet();
            
         DataRow ttblsleeprodlistresultsCriteria = pdssleeprodlistresults.ttblsleeprodlistresults.NewttblsleeprodlistresultsRow();
         Sleeprodlistresults.UpdateRowFromSleeprodlistresults(ref ttblsleeprodlistresultsCriteria, sleeprodlistresults);
         pdssleeprodlistresults.ttblsleeprodlistresults.AddttblsleeprodlistresultsRow((pdssleeprodlistresultsDataSet.ttblsleeprodlistresultsRow)ttblsleeprodlistresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEEProductErrorHoldCodes - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEProductErrorHoldCodes(ref pdsContext,  pdssleeprodlistresults, out pdssleeproderrorholdcd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEProductErrorHoldCodes - Asslsetup - After Call");

         
         this.ReportErrors(pdssleeproderrorholdcd);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleeprodlistresults); 
    
            foreach (DataRow row in pdssleeproderrorholdcd.ttblsleeproderrorholdcd)
            {
                results.Add(Sleeproderrorholdcd.BuildSleeproderrorholdcdFromRow(row));
            }
            return results;
        
      }

      public void SLEEChangeStatusCode(Sleechgstatuscode sleechgstatuscode)
      {   
         
         var pdssleechgstatuscode = new pdssleechgstatuscodeDataSet();
            
         DataRow ttblsleechgstatuscodeCriteria = pdssleechgstatuscode.ttblsleechgstatuscode.NewttblsleechgstatuscodeRow();
         Sleechgstatuscode.UpdateRowFromSleechgstatuscode(ref ttblsleechgstatuscodeCriteria, sleechgstatuscode);
         pdssleechgstatuscode.ttblsleechgstatuscode.AddttblsleechgstatuscodeRow((pdssleechgstatuscodeDataSet.ttblsleechgstatuscodeRow)ttblsleechgstatuscodeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLEEChangeStatusCode - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLEEChangeStatusCode(ref pdsContext,  pdssleechgstatuscode, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLEEChangeStatusCode - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssleechgstatuscode);
      }

      public Slpricecostmultcopy SLPriceCostMultCopy(Slpricecostmultcopy slpricecostmultcopy)
      {   
         var result = new Slpricecostmultcopy();
         
         var pdsslpricecostmultcopy = new pdsslpricecostmultcopyDataSet();
            
         DataRow ttblslpricecostmultcopyCriteria = pdsslpricecostmultcopy.ttblslpricecostmultcopy.NewttblslpricecostmultcopyRow();
         Slpricecostmultcopy.UpdateRowFromSlpricecostmultcopy(ref ttblslpricecostmultcopyCriteria, slpricecostmultcopy);
         pdsslpricecostmultcopy.ttblslpricecostmultcopy.AddttblslpricecostmultcopyRow((pdsslpricecostmultcopyDataSet.ttblslpricecostmultcopyRow)ttblslpricecostmultcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLPriceCostMultCopy - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLPriceCostMultCopy(ref pdsContext, ref pdsslpricecostmultcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLPriceCostMultCopy - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsslpricecostmultcopy); 
    
         if (pdsslpricecostmultcopy.ttblslpricecostmultcopy.Count > 0) 
         { 
             result = Slpricecostmultcopy.BuildSlpricecostmultcopyFromRow(pdsslpricecostmultcopy.ttblslpricecostmultcopy[0]);
         } 
              
          
         return result;
          
      }

      public Slnewitemdefaultscopy SLNewItemDefaultsCopy(Slnewitemdefaultscopy slnewitemdefaultscopy)
      {   
         var result = new Slnewitemdefaultscopy();
         
         var pdsslnewitemdefaultscopy = new pdsslnewitemdefaultscopyDataSet();
            
         DataRow ttblslnewitemdefaultscopyCriteria = pdsslnewitemdefaultscopy.ttblslnewitemdefaultscopy.NewttblslnewitemdefaultscopyRow();
         Slnewitemdefaultscopy.UpdateRowFromSlnewitemdefaultscopy(ref ttblslnewitemdefaultscopyCriteria, slnewitemdefaultscopy);
         pdsslnewitemdefaultscopy.ttblslnewitemdefaultscopy.AddttblslnewitemdefaultscopyRow((pdsslnewitemdefaultscopyDataSet.ttblslnewitemdefaultscopyRow)ttblslnewitemdefaultscopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLNewItemDefaultsCopy - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLNewItemDefaultsCopy(ref pdsContext, ref pdsslnewitemdefaultscopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLNewItemDefaultsCopy - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsslnewitemdefaultscopy); 
    
         if (pdsslnewitemdefaultscopy.ttblslnewitemdefaultscopy.Count > 0) 
         { 
             result = Slnewitemdefaultscopy.BuildSlnewitemdefaultscopyFromRow(pdsslnewitemdefaultscopy.ttblslnewitemdefaultscopy[0]);
         } 
              
          
         return result;
          
      }

      public Slimportdeffix SLSIImportDefFix(Slimportdeffix slimportdeffix)
      {   
         var result = new Slimportdeffix();
         
         var pdsslimportdeffix = new pdsslimportdeffixDataSet();
            
         DataRow ttblslimportdeffixCriteria = pdsslimportdeffix.ttblslimportdeffix.NewttblslimportdeffixRow();
         Slimportdeffix.UpdateRowFromSlimportdeffix(ref ttblslimportdeffixCriteria, slimportdeffix);
         pdsslimportdeffix.ttblslimportdeffix.AddttblslimportdeffixRow((pdsslimportdeffixDataSet.ttblslimportdeffixRow)ttblslimportdeffixCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SLSIImportDefFix - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SLSIImportDefFix(ref pdsContext, ref pdsslimportdeffix, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SLSIImportDefFix - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsslimportdeffix); 
    
         if (pdsslimportdeffix.ttblslimportdeffix.Count > 0) 
         { 
             result = Slimportdeffix.BuildSlimportdeffixFromRow(pdsslimportdeffix.ttblslimportdeffix[0]);
         } 
              
          
         return result;
          
      }

      public int SlsiGetLastRecNo()
      {   
          
         int iLastSLRecno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SlsiGetLastRecNo - Asslsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsslsetupproxy = this.proxyAppObject.CreatePO_asslsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsslsetupproxy.SlsiGetLastRecNo(ref pdsContext, out iLastSLRecno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SlsiGetLastRecNo - Asslsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return iLastSLRecno;
      
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  