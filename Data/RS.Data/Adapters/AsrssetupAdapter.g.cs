//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.RS.Data.Adapters
{
   using com.infor.sxproxy.rsproxy;
   using com.infor.sxproxy.rsproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsrsaacriteria;
   using Models.Pdsrsaaactivity;
   using Models.Pdsprintersettings;
   using Models.Pdsrsaasystemload;
   using Models.Pdsrsaddetail;
   using Models.Pdsrsasstatus;
   using Models.Pdsrsasdetail;
   using Models.Pdsrssjcriteria;
   using Models.Pdsrssjcomponentscontrol;
   using Models.Pdsrssjcomponents;
   using Models.Pdsrssjcopyresults;
   using Models.Pdsrssjjobgroup;
   using Models.Pdsrssjlookupcriteria;
   using Models.Pdsrssjlookupresults;
   using Models.Pdsrssqcopyresults;
   using Models.Pdsrssqqueue;
   using Models.Pdsrssqcriteria;
   using Models.Pdssapbdatetime;
   using Models.Pdssapjjobdetail;
   using Models.Complex;

   public partial class AsrssetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private RSProxyAppObject proxyAppObject;
      
      public AsrssetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new RSProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsrssetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Rsaacriteria RSAAInitiate(Rsaacriteria rsaacriteria)
      {   
         var result = new Rsaacriteria();
         
         var pdsrsaacriteria = new pdsrsaacriteriaDataSet();
            
         DataRow ttblrsaacriteriaCriteria = pdsrsaacriteria.ttblrsaacriteria.NewttblrsaacriteriaRow();
         Rsaacriteria.UpdateRowFromRsaacriteria(ref ttblrsaacriteriaCriteria, rsaacriteria);
         pdsrsaacriteria.ttblrsaacriteria.AddttblrsaacriteriaRow((pdsrsaacriteriaDataSet.ttblrsaacriteriaRow)ttblrsaacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSAAInitiate - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAAInitiate(ref pdsContext, ref pdsrsaacriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAAInitiate - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaacriteria); 
    
         if (pdsrsaacriteria.ttblrsaacriteria.Count > 0) 
         { 
             result = Rsaacriteria.BuildRsaacriteriaFromRow(pdsrsaacriteria.ttblrsaacriteria[0]);
         } 
              
          
         return result;
          
      }

      public Rsaacriteria RSAACriteriaClearReset(AsrssetupRSAACriteriaClearResetRequestAPI AsrssetupRSAACriteriaClearResetRequestAPI)
      {   
         var result = new Rsaacriteria();
         
         var pdsrsaacriteria = new pdsrsaacriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrsaacriteriaRow = pdsrsaacriteria.ttblrsaacriteria.NewttblrsaacriteriaRow();
         Rsaacriteria.UpdateRowFromRsaacriteria(ref ttblrsaacriteriaRow, AsrssetupRSAACriteriaClearResetRequestAPI.rsaacriteria);
         pdsrsaacriteria.ttblrsaacriteria.AddttblrsaacriteriaRow((pdsrsaacriteriaDataSet.ttblrsaacriteriaRow)ttblrsaacriteriaRow);
          
         var  cAction = AsrssetupRSAACriteriaClearResetRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("RSAACriteriaClearReset - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAACriteriaClearReset(ref pdsContext,  cAction, ref pdsrsaacriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAACriteriaClearReset - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaacriteria); 
    
         if (pdsrsaacriteria.ttblrsaacriteria.Count > 0) 
         { 
             result = Rsaacriteria.BuildRsaacriteriaFromRow(pdsrsaacriteria.ttblrsaacriteria[0]);
         } 
              
          
         return result;
          
      }

      public Rsaacriteria RSAACriteriaFieldChange(AsrssetupRSAACriteriaFieldChangeRequestAPI AsrssetupRSAACriteriaFieldChangeRequestAPI)
      {   
         var result = new Rsaacriteria();
         
         var pdsrsaacriteria = new pdsrsaacriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrsaacriteriaRow = pdsrsaacriteria.ttblrsaacriteria.NewttblrsaacriteriaRow();
         Rsaacriteria.UpdateRowFromRsaacriteria(ref ttblrsaacriteriaRow, AsrssetupRSAACriteriaFieldChangeRequestAPI.rsaacriteria);
         pdsrsaacriteria.ttblrsaacriteria.AddttblrsaacriteriaRow((pdsrsaacriteriaDataSet.ttblrsaacriteriaRow)ttblrsaacriteriaRow);
          
         var  cField = AsrssetupRSAACriteriaFieldChangeRequestAPI.cField;
            
         
         NLogLoggerP.Trace("RSAACriteriaFieldChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAACriteriaFieldChange(ref pdsContext,  cField, ref pdsrsaacriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAACriteriaFieldChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaacriteria); 
    
         if (pdsrsaacriteria.ttblrsaacriteria.Count > 0) 
         { 
             result = Rsaacriteria.BuildRsaacriteriaFromRow(pdsrsaacriteria.ttblrsaacriteria[0]);
         } 
              
          
         return result;
          
      }

      public AsrssetupRSAAActivityLoadResponseAPI RSAAActivityLoad(Rsaacriteria rsaacriteria)
      {   
         var result = new AsrssetupRSAAActivityLoadResponseAPI();
         
         var pdsrsaacriteria = new pdsrsaacriteriaDataSet();
            
         var pdsrsaaactivity = new pdsrsaaactivityDataSet();
            
         DataRow ttblrsaacriteriaCriteria = pdsrsaacriteria.ttblrsaacriteria.NewttblrsaacriteriaRow();
         Rsaacriteria.UpdateRowFromRsaacriteria(ref ttblrsaacriteriaCriteria, rsaacriteria);
         pdsrsaacriteria.ttblrsaacriteria.AddttblrsaacriteriaRow((pdsrsaacriteriaDataSet.ttblrsaacriteriaRow)ttblrsaacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("RSAAActivityLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAAActivityLoad(ref pdsContext,  pdsrsaacriteria, out pdsrsaaactivity, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("RSAAActivityLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaacriteria); 
    
         foreach (DataRow row in pdsrsaaactivity.ttblrsaaactivity)
         {
            result.rsaaactivity.Add(Rsaaactivity.BuildRsaaactivityFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Rsaaactivity> RSAAActivitySimpleRequests(AsrssetupRSAAActivitySimpleRequestsRequestAPI AsrssetupRSAAActivitySimpleRequestsRequestAPI)
      {   
         var results = new List<Rsaaactivity>();
         
         var pdsrsaaactivity = new pdsrsaaactivityDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsrssetupRSAAActivitySimpleRequestsRequestAPI.rsaaactivity)
         {
            DataRow ttblrsaaactivityRow = pdsrsaaactivity.ttblrsaaactivity.NewttblrsaaactivityRow();
            Rsaaactivity.UpdateRowFromRsaaactivity(ref ttblrsaaactivityRow, obj);
            pdsrsaaactivity.ttblrsaaactivity.AddttblrsaaactivityRow((pdsrsaaactivityDataSet.ttblrsaaactivityRow)ttblrsaaactivityRow);
         }
          
         var  cAction = AsrssetupRSAAActivitySimpleRequestsRequestAPI.cAction;
            
         var  iNbrRcds = AsrssetupRSAAActivitySimpleRequestsRequestAPI.iNbrRcds;
            
         var  cAnswer = AsrssetupRSAAActivitySimpleRequestsRequestAPI.cAnswer;
            
         
         NLogLoggerP.Trace("RSAAActivitySimpleRequests - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAAActivitySimpleRequests(ref pdsContext,  cAction,  iNbrRcds,  cAnswer, ref pdsrsaaactivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAAActivitySimpleRequests - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaaactivity); 
    
            foreach (DataRow row in pdsrsaaactivity.ttblrsaaactivity)
            {
                results.Add(Rsaaactivity.BuildRsaaactivityFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Rsaaactivity> RSAAChangeSelectedPrinters(AsrssetupRSAAChangeSelectedPrintersRequestAPI AsrssetupRSAAChangeSelectedPrintersRequestAPI)
      {   
         var results = new List<Rsaaactivity>();
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsrsaaactivity = new pdsrsaaactivityDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsrssetupRSAAChangeSelectedPrintersRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         foreach (var obj in AsrssetupRSAAChangeSelectedPrintersRequestAPI.rsaaactivity)
         {
            DataRow ttblrsaaactivityRow = pdsrsaaactivity.ttblrsaaactivity.NewttblrsaaactivityRow();
            Rsaaactivity.UpdateRowFromRsaaactivity(ref ttblrsaaactivityRow, obj);
            pdsrsaaactivity.ttblrsaaactivity.AddttblrsaaactivityRow((pdsrsaaactivityDataSet.ttblrsaaactivityRow)ttblrsaaactivityRow);
         }
          
         var  iNbrRcds = AsrssetupRSAAChangeSelectedPrintersRequestAPI.iNbrRcds;
            
         
         NLogLoggerP.Trace("RSAAChangeSelectedPrinters - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAAChangeSelectedPrinters(ref pdsContext,  iNbrRcds,  pdsprintersettings, ref pdsrsaaactivity, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAAChangeSelectedPrinters - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings); 
    
            foreach (DataRow row in pdsrsaaactivity.ttblrsaaactivity)
            {
                results.Add(Rsaaactivity.BuildRsaaactivityFromRow(row));
            }
            return results;
        
      }

      public void RSAASendLog(string cQueueNm)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSAASendLog - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAASendLog(ref pdsContext,  cQueueNm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAASendLog - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AsrssetupRSAASystemLoadResponseAPI RSAASystemLoad(int iTimeZoneClient)
      {   
         var result = new AsrssetupRSAASystemLoadResponseAPI();
         
         var pdsrsaasystemload = new pdsrsaasystemloadDataSet();
            
         int iSysCur = 0;
         int iSysMax = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSAASystemLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSAASystemLoad(ref pdsContext,  iTimeZoneClient, out pdsrsaasystemload, out iSysCur, out iSysMax, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSAASystemLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaasystemload); 
    
         foreach (DataRow row in pdsrsaasystemload.ttblrsaasystemload)
         {
            result.rsaasystemload.Add(Rsaasystemload.BuildRsaasystemloadFromRow(row));
         }     
         result.iSysCur = iSysCur;
         result.iSysMax = iSysMax;
          
         return result;
          
      }

      public IEnumerable<Rsaddetail> RSADLoad(AsrssetupRSADLoadRequestAPI AsrssetupRSADLoadRequestAPI)
      {   
         var results = new List<Rsaddetail>();
         
         var pdsrsaddetail = new pdsrsaddetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  cProc = AsrssetupRSADLoadRequestAPI.cProc;
            
         
         NLogLoggerP.Trace("RSADLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSADLoad(ref pdsContext,  cProc, out pdsrsaddetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSADLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsaddetail); 
    
            foreach (DataRow row in pdsrsaddetail.ttblrsaddetail)
            {
                results.Add(Rsaddetail.BuildRsaddetailFromRow(row));
            }
            return results;
        
      }

      public AsrssetupRSASLoadResponseAPI RSASLoad(Rsasstatus rsasstatus)
      {   
         var result = new AsrssetupRSASLoadResponseAPI();
         
         var pdsrsasstatus = new pdsrsasstatusDataSet();
            
         var pdsrsasdetail = new pdsrsasdetailDataSet();
            
         DataRow ttblrsasstatusCriteria = pdsrsasstatus.ttblrsasstatus.NewttblrsasstatusRow();
         Rsasstatus.UpdateRowFromRsasstatus(ref ttblrsasstatusCriteria, rsasstatus);
         pdsrsasstatus.ttblrsasstatus.AddttblrsasstatusRow((pdsrsasstatusDataSet.ttblrsasstatusRow)ttblrsasstatusCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSASLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSASLoad(ref pdsContext, ref pdsrsasstatus, out pdsrsasdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSASLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsasstatus); 
    
         foreach (DataRow row in pdsrsasdetail.ttblrsasdetail)
         {
            result.rsasdetail.Add(Rsasdetail.BuildRsasdetailFromRow(row));
         }     
         if (pdsrsasstatus.ttblrsasstatus.Count > 0)
         {
            result.rsasstatus = Rsasstatus.BuildRsasstatusFromRow(pdsrsasstatus.ttblrsasstatus[0]);
         }
                    
          
         return result;
          
      }

      public Rsasstatus RSASStartStop(AsrssetupRSASStartStopRequestAPI AsrssetupRSASStartStopRequestAPI)
      {   
         var result = new Rsasstatus();
         
         var pdsrsasstatus = new pdsrsasstatusDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrsasstatusRow = pdsrsasstatus.ttblrsasstatus.NewttblrsasstatusRow();
         Rsasstatus.UpdateRowFromRsasstatus(ref ttblrsasstatusRow, AsrssetupRSASStartStopRequestAPI.rsasstatus);
         pdsrsasstatus.ttblrsasstatus.AddttblrsasstatusRow((pdsrsasstatusDataSet.ttblrsasstatusRow)ttblrsasstatusRow);
          
         var  lStartRS = AsrssetupRSASStartStopRequestAPI.lStartRS;
            
         
         NLogLoggerP.Trace("RSASStartStop - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSASStartStop(ref pdsContext,  lStartRS, ref pdsrsasstatus, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSASStartStop - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsasstatus); 
    
         if (pdsrsasstatus.ttblrsasstatus.Count > 0) 
         { 
             result = Rsasstatus.BuildRsasstatusFromRow(pdsrsasstatus.ttblrsasstatus[0]);
         } 
              
          
         return result;
          
      }

      public void RSASStopJobs(IEnumerable<Rsasdetail> rsasdetail)
      {   
         
         var pdsrsasdetail = new pdsrsasdetailDataSet();
            
         foreach (var obj in rsasdetail)
         {
             DataRow row = pdsrsasdetail.ttblrsasdetail.NewttblrsasdetailRow();
             Rsasdetail.UpdateRowFromRsasdetail(ref row, obj);
             pdsrsasdetail.ttblrsasdetail.AddttblrsasdetailRow((pdsrsasdetailDataSet.ttblrsasdetailRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSASStopJobs - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSASStopJobs(ref pdsContext,  pdsrsasdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSASStopJobs - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrsasdetail);
      }

      public Rssjcriteria RSSJCriteriaActions(AsrssetupRSSJCriteriaActionsRequestAPI AsrssetupRSSJCriteriaActionsRequestAPI)
      {   
         var result = new Rssjcriteria();
         
         var pdsrssjcriteria = new pdsrssjcriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssjcriteriaRow = pdsrssjcriteria.ttblrssjcriteria.NewttblrssjcriteriaRow();
         Rssjcriteria.UpdateRowFromRssjcriteria(ref ttblrssjcriteriaRow, AsrssetupRSSJCriteriaActionsRequestAPI.rssjcriteria);
         pdsrssjcriteria.ttblrssjcriteria.AddttblrssjcriteriaRow((pdsrssjcriteriaDataSet.ttblrssjcriteriaRow)ttblrssjcriteriaRow);
          
         var  cAction = AsrssetupRSSJCriteriaActionsRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("RSSJCriteriaActions - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJCriteriaActions(ref pdsContext,  cAction, ref pdsrssjcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJCriteriaActions - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcriteria); 
    
         if (pdsrssjcriteria.ttblrssjcriteria.Count > 0) 
         { 
             result = Rssjcriteria.BuildRssjcriteriaFromRow(pdsrssjcriteria.ttblrssjcriteria[0]);
         } 
              
          
         return result;
          
      }

      public AsrssetupRSSJComponentsAddChangeResponseAPI RSSJComponentsAddChange(AsrssetupRSSJComponentsAddChangeRequestAPI AsrssetupRSSJComponentsAddChangeRequestAPI)
      {   
         var result = new AsrssetupRSSJComponentsAddChangeResponseAPI();
         
         var pdsrssjcomponentscontrol = new pdsrssjcomponentscontrolDataSet();
            
         var pdsrssjcomponents = new pdsrssjcomponentsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssjcomponentscontrolRow = pdsrssjcomponentscontrol.ttblrssjcomponentscontrol.NewttblrssjcomponentscontrolRow();
         Rssjcomponentscontrol.UpdateRowFromRssjcomponentscontrol(ref ttblrssjcomponentscontrolRow, AsrssetupRSSJComponentsAddChangeRequestAPI.rssjcomponentscontrol);
         pdsrssjcomponentscontrol.ttblrssjcomponentscontrol.AddttblrssjcomponentscontrolRow((pdsrssjcomponentscontrolDataSet.ttblrssjcomponentscontrolRow)ttblrssjcomponentscontrolRow);
          
         DataRow ttblrssjcomponentsRow = pdsrssjcomponents.ttblrssjcomponents.NewttblrssjcomponentsRow();
         Rssjcomponents.UpdateRowFromRssjcomponents(ref ttblrssjcomponentsRow, AsrssetupRSSJComponentsAddChangeRequestAPI.rssjcomponents);
         pdsrssjcomponents.ttblrssjcomponents.AddttblrssjcomponentsRow((pdsrssjcomponentsDataSet.ttblrssjcomponentsRow)ttblrssjcomponentsRow);
          
         
         NLogLoggerP.Trace("RSSJComponentsAddChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJComponentsAddChange(ref pdsContext, ref pdsrssjcomponentscontrol, ref pdsrssjcomponents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJComponentsAddChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcomponentscontrol); 
    
         if (pdsrssjcomponentscontrol.ttblrssjcomponentscontrol.Count > 0)
         {
            result.rssjcomponentscontrol = Rssjcomponentscontrol.BuildRssjcomponentscontrolFromRow(pdsrssjcomponentscontrol.ttblrssjcomponentscontrol[0]);
         }
                    
         if (pdsrssjcomponents.ttblrssjcomponents.Count > 0)
         {
            result.rssjcomponents = Rssjcomponents.BuildRssjcomponentsFromRow(pdsrssjcomponents.ttblrssjcomponents[0]);
         }
                    
          
         return result;
          
      }

      public void RSSJComponentsDelete(IEnumerable<Rssjcomponents> rssjcomponents)
      {   
         
         var pdsrssjcomponents = new pdsrssjcomponentsDataSet();
            
         foreach (var obj in rssjcomponents)
         {
             DataRow row = pdsrssjcomponents.ttblrssjcomponents.NewttblrssjcomponentsRow();
             Rssjcomponents.UpdateRowFromRssjcomponents(ref row, obj);
             pdsrssjcomponents.ttblrssjcomponents.AddttblrssjcomponentsRow((pdsrssjcomponentsDataSet.ttblrssjcomponentsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJComponentsDelete - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJComponentsDelete(ref pdsContext,  pdsrssjcomponents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJComponentsDelete - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcomponents);
      }

      public Rssjcomponents RSSJComponentsFieldChange(AsrssetupRSSJComponentsFieldChangeRequestAPI AsrssetupRSSJComponentsFieldChangeRequestAPI)
      {   
         var result = new Rssjcomponents();
         
         var pdsrssjcomponents = new pdsrssjcomponentsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssjcomponentsRow = pdsrssjcomponents.ttblrssjcomponents.NewttblrssjcomponentsRow();
         Rssjcomponents.UpdateRowFromRssjcomponents(ref ttblrssjcomponentsRow, AsrssetupRSSJComponentsFieldChangeRequestAPI.rssjcomponents);
         pdsrssjcomponents.ttblrssjcomponents.AddttblrssjcomponentsRow((pdsrssjcomponentsDataSet.ttblrssjcomponentsRow)ttblrssjcomponentsRow);
          
         var  cField = AsrssetupRSSJComponentsFieldChangeRequestAPI.cField;
            
         
         NLogLoggerP.Trace("RSSJComponentsFieldChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJComponentsFieldChange(ref pdsContext,  cField, ref pdsrssjcomponents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJComponentsFieldChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcomponents); 
    
         if (pdsrssjcomponents.ttblrssjcomponents.Count > 0) 
         { 
             result = Rssjcomponents.BuildRssjcomponentsFromRow(pdsrssjcomponents.ttblrssjcomponents[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Rssjcomponents> RSSJComponentsLoad(Rssjcomponentscontrol rssjcomponentscontrol)
      {   
         var results = new List<Rssjcomponents>();
         
         var pdsrssjcomponentscontrol = new pdsrssjcomponentscontrolDataSet();
            
         var pdsrssjcomponents = new pdsrssjcomponentsDataSet();
            
         DataRow ttblrssjcomponentscontrolCriteria = pdsrssjcomponentscontrol.ttblrssjcomponentscontrol.NewttblrssjcomponentscontrolRow();
         Rssjcomponentscontrol.UpdateRowFromRssjcomponentscontrol(ref ttblrssjcomponentscontrolCriteria, rssjcomponentscontrol);
         pdsrssjcomponentscontrol.ttblrssjcomponentscontrol.AddttblrssjcomponentscontrolRow((pdsrssjcomponentscontrolDataSet.ttblrssjcomponentscontrolRow)ttblrssjcomponentscontrolCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJComponentsLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJComponentsLoad(ref pdsContext,  pdsrssjcomponentscontrol, out pdsrssjcomponents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJComponentsLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcomponentscontrol); 
    
            foreach (DataRow row in pdsrssjcomponents.ttblrssjcomponents)
            {
                results.Add(Rssjcomponents.BuildRssjcomponentsFromRow(row));
            }
            return results;
        
      }

      public void RSSJComponentsReposition(string cGroupnm)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJComponentsReposition - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJComponentsReposition(ref pdsContext,  cGroupnm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJComponentsReposition - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AsrssetupRSSJCopyRecordResponseAPI RSSJCopyRecord(string cOrigGroup, string cNewGroup, string cNewDesc)
      {   
         var result = new AsrssetupRSSJCopyRecordResponseAPI();
         
         var pdsrssjcopyresults = new pdsrssjcopyresultsDataSet();
            
         bool lOK = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJCopyRecord - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJCopyRecord(ref pdsContext,  cOrigGroup,  cNewGroup,  cNewDesc, out pdsrssjcopyresults, out lOK, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJCopyRecord - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcopyresults); 
    
         if (pdsrssjcopyresults.ttblrssjcopyresults.Count > 0)
         {
            result.rssjcopyresults = Rssjcopyresults.BuildRssjcopyresultsFromRow(pdsrssjcopyresults.ttblrssjcopyresults[0]);
         }
                    
         result.lOK = lOK;
          
         return result;
          
      }

      public AsrssetupRSSJInitiateResponseAPI RSSJInitiate(Rssjcriteria rssjcriteria)
      {   
         var result = new AsrssetupRSSJInitiateResponseAPI();
         
         var pdsrssjcriteria = new pdsrssjcriteriaDataSet();
            
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         DataRow ttblrssjcriteriaCriteria = pdsrssjcriteria.ttblrssjcriteria.NewttblrssjcriteriaRow();
         Rssjcriteria.UpdateRowFromRssjcriteria(ref ttblrssjcriteriaCriteria, rssjcriteria);
         pdsrssjcriteria.ttblrssjcriteria.AddttblrssjcriteriaRow((pdsrssjcriteriaDataSet.ttblrssjcriteriaRow)ttblrssjcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJInitiate - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJInitiate(ref pdsContext, ref pdsrssjcriteria, out pdsrssjjobgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJInitiate - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcriteria); 
    
         if (pdsrssjcriteria.ttblrssjcriteria.Count > 0)
         {
            result.rssjcriteria = Rssjcriteria.BuildRssjcriteriaFromRow(pdsrssjcriteria.ttblrssjcriteria[0]);
         }
                    
         foreach (DataRow row in pdsrssjjobgroup.ttblrssjjobgroup)
         {
            result.rssjjobgroup.Add(Rssjjobgroup.BuildRssjjobgroupFromRow(row));
         }     
          
         return result;
          
      }

      public Rssjjobgroup RSSJJobGroupDetail(Rssjcriteria rssjcriteria)
      {   
         var result = new Rssjjobgroup();
         
         var pdsrssjcriteria = new pdsrssjcriteriaDataSet();
            
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         DataRow ttblrssjcriteriaCriteria = pdsrssjcriteria.ttblrssjcriteria.NewttblrssjcriteriaRow();
         Rssjcriteria.UpdateRowFromRssjcriteria(ref ttblrssjcriteriaCriteria, rssjcriteria);
         pdsrssjcriteria.ttblrssjcriteria.AddttblrssjcriteriaRow((pdsrssjcriteriaDataSet.ttblrssjcriteriaRow)ttblrssjcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJJobGroupDetail - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJJobGroupDetail(ref pdsContext,  pdsrssjcriteria, out pdsrssjjobgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJJobGroupDetail - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcriteria); 
    
         if (pdsrssjjobgroup.ttblrssjjobgroup.Count > 0) 
         { 
             result = Rssjjobgroup.BuildRssjjobgroupFromRow(pdsrssjjobgroup.ttblrssjjobgroup[0]);
         } 
              
          
         return result;
          
      }

      public AsrssetupRSSJJobGroupFieldChangeResponseAPI RSSJJobGroupFieldChange(AsrssetupRSSJJobGroupFieldChangeRequestAPI AsrssetupRSSJJobGroupFieldChangeRequestAPI)
      {   
         var result = new AsrssetupRSSJJobGroupFieldChangeResponseAPI();
         
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarnMessage = string.Empty;
   
         DataRow ttblrssjjobgroupRow = pdsrssjjobgroup.ttblrssjjobgroup.NewttblrssjjobgroupRow();
         Rssjjobgroup.UpdateRowFromRssjjobgroup(ref ttblrssjjobgroupRow, AsrssetupRSSJJobGroupFieldChangeRequestAPI.rssjjobgroup);
         pdsrssjjobgroup.ttblrssjjobgroup.AddttblrssjjobgroupRow((pdsrssjjobgroupDataSet.ttblrssjjobgroupRow)ttblrssjjobgroupRow);
          
         var  cField = AsrssetupRSSJJobGroupFieldChangeRequestAPI.cField;
            
         
         NLogLoggerP.Trace("RSSJJobGroupFieldChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJJobGroupFieldChange(ref pdsContext,  cField, ref pdsrssjjobgroup, out cErrorMessage, out cWarnMessage);
               }
            });
         NLogLoggerP.Info("RSSJJobGroupFieldChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjjobgroup); 
    
         if (pdsrssjjobgroup.ttblrssjjobgroup.Count > 0)
         {
            result.rssjjobgroup = Rssjjobgroup.BuildRssjjobgroupFromRow(pdsrssjjobgroup.ttblrssjjobgroup[0]);
         }
                    
         result.cWarnMessage = cWarnMessage;
          
         return result;
          
      }

      public IEnumerable<Rssjjobgroup> RSSJJobGroupLoad(Rssjcriteria rssjcriteria)
      {   
         var results = new List<Rssjjobgroup>();
         
         var pdsrssjcriteria = new pdsrssjcriteriaDataSet();
            
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         DataRow ttblrssjcriteriaCriteria = pdsrssjcriteria.ttblrssjcriteria.NewttblrssjcriteriaRow();
         Rssjcriteria.UpdateRowFromRssjcriteria(ref ttblrssjcriteriaCriteria, rssjcriteria);
         pdsrssjcriteria.ttblrssjcriteria.AddttblrssjcriteriaRow((pdsrssjcriteriaDataSet.ttblrssjcriteriaRow)ttblrssjcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJJobGroupLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJJobGroupLoad(ref pdsContext,  pdsrssjcriteria, out pdsrssjjobgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJJobGroupLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcriteria); 
    
            foreach (DataRow row in pdsrssjjobgroup.ttblrssjjobgroup)
            {
                results.Add(Rssjjobgroup.BuildRssjjobgroupFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Rssjjobgroup> RSSJJobGroupSimpleRequests(AsrssetupRSSJJobGroupSimpleRequestsRequestAPI AsrssetupRSSJJobGroupSimpleRequestsRequestAPI)
      {   
         var results = new List<Rssjjobgroup>();
         
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsrssetupRSSJJobGroupSimpleRequestsRequestAPI.rssjjobgroup)
         {
            DataRow ttblrssjjobgroupRow = pdsrssjjobgroup.ttblrssjjobgroup.NewttblrssjjobgroupRow();
            Rssjjobgroup.UpdateRowFromRssjjobgroup(ref ttblrssjjobgroupRow, obj);
            pdsrssjjobgroup.ttblrssjjobgroup.AddttblrssjjobgroupRow((pdsrssjjobgroupDataSet.ttblrssjjobgroupRow)ttblrssjjobgroupRow);
         }
          
         var  cAction = AsrssetupRSSJJobGroupSimpleRequestsRequestAPI.cAction;
            
         var  iNbrRcds = AsrssetupRSSJJobGroupSimpleRequestsRequestAPI.iNbrRcds;
            
         var  cAnswer = AsrssetupRSSJJobGroupSimpleRequestsRequestAPI.cAnswer;
            
         
         NLogLoggerP.Trace("RSSJJobGroupSimpleRequests - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJJobGroupSimpleRequests(ref pdsContext,  cAction,  iNbrRcds,  cAnswer, ref pdsrssjjobgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJJobGroupSimpleRequests - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjjobgroup); 
    
            foreach (DataRow row in pdsrssjjobgroup.ttblrssjjobgroup)
            {
                results.Add(Rssjjobgroup.BuildRssjjobgroupFromRow(row));
            }
            return results;
        
      }

      public Rssjjobgroup RSSJJobGroupUpdate(AsrssetupRSSJJobGroupUpdateRequestAPI AsrssetupRSSJJobGroupUpdateRequestAPI)
      {   
         var result = new Rssjjobgroup();
         
         var pdsrssjcriteria = new pdsrssjcriteriaDataSet();
            
         var pdsrssjjobgroup = new pdsrssjjobgroupDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssjcriteriaRow = pdsrssjcriteria.ttblrssjcriteria.NewttblrssjcriteriaRow();
         Rssjcriteria.UpdateRowFromRssjcriteria(ref ttblrssjcriteriaRow, AsrssetupRSSJJobGroupUpdateRequestAPI.rssjcriteria);
         pdsrssjcriteria.ttblrssjcriteria.AddttblrssjcriteriaRow((pdsrssjcriteriaDataSet.ttblrssjcriteriaRow)ttblrssjcriteriaRow);
          
         DataRow ttblrssjjobgroupRow = pdsrssjjobgroup.ttblrssjjobgroup.NewttblrssjjobgroupRow();
         Rssjjobgroup.UpdateRowFromRssjjobgroup(ref ttblrssjjobgroupRow, AsrssetupRSSJJobGroupUpdateRequestAPI.rssjjobgroup);
         pdsrssjjobgroup.ttblrssjjobgroup.AddttblrssjjobgroupRow((pdsrssjjobgroupDataSet.ttblrssjjobgroupRow)ttblrssjjobgroupRow);
          
         
         NLogLoggerP.Trace("RSSJJobGroupUpdate - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJJobGroupUpdate(ref pdsContext, ref pdsrssjcriteria, ref pdsrssjjobgroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJJobGroupUpdate - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjcriteria); 
    
         if (pdsrssjjobgroup.ttblrssjjobgroup.Count > 0) 
         { 
             result = Rssjjobgroup.BuildRssjjobgroupFromRow(pdsrssjjobgroup.ttblrssjjobgroup[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Rssjlookupresults> RSSJLookupLoad(Rssjlookupcriteria rssjlookupcriteria)
      {   
         var results = new List<Rssjlookupresults>();
         
         var pdsrssjlookupcriteria = new pdsrssjlookupcriteriaDataSet();
            
         var pdsrssjlookupresults = new pdsrssjlookupresultsDataSet();
            
         DataRow ttblrssjlookupcriteriaCriteria = pdsrssjlookupcriteria.ttblrssjlookupcriteria.NewttblrssjlookupcriteriaRow();
         Rssjlookupcriteria.UpdateRowFromRssjlookupcriteria(ref ttblrssjlookupcriteriaCriteria, rssjlookupcriteria);
         pdsrssjlookupcriteria.ttblrssjlookupcriteria.AddttblrssjlookupcriteriaRow((pdsrssjlookupcriteriaDataSet.ttblrssjlookupcriteriaRow)ttblrssjlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSJLookupLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJLookupLoad(ref pdsContext,  pdsrssjlookupcriteria, out pdsrssjlookupresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJLookupLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjlookupcriteria); 
    
            foreach (DataRow row in pdsrssjlookupresults.ttblrssjlookupresults)
            {
                results.Add(Rssjlookupresults.BuildRssjlookupresultsFromRow(row));
            }
            return results;
        
      }

      public Rssjlookupcriteria RSSJLookupProcess(AsrssetupRSSJLookupProcessRequestAPI AsrssetupRSSJLookupProcessRequestAPI)
      {   
         var result = new Rssjlookupcriteria();
         
         var pdsrssjlookupcriteria = new pdsrssjlookupcriteriaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssjlookupcriteriaRow = pdsrssjlookupcriteria.ttblrssjlookupcriteria.NewttblrssjlookupcriteriaRow();
         Rssjlookupcriteria.UpdateRowFromRssjlookupcriteria(ref ttblrssjlookupcriteriaRow, AsrssetupRSSJLookupProcessRequestAPI.rssjlookupcriteria);
         pdsrssjlookupcriteria.ttblrssjlookupcriteria.AddttblrssjlookupcriteriaRow((pdsrssjlookupcriteriaDataSet.ttblrssjlookupcriteriaRow)ttblrssjlookupcriteriaRow);
          
         var  cAction = AsrssetupRSSJLookupProcessRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("RSSJLookupProcess - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSJLookupProcess(ref pdsContext,  cAction, ref pdsrssjlookupcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSJLookupProcess - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssjlookupcriteria); 
    
         if (pdsrssjlookupcriteria.ttblrssjlookupcriteria.Count > 0) 
         { 
             result = Rssjlookupcriteria.BuildRssjlookupcriteriaFromRow(pdsrssjlookupcriteria.ttblrssjlookupcriteria[0]);
         } 
              
          
         return result;
          
      }

      public AsrssetupRSSQCopyRecordResponseAPI RSSQCopyRecord(AsrssetupRSSQCopyRecordRequestAPI AsrssetupRSSQCopyRecordRequestAPI)
      {   
         var result = new AsrssetupRSSQCopyRecordResponseAPI();
         
         var pdsrssqcopyresults = new pdsrssqcopyresultsDataSet();
            
         bool lOK = false;
         string cErrorMessage = string.Empty;
   
         var  cOrigQueue = AsrssetupRSSQCopyRecordRequestAPI.cOrigQueue;
            
         var  cNewQueue = AsrssetupRSSQCopyRecordRequestAPI.cNewQueue;
            
         var  cNewDesc = AsrssetupRSSQCopyRecordRequestAPI.cNewDesc;
            
         
         NLogLoggerP.Trace("RSSQCopyRecord - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSQCopyRecord(ref pdsContext,  cOrigQueue,  cNewQueue,  cNewDesc, out pdsrssqcopyresults, out lOK, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSQCopyRecord - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssqcopyresults); 
    
         if (pdsrssqcopyresults.ttblrssqcopyresults.Count > 0)
         {
            result.rssqcopyresults = Rssqcopyresults.BuildRssqcopyresultsFromRow(pdsrssqcopyresults.ttblrssqcopyresults[0]);
         }
                    
         result.lOK = lOK;
          
         return result;
          
      }

      public AsrssetupRSSQQueueFieldChangeResponseAPI RSSQQueueFieldChange(AsrssetupRSSQQueueFieldChangeRequestAPI AsrssetupRSSQQueueFieldChangeRequestAPI)
      {   
         var result = new AsrssetupRSSQQueueFieldChangeResponseAPI();
         
         var pdsrssqqueue = new pdsrssqqueueDataSet();
            
         string cErrorMessage = string.Empty;
         string cWarnMessage = string.Empty;
   
         DataRow ttblrssqqueueRow = pdsrssqqueue.ttblrssqqueue.NewttblrssqqueueRow();
         Rssqqueue.UpdateRowFromRssqqueue(ref ttblrssqqueueRow, AsrssetupRSSQQueueFieldChangeRequestAPI.rssqqueue);
         pdsrssqqueue.ttblrssqqueue.AddttblrssqqueueRow((pdsrssqqueueDataSet.ttblrssqqueueRow)ttblrssqqueueRow);
          
         var  cField = AsrssetupRSSQQueueFieldChangeRequestAPI.cField;
            
         
         NLogLoggerP.Trace("RSSQQueueFieldChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSQQueueFieldChange(ref pdsContext,  cField, ref pdsrssqqueue, out cErrorMessage, out cWarnMessage);
               }
            });
         NLogLoggerP.Info("RSSQQueueFieldChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssqqueue); 
    
         if (pdsrssqqueue.ttblrssqqueue.Count > 0)
         {
            result.rssqqueue = Rssqqueue.BuildRssqqueueFromRow(pdsrssqqueue.ttblrssqqueue[0]);
         }
                    
         result.cWarnMessage = cWarnMessage;
          
         return result;
          
      }

      public IEnumerable<Rssqqueue> RSSQQueueLoad(Rssqcriteria rssqcriteria)
      {   
         var results = new List<Rssqqueue>();
         
         var pdsrssqcriteria = new pdsrssqcriteriaDataSet();
            
         var pdsrssqqueue = new pdsrssqqueueDataSet();
            
         DataRow ttblrssqcriteriaCriteria = pdsrssqcriteria.ttblrssqcriteria.NewttblrssqcriteriaRow();
         Rssqcriteria.UpdateRowFromRssqcriteria(ref ttblrssqcriteriaCriteria, rssqcriteria);
         pdsrssqcriteria.ttblrssqcriteria.AddttblrssqcriteriaRow((pdsrssqcriteriaDataSet.ttblrssqcriteriaRow)ttblrssqcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RSSQQueueLoad - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSQQueueLoad(ref pdsContext,  pdsrssqcriteria, out pdsrssqqueue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSQQueueLoad - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssqcriteria); 
    
            foreach (DataRow row in pdsrssqqueue.ttblrssqqueue)
            {
                results.Add(Rssqqueue.BuildRssqqueueFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Rssqqueue> RSSQQueueSimpleRequests(AsrssetupRSSQQueueSimpleRequestsRequestAPI AsrssetupRSSQQueueSimpleRequestsRequestAPI)
      {   
         var results = new List<Rssqqueue>();
         
         var pdsrssqqueue = new pdsrssqqueueDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsrssetupRSSQQueueSimpleRequestsRequestAPI.rssqqueue)
         {
            DataRow ttblrssqqueueRow = pdsrssqqueue.ttblrssqqueue.NewttblrssqqueueRow();
            Rssqqueue.UpdateRowFromRssqqueue(ref ttblrssqqueueRow, obj);
            pdsrssqqueue.ttblrssqqueue.AddttblrssqqueueRow((pdsrssqqueueDataSet.ttblrssqqueueRow)ttblrssqqueueRow);
         }
          
         var  cAction = AsrssetupRSSQQueueSimpleRequestsRequestAPI.cAction;
            
         var  iNbrRcds = AsrssetupRSSQQueueSimpleRequestsRequestAPI.iNbrRcds;
            
         var  cAnswer = AsrssetupRSSQQueueSimpleRequestsRequestAPI.cAnswer;
            
         
         NLogLoggerP.Trace("RSSQQueueSimpleRequests - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSQQueueSimpleRequests(ref pdsContext,  cAction,  iNbrRcds,  cAnswer, ref pdsrssqqueue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSQQueueSimpleRequests - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssqqueue); 
    
            foreach (DataRow row in pdsrssqqueue.ttblrssqqueue)
            {
                results.Add(Rssqqueue.BuildRssqqueueFromRow(row));
            }
            return results;
        
      }

      public Rssqcriteria RSSQQueueUpdate(AsrssetupRSSQQueueUpdateRequestAPI AsrssetupRSSQQueueUpdateRequestAPI)
      {   
         var result = new Rssqcriteria();
         
         var pdsrssqcriteria = new pdsrssqcriteriaDataSet();
            
         var pdsrssqqueue = new pdsrssqqueueDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblrssqcriteriaRow = pdsrssqcriteria.ttblrssqcriteria.NewttblrssqcriteriaRow();
         Rssqcriteria.UpdateRowFromRssqcriteria(ref ttblrssqcriteriaRow, AsrssetupRSSQQueueUpdateRequestAPI.rssqcriteria);
         pdsrssqcriteria.ttblrssqcriteria.AddttblrssqcriteriaRow((pdsrssqcriteriaDataSet.ttblrssqcriteriaRow)ttblrssqcriteriaRow);
          
         DataRow ttblrssqqueueRow = pdsrssqqueue.ttblrssqqueue.NewttblrssqqueueRow();
         Rssqqueue.UpdateRowFromRssqqueue(ref ttblrssqqueueRow, AsrssetupRSSQQueueUpdateRequestAPI.rssqqueue);
         pdsrssqqueue.ttblrssqqueue.AddttblrssqqueueRow((pdsrssqqueueDataSet.ttblrssqqueueRow)ttblrssqqueueRow);
          
         
         NLogLoggerP.Trace("RSSQQueueUpdate - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.RSSQQueueUpdate(ref pdsContext, ref pdsrssqcriteria,  pdsrssqqueue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RSSQQueueUpdate - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrssqcriteria); 
    
         if (pdsrssqcriteria.ttblrssqcriteria.Count > 0) 
         { 
             result = Rssqcriteria.BuildRssqcriteriaFromRow(pdsrssqcriteria.ttblrssqcriteria[0]);
         } 
              
          
         return result;
          
      }

      public Sapbdatetime SAPBDateTimeFieldChange(AsrssetupSAPBDateTimeFieldChangeRequestAPI AsrssetupSAPBDateTimeFieldChangeRequestAPI)
      {   
         var result = new Sapbdatetime();
         
         var pdssapbdatetime = new pdssapbdatetimeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsapbdatetimeRow = pdssapbdatetime.ttblsapbdatetime.NewttblsapbdatetimeRow();
         Sapbdatetime.UpdateRowFromSapbdatetime(ref ttblsapbdatetimeRow, AsrssetupSAPBDateTimeFieldChangeRequestAPI.sapbdatetime);
         pdssapbdatetime.ttblsapbdatetime.AddttblsapbdatetimeRow((pdssapbdatetimeDataSet.ttblsapbdatetimeRow)ttblsapbdatetimeRow);
          
         var  cField = AsrssetupSAPBDateTimeFieldChangeRequestAPI.cField;
            
         
         NLogLoggerP.Trace("SAPBDateTimeFieldChange - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.SAPBDateTimeFieldChange(ref pdsContext,  cField, ref pdssapbdatetime, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPBDateTimeFieldChange - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapbdatetime); 
    
         if (pdssapbdatetime.ttblsapbdatetime.Count > 0) 
         { 
             result = Sapbdatetime.BuildSapbdatetimeFromRow(pdssapbdatetime.ttblsapbdatetime[0]);
         } 
              
          
         return result;
          
      }

      public Sapbdatetime SAPBDateTimeProcess(AsrssetupSAPBDateTimeProcessRequestAPI AsrssetupSAPBDateTimeProcessRequestAPI)
      {   
         var result = new Sapbdatetime();
         
         var pdssapbdatetime = new pdssapbdatetimeDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblsapbdatetimeRow = pdssapbdatetime.ttblsapbdatetime.NewttblsapbdatetimeRow();
         Sapbdatetime.UpdateRowFromSapbdatetime(ref ttblsapbdatetimeRow, AsrssetupSAPBDateTimeProcessRequestAPI.sapbdatetime);
         pdssapbdatetime.ttblsapbdatetime.AddttblsapbdatetimeRow((pdssapbdatetimeDataSet.ttblsapbdatetimeRow)ttblsapbdatetimeRow);
          
         var  cAction = AsrssetupSAPBDateTimeProcessRequestAPI.cAction;
            
         
         NLogLoggerP.Trace("SAPBDateTimeProcess - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.SAPBDateTimeProcess(ref pdsContext,  cAction, ref pdssapbdatetime, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPBDateTimeProcess - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapbdatetime); 
    
         if (pdssapbdatetime.ttblsapbdatetime.Count > 0) 
         { 
             result = Sapbdatetime.BuildSapbdatetimeFromRow(pdssapbdatetime.ttblsapbdatetime[0]);
         } 
              
          
         return result;
          
      }

      public AsrssetupSAPJJobDetailResponseAPI SAPJJobDetail(string cReportNm)
      {   
         var result = new AsrssetupSAPJJobDetailResponseAPI();
         
         var pdssapjjobdetail = new pdssapjjobdetailDataSet();
            
         string cJobTitle = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SAPJJobDetail - Asrssetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsrssetupproxy = this.proxyAppObject.CreatePO_asrssetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsrssetupproxy.SAPJJobDetail(ref pdsContext,  cReportNm, out pdssapjjobdetail, out cJobTitle, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SAPJJobDetail - Asrssetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssapjjobdetail); 
    
         foreach (DataRow row in pdssapjjobdetail.ttblsapjjobdetail)
         {
            result.sapjjobdetail.Add(Sapjjobdetail.BuildSapjjobdetailFromRow(row));
         }     
         result.cJobTitle = cJobTitle;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  