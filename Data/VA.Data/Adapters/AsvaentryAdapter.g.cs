//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsmessaging;
   using Models.Pdsvaei;
   using Models.Pdsvaappliedlaborsectionslist;
   using Models.Pdsvaeifinalupdate;
   using Models.Pdsvaeifullreceipt;
   using Models.Pdsvaeipartialreceipt;
   using Models.Pdsvaeircvdetailinfo;
   using Models.Pdsvaesdeletesection;
   using Models.Pdsvaesloadtt;
   using Models.Pdsvaesdetail;
   using Models.Pdsvaesshipunship;
   using Models.Pdsvanonstock;
   using Models.Pdsvarollcstprccalc;
   using Models.Pdsvarollcstprcupdt;
   using Models.Pdsvaetdetailbannerlogoff;
   using Models.Pdsvaheadlabor;
   using Models.Pdsvaeubuildvalist;
   using Models.Pdsvaealist;
   using Models.Pdsiclotcutresults;
   using Models.Pdsvaeasplit;
   using Models.Complex;

   public partial class AsvaentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private VAProxyAppObject proxyAppObject;
      
      public AsvaentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsvaentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsvaentryVAReceiptCreateIISectionResponseAPI VAReceiptCreateIISection(AsvaentryVAReceiptCreateIISectionRequestAPI AsvaentryVAReceiptCreateIISectionRequestAPI)
      {   
         var result = new AsvaentryVAReceiptCreateIISectionResponseAPI();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         int pvSeqno = 0;
         string cErrorMessage = string.Empty;
   
         var  pvSctncode = AsvaentryVAReceiptCreateIISectionRequestAPI.pvSctncode;
            
         var  pvCompletefl = AsvaentryVAReceiptCreateIISectionRequestAPI.pvCompletefl;
            
         var  pvPasspono = AsvaentryVAReceiptCreateIISectionRequestAPI.pvPasspono;
            
         var  pvPassposuf = AsvaentryVAReceiptCreateIISectionRequestAPI.pvPassposuf;
            
         var  pvPasslineno = AsvaentryVAReceiptCreateIISectionRequestAPI.pvPasslineno;
            
         var  pvVano = AsvaentryVAReceiptCreateIISectionRequestAPI.pvVano;
            
         var  pvVasuf = AsvaentryVAReceiptCreateIISectionRequestAPI.pvVasuf;
            
         
         NLogLoggerP.Trace("VAReceiptCreateIISection - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAReceiptCreateIISection(ref pdsContext,  pvSctncode,  pvCompletefl,  pvPasspono,  pvPassposuf,  pvPasslineno, ref pvVano, ref pvVasuf, out pvSeqno, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReceiptCreateIISection - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.pvVano = pvVano;
         result.pvVasuf = pvVasuf;
         result.pvSeqno = pvSeqno;
          
         return result;
          
      }

      public IEnumerable<Messaging> VAReceiptCheckIISection(int pvVano, int pvVasuf, int pvSeqno)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAReceiptCheckIISection - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAReceiptCheckIISection(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReceiptCheckIISection - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvaentryVAEIRetrieveResponseAPI VAEIRetrieve(Vaeicriteria vaeicriteria)
      {   
         var result = new AsvaentryVAEIRetrieveResponseAPI();
         
         var pdsvaei = new pdsvaeiDataSet();
            
         var pdsvaappliedlaborsectionslist = new pdsvaappliedlaborsectionslistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeicriteriaCriteria = pdsvaei.ttblvaeicriteria.NewttblvaeicriteriaRow();
         Vaeicriteria.UpdateRowFromVaeicriteria(ref ttblvaeicriteriaCriteria, vaeicriteria);
         pdsvaei.ttblvaeicriteria.AddttblvaeicriteriaRow((pdsvaeiDataSet.ttblvaeicriteriaRow)ttblvaeicriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VAEIRetrieve - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIRetrieve(ref pdsContext, ref pdsvaei, out pdsvaappliedlaborsectionslist, out pdsmessaging, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VAEIRetrieve - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaei); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvaappliedlaborsectionslist.ttblvaappliedlaborsectionslist)
         {
            result.vaappliedlaborsectionslist.Add(Vaappliedlaborsectionslist.BuildVaappliedlaborsectionslistFromRow(row));
         }     
         foreach (DataRow row in pdsvaei.ttblvaeiresults)
         {
            result.vaeiresults.Add(Vaeiresults.BuildVaeiresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsvaentryVAEIFinalUpdateInitializeResponseAPI VAEIFinalUpdateInitialize(Vaeifinalupdatecriteria vaeifinalupdatecriteria)
      {   
         var result = new AsvaentryVAEIFinalUpdateInitializeResponseAPI();
         
         var pdsvaeifinalupdate = new pdsvaeifinalupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeifinalupdatecriteriaCriteria = pdsvaeifinalupdate.ttblvaeifinalupdatecriteria.NewttblvaeifinalupdatecriteriaRow();
         Vaeifinalupdatecriteria.UpdateRowFromVaeifinalupdatecriteria(ref ttblvaeifinalupdatecriteriaCriteria, vaeifinalupdatecriteria);
         pdsvaeifinalupdate.ttblvaeifinalupdatecriteria.AddttblvaeifinalupdatecriteriaRow((pdsvaeifinalupdateDataSet.ttblvaeifinalupdatecriteriaRow)ttblvaeifinalupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIFinalUpdateInitialize - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIFinalUpdateInitialize(ref pdsContext, ref pdsvaeifinalupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIFinalUpdateInitialize - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeifinalupdate); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaeifinalupdate.ttblvaeifinalupdatecriteria.Count > 0)
         {
            result.vaeifinalupdatecriteria = Vaeifinalupdatecriteria.BuildVaeifinalupdatecriteriaFromRow(pdsvaeifinalupdate.ttblvaeifinalupdatecriteria[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAEIFinalUpdate(Vaeifinalupdatecriteria vaeifinalupdatecriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsvaeifinalupdate = new pdsvaeifinalupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeifinalupdatecriteriaCriteria = pdsvaeifinalupdate.ttblvaeifinalupdatecriteria.NewttblvaeifinalupdatecriteriaRow();
         Vaeifinalupdatecriteria.UpdateRowFromVaeifinalupdatecriteria(ref ttblvaeifinalupdatecriteriaCriteria, vaeifinalupdatecriteria);
         pdsvaeifinalupdate.ttblvaeifinalupdatecriteria.AddttblvaeifinalupdatecriteriaRow((pdsvaeifinalupdateDataSet.ttblvaeifinalupdatecriteriaRow)ttblvaeifinalupdatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIFinalUpdate - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIFinalUpdate(ref pdsContext,  pdsvaeifinalupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIFinalUpdate - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeifinalupdate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> VAEIFullReceipt(Vaeifullreceiptcriteria vaeifullreceiptcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsvaeifullreceipt = new pdsvaeifullreceiptDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeifullreceiptcriteriaCriteria = pdsvaeifullreceipt.ttblvaeifullreceiptcriteria.NewttblvaeifullreceiptcriteriaRow();
         Vaeifullreceiptcriteria.UpdateRowFromVaeifullreceiptcriteria(ref ttblvaeifullreceiptcriteriaCriteria, vaeifullreceiptcriteria);
         pdsvaeifullreceipt.ttblvaeifullreceiptcriteria.AddttblvaeifullreceiptcriteriaRow((pdsvaeifullreceiptDataSet.ttblvaeifullreceiptcriteriaRow)ttblvaeifullreceiptcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIFullReceipt - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIFullReceipt(ref pdsContext,  pdsvaeifullreceipt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIFullReceipt - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeifullreceipt); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> VAEIPartialReceipt(Vaeipartialreceiptcriteria vaeipartialreceiptcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsvaeipartialreceipt = new pdsvaeipartialreceiptDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeipartialreceiptcriteriaCriteria = pdsvaeipartialreceipt.ttblvaeipartialreceiptcriteria.NewttblvaeipartialreceiptcriteriaRow();
         Vaeipartialreceiptcriteria.UpdateRowFromVaeipartialreceiptcriteria(ref ttblvaeipartialreceiptcriteriaCriteria, vaeipartialreceiptcriteria);
         pdsvaeipartialreceipt.ttblvaeipartialreceiptcriteria.AddttblvaeipartialreceiptcriteriaRow((pdsvaeipartialreceiptDataSet.ttblvaeipartialreceiptcriteriaRow)ttblvaeipartialreceiptcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIPartialReceipt - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIPartialReceipt(ref pdsContext,  pdsvaeipartialreceipt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIPartialReceipt - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeipartialreceipt); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvaentryVAEIValidateReceiptCapabilityResponseAPI VAEIValidateReceiptCapability(int pvVano, int pvVasuf, bool pvWlwhsechgfl)
      {   
         var result = new AsvaentryVAEIValidateReceiptCapabilityResponseAPI();
         
         var pdsvaeircvdetailinfo = new pdsvaeircvdetailinfoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIValidateReceiptCapability - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIValidateReceiptCapability(ref pdsContext,  pvVano,  pvVasuf,  pvWlwhsechgfl, out pdsvaeircvdetailinfo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIValidateReceiptCapability - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeircvdetailinfo); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaeircvdetailinfo.ttblvaeircvdetailinfo.Count > 0)
         {
            result.vaeircvdetailinfo = Vaeircvdetailinfo.BuildVaeircvdetailinfoFromRow(pdsvaeircvdetailinfo.ttblvaeircvdetailinfo[0]);
         }
                    
          
         return result;
          
      }

      public void VAEIRemoveSoftLocks()
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEIRemoveSoftLocks - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEIRemoveSoftLocks(ref pdsContext, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEIRemoveSoftLocks - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void VAESDeleteSection(Vaesdeletesection vaesdeletesection)
      {   
         
         var pdsvaesdeletesection = new pdsvaesdeletesectionDataSet();
            
         DataRow ttblvaesdeletesectionCriteria = pdsvaesdeletesection.ttblvaesdeletesection.NewttblvaesdeletesectionRow();
         Vaesdeletesection.UpdateRowFromVaesdeletesection(ref ttblvaesdeletesectionCriteria, vaesdeletesection);
         pdsvaesdeletesection.ttblvaesdeletesection.AddttblvaesdeletesectionRow((pdsvaesdeletesectionDataSet.ttblvaesdeletesectionRow)ttblvaesdeletesectionCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESDeleteSection - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESDeleteSection(ref pdsContext,  pdsvaesdeletesection, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESDeleteSection - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaesdeletesection);
      }

      public IEnumerable<Vaesloadttresults> VAESLoadTemptable(Vaesloadttcriteria vaesloadttcriteria)
      {   
         var results = new List<Vaesloadttresults>();
         
         var pdsvaesloadtt = new pdsvaesloadttDataSet();
            
         DataRow ttblvaesloadttcriteriaCriteria = pdsvaesloadtt.ttblvaesloadttcriteria.NewttblvaesloadttcriteriaRow();
         Vaesloadttcriteria.UpdateRowFromVaesloadttcriteria(ref ttblvaesloadttcriteriaCriteria, vaesloadttcriteria);
         pdsvaesloadtt.ttblvaesloadttcriteria.AddttblvaesloadttcriteriaRow((pdsvaesloadttDataSet.ttblvaesloadttcriteriaRow)ttblvaesloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESLoadTemptable - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESLoadTemptable(ref pdsContext, ref pdsvaesloadtt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESLoadTemptable - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaesloadtt); 
    
            foreach (DataRow row in pdsvaesloadtt.ttblvaesloadttresults)
            {
                results.Add(Vaesloadttresults.BuildVaesloadttresultsFromRow(row));
            }
            return results;
        
      }

      public void VAESProcessPostDetail(Vaesdetail vaesdetail)
      {   
         
         var pdsvaesdetail = new pdsvaesdetailDataSet();
            
         DataRow ttblvaesdetailCriteria = pdsvaesdetail.ttblvaesdetail.NewttblvaesdetailRow();
         Vaesdetail.UpdateRowFromVaesdetail(ref ttblvaesdetailCriteria, vaesdetail);
         pdsvaesdetail.ttblvaesdetail.AddttblvaesdetailRow((pdsvaesdetailDataSet.ttblvaesdetailRow)ttblvaesdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESProcessPostDetail - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESProcessPostDetail(ref pdsContext,  pdsvaesdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESProcessPostDetail - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaesdetail);
      }

      public void VAESProcessPreDetail(Vaesdetail vaesdetail)
      {   
         
         var pdsvaesdetail = new pdsvaesdetailDataSet();
            
         DataRow ttblvaesdetailCriteria = pdsvaesdetail.ttblvaesdetail.NewttblvaesdetailRow();
         Vaesdetail.UpdateRowFromVaesdetail(ref ttblvaesdetailCriteria, vaesdetail);
         pdsvaesdetail.ttblvaesdetail.AddttblvaesdetailRow((pdsvaesdetailDataSet.ttblvaesdetailRow)ttblvaesdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESProcessPreDetail - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESProcessPreDetail(ref pdsContext,  pdsvaesdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESProcessPreDetail - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaesdetail);
      }

      public Vaesshipunship VAESShipUnship(Vaesshipunship vaesshipunship)
      {   
         var result = new Vaesshipunship();
         
         var pdsvaesshipunship = new pdsvaesshipunshipDataSet();
            
         DataRow ttblvaesshipunshipCriteria = pdsvaesshipunship.ttblvaesshipunship.NewttblvaesshipunshipRow();
         Vaesshipunship.UpdateRowFromVaesshipunship(ref ttblvaesshipunshipCriteria, vaesshipunship);
         pdsvaesshipunship.ttblvaesshipunship.AddttblvaesshipunshipRow((pdsvaesshipunshipDataSet.ttblvaesshipunshipRow)ttblvaesshipunshipCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESShipUnship - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESShipUnship(ref pdsContext, ref pdsvaesshipunship, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESShipUnship - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaesshipunship); 
    
         if (pdsvaesshipunship.ttblvaesshipunship.Count > 0) 
         { 
             result = Vaesshipunship.BuildVaesshipunshipFromRow(pdsvaesshipunship.ttblvaesshipunship[0]);
         } 
              
          
         return result;
          
      }

      public Vanonstockresults VANonStockLeaveProd(Vanonstockcriteria vanonstockcriteria)
      {   
         var result = new Vanonstockresults();
         
         var pdsvanonstock = new pdsvanonstockDataSet();
            
         DataRow ttblvanonstockcriteriaCriteria = pdsvanonstock.ttblvanonstockcriteria.NewttblvanonstockcriteriaRow();
         Vanonstockcriteria.UpdateRowFromVanonstockcriteria(ref ttblvanonstockcriteriaCriteria, vanonstockcriteria);
         pdsvanonstock.ttblvanonstockcriteria.AddttblvanonstockcriteriaRow((pdsvanonstockDataSet.ttblvanonstockcriteriaRow)ttblvanonstockcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VANonStockLeaveProd - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VANonStockLeaveProd(ref pdsContext, ref pdsvanonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VANonStockLeaveProd - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvanonstock); 
    
         if (pdsvanonstock.ttblvanonstockresults.Count > 0) 
         { 
             result = Vanonstockresults.BuildVanonstockresultsFromRow(pdsvanonstock.ttblvanonstockresults[0]);
         } 
              
          
         return result;
          
      }

      public Varollcstprcresults VARollCstPrcInitialize(Varollcstprccriteria varollcstprccriteria)
      {   
         var result = new Varollcstprcresults();
         
         var pdsvarollcstprccalc = new pdsvarollcstprccalcDataSet();
            
         DataRow ttblvarollcstprccriteriaCriteria = pdsvarollcstprccalc.ttblvarollcstprccriteria.NewttblvarollcstprccriteriaRow();
         Varollcstprccriteria.UpdateRowFromVarollcstprccriteria(ref ttblvarollcstprccriteriaCriteria, varollcstprccriteria);
         pdsvarollcstprccalc.ttblvarollcstprccriteria.AddttblvarollcstprccriteriaRow((pdsvarollcstprccalcDataSet.ttblvarollcstprccriteriaRow)ttblvarollcstprccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VARollCstPrcInitialize - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VARollCstPrcInitialize(ref pdsContext, ref pdsvarollcstprccalc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VARollCstPrcInitialize - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvarollcstprccalc); 
    
         if (pdsvarollcstprccalc.ttblvarollcstprcresults.Count > 0) 
         { 
             result = Varollcstprcresults.BuildVarollcstprcresultsFromRow(pdsvarollcstprccalc.ttblvarollcstprcresults[0]);
         } 
              
          
         return result;
          
      }

      public Varollcstprcresults VARollCstPrcCalculate(Varollcstprccriteria varollcstprccriteria)
      {   
         var result = new Varollcstprcresults();
         
         var pdsvarollcstprccalc = new pdsvarollcstprccalcDataSet();
            
         DataRow ttblvarollcstprccriteriaCriteria = pdsvarollcstprccalc.ttblvarollcstprccriteria.NewttblvarollcstprccriteriaRow();
         Varollcstprccriteria.UpdateRowFromVarollcstprccriteria(ref ttblvarollcstprccriteriaCriteria, varollcstprccriteria);
         pdsvarollcstprccalc.ttblvarollcstprccriteria.AddttblvarollcstprccriteriaRow((pdsvarollcstprccalcDataSet.ttblvarollcstprccriteriaRow)ttblvarollcstprccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VARollCstPrcCalculate - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VARollCstPrcCalculate(ref pdsContext, ref pdsvarollcstprccalc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VARollCstPrcCalculate - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvarollcstprccalc); 
    
         if (pdsvarollcstprccalc.ttblvarollcstprcresults.Count > 0) 
         { 
             result = Varollcstprcresults.BuildVarollcstprcresultsFromRow(pdsvarollcstprccalc.ttblvarollcstprcresults[0]);
         } 
              
          
         return result;
          
      }

      public Varollcstprcupdate VARollCstPrcUpdate(Varollcstprcupdate varollcstprcupdate)
      {   
         var result = new Varollcstprcupdate();
         
         var pdsvarollcstprcupdt = new pdsvarollcstprcupdtDataSet();
            
         DataRow ttblvarollcstprcupdateCriteria = pdsvarollcstprcupdt.ttblvarollcstprcupdate.NewttblvarollcstprcupdateRow();
         Varollcstprcupdate.UpdateRowFromVarollcstprcupdate(ref ttblvarollcstprcupdateCriteria, varollcstprcupdate);
         pdsvarollcstprcupdt.ttblvarollcstprcupdate.AddttblvarollcstprcupdateRow((pdsvarollcstprcupdtDataSet.ttblvarollcstprcupdateRow)ttblvarollcstprcupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VARollCstPrcUpdate - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VARollCstPrcUpdate(ref pdsContext, ref pdsvarollcstprcupdt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VARollCstPrcUpdate - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvarollcstprcupdt); 
    
         if (pdsvarollcstprcupdt.ttblvarollcstprcupdate.Count > 0) 
         { 
             result = Varollcstprcupdate.BuildVarollcstprcupdateFromRow(pdsvarollcstprcupdt.ttblvarollcstprcupdate[0]);
         } 
              
          
         return result;
          
      }

      public Vaetdetailbannerlogoff VAETDetailBannerLogOff(int pvVano)
      {   
         var result = new Vaetdetailbannerlogoff();
         
         var pdsvaetdetailbannerlogoff = new pdsvaetdetailbannerlogoffDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAETDetailBannerLogOff - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAETDetailBannerLogOff(ref pdsContext,  pvVano, out pdsvaetdetailbannerlogoff, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAETDetailBannerLogOff - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaetdetailbannerlogoff); 
    
         if (pdsvaetdetailbannerlogoff.ttblvaetdetailbannerlogoff.Count > 0) 
         { 
             result = Vaetdetailbannerlogoff.BuildVaetdetailbannerlogoffFromRow(pdsvaetdetailbannerlogoff.ttblvaetdetailbannerlogoff[0]);
         } 
              
          
         return result;
          
      }

      public Vaheadlaborresults VAGetHeadLabor(Vaheadlaborcriteria vaheadlaborcriteria)
      {   
         var result = new Vaheadlaborresults();
         
         var pdsvaheadlabor = new pdsvaheadlaborDataSet();
            
         DataRow ttblvaheadlaborcriteriaCriteria = pdsvaheadlabor.ttblvaheadlaborcriteria.NewttblvaheadlaborcriteriaRow();
         Vaheadlaborcriteria.UpdateRowFromVaheadlaborcriteria(ref ttblvaheadlaborcriteriaCriteria, vaheadlaborcriteria);
         pdsvaheadlabor.ttblvaheadlaborcriteria.AddttblvaheadlaborcriteriaRow((pdsvaheadlaborDataSet.ttblvaheadlaborcriteriaRow)ttblvaheadlaborcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAGetHeadLabor - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAGetHeadLabor(ref pdsContext, ref pdsvaheadlabor, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAGetHeadLabor - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadlabor); 
    
         if (pdsvaheadlabor.ttblvaheadlaborresults.Count > 0) 
         { 
             result = Vaheadlaborresults.BuildVaheadlaborresultsFromRow(pdsvaheadlabor.ttblvaheadlaborresults[0]);
         } 
              
          
         return result;
          
      }

      public AsvaentryVAEULoadTTResponseAPI VAEULoadTT(Vaeubuildvalistcriteria vaeubuildvalistcriteria)
      {   
         var result = new AsvaentryVAEULoadTTResponseAPI();
         
         var pdsvaeubuildvalist = new pdsvaeubuildvalistDataSet();
            
         DataRow ttblvaeubuildvalistcriteriaCriteria = pdsvaeubuildvalist.ttblvaeubuildvalistcriteria.NewttblvaeubuildvalistcriteriaRow();
         Vaeubuildvalistcriteria.UpdateRowFromVaeubuildvalistcriteria(ref ttblvaeubuildvalistcriteriaCriteria, vaeubuildvalistcriteria);
         pdsvaeubuildvalist.ttblvaeubuildvalistcriteria.AddttblvaeubuildvalistcriteriaRow((pdsvaeubuildvalistDataSet.ttblvaeubuildvalistcriteriaRow)ttblvaeubuildvalistcriteriaCriteria);
            
         int pvCurVerno = 0;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VAEULoadTT - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEULoadTT(ref pdsContext, ref pdsvaeubuildvalist, out pvCurVerno, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VAEULoadTT - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeubuildvalist); 
    
         foreach (DataRow row in pdsvaeubuildvalist.ttblvaeubuildvalistresults)
         {
            result.vaeubuildvalistresults.Add(Vaeubuildvalistresults.BuildVaeubuildvalistresultsFromRow(row));
         }     
         result.pvCurVerno = pvCurVerno;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Messaging> VAEUUpgrade(int pvVano, int pvVasuf, int pvFromverno, int pvToverno)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEUUpgrade - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEUUpgrade(ref pdsContext,  pvVano,  pvVasuf,  pvFromverno,  pvToverno, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEUUpgrade - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> VAESLogOff()
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAESLogOff - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAESLogOff(ref pdsContext, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAESLogOff - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public decimal VAParentCheckSerLot(int iVaNo, int iVaSuf, decimal iReceiptQty)
      {   
          
         decimal dNoSNLots = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAParentCheckSerLot - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAParentCheckSerLot(ref pdsContext,  iVaNo,  iVaSuf,  iReceiptQty, out dNoSNLots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAParentCheckSerLot - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return dNoSNLots;
      
      }

      public AsvaentryVAEABuildListResponseAPI VAEABuildList(Vaealistcriteria vaealistcriteria)
      {   
         var result = new AsvaentryVAEABuildListResponseAPI();
         
         var pdsvaealist = new pdsvaealistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaealistcriteriaCriteria = pdsvaealist.ttblvaealistcriteria.NewttblvaealistcriteriaRow();
         Vaealistcriteria.UpdateRowFromVaealistcriteria(ref ttblvaealistcriteriaCriteria, vaealistcriteria);
         pdsvaealist.ttblvaealistcriteria.AddttblvaealistcriteriaRow((pdsvaealistDataSet.ttblvaealistcriteriaRow)ttblvaealistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VAEABuildList - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEABuildList(ref pdsContext, ref pdsvaealist, out pdsmessaging, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VAEABuildList - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaealist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvaealist.ttblvaealistresults)
         {
            result.vaealistresults.Add(Vaealistresults.BuildVaealistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsvaentryVAEASplitInitializeResponseAPI VAEASplitInitialize(Lotcutresults lotcutresults)
      {   
         var result = new AsvaentryVAEASplitInitializeResponseAPI();
         
         var pdsiclotcutresults = new pdsiclotcutresultsDataSet();
            
         var pdsvaeasplit = new pdsvaeasplitDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttbllotcutresultsCriteria = pdsiclotcutresults.ttbllotcutresults.NewttbllotcutresultsRow();
         Lotcutresults.UpdateRowFromLotcutresults(ref ttbllotcutresultsCriteria, lotcutresults);
         pdsiclotcutresults.ttbllotcutresults.AddttbllotcutresultsRow((pdsiclotcutresultsDataSet.ttbllotcutresultsRow)ttbllotcutresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEASplitInitialize - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEASplitInitialize(ref pdsContext,  pdsiclotcutresults, out pdsvaeasplit, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEASplitInitialize - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutresults); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaeasplit.ttblvaeasplitdata.Count > 0)
         {
            result.vaeasplitdata = Vaeasplitdata.BuildVaeasplitdataFromRow(pdsvaeasplit.ttblvaeasplitdata[0]);
         }
                    
          
         return result;
          
      }

      public AsvaentryVAEASplitValidateResponseAPI VAEASplitValidate(Vaeasplitdata vaeasplitdata)
      {   
         var result = new AsvaentryVAEASplitValidateResponseAPI();
         
         var pdsvaeasplit = new pdsvaeasplitDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeasplitdataCriteria = pdsvaeasplit.ttblvaeasplitdata.NewttblvaeasplitdataRow();
         Vaeasplitdata.UpdateRowFromVaeasplitdata(ref ttblvaeasplitdataCriteria, vaeasplitdata);
         pdsvaeasplit.ttblvaeasplitdata.AddttblvaeasplitdataRow((pdsvaeasplitDataSet.ttblvaeasplitdataRow)ttblvaeasplitdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEASplitValidate - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEASplitValidate(ref pdsContext, ref pdsvaeasplit, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEASplitValidate - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeasplit); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaeasplit.ttblvaeasplitdata.Count > 0)
         {
            result.vaeasplitdata = Vaeasplitdata.BuildVaeasplitdataFromRow(pdsvaeasplit.ttblvaeasplitdata[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAEASplitSave(Vaeasplitdata vaeasplitdata)
      {   
         var results = new List<Messaging>();
         
         var pdsvaeasplit = new pdsvaeasplitDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaeasplitdataCriteria = pdsvaeasplit.ttblvaeasplitdata.NewttblvaeasplitdataRow();
         Vaeasplitdata.UpdateRowFromVaeasplitdata(ref ttblvaeasplitdataCriteria, vaeasplitdata);
         pdsvaeasplit.ttblvaeasplitdata.AddttblvaeasplitdataRow((pdsvaeasplitDataSet.ttblvaeasplitdataRow)ttblvaeasplitdataCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAEASplitSave - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEASplitSave(ref pdsContext,  pdsvaeasplit, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEASplitSave - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaeasplit); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> VAEAAdjustUnavailable(AsvaentryVAEAAdjustUnavailableRequestAPI AsvaentryVAEAAdjustUnavailableRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsiclotcutresults = new pdsiclotcutresultsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvaentryVAEAAdjustUnavailableRequestAPI.lotcutresults)
         {
            DataRow ttbllotcutresultsRow = pdsiclotcutresults.ttbllotcutresults.NewttbllotcutresultsRow();
            Lotcutresults.UpdateRowFromLotcutresults(ref ttbllotcutresultsRow, obj);
            pdsiclotcutresults.ttbllotcutresults.AddttbllotcutresultsRow((pdsiclotcutresultsDataSet.ttbllotcutresultsRow)ttbllotcutresultsRow);
         }
          
         var  cReasUnavTy = AsvaentryVAEAAdjustUnavailableRequestAPI.cReasUnavTy;
            
         
         NLogLoggerP.Trace("VAEAAdjustUnavailable - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEAAdjustUnavailable(ref pdsContext,  cReasUnavTy,  pdsiclotcutresults, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEAAdjustUnavailable - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutresults); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Lotcutresults> VAEAAdjustCondition(AsvaentryVAEAAdjustConditionRequestAPI AsvaentryVAEAAdjustConditionRequestAPI)
      {   
         var results = new List<Lotcutresults>();
         
         var pdsiclotcutresults = new pdsiclotcutresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvaentryVAEAAdjustConditionRequestAPI.lotcutresults)
         {
            DataRow ttbllotcutresultsRow = pdsiclotcutresults.ttbllotcutresults.NewttbllotcutresultsRow();
            Lotcutresults.UpdateRowFromLotcutresults(ref ttbllotcutresultsRow, obj);
            pdsiclotcutresults.ttbllotcutresults.AddttbllotcutresultsRow((pdsiclotcutresultsDataSet.ttbllotcutresultsRow)ttbllotcutresultsRow);
         }
          
         var  cConditionCd = AsvaentryVAEAAdjustConditionRequestAPI.cConditionCd;
            
         
         NLogLoggerP.Trace("VAEAAdjustCondition - Asvaentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaentryproxy = this.proxyAppObject.CreatePO_asvaentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaentryproxy.VAEAAdjustCondition(ref pdsContext,  cConditionCd, ref pdsiclotcutresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAEAAdjustCondition - Asvaentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsiclotcutresults); 
    
            foreach (DataRow row in pdsiclotcutresults.ttbllotcutresults)
            {
                results.Add(Lotcutresults.BuildLotcutresultsFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  