//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsvaspasmblsegments;
   using Models.Pdsvaspasmblruledelete;
   using Models.Pdsvaspasmblrule;
   using Models.Pdsvaspasmblvalidate;
   using Models.Pdsvaspheaderadd;
   using Models.Pdsvaspheaderchangeupdate;
   using Models.Pdsvaspheadercompload;
   using Models.Pdsvaheaderallcomponent;
   using Models.Pdsvaspheaderdelete;
   using Models.Pdsvaspheaderfind;
   using Models.Pdsvaspheaderlist;
   using Models.Pdsvasplineadd;
   using Models.Pdsvasplinelist;
   using Models.Pdsvasplinechange;
   using Models.Pdsvasplinedelete;
   using Models.Pdsvasplinenonstock;
   using Models.Pdsvaspsectionaddsctn;
   using Models.Pdsvaspsectionautocrt;
   using Models.Pdsvaspsectiondelete;
   using Models.Pdsvaspsectionextendex;
   using Models.Pdsvaspsectionextendin;
   using Models.Pdsvaspsectionlist;
   using Models.Pdsvaspsectionnextsctn;
   using Models.Pdsvaspsectionrowupdate;
   using Models.Pdsmessaging;
   using Models.Pdsvaspsectionspecinit;
   using Models.Pdsvaspsectionspecupdate;
   using Models.Complex;

   public partial class AsvasetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private VAProxyAppObject proxyAppObject;
      
      public AsvasetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsvasetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsvasetupVAFabWhseARPResponseAPI VAFabWhseARP(string cFabWhse)
      {   
         var result = new AsvasetupVAFabWhseARPResponseAPI();
         
         string cARPWhse = string.Empty;
         string cARPType = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAFabWhseARP - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VAFabWhseARP(ref pdsContext,  cFabWhse, out cARPWhse, out cARPType, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAFabWhseARP - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cARPWhse = cARPWhse;
         result.cARPType = cARPType;
          
         return result;
          
      }

      public Vaspasmblsegments VASPAssemblyRetrieve(AsvasetupVASPAssemblyRetrieveRequestAPI AsvasetupVASPAssemblyRetrieveRequestAPI)
      {   
         var result = new Vaspasmblsegments();
         
         var pdsvaspasmblsegments = new pdsvaspasmblsegmentsDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  vaprod = AsvasetupVASPAssemblyRetrieveRequestAPI.vaprod;
            
         var  vawhse = AsvasetupVASPAssemblyRetrieveRequestAPI.vawhse;
            
         var  vaverno = AsvasetupVASPAssemblyRetrieveRequestAPI.vaverno;
            
         
         NLogLoggerP.Trace("VASPAssemblyRetrieve - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyRetrieve(ref pdsContext,  vaprod,  vawhse,  vaverno, out pdsvaspasmblsegments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyRetrieve - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblsegments); 
    
         if (pdsvaspasmblsegments.ttblvaspasmblsegments.Count > 0) 
         { 
             result = Vaspasmblsegments.BuildVaspasmblsegmentsFromRow(pdsvaspasmblsegments.ttblvaspasmblsegments[0]);
         } 
              
          
         return result;
          
      }

      public void VASPAssemblyUpdate(Vaspasmblsegments vaspasmblsegments)
      {   
         
         var pdsvaspasmblsegments = new pdsvaspasmblsegmentsDataSet();
            
         DataRow ttblvaspasmblsegmentsCriteria = pdsvaspasmblsegments.ttblvaspasmblsegments.NewttblvaspasmblsegmentsRow();
         Vaspasmblsegments.UpdateRowFromVaspasmblsegments(ref ttblvaspasmblsegmentsCriteria, vaspasmblsegments);
         pdsvaspasmblsegments.ttblvaspasmblsegments.AddttblvaspasmblsegmentsRow((pdsvaspasmblsegmentsDataSet.ttblvaspasmblsegmentsRow)ttblvaspasmblsegmentsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPAssemblyUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyUpdate(ref pdsContext,  pdsvaspasmblsegments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblsegments);
      }

      public void VASPAssemblyRuleDelete(Vaspasmblruledelete vaspasmblruledelete)
      {   
         
         var pdsvaspasmblruledelete = new pdsvaspasmblruledeleteDataSet();
            
         DataRow ttblvaspasmblruledeleteCriteria = pdsvaspasmblruledelete.ttblvaspasmblruledelete.NewttblvaspasmblruledeleteRow();
         Vaspasmblruledelete.UpdateRowFromVaspasmblruledelete(ref ttblvaspasmblruledeleteCriteria, vaspasmblruledelete);
         pdsvaspasmblruledelete.ttblvaspasmblruledelete.AddttblvaspasmblruledeleteRow((pdsvaspasmblruledeleteDataSet.ttblvaspasmblruledeleteRow)ttblvaspasmblruledeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPAssemblyRuleDelete - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyRuleDelete(ref pdsContext,  pdsvaspasmblruledelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyRuleDelete - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblruledelete);
      }

      public Vaspasmblrule VASPAssemblyRuleRetrieve(string vaprod, string vawhse, int vaverno, int segment, int sequence)
      {   
         var result = new Vaspasmblrule();
         
         var pdsvaspasmblrule = new pdsvaspasmblruleDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPAssemblyRuleRetrieve - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyRuleRetrieve(ref pdsContext,  vaprod,  vawhse,  vaverno,  segment,  sequence, out pdsvaspasmblrule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyRuleRetrieve - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblrule); 
    
         if (pdsvaspasmblrule.ttblvaspasmblrule.Count > 0) 
         { 
             result = Vaspasmblrule.BuildVaspasmblruleFromRow(pdsvaspasmblrule.ttblvaspasmblrule[0]);
         } 
              
          
         return result;
          
      }

      public void VASPAssemblyRuleUpdate(Vaspasmblrule vaspasmblrule)
      {   
         
         var pdsvaspasmblrule = new pdsvaspasmblruleDataSet();
            
         DataRow ttblvaspasmblruleCriteria = pdsvaspasmblrule.ttblvaspasmblrule.NewttblvaspasmblruleRow();
         Vaspasmblrule.UpdateRowFromVaspasmblrule(ref ttblvaspasmblruleCriteria, vaspasmblrule);
         pdsvaspasmblrule.ttblvaspasmblrule.AddttblvaspasmblruleRow((pdsvaspasmblruleDataSet.ttblvaspasmblruleRow)ttblvaspasmblruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPAssemblyRuleUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyRuleUpdate(ref pdsContext,  pdsvaspasmblrule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyRuleUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblrule);
      }

      public Vaspasmblvalidate VASPAssemblyValRetrieve(AsvasetupVASPAssemblyValRetrieveRequestAPI AsvasetupVASPAssemblyValRetrieveRequestAPI)
      {   
         var result = new Vaspasmblvalidate();
         
         var pdsvaspasmblvalidate = new pdsvaspasmblvalidateDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  vaprod = AsvasetupVASPAssemblyValRetrieveRequestAPI.vaprod;
            
         var  vawhse = AsvasetupVASPAssemblyValRetrieveRequestAPI.vawhse;
            
         var  vaverno = AsvasetupVASPAssemblyValRetrieveRequestAPI.vaverno;
            
         var  segment = AsvasetupVASPAssemblyValRetrieveRequestAPI.segment;
            
         
         NLogLoggerP.Trace("VASPAssemblyValRetrieve - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyValRetrieve(ref pdsContext,  vaprod,  vawhse,  vaverno,  segment, out pdsvaspasmblvalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyValRetrieve - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblvalidate); 
    
         if (pdsvaspasmblvalidate.ttblvaspasmblvalidate.Count > 0) 
         { 
             result = Vaspasmblvalidate.BuildVaspasmblvalidateFromRow(pdsvaspasmblvalidate.ttblvaspasmblvalidate[0]);
         } 
              
          
         return result;
          
      }

      public void VASPAssemblyValUpdate(Vaspasmblvalidate vaspasmblvalidate)
      {   
         
         var pdsvaspasmblvalidate = new pdsvaspasmblvalidateDataSet();
            
         DataRow ttblvaspasmblvalidateCriteria = pdsvaspasmblvalidate.ttblvaspasmblvalidate.NewttblvaspasmblvalidateRow();
         Vaspasmblvalidate.UpdateRowFromVaspasmblvalidate(ref ttblvaspasmblvalidateCriteria, vaspasmblvalidate);
         pdsvaspasmblvalidate.ttblvaspasmblvalidate.AddttblvaspasmblvalidateRow((pdsvaspasmblvalidateDataSet.ttblvaspasmblvalidateRow)ttblvaspasmblvalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPAssemblyValUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPAssemblyValUpdate(ref pdsContext,  pdsvaspasmblvalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPAssemblyValUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspasmblvalidate);
      }

      public Vaspheaderaddcriteria VASPHeaderAdd(Vaspheaderaddcriteria vaspheaderaddcriteria)
      {   
         var result = new Vaspheaderaddcriteria();
         
         var pdsvaspheaderadd = new pdsvaspheaderaddDataSet();
            
         DataRow ttblvaspheaderaddcriteriaCriteria = pdsvaspheaderadd.ttblvaspheaderaddcriteria.NewttblvaspheaderaddcriteriaRow();
         Vaspheaderaddcriteria.UpdateRowFromVaspheaderaddcriteria(ref ttblvaspheaderaddcriteriaCriteria, vaspheaderaddcriteria);
         pdsvaspheaderadd.ttblvaspheaderaddcriteria.AddttblvaspheaderaddcriteriaRow((pdsvaspheaderaddDataSet.ttblvaspheaderaddcriteriaRow)ttblvaspheaderaddcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderAdd - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderAdd(ref pdsContext, ref pdsvaspheaderadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderAdd - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderadd); 
    
         if (pdsvaspheaderadd.ttblvaspheaderaddcriteria.Count > 0) 
         { 
             result = Vaspheaderaddcriteria.BuildVaspheaderaddcriteriaFromRow(pdsvaspheaderadd.ttblvaspheaderaddcriteria[0]);
         } 
              
          
         return result;
          
      }

      public Vaspheaderchangeupdate VASPHeaderChangeUpdate(Vaspheaderchangeupdate vaspheaderchangeupdate)
      {   
         var result = new Vaspheaderchangeupdate();
         
         var pdsvaspheaderchangeupdate = new pdsvaspheaderchangeupdateDataSet();
            
         DataRow ttblvaspheaderchangeupdateCriteria = pdsvaspheaderchangeupdate.ttblvaspheaderchangeupdate.NewttblvaspheaderchangeupdateRow();
         Vaspheaderchangeupdate.UpdateRowFromVaspheaderchangeupdate(ref ttblvaspheaderchangeupdateCriteria, vaspheaderchangeupdate);
         pdsvaspheaderchangeupdate.ttblvaspheaderchangeupdate.AddttblvaspheaderchangeupdateRow((pdsvaspheaderchangeupdateDataSet.ttblvaspheaderchangeupdateRow)ttblvaspheaderchangeupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderChangeUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderChangeUpdate(ref pdsContext, ref pdsvaspheaderchangeupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderChangeUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderchangeupdate); 
    
         if (pdsvaspheaderchangeupdate.ttblvaspheaderchangeupdate.Count > 0) 
         { 
             result = Vaspheaderchangeupdate.BuildVaspheaderchangeupdateFromRow(pdsvaspheaderchangeupdate.ttblvaspheaderchangeupdate[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Vaheaderallcomponent> VASPHeaderCompLoad(Vaspheadercompload vaspheadercompload)
      {   
         var results = new List<Vaheaderallcomponent>();
         
         var pdsvaspheadercompload = new pdsvaspheadercomploadDataSet();
            
         var pdsvaheaderallcomponent = new pdsvaheaderallcomponentDataSet();
            
         DataRow ttblvaspheadercomploadCriteria = pdsvaspheadercompload.ttblvaspheadercompload.NewttblvaspheadercomploadRow();
         Vaspheadercompload.UpdateRowFromVaspheadercompload(ref ttblvaspheadercomploadCriteria, vaspheadercompload);
         pdsvaspheadercompload.ttblvaspheadercompload.AddttblvaspheadercomploadRow((pdsvaspheadercomploadDataSet.ttblvaspheadercomploadRow)ttblvaspheadercomploadCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderCompLoad - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderCompLoad(ref pdsContext,  pdsvaspheadercompload, out pdsvaheaderallcomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderCompLoad - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheadercompload); 
    
            foreach (DataRow row in pdsvaheaderallcomponent.ttblvaheaderallcomponent)
            {
                results.Add(Vaheaderallcomponent.BuildVaheaderallcomponentFromRow(row));
            }
            return results;
        
      }

      public void VASPHeaderDelete(Vaspheaderdelete vaspheaderdelete)
      {   
         
         var pdsvaspheaderdelete = new pdsvaspheaderdeleteDataSet();
            
         DataRow ttblvaspheaderdeleteCriteria = pdsvaspheaderdelete.ttblvaspheaderdelete.NewttblvaspheaderdeleteRow();
         Vaspheaderdelete.UpdateRowFromVaspheaderdelete(ref ttblvaspheaderdeleteCriteria, vaspheaderdelete);
         pdsvaspheaderdelete.ttblvaspheaderdelete.AddttblvaspheaderdeleteRow((pdsvaspheaderdeleteDataSet.ttblvaspheaderdeleteRow)ttblvaspheaderdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderDelete - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderDelete(ref pdsContext,  pdsvaspheaderdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderDelete - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderdelete);
      }

      public Vaspheaderfindresults VASPHeaderFind(Vaspheaderfindcriteria vaspheaderfindcriteria)
      {   
         var result = new Vaspheaderfindresults();
         
         var pdsvaspheaderfind = new pdsvaspheaderfindDataSet();
            
         DataRow ttblvaspheaderfindcriteriaCriteria = pdsvaspheaderfind.ttblvaspheaderfindcriteria.NewttblvaspheaderfindcriteriaRow();
         Vaspheaderfindcriteria.UpdateRowFromVaspheaderfindcriteria(ref ttblvaspheaderfindcriteriaCriteria, vaspheaderfindcriteria);
         pdsvaspheaderfind.ttblvaspheaderfindcriteria.AddttblvaspheaderfindcriteriaRow((pdsvaspheaderfindDataSet.ttblvaspheaderfindcriteriaRow)ttblvaspheaderfindcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderFind - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderFind(ref pdsContext, ref pdsvaspheaderfind, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderFind - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderfind); 
    
         if (pdsvaspheaderfind.ttblvaspheaderfindresults.Count > 0) 
         { 
             result = Vaspheaderfindresults.BuildVaspheaderfindresultsFromRow(pdsvaspheaderfind.ttblvaspheaderfindresults[0]);
         } 
              
          
         return result;
          
      }

      public AsvasetupVASPHeaderListResponseAPI VASPHeaderList(Vaspheaderlistcriteria vaspheaderlistcriteria)
      {   
         var result = new AsvasetupVASPHeaderListResponseAPI();
         
         var pdsvaspheaderlist = new pdsvaspheaderlistDataSet();
            
         DataRow ttblvaspheaderlistcriteriaCriteria = pdsvaspheaderlist.ttblvaspheaderlistcriteria.NewttblvaspheaderlistcriteriaRow();
         Vaspheaderlistcriteria.UpdateRowFromVaspheaderlistcriteria(ref ttblvaspheaderlistcriteriaCriteria, vaspheaderlistcriteria);
         pdsvaspheaderlist.ttblvaspheaderlistcriteria.AddttblvaspheaderlistcriteriaRow((pdsvaspheaderlistDataSet.ttblvaspheaderlistcriteriaRow)ttblvaspheaderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VASPHeaderList - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderList(ref pdsContext, ref pdsvaspheaderlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VASPHeaderList - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderlist); 
    
         foreach (DataRow row in pdsvaspheaderlist.ttblvaspheaderlistresults)
         {
            result.vaspheaderlistresults.Add(Vaspheaderlistresults.BuildVaspheaderlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public void VASPHeaderValidate(Vaspheaderdelete vaspheaderdelete)
      {   
         
         var pdsvaspheaderdelete = new pdsvaspheaderdeleteDataSet();
            
         DataRow ttblvaspheaderdeleteCriteria = pdsvaspheaderdelete.ttblvaspheaderdelete.NewttblvaspheaderdeleteRow();
         Vaspheaderdelete.UpdateRowFromVaspheaderdelete(ref ttblvaspheaderdeleteCriteria, vaspheaderdelete);
         pdsvaspheaderdelete.ttblvaspheaderdelete.AddttblvaspheaderdeleteRow((pdsvaspheaderdeleteDataSet.ttblvaspheaderdeleteRow)ttblvaspheaderdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPHeaderValidate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderValidate(ref pdsContext,  pdsvaspheaderdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPHeaderValidate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderdelete);
      }

      public int VASPCreateNewVersion(AsvasetupVASPCreateNewVersionRequestAPI AsvasetupVASPCreateNewVersionRequestAPI)
      {   
          
         int pvNewverno = 0;
         string cErrorMessage = string.Empty;
   
         var  pvProd = AsvasetupVASPCreateNewVersionRequestAPI.pvProd;
            
         var  pvWhse = AsvasetupVASPCreateNewVersionRequestAPI.pvWhse;
            
         var  pvOldverno = AsvasetupVASPCreateNewVersionRequestAPI.pvOldverno;
            
         
         NLogLoggerP.Trace("VASPCreateNewVersion - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPCreateNewVersion(ref pdsContext,  pvProd,  pvWhse,  pvOldverno, out pvNewverno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPCreateNewVersion - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvNewverno;
      
      }

      public AsvasetupVASPHeaderLookupResponseAPI VASPHeaderLookup(Vaspheaderlistcriteria vaspheaderlistcriteria)
      {   
         var result = new AsvasetupVASPHeaderLookupResponseAPI();
         
         var pdsvaspheaderlist = new pdsvaspheaderlistDataSet();
            
         DataRow ttblvaspheaderlistcriteriaCriteria = pdsvaspheaderlist.ttblvaspheaderlistcriteria.NewttblvaspheaderlistcriteriaRow();
         Vaspheaderlistcriteria.UpdateRowFromVaspheaderlistcriteria(ref ttblvaspheaderlistcriteriaCriteria, vaspheaderlistcriteria);
         pdsvaspheaderlist.ttblvaspheaderlistcriteria.AddttblvaspheaderlistcriteriaRow((pdsvaspheaderlistDataSet.ttblvaspheaderlistcriteriaRow)ttblvaspheaderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VASPHeaderLookup - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPHeaderLookup(ref pdsContext, ref pdsvaspheaderlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VASPHeaderLookup - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspheaderlist); 
    
         foreach (DataRow row in pdsvaspheaderlist.ttblvaspheaderlistresults)
         {
            result.vaspheaderlistresults.Add(Vaspheaderlistresults.BuildVaspheaderlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Vasplineadd VASPLineAddInit(AsvasetupVASPLineAddInitRequestAPI AsvasetupVASPLineAddInitRequestAPI)
      {   
         var result = new Vasplineadd();
         
         var pdsvasplineadd = new pdsvasplineaddDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  vaprod = AsvasetupVASPLineAddInitRequestAPI.vaprod;
            
         var  vawhse = AsvasetupVASPLineAddInitRequestAPI.vawhse;
            
         var  vaverno = AsvasetupVASPLineAddInitRequestAPI.vaverno;
            
         var  seqno = AsvasetupVASPLineAddInitRequestAPI.seqno;
            
         
         NLogLoggerP.Trace("VASPLineAddInit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineAddInit(ref pdsContext,  vaprod,  vawhse,  vaverno,  seqno, out pdsvasplineadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineAddInit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplineadd); 
    
         if (pdsvasplineadd.ttblvasplineadd.Count > 0) 
         { 
             result = Vasplineadd.BuildVasplineaddFromRow(pdsvasplineadd.ttblvasplineadd[0]);
         } 
              
          
         return result;
          
      }

      public AsvasetupVASPLineAddLeaveFieldResponseAPI VASPLineAddLeaveField(AsvasetupVASPLineAddLeaveFieldRequestAPI AsvasetupVASPLineAddLeaveFieldRequestAPI)
      {   
         var result = new AsvasetupVASPLineAddLeaveFieldResponseAPI();
         
         var pdsvasplineadd = new pdsvasplineaddDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblvasplineaddRow = pdsvasplineadd.ttblvasplineadd.NewttblvasplineaddRow();
         Vasplineadd.UpdateRowFromVasplineadd(ref ttblvasplineaddRow, AsvasetupVASPLineAddLeaveFieldRequestAPI.vasplineadd);
         pdsvasplineadd.ttblvasplineadd.AddttblvasplineaddRow((pdsvasplineaddDataSet.ttblvasplineaddRow)ttblvasplineaddRow);
          
         var  cFieldName = AsvasetupVASPLineAddLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("VASPLineAddLeaveField - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineAddLeaveField(ref pdsContext,  cFieldName, ref pdsvasplineadd, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineAddLeaveField - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplineadd); 
    
         if (pdsvasplineadd.ttblvasplineadd.Count > 0)
         {
            result.vasplineadd = Vasplineadd.BuildVasplineaddFromRow(pdsvasplineadd.ttblvasplineadd[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsvasetupVASPLineAddLineResponseAPI VASPLineAddLine(Vasplineadd vasplineadd)
      {   
         var result = new AsvasetupVASPLineAddLineResponseAPI();
         
         var pdsvasplineadd = new pdsvasplineaddDataSet();
            
         var pdsvasplinelist = new pdsvasplinelistDataSet();
            
         DataRow ttblvasplineaddCriteria = pdsvasplineadd.ttblvasplineadd.NewttblvasplineaddRow();
         Vasplineadd.UpdateRowFromVasplineadd(ref ttblvasplineaddCriteria, vasplineadd);
         pdsvasplineadd.ttblvasplineadd.AddttblvasplineaddRow((pdsvasplineaddDataSet.ttblvasplineaddRow)ttblvasplineaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineAddLine - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineAddLine(ref pdsContext, ref pdsvasplineadd, out pdsvasplinelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineAddLine - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplineadd); 
    
         if (pdsvasplineadd.ttblvasplineadd.Count > 0)
         {
            result.vasplineadd = Vasplineadd.BuildVasplineaddFromRow(pdsvasplineadd.ttblvasplineadd[0]);
         }
                    
         foreach (DataRow row in pdsvasplinelist.ttblvasplinelistresults)
         {
            result.vasplinelistresults.Add(Vasplinelistresults.BuildVasplinelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void VASPLineChange(Vasplinechange vasplinechange)
      {   
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineChange - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineChange(ref pdsContext,  pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineChange - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange);
      }

      public Vasplinechange VASPLineChangeInit(string vaprod, string vawhse, int vaverno, int seqno, int lineno)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineChangeInit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineChangeInit(ref pdsContext,  vaprod,  vawhse,  vaverno,  seqno,  lineno, out pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineChangeInit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public void VASPLineDelete(Vasplinedelete vasplinedelete)
      {   
         
         var pdsvasplinedelete = new pdsvasplinedeleteDataSet();
            
         DataRow ttblvasplinedeleteCriteria = pdsvasplinedelete.ttblvasplinedelete.NewttblvasplinedeleteRow();
         Vasplinedelete.UpdateRowFromVasplinedelete(ref ttblvasplinedeleteCriteria, vasplinedelete);
         pdsvasplinedelete.ttblvasplinedelete.AddttblvasplinedeleteRow((pdsvasplinedeleteDataSet.ttblvasplinedeleteRow)ttblvasplinedeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineDelete - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineDelete(ref pdsContext,  pdsvasplinedelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineDelete - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinedelete);
      }

      public Vasplinechange VASPLineLaborChgProd(Vasplinechange vasplinechange)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineLaborChgProd - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineLaborChgProd(ref pdsContext, ref pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineLaborChgProd - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public void VASPLineExtendUpdate(Vasplinechange vasplinechange)
      {   
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineExtendUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineExtendUpdate(ref pdsContext,  pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineExtendUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange);
      }

      public Vasplinechange VASPLineEXLaborUpdate(Vasplinechange vasplinechange)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineEXLaborUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineEXLaborUpdate(ref pdsContext, ref pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineEXLaborUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public Vasplinechange VASPLineINLaborUpdate(Vasplinechange vasplinechange)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineINLaborUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineINLaborUpdate(ref pdsContext, ref pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineINLaborUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public Vasplinechange VASPLineLeaveFab(Vasplinechange vasplinechange)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineLeaveFab - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineLeaveFab(ref pdsContext, ref pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineLeaveFab - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public AsvasetupVASPLineLeaveProdResponseAPI VASPLineLeaveProd(Vasplinechange vasplinechange)
      {   
         var result = new AsvasetupVASPLineLeaveProdResponseAPI();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineLeaveProd - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineLeaveProd(ref pdsContext, ref pdsvasplinechange, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineLeaveProd - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0)
         {
            result.vasplinechange = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public Vasplinechange VASPLineLeaveUnit(Vasplinechange vasplinechange)
      {   
         var result = new Vasplinechange();
         
         var pdsvasplinechange = new pdsvasplinechangeDataSet();
            
         DataRow ttblvasplinechangeCriteria = pdsvasplinechange.ttblvasplinechange.NewttblvasplinechangeRow();
         Vasplinechange.UpdateRowFromVasplinechange(ref ttblvasplinechangeCriteria, vasplinechange);
         pdsvasplinechange.ttblvasplinechange.AddttblvasplinechangeRow((pdsvasplinechangeDataSet.ttblvasplinechangeRow)ttblvasplinechangeCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineLeaveUnit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineLeaveUnit(ref pdsContext, ref pdsvasplinechange, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineLeaveUnit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinechange); 
    
         if (pdsvasplinechange.ttblvasplinechange.Count > 0) 
         { 
             result = Vasplinechange.BuildVasplinechangeFromRow(pdsvasplinechange.ttblvasplinechange[0]);
         } 
              
          
         return result;
          
      }

      public AsvasetupVASPLineListResponseAPI VASPLineList(AsvasetupVASPLineListRequestAPI AsvasetupVASPLineListRequestAPI)
      {   
         var result = new AsvasetupVASPLineListResponseAPI();
         
         var pdsvasplinelist = new pdsvasplinelistDataSet();
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         var  vaprod = AsvasetupVASPLineListRequestAPI.vaprod;
            
         var  vawhse = AsvasetupVASPLineListRequestAPI.vawhse;
            
         var  vaverno = AsvasetupVASPLineListRequestAPI.vaverno;
            
         var  seqno = AsvasetupVASPLineListRequestAPI.seqno;
            
         
         NLogLoggerP.Trace("VASPLineList - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineList(ref pdsContext,  vaprod,  vawhse,  vaverno,  seqno, out pdsvasplinelist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VASPLineList - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinelist); 
    
         foreach (DataRow row in pdsvasplinelist.ttblvasplinelistresults)
         {
            result.vasplinelistresults.Add(Vasplinelistresults.BuildVasplinelistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Vasplinenonstock VASPLineNonstock(Vasplinenonstock vasplinenonstock)
      {   
         var result = new Vasplinenonstock();
         
         var pdsvasplinenonstock = new pdsvasplinenonstockDataSet();
            
         DataRow ttblvasplinenonstockCriteria = pdsvasplinenonstock.ttblvasplinenonstock.NewttblvasplinenonstockRow();
         Vasplinenonstock.UpdateRowFromVasplinenonstock(ref ttblvasplinenonstockCriteria, vasplinenonstock);
         pdsvasplinenonstock.ttblvasplinenonstock.AddttblvasplinenonstockRow((pdsvasplinenonstockDataSet.ttblvasplinenonstockRow)ttblvasplinenonstockCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineNonstock - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineNonstock(ref pdsContext, ref pdsvasplinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineNonstock - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinenonstock); 
    
         if (pdsvasplinenonstock.ttblvasplinenonstock.Count > 0) 
         { 
             result = Vasplinenonstock.BuildVasplinenonstockFromRow(pdsvasplinenonstock.ttblvasplinenonstock[0]);
         } 
              
          
         return result;
          
      }

      public Vasplinenonstock VASPLineNonstockVal(Vasplinenonstock vasplinenonstock)
      {   
         var result = new Vasplinenonstock();
         
         var pdsvasplinenonstock = new pdsvasplinenonstockDataSet();
            
         DataRow ttblvasplinenonstockCriteria = pdsvasplinenonstock.ttblvasplinenonstock.NewttblvasplinenonstockRow();
         Vasplinenonstock.UpdateRowFromVasplinenonstock(ref ttblvasplinenonstockCriteria, vasplinenonstock);
         pdsvasplinenonstock.ttblvasplinenonstock.AddttblvasplinenonstockRow((pdsvasplinenonstockDataSet.ttblvasplinenonstockRow)ttblvasplinenonstockCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPLineNonstockVal - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPLineNonstockVal(ref pdsContext, ref pdsvasplinenonstock, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPLineNonstockVal - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasplinenonstock); 
    
         if (pdsvasplinenonstock.ttblvasplinenonstock.Count > 0) 
         { 
             result = Vasplinenonstock.BuildVasplinenonstockFromRow(pdsvasplinenonstock.ttblvasplinenonstock[0]);
         } 
              
          
         return result;
          
      }

      public Vaspsectionaddsctn VASPSectionAddSctn(Vaspsectionaddsctn vaspsectionaddsctn)
      {   
         var result = new Vaspsectionaddsctn();
         
         var pdsvaspsectionaddsctn = new pdsvaspsectionaddsctnDataSet();
            
         DataRow ttblvaspsectionaddsctnCriteria = pdsvaspsectionaddsctn.ttblvaspsectionaddsctn.NewttblvaspsectionaddsctnRow();
         Vaspsectionaddsctn.UpdateRowFromVaspsectionaddsctn(ref ttblvaspsectionaddsctnCriteria, vaspsectionaddsctn);
         pdsvaspsectionaddsctn.ttblvaspsectionaddsctn.AddttblvaspsectionaddsctnRow((pdsvaspsectionaddsctnDataSet.ttblvaspsectionaddsctnRow)ttblvaspsectionaddsctnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionAddSctn - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionAddSctn(ref pdsContext, ref pdsvaspsectionaddsctn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionAddSctn - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionaddsctn); 
    
         if (pdsvaspsectionaddsctn.ttblvaspsectionaddsctn.Count > 0) 
         { 
             result = Vaspsectionaddsctn.BuildVaspsectionaddsctnFromRow(pdsvaspsectionaddsctn.ttblvaspsectionaddsctn[0]);
         } 
              
          
         return result;
          
      }

      public Vaspsectionautocrt VASPSectionAutoCreate(Vaspsectionautocrt vaspsectionautocrt)
      {   
         var result = new Vaspsectionautocrt();
         
         var pdsvaspsectionautocrt = new pdsvaspsectionautocrtDataSet();
            
         DataRow ttblvaspsectionautocrtCriteria = pdsvaspsectionautocrt.ttblvaspsectionautocrt.NewttblvaspsectionautocrtRow();
         Vaspsectionautocrt.UpdateRowFromVaspsectionautocrt(ref ttblvaspsectionautocrtCriteria, vaspsectionautocrt);
         pdsvaspsectionautocrt.ttblvaspsectionautocrt.AddttblvaspsectionautocrtRow((pdsvaspsectionautocrtDataSet.ttblvaspsectionautocrtRow)ttblvaspsectionautocrtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionAutoCreate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionAutoCreate(ref pdsContext, ref pdsvaspsectionautocrt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionAutoCreate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionautocrt); 
    
         if (pdsvaspsectionautocrt.ttblvaspsectionautocrt.Count > 0) 
         { 
             result = Vaspsectionautocrt.BuildVaspsectionautocrtFromRow(pdsvaspsectionautocrt.ttblvaspsectionautocrt[0]);
         } 
              
          
         return result;
          
      }

      public void VASPSectionDelete(Vaspsectiondelete vaspsectiondelete)
      {   
         
         var pdsvaspsectiondelete = new pdsvaspsectiondeleteDataSet();
            
         DataRow ttblvaspsectiondeleteCriteria = pdsvaspsectiondelete.ttblvaspsectiondelete.NewttblvaspsectiondeleteRow();
         Vaspsectiondelete.UpdateRowFromVaspsectiondelete(ref ttblvaspsectiondeleteCriteria, vaspsectiondelete);
         pdsvaspsectiondelete.ttblvaspsectiondelete.AddttblvaspsectiondeleteRow((pdsvaspsectiondeleteDataSet.ttblvaspsectiondeleteRow)ttblvaspsectiondeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionDelete - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionDelete(ref pdsContext,  pdsvaspsectiondelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionDelete - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectiondelete);
      }

      public Vaspsectionextendex VASPSectionExtendEXChange(Vaspsectionextendex vaspsectionextendex)
      {   
         var result = new Vaspsectionextendex();
         
         var pdsvaspsectionextendex = new pdsvaspsectionextendexDataSet();
            
         DataRow ttblvaspsectionextendexCriteria = pdsvaspsectionextendex.ttblvaspsectionextendex.NewttblvaspsectionextendexRow();
         Vaspsectionextendex.UpdateRowFromVaspsectionextendex(ref ttblvaspsectionextendexCriteria, vaspsectionextendex);
         pdsvaspsectionextendex.ttblvaspsectionextendex.AddttblvaspsectionextendexRow((pdsvaspsectionextendexDataSet.ttblvaspsectionextendexRow)ttblvaspsectionextendexCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendEXChange - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendEXChange(ref pdsContext, ref pdsvaspsectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendEXChange - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendex); 
    
         if (pdsvaspsectionextendex.ttblvaspsectionextendex.Count > 0) 
         { 
             result = Vaspsectionextendex.BuildVaspsectionextendexFromRow(pdsvaspsectionextendex.ttblvaspsectionextendex[0]);
         } 
              
          
         return result;
          
      }

      public Vaspsectionextendex VASPSectionExtendEXInit(Vaspsectionextendex vaspsectionextendex)
      {   
         var result = new Vaspsectionextendex();
         
         var pdsvaspsectionextendex = new pdsvaspsectionextendexDataSet();
            
         DataRow ttblvaspsectionextendexCriteria = pdsvaspsectionextendex.ttblvaspsectionextendex.NewttblvaspsectionextendexRow();
         Vaspsectionextendex.UpdateRowFromVaspsectionextendex(ref ttblvaspsectionextendexCriteria, vaspsectionextendex);
         pdsvaspsectionextendex.ttblvaspsectionextendex.AddttblvaspsectionextendexRow((pdsvaspsectionextendexDataSet.ttblvaspsectionextendexRow)ttblvaspsectionextendexCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendEXInit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendEXInit(ref pdsContext, ref pdsvaspsectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendEXInit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendex); 
    
         if (pdsvaspsectionextendex.ttblvaspsectionextendex.Count > 0) 
         { 
             result = Vaspsectionextendex.BuildVaspsectionextendexFromRow(pdsvaspsectionextendex.ttblvaspsectionextendex[0]);
         } 
              
          
         return result;
          
      }

      public void VASPSectionExtendEXUpdate(Vaspsectionextendex vaspsectionextendex)
      {   
         
         var pdsvaspsectionextendex = new pdsvaspsectionextendexDataSet();
            
         DataRow ttblvaspsectionextendexCriteria = pdsvaspsectionextendex.ttblvaspsectionextendex.NewttblvaspsectionextendexRow();
         Vaspsectionextendex.UpdateRowFromVaspsectionextendex(ref ttblvaspsectionextendexCriteria, vaspsectionextendex);
         pdsvaspsectionextendex.ttblvaspsectionextendex.AddttblvaspsectionextendexRow((pdsvaspsectionextendexDataSet.ttblvaspsectionextendexRow)ttblvaspsectionextendexCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendEXUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendEXUpdate(ref pdsContext, ref pdsvaspsectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendEXUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendex);
      }

      public Vaspsectionextendin VASPSectionExtendINChg(Vaspsectionextendin vaspsectionextendin)
      {   
         var result = new Vaspsectionextendin();
         
         var pdsvaspsectionextendin = new pdsvaspsectionextendinDataSet();
            
         DataRow ttblvaspsectionextendinCriteria = pdsvaspsectionextendin.ttblvaspsectionextendin.NewttblvaspsectionextendinRow();
         Vaspsectionextendin.UpdateRowFromVaspsectionextendin(ref ttblvaspsectionextendinCriteria, vaspsectionextendin);
         pdsvaspsectionextendin.ttblvaspsectionextendin.AddttblvaspsectionextendinRow((pdsvaspsectionextendinDataSet.ttblvaspsectionextendinRow)ttblvaspsectionextendinCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendINChg - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendINChg(ref pdsContext, ref pdsvaspsectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendINChg - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendin); 
    
         if (pdsvaspsectionextendin.ttblvaspsectionextendin.Count > 0) 
         { 
             result = Vaspsectionextendin.BuildVaspsectionextendinFromRow(pdsvaspsectionextendin.ttblvaspsectionextendin[0]);
         } 
              
          
         return result;
          
      }

      public Vaspsectionextendin VASPSectionExtendINInit(Vaspsectionextendin vaspsectionextendin)
      {   
         var result = new Vaspsectionextendin();
         
         var pdsvaspsectionextendin = new pdsvaspsectionextendinDataSet();
            
         DataRow ttblvaspsectionextendinCriteria = pdsvaspsectionextendin.ttblvaspsectionextendin.NewttblvaspsectionextendinRow();
         Vaspsectionextendin.UpdateRowFromVaspsectionextendin(ref ttblvaspsectionextendinCriteria, vaspsectionextendin);
         pdsvaspsectionextendin.ttblvaspsectionextendin.AddttblvaspsectionextendinRow((pdsvaspsectionextendinDataSet.ttblvaspsectionextendinRow)ttblvaspsectionextendinCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendINInit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendINInit(ref pdsContext, ref pdsvaspsectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendINInit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendin); 
    
         if (pdsvaspsectionextendin.ttblvaspsectionextendin.Count > 0) 
         { 
             result = Vaspsectionextendin.BuildVaspsectionextendinFromRow(pdsvaspsectionextendin.ttblvaspsectionextendin[0]);
         } 
              
          
         return result;
          
      }

      public void VASPSectionExtendINUpdate(Vaspsectionextendin vaspsectionextendin)
      {   
         
         var pdsvaspsectionextendin = new pdsvaspsectionextendinDataSet();
            
         DataRow ttblvaspsectionextendinCriteria = pdsvaspsectionextendin.ttblvaspsectionextendin.NewttblvaspsectionextendinRow();
         Vaspsectionextendin.UpdateRowFromVaspsectionextendin(ref ttblvaspsectionextendinCriteria, vaspsectionextendin);
         pdsvaspsectionextendin.ttblvaspsectionextendin.AddttblvaspsectionextendinRow((pdsvaspsectionextendinDataSet.ttblvaspsectionextendinRow)ttblvaspsectionextendinCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionExtendINUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionExtendINUpdate(ref pdsContext,  pdsvaspsectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionExtendINUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionextendin);
      }

      public AsvasetupVASPSectionListResponseAPI VASPSectionList(Vaspsectionlistcriteria vaspsectionlistcriteria)
      {   
         var result = new AsvasetupVASPSectionListResponseAPI();
         
         var pdsvaspsectionlist = new pdsvaspsectionlistDataSet();
            
         DataRow ttblvaspsectionlistcriteriaCriteria = pdsvaspsectionlist.ttblvaspsectionlistcriteria.NewttblvaspsectionlistcriteriaRow();
         Vaspsectionlistcriteria.UpdateRowFromVaspsectionlistcriteria(ref ttblvaspsectionlistcriteriaCriteria, vaspsectionlistcriteria);
         pdsvaspsectionlist.ttblvaspsectionlistcriteria.AddttblvaspsectionlistcriteriaRow((pdsvaspsectionlistDataSet.ttblvaspsectionlistcriteriaRow)ttblvaspsectionlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VASPSectionList - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionList(ref pdsContext, ref pdsvaspsectionlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VASPSectionList - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionlist); 
    
         foreach (DataRow row in pdsvaspsectionlist.ttblvaspsectionlistresults)
         {
            result.vaspsectionlistresults.Add(Vaspsectionlistresults.BuildVaspsectionlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Vaspsectionnextsctn VASPSectionNextSctn(Vaspsectionnextsctn vaspsectionnextsctn)
      {   
         var result = new Vaspsectionnextsctn();
         
         var pdsvaspsectionnextsctn = new pdsvaspsectionnextsctnDataSet();
            
         DataRow ttblvaspsectionnextsctnCriteria = pdsvaspsectionnextsctn.ttblvaspsectionnextsctn.NewttblvaspsectionnextsctnRow();
         Vaspsectionnextsctn.UpdateRowFromVaspsectionnextsctn(ref ttblvaspsectionnextsctnCriteria, vaspsectionnextsctn);
         pdsvaspsectionnextsctn.ttblvaspsectionnextsctn.AddttblvaspsectionnextsctnRow((pdsvaspsectionnextsctnDataSet.ttblvaspsectionnextsctnRow)ttblvaspsectionnextsctnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionNextSctn - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionNextSctn(ref pdsContext, ref pdsvaspsectionnextsctn, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionNextSctn - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionnextsctn); 
    
         if (pdsvaspsectionnextsctn.ttblvaspsectionnextsctn.Count > 0) 
         { 
             result = Vaspsectionnextsctn.BuildVaspsectionnextsctnFromRow(pdsvaspsectionnextsctn.ttblvaspsectionnextsctn[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> VASPSectionRowUpdate(Vaspsectionrowupdate vaspsectionrowupdate)
      {   
         var results = new List<Messaging>();
         
         var pdsvaspsectionrowupdate = new pdsvaspsectionrowupdateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaspsectionrowupdateCriteria = pdsvaspsectionrowupdate.ttblvaspsectionrowupdate.NewttblvaspsectionrowupdateRow();
         Vaspsectionrowupdate.UpdateRowFromVaspsectionrowupdate(ref ttblvaspsectionrowupdateCriteria, vaspsectionrowupdate);
         pdsvaspsectionrowupdate.ttblvaspsectionrowupdate.AddttblvaspsectionrowupdateRow((pdsvaspsectionrowupdateDataSet.ttblvaspsectionrowupdateRow)ttblvaspsectionrowupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionRowUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionRowUpdate(ref pdsContext,  pdsvaspsectionrowupdate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionRowUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionrowupdate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Vaspsectionspecresults VASPSectionSpecificationInit(Vaspsectionspeccriteria vaspsectionspeccriteria)
      {   
         var result = new Vaspsectionspecresults();
         
         var pdsvaspsectionspecinit = new pdsvaspsectionspecinitDataSet();
            
         DataRow ttblvaspsectionspeccriteriaCriteria = pdsvaspsectionspecinit.ttblvaspsectionspeccriteria.NewttblvaspsectionspeccriteriaRow();
         Vaspsectionspeccriteria.UpdateRowFromVaspsectionspeccriteria(ref ttblvaspsectionspeccriteriaCriteria, vaspsectionspeccriteria);
         pdsvaspsectionspecinit.ttblvaspsectionspeccriteria.AddttblvaspsectionspeccriteriaRow((pdsvaspsectionspecinitDataSet.ttblvaspsectionspeccriteriaRow)ttblvaspsectionspeccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionSpecificationInit - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionSpecificationInit(ref pdsContext, ref pdsvaspsectionspecinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionSpecificationInit - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionspecinit); 
    
         if (pdsvaspsectionspecinit.ttblvaspsectionspecresults.Count > 0) 
         { 
             result = Vaspsectionspecresults.BuildVaspsectionspecresultsFromRow(pdsvaspsectionspecinit.ttblvaspsectionspecresults[0]);
         } 
              
          
         return result;
          
      }

      public void VASPSectionSpecificationUpdate(Vaspsectionspecupdate vaspsectionspecupdate)
      {   
         
         var pdsvaspsectionspecupdate = new pdsvaspsectionspecupdateDataSet();
            
         DataRow ttblvaspsectionspecupdateCriteria = pdsvaspsectionspecupdate.ttblvaspsectionspecupdate.NewttblvaspsectionspecupdateRow();
         Vaspsectionspecupdate.UpdateRowFromVaspsectionspecupdate(ref ttblvaspsectionspecupdateCriteria, vaspsectionspecupdate);
         pdsvaspsectionspecupdate.ttblvaspsectionspecupdate.AddttblvaspsectionspecupdateRow((pdsvaspsectionspecupdateDataSet.ttblvaspsectionspecupdateRow)ttblvaspsectionspecupdateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASPSectionSpecificationUpdate - Asvasetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasetupproxy = this.proxyAppObject.CreatePO_asvasetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasetupproxy.VASPSectionSpecificationUpdate(ref pdsContext,  pdsvaspsectionspecupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASPSectionSpecificationUpdate - Asvasetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaspsectionspecupdate);
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  