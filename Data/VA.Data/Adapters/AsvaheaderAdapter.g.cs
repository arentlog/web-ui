//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsvaordercfg;
   using Models.Pdsvaorderdelete;
   using Models.Pdsmessaging;
   using Models.Pdstiecreatetiett;
   using Models.Pdsvaheaderaddchg;
   using Models.Pdsvaheaderlist;
   using Models.Pdsvaheadersettings;
   using Models.Pdsvanonstockvalidate;
   using Models.Pdsvaheadercopy;
   using Models.Pdsvaheaderprint;
   using Models.Pdsvaheaderextrafields;
   using Models.Pdsvaheaderallcomponent;
   using Models.Complex;

   public partial class AsvaheaderAdapter : AdapterBase<pdsContextDataSet>
   {
      private VAProxyAppObject proxyAppObject;
      
      public AsvaheaderAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsvaheaderAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsvaheaderVAOrderCfgExecFuncResponseAPI VAOrderCfgExecFunc(Vaordercfg vaordercfg)
      {   
         var result = new AsvaheaderVAOrderCfgExecFuncResponseAPI();
         
         var pdsvaordercfg = new pdsvaordercfgDataSet();
            
         DataRow ttblvaordercfgCriteria = pdsvaordercfg.ttblvaordercfg.NewttblvaordercfgRow();
         Vaordercfg.UpdateRowFromVaordercfg(ref ttblvaordercfgCriteria, vaordercfg);
         pdsvaordercfg.ttblvaordercfg.AddttblvaordercfgRow((pdsvaordercfgDataSet.ttblvaordercfgRow)ttblvaordercfgCriteria);
            
         bool lCfgSuccessFl = false;
         string cWarnMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAOrderCfgExecFunc - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAOrderCfgExecFunc(ref pdsContext,  pdsvaordercfg, out lCfgSuccessFl, out cWarnMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAOrderCfgExecFunc - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaordercfg); 
    
         result.lCfgSuccessFl = lCfgSuccessFl;
         result.cWarnMessage = cWarnMessage;
          
         return result;
          
      }

      public bool VAOrderCfgFinish(Vaordercfg vaordercfg)
      {   
          
         var pdsvaordercfg = new pdsvaordercfgDataSet();
            
         DataRow ttblvaordercfgCriteria = pdsvaordercfg.ttblvaordercfg.NewttblvaordercfgRow();
         Vaordercfg.UpdateRowFromVaordercfg(ref ttblvaordercfgCriteria, vaordercfg);
         pdsvaordercfg.ttblvaordercfg.AddttblvaordercfgRow((pdsvaordercfgDataSet.ttblvaordercfgRow)ttblvaordercfgCriteria);
            
         bool lCfgSuccessFl = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAOrderCfgFinish - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAOrderCfgFinish(ref pdsContext,  pdsvaordercfg, out lCfgSuccessFl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAOrderCfgFinish - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaordercfg); 
    
         return lCfgSuccessFl;
      
      }

      public string VAOrderCfgLaunch(Vaordercfg vaordercfg)
      {   
          
         var pdsvaordercfg = new pdsvaordercfgDataSet();
            
         DataRow ttblvaordercfgCriteria = pdsvaordercfg.ttblvaordercfg.NewttblvaordercfgRow();
         Vaordercfg.UpdateRowFromVaordercfg(ref ttblvaordercfgCriteria, vaordercfg);
         pdsvaordercfg.ttblvaordercfg.AddttblvaordercfgRow((pdsvaordercfgDataSet.ttblvaordercfgRow)ttblvaordercfgCriteria);
            
         string cCfgURL = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAOrderCfgLaunch - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAOrderCfgLaunch(ref pdsContext,  pdsvaordercfg, out cCfgURL, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAOrderCfgLaunch - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaordercfg); 
    
         return cCfgURL;
      
      }

      public IEnumerable<Messaging> VADeleteOrder(Vaorderdelete vaorderdelete)
      {   
         var results = new List<Messaging>();
         
         var pdsvaorderdelete = new pdsvaorderdeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaorderdeleteCriteria = pdsvaorderdelete.ttblvaorderdelete.NewttblvaorderdeleteRow();
         Vaorderdelete.UpdateRowFromVaorderdelete(ref ttblvaorderdeleteCriteria, vaorderdelete);
         pdsvaorderdelete.ttblvaorderdelete.AddttblvaorderdeleteRow((pdsvaorderdeleteDataSet.ttblvaorderdeleteRow)ttblvaorderdeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VADeleteOrder - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VADeleteOrder(ref pdsContext,  pdsvaorderdelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VADeleteOrder - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaorderdelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void VAHeaderSoftLock(int pvVano, int pvVasuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderSoftLock - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderSoftLock(ref pdsContext,  pvVano,  pvVasuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderSoftLock - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void VAHeaderSoftLockV2(int pvVano, int pvVasuf, string pvTransproc)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderSoftLockV2 - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderSoftLockV2(ref pdsContext,  pvVano,  pvVasuf,  pvTransproc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderSoftLockV2 - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Tiecreatetiettresults> VAHeaderTies(Tiecreatetiettcriteria tiecreatetiettcriteria)
      {   
         var results = new List<Tiecreatetiettresults>();
         
         var pdstiecreatetiett = new pdstiecreatetiettDataSet();
            
         DataRow ttbltiecreatetiettcriteriaCriteria = pdstiecreatetiett.ttbltiecreatetiettcriteria.NewttbltiecreatetiettcriteriaRow();
         Tiecreatetiettcriteria.UpdateRowFromTiecreatetiettcriteria(ref ttbltiecreatetiettcriteriaCriteria, tiecreatetiettcriteria);
         pdstiecreatetiett.ttbltiecreatetiettcriteria.AddttbltiecreatetiettcriteriaRow((pdstiecreatetiettDataSet.ttbltiecreatetiettcriteriaRow)ttbltiecreatetiettcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderTies - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderTies(ref pdsContext, ref pdstiecreatetiett, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderTies - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiecreatetiett); 
    
            foreach (DataRow row in pdstiecreatetiett.ttbltiecreatetiettresults)
            {
                results.Add(Tiecreatetiettresults.BuildTiecreatetiettresultsFromRow(row));
            }
            return results;
        
      }

      public AsvaheaderVAHeaderTieEditValidateResponseAPI VAHeaderTieEditValidate(AsvaheaderVAHeaderTieEditValidateRequestAPI AsvaheaderVAHeaderTieEditValidateRequestAPI)
      {   
         var result = new AsvaheaderVAHeaderTieEditValidateResponseAPI();
         
         var pdstiecreatetiett = new pdstiecreatetiettDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbltiecreatetiettcriteriaRow = pdstiecreatetiett.ttbltiecreatetiettcriteria.NewttbltiecreatetiettcriteriaRow();
         Tiecreatetiettcriteria.UpdateRowFromTiecreatetiettcriteria(ref ttbltiecreatetiettcriteriaRow, AsvaheaderVAHeaderTieEditValidateRequestAPI.tiecreatetiettcriteria);
         pdstiecreatetiett.ttbltiecreatetiettcriteria.AddttbltiecreatetiettcriteriaRow((pdstiecreatetiettDataSet.ttbltiecreatetiettcriteriaRow)ttbltiecreatetiettcriteriaRow);
          
         DataRow ttbltiecreatetiettresultsRow = pdstiecreatetiett.ttbltiecreatetiettresults.NewttbltiecreatetiettresultsRow();
         Tiecreatetiettresults.UpdateRowFromTiecreatetiettresults(ref ttbltiecreatetiettresultsRow, AsvaheaderVAHeaderTieEditValidateRequestAPI.tiecreatetiettresults);
         pdstiecreatetiett.ttbltiecreatetiettresults.AddttbltiecreatetiettresultsRow((pdstiecreatetiettDataSet.ttbltiecreatetiettresultsRow)ttbltiecreatetiettresultsRow);
          
         
         NLogLoggerP.Trace("VAHeaderTieEditValidate - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderTieEditValidate(ref pdsContext, ref pdstiecreatetiett, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderTieEditValidate - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiecreatetiett); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdstiecreatetiett.ttbltiecreatetiettresults.Count > 0)
         {
            result.tiecreatetiettresults = Tiecreatetiettresults.BuildTiecreatetiettresultsFromRow(pdstiecreatetiett.ttbltiecreatetiettresults[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAHeaderTieFinalUpdate(AsvaheaderVAHeaderTieFinalUpdateRequestAPI AsvaheaderVAHeaderTieFinalUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdstiecreatetiett = new pdstiecreatetiettDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbltiecreatetiettcriteriaRow = pdstiecreatetiett.ttbltiecreatetiettcriteria.NewttbltiecreatetiettcriteriaRow();
         Tiecreatetiettcriteria.UpdateRowFromTiecreatetiettcriteria(ref ttbltiecreatetiettcriteriaRow, AsvaheaderVAHeaderTieFinalUpdateRequestAPI.tiecreatetiettcriteria);
         pdstiecreatetiett.ttbltiecreatetiettcriteria.AddttbltiecreatetiettcriteriaRow((pdstiecreatetiettDataSet.ttbltiecreatetiettcriteriaRow)ttbltiecreatetiettcriteriaRow);
          
         foreach (var obj in AsvaheaderVAHeaderTieFinalUpdateRequestAPI.tiecreatetiettresults)
         {
            DataRow ttbltiecreatetiettresultsRow = pdstiecreatetiett.ttbltiecreatetiettresults.NewttbltiecreatetiettresultsRow();
            Tiecreatetiettresults.UpdateRowFromTiecreatetiettresults(ref ttbltiecreatetiettresultsRow, obj);
            pdstiecreatetiett.ttbltiecreatetiettresults.AddttbltiecreatetiettresultsRow((pdstiecreatetiettDataSet.ttbltiecreatetiettresultsRow)ttbltiecreatetiettresultsRow);
         }
          
         
         NLogLoggerP.Trace("VAHeaderTieFinalUpdate - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderTieFinalUpdate(ref pdsContext,  pdstiecreatetiett, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderTieFinalUpdate - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdstiecreatetiett); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvaheaderVAHeaderAddRecordResponseAPI VAHeaderAddRecord(Vaheaderaddchg vaheaderaddchg)
      {   
         var result = new AsvaheaderVAHeaderAddRecordResponseAPI();
         
         var pdsvaheaderaddchg = new pdsvaheaderaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaheaderaddchgCriteria = pdsvaheaderaddchg.ttblvaheaderaddchg.NewttblvaheaderaddchgRow();
         Vaheaderaddchg.UpdateRowFromVaheaderaddchg(ref ttblvaheaderaddchgCriteria, vaheaderaddchg);
         pdsvaheaderaddchg.ttblvaheaderaddchg.AddttblvaheaderaddchgRow((pdsvaheaderaddchgDataSet.ttblvaheaderaddchgRow)ttblvaheaderaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderAddRecord - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderAddRecord(ref pdsContext, ref pdsvaheaderaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderAddRecord - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaheaderaddchg.ttblvaheaderaddchg.Count > 0)
         {
            result.vaheaderaddchg = Vaheaderaddchg.BuildVaheaderaddchgFromRow(pdsvaheaderaddchg.ttblvaheaderaddchg[0]);
         }
                    
          
         return result;
          
      }

      public AsvaheaderVAHeaderChangeRecordResponseAPI VAHeaderChangeRecord(Vaheaderaddchg vaheaderaddchg)
      {   
         var result = new AsvaheaderVAHeaderChangeRecordResponseAPI();
         
         var pdsvaheaderaddchg = new pdsvaheaderaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaheaderaddchgCriteria = pdsvaheaderaddchg.ttblvaheaderaddchg.NewttblvaheaderaddchgRow();
         Vaheaderaddchg.UpdateRowFromVaheaderaddchg(ref ttblvaheaderaddchgCriteria, vaheaderaddchg);
         pdsvaheaderaddchg.ttblvaheaderaddchg.AddttblvaheaderaddchgRow((pdsvaheaderaddchgDataSet.ttblvaheaderaddchgRow)ttblvaheaderaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderChangeRecord - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderChangeRecord(ref pdsContext, ref pdsvaheaderaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderChangeRecord - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaheaderaddchg.ttblvaheaderaddchg.Count > 0)
         {
            result.vaheaderaddchg = Vaheaderaddchg.BuildVaheaderaddchgFromRow(pdsvaheaderaddchg.ttblvaheaderaddchg[0]);
         }
                    
          
         return result;
          
      }

      public AsvaheaderVAHeaderRetrieveResponseAPI VAHeaderRetrieve(Vaheaderlistcriteria vaheaderlistcriteria)
      {   
         var result = new AsvaheaderVAHeaderRetrieveResponseAPI();
         
         var pdsvaheaderlist = new pdsvaheaderlistDataSet();
            
         DataRow ttblvaheaderlistcriteriaCriteria = pdsvaheaderlist.ttblvaheaderlistcriteria.NewttblvaheaderlistcriteriaRow();
         Vaheaderlistcriteria.UpdateRowFromVaheaderlistcriteria(ref ttblvaheaderlistcriteriaCriteria, vaheaderlistcriteria);
         pdsvaheaderlist.ttblvaheaderlistcriteria.AddttblvaheaderlistcriteriaRow((pdsvaheaderlistDataSet.ttblvaheaderlistcriteriaRow)ttblvaheaderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("VAHeaderRetrieve - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderRetrieve(ref pdsContext, ref pdsvaheaderlist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("VAHeaderRetrieve - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderlist); 
    
         foreach (DataRow row in pdsvaheaderlist.ttblvaheaderlistresults)
         {
            result.vaheaderlistresults.Add(Vaheaderlistresults.BuildVaheaderlistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Messaging> VAHeaderDetailCheckAccess(int iVANo, int iVASuf)
      {   
         var results = new List<Messaging>();
         
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderDetailCheckAccess - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderDetailCheckAccess(ref pdsContext,  iVANo,  iVASuf, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderDetailCheckAccess - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmessaging); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void VAHeaderRemoveSoftLock(int pvVano, int pvVasuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderRemoveSoftLock - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderRemoveSoftLock(ref pdsContext,  pvVano,  pvVasuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderRemoveSoftLock - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Vaheaderaddchg VAHeaderInitialize(int iVANo, int iVASuf)
      {   
         var result = new Vaheaderaddchg();
         
         var pdsvaheaderaddchg = new pdsvaheaderaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderInitialize - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderInitialize(ref pdsContext,  iVANo,  iVASuf, out pdsvaheaderaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderInitialize - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderaddchg); 
    
         if (pdsvaheaderaddchg.ttblvaheaderaddchg.Count > 0) 
         { 
             result = Vaheaderaddchg.BuildVaheaderaddchgFromRow(pdsvaheaderaddchg.ttblvaheaderaddchg[0]);
         } 
              
          
         return result;
          
      }

      public Vaheaderaddchg VAHeaderLeaveField(AsvaheaderVAHeaderLeaveFieldRequestAPI AsvaheaderVAHeaderLeaveFieldRequestAPI)
      {   
         var result = new Vaheaderaddchg();
         
         var pdsvaheaderaddchg = new pdsvaheaderaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvaheaderaddchgRow = pdsvaheaderaddchg.ttblvaheaderaddchg.NewttblvaheaderaddchgRow();
         Vaheaderaddchg.UpdateRowFromVaheaderaddchg(ref ttblvaheaderaddchgRow, AsvaheaderVAHeaderLeaveFieldRequestAPI.vaheaderaddchg);
         pdsvaheaderaddchg.ttblvaheaderaddchg.AddttblvaheaderaddchgRow((pdsvaheaderaddchgDataSet.ttblvaheaderaddchgRow)ttblvaheaderaddchgRow);
          
         var  cFieldName = AsvaheaderVAHeaderLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("VAHeaderLeaveField - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderLeaveField(ref pdsContext,  cFieldName, ref pdsvaheaderaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderLeaveField - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderaddchg); 
    
         if (pdsvaheaderaddchg.ttblvaheaderaddchg.Count > 0) 
         { 
             result = Vaheaderaddchg.BuildVaheaderaddchgFromRow(pdsvaheaderaddchg.ttblvaheaderaddchg[0]);
         } 
              
          
         return result;
          
      }

      public Vaheadersettings VAHeaderGetSettings()
      {   
         var result = new Vaheadersettings();
         
         var pdsvaheadersettings = new pdsvaheadersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderGetSettings - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderGetSettings(ref pdsContext, out pdsvaheadersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderGetSettings - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadersettings); 
    
         if (pdsvaheadersettings.ttblvaheadersettings.Count > 0) 
         { 
             result = Vaheadersettings.BuildVaheadersettingsFromRow(pdsvaheadersettings.ttblvaheadersettings[0]);
         } 
              
          
         return result;
          
      }

      public void VAHeaderSetSettings(Vaheadersettings vaheadersettings)
      {   
         
         var pdsvaheadersettings = new pdsvaheadersettingsDataSet();
            
         DataRow ttblvaheadersettingsCriteria = pdsvaheadersettings.ttblvaheadersettings.NewttblvaheadersettingsRow();
         Vaheadersettings.UpdateRowFromVaheadersettings(ref ttblvaheadersettingsCriteria, vaheadersettings);
         pdsvaheadersettings.ttblvaheadersettings.AddttblvaheadersettingsRow((pdsvaheadersettingsDataSet.ttblvaheadersettingsRow)ttblvaheadersettingsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderSetSettings - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderSetSettings(ref pdsContext,  pdsvaheadersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderSetSettings - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadersettings);
      }

      public Vanonstockvalidate VAHeaderNonStockVal(Vanonstockvalidate vanonstockvalidate)
      {   
         var result = new Vanonstockvalidate();
         
         var pdsvanonstockvalidate = new pdsvanonstockvalidateDataSet();
            
         DataRow ttblvanonstockvalidateCriteria = pdsvanonstockvalidate.ttblvanonstockvalidate.NewttblvanonstockvalidateRow();
         Vanonstockvalidate.UpdateRowFromVanonstockvalidate(ref ttblvanonstockvalidateCriteria, vanonstockvalidate);
         pdsvanonstockvalidate.ttblvanonstockvalidate.AddttblvanonstockvalidateRow((pdsvanonstockvalidateDataSet.ttblvanonstockvalidateRow)ttblvanonstockvalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderNonStockVal - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderNonStockVal(ref pdsContext, ref pdsvanonstockvalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderNonStockVal - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvanonstockvalidate); 
    
         if (pdsvanonstockvalidate.ttblvanonstockvalidate.Count > 0) 
         { 
             result = Vanonstockvalidate.BuildVanonstockvalidateFromRow(pdsvanonstockvalidate.ttblvanonstockvalidate[0]);
         } 
              
          
         return result;
          
      }

      public Vaheaderlistresults VAHeaderQuickEntry(Vaheaderlistcriteria vaheaderlistcriteria)
      {   
         var result = new Vaheaderlistresults();
         
         var pdsvaheaderlist = new pdsvaheaderlistDataSet();
            
         DataRow ttblvaheaderlistcriteriaCriteria = pdsvaheaderlist.ttblvaheaderlistcriteria.NewttblvaheaderlistcriteriaRow();
         Vaheaderlistcriteria.UpdateRowFromVaheaderlistcriteria(ref ttblvaheaderlistcriteriaCriteria, vaheaderlistcriteria);
         pdsvaheaderlist.ttblvaheaderlistcriteria.AddttblvaheaderlistcriteriaRow((pdsvaheaderlistDataSet.ttblvaheaderlistcriteriaRow)ttblvaheaderlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderQuickEntry - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderQuickEntry(ref pdsContext, ref pdsvaheaderlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderQuickEntry - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderlist); 
    
         if (pdsvaheaderlist.ttblvaheaderlistresults.Count > 0) 
         { 
             result = Vaheaderlistresults.BuildVaheaderlistresultsFromRow(pdsvaheaderlist.ttblvaheaderlistresults[0]);
         } 
              
          
         return result;
          
      }

      public Vaheadercopy VAHeaderCopyRetrieve(int pvVano, int pvVasuf)
      {   
         var result = new Vaheadercopy();
         
         var pdsvaheadercopy = new pdsvaheadercopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderCopyRetrieve - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderCopyRetrieve(ref pdsContext,  pvVano,  pvVasuf, out pdsvaheadercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderCopyRetrieve - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadercopy); 
    
         if (pdsvaheadercopy.ttblvaheadercopy.Count > 0) 
         { 
             result = Vaheadercopy.BuildVaheadercopyFromRow(pdsvaheadercopy.ttblvaheadercopy[0]);
         } 
              
          
         return result;
          
      }

      public Vaheadercopy VAHeaderCopyLeaveField(AsvaheaderVAHeaderCopyLeaveFieldRequestAPI AsvaheaderVAHeaderCopyLeaveFieldRequestAPI)
      {   
         var result = new Vaheadercopy();
         
         var pdsvaheadercopy = new pdsvaheadercopyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvaheadercopyRow = pdsvaheadercopy.ttblvaheadercopy.NewttblvaheadercopyRow();
         Vaheadercopy.UpdateRowFromVaheadercopy(ref ttblvaheadercopyRow, AsvaheaderVAHeaderCopyLeaveFieldRequestAPI.vaheadercopy);
         pdsvaheadercopy.ttblvaheadercopy.AddttblvaheadercopyRow((pdsvaheadercopyDataSet.ttblvaheadercopyRow)ttblvaheadercopyRow);
          
         var  pvFieldname = AsvaheaderVAHeaderCopyLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("VAHeaderCopyLeaveField - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderCopyLeaveField(ref pdsContext,  pvFieldname, ref pdsvaheadercopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderCopyLeaveField - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadercopy); 
    
         if (pdsvaheadercopy.ttblvaheadercopy.Count > 0) 
         { 
             result = Vaheadercopy.BuildVaheadercopyFromRow(pdsvaheadercopy.ttblvaheadercopy[0]);
         } 
              
          
         return result;
          
      }

      public AsvaheaderVAHeaderCopyCreateResponseAPI VAHeaderCopyCreate(Vaheadercopy vaheadercopy)
      {   
         var result = new AsvaheaderVAHeaderCopyCreateResponseAPI();
         
         var pdsvaheadercopy = new pdsvaheadercopyDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaheadercopyCriteria = pdsvaheadercopy.ttblvaheadercopy.NewttblvaheadercopyRow();
         Vaheadercopy.UpdateRowFromVaheadercopy(ref ttblvaheadercopyCriteria, vaheadercopy);
         pdsvaheadercopy.ttblvaheadercopy.AddttblvaheadercopyRow((pdsvaheadercopyDataSet.ttblvaheadercopyRow)ttblvaheadercopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderCopyCreate - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderCopyCreate(ref pdsContext, ref pdsvaheadercopy, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderCopyCreate - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheadercopy); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvaheadercopy.ttblvaheadercopy.Count > 0)
         {
            result.vaheadercopy = Vaheadercopy.BuildVaheadercopyFromRow(pdsvaheadercopy.ttblvaheadercopy[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Vaheaderprint> VAHeaderPrintInitialize(int pvVano, int pvVasuf)
      {   
         var results = new List<Vaheaderprint>();
         
         var pdsvaheaderprint = new pdsvaheaderprintDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderPrintInitialize - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderPrintInitialize(ref pdsContext,  pvVano,  pvVasuf, out pdsvaheaderprint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderPrintInitialize - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderprint); 
    
            foreach (DataRow row in pdsvaheaderprint.ttblvaheaderprint)
            {
                results.Add(Vaheaderprint.BuildVaheaderprintFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> VAHeaderPrintRun(AsvaheaderVAHeaderPrintRunRequestAPI AsvaheaderVAHeaderPrintRunRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvaheaderprint = new pdsvaheaderprintDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvaheaderVAHeaderPrintRunRequestAPI.vaheaderprint)
         {
            DataRow ttblvaheaderprintRow = pdsvaheaderprint.ttblvaheaderprint.NewttblvaheaderprintRow();
            Vaheaderprint.UpdateRowFromVaheaderprint(ref ttblvaheaderprintRow, obj);
            pdsvaheaderprint.ttblvaheaderprint.AddttblvaheaderprintRow((pdsvaheaderprintDataSet.ttblvaheaderprintRow)ttblvaheaderprintRow);
         }
          
         var  pvVano = AsvaheaderVAHeaderPrintRunRequestAPI.pvVano;
            
         var  pvVasuf = AsvaheaderVAHeaderPrintRunRequestAPI.pvVasuf;
            
         
         NLogLoggerP.Trace("VAHeaderPrintRun - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderPrintRun(ref pdsContext,  pvVano,  pvVasuf,  pdsvaheaderprint, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderPrintRun - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderprint); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvaheaderVAHeaderDetailLoadResponseAPI VAHeaderDetailLoad(int pvVano, int pvVasuf)
      {   
         var result = new AsvaheaderVAHeaderDetailLoadResponseAPI();
         
         var pdsvaheaderextrafields = new pdsvaheaderextrafieldsDataSet();
            
         var pdsvaheaderallcomponent = new pdsvaheaderallcomponentDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAHeaderDetailLoad - Asvaheader - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvaheaderproxy = this.proxyAppObject.CreatePO_asvaheaderproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvaheaderproxy.VAHeaderDetailLoad(ref pdsContext,  pvVano,  pvVasuf, out pdsvaheaderextrafields, out pdsvaheaderallcomponent, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAHeaderDetailLoad - Asvaheader - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaheaderextrafields); 
    
         foreach (DataRow row in pdsvaheaderallcomponent.ttblvaheaderallcomponent)
         {
            result.vaheaderallcomponent.Add(Vaheaderallcomponent.BuildVaheaderallcomponentFromRow(row));
         }     
         if (pdsvaheaderextrafields.ttblvaheaderextrafields.Count > 0)
         {
            result.vaheaderextrafields = Vaheaderextrafields.BuildVaheaderextrafieldsFromRow(pdsvaheaderextrafields.ttblvaheaderextrafields[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  