//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsvasectionship;
   using Models.Pdsmessaging;
   using Models.Pdsvasectionreset;
   using Models.Pdsvasectioncomplete;
   using Models.Pdsvalinelaborreview;
   using Models.Pdsvalinelaborapplied;
   using Models.Pdsvaaddons;
   using Models.Pdsvasectionlist;
   using Models.Pdsvasectionaddchg;
   using Models.Pdsvasectiondelete;
   using Models.Pdsvasectionspec;
   using Models.Pdsvasectionextendin;
   using Models.Pdsvasectionextendex;
   using Models.Pdsvalinelinetie;
   using Models.Complex;

   public partial class AsvasectionAdapter : AdapterBase<pdsContextDataSet>
   {
      private VAProxyAppObject proxyAppObject;
      
      public AsvasectionAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsvasectionAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsvasectionVASectionShipResponseAPI VASectionShip(Vasectionshipcriteria vasectionshipcriteria)
      {   
         var result = new AsvasectionVASectionShipResponseAPI();
         
         var pdsvasectionship = new pdsvasectionshipDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectionshipcriteriaCriteria = pdsvasectionship.ttblvasectionshipcriteria.NewttblvasectionshipcriteriaRow();
         Vasectionshipcriteria.UpdateRowFromVasectionshipcriteria(ref ttblvasectionshipcriteriaCriteria, vasectionshipcriteria);
         pdsvasectionship.ttblvasectionshipcriteria.AddttblvasectionshipcriteriaRow((pdsvasectionshipDataSet.ttblvasectionshipcriteriaRow)ttblvasectionshipcriteriaCriteria);
            
         bool lReviewLabor = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionShip - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionShip(ref pdsContext,  pdsvasectionship, out lReviewLabor, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionShip - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionship); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.lReviewLabor = lReviewLabor;
          
         return result;
          
      }

      public IEnumerable<Messaging> VASectionReset(Vasectionresetcriteria vasectionresetcriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsvasectionreset = new pdsvasectionresetDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectionresetcriteriaCriteria = pdsvasectionreset.ttblvasectionresetcriteria.NewttblvasectionresetcriteriaRow();
         Vasectionresetcriteria.UpdateRowFromVasectionresetcriteria(ref ttblvasectionresetcriteriaCriteria, vasectionresetcriteria);
         pdsvasectionreset.ttblvasectionresetcriteria.AddttblvasectionresetcriteriaRow((pdsvasectionresetDataSet.ttblvasectionresetcriteriaRow)ttblvasectionresetcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionReset - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionReset(ref pdsContext,  pdsvasectionreset, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionReset - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionreset); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvasectionVASectionCompleteInitializeResponseAPI VASectionCompleteInitialize(Vasectioncompletecriteria vasectioncompletecriteria)
      {   
         var result = new AsvasectionVASectionCompleteInitializeResponseAPI();
         
         var pdsvasectioncomplete = new pdsvasectioncompleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectioncompletecriteriaCriteria = pdsvasectioncomplete.ttblvasectioncompletecriteria.NewttblvasectioncompletecriteriaRow();
         Vasectioncompletecriteria.UpdateRowFromVasectioncompletecriteria(ref ttblvasectioncompletecriteriaCriteria, vasectioncompletecriteria);
         pdsvasectioncomplete.ttblvasectioncompletecriteria.AddttblvasectioncompletecriteriaRow((pdsvasectioncompleteDataSet.ttblvasectioncompletecriteriaRow)ttblvasectioncompletecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionCompleteInitialize - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionCompleteInitialize(ref pdsContext, ref pdsvasectioncomplete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionCompleteInitialize - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectioncomplete); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvasectioncomplete.ttblvasectioncompletecriteria.Count > 0)
         {
            result.vasectioncompletecriteria = Vasectioncompletecriteria.BuildVasectioncompletecriteriaFromRow(pdsvasectioncomplete.ttblvasectioncompletecriteria[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VASectionComplete(Vasectioncompletecriteria vasectioncompletecriteria)
      {   
         var results = new List<Messaging>();
         
         var pdsvasectioncomplete = new pdsvasectioncompleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectioncompletecriteriaCriteria = pdsvasectioncomplete.ttblvasectioncompletecriteria.NewttblvasectioncompletecriteriaRow();
         Vasectioncompletecriteria.UpdateRowFromVasectioncompletecriteria(ref ttblvasectioncompletecriteriaCriteria, vasectioncompletecriteria);
         pdsvasectioncomplete.ttblvasectioncompletecriteria.AddttblvasectioncompletecriteriaRow((pdsvasectioncompleteDataSet.ttblvasectioncompletecriteriaRow)ttblvasectioncompletecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionComplete - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionComplete(ref pdsContext,  pdsvasectioncomplete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionComplete - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectioncomplete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvasectionVAReviewLaborRetrieveResponseAPI VAReviewLaborRetrieve(Valinelaborreviewcriteria valinelaborreviewcriteria)
      {   
         var result = new AsvasectionVAReviewLaborRetrieveResponseAPI();
         
         var pdsvalinelaborreview = new pdsvalinelaborreviewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalinelaborreviewcriteriaCriteria = pdsvalinelaborreview.ttblvalinelaborreviewcriteria.NewttblvalinelaborreviewcriteriaRow();
         Valinelaborreviewcriteria.UpdateRowFromValinelaborreviewcriteria(ref ttblvalinelaborreviewcriteriaCriteria, valinelaborreviewcriteria);
         pdsvalinelaborreview.ttblvalinelaborreviewcriteria.AddttblvalinelaborreviewcriteriaRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewcriteriaRow)ttblvalinelaborreviewcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAReviewLaborRetrieve - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAReviewLaborRetrieve(ref pdsContext, ref pdsvalinelaborreview, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReviewLaborRetrieve - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborreview); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinelaborreview.ttblvalinelaborreview)
         {
            result.valinelaborreview.Add(Valinelaborreview.BuildValinelaborreviewFromRow(row));
         }     
         if (pdsvalinelaborreview.ttblvalinelaborreviewtotals.Count > 0)
         {
            result.valinelaborreviewtotals = Valinelaborreviewtotals.BuildValinelaborreviewtotalsFromRow(pdsvalinelaborreview.ttblvalinelaborreviewtotals[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAReviewLaborValidate(AsvasectionVAReviewLaborValidateRequestAPI AsvasectionVAReviewLaborValidateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvalinelaborreview = new pdsvalinelaborreviewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelaborreviewRow = pdsvalinelaborreview.ttblvalinelaborreview.NewttblvalinelaborreviewRow();
         Valinelaborreview.UpdateRowFromValinelaborreview(ref ttblvalinelaborreviewRow, AsvasectionVAReviewLaborValidateRequestAPI.valinelaborreview);
         pdsvalinelaborreview.ttblvalinelaborreview.AddttblvalinelaborreviewRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewRow)ttblvalinelaborreviewRow);
          
         DataRow ttblvalinelaborreviewcriteriaRow = pdsvalinelaborreview.ttblvalinelaborreviewcriteria.NewttblvalinelaborreviewcriteriaRow();
         Valinelaborreviewcriteria.UpdateRowFromValinelaborreviewcriteria(ref ttblvalinelaborreviewcriteriaRow, AsvasectionVAReviewLaborValidateRequestAPI.valinelaborreviewcriteria);
         pdsvalinelaborreview.ttblvalinelaborreviewcriteria.AddttblvalinelaborreviewcriteriaRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewcriteriaRow)ttblvalinelaborreviewcriteriaRow);
          
         DataRow ttblvalinelaborreviewtotalsRow = pdsvalinelaborreview.ttblvalinelaborreviewtotals.NewttblvalinelaborreviewtotalsRow();
         Valinelaborreviewtotals.UpdateRowFromValinelaborreviewtotals(ref ttblvalinelaborreviewtotalsRow, AsvasectionVAReviewLaborValidateRequestAPI.valinelaborreviewtotals);
         pdsvalinelaborreview.ttblvalinelaborreviewtotals.AddttblvalinelaborreviewtotalsRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewtotalsRow)ttblvalinelaborreviewtotalsRow);
          
         
         NLogLoggerP.Trace("VAReviewLaborValidate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAReviewLaborValidate(ref pdsContext,  pdsvalinelaborreview, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReviewLaborValidate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborreview); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvasectionVAReviewLaborCalculateTotalsResponseAPI VAReviewLaborCalculateTotals(AsvasectionVAReviewLaborCalculateTotalsRequestAPI AsvasectionVAReviewLaborCalculateTotalsRequestAPI)
      {   
         var result = new AsvasectionVAReviewLaborCalculateTotalsResponseAPI();
         
         var pdsvalinelaborreview = new pdsvalinelaborreviewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvasectionVAReviewLaborCalculateTotalsRequestAPI.valinelaborreview)
         {
            DataRow ttblvalinelaborreviewRow = pdsvalinelaborreview.ttblvalinelaborreview.NewttblvalinelaborreviewRow();
            Valinelaborreview.UpdateRowFromValinelaborreview(ref ttblvalinelaborreviewRow, obj);
            pdsvalinelaborreview.ttblvalinelaborreview.AddttblvalinelaborreviewRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewRow)ttblvalinelaborreviewRow);
         }
          
         DataRow ttblvalinelaborreviewcriteriaRow = pdsvalinelaborreview.ttblvalinelaborreviewcriteria.NewttblvalinelaborreviewcriteriaRow();
         Valinelaborreviewcriteria.UpdateRowFromValinelaborreviewcriteria(ref ttblvalinelaborreviewcriteriaRow, AsvasectionVAReviewLaborCalculateTotalsRequestAPI.valinelaborreviewcriteria);
         pdsvalinelaborreview.ttblvalinelaborreviewcriteria.AddttblvalinelaborreviewcriteriaRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewcriteriaRow)ttblvalinelaborreviewcriteriaRow);
          
         
         NLogLoggerP.Trace("VAReviewLaborCalculateTotals - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAReviewLaborCalculateTotals(ref pdsContext, ref pdsvalinelaborreview, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReviewLaborCalculateTotals - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborreview); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinelaborreview.ttblvalinelaborreview)
         {
            result.valinelaborreview.Add(Valinelaborreview.BuildValinelaborreviewFromRow(row));
         }     
         if (pdsvalinelaborreview.ttblvalinelaborreviewtotals.Count > 0)
         {
            result.valinelaborreviewtotals = Valinelaborreviewtotals.BuildValinelaborreviewtotalsFromRow(pdsvalinelaborreview.ttblvalinelaborreviewtotals[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAReviewLaborUpdate(AsvasectionVAReviewLaborUpdateRequestAPI AsvasectionVAReviewLaborUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvalinelaborreview = new pdsvalinelaborreviewDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvasectionVAReviewLaborUpdateRequestAPI.valinelaborreview)
         {
            DataRow ttblvalinelaborreviewRow = pdsvalinelaborreview.ttblvalinelaborreview.NewttblvalinelaborreviewRow();
            Valinelaborreview.UpdateRowFromValinelaborreview(ref ttblvalinelaborreviewRow, obj);
            pdsvalinelaborreview.ttblvalinelaborreview.AddttblvalinelaborreviewRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewRow)ttblvalinelaborreviewRow);
         }
          
         DataRow ttblvalinelaborreviewcriteriaRow = pdsvalinelaborreview.ttblvalinelaborreviewcriteria.NewttblvalinelaborreviewcriteriaRow();
         Valinelaborreviewcriteria.UpdateRowFromValinelaborreviewcriteria(ref ttblvalinelaborreviewcriteriaRow, AsvasectionVAReviewLaborUpdateRequestAPI.valinelaborreviewcriteria);
         pdsvalinelaborreview.ttblvalinelaborreviewcriteria.AddttblvalinelaborreviewcriteriaRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewcriteriaRow)ttblvalinelaborreviewcriteriaRow);
          
         DataRow ttblvalinelaborreviewtotalsRow = pdsvalinelaborreview.ttblvalinelaborreviewtotals.NewttblvalinelaborreviewtotalsRow();
         Valinelaborreviewtotals.UpdateRowFromValinelaborreviewtotals(ref ttblvalinelaborreviewtotalsRow, AsvasectionVAReviewLaborUpdateRequestAPI.valinelaborreviewtotals);
         pdsvalinelaborreview.ttblvalinelaborreviewtotals.AddttblvalinelaborreviewtotalsRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewtotalsRow)ttblvalinelaborreviewtotalsRow);
          
         var  cThisFunction = AsvasectionVAReviewLaborUpdateRequestAPI.cThisFunction;
            
         
         NLogLoggerP.Trace("VAReviewLaborUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAReviewLaborUpdate(ref pdsContext,  pdsvalinelaborreview,  cThisFunction, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReviewLaborUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborreview); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Valinelaborreview VAReviewLaborLeaveField(AsvasectionVAReviewLaborLeaveFieldRequestAPI AsvasectionVAReviewLaborLeaveFieldRequestAPI)
      {   
         var result = new Valinelaborreview();
         
         var pdsvalinelaborreview = new pdsvalinelaborreviewDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelaborreviewRow = pdsvalinelaborreview.ttblvalinelaborreview.NewttblvalinelaborreviewRow();
         Valinelaborreview.UpdateRowFromValinelaborreview(ref ttblvalinelaborreviewRow, AsvasectionVAReviewLaborLeaveFieldRequestAPI.valinelaborreview);
         pdsvalinelaborreview.ttblvalinelaborreview.AddttblvalinelaborreviewRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewRow)ttblvalinelaborreviewRow);
          
         DataRow ttblvalinelaborreviewcriteriaRow = pdsvalinelaborreview.ttblvalinelaborreviewcriteria.NewttblvalinelaborreviewcriteriaRow();
         Valinelaborreviewcriteria.UpdateRowFromValinelaborreviewcriteria(ref ttblvalinelaborreviewcriteriaRow, AsvasectionVAReviewLaborLeaveFieldRequestAPI.valinelaborreviewcriteria);
         pdsvalinelaborreview.ttblvalinelaborreviewcriteria.AddttblvalinelaborreviewcriteriaRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewcriteriaRow)ttblvalinelaborreviewcriteriaRow);
          
         DataRow ttblvalinelaborreviewtotalsRow = pdsvalinelaborreview.ttblvalinelaborreviewtotals.NewttblvalinelaborreviewtotalsRow();
         Valinelaborreviewtotals.UpdateRowFromValinelaborreviewtotals(ref ttblvalinelaborreviewtotalsRow, AsvasectionVAReviewLaborLeaveFieldRequestAPI.valinelaborreviewtotals);
         pdsvalinelaborreview.ttblvalinelaborreviewtotals.AddttblvalinelaborreviewtotalsRow((pdsvalinelaborreviewDataSet.ttblvalinelaborreviewtotalsRow)ttblvalinelaborreviewtotalsRow);
          
         var  cFieldName = AsvasectionVAReviewLaborLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("VAReviewLaborLeaveField - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAReviewLaborLeaveField(ref pdsContext,  cFieldName, ref pdsvalinelaborreview, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAReviewLaborLeaveField - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborreview); 
    
         if (pdsvalinelaborreview.ttblvalinelaborreview.Count > 0) 
         { 
             result = Valinelaborreview.BuildValinelaborreviewFromRow(pdsvalinelaborreview.ttblvalinelaborreview[0]);
         } 
              
          
         return result;
          
      }

      public AsvasectionVAAppliedLaborRetrieveResponseAPI VAAppliedLaborRetrieve(Valinelaborappliedcriteria valinelaborappliedcriteria)
      {   
         var result = new AsvasectionVAAppliedLaborRetrieveResponseAPI();
         
         var pdsvalinelaborapplied = new pdsvalinelaborappliedDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalinelaborappliedcriteriaCriteria = pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.NewttblvalinelaborappliedcriteriaRow();
         Valinelaborappliedcriteria.UpdateRowFromValinelaborappliedcriteria(ref ttblvalinelaborappliedcriteriaCriteria, valinelaborappliedcriteria);
         pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.AddttblvalinelaborappliedcriteriaRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedcriteriaRow)ttblvalinelaborappliedcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAAppliedLaborRetrieve - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAAppliedLaborRetrieve(ref pdsContext, ref pdsvalinelaborapplied, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAAppliedLaborRetrieve - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborapplied); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinelaborapplied.ttblvalinelaborapplied)
         {
            result.valinelaborapplied.Add(Valinelaborapplied.BuildValinelaborappliedFromRow(row));
         }     
         if (pdsvalinelaborapplied.ttblvalinelaborappliedtotals.Count > 0)
         {
            result.valinelaborappliedtotals = Valinelaborappliedtotals.BuildValinelaborappliedtotalsFromRow(pdsvalinelaborapplied.ttblvalinelaborappliedtotals[0]);
         }
                    
          
         return result;
          
      }

      public AsvasectionVAAppliedLaborCalculateTotalsResponseAPI VAAppliedLaborCalculateTotals(AsvasectionVAAppliedLaborCalculateTotalsRequestAPI AsvasectionVAAppliedLaborCalculateTotalsRequestAPI)
      {   
         var result = new AsvasectionVAAppliedLaborCalculateTotalsResponseAPI();
         
         var pdsvalinelaborapplied = new pdsvalinelaborappliedDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvasectionVAAppliedLaborCalculateTotalsRequestAPI.valinelaborapplied)
         {
            DataRow ttblvalinelaborappliedRow = pdsvalinelaborapplied.ttblvalinelaborapplied.NewttblvalinelaborappliedRow();
            Valinelaborapplied.UpdateRowFromValinelaborapplied(ref ttblvalinelaborappliedRow, obj);
            pdsvalinelaborapplied.ttblvalinelaborapplied.AddttblvalinelaborappliedRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedRow)ttblvalinelaborappliedRow);
         }
          
         DataRow ttblvalinelaborappliedcriteriaRow = pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.NewttblvalinelaborappliedcriteriaRow();
         Valinelaborappliedcriteria.UpdateRowFromValinelaborappliedcriteria(ref ttblvalinelaborappliedcriteriaRow, AsvasectionVAAppliedLaborCalculateTotalsRequestAPI.valinelaborappliedcriteria);
         pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.AddttblvalinelaborappliedcriteriaRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedcriteriaRow)ttblvalinelaborappliedcriteriaRow);
          
         
         NLogLoggerP.Trace("VAAppliedLaborCalculateTotals - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAAppliedLaborCalculateTotals(ref pdsContext, ref pdsvalinelaborapplied, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAAppliedLaborCalculateTotals - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborapplied); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelaborapplied.ttblvalinelaborappliedtotals.Count > 0)
         {
            result.valinelaborappliedtotals = Valinelaborappliedtotals.BuildValinelaborappliedtotalsFromRow(pdsvalinelaborapplied.ttblvalinelaborappliedtotals[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VAAppliedLaborUpdate(AsvasectionVAAppliedLaborUpdateRequestAPI AsvasectionVAAppliedLaborUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvalinelaborapplied = new pdsvalinelaborappliedDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvasectionVAAppliedLaborUpdateRequestAPI.valinelaborapplied)
         {
            DataRow ttblvalinelaborappliedRow = pdsvalinelaborapplied.ttblvalinelaborapplied.NewttblvalinelaborappliedRow();
            Valinelaborapplied.UpdateRowFromValinelaborapplied(ref ttblvalinelaborappliedRow, obj);
            pdsvalinelaborapplied.ttblvalinelaborapplied.AddttblvalinelaborappliedRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedRow)ttblvalinelaborappliedRow);
         }
          
         DataRow ttblvalinelaborappliedcriteriaRow = pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.NewttblvalinelaborappliedcriteriaRow();
         Valinelaborappliedcriteria.UpdateRowFromValinelaborappliedcriteria(ref ttblvalinelaborappliedcriteriaRow, AsvasectionVAAppliedLaborUpdateRequestAPI.valinelaborappliedcriteria);
         pdsvalinelaborapplied.ttblvalinelaborappliedcriteria.AddttblvalinelaborappliedcriteriaRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedcriteriaRow)ttblvalinelaborappliedcriteriaRow);
          
         DataRow ttblvalinelaborappliedtotalsRow = pdsvalinelaborapplied.ttblvalinelaborappliedtotals.NewttblvalinelaborappliedtotalsRow();
         Valinelaborappliedtotals.UpdateRowFromValinelaborappliedtotals(ref ttblvalinelaborappliedtotalsRow, AsvasectionVAAppliedLaborUpdateRequestAPI.valinelaborappliedtotals);
         pdsvalinelaborapplied.ttblvalinelaborappliedtotals.AddttblvalinelaborappliedtotalsRow((pdsvalinelaborappliedDataSet.ttblvalinelaborappliedtotalsRow)ttblvalinelaborappliedtotalsRow);
          
         
         NLogLoggerP.Trace("VAAppliedLaborUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VAAppliedLaborUpdate(ref pdsContext,  pdsvalinelaborapplied, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAAppliedLaborUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelaborapplied); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvasectionVASectionRetrieveAddonsResponseAPI VASectionRetrieveAddons(Vaaddoncriteria vaaddoncriteria)
      {   
         var result = new AsvasectionVASectionRetrieveAddonsResponseAPI();
         
         var pdsvaaddons = new pdsvaaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvaaddoncriteriaCriteria = pdsvaaddons.ttblvaaddoncriteria.NewttblvaaddoncriteriaRow();
         Vaaddoncriteria.UpdateRowFromVaaddoncriteria(ref ttblvaaddoncriteriaCriteria, vaaddoncriteria);
         pdsvaaddons.ttblvaaddoncriteria.AddttblvaaddoncriteriaRow((pdsvaaddonsDataSet.ttblvaaddoncriteriaRow)ttblvaaddoncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionRetrieveAddons - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionRetrieveAddons(ref pdsContext, ref pdsvaaddons, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionRetrieveAddons - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaaddons); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvaaddons.ttblvaaddons)
         {
            result.vaaddons.Add(Vaaddons.BuildVaaddonsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> VASectionSubmitAddons(AsvasectionVASectionSubmitAddonsRequestAPI AsvasectionVASectionSubmitAddonsRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvaaddons = new pdsvaaddonsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvaaddoncriteriaRow = pdsvaaddons.ttblvaaddoncriteria.NewttblvaaddoncriteriaRow();
         Vaaddoncriteria.UpdateRowFromVaaddoncriteria(ref ttblvaaddoncriteriaRow, AsvasectionVASectionSubmitAddonsRequestAPI.vaaddoncriteria);
         pdsvaaddons.ttblvaaddoncriteria.AddttblvaaddoncriteriaRow((pdsvaaddonsDataSet.ttblvaaddoncriteriaRow)ttblvaaddoncriteriaRow);
          
         foreach (var obj in AsvasectionVASectionSubmitAddonsRequestAPI.vaaddons)
         {
            DataRow ttblvaaddonsRow = pdsvaaddons.ttblvaaddons.NewttblvaaddonsRow();
            Vaaddons.UpdateRowFromVaaddons(ref ttblvaaddonsRow, obj);
            pdsvaaddons.ttblvaaddons.AddttblvaaddonsRow((pdsvaaddonsDataSet.ttblvaaddonsRow)ttblvaaddonsRow);
         }
          
         
         NLogLoggerP.Trace("VASectionSubmitAddons - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionSubmitAddons(ref pdsContext,  pdsvaaddons, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionSubmitAddons - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvaaddons); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Vasectionlistresults> VASectionRetrieve(int pvVano, int pvVasuf)
      {   
         var results = new List<Vasectionlistresults>();
         
         var pdsvasectionlist = new pdsvasectionlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionRetrieve - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionRetrieve(ref pdsContext,  pvVano,  pvVasuf, out pdsvasectionlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionRetrieve - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionlist); 
    
            foreach (DataRow row in pdsvasectionlist.ttblvasectionlistresults)
            {
                results.Add(Vasectionlistresults.BuildVasectionlistresultsFromRow(row));
            }
            return results;
        
      }

      public Vasectionaddchg VASectionInitialize(int pvVano, int pvVasuf, int pvSeqno, string pvMode)
      {   
         var result = new Vasectionaddchg();
         
         var pdsvasectionaddchg = new pdsvasectionaddchgDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionInitialize - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionInitialize(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pvMode, out pdsvasectionaddchg, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionInitialize - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionaddchg); 
    
         if (pdsvasectionaddchg.ttblvasectionaddchg.Count > 0) 
         { 
             result = Vasectionaddchg.BuildVasectionaddchgFromRow(pdsvasectionaddchg.ttblvasectionaddchg[0]);
         } 
              
          
         return result;
          
      }

      public AsvasectionVASectionAddRecordResponseAPI VASectionAddRecord(Vasectionaddchg vasectionaddchg)
      {   
         var result = new AsvasectionVASectionAddRecordResponseAPI();
         
         var pdsvasectionaddchg = new pdsvasectionaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectionaddchgCriteria = pdsvasectionaddchg.ttblvasectionaddchg.NewttblvasectionaddchgRow();
         Vasectionaddchg.UpdateRowFromVasectionaddchg(ref ttblvasectionaddchgCriteria, vasectionaddchg);
         pdsvasectionaddchg.ttblvasectionaddchg.AddttblvasectionaddchgRow((pdsvasectionaddchgDataSet.ttblvasectionaddchgRow)ttblvasectionaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionAddRecord - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionAddRecord(ref pdsContext, ref pdsvasectionaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionAddRecord - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvasectionaddchg.ttblvasectionaddchg.Count > 0)
         {
            result.vasectionaddchg = Vasectionaddchg.BuildVasectionaddchgFromRow(pdsvasectionaddchg.ttblvasectionaddchg[0]);
         }
                    
          
         return result;
          
      }

      public AsvasectionVASectionChangeRecordResponseAPI VASectionChangeRecord(Vasectionaddchg vasectionaddchg)
      {   
         var result = new AsvasectionVASectionChangeRecordResponseAPI();
         
         var pdsvasectionaddchg = new pdsvasectionaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectionaddchgCriteria = pdsvasectionaddchg.ttblvasectionaddchg.NewttblvasectionaddchgRow();
         Vasectionaddchg.UpdateRowFromVasectionaddchg(ref ttblvasectionaddchgCriteria, vasectionaddchg);
         pdsvasectionaddchg.ttblvasectionaddchg.AddttblvasectionaddchgRow((pdsvasectionaddchgDataSet.ttblvasectionaddchgRow)ttblvasectionaddchgCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionChangeRecord - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionChangeRecord(ref pdsContext, ref pdsvasectionaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionChangeRecord - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvasectionaddchg.ttblvasectionaddchg.Count > 0)
         {
            result.vasectionaddchg = Vasectionaddchg.BuildVasectionaddchgFromRow(pdsvasectionaddchg.ttblvasectionaddchg[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VASectionDelete(Vasectiondelete vasectiondelete)
      {   
         var results = new List<Messaging>();
         
         var pdsvasectiondelete = new pdsvasectiondeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvasectiondeleteCriteria = pdsvasectiondelete.ttblvasectiondelete.NewttblvasectiondeleteRow();
         Vasectiondelete.UpdateRowFromVasectiondelete(ref ttblvasectiondeleteCriteria, vasectiondelete);
         pdsvasectiondelete.ttblvasectiondelete.AddttblvasectiondeleteRow((pdsvasectiondeleteDataSet.ttblvasectiondeleteRow)ttblvasectiondeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionDelete - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionDelete(ref pdsContext,  pdsvasectiondelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionDelete - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectiondelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public Vasectionlistresults VASectionAutoCreate(int pvVano, int pvVasuf, int pvSeqno, string pvSctncode)
      {   
         var result = new Vasectionlistresults();
         
         var pdsvasectionlist = new pdsvasectionlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionAutoCreate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionAutoCreate(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pvSctncode, out pdsvasectionlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionAutoCreate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionlist); 
    
         if (pdsvasectionlist.ttblvasectionlistresults.Count > 0) 
         { 
             result = Vasectionlistresults.BuildVasectionlistresultsFromRow(pdsvasectionlist.ttblvasectionlistresults[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionspec VASectionSpecInitialize(int pvVano, int pvVasuf, int pvSeqno)
      {   
         var result = new Vasectionspec();
         
         var pdsvasectionspec = new pdsvasectionspecDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionSpecInitialize - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionSpecInitialize(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno, out pdsvasectionspec, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionSpecInitialize - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionspec); 
    
         if (pdsvasectionspec.ttblvasectionspec.Count > 0) 
         { 
             result = Vasectionspec.BuildVasectionspecFromRow(pdsvasectionspec.ttblvasectionspec[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionspec VASectionSpecUpdate(Vasectionspec vasectionspec)
      {   
         var result = new Vasectionspec();
         
         var pdsvasectionspec = new pdsvasectionspecDataSet();
            
         DataRow ttblvasectionspecCriteria = pdsvasectionspec.ttblvasectionspec.NewttblvasectionspecRow();
         Vasectionspec.UpdateRowFromVasectionspec(ref ttblvasectionspecCriteria, vasectionspec);
         pdsvasectionspec.ttblvasectionspec.AddttblvasectionspecRow((pdsvasectionspecDataSet.ttblvasectionspecRow)ttblvasectionspecCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionSpecUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionSpecUpdate(ref pdsContext, ref pdsvasectionspec, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionSpecUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionspec); 
    
         if (pdsvasectionspec.ttblvasectionspec.Count > 0) 
         { 
             result = Vasectionspec.BuildVasectionspecFromRow(pdsvasectionspec.ttblvasectionspec[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendin VASectionExtendINInitialize(int pvVano, int pvVasuf, int pvSeqno, string pvMode)
      {   
         var result = new Vasectionextendin();
         
         var pdsvasectionextendin = new pdsvasectionextendinDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendINInitialize - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendINInitialize(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pvMode, out pdsvasectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendINInitialize - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendin); 
    
         if (pdsvasectionextendin.ttblvasectionextendin.Count > 0) 
         { 
             result = Vasectionextendin.BuildVasectionextendinFromRow(pdsvasectionextendin.ttblvasectionextendin[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendin VASectionExtendINValidate(Vasectionextendin vasectionextendin)
      {   
         var result = new Vasectionextendin();
         
         var pdsvasectionextendin = new pdsvasectionextendinDataSet();
            
         DataRow ttblvasectionextendinCriteria = pdsvasectionextendin.ttblvasectionextendin.NewttblvasectionextendinRow();
         Vasectionextendin.UpdateRowFromVasectionextendin(ref ttblvasectionextendinCriteria, vasectionextendin);
         pdsvasectionextendin.ttblvasectionextendin.AddttblvasectionextendinRow((pdsvasectionextendinDataSet.ttblvasectionextendinRow)ttblvasectionextendinCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendINValidate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendINValidate(ref pdsContext, ref pdsvasectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendINValidate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendin); 
    
         if (pdsvasectionextendin.ttblvasectionextendin.Count > 0) 
         { 
             result = Vasectionextendin.BuildVasectionextendinFromRow(pdsvasectionextendin.ttblvasectionextendin[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendin VASectionExtendINUpdate(Vasectionextendin vasectionextendin)
      {   
         var result = new Vasectionextendin();
         
         var pdsvasectionextendin = new pdsvasectionextendinDataSet();
            
         DataRow ttblvasectionextendinCriteria = pdsvasectionextendin.ttblvasectionextendin.NewttblvasectionextendinRow();
         Vasectionextendin.UpdateRowFromVasectionextendin(ref ttblvasectionextendinCriteria, vasectionextendin);
         pdsvasectionextendin.ttblvasectionextendin.AddttblvasectionextendinRow((pdsvasectionextendinDataSet.ttblvasectionextendinRow)ttblvasectionextendinCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendINUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendINUpdate(ref pdsContext, ref pdsvasectionextendin, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendINUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendin); 
    
         if (pdsvasectionextendin.ttblvasectionextendin.Count > 0) 
         { 
             result = Vasectionextendin.BuildVasectionextendinFromRow(pdsvasectionextendin.ttblvasectionextendin[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendex VASectionExtendEXInitialize(int pvVano, int pvVasuf, int pvSeqno, string pvMode)
      {   
         var result = new Vasectionextendex();
         
         var pdsvasectionextendex = new pdsvasectionextendexDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendEXInitialize - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendEXInitialize(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pvMode, out pdsvasectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendEXInitialize - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendex); 
    
         if (pdsvasectionextendex.ttblvasectionextendex.Count > 0) 
         { 
             result = Vasectionextendex.BuildVasectionextendexFromRow(pdsvasectionextendex.ttblvasectionextendex[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendex VASectionExtendEXValidate(Vasectionextendex vasectionextendex)
      {   
         var result = new Vasectionextendex();
         
         var pdsvasectionextendex = new pdsvasectionextendexDataSet();
            
         DataRow ttblvasectionextendexCriteria = pdsvasectionextendex.ttblvasectionextendex.NewttblvasectionextendexRow();
         Vasectionextendex.UpdateRowFromVasectionextendex(ref ttblvasectionextendexCriteria, vasectionextendex);
         pdsvasectionextendex.ttblvasectionextendex.AddttblvasectionextendexRow((pdsvasectionextendexDataSet.ttblvasectionextendexRow)ttblvasectionextendexCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendEXValidate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendEXValidate(ref pdsContext, ref pdsvasectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendEXValidate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendex); 
    
         if (pdsvasectionextendex.ttblvasectionextendex.Count > 0) 
         { 
             result = Vasectionextendex.BuildVasectionextendexFromRow(pdsvasectionextendex.ttblvasectionextendex[0]);
         } 
              
          
         return result;
          
      }

      public Vasectionextendex VASectionExtendEXUpdate(Vasectionextendex vasectionextendex)
      {   
         var result = new Vasectionextendex();
         
         var pdsvasectionextendex = new pdsvasectionextendexDataSet();
            
         DataRow ttblvasectionextendexCriteria = pdsvasectionextendex.ttblvasectionextendex.NewttblvasectionextendexRow();
         Vasectionextendex.UpdateRowFromVasectionextendex(ref ttblvasectionextendexCriteria, vasectionextendex);
         pdsvasectionextendex.ttblvasectionextendex.AddttblvasectionextendexRow((pdsvasectionextendexDataSet.ttblvasectionextendexRow)ttblvasectionextendexCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionExtendEXUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionExtendEXUpdate(ref pdsContext, ref pdsvasectionextendex, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionExtendEXUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionextendex); 
    
         if (pdsvasectionextendex.ttblvasectionextendex.Count > 0) 
         { 
             result = Vasectionextendex.BuildVasectionextendexFromRow(pdsvasectionextendex.ttblvasectionextendex[0]);
         } 
              
          
         return result;
          
      }

      public void VASectionCreatePO(int pvVano, int pvVasuf)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionCreatePO - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionCreatePO(ref pdsContext,  pvVano,  pvVasuf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionCreatePO - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public void VASectionCancelReopen(int pvVano, int pvVasuf, int pvSeqno)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionCancelReopen - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionCancelReopen(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionCancelReopen - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public AsvasectionVASectionTieRetrieveResponseAPI VASectionTieRetrieve(int pvVano, int pvVasuf, int pvSeqno)
      {   
         var result = new AsvasectionVASectionTieRetrieveResponseAPI();
         
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VASectionTieRetrieve - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionTieRetrieve(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno, out pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionTieRetrieve - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelinetie); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsvasectionVASectionTieLeaveFieldResponseAPI VASectionTieLeaveField(AsvasectionVASectionTieLeaveFieldRequestAPI AsvasectionVASectionTieLeaveFieldRequestAPI)
      {   
         var result = new AsvasectionVASectionTieLeaveFieldResponseAPI();
         
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvasectionVASectionTieLeaveFieldRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         var  pvVano = AsvasectionVASectionTieLeaveFieldRequestAPI.pvVano;
            
         var  pvVasuf = AsvasectionVASectionTieLeaveFieldRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvasectionVASectionTieLeaveFieldRequestAPI.pvSeqno;
            
         var  pvFieldname = AsvasectionVASectionTieLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("VASectionTieLeaveField - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionTieLeaveField(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pvFieldname, ref pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionTieLeaveField - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelinetie); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Messaging> VASectionTieUpdate(AsvasectionVASectionTieUpdateRequestAPI AsvasectionVASectionTieUpdateRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvasectionVASectionTieUpdateRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         var  pvVano = AsvasectionVASectionTieUpdateRequestAPI.pvVano;
            
         var  pvVasuf = AsvasectionVASectionTieUpdateRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvasectionVASectionTieUpdateRequestAPI.pvSeqno;
            
         
         NLogLoggerP.Trace("VASectionTieUpdate - Asvasection - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvasectionproxy = this.proxyAppObject.CreatePO_asvasectionproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvasectionproxy.VASectionTieUpdate(ref pdsContext,  pvVano,  pvVasuf,  pvSeqno,  pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VASectionTieUpdate - Asvasection - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelinetie); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  