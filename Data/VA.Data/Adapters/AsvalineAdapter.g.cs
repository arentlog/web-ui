//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsvalinelist;
   using Models.Pdsmessaging;
   using Models.Pdsvalineaddchg;
   using Models.Pdsvalinehist;
   using Models.Pdsvalaborline;
   using Models.Pdsvalaborlinedelete;
   using Models.Pdsvanonstockvalidate;
   using Models.Pdsvalinelinetie;
   using Models.Complex;

   public partial class AsvalineAdapter : AdapterBase<pdsContextDataSet>
   {
      private VAProxyAppObject proxyAppObject;
      
      public AsvalineAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsvalineAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsvalineVALineRetrieveResponseAPI VALineRetrieve(Valinelistcriteria valinelistcriteria)
      {   
         var result = new AsvalineVALineRetrieveResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalinelistcriteriaCriteria = pdsvalinelist.ttblvalinelistcriteria.NewttblvalinelistcriteriaRow();
         Valinelistcriteria.UpdateRowFromValinelistcriteria(ref ttblvalinelistcriteriaCriteria, valinelistcriteria);
         pdsvalinelist.ttblvalinelistcriteria.AddttblvalinelistcriteriaRow((pdsvalinelistDataSet.ttblvalinelistcriteriaRow)ttblvalinelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VALineRetrieve - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineRetrieve(ref pdsContext, ref pdsvalinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineRetrieve - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinelist.ttblvalinelistresults)
         {
            result.valinelistresults.Add(Valinelistresults.BuildValinelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsvalineVALineInitializeUpdateResponseAPI VALineInitializeUpdate(AsvalineVALineInitializeUpdateRequestAPI AsvalineVALineInitializeUpdateRequestAPI)
      {   
         var result = new AsvalineVALineInitializeUpdateResponseAPI();
         
         var pdsvalineaddchg = new pdsvalineaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  pvFunctionnm = AsvalineVALineInitializeUpdateRequestAPI.pvFunctionnm;
            
         var  pvVano = AsvalineVALineInitializeUpdateRequestAPI.pvVano;
            
         var  pvVasuf = AsvalineVALineInitializeUpdateRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvalineVALineInitializeUpdateRequestAPI.pvSeqno;
            
         var  pvLineno = AsvalineVALineInitializeUpdateRequestAPI.pvLineno;
            
         
         NLogLoggerP.Trace("VALineInitializeUpdate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineInitializeUpdate(ref pdsContext,  pvFunctionnm,  pvVano,  pvVasuf,  pvSeqno,  pvLineno, out pdsvalineaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineInitializeUpdate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalineaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalineaddchg.ttblvalineaddchg.Count > 0)
         {
            result.valineaddchg = Valineaddchg.BuildValineaddchgFromRow(pdsvalineaddchg.ttblvalineaddchg[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineInitializeAddResponseAPI VALineInitializeAdd(AsvalineVALineInitializeAddRequestAPI AsvalineVALineInitializeAddRequestAPI)
      {   
         var result = new AsvalineVALineInitializeAddResponseAPI();
         
         var pdsvalineaddchg = new pdsvalineaddchgDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  pvFunctionnm = AsvalineVALineInitializeAddRequestAPI.pvFunctionnm;
            
         var  pvVano = AsvalineVALineInitializeAddRequestAPI.pvVano;
            
         var  pvVasuf = AsvalineVALineInitializeAddRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvalineVALineInitializeAddRequestAPI.pvSeqno;
            
         
         NLogLoggerP.Trace("VALineInitializeAdd - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineInitializeAdd(ref pdsContext,  pvFunctionnm,  pvVano,  pvVasuf,  pvSeqno, out pdsvalineaddchg, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineInitializeAdd - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalineaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalineaddchg.ttblvalineaddchg.Count > 0)
         {
            result.valineaddchg = Valineaddchg.BuildValineaddchgFromRow(pdsvalineaddchg.ttblvalineaddchg[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineLeaveFieldResponseAPI VALineLeaveField(AsvalineVALineLeaveFieldRequestAPI AsvalineVALineLeaveFieldRequestAPI)
      {   
         var result = new AsvalineVALineLeaveFieldResponseAPI();
         
         var pdsvalineaddchg = new pdsvalineaddchgDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalineaddchgRow = pdsvalineaddchg.ttblvalineaddchg.NewttblvalineaddchgRow();
         Valineaddchg.UpdateRowFromValineaddchg(ref ttblvalineaddchgRow, AsvalineVALineLeaveFieldRequestAPI.valineaddchg);
         pdsvalineaddchg.ttblvalineaddchg.AddttblvalineaddchgRow((pdsvalineaddchgDataSet.ttblvalineaddchgRow)ttblvalineaddchgRow);
          
         var  pvFunctionnm = AsvalineVALineLeaveFieldRequestAPI.pvFunctionnm;
            
         var  pvFieldname = AsvalineVALineLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("VALineLeaveField - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineLeaveField(ref pdsContext,  pvFunctionnm,  pvFieldname, ref pdsvalineaddchg, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineLeaveField - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalineaddchg); 
    
         if (pdsvalineaddchg.ttblvalineaddchg.Count > 0)
         {
            result.valineaddchg = Valineaddchg.BuildValineaddchgFromRow(pdsvalineaddchg.ttblvalineaddchg[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsvalineVALineUpdateResponseAPI VALineUpdate(AsvalineVALineUpdateRequestAPI AsvalineVALineUpdateRequestAPI)
      {   
         var result = new AsvalineVALineUpdateResponseAPI();
         
         var pdsvalineaddchg = new pdsvalineaddchgDataSet();
            
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalineaddchgRow = pdsvalineaddchg.ttblvalineaddchg.NewttblvalineaddchgRow();
         Valineaddchg.UpdateRowFromValineaddchg(ref ttblvalineaddchgRow, AsvalineVALineUpdateRequestAPI.valineaddchg);
         pdsvalineaddchg.ttblvalineaddchg.AddttblvalineaddchgRow((pdsvalineaddchgDataSet.ttblvalineaddchgRow)ttblvalineaddchgRow);
          
         var  pvFunctionnm = AsvalineVALineUpdateRequestAPI.pvFunctionnm;
            
         var  pvVano = AsvalineVALineUpdateRequestAPI.pvVano;
            
         var  pvVasuf = AsvalineVALineUpdateRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvalineVALineUpdateRequestAPI.pvSeqno;
            
         
         NLogLoggerP.Trace("VALineUpdate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineUpdate(ref pdsContext,  pvFunctionnm,  pvVano,  pvVasuf,  pvSeqno, ref pdsvalineaddchg, out pdsvalinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineUpdate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalineaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalineaddchg.ttblvalineaddchg.Count > 0)
         {
            result.valineaddchg = Valineaddchg.BuildValineaddchgFromRow(pdsvalineaddchg.ttblvalineaddchg[0]);
         }
                    
         if (pdsvalinelist.ttblvalinelistcriteria.Count > 0)
         {
            result.valinelistcriteria = Valinelistcriteria.BuildValinelistcriteriaFromRow(pdsvalinelist.ttblvalinelistcriteria[0]);
         }
                    
         foreach (DataRow row in pdsvalinelist.ttblvalinelistresults)
         {
            result.valinelistresults.Add(Valinelistresults.BuildValinelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsvalineVALineAddResponseAPI VALineAdd(AsvalineVALineAddRequestAPI AsvalineVALineAddRequestAPI)
      {   
         var result = new AsvalineVALineAddResponseAPI();
         
         var pdsvalineaddchg = new pdsvalineaddchgDataSet();
            
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalineaddchgRow = pdsvalineaddchg.ttblvalineaddchg.NewttblvalineaddchgRow();
         Valineaddchg.UpdateRowFromValineaddchg(ref ttblvalineaddchgRow, AsvalineVALineAddRequestAPI.valineaddchg);
         pdsvalineaddchg.ttblvalineaddchg.AddttblvalineaddchgRow((pdsvalineaddchgDataSet.ttblvalineaddchgRow)ttblvalineaddchgRow);
          
         var  pvFunctionnm = AsvalineVALineAddRequestAPI.pvFunctionnm;
            
         var  pvVano = AsvalineVALineAddRequestAPI.pvVano;
            
         var  pvVasuf = AsvalineVALineAddRequestAPI.pvVasuf;
            
         var  pvSeqno = AsvalineVALineAddRequestAPI.pvSeqno;
            
         
         NLogLoggerP.Trace("VALineAdd - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineAdd(ref pdsContext,  pvFunctionnm,  pvVano,  pvVasuf,  pvSeqno, ref pdsvalineaddchg, out pdsvalinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineAdd - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalineaddchg); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalineaddchg.ttblvalineaddchg.Count > 0)
         {
            result.valineaddchg = Valineaddchg.BuildValineaddchgFromRow(pdsvalineaddchg.ttblvalineaddchg[0]);
         }
                    
         if (pdsvalinelist.ttblvalinelistcriteria.Count > 0)
         {
            result.valinelistcriteria = Valinelistcriteria.BuildValinelistcriteriaFromRow(pdsvalinelist.ttblvalinelistcriteria[0]);
         }
                    
         foreach (DataRow row in pdsvalinelist.ttblvalinelistresults)
         {
            result.valinelistresults.Add(Valinelistresults.BuildValinelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> VALineDelete(Valinelistresults valinelistresults)
      {   
         var results = new List<Messaging>();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalinelistresultsCriteria = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
         Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsCriteria, valinelistresults);
         pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VALineDelete - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineDelete(ref pdsContext,  pdsvalinelist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineDelete - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvalineVALineHistoryRetrieveResponseAPI VALineHistoryRetrieve(Valinehistcriteria valinehistcriteria)
      {   
         var result = new AsvalineVALineHistoryRetrieveResponseAPI();
         
         var pdsvalinehist = new pdsvalinehistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalinehistcriteriaCriteria = pdsvalinehist.ttblvalinehistcriteria.NewttblvalinehistcriteriaRow();
         Valinehistcriteria.UpdateRowFromValinehistcriteria(ref ttblvalinehistcriteriaCriteria, valinehistcriteria);
         pdsvalinehist.ttblvalinehistcriteria.AddttblvalinehistcriteriaRow((pdsvalinehistDataSet.ttblvalinehistcriteriaRow)ttblvalinehistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VALineHistoryRetrieve - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineHistoryRetrieve(ref pdsContext, ref pdsvalinehist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineHistoryRetrieve - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinehist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinehist.ttblvalinehist)
         {
            result.valinehist.Add(Valinehist.BuildValinehistFromRow(row));
         }     
          
         return result;
          
      }

      public AsvalineVAELLineLaborITRetrieveResponseAPI VAELLineLaborITRetrieve(Valaborlinecriteria valaborlinecriteria)
      {   
         var result = new AsvalineVAELLineLaborITRetrieveResponseAPI();
         
         var pdsvalaborline = new pdsvalaborlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalaborlinecriteriaCriteria = pdsvalaborline.ttblvalaborlinecriteria.NewttblvalaborlinecriteriaRow();
         Valaborlinecriteria.UpdateRowFromValaborlinecriteria(ref ttblvalaborlinecriteriaCriteria, valaborlinecriteria);
         pdsvalaborline.ttblvalaborlinecriteria.AddttblvalaborlinecriteriaRow((pdsvalaborlineDataSet.ttblvalaborlinecriteriaRow)ttblvalaborlinecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAELLineLaborITRetrieve - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VAELLineLaborITRetrieve(ref pdsContext, ref pdsvalaborline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAELLineLaborITRetrieve - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalaborline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalaborline.ttblvalaborline)
         {
            result.valaborline.Add(Valaborline.BuildValaborlineFromRow(row));
         }     
          
         return result;
          
      }

      public AsvalineVAELLineLaborITUpdateResponseAPI VAELLineLaborITUpdate(AsvalineVAELLineLaborITUpdateRequestAPI AsvalineVAELLineLaborITUpdateRequestAPI)
      {   
         var result = new AsvalineVAELLineLaborITUpdateResponseAPI();
         
         var pdsvalaborline = new pdsvalaborlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvalineVAELLineLaborITUpdateRequestAPI.valaborline)
         {
            DataRow ttblvalaborlineRow = pdsvalaborline.ttblvalaborline.NewttblvalaborlineRow();
            Valaborline.UpdateRowFromValaborline(ref ttblvalaborlineRow, obj);
            pdsvalaborline.ttblvalaborline.AddttblvalaborlineRow((pdsvalaborlineDataSet.ttblvalaborlineRow)ttblvalaborlineRow);
         }
          
         DataRow ttblvalaborlinecriteriaRow = pdsvalaborline.ttblvalaborlinecriteria.NewttblvalaborlinecriteriaRow();
         Valaborlinecriteria.UpdateRowFromValaborlinecriteria(ref ttblvalaborlinecriteriaRow, AsvalineVAELLineLaborITUpdateRequestAPI.valaborlinecriteria);
         pdsvalaborline.ttblvalaborlinecriteria.AddttblvalaborlinecriteriaRow((pdsvalaborlineDataSet.ttblvalaborlinecriteriaRow)ttblvalaborlinecriteriaRow);
          
         
         NLogLoggerP.Trace("VAELLineLaborITUpdate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VAELLineLaborITUpdate(ref pdsContext, ref pdsvalaborline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAELLineLaborITUpdate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalaborline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalaborline.ttblvalaborline)
         {
            result.valaborline.Add(Valaborline.BuildValaborlineFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Messaging> VAELLineLaborITDelete(Valaborlinedelete valaborlinedelete)
      {   
         var results = new List<Messaging>();
         
         var pdsvalaborlinedelete = new pdsvalaborlinedeleteDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblvalaborlinedeleteCriteria = pdsvalaborlinedelete.ttblvalaborlinedelete.NewttblvalaborlinedeleteRow();
         Valaborlinedelete.UpdateRowFromValaborlinedelete(ref ttblvalaborlinedeleteCriteria, valaborlinedelete);
         pdsvalaborlinedelete.ttblvalaborlinedelete.AddttblvalaborlinedeleteRow((pdsvalaborlinedeleteDataSet.ttblvalaborlinedeleteRow)ttblvalaborlinedeleteCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VAELLineLaborITDelete - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VAELLineLaborITDelete(ref pdsContext,  pdsvalaborlinedelete, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAELLineLaborITDelete - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalaborlinedelete); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsvalineVAELLaborLoadChargesResponseAPI VAELLaborLoadCharges(AsvalineVAELLaborLoadChargesRequestAPI AsvalineVAELLaborLoadChargesRequestAPI)
      {   
         var result = new AsvalineVAELLaborLoadChargesResponseAPI();
         
         var pdsvalaborline = new pdsvalaborlineDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsvalineVAELLaborLoadChargesRequestAPI.valaborline)
         {
            DataRow ttblvalaborlineRow = pdsvalaborline.ttblvalaborline.NewttblvalaborlineRow();
            Valaborline.UpdateRowFromValaborline(ref ttblvalaborlineRow, obj);
            pdsvalaborline.ttblvalaborline.AddttblvalaborlineRow((pdsvalaborlineDataSet.ttblvalaborlineRow)ttblvalaborlineRow);
         }
          
         DataRow ttblvalaborlinecriteriaRow = pdsvalaborline.ttblvalaborlinecriteria.NewttblvalaborlinecriteriaRow();
         Valaborlinecriteria.UpdateRowFromValaborlinecriteria(ref ttblvalaborlinecriteriaRow, AsvalineVAELLaborLoadChargesRequestAPI.valaborlinecriteria);
         pdsvalaborline.ttblvalaborlinecriteria.AddttblvalaborlinecriteriaRow((pdsvalaborlineDataSet.ttblvalaborlinecriteriaRow)ttblvalaborlinecriteriaRow);
          
         
         NLogLoggerP.Trace("VAELLaborLoadCharges - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VAELLaborLoadCharges(ref pdsContext, ref pdsvalaborline, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VAELLaborLoadCharges - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalaborline); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalaborline.ttblvalaborline)
         {
            result.valaborline.Add(Valaborline.BuildValaborlineFromRow(row));
         }     
          
         return result;
          
      }

      public void VANonStockValidate(Vanonstockvalidate vanonstockvalidate)
      {   
         
         var pdsvanonstockvalidate = new pdsvanonstockvalidateDataSet();
            
         DataRow ttblvanonstockvalidateCriteria = pdsvanonstockvalidate.ttblvanonstockvalidate.NewttblvanonstockvalidateRow();
         Vanonstockvalidate.UpdateRowFromVanonstockvalidate(ref ttblvanonstockvalidateCriteria, vanonstockvalidate);
         pdsvanonstockvalidate.ttblvanonstockvalidate.AddttblvanonstockvalidateRow((pdsvanonstockvalidateDataSet.ttblvanonstockvalidateRow)ttblvanonstockvalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VANonStockValidate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VANonStockValidate(ref pdsContext, ref pdsvanonstockvalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VANonStockValidate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvanonstockvalidate);
      }

      public AsvalineVALineTieRetrieveResponseAPI VALineTieRetrieve(IEnumerable<Valinelistresults> valinelistresults)
      {   
         var result = new AsvalineVALineTieRetrieveResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in valinelistresults)
         {
             DataRow row = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
             Valinelistresults.UpdateRowFromValinelistresults(ref row, obj);
             pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VALineTieRetrieve - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineTieRetrieve(ref pdsContext,  pdsvalinelist, out pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineTieRetrieve - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineTieLeaveFieldResponseAPI VALineTieLeaveField(AsvalineVALineTieLeaveFieldRequestAPI AsvalineVALineTieLeaveFieldRequestAPI)
      {   
         var result = new AsvalineVALineTieLeaveFieldResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvalineVALineTieLeaveFieldRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         foreach (var obj in AsvalineVALineTieLeaveFieldRequestAPI.valinelistresults)
         {
            DataRow ttblvalinelistresultsRow = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
            Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsRow, obj);
            pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsRow);
         }
          
         var  pvFieldname = AsvalineVALineTieLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("VALineTieLeaveField - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineTieLeaveField(ref pdsContext,  pvFieldname,  pdsvalinelist, ref pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineTieLeaveField - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineTieUpdateResponseAPI VALineTieUpdate(AsvalineVALineTieUpdateRequestAPI AsvalineVALineTieUpdateRequestAPI)
      {   
         var result = new AsvalineVALineTieUpdateResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvalineVALineTieUpdateRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         foreach (var obj in AsvalineVALineTieUpdateRequestAPI.valinelistresults)
         {
            DataRow ttblvalinelistresultsRow = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
            Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsRow, obj);
            pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsRow);
         }
          
         
         NLogLoggerP.Trace("VALineTieUpdate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineTieUpdate(ref pdsContext, ref pdsvalinelist,  pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineTieUpdate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         foreach (DataRow row in pdsvalinelist.ttblvalinelistresults)
         {
            result.valinelistresults.Add(Valinelistresults.BuildValinelistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AsvalineVALineBackTieRetrieveResponseAPI VALineBackTieRetrieve(AsvalineVALineBackTieRetrieveRequestAPI AsvalineVALineBackTieRetrieveRequestAPI)
      {   
         var result = new AsvalineVALineBackTieRetrieveResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvalineVALineBackTieRetrieveRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         DataRow ttblvalinelistresultsRow = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
         Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsRow, AsvalineVALineBackTieRetrieveRequestAPI.valinelistresults);
         pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsRow);
          
         
         NLogLoggerP.Trace("VALineBackTieRetrieve - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineBackTieRetrieve(ref pdsContext,  pdsvalinelist, ref pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineBackTieRetrieve - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineBackTieLeaveFieldResponseAPI VALineBackTieLeaveField(AsvalineVALineBackTieLeaveFieldRequestAPI AsvalineVALineBackTieLeaveFieldRequestAPI)
      {   
         var result = new AsvalineVALineBackTieLeaveFieldResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvalineVALineBackTieLeaveFieldRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         DataRow ttblvalinelistresultsRow = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
         Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsRow, AsvalineVALineBackTieLeaveFieldRequestAPI.valinelistresults);
         pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsRow);
          
         var  pvFieldname = AsvalineVALineBackTieLeaveFieldRequestAPI.pvFieldname;
            
         
         NLogLoggerP.Trace("VALineBackTieLeaveField - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineBackTieLeaveField(ref pdsContext,  pvFieldname,  pdsvalinelist, ref pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineBackTieLeaveField - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      public AsvalineVALineBackTieUpdateResponseAPI VALineBackTieUpdate(AsvalineVALineBackTieUpdateRequestAPI AsvalineVALineBackTieUpdateRequestAPI)
      {   
         var result = new AsvalineVALineBackTieUpdateResponseAPI();
         
         var pdsvalinelist = new pdsvalinelistDataSet();
            
         var pdsvalinelinetie = new pdsvalinelinetieDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblvalinelinetieRow = pdsvalinelinetie.ttblvalinelinetie.NewttblvalinelinetieRow();
         Valinelinetie.UpdateRowFromValinelinetie(ref ttblvalinelinetieRow, AsvalineVALineBackTieUpdateRequestAPI.valinelinetie);
         pdsvalinelinetie.ttblvalinelinetie.AddttblvalinelinetieRow((pdsvalinelinetieDataSet.ttblvalinelinetieRow)ttblvalinelinetieRow);
          
         DataRow ttblvalinelistresultsRow = pdsvalinelist.ttblvalinelistresults.NewttblvalinelistresultsRow();
         Valinelistresults.UpdateRowFromValinelistresults(ref ttblvalinelistresultsRow, AsvalineVALineBackTieUpdateRequestAPI.valinelistresults);
         pdsvalinelist.ttblvalinelistresults.AddttblvalinelistresultsRow((pdsvalinelistDataSet.ttblvalinelistresultsRow)ttblvalinelistresultsRow);
          
         
         NLogLoggerP.Trace("VALineBackTieUpdate - Asvaline - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsvalineproxy = this.proxyAppObject.CreatePO_asvalineproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsvalineproxy.VALineBackTieUpdate(ref pdsContext,  pdsvalinelist, ref pdsvalinelinetie, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VALineBackTieUpdate - Asvaline - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalinelist); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         if (pdsvalinelinetie.ttblvalinelinetie.Count > 0)
         {
            result.valinelinetie = Valinelinetie.BuildValinelinetieFromRow(pdsvalinelinetie.ttblvalinelinetie[0]);
         }
                    
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  