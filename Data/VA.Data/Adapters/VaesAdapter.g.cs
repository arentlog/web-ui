//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.VA.Data.Adapters
{
   using com.infor.sxproxy.vaproxy;
   using com.infor.sxproxy.vaproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsvaes;
   using Models.Pdsvasectionlookup;
   using Models.Complex;

   public partial class VaesAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsvaes";
      private VAProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> vaesTableControlKey;
		private readonly Tuple<string, string> vaesdefaultsTableControlKey;
      private pdsvaesDataSet dataSet;
        
      public VaesAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new VAProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsvaesDataSet() { DataSetName = DataSetName };
            this.vaesTableControlKey = this.dataSet.ttblvaes.GetTableControlParametersKey();
            this.vaesdefaultsTableControlKey = this.dataSet.ttblvaesdefaults.GetTableControlParametersKey();
            if (!this.tempTableControlParameters.ContainsKey(this.vaesTableControlKey))
            {
               this.CreateTableControlParameters(this.vaesTableControlKey);
            }
            if (!this.tempTableControlParameters.ContainsKey(this.vaesdefaultsTableControlKey))
            {
               this.CreateTableControlParameters(this.vaesdefaultsTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in VaesAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, bool fillMode, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Vaesproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, fillMode, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poVaesproxy = this.proxyAppObject.CreatePO_vaesproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poVaesproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Vaesproxy - After Call");
      }
      
      private void SetAndFetch(string where, bool fillMode, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.vaesTableControlKey, where, batchsize, fldList);
         this.SetFetchWhereParameters(this.vaesdefaultsTableControlKey, fillMode);
         this.SetTableParametersOnContext(this.vaesTableControlKey, true);
         this.SetTableParametersOnContext(this.vaesdefaultsTableControlKey);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Vaesproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poVaesproxy = this.proxyAppObject.CreatePO_vaesproxy())
               {
                  this.SetRequiredContextParameters();
                  poVaesproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Vaesproxy - After Call");
      }
   

      public Vaes GetByRowId(string rowId, bool fillMode, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fillMode, fldList);
         Vaes vaes = null;
         if (row != null)
         {
             vaes = this.BuildFromRow(row);
         }
         return vaes;
      }
   
      private DataRow GetRowByRowId(string rowId, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(vaes) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), fillMode, 1, fldList);
         return this.dataSet.ttblvaes.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Vaes> GetListByRowIdList(List<string> rowIds, bool fillMode, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(vaes)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), fillMode, batchsize, fldList);
      }

      protected Vaes Fetch(string where, bool fillMode, int batchsize, string fldList)
      {
         this.FetchWhere(where, fillMode, batchsize, fldList);
         var row = this.dataSet.ttblvaes.AsEnumerable().SingleOrDefault();
         Vaes vaes = null;
         if (row != null)
         {
             vaes = this.BuildFromRow(row);
         }
         return vaes;
      }
	  
	  
	  public IEnumerable<Vaes> GetListByRowpointers(List<string> rowpointers, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         if (rowpointers != null && rowpointers.Count > 0)
         {
           foreach (var rowpointer in rowpointers)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("vaes.rowpointer='{0}'", rowpointer);
           }
         }
         return this.GetList(where.ToString(), fillMode, rowpointers.Count, fldList);
      }
	  
	  private DataRow GetRowByRowpointer(string rowpointer, bool fillMode, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("vaes.rowpointer = '{0}'", rowpointer);
         this.FetchWhere(where.ToString(), fillMode, 1, fldList);
         return this.dataSet.ttblvaes.AsEnumerable().SingleOrDefault();
      }
      public IEnumerable<Vaes> GetListAllByCono(int cono, bool fillMode, int batchsize, string fldList)
      {   
         cono = cono == 0 ? this.connection.CompanyNumber : cono;
         var sb = new StringBuilder();
         sb.AppendFormat("vaes.cono = {0}", cono);
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Vaes> GetList(string where, bool fillMode, int batchsize, string fldList)
      {
         this.FetchWhere(where, fillMode, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttblvaes.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Vaes Get(int cono, int vano, int vasuf, int seqno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("vaes.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (vano != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vano = {0}", vano);
         }
         if (vasuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vasuf = {0}", vasuf);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.Fetch(where, fillMode, batchsize, fldList);
      }
  
      public IEnumerable<Vaes> GetListByJrnl(int cono, int jrnlno, int setno, int vano, int vasuf, int seqno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("vaes.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (jrnlno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.jrnlno = {0}", jrnlno);
         }
         if (setno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.setno = {0}", setno);
         }
         if (vano != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vano = {0}", vano);
         }
         if (vasuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vasuf = {0}", vasuf);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Vaes> GetListByProcess(int cono, bool completefl, bool processfl, string processinit, string processproc, int vano, int vasuf, int seqno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("vaes.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         sb.AppendFormatWithEscape(" AND vaes.completefl = {0}", completefl);
         sb.AppendFormatWithEscape(" AND vaes.processfl = {0}", processfl);
         if (!string.IsNullOrEmpty(processinit)) 
         {
             sb.AppendFormatWithEscape(" AND vaes.processinit = '{0}'", processinit);
         }
         if (!string.IsNullOrEmpty(processproc)) 
         {
             sb.AppendFormatWithEscape(" AND vaes.processproc = '{0}'", processproc);
         }
         if (vano != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vano = {0}", vano);
         }
         if (vasuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vasuf = {0}", vasuf);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public Vaes GetByRowpointer(string rowpointer, bool fillMode, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowpointer)) 
         {
             sb.AppendFormatWithEscape("vaes.rowpointer = '{0}'", rowpointer);
         }
         var where = sb.ToString();
         return this.Fetch(where, fillMode, 1, fldList);
      }

      public IEnumerable<Vaes> GetListBySection(int cono, bool completefl, string sctntype, int vano, int vasuf, int seqno, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("vaes.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         sb.AppendFormatWithEscape(" AND vaes.completefl = {0}", completefl);
         if (!string.IsNullOrEmpty(sctntype)) 
         {
             sb.AppendFormatWithEscape(" AND vaes.sctntype = '{0}'", sctntype);
         }
         if (vano != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vano = {0}", vano);
         }
         if (vasuf != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.vasuf = {0}", vasuf);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND vaes.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public IEnumerable<Vaes> GetListByTransdttmz(DateTime? transdttmz, bool fillMode, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transdttmz != null) 
         {
             sb.AppendFormatWithEscape("vaes.transdttmz = '{0}'", transdttmz);
         }
         var where = sb.ToString();
         return this.GetList(where, fillMode, batchsize, fldList);
      }

      public Vaes BuildFromRow(DataRow row)
      {
         var returnRecord = Vaes.BuildVaesFromRow(row);
         returnRecord = this.BuildExtraFromRow<Vaes>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Vaes record)
      {
         Vaes.UpdateRowFromVaes(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Vaes Insert(Vaes record)
      {
         DataRow row = this.dataSet.ttblvaes.NewttblvaesRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttblvaes.AddttblvaesRow((pdsvaesDataSet.ttblvaesRow)row);
         this.SaveChanges();
         return this.dataSet.ttblvaes.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblvaes.Rows[0]) : null;
      }
  

      public Vaes Update(Vaes record)
      {
        var row = this.GetRowByRowpointer(record.rowpointer, false, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttblvaes.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblvaes.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Vaes record)
      {
         var row = this.GetRowByRowpointer(record.rowpointer, false, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttblvaes.NewttblvaesRow();
            Vaes.BuildMinimalRow(ref row, record);
            this.dataSet.ttblvaes.AddttblvaesRow((pdsvaesDataSet.ttblvaesRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }
 
      private void DeleteUseRowID(Vaes record)
      {
         var row = this.GetRowByRowId(record.rowID, false, string.Empty);
         if (row == null)
         {
            row = this.dataSet.ttblvaes.NewttblvaesRow();
            Vaes.BuildMinimalRow(ref row, record);
            this.dataSet.ttblvaes.AddttblvaesRow((pdsvaesDataSet.ttblvaesRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Vaes() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.DeleteUseRowID(rec);
            }
         }
      }
	  
 
      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         if (rowpointers != null)
         {
            var recList = rowpointers.Select(selectRowpointer => new Vaes() { rowpointer = selectRowpointer }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }

      public VaesLookupResponseAPI Lookup(Vasectionlookupcriteria vasectionlookupcriteria)
      {   
         var result = new VaesLookupResponseAPI();
         
         var pdsvasectionlookup = new pdsvasectionlookupDataSet();
            
         DataRow ttblvasectionlookupcriteriaCriteria = pdsvasectionlookup.ttblvasectionlookupcriteria.NewttblvasectionlookupcriteriaRow();
         Vasectionlookupcriteria.UpdateRowFromVasectionlookupcriteria(ref ttblvasectionlookupcriteriaCriteria, vasectionlookupcriteria);
         pdsvasectionlookup.ttblvasectionlookupcriteria.AddttblvasectionlookupcriteriaRow((pdsvasectionlookupDataSet.ttblvasectionlookupcriteriaRow)ttblvasectionlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("Lookup - Vaes - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poVaesproxy = this.proxyAppObject.CreatePO_vaesproxy())
               {
                   this.SetRequiredContextParameters();
                   poVaesproxy.Lookup(ref pdsContext, ref pdsvasectionlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("Lookup - Vaes - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvasectionlookup); 
    
         foreach (DataRow row in pdsvasectionlookup.ttblvasectionlookupresults)
         {
            result.vasectionlookupresults.Add(Vasectionlookupresults.BuildVasectionlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  