//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.TWL.Data.Models.Pdsccitemlots
{
   [ModelName("Infor.Sxe.TWL.Data.Models.Pdsccitemlots.Ccitemlots")]
   public partial class Ccitemlots : ModelBase
   {
      [StringValidationAttribute]
      public string coNum { get; set; }
      [StringValidationAttribute]
      public string whNum { get; set; }
      [StringValidationAttribute]
      public string absNum { get; set; }
      [StringValidationAttribute]
      public string itemDesc { get; set; }
      [StringValidationAttribute]
      public string lot { get; set; }
      public DateTime? soonestExpiration { get; set; }
      public DateTime? latestExpiration { get; set; }
      public int soonestExpirationDays { get; set; }
      public int latestExpirationDays { get; set; }
      public int numLocations { get; set; }
      public decimal totalQuantity { get; set; }
      public int counterForSum { get; set; }
      [StringValidationAttribute]
      public string itemRowID { get; set; }
      [StringValidationAttribute]
      public string inventoryRowID { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Ccitemlots BuildCcitemlotsFromRow(DataRow row)
      {
         Ccitemlots entity = new Ccitemlots();
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.absNum = row.IsNull("abs_num") ? string.Empty : row.Field<string>("abs_num");
         entity.itemDesc = row.IsNull("item_desc") ? string.Empty : row.Field<string>("item_desc");
         entity.lot = row.IsNull("lot") ? string.Empty : row.Field<string>("lot");
         entity.soonestExpiration = row.Field<DateTime?>("soonestExpiration");
         entity.latestExpiration = row.Field<DateTime?>("latestExpiration");
         entity.soonestExpirationDays = row.IsNull("soonestExpirationDays") ? 0 : row.Field<int>("soonestExpirationDays");
         entity.latestExpirationDays = row.IsNull("latestExpirationDays") ? 0 : row.Field<int>("latestExpirationDays");
         entity.numLocations = row.IsNull("numLocations") ? 0 : row.Field<int>("numLocations");
         entity.totalQuantity = row.IsNull("totalQuantity") ? decimal.Zero : row.Field<decimal>("totalQuantity");
         entity.counterForSum = row.IsNull("counterForSum") ? 0 : row.Field<int>("counterForSum");
         entity.itemRowID = row.Field<byte[]>("itemRowID").ToStringEncoded();
         entity.inventoryRowID = row.Field<byte[]>("inventoryRowID").ToStringEncoded();
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromCcitemlots(ref DataRow row, Ccitemlots entity)
      {
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("abs_num", entity.absNum);
         row.SetField("item_desc", entity.itemDesc);
         row.SetField("lot", entity.lot);
         row.SetField("soonestExpiration", entity.soonestExpiration);
         row.SetField("latestExpiration", entity.latestExpiration);
         row.SetField("soonestExpirationDays", entity.soonestExpirationDays);
         row.SetField("latestExpirationDays", entity.latestExpirationDays);
         row.SetField("numLocations", entity.numLocations);
         row.SetField("totalQuantity", entity.totalQuantity);
         row.SetField("counterForSum", entity.counterForSum);
         row.SetField("itemRowID", entity.itemRowID.ToByteArray());
         row.SetField("inventoryRowID", entity.inventoryRowID.ToByteArray());
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
