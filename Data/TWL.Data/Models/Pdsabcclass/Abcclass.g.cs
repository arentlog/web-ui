//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 13370 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using HelpPageErrorSimulator.HelpArea.Areas.HelpPage.ModelDescriptions;
using ServiceInterfaceClient.Attributes;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Interfaces;

namespace Infor.Sxe.TWL.Data.Models.Pdsabcclass
{
   [ModelName("Infor.Sxe.TWL.Data.Models.Pdsabcclass.Abcclass")]
   public partial class Abcclass : ModelBase
   {
      [StringValidationAttribute]
      public string coNum { get; set; }
      [StringValidationAttribute]
      public string whNum { get; set; }
      public int aCountInterval { get; set; }
      public int aCountLoc { get; set; }
      public decimal aCountPercent { get; set; }
      public int bCountInterval { get; set; }
      public int bCountLoc { get; set; }
      public decimal bCountPercent { get; set; }
      [StringValidationAttribute]
      public string countType { get; set; }
      [StringValidationAttribute]
      public string customData1 { get; set; }
      [StringValidationAttribute]
      public string customData2 { get; set; }
      [StringValidationAttribute]
      public string customData3 { get; set; }
      [StringValidationAttribute]
      public string customData4 { get; set; }
      [StringValidationAttribute]
      public string customData5 { get; set; }
      public int cCountInterval { get; set; }
      public int cCountLoc { get; set; }
      public decimal cCountPercent { get; set; }
      public int dCountInterval { get; set; }
      public int dCountLoc { get; set; }
      public decimal dCountPercent { get; set; }
      [StringValidationAttribute]
      public string excludeProdCat { get; set; }
      public int historyInterval { get; set; }
      [StringValidationAttribute]
      public string historyTimeframe { get; set; }
      [StringValidationAttribute]
      public string procCreated { get; set; }
      public int recalcInterval { get; set; }
      public DateTime? recalcLast { get; set; }
      public bool recalcPending { get; set; }
      public DateTime? recalcPendDate { get; set; }
      [StringValidationAttribute]
      public string recalcTimeframe { get; set; }
      [StringValidationAttribute]
      public string recalcType { get; set; }
      public DateTime? nextRecalcDate { get; set; }
      [StringValidationAttribute]
      public string transDate { get; set; }
      [StringValidationAttribute]
      public string transProc { get; set; }
      public int transSecTime { get; set; }
      [StringValidationAttribute]
      public string transUser { get; set; }
      public bool toggleReport { get; set; }
      public bool toggleUpdate { get; set; }
      public bool toggleInclude { get; set; }
      public int iMinAbcQty { get; set; }
      [StringValidationAttribute]
      public string abcRowID { get; set; }
      [StringValidationAttribute]
      public string userfield { get; set; }


      public static Abcclass BuildAbcclassFromRow(DataRow row)
      {
         Abcclass entity = new Abcclass();
         entity.coNum = row.IsNull("co_num") ? string.Empty : row.Field<string>("co_num");
         entity.whNum = row.IsNull("wh_num") ? string.Empty : row.Field<string>("wh_num");
         entity.aCountInterval = row.IsNull("a_count_interval") ? 0 : row.Field<int>("a_count_interval");
         entity.aCountLoc = row.IsNull("a_count_loc") ? 0 : row.Field<int>("a_count_loc");
         entity.aCountPercent = row.IsNull("a_count_percent") ? decimal.Zero : row.Field<decimal>("a_count_percent");
         entity.bCountInterval = row.IsNull("b_count_interval") ? 0 : row.Field<int>("b_count_interval");
         entity.bCountLoc = row.IsNull("b_count_loc") ? 0 : row.Field<int>("b_count_loc");
         entity.bCountPercent = row.IsNull("b_count_percent") ? decimal.Zero : row.Field<decimal>("b_count_percent");
         entity.countType = row.IsNull("count_type") ? string.Empty : row.Field<string>("count_type");
         entity.customData1 = row.IsNull("custom_data1") ? string.Empty : row.Field<string>("custom_data1");
         entity.customData2 = row.IsNull("custom_data2") ? string.Empty : row.Field<string>("custom_data2");
         entity.customData3 = row.IsNull("custom_data3") ? string.Empty : row.Field<string>("custom_data3");
         entity.customData4 = row.IsNull("custom_data4") ? string.Empty : row.Field<string>("custom_data4");
         entity.customData5 = row.IsNull("custom_data5") ? string.Empty : row.Field<string>("custom_data5");
         entity.cCountInterval = row.IsNull("c_count_interval") ? 0 : row.Field<int>("c_count_interval");
         entity.cCountLoc = row.IsNull("c_count_loc") ? 0 : row.Field<int>("c_count_loc");
         entity.cCountPercent = row.IsNull("c_count_percent") ? decimal.Zero : row.Field<decimal>("c_count_percent");
         entity.dCountInterval = row.IsNull("d_count_interval") ? 0 : row.Field<int>("d_count_interval");
         entity.dCountLoc = row.IsNull("d_count_loc") ? 0 : row.Field<int>("d_count_loc");
         entity.dCountPercent = row.IsNull("d_count_percent") ? decimal.Zero : row.Field<decimal>("d_count_percent");
         entity.excludeProdCat = row.IsNull("exclude_prod_cat") ? string.Empty : row.Field<string>("exclude_prod_cat");
         entity.historyInterval = row.IsNull("history_interval") ? 0 : row.Field<int>("history_interval");
         entity.historyTimeframe = row.IsNull("history_timeframe") ? string.Empty : row.Field<string>("history_timeframe");
         entity.procCreated = row.IsNull("proc_created") ? string.Empty : row.Field<string>("proc_created");
         entity.recalcInterval = row.IsNull("recalc_interval") ? 0 : row.Field<int>("recalc_interval");
         entity.recalcLast = row.Field<DateTime?>("recalc_last");
         entity.recalcPending = row.Field<bool>("recalc_pending");
         entity.recalcPendDate = row.Field<DateTime?>("recalc_pend_date");
         entity.recalcTimeframe = row.IsNull("recalc_timeframe") ? string.Empty : row.Field<string>("recalc_timeframe");
         entity.recalcType = row.IsNull("recalc_type") ? string.Empty : row.Field<string>("recalc_type");
         entity.nextRecalcDate = row.Field<DateTime?>("next_recalc_date");
         entity.transDate = row.IsNull("trans_date") ? string.Empty : row.Field<string>("trans_date");
         entity.transProc = row.IsNull("trans_proc") ? string.Empty : row.Field<string>("trans_proc");
         entity.transSecTime = row.IsNull("trans_sec_time") ? 0 : row.Field<int>("trans_sec_time");
         entity.transUser = row.IsNull("trans_user") ? string.Empty : row.Field<string>("trans_user");
         entity.toggleReport = row.Field<bool>("toggle_report");
         entity.toggleUpdate = row.Field<bool>("toggle_update");
         entity.toggleInclude = row.Field<bool>("toggle_include");
         entity.iMinAbcQty = row.IsNull("iMinAbcQty") ? 0 : row.Field<int>("iMinAbcQty");
         entity.abcRowID = row.Field<byte[]>("abcRowID").ToStringEncoded();
         entity.userfield = row.IsNull("userfield") ? string.Empty : row.Field<string>("userfield");
         return entity;
      }

      /// <summary>
      /// Update a database row from a class
      /// </summary>
      public static void UpdateRowFromAbcclass(ref DataRow row, Abcclass entity)
      {
         row.SetField("co_num", entity.coNum);
         row.SetField("wh_num", entity.whNum);
         row.SetField("a_count_interval", entity.aCountInterval);
         row.SetField("a_count_loc", entity.aCountLoc);
         row.SetField("a_count_percent", entity.aCountPercent);
         row.SetField("b_count_interval", entity.bCountInterval);
         row.SetField("b_count_loc", entity.bCountLoc);
         row.SetField("b_count_percent", entity.bCountPercent);
         row.SetField("count_type", entity.countType);
         row.SetField("custom_data1", entity.customData1);
         row.SetField("custom_data2", entity.customData2);
         row.SetField("custom_data3", entity.customData3);
         row.SetField("custom_data4", entity.customData4);
         row.SetField("custom_data5", entity.customData5);
         row.SetField("c_count_interval", entity.cCountInterval);
         row.SetField("c_count_loc", entity.cCountLoc);
         row.SetField("c_count_percent", entity.cCountPercent);
         row.SetField("d_count_interval", entity.dCountInterval);
         row.SetField("d_count_loc", entity.dCountLoc);
         row.SetField("d_count_percent", entity.dCountPercent);
         row.SetField("exclude_prod_cat", entity.excludeProdCat);
         row.SetField("history_interval", entity.historyInterval);
         row.SetField("history_timeframe", entity.historyTimeframe);
         row.SetField("proc_created", entity.procCreated);
         row.SetField("recalc_interval", entity.recalcInterval);
         row.SetField("recalc_last", entity.recalcLast);
         row.SetField("recalc_pending", entity.recalcPending);
         row.SetField("recalc_pend_date", entity.recalcPendDate);
         row.SetField("recalc_timeframe", entity.recalcTimeframe);
         row.SetField("recalc_type", entity.recalcType);
         row.SetField("next_recalc_date", entity.nextRecalcDate);
         row.SetField("trans_date", entity.transDate);
         row.SetField("trans_proc", entity.transProc);
         row.SetField("trans_sec_time", entity.transSecTime);
         row.SetField("trans_user", entity.transUser);
         row.SetField("toggle_report", entity.toggleReport);
         row.SetField("toggle_update", entity.toggleUpdate);
         row.SetField("toggle_include", entity.toggleInclude);
         row.SetField("iMinAbcQty", entity.iMinAbcQty);
         row.SetField("abcRowID", entity.abcRowID.ToByteArray());
         row.SetField("userfield", entity.userfield);

      }
   
   }
}
#pragma warning restore 1591
