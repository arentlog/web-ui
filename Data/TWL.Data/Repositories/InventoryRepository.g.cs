//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Repositories
{
   using Infor.Sxe.TWL.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsinventory;

   public partial class InventoryRepository : RepositoryBase
   {
      private InventoryAdapter adapter;
  
      public InventoryRepository(IProgressConnection connection)
      {
         this.adapter = new InventoryAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public Inventory GetByRowId(string rowId, string fldList)
      {
         return this.adapter.GetByRowId(rowId, fldList);
      }

      public IEnumerable<Inventory> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         return this.adapter.GetListByRowIdList(rowIds, batchsize, fldList);
      }
        
      public Inventory Get(string coNum, string whNum, string absNum, string dateTime, int batchsize, string fldList)
      {
         return this.adapter.Get(coNum, whNum, absNum, dateTime, batchsize, fldList);
      }
      
      public IEnumerable<Inventory> GetList(string where, int batchsize, string fldList)
      {
         return this.adapter.GetList(where, batchsize, fldList);
      }
  
      public IEnumerable<Inventory> GetListByCargocontrol(string cargoControl, int batchsize, string fldList)
      {
         return this.adapter.GetListByCargocontrol(cargoControl, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsBin(string coNum, string whNum, string absNum, string binNum, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhAbsBin(coNum, whNum, absNum, binNum, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsLotExpirationQty(string coNum, string whNum, string absNum, string lot, DateTime? expiration, decimal totalQty, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhAbsLotExpirationQty(coNum, whNum, absNum, lot, expiration, totalQty, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsLotQty(string coNum, string whNum, string absNum, string lot, decimal totalQty, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhAbsLotQty(coNum, whNum, absNum, lot, totalQty, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsQtyFifo(string coNum, string whNum, string absNum, decimal totalQty, string dateTime, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhAbsQtyFifo(coNum, whNum, absNum, totalQty, dateTime, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinAbs(string coNum, string whNum, string binNum, string absNum, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhBinAbs(coNum, whNum, binNum, absNum, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinPalletAbsLot(string coNum, string whNum, string binNum, string palletId, string absNum, string lot, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhBinPalletAbsLot(coNum, whNum, binNum, palletId, absNum, lot, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinRtnFull(string coNum, string whNum, string binNum, string rtnCategory, bool rtnPalletFull, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhBinRtnFull(coNum, whNum, binNum, rtnCategory, rtnPalletFull, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhCyclecount(string coNum, string whNum, bool cycleFlag, int cycleId, string binNum, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhCyclecount(coNum, whNum, cycleFlag, cycleId, binNum, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhPallet(string coNum, string whNum, string palletId, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhPallet(coNum, whNum, palletId, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhStatusAbsLot(string coNum, string whNum, string stockStat, string absNum, string lot, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhStatusAbsLot(coNum, whNum, stockStat, absNum, lot, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhTask(string coNum, string whNum, int taskId, int batchsize, string fldList)
      {
         return this.adapter.GetListByCoWhTask(coNum, whNum, taskId, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListById(int id, int batchsize, string fldList)
      {
         return this.adapter.GetListById(id, batchsize, fldList);
      }

      public Inventory Insert(Inventory record)
      {
         return this.adapter.Insert(record);        
      }
  
      public Inventory Update(Inventory record)
      {
         return this.adapter.Update(record);
      }
  
      public void Delete(Inventory record)
      {
         this.adapter.Delete(record);
      }
  
      public void DeleteListByRowIds(List<string> rowIds)
      {
         this.adapter.DeleteListByRowIds(rowIds);
      }
	  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  