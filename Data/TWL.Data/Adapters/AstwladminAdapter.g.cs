//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Adapters
{
   using com.infor.sxproxy.twlproxy;
   using com.infor.sxproxy.twlproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdspackinglistpocriteria;
   using Models.Pdspackinglistporesults;
   using Models.Pdspackinglistvalidate;
   using Models.Pdspackinglistcreate;
   using Models.Pdspolinedetailcriteria;
   using Models.Pdspolinedetail;
   using Models.Pdspackinglistaddpo;
   using Models.Pdsmessaging;
   using Models.Pdspackinglistdeletepo;
   using Models.Pdsresendtranscriteria;
   using Models.Pdsresendtransdetail;
   using Models.Pdsresendtranssummary;
   using Models.Pdsresendinitsearch;
   using Models.Pdsresendtranslist;
   using Models.Pdsdeletedrplog;
   using Models.Pdsrcvlabelcriteria;
   using Models.Pdsreplotherbuildlist;
   using Models.Pdsrepltopoffbuildlist;
   using Models.Pdsreplclearlist;
   using Models.Pdsreplclearresults;
   using Models.Pdsreplpendingcriteria;
   using Models.Pdsreplpending;
   using Models.Pdsrepltopoffscriteria;
   using Models.Pdsrepltopoffs;
   using Models.Pdsreplothercriteria;
   using Models.Pdsreplother;
   using Models.Pdsccitemscriteria;
   using Models.Pdsccitems;
   using Models.Pdsccitemlots;
   using Models.Pdscclocationscriteria;
   using Models.Pdscclocations;
   using Models.Pdsccbuildimpactcriteria;
   using Models.Pdsccimpact;
   using Models.Pdsccbuildresults;
   using Models.Pdsinventoryids;
   using Models.Pdsccemployees;
   using Models.Pdsphysinvcriteria;
   using Models.Pdsphysinvsummary;
   using Models.Pdsphysinv;
   using Models.Pdsphysinvseterror;
   using Models.Pdssavewlpasswd;
   using Models.Pdsinvdisclistcriteria;
   using Models.Pdsinvdisclistresults;
   using Models.Pdsinvdiscneginv;
   using Models.Pdsinvdisclistsummary;
   using Models.Pdsinvdiscidlist;
   using Models.Pdsinvdiscbuildcountcriteria;
   using Models.Pdsinvdiscbuildcountresults;
   using Models.Pdsominfo;
   using Models.Pdsomorderdropcriteria;
   using Models.Pdsomorderkey;
   using Models.Pdsomorderdroplist;
   using Models.Pdsomorderdroprvlines;
   using Models.Pdsomorderdroperrors;
   using Models.Pdsomorderdropsummary;
   using Models.Pdsomorderdropwaves;
   using Models.Pdsomorderlinekey;
   using Models.Pdspickdetail;
   using Models.Pdspickdetailsummary;
   using Models.Pdspickalloccriteria;
   using Models.Pdsallocavailinventory;
   using Models.Pdsomorderundropcriteria;
   using Models.Pdsomorderundropcartoninfo;
   using Models.Pdsomorderzeroshipcriteria;
   using Models.Pdswavepickemployees;
   using Models.Pdswavepickassignments;
   using Models.Pdsupdateprodcatlist;
   using Models.Pdsrefreshprodcatcriteria;
   using Models.Pdsrefreshprodcatresults;
   using Models.Pdsreceipttransdetailcriteria;
   using Models.Pdsreceipttransdetail;
   using Models.Pdsreceipttransmastercriteria;
   using Models.Pdsreceipttransmaster;
   using Models.Pdsreceipttranscontcriteria;
   using Models.Pdsreceipttranscontmst;
   using Models.Pdsreceipttranscontdet;
   using Models.Pdsrectransactioncriteria;
   using Models.Pdsrectransactionresults;
   using Models.Pdsreclinetransactioncriteria;
   using Models.Pdsreclinetransactionresults;
   using Models.Pdsstationcriteria;
   using Models.Pdsstationresults;
   using Models.Pdssystemparametertypes;
   using Models.Pdssystemparamdefnlistcriteria;
   using Models.Pdssystemparamdefnlistresults;
   using Models.Pdsupdatesysparamvalcriteria;
   using Models.Pdsdeletesysparamvalcriteria;
   using Models.Pdsvalmultiloccreatecriteria;
   using Models.Pdsbldmultiloclistcriteria;
   using Models.Pdsgetmultiloccontrolcriteria;
   using Models.Pdsgetmultiloccontrolresult;
   using Models.Pdsgetmultiloclistcriteria;
   using Models.Pdsgetmultiloclistresults;
   using Models.Pdsdeletemultilocbinscriteria;
   using Models.Pdscreatemultiloccriteria;
   using Models.Pdsgetlabeludccriteria;
   using Models.Pdsgetlabeludcresults;
   using Models.Pdscopyalllabeludccriteria;
   using Models.Pdscreatelabelcolevudccriteria;
   using Models.Pdscreatelabelprntlevudccriteria;
   using Models.Pdsdeletelabeludccriteria;
   using Models.Pdsgetlabelprintcriteria;
   using Models.Pdsgetlabelprintbinmstresults;
   using Models.Pdsgetlabelprintinvresults;
   using Models.Pdsgetlabelprintitemresults;
   using Models.Pdsgeneratelabelprintcriteria;
   using Models.Pdsgeneratelabelprtbincrit;
   using Models.Pdsgeneratelabelprtinvcrit;
   using Models.Pdsgeneratelabelprtitmcrit;
   using Models.Complex;

   public partial class AstwladminAdapter : AdapterBase<pdsContextDataSet>
   {
      private TWLProxyAppObject proxyAppObject;
      
      public AstwladminAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new TWLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AstwladminAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Packinglistporesults> GetPackingListPO(Packinglistpocriteria packinglistpocriteria)
      {   
         var results = new List<Packinglistporesults>();
         
         var pdspackinglistpocriteria = new pdspackinglistpocriteriaDataSet();
            
         var pdspackinglistporesults = new pdspackinglistporesultsDataSet();
            
         DataRow ttblpackinglistpocriteriaCriteria = pdspackinglistpocriteria.ttblpackinglistpocriteria.NewttblpackinglistpocriteriaRow();
         Packinglistpocriteria.UpdateRowFromPackinglistpocriteria(ref ttblpackinglistpocriteriaCriteria, packinglistpocriteria);
         pdspackinglistpocriteria.ttblpackinglistpocriteria.AddttblpackinglistpocriteriaRow((pdspackinglistpocriteriaDataSet.ttblpackinglistpocriteriaRow)ttblpackinglistpocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPackingListPO - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetPackingListPO(ref pdsContext,  pdspackinglistpocriteria, out pdspackinglistporesults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPackingListPO - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspackinglistpocriteria); 
    
            foreach (DataRow row in pdspackinglistporesults.ttblpackinglistporesults)
            {
                results.Add(Packinglistporesults.BuildPackinglistporesultsFromRow(row));
            }
            return results;
        
      }

      public void PackingListValidate(Packinglistvalidate packinglistvalidate)
      {   
         
         var pdspackinglistvalidate = new pdspackinglistvalidateDataSet();
            
         DataRow ttblpackinglistvalidateCriteria = pdspackinglistvalidate.ttblpackinglistvalidate.NewttblpackinglistvalidateRow();
         Packinglistvalidate.UpdateRowFromPackinglistvalidate(ref ttblpackinglistvalidateCriteria, packinglistvalidate);
         pdspackinglistvalidate.ttblpackinglistvalidate.AddttblpackinglistvalidateRow((pdspackinglistvalidateDataSet.ttblpackinglistvalidateRow)ttblpackinglistvalidateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PackingListValidate - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PackingListValidate(ref pdsContext,  pdspackinglistvalidate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PackingListValidate - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspackinglistvalidate);
      }

      public Packinglistcreate PackingListCreate(Packinglistcreate packinglistcreate)
      {   
         var result = new Packinglistcreate();
         
         var pdspackinglistcreate = new pdspackinglistcreateDataSet();
            
         DataRow ttblpackinglistcreateCriteria = pdspackinglistcreate.ttblpackinglistcreate.NewttblpackinglistcreateRow();
         Packinglistcreate.UpdateRowFromPackinglistcreate(ref ttblpackinglistcreateCriteria, packinglistcreate);
         pdspackinglistcreate.ttblpackinglistcreate.AddttblpackinglistcreateRow((pdspackinglistcreateDataSet.ttblpackinglistcreateRow)ttblpackinglistcreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PackingListCreate - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PackingListCreate(ref pdsContext, ref pdspackinglistcreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PackingListCreate - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspackinglistcreate); 
    
         if (pdspackinglistcreate.ttblpackinglistcreate.Count > 0) 
         { 
             result = Packinglistcreate.BuildPackinglistcreateFromRow(pdspackinglistcreate.ttblpackinglistcreate[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Polinedetail> GetPOLineDetail(Polinedetailcriteria polinedetailcriteria)
      {   
         var results = new List<Polinedetail>();
         
         var pdspolinedetailcriteria = new pdspolinedetailcriteriaDataSet();
            
         var pdspolinedetail = new pdspolinedetailDataSet();
            
         DataRow ttblpolinedetailcriteriaCriteria = pdspolinedetailcriteria.ttblpolinedetailcriteria.NewttblpolinedetailcriteriaRow();
         Polinedetailcriteria.UpdateRowFromPolinedetailcriteria(ref ttblpolinedetailcriteriaCriteria, polinedetailcriteria);
         pdspolinedetailcriteria.ttblpolinedetailcriteria.AddttblpolinedetailcriteriaRow((pdspolinedetailcriteriaDataSet.ttblpolinedetailcriteriaRow)ttblpolinedetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPOLineDetail - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetPOLineDetail(ref pdsContext,  pdspolinedetailcriteria, out pdspolinedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPOLineDetail - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspolinedetailcriteria); 
    
            foreach (DataRow row in pdspolinedetail.ttblpolinedetail)
            {
                results.Add(Polinedetail.BuildPolinedetailFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Messaging> PackingListAddPO(Packinglistaddpo packinglistaddpo)
      {   
         var results = new List<Messaging>();
         
         var pdspackinglistaddpo = new pdspackinglistaddpoDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblpackinglistaddpoCriteria = pdspackinglistaddpo.ttblpackinglistaddpo.NewttblpackinglistaddpoRow();
         Packinglistaddpo.UpdateRowFromPackinglistaddpo(ref ttblpackinglistaddpoCriteria, packinglistaddpo);
         pdspackinglistaddpo.ttblpackinglistaddpo.AddttblpackinglistaddpoRow((pdspackinglistaddpoDataSet.ttblpackinglistaddpoRow)ttblpackinglistaddpoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PackingListAddPO - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PackingListAddPO(ref pdsContext,  pdspackinglistaddpo, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PackingListAddPO - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspackinglistaddpo); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void PackingListDeletePO(Packinglistdeletepo packinglistdeletepo)
      {   
         
         var pdspackinglistdeletepo = new pdspackinglistdeletepoDataSet();
            
         DataRow ttblpackinglistdeletepoCriteria = pdspackinglistdeletepo.ttblpackinglistdeletepo.NewttblpackinglistdeletepoRow();
         Packinglistdeletepo.UpdateRowFromPackinglistdeletepo(ref ttblpackinglistdeletepoCriteria, packinglistdeletepo);
         pdspackinglistdeletepo.ttblpackinglistdeletepo.AddttblpackinglistdeletepoRow((pdspackinglistdeletepoDataSet.ttblpackinglistdeletepoRow)ttblpackinglistdeletepoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PackingListDeletePO - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PackingListDeletePO(ref pdsContext,  pdspackinglistdeletepo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PackingListDeletePO - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspackinglistdeletepo);
      }

      public AstwladminGetResendTransactionsResponseAPI GetResendTransactions(Resendtranscriteria resendtranscriteria)
      {   
         var result = new AstwladminGetResendTransactionsResponseAPI();
         
         var pdsresendtranscriteria = new pdsresendtranscriteriaDataSet();
            
         var pdsresendtransdetail = new pdsresendtransdetailDataSet();
            
         var pdsresendtranssummary = new pdsresendtranssummaryDataSet();
            
         DataRow ttblresendtranscriteriaCriteria = pdsresendtranscriteria.ttblresendtranscriteria.NewttblresendtranscriteriaRow();
         Resendtranscriteria.UpdateRowFromResendtranscriteria(ref ttblresendtranscriteriaCriteria, resendtranscriteria);
         pdsresendtranscriteria.ttblresendtranscriteria.AddttblresendtranscriteriaRow((pdsresendtranscriteriaDataSet.ttblresendtranscriteriaRow)ttblresendtranscriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetResendTransactions - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetResendTransactions(ref pdsContext,  pdsresendtranscriteria, out pdsresendtransdetail, out pdsresendtranssummary, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetResendTransactions - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsresendtranscriteria); 
    
         foreach (DataRow row in pdsresendtransdetail.ttblresendtransdetail)
         {
            result.resendtransdetail.Add(Resendtransdetail.BuildResendtransdetailFromRow(row));
         }     
         foreach (DataRow row in pdsresendtranssummary.ttblresendtranssummary)
         {
            result.resendtranssummary.Add(Resendtranssummary.BuildResendtranssummaryFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Resendinitsearch ResendInitializeSearch(Resendinitsearch resendinitsearch)
      {   
         var result = new Resendinitsearch();
         
         var pdsresendinitsearch = new pdsresendinitsearchDataSet();
            
         DataRow ttblresendinitsearchCriteria = pdsresendinitsearch.ttblresendinitsearch.NewttblresendinitsearchRow();
         Resendinitsearch.UpdateRowFromResendinitsearch(ref ttblresendinitsearchCriteria, resendinitsearch);
         pdsresendinitsearch.ttblresendinitsearch.AddttblresendinitsearchRow((pdsresendinitsearchDataSet.ttblresendinitsearchRow)ttblresendinitsearchCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ResendInitializeSearch - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ResendInitializeSearch(ref pdsContext, ref pdsresendinitsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ResendInitializeSearch - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsresendinitsearch); 
    
         if (pdsresendinitsearch.ttblresendinitsearch.Count > 0) 
         { 
             result = Resendinitsearch.BuildResendinitsearchFromRow(pdsresendinitsearch.ttblresendinitsearch[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> ResendTransactionAssign(IEnumerable<Resendtranslist> resendtranslist)
      {   
         var results = new List<Messaging>();
         
         var pdsresendtranslist = new pdsresendtranslistDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         foreach (var obj in resendtranslist)
         {
             DataRow row = pdsresendtranslist.ttblresendtranslist.NewttblresendtranslistRow();
             Resendtranslist.UpdateRowFromResendtranslist(ref row, obj);
             pdsresendtranslist.ttblresendtranslist.AddttblresendtranslistRow((pdsresendtranslistDataSet.ttblresendtranslistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ResendTransactionAssign - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ResendTransactionAssign(ref pdsContext,  pdsresendtranslist, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ResendTransactionAssign - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsresendtranslist); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public void DeleteDropLogs(Deletedrplog deletedrplog)
      {   
         
         var pdsdeletedrplog = new pdsdeletedrplogDataSet();
            
         DataRow ttbldeletedrplogCriteria = pdsdeletedrplog.ttbldeletedrplog.NewttbldeletedrplogRow();
         Deletedrplog.UpdateRowFromDeletedrplog(ref ttbldeletedrplogCriteria, deletedrplog);
         pdsdeletedrplog.ttbldeletedrplog.AddttbldeletedrplogRow((pdsdeletedrplogDataSet.ttbldeletedrplogRow)ttbldeletedrplogCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteDropLogs - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteDropLogs(ref pdsContext,  pdsdeletedrplog, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteDropLogs - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdeletedrplog);
      }

      public void PrintReceivingLabels(Rcvlabelcriteria rcvlabelcriteria)
      {   
         
         var pdsrcvlabelcriteria = new pdsrcvlabelcriteriaDataSet();
            
         DataRow ttblrcvlabelcriteriaCriteria = pdsrcvlabelcriteria.ttblrcvlabelcriteria.NewttblrcvlabelcriteriaRow();
         Rcvlabelcriteria.UpdateRowFromRcvlabelcriteria(ref ttblrcvlabelcriteriaCriteria, rcvlabelcriteria);
         pdsrcvlabelcriteria.ttblrcvlabelcriteria.AddttblrcvlabelcriteriaRow((pdsrcvlabelcriteriaDataSet.ttblrcvlabelcriteriaRow)ttblrcvlabelcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PrintReceivingLabels - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PrintReceivingLabels(ref pdsContext,  pdsrcvlabelcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PrintReceivingLabels - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrcvlabelcriteria);
      }

      public void ReplenishmentsBuildOther(IEnumerable<Replotherbuildlist> replotherbuildlist)
      {   
         
         var pdsreplotherbuildlist = new pdsreplotherbuildlistDataSet();
            
         foreach (var obj in replotherbuildlist)
         {
             DataRow row = pdsreplotherbuildlist.ttblreplotherbuildlist.NewttblreplotherbuildlistRow();
             Replotherbuildlist.UpdateRowFromReplotherbuildlist(ref row, obj);
             pdsreplotherbuildlist.ttblreplotherbuildlist.AddttblreplotherbuildlistRow((pdsreplotherbuildlistDataSet.ttblreplotherbuildlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsBuildOther - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsBuildOther(ref pdsContext,  pdsreplotherbuildlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsBuildOther - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreplotherbuildlist);
      }

      public void ReplenishmentsBuildTopOffs(IEnumerable<Repltopoffbuildlist> repltopoffbuildlist)
      {   
         
         var pdsrepltopoffbuildlist = new pdsrepltopoffbuildlistDataSet();
            
         foreach (var obj in repltopoffbuildlist)
         {
             DataRow row = pdsrepltopoffbuildlist.ttblrepltopoffbuildlist.NewttblrepltopoffbuildlistRow();
             Repltopoffbuildlist.UpdateRowFromRepltopoffbuildlist(ref row, obj);
             pdsrepltopoffbuildlist.ttblrepltopoffbuildlist.AddttblrepltopoffbuildlistRow((pdsrepltopoffbuildlistDataSet.ttblrepltopoffbuildlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsBuildTopOffs - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsBuildTopOffs(ref pdsContext,  pdsrepltopoffbuildlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsBuildTopOffs - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrepltopoffbuildlist);
      }

      public Replclearresults ReplenishmentsClear(IEnumerable<Replclearlist> replclearlist)
      {   
         var result = new Replclearresults();
         
         var pdsreplclearlist = new pdsreplclearlistDataSet();
            
         var pdsreplclearresults = new pdsreplclearresultsDataSet();
            
         foreach (var obj in replclearlist)
         {
             DataRow row = pdsreplclearlist.ttblreplclearlist.NewttblreplclearlistRow();
             Replclearlist.UpdateRowFromReplclearlist(ref row, obj);
             pdsreplclearlist.ttblreplclearlist.AddttblreplclearlistRow((pdsreplclearlistDataSet.ttblreplclearlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsClear - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsClear(ref pdsContext,  pdsreplclearlist, out pdsreplclearresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsClear - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreplclearlist); 
    
         if (pdsreplclearresults.ttblreplclearresults.Count > 0) 
         { 
             result = Replclearresults.BuildReplclearresultsFromRow(pdsreplclearresults.ttblreplclearresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Replpending> ReplenishmentsLoadPending(Replpendingcriteria replpendingcriteria)
      {   
         var results = new List<Replpending>();
         
         var pdsreplpendingcriteria = new pdsreplpendingcriteriaDataSet();
            
         var pdsreplpending = new pdsreplpendingDataSet();
            
         DataRow ttblreplpendingcriteriaCriteria = pdsreplpendingcriteria.ttblreplpendingcriteria.NewttblreplpendingcriteriaRow();
         Replpendingcriteria.UpdateRowFromReplpendingcriteria(ref ttblreplpendingcriteriaCriteria, replpendingcriteria);
         pdsreplpendingcriteria.ttblreplpendingcriteria.AddttblreplpendingcriteriaRow((pdsreplpendingcriteriaDataSet.ttblreplpendingcriteriaRow)ttblreplpendingcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsLoadPending - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsLoadPending(ref pdsContext,  pdsreplpendingcriteria, out pdsreplpending, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsLoadPending - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreplpendingcriteria); 
    
            foreach (DataRow row in pdsreplpending.ttblreplpending)
            {
                results.Add(Replpending.BuildReplpendingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Repltopoffs> ReplenishmentsLoadTopOffs(Repltopoffscriteria repltopoffscriteria)
      {   
         var results = new List<Repltopoffs>();
         
         var pdsrepltopoffscriteria = new pdsrepltopoffscriteriaDataSet();
            
         var pdsrepltopoffs = new pdsrepltopoffsDataSet();
            
         DataRow ttblrepltopoffscriteriaCriteria = pdsrepltopoffscriteria.ttblrepltopoffscriteria.NewttblrepltopoffscriteriaRow();
         Repltopoffscriteria.UpdateRowFromRepltopoffscriteria(ref ttblrepltopoffscriteriaCriteria, repltopoffscriteria);
         pdsrepltopoffscriteria.ttblrepltopoffscriteria.AddttblrepltopoffscriteriaRow((pdsrepltopoffscriteriaDataSet.ttblrepltopoffscriteriaRow)ttblrepltopoffscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsLoadTopOffs - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsLoadTopOffs(ref pdsContext,  pdsrepltopoffscriteria, out pdsrepltopoffs, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsLoadTopOffs - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrepltopoffscriteria); 
    
            foreach (DataRow row in pdsrepltopoffs.ttblrepltopoffs)
            {
                results.Add(Repltopoffs.BuildRepltopoffsFromRow(row));
            }
            return results;
        
      }

      public AstwladminReplenishmentsLoadOtherResponseAPI ReplenishmentsLoadOther(Replothercriteria replothercriteria)
      {   
         var result = new AstwladminReplenishmentsLoadOtherResponseAPI();
         
         var pdsreplothercriteria = new pdsreplothercriteriaDataSet();
            
         var pdsreplother = new pdsreplotherDataSet();
            
         DataRow ttblreplothercriteriaCriteria = pdsreplothercriteria.ttblreplothercriteria.NewttblreplothercriteriaRow();
         Replothercriteria.UpdateRowFromReplothercriteria(ref ttblreplothercriteriaCriteria, replothercriteria);
         pdsreplothercriteria.ttblreplothercriteria.AddttblreplothercriteriaRow((pdsreplothercriteriaDataSet.ttblreplothercriteriaRow)ttblreplothercriteriaCriteria);
            
         bool lConsolidationType = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ReplenishmentsLoadOther - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ReplenishmentsLoadOther(ref pdsContext,  pdsreplothercriteria, out pdsreplother, out lConsolidationType, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ReplenishmentsLoadOther - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreplothercriteria); 
    
         foreach (DataRow row in pdsreplother.ttblreplother)
         {
            result.replother.Add(Replother.BuildReplotherFromRow(row));
         }     
         result.lConsolidationType = lConsolidationType;
          
         return result;
          
      }

      public AstwladminGetCCItemsResponseAPI GetCCItems(Ccitemscriteria ccitemscriteria)
      {   
         var result = new AstwladminGetCCItemsResponseAPI();
         
         var pdsccitemscriteria = new pdsccitemscriteriaDataSet();
            
         var pdsccitems = new pdsccitemsDataSet();
            
         DataRow ttblccitemscriteriaCriteria = pdsccitemscriteria.ttblccitemscriteria.NewttblccitemscriteriaRow();
         Ccitemscriteria.UpdateRowFromCcitemscriteria(ref ttblccitemscriteriaCriteria, ccitemscriteria);
         pdsccitemscriteria.ttblccitemscriteria.AddttblccitemscriteriaRow((pdsccitemscriteriaDataSet.ttblccitemscriteriaRow)ttblccitemscriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCItems - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCCItems(ref pdsContext,  pdsccitemscriteria, out pdsccitems, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCItems - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccitemscriteria); 
    
         foreach (DataRow row in pdsccitems.ttblccitems)
         {
            result.ccitems.Add(Ccitems.BuildCcitemsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Ccitemlots> GetCCItemLots(IEnumerable<Ccitems> ccitems)
      {   
         var results = new List<Ccitemlots>();
         
         var pdsccitems = new pdsccitemsDataSet();
            
         var pdsccitemlots = new pdsccitemlotsDataSet();
            
         foreach (var obj in ccitems)
         {
             DataRow row = pdsccitems.ttblccitems.NewttblccitemsRow();
             Ccitems.UpdateRowFromCcitems(ref row, obj);
             pdsccitems.ttblccitems.AddttblccitemsRow((pdsccitemsDataSet.ttblccitemsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCItemLots - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCCItemLots(ref pdsContext,  pdsccitems, out pdsccitemlots, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCItemLots - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccitems); 
    
            foreach (DataRow row in pdsccitemlots.ttblccitemlots)
            {
                results.Add(Ccitemlots.BuildCcitemlotsFromRow(row));
            }
            return results;
        
      }

      public AstwladminGetCCLocationsResponseAPI GetCCLocations(Cclocationscriteria cclocationscriteria)
      {   
         var result = new AstwladminGetCCLocationsResponseAPI();
         
         var pdscclocationscriteria = new pdscclocationscriteriaDataSet();
            
         var pdscclocations = new pdscclocationsDataSet();
            
         DataRow ttblcclocationscriteriaCriteria = pdscclocationscriteria.ttblcclocationscriteria.NewttblcclocationscriteriaRow();
         Cclocationscriteria.UpdateRowFromCclocationscriteria(ref ttblcclocationscriteriaCriteria, cclocationscriteria);
         pdscclocationscriteria.ttblcclocationscriteria.AddttblcclocationscriteriaRow((pdscclocationscriteriaDataSet.ttblcclocationscriteriaRow)ttblcclocationscriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCLocations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCCLocations(ref pdsContext,  pdscclocationscriteria, out pdscclocations, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCLocations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscclocationscriteria); 
    
         foreach (DataRow row in pdscclocations.ttblcclocations)
         {
            result.cclocations.Add(Cclocations.BuildCclocationsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Ccimpact GetCycleCountImpactForItems(AstwladminGetCycleCountImpactForItemsRequestAPI AstwladminGetCycleCountImpactForItemsRequestAPI)
      {   
         var result = new Ccimpact();
         
         var pdsccbuildimpactcriteria = new pdsccbuildimpactcriteriaDataSet();
            
         var pdsccitems = new pdsccitemsDataSet();
            
         var pdsccimpact = new pdsccimpactDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblccbuildimpactcriteriaRow = pdsccbuildimpactcriteria.ttblccbuildimpactcriteria.NewttblccbuildimpactcriteriaRow();
         Ccbuildimpactcriteria.UpdateRowFromCcbuildimpactcriteria(ref ttblccbuildimpactcriteriaRow, AstwladminGetCycleCountImpactForItemsRequestAPI.ccbuildimpactcriteria);
         pdsccbuildimpactcriteria.ttblccbuildimpactcriteria.AddttblccbuildimpactcriteriaRow((pdsccbuildimpactcriteriaDataSet.ttblccbuildimpactcriteriaRow)ttblccbuildimpactcriteriaRow);
          
         foreach (var obj in AstwladminGetCycleCountImpactForItemsRequestAPI.ccitems)
         {
            DataRow ttblccitemsRow = pdsccitems.ttblccitems.NewttblccitemsRow();
            Ccitems.UpdateRowFromCcitems(ref ttblccitemsRow, obj);
            pdsccitems.ttblccitems.AddttblccitemsRow((pdsccitemsDataSet.ttblccitemsRow)ttblccitemsRow);
         }
          
         
         NLogLoggerP.Trace("GetCycleCountImpactForItems - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCycleCountImpactForItems(ref pdsContext,  pdsccbuildimpactcriteria,  pdsccitems, out pdsccimpact, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCycleCountImpactForItems - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccbuildimpactcriteria); 
    
         if (pdsccimpact.ttblccimpact.Count > 0) 
         { 
             result = Ccimpact.BuildCcimpactFromRow(pdsccimpact.ttblccimpact[0]);
         } 
              
          
         return result;
          
      }

      public Ccimpact GetCycleCountImpactForLocations(AstwladminGetCycleCountImpactForLocationsRequestAPI AstwladminGetCycleCountImpactForLocationsRequestAPI)
      {   
         var result = new Ccimpact();
         
         var pdsccbuildimpactcriteria = new pdsccbuildimpactcriteriaDataSet();
            
         var pdscclocations = new pdscclocationsDataSet();
            
         var pdsccimpact = new pdsccimpactDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblccbuildimpactcriteriaRow = pdsccbuildimpactcriteria.ttblccbuildimpactcriteria.NewttblccbuildimpactcriteriaRow();
         Ccbuildimpactcriteria.UpdateRowFromCcbuildimpactcriteria(ref ttblccbuildimpactcriteriaRow, AstwladminGetCycleCountImpactForLocationsRequestAPI.ccbuildimpactcriteria);
         pdsccbuildimpactcriteria.ttblccbuildimpactcriteria.AddttblccbuildimpactcriteriaRow((pdsccbuildimpactcriteriaDataSet.ttblccbuildimpactcriteriaRow)ttblccbuildimpactcriteriaRow);
          
         foreach (var obj in AstwladminGetCycleCountImpactForLocationsRequestAPI.cclocations)
         {
            DataRow ttblcclocationsRow = pdscclocations.ttblcclocations.NewttblcclocationsRow();
            Cclocations.UpdateRowFromCclocations(ref ttblcclocationsRow, obj);
            pdscclocations.ttblcclocations.AddttblcclocationsRow((pdscclocationsDataSet.ttblcclocationsRow)ttblcclocationsRow);
         }
          
         
         NLogLoggerP.Trace("GetCycleCountImpactForLocations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCycleCountImpactForLocations(ref pdsContext,  pdsccbuildimpactcriteria,  pdscclocations, out pdsccimpact, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCycleCountImpactForLocations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccbuildimpactcriteria); 
    
         if (pdsccimpact.ttblccimpact.Count > 0) 
         { 
             result = Ccimpact.BuildCcimpactFromRow(pdsccimpact.ttblccimpact[0]);
         } 
              
          
         return result;
          
      }

      public Ccbuildresults BuildCycleCountsForItems(AstwladminBuildCycleCountsForItemsRequestAPI AstwladminBuildCycleCountsForItemsRequestAPI)
      {   
         var result = new Ccbuildresults();
         
         var pdsccitems = new pdsccitemsDataSet();
            
         var pdsccitemlots = new pdsccitemlotsDataSet();
            
         var pdsccimpact = new pdsccimpactDataSet();
            
         var pdsccbuildresults = new pdsccbuildresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblccimpactRow = pdsccimpact.ttblccimpact.NewttblccimpactRow();
         Ccimpact.UpdateRowFromCcimpact(ref ttblccimpactRow, AstwladminBuildCycleCountsForItemsRequestAPI.ccimpact);
         pdsccimpact.ttblccimpact.AddttblccimpactRow((pdsccimpactDataSet.ttblccimpactRow)ttblccimpactRow);
          
         foreach (var obj in AstwladminBuildCycleCountsForItemsRequestAPI.ccitemlots)
         {
            DataRow ttblccitemlotsRow = pdsccitemlots.ttblccitemlots.NewttblccitemlotsRow();
            Ccitemlots.UpdateRowFromCcitemlots(ref ttblccitemlotsRow, obj);
            pdsccitemlots.ttblccitemlots.AddttblccitemlotsRow((pdsccitemlotsDataSet.ttblccitemlotsRow)ttblccitemlotsRow);
         }
          
         foreach (var obj in AstwladminBuildCycleCountsForItemsRequestAPI.ccitems)
         {
            DataRow ttblccitemsRow = pdsccitems.ttblccitems.NewttblccitemsRow();
            Ccitems.UpdateRowFromCcitems(ref ttblccitemsRow, obj);
            pdsccitems.ttblccitems.AddttblccitemsRow((pdsccitemsDataSet.ttblccitemsRow)ttblccitemsRow);
         }
          
         
         NLogLoggerP.Trace("BuildCycleCountsForItems - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildCycleCountsForItems(ref pdsContext,  pdsccitems,  pdsccitemlots,  pdsccimpact, out pdsccbuildresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildCycleCountsForItems - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccitems); 
    
         if (pdsccbuildresults.ttblccbuildresults.Count > 0) 
         { 
             result = Ccbuildresults.BuildCcbuildresultsFromRow(pdsccbuildresults.ttblccbuildresults[0]);
         } 
              
          
         return result;
          
      }

      public void ClearCycleCounts(IEnumerable<Inventoryids> inventoryids)
      {   
         
         var pdsinventoryids = new pdsinventoryidsDataSet();
            
         foreach (var obj in inventoryids)
         {
             DataRow row = pdsinventoryids.ttblinventoryids.NewttblinventoryidsRow();
             Inventoryids.UpdateRowFromInventoryids(ref row, obj);
             pdsinventoryids.ttblinventoryids.AddttblinventoryidsRow((pdsinventoryidsDataSet.ttblinventoryidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ClearCycleCounts - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ClearCycleCounts(ref pdsContext,  pdsinventoryids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ClearCycleCounts - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinventoryids);
      }

      public Ccbuildresults BuildCycleCountsForLocations(AstwladminBuildCycleCountsForLocationsRequestAPI AstwladminBuildCycleCountsForLocationsRequestAPI)
      {   
         var result = new Ccbuildresults();
         
         var pdscclocations = new pdscclocationsDataSet();
            
         var pdsccimpact = new pdsccimpactDataSet();
            
         var pdsccbuildresults = new pdsccbuildresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblccimpactRow = pdsccimpact.ttblccimpact.NewttblccimpactRow();
         Ccimpact.UpdateRowFromCcimpact(ref ttblccimpactRow, AstwladminBuildCycleCountsForLocationsRequestAPI.ccimpact);
         pdsccimpact.ttblccimpact.AddttblccimpactRow((pdsccimpactDataSet.ttblccimpactRow)ttblccimpactRow);
          
         foreach (var obj in AstwladminBuildCycleCountsForLocationsRequestAPI.cclocations)
         {
            DataRow ttblcclocationsRow = pdscclocations.ttblcclocations.NewttblcclocationsRow();
            Cclocations.UpdateRowFromCclocations(ref ttblcclocationsRow, obj);
            pdscclocations.ttblcclocations.AddttblcclocationsRow((pdscclocationsDataSet.ttblcclocationsRow)ttblcclocationsRow);
         }
          
         
         NLogLoggerP.Trace("BuildCycleCountsForLocations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildCycleCountsForLocations(ref pdsContext,  pdscclocations,  pdsccimpact, out pdsccbuildresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildCycleCountsForLocations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscclocations); 
    
         if (pdsccbuildresults.ttblccbuildresults.Count > 0) 
         { 
             result = Ccbuildresults.BuildCcbuildresultsFromRow(pdsccbuildresults.ttblccbuildresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Ccemployees> GetCCEmployees(string company, string warehouse, int cyclewave)
      {   
         var results = new List<Ccemployees>();
         
         var pdsccemployees = new pdsccemployeesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCEmployees - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetCCEmployees(ref pdsContext,  company,  warehouse,  cyclewave, out pdsccemployees, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCEmployees - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccemployees); 
    
            foreach (DataRow row in pdsccemployees.ttblccemployees)
            {
                results.Add(Ccemployees.BuildCcemployeesFromRow(row));
            }
            return results;
        
      }

      public void SetCCEmployees(AstwladminSetCCEmployeesRequestAPI AstwladminSetCCEmployeesRequestAPI)
      {   
         
         var pdsccemployees = new pdsccemployeesDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminSetCCEmployeesRequestAPI.ccemployees)
         {
            DataRow ttblccemployeesRow = pdsccemployees.ttblccemployees.NewttblccemployeesRow();
            Ccemployees.UpdateRowFromCcemployees(ref ttblccemployeesRow, obj);
            pdsccemployees.ttblccemployees.AddttblccemployeesRow((pdsccemployeesDataSet.ttblccemployeesRow)ttblccemployeesRow);
         }
          
         var  company = AstwladminSetCCEmployeesRequestAPI.company;
            
         var  warehouse = AstwladminSetCCEmployeesRequestAPI.warehouse;
            
         var  cyclewave = AstwladminSetCCEmployeesRequestAPI.cyclewave;
            
         
         NLogLoggerP.Trace("SetCCEmployees - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.SetCCEmployees(ref pdsContext,  company,  warehouse,  cyclewave,  pdsccemployees, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SetCCEmployees - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccemployees);
      }

      public string RunDailyCcCount(string company, string warehouse)
      {   
          
         string cInfoMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RunDailyCcCount - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.RunDailyCcCount(ref pdsContext,  company,  warehouse, out cInfoMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RunDailyCcCount - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cInfoMessage;
      
      }

      public Physinvsummary PhysicalInventoryStatus(Physinvcriteria physinvcriteria)
      {   
         var result = new Physinvsummary();
         
         var pdsphysinvcriteria = new pdsphysinvcriteriaDataSet();
            
         var pdsphysinvsummary = new pdsphysinvsummaryDataSet();
            
         DataRow ttblphysinvcriteriaCriteria = pdsphysinvcriteria.ttblphysinvcriteria.NewttblphysinvcriteriaRow();
         Physinvcriteria.UpdateRowFromPhysinvcriteria(ref ttblphysinvcriteriaCriteria, physinvcriteria);
         pdsphysinvcriteria.ttblphysinvcriteria.AddttblphysinvcriteriaRow((pdsphysinvcriteriaDataSet.ttblphysinvcriteriaRow)ttblphysinvcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PhysicalInventoryStatus - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PhysicalInventoryStatus(ref pdsContext,  pdsphysinvcriteria, out pdsphysinvsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PhysicalInventoryStatus - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinvcriteria); 
    
         if (pdsphysinvsummary.ttblphysinvsummary.Count > 0) 
         { 
             result = Physinvsummary.BuildPhysinvsummaryFromRow(pdsphysinvsummary.ttblphysinvsummary[0]);
         } 
              
          
         return result;
          
      }

      public AstwladminPhysicalInventoryStatusContinuedResponseAPI PhysicalInventoryStatusContinued(Physinvsummary physinvsummary)
      {   
         var result = new AstwladminPhysicalInventoryStatusContinuedResponseAPI();
         
         var pdsphysinvsummary = new pdsphysinvsummaryDataSet();
            
         var pdsphysinv = new pdsphysinvDataSet();
            
         DataRow ttblphysinvsummaryCriteria = pdsphysinvsummary.ttblphysinvsummary.NewttblphysinvsummaryRow();
         Physinvsummary.UpdateRowFromPhysinvsummary(ref ttblphysinvsummaryCriteria, physinvsummary);
         pdsphysinvsummary.ttblphysinvsummary.AddttblphysinvsummaryRow((pdsphysinvsummaryDataSet.ttblphysinvsummaryRow)ttblphysinvsummaryCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PhysicalInventoryStatusContinued - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PhysicalInventoryStatusContinued(ref pdsContext, ref pdsphysinvsummary, out pdsphysinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PhysicalInventoryStatusContinued - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinvsummary); 
    
         foreach (DataRow row in pdsphysinv.ttblphysinv)
         {
            result.physinv.Add(Physinv.BuildPhysinvFromRow(row));
         }     
         if (pdsphysinvsummary.ttblphysinvsummary.Count > 0)
         {
            result.physinvsummary = Physinvsummary.BuildPhysinvsummaryFromRow(pdsphysinvsummary.ttblphysinvsummary[0]);
         }
                    
          
         return result;
          
      }

      public AstwladminPhysicalInventorySetResponseAPI PhysicalInventorySet(Physinvcriteria physinvcriteria)
      {   
         var result = new AstwladminPhysicalInventorySetResponseAPI();
         
         var pdsphysinvcriteria = new pdsphysinvcriteriaDataSet();
            
         var pdsphysinvseterror = new pdsphysinvseterrorDataSet();
            
         DataRow ttblphysinvcriteriaCriteria = pdsphysinvcriteria.ttblphysinvcriteria.NewttblphysinvcriteriaRow();
         Physinvcriteria.UpdateRowFromPhysinvcriteria(ref ttblphysinvcriteriaCriteria, physinvcriteria);
         pdsphysinvcriteria.ttblphysinvcriteria.AddttblphysinvcriteriaRow((pdsphysinvcriteriaDataSet.ttblphysinvcriteriaRow)ttblphysinvcriteriaCriteria);
            
         bool is_pallet_error = false;
         string log_message = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PhysicalInventorySet - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PhysicalInventorySet(ref pdsContext,  pdsphysinvcriteria, out pdsphysinvseterror, out is_pallet_error, out log_message, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PhysicalInventorySet - Astwladmin - After Call");

         
         this.ReportErrors(pdsphysinvseterror);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinvcriteria); 
    
         foreach (DataRow row in pdsphysinvseterror.ttblphysinvseterror)
         {
            result.physinvseterror.Add(Physinvseterror.BuildPhysinvseterrorFromRow(row));
         }     
         result.is_pallet_error = is_pallet_error;
         result.log_message = log_message;
          
         return result;
          
      }

      public AstwladminPhysicalInventoryCloseInitResponseAPI PhysicalInventoryCloseInit(Physinvsummary physinvsummary)
      {   
         var result = new AstwladminPhysicalInventoryCloseInitResponseAPI();
         
         var pdsphysinvsummary = new pdsphysinvsummaryDataSet();
            
         DataRow ttblphysinvsummaryCriteria = pdsphysinvsummary.ttblphysinvsummary.NewttblphysinvsummaryRow();
         Physinvsummary.UpdateRowFromPhysinvsummary(ref ttblphysinvsummaryCriteria, physinvsummary);
         pdsphysinvsummary.ttblphysinvsummary.AddttblphysinvsummaryRow((pdsphysinvsummaryDataSet.ttblphysinvsummaryRow)ttblphysinvsummaryCriteria);
            
         bool is_ready = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PhysicalInventoryCloseInit - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PhysicalInventoryCloseInit(ref pdsContext, ref pdsphysinvsummary, out is_ready, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PhysicalInventoryCloseInit - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinvsummary); 
    
         if (pdsphysinvsummary.ttblphysinvsummary.Count > 0)
         {
            result.physinvsummary = Physinvsummary.BuildPhysinvsummaryFromRow(pdsphysinvsummary.ttblphysinvsummary[0]);
         }
                    
         result.is_ready = is_ready;
          
         return result;
          
      }

      public void PhysicalInventoryClose(Physinvsummary physinvsummary)
      {   
         
         var pdsphysinvsummary = new pdsphysinvsummaryDataSet();
            
         DataRow ttblphysinvsummaryCriteria = pdsphysinvsummary.ttblphysinvsummary.NewttblphysinvsummaryRow();
         Physinvsummary.UpdateRowFromPhysinvsummary(ref ttblphysinvsummaryCriteria, physinvsummary);
         pdsphysinvsummary.ttblphysinvsummary.AddttblphysinvsummaryRow((pdsphysinvsummaryDataSet.ttblphysinvsummaryRow)ttblphysinvsummaryCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PhysicalInventoryClose - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PhysicalInventoryClose(ref pdsContext,  pdsphysinvsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PhysicalInventoryClose - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinvsummary);
      }

      public void SaveSecurity(Savewlpasswd savewlpasswd)
      {   
         
         var pdssavewlpasswd = new pdssavewlpasswdDataSet();
            
         DataRow ttblsavewlpasswdCriteria = pdssavewlpasswd.ttblsavewlpasswd.NewttblsavewlpasswdRow();
         Savewlpasswd.UpdateRowFromSavewlpasswd(ref ttblsavewlpasswdCriteria, savewlpasswd);
         pdssavewlpasswd.ttblsavewlpasswd.AddttblsavewlpasswdRow((pdssavewlpasswdDataSet.ttblsavewlpasswdRow)ttblsavewlpasswdCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SaveSecurity - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.SaveSecurity(ref pdsContext,  pdssavewlpasswd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SaveSecurity - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssavewlpasswd);
      }

      public AstwladminGetInvDiscListResponseAPI GetInvDiscList(Invdisclistcriteria invdisclistcriteria)
      {   
         var result = new AstwladminGetInvDiscListResponseAPI();
         
         var pdsinvdisclistcriteria = new pdsinvdisclistcriteriaDataSet();
            
         var pdsinvdisclistresults = new pdsinvdisclistresultsDataSet();
            
         var pdsinvdiscneginv = new pdsinvdiscneginvDataSet();
            
         var pdsinvdisclistsummary = new pdsinvdisclistsummaryDataSet();
            
         DataRow ttblinvdisclistcriteriaCriteria = pdsinvdisclistcriteria.ttblinvdisclistcriteria.NewttblinvdisclistcriteriaRow();
         Invdisclistcriteria.UpdateRowFromInvdisclistcriteria(ref ttblinvdisclistcriteriaCriteria, invdisclistcriteria);
         pdsinvdisclistcriteria.ttblinvdisclistcriteria.AddttblinvdisclistcriteriaRow((pdsinvdisclistcriteriaDataSet.ttblinvdisclistcriteriaRow)ttblinvdisclistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvDiscList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetInvDiscList(ref pdsContext,  pdsinvdisclistcriteria, out pdsinvdisclistresults, out pdsinvdiscneginv, out pdsinvdisclistsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvDiscList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvdisclistcriteria); 
    
         foreach (DataRow row in pdsinvdisclistresults.ttblinvdisclistresults)
         {
            result.invdisclistresults.Add(Invdisclistresults.BuildInvdisclistresultsFromRow(row));
         }     
         if (pdsinvdisclistsummary.ttblinvdisclistsummary.Count > 0)
         {
            result.invdisclistsummary = Invdisclistsummary.BuildInvdisclistsummaryFromRow(pdsinvdisclistsummary.ttblinvdisclistsummary[0]);
         }
                    
         foreach (DataRow row in pdsinvdiscneginv.ttblinvdiscneginv)
         {
            result.invdiscneginv.Add(Invdiscneginv.BuildInvdiscneginvFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Invdiscidlist> BuildInvDiscCountsNegPrep(IEnumerable<Invdiscneginv> invdiscneginv)
      {   
         var results = new List<Invdiscidlist>();
         
         var pdsinvdiscneginv = new pdsinvdiscneginvDataSet();
            
         var pdsinvdiscidlist = new pdsinvdiscidlistDataSet();
            
         foreach (var obj in invdiscneginv)
         {
             DataRow row = pdsinvdiscneginv.ttblinvdiscneginv.NewttblinvdiscneginvRow();
             Invdiscneginv.UpdateRowFromInvdiscneginv(ref row, obj);
             pdsinvdiscneginv.ttblinvdiscneginv.AddttblinvdiscneginvRow((pdsinvdiscneginvDataSet.ttblinvdiscneginvRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("BuildInvDiscCountsNegPrep - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildInvDiscCountsNegPrep(ref pdsContext,  pdsinvdiscneginv, out pdsinvdiscidlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildInvDiscCountsNegPrep - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvdiscneginv); 
    
            foreach (DataRow row in pdsinvdiscidlist.ttblinvdiscidlist)
            {
                results.Add(Invdiscidlist.BuildInvdiscidlistFromRow(row));
            }
            return results;
        
      }

      public AstwladminBuildInvDiscCountsResponseAPI BuildInvDiscCounts(AstwladminBuildInvDiscCountsRequestAPI AstwladminBuildInvDiscCountsRequestAPI)
      {   
         var result = new AstwladminBuildInvDiscCountsResponseAPI();
         
         var pdsinvdiscbuildcountcriteria = new pdsinvdiscbuildcountcriteriaDataSet();
            
         var pdsinvdiscidlist = new pdsinvdiscidlistDataSet();
            
         var pdsinvdiscbuildcountresults = new pdsinvdiscbuildcountresultsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblinvdiscbuildcountcriteriaRow = pdsinvdiscbuildcountcriteria.ttblinvdiscbuildcountcriteria.NewttblinvdiscbuildcountcriteriaRow();
         Invdiscbuildcountcriteria.UpdateRowFromInvdiscbuildcountcriteria(ref ttblinvdiscbuildcountcriteriaRow, AstwladminBuildInvDiscCountsRequestAPI.invdiscbuildcountcriteria);
         pdsinvdiscbuildcountcriteria.ttblinvdiscbuildcountcriteria.AddttblinvdiscbuildcountcriteriaRow((pdsinvdiscbuildcountcriteriaDataSet.ttblinvdiscbuildcountcriteriaRow)ttblinvdiscbuildcountcriteriaRow);
          
         foreach (var obj in AstwladminBuildInvDiscCountsRequestAPI.invdiscidlist)
         {
            DataRow ttblinvdiscidlistRow = pdsinvdiscidlist.ttblinvdiscidlist.NewttblinvdiscidlistRow();
            Invdiscidlist.UpdateRowFromInvdiscidlist(ref ttblinvdiscidlistRow, obj);
            pdsinvdiscidlist.ttblinvdiscidlist.AddttblinvdiscidlistRow((pdsinvdiscidlistDataSet.ttblinvdiscidlistRow)ttblinvdiscidlistRow);
         }
          
         
         NLogLoggerP.Trace("BuildInvDiscCounts - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildInvDiscCounts(ref pdsContext,  pdsinvdiscbuildcountcriteria,  pdsinvdiscidlist, out pdsinvdiscbuildcountresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildInvDiscCounts - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvdiscbuildcountcriteria); 
    
         foreach (DataRow row in pdsinvdiscbuildcountresults.ttblinvdiscbuildcounts)
         {
            result.invdiscbuildcounts.Add(Invdiscbuildcounts.BuildInvdiscbuildcountsFromRow(row));
         }     
         foreach (DataRow row in pdsinvdiscbuildcountresults.ttblinvdiscbuildcreated)
         {
            result.invdiscbuildcreated.Add(Invdiscbuildcreated.BuildInvdiscbuildcreatedFromRow(row));
         }     
         foreach (DataRow row in pdsinvdiscbuildcountresults.ttblinvdiscbuildinvprob)
         {
            result.invdiscbuildinvprob.Add(Invdiscbuildinvprob.BuildInvdiscbuildinvprobFromRow(row));
         }     
          
         return result;
          
      }

      public void BuildInvDiscCountsCancel(IEnumerable<Invdiscidlist> invdiscidlist)
      {   
         
         var pdsinvdiscidlist = new pdsinvdiscidlistDataSet();
            
         foreach (var obj in invdiscidlist)
         {
             DataRow row = pdsinvdiscidlist.ttblinvdiscidlist.NewttblinvdiscidlistRow();
             Invdiscidlist.UpdateRowFromInvdiscidlist(ref row, obj);
             pdsinvdiscidlist.ttblinvdiscidlist.AddttblinvdiscidlistRow((pdsinvdiscidlistDataSet.ttblinvdiscidlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("BuildInvDiscCountsCancel - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildInvDiscCountsCancel(ref pdsContext,  pdsinvdiscidlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildInvDiscCountsCancel - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvdiscidlist);
      }

      public void DeleteInvDisc(IEnumerable<Invdiscidlist> invdiscidlist)
      {   
         
         var pdsinvdiscidlist = new pdsinvdiscidlistDataSet();
            
         foreach (var obj in invdiscidlist)
         {
             DataRow row = pdsinvdiscidlist.ttblinvdiscidlist.NewttblinvdiscidlistRow();
             Invdiscidlist.UpdateRowFromInvdiscidlist(ref row, obj);
             pdsinvdiscidlist.ttblinvdiscidlist.AddttblinvdiscidlistRow((pdsinvdiscidlistDataSet.ttblinvdiscidlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteInvDisc - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteInvDisc(ref pdsContext,  pdsinvdiscidlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteInvDisc - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvdiscidlist);
      }

      public Ominfo GetOMInfo(Ominfo ominfo)
      {   
         var result = new Ominfo();
         
         var pdsominfo = new pdsominfoDataSet();
            
         DataRow ttblominfoCriteria = pdsominfo.ttblominfo.NewttblominfoRow();
         Ominfo.UpdateRowFromOminfo(ref ttblominfoCriteria, ominfo);
         pdsominfo.ttblominfo.AddttblominfoRow((pdsominfoDataSet.ttblominfoRow)ttblominfoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOMInfo - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetOMInfo(ref pdsContext, ref pdsominfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOMInfo - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsominfo); 
    
         if (pdsominfo.ttblominfo.Count > 0) 
         { 
             result = Ominfo.BuildOminfoFromRow(pdsominfo.ttblominfo[0]);
         } 
              
          
         return result;
          
      }

      public AstwladminOMDropPrepResponseAPI OMDropPrep(AstwladminOMDropPrepRequestAPI AstwladminOMDropPrepRequestAPI)
      {   
         var result = new AstwladminOMDropPrepResponseAPI();
         
         var pdsomorderdropcriteria = new pdsomorderdropcriteriaDataSet();
            
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsomorderdroplist = new pdsomorderdroplistDataSet();
            
         var pdsomorderdroprvlines = new pdsomorderdroprvlinesDataSet();
            
         var pdsomorderdroperrors = new pdsomorderdroperrorsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblomorderdropcriteriaRow = pdsomorderdropcriteria.ttblomorderdropcriteria.NewttblomorderdropcriteriaRow();
         Omorderdropcriteria.UpdateRowFromOmorderdropcriteria(ref ttblomorderdropcriteriaRow, AstwladminOMDropPrepRequestAPI.omorderdropcriteria);
         pdsomorderdropcriteria.ttblomorderdropcriteria.AddttblomorderdropcriteriaRow((pdsomorderdropcriteriaDataSet.ttblomorderdropcriteriaRow)ttblomorderdropcriteriaRow);
          
         foreach (var obj in AstwladminOMDropPrepRequestAPI.omorderkey)
         {
            DataRow ttblomorderkeyRow = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
            Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyRow, obj);
            pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyRow);
         }
          
         
         NLogLoggerP.Trace("OMDropPrep - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMDropPrep(ref pdsContext,  pdsomorderdropcriteria, ref pdsomorderkey, out pdsomorderdroplist, out pdsomorderdroprvlines, out pdsomorderdroperrors, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMDropPrep - Astwladmin - After Call");

         
         this.ReportErrors(pdsomorderdroperrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderdropcriteria); 
    
         foreach (DataRow row in pdsomorderdroperrors.ttblomorderdroperrors)
         {
            result.omorderdroperrors.Add(Omorderdroperrors.BuildOmorderdroperrorsFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdroplist.ttblomorderdroplist)
         {
            result.omorderdroplist.Add(Omorderdroplist.BuildOmorderdroplistFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdroprvlines.ttblomorderdroprvlines)
         {
            result.omorderdroprvlines.Add(Omorderdroprvlines.BuildOmorderdroprvlinesFromRow(row));
         }     
         foreach (DataRow row in pdsomorderkey.ttblomorderkey)
         {
            result.omorderkey.Add(Omorderkey.BuildOmorderkeyFromRow(row));
         }     
          
         return result;
          
      }

      public AstwladminOMDropResponseAPI OMDrop(AstwladminOMDropRequestAPI AstwladminOMDropRequestAPI)
      {   
         var result = new AstwladminOMDropResponseAPI();
         
         var pdsominfo = new pdsominfoDataSet();
            
         var pdsomorderdroplist = new pdsomorderdroplistDataSet();
            
         var pdsomorderdropsummary = new pdsomorderdropsummaryDataSet();
            
         var pdsomorderdropwaves = new pdsomorderdropwavesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblominfoRow = pdsominfo.ttblominfo.NewttblominfoRow();
         Ominfo.UpdateRowFromOminfo(ref ttblominfoRow, AstwladminOMDropRequestAPI.ominfo);
         pdsominfo.ttblominfo.AddttblominfoRow((pdsominfoDataSet.ttblominfoRow)ttblominfoRow);
          
         foreach (var obj in AstwladminOMDropRequestAPI.omorderdroplist)
         {
            DataRow ttblomorderdroplistRow = pdsomorderdroplist.ttblomorderdroplist.NewttblomorderdroplistRow();
            Omorderdroplist.UpdateRowFromOmorderdroplist(ref ttblomorderdroplistRow, obj);
            pdsomorderdroplist.ttblomorderdroplist.AddttblomorderdroplistRow((pdsomorderdroplistDataSet.ttblomorderdroplistRow)ttblomorderdroplistRow);
         }
          
         
         NLogLoggerP.Trace("OMDrop - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMDrop(ref pdsContext,  pdsominfo,  pdsomorderdroplist, out pdsomorderdropsummary, out pdsomorderdropwaves, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMDrop - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsominfo); 
    
         foreach (DataRow row in pdsomorderdropsummary.ttblomorderdropsummary)
         {
            result.omorderdropsummary.Add(Omorderdropsummary.BuildOmorderdropsummaryFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdropwaves.ttblomorderdropwaves)
         {
            result.omorderdropwaves.Add(Omorderdropwaves.BuildOmorderdropwavesFromRow(row));
         }     
          
         return result;
          
      }

      public void OMDropFinish(IEnumerable<Omorderdroplist> omorderdroplist)
      {   
         
         var pdsomorderdroplist = new pdsomorderdroplistDataSet();
            
         foreach (var obj in omorderdroplist)
         {
             DataRow row = pdsomorderdroplist.ttblomorderdroplist.NewttblomorderdroplistRow();
             Omorderdroplist.UpdateRowFromOmorderdroplist(ref row, obj);
             pdsomorderdroplist.ttblomorderdroplist.AddttblomorderdroplistRow((pdsomorderdroplistDataSet.ttblomorderdroplistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMDropFinish - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMDropFinish(ref pdsContext,  pdsomorderdroplist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMDropFinish - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderdroplist);
      }

      public AstwladminGetPickAllocationResponseAPI GetPickAllocation(Omorderlinekey omorderlinekey)
      {   
         var result = new AstwladminGetPickAllocationResponseAPI();
         
         var pdsomorderlinekey = new pdsomorderlinekeyDataSet();
            
         var pdspickdetail = new pdspickdetailDataSet();
            
         var pdspickdetailsummary = new pdspickdetailsummaryDataSet();
            
         DataRow ttblomorderlinekeyCriteria = pdsomorderlinekey.ttblomorderlinekey.NewttblomorderlinekeyRow();
         Omorderlinekey.UpdateRowFromOmorderlinekey(ref ttblomorderlinekeyCriteria, omorderlinekey);
         pdsomorderlinekey.ttblomorderlinekey.AddttblomorderlinekeyRow((pdsomorderlinekeyDataSet.ttblomorderlinekeyRow)ttblomorderlinekeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPickAllocation - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetPickAllocation(ref pdsContext,  pdsomorderlinekey, out pdspickdetail, out pdspickdetailsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPickAllocation - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderlinekey); 
    
         foreach (DataRow row in pdspickdetail.ttblpickdetail)
         {
            result.pickdetail.Add(Pickdetail.BuildPickdetailFromRow(row));
         }     
         if (pdspickdetailsummary.ttblpickdetailsummary.Count > 0)
         {
            result.pickdetailsummary = Pickdetailsummary.BuildPickdetailsummaryFromRow(pdspickdetailsummary.ttblpickdetailsummary[0]);
         }
                    
          
         return result;
          
      }

      public AstwladminDeletePickAllocationResponseAPI DeletePickAllocation(AstwladminDeletePickAllocationRequestAPI AstwladminDeletePickAllocationRequestAPI)
      {   
         var result = new AstwladminDeletePickAllocationResponseAPI();
         
         var pdspickdetailsummary = new pdspickdetailsummaryDataSet();
            
         var pdspickdetail = new pdspickdetailDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminDeletePickAllocationRequestAPI.pickdetail)
         {
            DataRow ttblpickdetailRow = pdspickdetail.ttblpickdetail.NewttblpickdetailRow();
            Pickdetail.UpdateRowFromPickdetail(ref ttblpickdetailRow, obj);
            pdspickdetail.ttblpickdetail.AddttblpickdetailRow((pdspickdetailDataSet.ttblpickdetailRow)ttblpickdetailRow);
         }
          
         DataRow ttblpickdetailsummaryRow = pdspickdetailsummary.ttblpickdetailsummary.NewttblpickdetailsummaryRow();
         Pickdetailsummary.UpdateRowFromPickdetailsummary(ref ttblpickdetailsummaryRow, AstwladminDeletePickAllocationRequestAPI.pickdetailsummary);
         pdspickdetailsummary.ttblpickdetailsummary.AddttblpickdetailsummaryRow((pdspickdetailsummaryDataSet.ttblpickdetailsummaryRow)ttblpickdetailsummaryRow);
          
         
         NLogLoggerP.Trace("DeletePickAllocation - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeletePickAllocation(ref pdsContext, ref pdspickdetailsummary, ref pdspickdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeletePickAllocation - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspickdetailsummary); 
    
         foreach (DataRow row in pdspickdetail.ttblpickdetail)
         {
            result.pickdetail.Add(Pickdetail.BuildPickdetailFromRow(row));
         }     
         if (pdspickdetailsummary.ttblpickdetailsummary.Count > 0)
         {
            result.pickdetailsummary = Pickdetailsummary.BuildPickdetailsummaryFromRow(pdspickdetailsummary.ttblpickdetailsummary[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Allocavailinventory> PrepPickAllocate(Pickalloccriteria pickalloccriteria)
      {   
         var results = new List<Allocavailinventory>();
         
         var pdspickalloccriteria = new pdspickalloccriteriaDataSet();
            
         var pdsallocavailinventory = new pdsallocavailinventoryDataSet();
            
         DataRow ttblpickalloccriteriaCriteria = pdspickalloccriteria.ttblpickalloccriteria.NewttblpickalloccriteriaRow();
         Pickalloccriteria.UpdateRowFromPickalloccriteria(ref ttblpickalloccriteriaCriteria, pickalloccriteria);
         pdspickalloccriteria.ttblpickalloccriteria.AddttblpickalloccriteriaRow((pdspickalloccriteriaDataSet.ttblpickalloccriteriaRow)ttblpickalloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("PrepPickAllocate - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.PrepPickAllocate(ref pdsContext,  pdspickalloccriteria, out pdsallocavailinventory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("PrepPickAllocate - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspickalloccriteria); 
    
            foreach (DataRow row in pdsallocavailinventory.ttblallocavailinventory)
            {
                results.Add(Allocavailinventory.BuildAllocavailinventoryFromRow(row));
            }
            return results;
        
      }

      public Pickdetailsummary CreatePickAllocation(AstwladminCreatePickAllocationRequestAPI AstwladminCreatePickAllocationRequestAPI)
      {   
         var result = new Pickdetailsummary();
         
         var pdspickdetailsummary = new pdspickdetailsummaryDataSet();
            
         var pdsallocavailinventory = new pdsallocavailinventoryDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminCreatePickAllocationRequestAPI.allocavailinventory)
         {
            DataRow ttblallocavailinventoryRow = pdsallocavailinventory.ttblallocavailinventory.NewttblallocavailinventoryRow();
            Allocavailinventory.UpdateRowFromAllocavailinventory(ref ttblallocavailinventoryRow, obj);
            pdsallocavailinventory.ttblallocavailinventory.AddttblallocavailinventoryRow((pdsallocavailinventoryDataSet.ttblallocavailinventoryRow)ttblallocavailinventoryRow);
         }
          
         DataRow ttblpickdetailsummaryRow = pdspickdetailsummary.ttblpickdetailsummary.NewttblpickdetailsummaryRow();
         Pickdetailsummary.UpdateRowFromPickdetailsummary(ref ttblpickdetailsummaryRow, AstwladminCreatePickAllocationRequestAPI.pickdetailsummary);
         pdspickdetailsummary.ttblpickdetailsummary.AddttblpickdetailsummaryRow((pdspickdetailsummaryDataSet.ttblpickdetailsummaryRow)ttblpickdetailsummaryRow);
          
         
         NLogLoggerP.Trace("CreatePickAllocation - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.CreatePickAllocation(ref pdsContext, ref pdspickdetailsummary,  pdsallocavailinventory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreatePickAllocation - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspickdetailsummary); 
    
         if (pdspickdetailsummary.ttblpickdetailsummary.Count > 0) 
         { 
             result = Pickdetailsummary.BuildPickdetailsummaryFromRow(pdspickdetailsummary.ttblpickdetailsummary[0]);
         } 
              
          
         return result;
          
      }

      public Pickdetailsummary AutoPickAllocation(Pickdetailsummary pickdetailsummary)
      {   
         var result = new Pickdetailsummary();
         
         var pdspickdetailsummary = new pdspickdetailsummaryDataSet();
            
         DataRow ttblpickdetailsummaryCriteria = pdspickdetailsummary.ttblpickdetailsummary.NewttblpickdetailsummaryRow();
         Pickdetailsummary.UpdateRowFromPickdetailsummary(ref ttblpickdetailsummaryCriteria, pickdetailsummary);
         pdspickdetailsummary.ttblpickdetailsummary.AddttblpickdetailsummaryRow((pdspickdetailsummaryDataSet.ttblpickdetailsummaryRow)ttblpickdetailsummaryCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("AutoPickAllocation - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.AutoPickAllocation(ref pdsContext, ref pdspickdetailsummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("AutoPickAllocation - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdspickdetailsummary); 
    
         if (pdspickdetailsummary.ttblpickdetailsummary.Count > 0) 
         { 
             result = Pickdetailsummary.BuildPickdetailsummaryFromRow(pdspickdetailsummary.ttblpickdetailsummary[0]);
         } 
              
          
         return result;
          
      }

      public AstwladminOMUnDropPrepResponseAPI OMUnDropPrep(AstwladminOMUnDropPrepRequestAPI AstwladminOMUnDropPrepRequestAPI)
      {   
         var result = new AstwladminOMUnDropPrepResponseAPI();
         
         var pdsomorderundropcriteria = new pdsomorderundropcriteriaDataSet();
            
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsomorderdroplist = new pdsomorderdroplistDataSet();
            
         var pdsomorderundropcartoninfo = new pdsomorderundropcartoninfoDataSet();
            
         var pdsomorderdroperrors = new pdsomorderdroperrorsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminOMUnDropPrepRequestAPI.omorderkey)
         {
            DataRow ttblomorderkeyRow = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
            Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyRow, obj);
            pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyRow);
         }
          
         DataRow ttblomorderundropcriteriaRow = pdsomorderundropcriteria.ttblomorderundropcriteria.NewttblomorderundropcriteriaRow();
         Omorderundropcriteria.UpdateRowFromOmorderundropcriteria(ref ttblomorderundropcriteriaRow, AstwladminOMUnDropPrepRequestAPI.omorderundropcriteria);
         pdsomorderundropcriteria.ttblomorderundropcriteria.AddttblomorderundropcriteriaRow((pdsomorderundropcriteriaDataSet.ttblomorderundropcriteriaRow)ttblomorderundropcriteriaRow);
          
         
         NLogLoggerP.Trace("OMUnDropPrep - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMUnDropPrep(ref pdsContext,  pdsomorderundropcriteria, ref pdsomorderkey, out pdsomorderdroplist, out pdsomorderundropcartoninfo, out pdsomorderdroperrors, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMUnDropPrep - Astwladmin - After Call");

         
         this.ReportErrors(pdsomorderdroperrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderundropcriteria); 
    
         foreach (DataRow row in pdsomorderdroperrors.ttblomorderdroperrors)
         {
            result.omorderdroperrors.Add(Omorderdroperrors.BuildOmorderdroperrorsFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdroplist.ttblomorderdroplist)
         {
            result.omorderdroplist.Add(Omorderdroplist.BuildOmorderdroplistFromRow(row));
         }     
         foreach (DataRow row in pdsomorderkey.ttblomorderkey)
         {
            result.omorderkey.Add(Omorderkey.BuildOmorderkeyFromRow(row));
         }     
         foreach (DataRow row in pdsomorderundropcartoninfo.ttblomorderundropcartoninfo)
         {
            result.omorderundropcartoninfo.Add(Omorderundropcartoninfo.BuildOmorderundropcartoninfoFromRow(row));
         }     
          
         return result;
          
      }

      public AstwladminOMUnDropResponseAPI OMUnDrop(AstwladminOMUnDropRequestAPI AstwladminOMUnDropRequestAPI)
      {   
         var result = new AstwladminOMUnDropResponseAPI();
         
         var pdsominfo = new pdsominfoDataSet();
            
         var pdsomorderundropcriteria = new pdsomorderundropcriteriaDataSet();
            
         var pdsomorderdroplist = new pdsomorderdroplistDataSet();
            
         var pdsomorderdropsummary = new pdsomorderdropsummaryDataSet();
            
         var pdsomorderdropwaves = new pdsomorderdropwavesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblominfoRow = pdsominfo.ttblominfo.NewttblominfoRow();
         Ominfo.UpdateRowFromOminfo(ref ttblominfoRow, AstwladminOMUnDropRequestAPI.ominfo);
         pdsominfo.ttblominfo.AddttblominfoRow((pdsominfoDataSet.ttblominfoRow)ttblominfoRow);
          
         foreach (var obj in AstwladminOMUnDropRequestAPI.omorderdroplist)
         {
            DataRow ttblomorderdroplistRow = pdsomorderdroplist.ttblomorderdroplist.NewttblomorderdroplistRow();
            Omorderdroplist.UpdateRowFromOmorderdroplist(ref ttblomorderdroplistRow, obj);
            pdsomorderdroplist.ttblomorderdroplist.AddttblomorderdroplistRow((pdsomorderdroplistDataSet.ttblomorderdroplistRow)ttblomorderdroplistRow);
         }
          
         DataRow ttblomorderundropcriteriaRow = pdsomorderundropcriteria.ttblomorderundropcriteria.NewttblomorderundropcriteriaRow();
         Omorderundropcriteria.UpdateRowFromOmorderundropcriteria(ref ttblomorderundropcriteriaRow, AstwladminOMUnDropRequestAPI.omorderundropcriteria);
         pdsomorderundropcriteria.ttblomorderundropcriteria.AddttblomorderundropcriteriaRow((pdsomorderundropcriteriaDataSet.ttblomorderundropcriteriaRow)ttblomorderundropcriteriaRow);
          
         
         NLogLoggerP.Trace("OMUnDrop - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMUnDrop(ref pdsContext,  pdsominfo,  pdsomorderundropcriteria,  pdsomorderdroplist, out pdsomorderdropsummary, out pdsomorderdropwaves, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMUnDrop - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsominfo); 
    
         foreach (DataRow row in pdsomorderdropsummary.ttblomorderdropsummary)
         {
            result.omorderdropsummary.Add(Omorderdropsummary.BuildOmorderdropsummaryFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdropwaves.ttblomorderdropwaves)
         {
            result.omorderdropwaves.Add(Omorderdropwaves.BuildOmorderdropwavesFromRow(row));
         }     
          
         return result;
          
      }

      public AstwladminOMZeroShipResponseAPI OMZeroShip(AstwladminOMZeroShipRequestAPI AstwladminOMZeroShipRequestAPI)
      {   
         var result = new AstwladminOMZeroShipResponseAPI();
         
         var pdsomorderzeroshipcriteria = new pdsomorderzeroshipcriteriaDataSet();
            
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsomorderdropsummary = new pdsomorderdropsummaryDataSet();
            
         var pdsomorderdroperrors = new pdsomorderdroperrorsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminOMZeroShipRequestAPI.omorderkey)
         {
            DataRow ttblomorderkeyRow = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
            Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyRow, obj);
            pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyRow);
         }
          
         DataRow ttblomorderzeroshipcriteriaRow = pdsomorderzeroshipcriteria.ttblomorderzeroshipcriteria.NewttblomorderzeroshipcriteriaRow();
         Omorderzeroshipcriteria.UpdateRowFromOmorderzeroshipcriteria(ref ttblomorderzeroshipcriteriaRow, AstwladminOMZeroShipRequestAPI.omorderzeroshipcriteria);
         pdsomorderzeroshipcriteria.ttblomorderzeroshipcriteria.AddttblomorderzeroshipcriteriaRow((pdsomorderzeroshipcriteriaDataSet.ttblomorderzeroshipcriteriaRow)ttblomorderzeroshipcriteriaRow);
          
         
         NLogLoggerP.Trace("OMZeroShip - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMZeroShip(ref pdsContext,  pdsomorderzeroshipcriteria,  pdsomorderkey, out pdsomorderdropsummary, out pdsomorderdroperrors, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMZeroShip - Astwladmin - After Call");

         
         this.ReportErrors(pdsomorderdroperrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderzeroshipcriteria); 
    
         foreach (DataRow row in pdsomorderdroperrors.ttblomorderdroperrors)
         {
            result.omorderdroperrors.Add(Omorderdroperrors.BuildOmorderdroperrorsFromRow(row));
         }     
         foreach (DataRow row in pdsomorderdropsummary.ttblomorderdropsummary)
         {
            result.omorderdropsummary.Add(Omorderdropsummary.BuildOmorderdropsummaryFromRow(row));
         }     
          
         return result;
          
      }

      public string ChangeOrderCarrier(AstwladminChangeOrderCarrierRequestAPI AstwladminChangeOrderCarrierRequestAPI)
      {   
          
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AstwladminChangeOrderCarrierRequestAPI.omorderkey)
         {
            DataRow ttblomorderkeyRow = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
            Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyRow, obj);
            pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyRow);
         }
          
         var  carrier = AstwladminChangeOrderCarrierRequestAPI.carrier;
            
         var  service = AstwladminChangeOrderCarrierRequestAPI.service;
            
         
         NLogLoggerP.Trace("ChangeOrderCarrier - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ChangeOrderCarrier(ref pdsContext,  pdsomorderkey,  carrier,  service, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ChangeOrderCarrier - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
         return cWarningMessage;
      
      }

      public string ChangeOrderCustom(AstwladminChangeOrderCustomRequestAPI AstwladminChangeOrderCustomRequestAPI)
      {   
          
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         DataRow ttblomorderkeyRow = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
         Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyRow, AstwladminChangeOrderCustomRequestAPI.omorderkey);
         pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyRow);
          
         var  custom1 = AstwladminChangeOrderCustomRequestAPI.custom1;
            
         var  custom2 = AstwladminChangeOrderCustomRequestAPI.custom2;
            
         var  custom3 = AstwladminChangeOrderCustomRequestAPI.custom3;
            
         var  custom4 = AstwladminChangeOrderCustomRequestAPI.custom4;
            
         var  custom5 = AstwladminChangeOrderCustomRequestAPI.custom5;
            
         
         NLogLoggerP.Trace("ChangeOrderCustom - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ChangeOrderCustom(ref pdsContext,  pdsomorderkey,  custom1,  custom2,  custom3,  custom4,  custom5, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ChangeOrderCustom - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
         return cWarningMessage;
      
      }

      public IEnumerable<Wavepickemployees> GetWavePickEmployees(Wavepickemployeecriteria wavepickemployeecriteria)
      {   
         var results = new List<Wavepickemployees>();
         
         var pdswavepickemployees = new pdswavepickemployeesDataSet();
            
         DataRow ttblwavepickemployeecriteriaCriteria = pdswavepickemployees.ttblwavepickemployeecriteria.NewttblwavepickemployeecriteriaRow();
         Wavepickemployeecriteria.UpdateRowFromWavepickemployeecriteria(ref ttblwavepickemployeecriteriaCriteria, wavepickemployeecriteria);
         pdswavepickemployees.ttblwavepickemployeecriteria.AddttblwavepickemployeecriteriaRow((pdswavepickemployeesDataSet.ttblwavepickemployeecriteriaRow)ttblwavepickemployeecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetWavePickEmployees - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetWavePickEmployees(ref pdsContext, ref pdswavepickemployees, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetWavePickEmployees - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswavepickemployees); 
    
            foreach (DataRow row in pdswavepickemployees.ttblwavepickemployees)
            {
                results.Add(Wavepickemployees.BuildWavepickemployeesFromRow(row));
            }
            return results;
        
      }

      public void SetWavePickEmployees(AstwladminSetWavePickEmployeesRequestAPI AstwladminSetWavePickEmployeesRequestAPI)
      {   
         
         var pdswavepickemployees = new pdswavepickemployeesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblwavepickemployeecriteriaRow = pdswavepickemployees.ttblwavepickemployeecriteria.NewttblwavepickemployeecriteriaRow();
         Wavepickemployeecriteria.UpdateRowFromWavepickemployeecriteria(ref ttblwavepickemployeecriteriaRow, AstwladminSetWavePickEmployeesRequestAPI.wavepickemployeecriteria);
         pdswavepickemployees.ttblwavepickemployeecriteria.AddttblwavepickemployeecriteriaRow((pdswavepickemployeesDataSet.ttblwavepickemployeecriteriaRow)ttblwavepickemployeecriteriaRow);
          
         foreach (var obj in AstwladminSetWavePickEmployeesRequestAPI.wavepickemployees)
         {
            DataRow ttblwavepickemployeesRow = pdswavepickemployees.ttblwavepickemployees.NewttblwavepickemployeesRow();
            Wavepickemployees.UpdateRowFromWavepickemployees(ref ttblwavepickemployeesRow, obj);
            pdswavepickemployees.ttblwavepickemployees.AddttblwavepickemployeesRow((pdswavepickemployeesDataSet.ttblwavepickemployeesRow)ttblwavepickemployeesRow);
         }
          
         
         NLogLoggerP.Trace("SetWavePickEmployees - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.SetWavePickEmployees(ref pdsContext,  pdswavepickemployees, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SetWavePickEmployees - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswavepickemployees);
      }

      public AstwladminGetWavePickAssignmentsResponseAPI GetWavePickAssignments(Wavepickcriteria wavepickcriteria)
      {   
         var result = new AstwladminGetWavePickAssignmentsResponseAPI();
         
         var pdswavepickassignments = new pdswavepickassignmentsDataSet();
            
         DataRow ttblwavepickcriteriaCriteria = pdswavepickassignments.ttblwavepickcriteria.NewttblwavepickcriteriaRow();
         Wavepickcriteria.UpdateRowFromWavepickcriteria(ref ttblwavepickcriteriaCriteria, wavepickcriteria);
         pdswavepickassignments.ttblwavepickcriteria.AddttblwavepickcriteriaRow((pdswavepickassignmentsDataSet.ttblwavepickcriteriaRow)ttblwavepickcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetWavePickAssignments - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetWavePickAssignments(ref pdsContext, ref pdswavepickassignments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetWavePickAssignments - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswavepickassignments); 
    
         foreach (DataRow row in pdswavepickassignments.ttblwavepickpicks)
         {
            result.wavepickpicks.Add(Wavepickpicks.BuildWavepickpicksFromRow(row));
         }     
         foreach (DataRow row in pdswavepickassignments.ttblwavepickwaves)
         {
            result.wavepickwaves.Add(Wavepickwaves.BuildWavepickwavesFromRow(row));
         }     
          
         return result;
          
      }

      public void OMShipLoaded(IEnumerable<Omorderkey> omorderkey)
      {   
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         foreach (var obj in omorderkey)
         {
             DataRow row = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
             Omorderkey.UpdateRowFromOmorderkey(ref row, obj);
             pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMShipLoaded - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMShipLoaded(ref pdsContext,  pdsomorderkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMShipLoaded - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey);
      }

      public void OMHold(IEnumerable<Omorderkey> omorderkey)
      {   
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         foreach (var obj in omorderkey)
         {
             DataRow row = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
             Omorderkey.UpdateRowFromOmorderkey(ref row, obj);
             pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMHold - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMHold(ref pdsContext,  pdsomorderkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMHold - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey);
      }

      public void OMHoldLines(IEnumerable<Omorderlinekey> omorderlinekey)
      {   
         
         var pdsomorderlinekey = new pdsomorderlinekeyDataSet();
            
         foreach (var obj in omorderlinekey)
         {
             DataRow row = pdsomorderlinekey.ttblomorderlinekey.NewttblomorderlinekeyRow();
             Omorderlinekey.UpdateRowFromOmorderlinekey(ref row, obj);
             pdsomorderlinekey.ttblomorderlinekey.AddttblomorderlinekeyRow((pdsomorderlinekeyDataSet.ttblomorderlinekeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMHoldLines - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMHoldLines(ref pdsContext,  pdsomorderlinekey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMHoldLines - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderlinekey);
      }

      public void OMReleaseHoldLines(IEnumerable<Omorderlinekey> omorderlinekey)
      {   
         
         var pdsomorderlinekey = new pdsomorderlinekeyDataSet();
            
         foreach (var obj in omorderlinekey)
         {
             DataRow row = pdsomorderlinekey.ttblomorderlinekey.NewttblomorderlinekeyRow();
             Omorderlinekey.UpdateRowFromOmorderlinekey(ref row, obj);
             pdsomorderlinekey.ttblomorderlinekey.AddttblomorderlinekeyRow((pdsomorderlinekeyDataSet.ttblomorderlinekeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMReleaseHoldLines - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMReleaseHoldLines(ref pdsContext,  pdsomorderlinekey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMReleaseHoldLines - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderlinekey);
      }

      public void OMReleaseHold(IEnumerable<Omorderkey> omorderkey)
      {   
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         foreach (var obj in omorderkey)
         {
             DataRow row = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
             Omorderkey.UpdateRowFromOmorderkey(ref row, obj);
             pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("OMReleaseHold - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.OMReleaseHold(ref pdsContext,  pdsomorderkey, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("OMReleaseHold - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey);
      }

      public void UpdateProdCat(IEnumerable<Updateprodcatlist> updateprodcatlist)
      {   
         
         var pdsupdateprodcatlist = new pdsupdateprodcatlistDataSet();
            
         foreach (var obj in updateprodcatlist)
         {
             DataRow row = pdsupdateprodcatlist.ttblupdateprodcatlist.NewttblupdateprodcatlistRow();
             Updateprodcatlist.UpdateRowFromUpdateprodcatlist(ref row, obj);
             pdsupdateprodcatlist.ttblupdateprodcatlist.AddttblupdateprodcatlistRow((pdsupdateprodcatlistDataSet.ttblupdateprodcatlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateProdCat - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.UpdateProdCat(ref pdsContext,  pdsupdateprodcatlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateProdCat - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsupdateprodcatlist);
      }

      public IEnumerable<Refreshprodcatresults> RefreshProdCat(Refreshprodcatcriteria refreshprodcatcriteria)
      {   
         var results = new List<Refreshprodcatresults>();
         
         var pdsrefreshprodcatcriteria = new pdsrefreshprodcatcriteriaDataSet();
            
         var pdsrefreshprodcatresults = new pdsrefreshprodcatresultsDataSet();
            
         DataRow ttblrefreshprodcatcriteriaCriteria = pdsrefreshprodcatcriteria.ttblrefreshprodcatcriteria.NewttblrefreshprodcatcriteriaRow();
         Refreshprodcatcriteria.UpdateRowFromRefreshprodcatcriteria(ref ttblrefreshprodcatcriteriaCriteria, refreshprodcatcriteria);
         pdsrefreshprodcatcriteria.ttblrefreshprodcatcriteria.AddttblrefreshprodcatcriteriaRow((pdsrefreshprodcatcriteriaDataSet.ttblrefreshprodcatcriteriaRow)ttblrefreshprodcatcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("RefreshProdCat - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.RefreshProdCat(ref pdsContext,  pdsrefreshprodcatcriteria, out pdsrefreshprodcatresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("RefreshProdCat - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrefreshprodcatcriteria); 
    
            foreach (DataRow row in pdsrefreshprodcatresults.ttblrefreshprodcatresults)
            {
                results.Add(Refreshprodcatresults.BuildRefreshprodcatresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Receipttransdetail> GetReceiptTransactionDetail(Receipttransdetailcriteria receipttransdetailcriteria)
      {   
         var results = new List<Receipttransdetail>();
         
         var pdsreceipttransdetailcriteria = new pdsreceipttransdetailcriteriaDataSet();
            
         var pdsreceipttransdetail = new pdsreceipttransdetailDataSet();
            
         DataRow ttblreceipttransdetailcriteriaCriteria = pdsreceipttransdetailcriteria.ttblreceipttransdetailcriteria.NewttblreceipttransdetailcriteriaRow();
         Receipttransdetailcriteria.UpdateRowFromReceipttransdetailcriteria(ref ttblreceipttransdetailcriteriaCriteria, receipttransdetailcriteria);
         pdsreceipttransdetailcriteria.ttblreceipttransdetailcriteria.AddttblreceipttransdetailcriteriaRow((pdsreceipttransdetailcriteriaDataSet.ttblreceipttransdetailcriteriaRow)ttblreceipttransdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetReceiptTransactionDetail - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetReceiptTransactionDetail(ref pdsContext,  pdsreceipttransdetailcriteria, out pdsreceipttransdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetReceiptTransactionDetail - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreceipttransdetailcriteria); 
    
            foreach (DataRow row in pdsreceipttransdetail.ttblreceipttransdetail)
            {
                results.Add(Receipttransdetail.BuildReceipttransdetailFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Receipttransmaster> GetReceiptTransactionMaster(Receipttransmastercriteria receipttransmastercriteria)
      {   
         var results = new List<Receipttransmaster>();
         
         var pdsreceipttransmastercriteria = new pdsreceipttransmastercriteriaDataSet();
            
         var pdsreceipttransmaster = new pdsreceipttransmasterDataSet();
            
         DataRow ttblreceipttransmastercriteriaCriteria = pdsreceipttransmastercriteria.ttblreceipttransmastercriteria.NewttblreceipttransmastercriteriaRow();
         Receipttransmastercriteria.UpdateRowFromReceipttransmastercriteria(ref ttblreceipttransmastercriteriaCriteria, receipttransmastercriteria);
         pdsreceipttransmastercriteria.ttblreceipttransmastercriteria.AddttblreceipttransmastercriteriaRow((pdsreceipttransmastercriteriaDataSet.ttblreceipttransmastercriteriaRow)ttblreceipttransmastercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetReceiptTransactionMaster - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetReceiptTransactionMaster(ref pdsContext,  pdsreceipttransmastercriteria, out pdsreceipttransmaster, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetReceiptTransactionMaster - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreceipttransmastercriteria); 
    
            foreach (DataRow row in pdsreceipttransmaster.ttblreceipttransmaster)
            {
                results.Add(Receipttransmaster.BuildReceipttransmasterFromRow(row));
            }
            return results;
        
      }

      public AstwladminGetReceiptTransactionContentsResponseAPI GetReceiptTransactionContents(Receipttranscontcriteria receipttranscontcriteria)
      {   
         var result = new AstwladminGetReceiptTransactionContentsResponseAPI();
         
         var pdsreceipttranscontcriteria = new pdsreceipttranscontcriteriaDataSet();
            
         var pdsreceipttranscontmst = new pdsreceipttranscontmstDataSet();
            
         var pdsreceipttranscontdet = new pdsreceipttranscontdetDataSet();
            
         DataRow ttblreceipttranscontcriteriaCriteria = pdsreceipttranscontcriteria.ttblreceipttranscontcriteria.NewttblreceipttranscontcriteriaRow();
         Receipttranscontcriteria.UpdateRowFromReceipttranscontcriteria(ref ttblreceipttranscontcriteriaCriteria, receipttranscontcriteria);
         pdsreceipttranscontcriteria.ttblreceipttranscontcriteria.AddttblreceipttranscontcriteriaRow((pdsreceipttranscontcriteriaDataSet.ttblreceipttranscontcriteriaRow)ttblreceipttranscontcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetReceiptTransactionContents - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetReceiptTransactionContents(ref pdsContext,  pdsreceipttranscontcriteria, out pdsreceipttranscontmst, out pdsreceipttranscontdet, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetReceiptTransactionContents - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreceipttranscontcriteria); 
    
         foreach (DataRow row in pdsreceipttranscontdet.ttblreceipttranscontdet)
         {
            result.receipttranscontdet.Add(Receipttranscontdet.BuildReceipttranscontdetFromRow(row));
         }     
         if (pdsreceipttranscontmst.ttblreceipttranscontmst.Count > 0)
         {
            result.receipttranscontmst = Receipttranscontmst.BuildReceipttranscontmstFromRow(pdsreceipttranscontmst.ttblreceipttranscontmst[0]);
         }
                    
          
         return result;
          
      }

      public void DeleteReceiptTransaction(Receipttranscontcriteria receipttranscontcriteria)
      {   
         
         var pdsreceipttranscontcriteria = new pdsreceipttranscontcriteriaDataSet();
            
         DataRow ttblreceipttranscontcriteriaCriteria = pdsreceipttranscontcriteria.ttblreceipttranscontcriteria.NewttblreceipttranscontcriteriaRow();
         Receipttranscontcriteria.UpdateRowFromReceipttranscontcriteria(ref ttblreceipttranscontcriteriaCriteria, receipttranscontcriteria);
         pdsreceipttranscontcriteria.ttblreceipttranscontcriteria.AddttblreceipttranscontcriteriaRow((pdsreceipttranscontcriteriaDataSet.ttblreceipttranscontcriteriaRow)ttblreceipttranscontcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteReceiptTransaction - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteReceiptTransaction(ref pdsContext,  pdsreceipttranscontcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteReceiptTransaction - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreceipttranscontcriteria);
      }

      public IEnumerable<Rectransactionresults> GetReceiptTransactionsList(Rectransactioncriteria rectransactioncriteria)
      {   
         var results = new List<Rectransactionresults>();
         
         var pdsrectransactioncriteria = new pdsrectransactioncriteriaDataSet();
            
         var pdsrectransactionresults = new pdsrectransactionresultsDataSet();
            
         DataRow ttblrectransactioncriteriaCriteria = pdsrectransactioncriteria.ttblrectransactioncriteria.NewttblrectransactioncriteriaRow();
         Rectransactioncriteria.UpdateRowFromRectransactioncriteria(ref ttblrectransactioncriteriaCriteria, rectransactioncriteria);
         pdsrectransactioncriteria.ttblrectransactioncriteria.AddttblrectransactioncriteriaRow((pdsrectransactioncriteriaDataSet.ttblrectransactioncriteriaRow)ttblrectransactioncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetReceiptTransactionsList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetReceiptTransactionsList(ref pdsContext,  pdsrectransactioncriteria, out pdsrectransactionresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetReceiptTransactionsList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsrectransactioncriteria); 
    
            foreach (DataRow row in pdsrectransactionresults.ttblrectransactionresults)
            {
                results.Add(Rectransactionresults.BuildRectransactionresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Reclinetransactionresults> GetReceiptLinesTransactionsList(Reclinetransactioncriteria reclinetransactioncriteria)
      {   
         var results = new List<Reclinetransactionresults>();
         
         var pdsreclinetransactioncriteria = new pdsreclinetransactioncriteriaDataSet();
            
         var pdsreclinetransactionresults = new pdsreclinetransactionresultsDataSet();
            
         DataRow ttblreclinetransactioncriteriaCriteria = pdsreclinetransactioncriteria.ttblreclinetransactioncriteria.NewttblreclinetransactioncriteriaRow();
         Reclinetransactioncriteria.UpdateRowFromReclinetransactioncriteria(ref ttblreclinetransactioncriteriaCriteria, reclinetransactioncriteria);
         pdsreclinetransactioncriteria.ttblreclinetransactioncriteria.AddttblreclinetransactioncriteriaRow((pdsreclinetransactioncriteriaDataSet.ttblreclinetransactioncriteriaRow)ttblreclinetransactioncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetReceiptLinesTransactionsList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetReceiptLinesTransactionsList(ref pdsContext,  pdsreclinetransactioncriteria, out pdsreclinetransactionresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetReceiptLinesTransactionsList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsreclinetransactioncriteria); 
    
            foreach (DataRow row in pdsreclinetransactionresults.ttblreclinetransactionresults)
            {
                results.Add(Reclinetransactionresults.BuildReclinetransactionresultsFromRow(row));
            }
            return results;
        
      }

      public AstwladminGetStationListResponseAPI GetStationList(Stationcriteria stationcriteria)
      {   
         var result = new AstwladminGetStationListResponseAPI();
         
         var pdsstationcriteria = new pdsstationcriteriaDataSet();
            
         var pdsstationresults = new pdsstationresultsDataSet();
            
         DataRow ttblstationcriteriaCriteria = pdsstationcriteria.ttblstationcriteria.NewttblstationcriteriaRow();
         Stationcriteria.UpdateRowFromStationcriteria(ref ttblstationcriteriaCriteria, stationcriteria);
         pdsstationcriteria.ttblstationcriteria.AddttblstationcriteriaRow((pdsstationcriteriaDataSet.ttblstationcriteriaRow)ttblstationcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetStationList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetStationList(ref pdsContext,  pdsstationcriteria, out pdsstationresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetStationList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsstationcriteria); 
    
         foreach (DataRow row in pdsstationresults.ttblstationresults)
         {
            result.stationresults.Add(Stationresults.BuildStationresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Systemparametertypes> GetSystemParameterTypeList()
      {   
         var results = new List<Systemparametertypes>();
         
         var pdssystemparametertypes = new pdssystemparametertypesDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSystemParameterTypeList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetSystemParameterTypeList(ref pdsContext, out pdssystemparametertypes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSystemParameterTypeList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssystemparametertypes); 
    
            foreach (DataRow row in pdssystemparametertypes.ttblsystemparametertypes)
            {
                results.Add(Systemparametertypes.BuildSystemparametertypesFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Systemparamdefnlistresults> GetSystemParameterDefinitionList(Systemparamdefnlistcriteria systemparamdefnlistcriteria)
      {   
         var results = new List<Systemparamdefnlistresults>();
         
         var pdssystemparamdefnlistcriteria = new pdssystemparamdefnlistcriteriaDataSet();
            
         var pdssystemparamdefnlistresults = new pdssystemparamdefnlistresultsDataSet();
            
         DataRow ttblsystemparamdefnlistcriteriaCriteria = pdssystemparamdefnlistcriteria.ttblsystemparamdefnlistcriteria.NewttblsystemparamdefnlistcriteriaRow();
         Systemparamdefnlistcriteria.UpdateRowFromSystemparamdefnlistcriteria(ref ttblsystemparamdefnlistcriteriaCriteria, systemparamdefnlistcriteria);
         pdssystemparamdefnlistcriteria.ttblsystemparamdefnlistcriteria.AddttblsystemparamdefnlistcriteriaRow((pdssystemparamdefnlistcriteriaDataSet.ttblsystemparamdefnlistcriteriaRow)ttblsystemparamdefnlistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSystemParameterDefinitionList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetSystemParameterDefinitionList(ref pdsContext,  pdssystemparamdefnlistcriteria, out pdssystemparamdefnlistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSystemParameterDefinitionList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssystemparamdefnlistcriteria); 
    
            foreach (DataRow row in pdssystemparamdefnlistresults.ttblsystemparamdefnlistresults)
            {
                results.Add(Systemparamdefnlistresults.BuildSystemparamdefnlistresultsFromRow(row));
            }
            return results;
        
      }

      public void UpdateSystemParameterValue(Updatesysparamvalcriteria updatesysparamvalcriteria)
      {   
         
         var pdsupdatesysparamvalcriteria = new pdsupdatesysparamvalcriteriaDataSet();
            
         DataRow ttblupdatesysparamvalcriteriaCriteria = pdsupdatesysparamvalcriteria.ttblupdatesysparamvalcriteria.NewttblupdatesysparamvalcriteriaRow();
         Updatesysparamvalcriteria.UpdateRowFromUpdatesysparamvalcriteria(ref ttblupdatesysparamvalcriteriaCriteria, updatesysparamvalcriteria);
         pdsupdatesysparamvalcriteria.ttblupdatesysparamvalcriteria.AddttblupdatesysparamvalcriteriaRow((pdsupdatesysparamvalcriteriaDataSet.ttblupdatesysparamvalcriteriaRow)ttblupdatesysparamvalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateSystemParameterValue - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.UpdateSystemParameterValue(ref pdsContext,  pdsupdatesysparamvalcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateSystemParameterValue - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsupdatesysparamvalcriteria);
      }

      public void DeleteSystemParameterValue(Deletesysparamvalcriteria deletesysparamvalcriteria)
      {   
         
         var pdsdeletesysparamvalcriteria = new pdsdeletesysparamvalcriteriaDataSet();
            
         DataRow ttbldeletesysparamvalcriteriaCriteria = pdsdeletesysparamvalcriteria.ttbldeletesysparamvalcriteria.NewttbldeletesysparamvalcriteriaRow();
         Deletesysparamvalcriteria.UpdateRowFromDeletesysparamvalcriteria(ref ttbldeletesysparamvalcriteriaCriteria, deletesysparamvalcriteria);
         pdsdeletesysparamvalcriteria.ttbldeletesysparamvalcriteria.AddttbldeletesysparamvalcriteriaRow((pdsdeletesysparamvalcriteriaDataSet.ttbldeletesysparamvalcriteriaRow)ttbldeletesysparamvalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteSystemParameterValue - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteSystemParameterValue(ref pdsContext,  pdsdeletesysparamvalcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteSystemParameterValue - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdeletesysparamvalcriteria);
      }

      public void ValidateMultipleLocationCreate(Valmultiloccreatecriteria valmultiloccreatecriteria)
      {   
         
         var pdsvalmultiloccreatecriteria = new pdsvalmultiloccreatecriteriaDataSet();
            
         DataRow ttblvalmultiloccreatecriteriaCriteria = pdsvalmultiloccreatecriteria.ttblvalmultiloccreatecriteria.NewttblvalmultiloccreatecriteriaRow();
         Valmultiloccreatecriteria.UpdateRowFromValmultiloccreatecriteria(ref ttblvalmultiloccreatecriteriaCriteria, valmultiloccreatecriteria);
         pdsvalmultiloccreatecriteria.ttblvalmultiloccreatecriteria.AddttblvalmultiloccreatecriteriaRow((pdsvalmultiloccreatecriteriaDataSet.ttblvalmultiloccreatecriteriaRow)ttblvalmultiloccreatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateMultipleLocationCreate - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.ValidateMultipleLocationCreate(ref pdsContext,  pdsvalmultiloccreatecriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ValidateMultipleLocationCreate - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvalmultiloccreatecriteria);
      }

      public void BuildMultipleLocationWorkingList(Bldmultiloclistcriteria bldmultiloclistcriteria)
      {   
         
         var pdsbldmultiloclistcriteria = new pdsbldmultiloclistcriteriaDataSet();
            
         DataRow ttblbldmultiloclistcriteriaCriteria = pdsbldmultiloclistcriteria.ttblbldmultiloclistcriteria.NewttblbldmultiloclistcriteriaRow();
         Bldmultiloclistcriteria.UpdateRowFromBldmultiloclistcriteria(ref ttblbldmultiloclistcriteriaCriteria, bldmultiloclistcriteria);
         pdsbldmultiloclistcriteria.ttblbldmultiloclistcriteria.AddttblbldmultiloclistcriteriaRow((pdsbldmultiloclistcriteriaDataSet.ttblbldmultiloclistcriteriaRow)ttblbldmultiloclistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("BuildMultipleLocationWorkingList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.BuildMultipleLocationWorkingList(ref pdsContext,  pdsbldmultiloclistcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("BuildMultipleLocationWorkingList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbldmultiloclistcriteria);
      }

      public Getmultiloccontrolresult GetMultipleLocationWorkingControl(Getmultiloccontrolcriteria getmultiloccontrolcriteria)
      {   
         var result = new Getmultiloccontrolresult();
         
         var pdsgetmultiloccontrolcriteria = new pdsgetmultiloccontrolcriteriaDataSet();
            
         var pdsgetmultiloccontrolresult = new pdsgetmultiloccontrolresultDataSet();
            
         DataRow ttblgetmultiloccontrolcriteriaCriteria = pdsgetmultiloccontrolcriteria.ttblgetmultiloccontrolcriteria.NewttblgetmultiloccontrolcriteriaRow();
         Getmultiloccontrolcriteria.UpdateRowFromGetmultiloccontrolcriteria(ref ttblgetmultiloccontrolcriteriaCriteria, getmultiloccontrolcriteria);
         pdsgetmultiloccontrolcriteria.ttblgetmultiloccontrolcriteria.AddttblgetmultiloccontrolcriteriaRow((pdsgetmultiloccontrolcriteriaDataSet.ttblgetmultiloccontrolcriteriaRow)ttblgetmultiloccontrolcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetMultipleLocationWorkingControl - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetMultipleLocationWorkingControl(ref pdsContext,  pdsgetmultiloccontrolcriteria, out pdsgetmultiloccontrolresult, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetMultipleLocationWorkingControl - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetmultiloccontrolcriteria); 
    
         if (pdsgetmultiloccontrolresult.ttblgetmultiloccontrolresult.Count > 0) 
         { 
             result = Getmultiloccontrolresult.BuildGetmultiloccontrolresultFromRow(pdsgetmultiloccontrolresult.ttblgetmultiloccontrolresult[0]);
         } 
              
          
         return result;
          
      }

      public AstwladminGetMultipleLocationWorkingListResponseAPI GetMultipleLocationWorkingList(Getmultiloclistcriteria getmultiloclistcriteria)
      {   
         var result = new AstwladminGetMultipleLocationWorkingListResponseAPI();
         
         var pdsgetmultiloclistcriteria = new pdsgetmultiloclistcriteriaDataSet();
            
         var pdsgetmultiloccontrolresult = new pdsgetmultiloccontrolresultDataSet();
            
         var pdsgetmultiloclistresults = new pdsgetmultiloclistresultsDataSet();
            
         DataRow ttblgetmultiloclistcriteriaCriteria = pdsgetmultiloclistcriteria.ttblgetmultiloclistcriteria.NewttblgetmultiloclistcriteriaRow();
         Getmultiloclistcriteria.UpdateRowFromGetmultiloclistcriteria(ref ttblgetmultiloclistcriteriaCriteria, getmultiloclistcriteria);
         pdsgetmultiloclistcriteria.ttblgetmultiloclistcriteria.AddttblgetmultiloclistcriteriaRow((pdsgetmultiloclistcriteriaDataSet.ttblgetmultiloclistcriteriaRow)ttblgetmultiloclistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetMultipleLocationWorkingList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetMultipleLocationWorkingList(ref pdsContext,  pdsgetmultiloclistcriteria, out pdsgetmultiloccontrolresult, out pdsgetmultiloclistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetMultipleLocationWorkingList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetmultiloclistcriteria); 
    
         if (pdsgetmultiloccontrolresult.ttblgetmultiloccontrolresult.Count > 0)
         {
            result.getmultiloccontrolresult = Getmultiloccontrolresult.BuildGetmultiloccontrolresultFromRow(pdsgetmultiloccontrolresult.ttblgetmultiloccontrolresult[0]);
         }
                    
         foreach (DataRow row in pdsgetmultiloclistresults.ttblgetmultiloclistresults)
         {
            result.getmultiloclistresults.Add(Getmultiloclistresults.BuildGetmultiloclistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public void DeleteMultipleLocationWorkingBins(IEnumerable<Deletemultilocbinscriteria> deletemultilocbinscriteria)
      {   
         
         var pdsdeletemultilocbinscriteria = new pdsdeletemultilocbinscriteriaDataSet();
            
         foreach (var obj in deletemultilocbinscriteria)
         {
             DataRow row = pdsdeletemultilocbinscriteria.ttbldeletemultilocbinscriteria.NewttbldeletemultilocbinscriteriaRow();
             Deletemultilocbinscriteria.UpdateRowFromDeletemultilocbinscriteria(ref row, obj);
             pdsdeletemultilocbinscriteria.ttbldeletemultilocbinscriteria.AddttbldeletemultilocbinscriteriaRow((pdsdeletemultilocbinscriteriaDataSet.ttbldeletemultilocbinscriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteMultipleLocationWorkingBins - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteMultipleLocationWorkingBins(ref pdsContext,  pdsdeletemultilocbinscriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteMultipleLocationWorkingBins - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdeletemultilocbinscriteria);
      }

      public void CreateMultipleLocations(Createmultiloccriteria createmultiloccriteria)
      {   
         
         var pdscreatemultiloccriteria = new pdscreatemultiloccriteriaDataSet();
            
         DataRow ttblcreatemultiloccriteriaCriteria = pdscreatemultiloccriteria.ttblcreatemultiloccriteria.NewttblcreatemultiloccriteriaRow();
         Createmultiloccriteria.UpdateRowFromCreatemultiloccriteria(ref ttblcreatemultiloccriteriaCriteria, createmultiloccriteria);
         pdscreatemultiloccriteria.ttblcreatemultiloccriteria.AddttblcreatemultiloccriteriaRow((pdscreatemultiloccriteriaDataSet.ttblcreatemultiloccriteriaRow)ttblcreatemultiloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateMultipleLocations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.CreateMultipleLocations(ref pdsContext,  pdscreatemultiloccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateMultipleLocations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreatemultiloccriteria);
      }

      public IEnumerable<Getlabeludcresults> GetLabelUserDefinedConfigurations(Getlabeludccriteria getlabeludccriteria)
      {   
         var results = new List<Getlabeludcresults>();
         
         var pdsgetlabeludccriteria = new pdsgetlabeludccriteriaDataSet();
            
         var pdsgetlabeludcresults = new pdsgetlabeludcresultsDataSet();
            
         DataRow ttblgetlabeludccriteriaCriteria = pdsgetlabeludccriteria.ttblgetlabeludccriteria.NewttblgetlabeludccriteriaRow();
         Getlabeludccriteria.UpdateRowFromGetlabeludccriteria(ref ttblgetlabeludccriteriaCriteria, getlabeludccriteria);
         pdsgetlabeludccriteria.ttblgetlabeludccriteria.AddttblgetlabeludccriteriaRow((pdsgetlabeludccriteriaDataSet.ttblgetlabeludccriteriaRow)ttblgetlabeludccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLabelUserDefinedConfigurations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetLabelUserDefinedConfigurations(ref pdsContext,  pdsgetlabeludccriteria, out pdsgetlabeludcresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLabelUserDefinedConfigurations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetlabeludccriteria); 
    
            foreach (DataRow row in pdsgetlabeludcresults.ttblgetlabeludcresults)
            {
                results.Add(Getlabeludcresults.BuildGetlabeludcresultsFromRow(row));
            }
            return results;
        
      }

      public void CopyAllLabelUserDefinedConfigurations(Copyalllabeludccriteria copyalllabeludccriteria)
      {   
         
         var pdscopyalllabeludccriteria = new pdscopyalllabeludccriteriaDataSet();
            
         DataRow ttblcopyalllabeludccriteriaCriteria = pdscopyalllabeludccriteria.ttblcopyalllabeludccriteria.NewttblcopyalllabeludccriteriaRow();
         Copyalllabeludccriteria.UpdateRowFromCopyalllabeludccriteria(ref ttblcopyalllabeludccriteriaCriteria, copyalllabeludccriteria);
         pdscopyalllabeludccriteria.ttblcopyalllabeludccriteria.AddttblcopyalllabeludccriteriaRow((pdscopyalllabeludccriteriaDataSet.ttblcopyalllabeludccriteriaRow)ttblcopyalllabeludccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CopyAllLabelUserDefinedConfigurations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.CopyAllLabelUserDefinedConfigurations(ref pdsContext,  pdscopyalllabeludccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CopyAllLabelUserDefinedConfigurations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscopyalllabeludccriteria);
      }

      public void CreateLabelCompanyLevelConfiguration(IEnumerable<Createlabelcolevudccriteria> createlabelcolevudccriteria)
      {   
         
         var pdscreatelabelcolevudccriteria = new pdscreatelabelcolevudccriteriaDataSet();
            
         foreach (var obj in createlabelcolevudccriteria)
         {
             DataRow row = pdscreatelabelcolevudccriteria.ttblcreatelabelcolevudccriteria.NewttblcreatelabelcolevudccriteriaRow();
             Createlabelcolevudccriteria.UpdateRowFromCreatelabelcolevudccriteria(ref row, obj);
             pdscreatelabelcolevudccriteria.ttblcreatelabelcolevudccriteria.AddttblcreatelabelcolevudccriteriaRow((pdscreatelabelcolevudccriteriaDataSet.ttblcreatelabelcolevudccriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateLabelCompanyLevelConfiguration - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.CreateLabelCompanyLevelConfiguration(ref pdsContext,  pdscreatelabelcolevudccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateLabelCompanyLevelConfiguration - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreatelabelcolevudccriteria);
      }

      public void CreateLabelPrinterLevelConfiguration(IEnumerable<Createlabelprntlevudccrit> createlabelprntlevudccrit)
      {   
         
         var pdscreatelabelprntlevudccriteria = new pdscreatelabelprntlevudccriteriaDataSet();
            
         foreach (var obj in createlabelprntlevudccrit)
         {
             DataRow row = pdscreatelabelprntlevudccriteria.ttblcreatelabelprntlevudccrit.NewttblcreatelabelprntlevudccritRow();
             Createlabelprntlevudccrit.UpdateRowFromCreatelabelprntlevudccrit(ref row, obj);
             pdscreatelabelprntlevudccriteria.ttblcreatelabelprntlevudccrit.AddttblcreatelabelprntlevudccritRow((pdscreatelabelprntlevudccriteriaDataSet.ttblcreatelabelprntlevudccritRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateLabelPrinterLevelConfiguration - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.CreateLabelPrinterLevelConfiguration(ref pdsContext,  pdscreatelabelprntlevudccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateLabelPrinterLevelConfiguration - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscreatelabelprntlevudccriteria);
      }

      public void DeleteLabelUserDefinedConfigurations(IEnumerable<Deletelabeludccriteria> deletelabeludccriteria)
      {   
         
         var pdsdeletelabeludccriteria = new pdsdeletelabeludccriteriaDataSet();
            
         foreach (var obj in deletelabeludccriteria)
         {
             DataRow row = pdsdeletelabeludccriteria.ttbldeletelabeludccriteria.NewttbldeletelabeludccriteriaRow();
             Deletelabeludccriteria.UpdateRowFromDeletelabeludccriteria(ref row, obj);
             pdsdeletelabeludccriteria.ttbldeletelabeludccriteria.AddttbldeletelabeludccriteriaRow((pdsdeletelabeludccriteriaDataSet.ttbldeletelabeludccriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteLabelUserDefinedConfigurations - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.DeleteLabelUserDefinedConfigurations(ref pdsContext,  pdsdeletelabeludccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteLabelUserDefinedConfigurations - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdeletelabeludccriteria);
      }

      public AstwladminGetLabelPrintListResponseAPI GetLabelPrintList(Getlabelprintcriteria getlabelprintcriteria)
      {   
         var result = new AstwladminGetLabelPrintListResponseAPI();
         
         var pdsgetlabelprintcriteria = new pdsgetlabelprintcriteriaDataSet();
            
         var pdsgetlabelprintbinmstresults = new pdsgetlabelprintbinmstresultsDataSet();
            
         var pdsgetlabelprintinvresults = new pdsgetlabelprintinvresultsDataSet();
            
         var pdsgetlabelprintitemresults = new pdsgetlabelprintitemresultsDataSet();
            
         DataRow ttblgetlabelprintcriteriaCriteria = pdsgetlabelprintcriteria.ttblgetlabelprintcriteria.NewttblgetlabelprintcriteriaRow();
         Getlabelprintcriteria.UpdateRowFromGetlabelprintcriteria(ref ttblgetlabelprintcriteriaCriteria, getlabelprintcriteria);
         pdsgetlabelprintcriteria.ttblgetlabelprintcriteria.AddttblgetlabelprintcriteriaRow((pdsgetlabelprintcriteriaDataSet.ttblgetlabelprintcriteriaRow)ttblgetlabelprintcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLabelPrintList - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GetLabelPrintList(ref pdsContext,  pdsgetlabelprintcriteria, out pdsgetlabelprintbinmstresults, out pdsgetlabelprintinvresults, out pdsgetlabelprintitemresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLabelPrintList - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetlabelprintcriteria); 
    
         foreach (DataRow row in pdsgetlabelprintbinmstresults.ttblgetlabelprintbinmstresults)
         {
            result.getlabelprintbinmstresults.Add(Getlabelprintbinmstresults.BuildGetlabelprintbinmstresultsFromRow(row));
         }     
         foreach (DataRow row in pdsgetlabelprintinvresults.ttblgetlabelprintinvresults)
         {
            result.getlabelprintinvresults.Add(Getlabelprintinvresults.BuildGetlabelprintinvresultsFromRow(row));
         }     
         foreach (DataRow row in pdsgetlabelprintitemresults.ttblgetlabelprintitemresults)
         {
            result.getlabelprintitemresults.Add(Getlabelprintitemresults.BuildGetlabelprintitemresultsFromRow(row));
         }     
          
         return result;
          
      }

      public AstwladminGenerateLabelPrintResponseAPI GenerateLabelPrint(AstwladminGenerateLabelPrintRequestAPI AstwladminGenerateLabelPrintRequestAPI)
      {   
         var result = new AstwladminGenerateLabelPrintResponseAPI();
         
         var pdsgeneratelabelprintcriteria = new pdsgeneratelabelprintcriteriaDataSet();
            
         var pdsgeneratelabelprtbincrit = new pdsgeneratelabelprtbincritDataSet();
            
         var pdsgeneratelabelprtinvcrit = new pdsgeneratelabelprtinvcritDataSet();
            
         var pdsgeneratelabelprtitmcrit = new pdsgeneratelabelprtitmcritDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         int iCurrentSequence = 0;
         string cErrorMessage = string.Empty;
   
         DataRow ttblgeneratelabelprintcriteriaRow = pdsgeneratelabelprintcriteria.ttblgeneratelabelprintcriteria.NewttblgeneratelabelprintcriteriaRow();
         Generatelabelprintcriteria.UpdateRowFromGeneratelabelprintcriteria(ref ttblgeneratelabelprintcriteriaRow, AstwladminGenerateLabelPrintRequestAPI.generatelabelprintcriteria);
         pdsgeneratelabelprintcriteria.ttblgeneratelabelprintcriteria.AddttblgeneratelabelprintcriteriaRow((pdsgeneratelabelprintcriteriaDataSet.ttblgeneratelabelprintcriteriaRow)ttblgeneratelabelprintcriteriaRow);
          
         foreach (var obj in AstwladminGenerateLabelPrintRequestAPI.generatelabelprtbincrit)
         {
            DataRow ttblgeneratelabelprtbincritRow = pdsgeneratelabelprtbincrit.ttblgeneratelabelprtbincrit.NewttblgeneratelabelprtbincritRow();
            Generatelabelprtbincrit.UpdateRowFromGeneratelabelprtbincrit(ref ttblgeneratelabelprtbincritRow, obj);
            pdsgeneratelabelprtbincrit.ttblgeneratelabelprtbincrit.AddttblgeneratelabelprtbincritRow((pdsgeneratelabelprtbincritDataSet.ttblgeneratelabelprtbincritRow)ttblgeneratelabelprtbincritRow);
         }
          
         foreach (var obj in AstwladminGenerateLabelPrintRequestAPI.generatelabelprtinvcrit)
         {
            DataRow ttblgeneratelabelprtinvcritRow = pdsgeneratelabelprtinvcrit.ttblgeneratelabelprtinvcrit.NewttblgeneratelabelprtinvcritRow();
            Generatelabelprtinvcrit.UpdateRowFromGeneratelabelprtinvcrit(ref ttblgeneratelabelprtinvcritRow, obj);
            pdsgeneratelabelprtinvcrit.ttblgeneratelabelprtinvcrit.AddttblgeneratelabelprtinvcritRow((pdsgeneratelabelprtinvcritDataSet.ttblgeneratelabelprtinvcritRow)ttblgeneratelabelprtinvcritRow);
         }
          
         foreach (var obj in AstwladminGenerateLabelPrintRequestAPI.generatelabelprtitmcrit)
         {
            DataRow ttblgeneratelabelprtitmcritRow = pdsgeneratelabelprtitmcrit.ttblgeneratelabelprtitmcrit.NewttblgeneratelabelprtitmcritRow();
            Generatelabelprtitmcrit.UpdateRowFromGeneratelabelprtitmcrit(ref ttblgeneratelabelprtitmcritRow, obj);
            pdsgeneratelabelprtitmcrit.ttblgeneratelabelprtitmcrit.AddttblgeneratelabelprtitmcritRow((pdsgeneratelabelprtitmcritDataSet.ttblgeneratelabelprtitmcritRow)ttblgeneratelabelprtitmcritRow);
         }
          
         
         NLogLoggerP.Trace("GenerateLabelPrint - Astwladmin - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwladminproxy = this.proxyAppObject.CreatePO_astwladminproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwladminproxy.GenerateLabelPrint(ref pdsContext,  pdsgeneratelabelprintcriteria,  pdsgeneratelabelprtbincrit,  pdsgeneratelabelprtinvcrit,  pdsgeneratelabelprtitmcrit, out iCurrentSequence, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GenerateLabelPrint - Astwladmin - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgeneratelabelprintcriteria); 
    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
         result.iCurrentSequence = iCurrentSequence;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  