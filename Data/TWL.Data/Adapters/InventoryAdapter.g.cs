//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Adapters
{
   using com.infor.sxproxy.twlproxy;
   using com.infor.sxproxy.twlproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsinventory;

   public partial class InventoryAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsinventory";
      private TWLProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> inventoryTableControlKey;
		
      private pdsinventoryDataSet dataSet;
        
      public InventoryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new TWLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsinventoryDataSet() { DataSetName = DataSetName };
            this.inventoryTableControlKey = this.dataSet.ttblinventory.GetTableControlParametersKey();
            
            if (!this.tempTableControlParameters.ContainsKey(this.inventoryTableControlKey))
            {
               this.CreateTableControlParameters(this.inventoryTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in InventoryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Inventoryproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poInventoryproxy = this.proxyAppObject.CreatePO_inventoryproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poInventoryproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Inventoryproxy - After Call");
      }
      
      private void SetAndFetch(string where, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.inventoryTableControlKey, where, batchsize, fldList);
         this.SetTableParametersOnContext(this.inventoryTableControlKey, true);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Inventoryproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poInventoryproxy = this.proxyAppObject.CreatePO_inventoryproxy())
               {
                  this.SetRequiredContextParameters();
                  poInventoryproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Inventoryproxy - After Call");
      }
   

      public Inventory GetByRowId(string rowId, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fldList);
         Inventory inventory = null;
         if (row != null)
         {
             inventory = this.BuildFromRow(row);
         }
         return inventory;
      }
   
      private DataRow GetRowByRowId(string rowId, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(inventory) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttblinventory.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Inventory> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(inventory)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), batchsize, fldList);
      }

      protected Inventory Fetch(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         var row = this.dataSet.ttblinventory.AsEnumerable().SingleOrDefault();
         Inventory inventory = null;
         if (row != null)
         {
             inventory = this.BuildFromRow(row);
         }
         return inventory;
      }
	  
	  

      public IEnumerable<Inventory> GetList(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttblinventory.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Inventory Get(string coNum, string whNum, string absNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.Fetch(where, batchsize, fldList);
      }
  
      public IEnumerable<Inventory> GetListByCargocontrol(string cargoControl, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(cargoControl)) 
         {
             sb.AppendFormatWithEscape("inventory.cargo_control = '{0}'", cargoControl);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsBin(string coNum, string whNum, string absNum, string binNum, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.bin_num = '{0}'", binNum);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsLotExpirationQty(string coNum, string whNum, string absNum, string lot, DateTime? expiration, decimal totalQty, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(lot)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.lot = '{0}'", lot);
         }
         if (expiration != null) 
         {
             sb.AppendFormatWithEscape(" AND inventory.expiration = '{0}'", expiration);
         }
         if (totalQty != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND inventory.total_qty = {0}", totalQty);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsLotQty(string coNum, string whNum, string absNum, string lot, decimal totalQty, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(lot)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.lot = '{0}'", lot);
         }
         if (totalQty != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND inventory.total_qty = {0}", totalQty);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhAbsQtyFifo(string coNum, string whNum, string absNum, decimal totalQty, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (totalQty != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND inventory.total_qty = {0}", totalQty);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinAbs(string coNum, string whNum, string binNum, string absNum, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.bin_num = '{0}'", binNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinPalletAbsLot(string coNum, string whNum, string binNum, string palletId, string absNum, string lot, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.bin_num = '{0}'", binNum);
         }
         if (!string.IsNullOrEmpty(palletId)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.pallet_id = '{0}'", palletId);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(lot)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.lot = '{0}'", lot);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhBinRtnFull(string coNum, string whNum, string binNum, string rtnCategory, bool rtnPalletFull, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.bin_num = '{0}'", binNum);
         }
         if (!string.IsNullOrEmpty(rtnCategory)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.rtn_category = '{0}'", rtnCategory);
         }
         sb.AppendFormatWithEscape(" AND inventory.rtn_pallet_full = {0}", rtnPalletFull);
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhCyclecount(string coNum, string whNum, bool cycleFlag, int cycleId, string binNum, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         sb.AppendFormatWithEscape(" AND inventory.cycle_flag = {0}", cycleFlag);
         if (cycleId != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND inventory.cycle_id = {0}", cycleId);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.bin_num = '{0}'", binNum);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhPallet(string coNum, string whNum, string palletId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(palletId)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.pallet_id = '{0}'", palletId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhStatusAbsLot(string coNum, string whNum, string stockStat, string absNum, string lot, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(stockStat)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.stock_stat = '{0}'", stockStat);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(lot)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.lot = '{0}'", lot);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListByCoWhTask(string coNum, string whNum, int taskId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("inventory.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND inventory.wh_num = '{0}'", whNum);
         }
         if (taskId != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND inventory.task_id = {0}", taskId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Inventory> GetListById(int id, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (id != int.MinValue) 
         {
             sb.AppendFormatWithEscape("inventory.id = {0}", id);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Inventory BuildFromRow(DataRow row)
      {
         var returnRecord = Inventory.BuildInventoryFromRow(row);
         returnRecord = this.BuildExtraFromRow<Inventory>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Inventory record)
      {
         Inventory.UpdateRowFromInventory(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Inventory Insert(Inventory record)
      {
         DataRow row = this.dataSet.ttblinventory.NewttblinventoryRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttblinventory.AddttblinventoryRow((pdsinventoryDataSet.ttblinventoryRow)row);
         this.SaveChanges();
         return this.dataSet.ttblinventory.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblinventory.Rows[0]) : null;
      }
  

      public Inventory Update(Inventory record)
      {
        var row = this.GetRowByRowId(record.rowID, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttblinventory.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblinventory.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Inventory record)
      {
         var row = this.GetRowByRowId(record.rowID, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttblinventory.NewttblinventoryRow();
            Inventory.BuildMinimalRow(ref row, record);
            this.dataSet.ttblinventory.AddttblinventoryRow((pdsinventoryDataSet.ttblinventoryRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Inventory() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }
	  

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  