//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Adapters
{
   using com.infor.sxproxy.twlproxy;
   using com.infor.sxproxy.twlproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsaltloclistcriteria;
   using Models.Pdsaltloclistresults;
   using Models.Pdsactivepalletscriteria;
   using Models.Pdsactivepallets;
   using Models.Pdsinventorylistcriteria;
   using Models.Pdsinventorylistresults;
   using Models.Pdsinventorydetailcriteria;
   using Models.Pdsinventorydetail;
   using Models.Pdsitembucketdetailcriteria;
   using Models.Pdsitembucketdetail;
   using Models.Pdsphysuncountedloccriteria;
   using Models.Pdsphysuncountedlocresults;
   using Models.Pdslocpendingpickcriteria;
   using Models.Pdslocpendingpickresults;
   using Models.Pdspick;
   using Models.Pdscartoninfocriteria;
   using Models.Pdscartonmst;
   using Models.Pdscartoncontentscriteria;
   using Models.Pdscartoncontents;
   using Models.Pdslocpendmoverepcriteria;
   using Models.Pdslocpendmoverepresults;
   using Models.Pdsmovemst;
   using Models.Pdsphysuncountedinvcriteria;
   using Models.Pdsphysuncountedinvresults;
   using Models.Pdsphysinv;
   using Models.Pdsphysinvdisclocresults;
   using Models.Pdsphysinvdiscinvresults;
   using Models.Pdssyspadate;
   using Models.Pdszonebincriteria;
   using Models.Pdszonebins;
   using Models.Pdszoneinventorycriteria;
   using Models.Pdszoneinventory;
   using Models.Pdszonereplenishmentcriteria;
   using Models.Pdszonereplenishments;
   using Models.Pdsinvtranscriteria;
   using Models.Pdsinvtrans;
   using Models.Pdsinvmovementcriteria;
   using Models.Pdsinvmovement;
   using Models.Pdsinvpickscriteria;
   using Models.Pdsinvpicks;
   using Models.Pdsinvreplcriteria;
   using Models.Pdsinvrepl;
   using Models.Pdsinvserialscriteria;
   using Models.Pdsinvserials;
   using Models.Pdsccinquirycriteria;
   using Models.Pdsccinquirysummary;
   using Models.Pdsccwavelistcriteria;
   using Models.Pdsccwavelist;
   using Models.Pdsccinvdisccriteria;
   using Models.Pdsccinvdisc;
   using Models.Pdsccinvtranscriteria;
   using Models.Pdsccinvtrans;
   using Models.Pdscarriercriteria;
   using Models.Pdscarrierlist;
   using Models.Pdsemptransdetailcriteria;
   using Models.Pdsemptransdetail;
   using Models.Pdsordertransdetailcriteria;
   using Models.Pdsordertransdetail;
   using Models.Pdsemptranssummarycriteria;
   using Models.Pdsemptranssummary;
   using Models.Pdseodrunhist;
   using Models.Pdsomwaveinfocriteria;
   using Models.Pdsomwaveinfo;
   using Models.Pdsomorderlistcriteria;
   using Models.Pdsomorderlist;
   using Models.Pdsomordersummary;
   using Models.Pdsomorderexceptionlistcriteria;
   using Models.Pdsomorderexceptionlist;
   using Models.Pdsomorderkey;
   using Models.Pdsomorderexceptionholdlines;
   using Models.Pdsdbconnectsum;
   using Models.Pdsdbconnectdtl;
   using Models.Pdsdbfieldnamecriteria;
   using Models.Pdsdbfieldnameresults;
   using Models.Pdsitemaltwhsecriteria;
   using Models.Pdsitemaltwhsetot;
   using Models.Pdsitemaltwhse;
   using Models.Pdsitemavailcriteria;
   using Models.Pdsitemavailprime;
   using Models.Pdsitemavail;
   using Models.Pdsitemintranscriteria;
   using Models.Pdsitemintrans;
   using Models.Pdsitemoutordcriteria;
   using Models.Pdsitemoutord;
   using Models.Pdsitemresvcriteria;
   using Models.Pdsitemresv;
   using Models.Pdsitemtranscriteria;
   using Models.Pdsitemtrans;
   using Models.Pdsitemunavailcriteria;
   using Models.Pdsitemunavail;
   using Models.Pdsitemlistcriteria;
   using Models.Pdsitemlist;
   using Models.Pdsitemdetailcriteria;
   using Models.Pdsitemdetail;
   using Models.Pdsitemhistdtlcriteria;
   using Models.Pdsitemhistdtl;
   using Models.Pdsorderinquirylistcriteria;
   using Models.Pdsorderinquirylist;
   using Models.Pdsorderdetail;
   using Models.Pdsserialhistorycriteria;
   using Models.Pdsserialhistorylist;
   using Models.Pdsordercartoncriteria;
   using Models.Pdsordercartonresults;
   using Models.Pdsomopencountcriteria;
   using Models.Pdsomopencounts;
   using Models.Pdscommentcriteria;
   using Models.Pdscommentresults;
   using Models.Pdswavesummary;
   using Models.Pdsgetpocriteria;
   using Models.Pdsgetporesults;
   using Models.Pdsgetvendorcriteria;
   using Models.Pdsgetvendorresults;
   using Models.Pdsordermanifests;
   using Models.Pdsorderavailsummary;
   using Models.Pdsorderavail;
   using Models.Pdsomorderlinekey;
   using Models.Pdsorderlinetransinfo;
   using Models.Pdsmanifestcriteria;
   using Models.Pdsmanifestresults;
   using Models.Pdsitemlotcriteria;
   using Models.Pdsitemlottotals;
   using Models.Pdsitemlotsummary;
   using Models.Pdsitemlotexpiration;
   using Models.Pdsdrplogcriteria;
   using Models.Pdsdrplogresults;
   using Models.Complex;

   public partial class AstwlinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private TWLProxyAppObject proxyAppObject;
      
      public AstwlinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new TWLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AstwlinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AstwlinquiryGetAltLocListResponseAPI GetAltLocList(Altloclistcriteria altloclistcriteria)
      {   
         var result = new AstwlinquiryGetAltLocListResponseAPI();
         
         var pdsaltloclistcriteria = new pdsaltloclistcriteriaDataSet();
            
         var pdsaltloclistresults = new pdsaltloclistresultsDataSet();
            
         DataRow ttblaltloclistcriteriaCriteria = pdsaltloclistcriteria.ttblaltloclistcriteria.NewttblaltloclistcriteriaRow();
         Altloclistcriteria.UpdateRowFromAltloclistcriteria(ref ttblaltloclistcriteriaCriteria, altloclistcriteria);
         pdsaltloclistcriteria.ttblaltloclistcriteria.AddttblaltloclistcriteriaRow((pdsaltloclistcriteriaDataSet.ttblaltloclistcriteriaRow)ttblaltloclistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetAltLocList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetAltLocList(ref pdsContext,  pdsaltloclistcriteria, out pdsaltloclistresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetAltLocList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaltloclistcriteria); 
    
         foreach (DataRow row in pdsaltloclistresults.ttblaltloclistresults)
         {
            result.altloclistresults.Add(Altloclistresults.BuildAltloclistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Activepallets> GetActivePallets(Activepalletscriteria activepalletscriteria)
      {   
         var results = new List<Activepallets>();
         
         var pdsactivepalletscriteria = new pdsactivepalletscriteriaDataSet();
            
         var pdsactivepallets = new pdsactivepalletsDataSet();
            
         DataRow ttblactivepalletscriteriaCriteria = pdsactivepalletscriteria.ttblactivepalletscriteria.NewttblactivepalletscriteriaRow();
         Activepalletscriteria.UpdateRowFromActivepalletscriteria(ref ttblactivepalletscriteriaCriteria, activepalletscriteria);
         pdsactivepalletscriteria.ttblactivepalletscriteria.AddttblactivepalletscriteriaRow((pdsactivepalletscriteriaDataSet.ttblactivepalletscriteriaRow)ttblactivepalletscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetActivePallets - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetActivePallets(ref pdsContext,  pdsactivepalletscriteria, out pdsactivepallets, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetActivePallets - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsactivepalletscriteria); 
    
            foreach (DataRow row in pdsactivepallets.ttblactivepallets)
            {
                results.Add(Activepallets.BuildActivepalletsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetInventoryListResponseAPI GetInventoryList(Inventorylistcriteria inventorylistcriteria)
      {   
         var result = new AstwlinquiryGetInventoryListResponseAPI();
         
         var pdsinventorylistcriteria = new pdsinventorylistcriteriaDataSet();
            
         var pdsinventorylistresults = new pdsinventorylistresultsDataSet();
            
         DataRow ttblinventorylistcriteriaCriteria = pdsinventorylistcriteria.ttblinventorylistcriteria.NewttblinventorylistcriteriaRow();
         Inventorylistcriteria.UpdateRowFromInventorylistcriteria(ref ttblinventorylistcriteriaCriteria, inventorylistcriteria);
         pdsinventorylistcriteria.ttblinventorylistcriteria.AddttblinventorylistcriteriaRow((pdsinventorylistcriteriaDataSet.ttblinventorylistcriteriaRow)ttblinventorylistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInventoryList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInventoryList(ref pdsContext,  pdsinventorylistcriteria, out pdsinventorylistresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInventoryList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinventorylistcriteria); 
    
         foreach (DataRow row in pdsinventorylistresults.ttblinventorylistresults)
         {
            result.inventorylistresults.Add(Inventorylistresults.BuildInventorylistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Inventorydetail GetInventoryDetail(Inventorydetailcriteria inventorydetailcriteria)
      {   
         var result = new Inventorydetail();
         
         var pdsinventorydetailcriteria = new pdsinventorydetailcriteriaDataSet();
            
         var pdsinventorydetail = new pdsinventorydetailDataSet();
            
         DataRow ttblinventorydetailcriteriaCriteria = pdsinventorydetailcriteria.ttblinventorydetailcriteria.NewttblinventorydetailcriteriaRow();
         Inventorydetailcriteria.UpdateRowFromInventorydetailcriteria(ref ttblinventorydetailcriteriaCriteria, inventorydetailcriteria);
         pdsinventorydetailcriteria.ttblinventorydetailcriteria.AddttblinventorydetailcriteriaRow((pdsinventorydetailcriteriaDataSet.ttblinventorydetailcriteriaRow)ttblinventorydetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInventoryDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInventoryDetail(ref pdsContext,  pdsinventorydetailcriteria, out pdsinventorydetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInventoryDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinventorydetailcriteria); 
    
         if (pdsinventorydetail.ttblinventorydetail.Count > 0) 
         { 
             result = Inventorydetail.BuildInventorydetailFromRow(pdsinventorydetail.ttblinventorydetail[0]);
         } 
              
          
         return result;
          
      }

      public Itembucketdetail GetItemBucketDetail(Itembucketdetailcriteria itembucketdetailcriteria)
      {   
         var result = new Itembucketdetail();
         
         var pdsitembucketdetailcriteria = new pdsitembucketdetailcriteriaDataSet();
            
         var pdsitembucketdetail = new pdsitembucketdetailDataSet();
            
         DataRow ttblitembucketdetailcriteriaCriteria = pdsitembucketdetailcriteria.ttblitembucketdetailcriteria.NewttblitembucketdetailcriteriaRow();
         Itembucketdetailcriteria.UpdateRowFromItembucketdetailcriteria(ref ttblitembucketdetailcriteriaCriteria, itembucketdetailcriteria);
         pdsitembucketdetailcriteria.ttblitembucketdetailcriteria.AddttblitembucketdetailcriteriaRow((pdsitembucketdetailcriteriaDataSet.ttblitembucketdetailcriteriaRow)ttblitembucketdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemBucketDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemBucketDetail(ref pdsContext,  pdsitembucketdetailcriteria, out pdsitembucketdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemBucketDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitembucketdetailcriteria); 
    
         if (pdsitembucketdetail.ttblitembucketdetail.Count > 0) 
         { 
             result = Itembucketdetail.BuildItembucketdetailFromRow(pdsitembucketdetail.ttblitembucketdetail[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Physuncountedlocresults> GetPhysInvUncountedLocations(Physuncountedloccriteria physuncountedloccriteria)
      {   
         var results = new List<Physuncountedlocresults>();
         
         var pdsphysuncountedloccriteria = new pdsphysuncountedloccriteriaDataSet();
            
         var pdsphysuncountedlocresults = new pdsphysuncountedlocresultsDataSet();
            
         DataRow ttblphysuncountedloccriteriaCriteria = pdsphysuncountedloccriteria.ttblphysuncountedloccriteria.NewttblphysuncountedloccriteriaRow();
         Physuncountedloccriteria.UpdateRowFromPhysuncountedloccriteria(ref ttblphysuncountedloccriteriaCriteria, physuncountedloccriteria);
         pdsphysuncountedloccriteria.ttblphysuncountedloccriteria.AddttblphysuncountedloccriteriaRow((pdsphysuncountedloccriteriaDataSet.ttblphysuncountedloccriteriaRow)ttblphysuncountedloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPhysInvUncountedLocations - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetPhysInvUncountedLocations(ref pdsContext,  pdsphysuncountedloccriteria, out pdsphysuncountedlocresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPhysInvUncountedLocations - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysuncountedloccriteria); 
    
            foreach (DataRow row in pdsphysuncountedlocresults.ttblphysuncountedlocresults)
            {
                results.Add(Physuncountedlocresults.BuildPhysuncountedlocresultsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetLocationPendingPickResponseAPI GetLocationPendingPick(Locpendingpickcriteria locpendingpickcriteria)
      {   
         var result = new AstwlinquiryGetLocationPendingPickResponseAPI();
         
         var pdslocpendingpickcriteria = new pdslocpendingpickcriteriaDataSet();
            
         var pdslocpendingpickresults = new pdslocpendingpickresultsDataSet();
            
         var pdspick = new pdspickDataSet();
            
         DataRow ttbllocpendingpickcriteriaCriteria = pdslocpendingpickcriteria.ttbllocpendingpickcriteria.NewttbllocpendingpickcriteriaRow();
         Locpendingpickcriteria.UpdateRowFromLocpendingpickcriteria(ref ttbllocpendingpickcriteriaCriteria, locpendingpickcriteria);
         pdslocpendingpickcriteria.ttbllocpendingpickcriteria.AddttbllocpendingpickcriteriaRow((pdslocpendingpickcriteriaDataSet.ttbllocpendingpickcriteriaRow)ttbllocpendingpickcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLocationPendingPick - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetLocationPendingPick(ref pdsContext,  pdslocpendingpickcriteria, out pdslocpendingpickresults, out pdspick, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLocationPendingPick - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocpendingpickcriteria); 
    
         if (pdslocpendingpickresults.ttbllocpendingpickresults.Count > 0)
         {
            result.locpendingpickresults = Locpendingpickresults.BuildLocpendingpickresultsFromRow(pdslocpendingpickresults.ttbllocpendingpickresults[0]);
         }
                    
         foreach (DataRow row in pdspick.ttblpick)
         {
            result.pick.Add(Pick.BuildPickFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Cartonmst> GetCartonInfo(Cartoninfocriteria cartoninfocriteria)
      {   
         var results = new List<Cartonmst>();
         
         var pdscartoninfocriteria = new pdscartoninfocriteriaDataSet();
            
         var pdscartonmst = new pdscartonmstDataSet();
            
         DataRow ttblcartoninfocriteriaCriteria = pdscartoninfocriteria.ttblcartoninfocriteria.NewttblcartoninfocriteriaRow();
         Cartoninfocriteria.UpdateRowFromCartoninfocriteria(ref ttblcartoninfocriteriaCriteria, cartoninfocriteria);
         pdscartoninfocriteria.ttblcartoninfocriteria.AddttblcartoninfocriteriaRow((pdscartoninfocriteriaDataSet.ttblcartoninfocriteriaRow)ttblcartoninfocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCartonInfo - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCartonInfo(ref pdsContext,  pdscartoninfocriteria, out pdscartonmst, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCartonInfo - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscartoninfocriteria); 
    
            foreach (DataRow row in pdscartonmst.ttblcartonmst)
            {
                results.Add(Cartonmst.BuildCartonmstFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Cartoncontents> GetCartonContents(Cartoncontentscriteria cartoncontentscriteria)
      {   
         var results = new List<Cartoncontents>();
         
         var pdscartoncontentscriteria = new pdscartoncontentscriteriaDataSet();
            
         var pdscartoncontents = new pdscartoncontentsDataSet();
            
         DataRow ttblcartoncontentscriteriaCriteria = pdscartoncontentscriteria.ttblcartoncontentscriteria.NewttblcartoncontentscriteriaRow();
         Cartoncontentscriteria.UpdateRowFromCartoncontentscriteria(ref ttblcartoncontentscriteriaCriteria, cartoncontentscriteria);
         pdscartoncontentscriteria.ttblcartoncontentscriteria.AddttblcartoncontentscriteriaRow((pdscartoncontentscriteriaDataSet.ttblcartoncontentscriteriaRow)ttblcartoncontentscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCartonContents - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCartonContents(ref pdsContext,  pdscartoncontentscriteria, out pdscartoncontents, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCartonContents - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscartoncontentscriteria); 
    
            foreach (DataRow row in pdscartoncontents.ttblcartoncontents)
            {
                results.Add(Cartoncontents.BuildCartoncontentsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetLocationPendingMoveResponseAPI GetLocationPendingMove(AstwlinquiryGetLocationPendingMoveRequestAPI AstwlinquiryGetLocationPendingMoveRequestAPI)
      {   
         var result = new AstwlinquiryGetLocationPendingMoveResponseAPI();
         
         var pdslocpendmoverepcriteria = new pdslocpendmoverepcriteriaDataSet();
            
         var pdslocpendmoverepresults = new pdslocpendmoverepresultsDataSet();
            
         var pdsmovemst = new pdsmovemstDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttbllocpendmoverepcriteriaRow = pdslocpendmoverepcriteria.ttbllocpendmoverepcriteria.NewttbllocpendmoverepcriteriaRow();
         Locpendmoverepcriteria.UpdateRowFromLocpendmoverepcriteria(ref ttbllocpendmoverepcriteriaRow, AstwlinquiryGetLocationPendingMoveRequestAPI.locpendmoverepcriteria);
         pdslocpendmoverepcriteria.ttbllocpendmoverepcriteria.AddttbllocpendmoverepcriteriaRow((pdslocpendmoverepcriteriaDataSet.ttbllocpendmoverepcriteriaRow)ttbllocpendmoverepcriteriaRow);
          
         var  ismovement = AstwlinquiryGetLocationPendingMoveRequestAPI.ismovement;
            
         
         NLogLoggerP.Trace("GetLocationPendingMove - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetLocationPendingMove(ref pdsContext,  pdslocpendmoverepcriteria,  ismovement, out pdslocpendmoverepresults, out pdsmovemst, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLocationPendingMove - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocpendmoverepcriteria); 
    
         if (pdslocpendmoverepresults.ttbllocpendmoverepresults.Count > 0)
         {
            result.locpendmoverepresults = Locpendmoverepresults.BuildLocpendmoverepresultsFromRow(pdslocpendmoverepresults.ttbllocpendmoverepresults[0]);
         }
                    
         foreach (DataRow row in pdsmovemst.ttblmovemst)
         {
            result.movemst.Add(Movemst.BuildMovemstFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Physuncountedinvresults> GetPhysInvUncountedInventory(Physuncountedinvcriteria physuncountedinvcriteria)
      {   
         var results = new List<Physuncountedinvresults>();
         
         var pdsphysuncountedinvcriteria = new pdsphysuncountedinvcriteriaDataSet();
            
         var pdsphysuncountedinvresults = new pdsphysuncountedinvresultsDataSet();
            
         DataRow ttblphysuncountedinvcriteriaCriteria = pdsphysuncountedinvcriteria.ttblphysuncountedinvcriteria.NewttblphysuncountedinvcriteriaRow();
         Physuncountedinvcriteria.UpdateRowFromPhysuncountedinvcriteria(ref ttblphysuncountedinvcriteriaCriteria, physuncountedinvcriteria);
         pdsphysuncountedinvcriteria.ttblphysuncountedinvcriteria.AddttblphysuncountedinvcriteriaRow((pdsphysuncountedinvcriteriaDataSet.ttblphysuncountedinvcriteriaRow)ttblphysuncountedinvcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPhysInvUncountedInventory - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetPhysInvUncountedInventory(ref pdsContext,  pdsphysuncountedinvcriteria, out pdsphysuncountedinvresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPhysInvUncountedInventory - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysuncountedinvcriteria); 
    
            foreach (DataRow row in pdsphysuncountedinvresults.ttblphysuncountedinvresults)
            {
                results.Add(Physuncountedinvresults.BuildPhysuncountedinvresultsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetPhysInvDiscLocationsResponseAPI GetPhysInvDiscLocations(IEnumerable<Physinv> physinv)
      {   
         var result = new AstwlinquiryGetPhysInvDiscLocationsResponseAPI();
         
         var pdsphysinv = new pdsphysinvDataSet();
            
         var pdsphysinvdisclocresults = new pdsphysinvdisclocresultsDataSet();
            
         foreach (var obj in physinv)
         {
             DataRow row = pdsphysinv.ttblphysinv.NewttblphysinvRow();
             Physinv.UpdateRowFromPhysinv(ref row, obj);
             pdsphysinv.ttblphysinv.AddttblphysinvRow((pdsphysinvDataSet.ttblphysinvRow)row);
         }
        
         int countlocations = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPhysInvDiscLocations - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetPhysInvDiscLocations(ref pdsContext,  pdsphysinv, out countlocations, out pdsphysinvdisclocresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPhysInvDiscLocations - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinv); 
    
         foreach (DataRow row in pdsphysinvdisclocresults.ttblphysinvdisclocresults)
         {
            result.physinvdisclocresults.Add(Physinvdisclocresults.BuildPhysinvdisclocresultsFromRow(row));
         }     
         result.countlocations = countlocations;
          
         return result;
          
      }

      public AstwlinquiryGetPhysInvDiscInventoryResponseAPI GetPhysInvDiscInventory(IEnumerable<Physinv> physinv)
      {   
         var result = new AstwlinquiryGetPhysInvDiscInventoryResponseAPI();
         
         var pdsphysinv = new pdsphysinvDataSet();
            
         var pdsphysinvdiscinvresults = new pdsphysinvdiscinvresultsDataSet();
            
         foreach (var obj in physinv)
         {
             DataRow row = pdsphysinv.ttblphysinv.NewttblphysinvRow();
             Physinv.UpdateRowFromPhysinv(ref row, obj);
             pdsphysinv.ttblphysinv.AddttblphysinvRow((pdsphysinvDataSet.ttblphysinvRow)row);
         }
        
         int countlocations = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPhysInvDiscInventory - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetPhysInvDiscInventory(ref pdsContext,  pdsphysinv, out countlocations, out pdsphysinvdiscinvresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPhysInvDiscInventory - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsphysinv); 
    
         foreach (DataRow row in pdsphysinvdiscinvresults.ttblphysinvdiscinvresults)
         {
            result.physinvdiscinvresults.Add(Physinvdiscinvresults.BuildPhysinvdiscinvresultsFromRow(row));
         }     
         result.countlocations = countlocations;
          
         return result;
          
      }

      public string GetSysPaCharacter(AstwlinquiryGetSysPaCharacterRequestAPI AstwlinquiryGetSysPaCharacterRequestAPI)
      {   
          
         string pvParametervalue = string.Empty;
         string cErrorMessage = string.Empty;
   
         var  pvTwlcompany = AstwlinquiryGetSysPaCharacterRequestAPI.pvTwlcompany;
            
         var  pvTwlwarehouse = AstwlinquiryGetSysPaCharacterRequestAPI.pvTwlwarehouse;
            
         var  pvParameterid = AstwlinquiryGetSysPaCharacterRequestAPI.pvParameterid;
            
         
         NLogLoggerP.Trace("GetSysPaCharacter - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaCharacter(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pvParametervalue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaCharacter - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvParametervalue;
      
      }

      public Syspadate GetSysPaDate(string pvTwlcompany, string pvTwlwarehouse, int pvParameterid)
      {   
         var result = new Syspadate();
         
         var pdssyspadate = new pdssyspadateDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSysPaDate - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaDate(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pdssyspadate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaDate - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdssyspadate); 
    
         if (pdssyspadate.ttblsyspadate.Count > 0) 
         { 
             result = Syspadate.BuildSyspadateFromRow(pdssyspadate.ttblsyspadate[0]);
         } 
              
          
         return result;
          
      }

      public string GetSysPaDateTime(AstwlinquiryGetSysPaDateTimeRequestAPI AstwlinquiryGetSysPaDateTimeRequestAPI)
      {   
          
         string pvParametervalue = string.Empty;
         string cErrorMessage = string.Empty;
   
         var  pvTwlcompany = AstwlinquiryGetSysPaDateTimeRequestAPI.pvTwlcompany;
            
         var  pvTwlwarehouse = AstwlinquiryGetSysPaDateTimeRequestAPI.pvTwlwarehouse;
            
         var  pvParameterid = AstwlinquiryGetSysPaDateTimeRequestAPI.pvParameterid;
            
         
         NLogLoggerP.Trace("GetSysPaDateTime - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaDateTime(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pvParametervalue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaDateTime - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvParametervalue;
      
      }

      public decimal GetSysPaDecimal(AstwlinquiryGetSysPaDecimalRequestAPI AstwlinquiryGetSysPaDecimalRequestAPI)
      {   
          
         decimal pvParametervalue = 0;
         string cErrorMessage = string.Empty;
   
         var  pvTwlcompany = AstwlinquiryGetSysPaDecimalRequestAPI.pvTwlcompany;
            
         var  pvTwlwarehouse = AstwlinquiryGetSysPaDecimalRequestAPI.pvTwlwarehouse;
            
         var  pvParameterid = AstwlinquiryGetSysPaDecimalRequestAPI.pvParameterid;
            
         
         NLogLoggerP.Trace("GetSysPaDecimal - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaDecimal(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pvParametervalue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaDecimal - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvParametervalue;
      
      }

      public int GetSysPaInteger(AstwlinquiryGetSysPaIntegerRequestAPI AstwlinquiryGetSysPaIntegerRequestAPI)
      {   
          
         int pvParametervalue = 0;
         string cErrorMessage = string.Empty;
   
         var  pvTwlcompany = AstwlinquiryGetSysPaIntegerRequestAPI.pvTwlcompany;
            
         var  pvTwlwarehouse = AstwlinquiryGetSysPaIntegerRequestAPI.pvTwlwarehouse;
            
         var  pvParameterid = AstwlinquiryGetSysPaIntegerRequestAPI.pvParameterid;
            
         
         NLogLoggerP.Trace("GetSysPaInteger - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaInteger(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pvParametervalue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaInteger - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvParametervalue;
      
      }

      public bool GetSysPaLogical(AstwlinquiryGetSysPaLogicalRequestAPI AstwlinquiryGetSysPaLogicalRequestAPI)
      {   
          
         bool pvParametervalue = false;
         string cErrorMessage = string.Empty;
   
         var  pvTwlcompany = AstwlinquiryGetSysPaLogicalRequestAPI.pvTwlcompany;
            
         var  pvTwlwarehouse = AstwlinquiryGetSysPaLogicalRequestAPI.pvTwlwarehouse;
            
         var  pvParameterid = AstwlinquiryGetSysPaLogicalRequestAPI.pvParameterid;
            
         
         NLogLoggerP.Trace("GetSysPaLogical - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSysPaLogical(ref pdsContext,  pvTwlcompany,  pvTwlwarehouse,  pvParameterid, out pvParametervalue, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSysPaLogical - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return pvParametervalue;
      
      }

      public AstwlinquiryGetZoneBinsResponseAPI GetZoneBins(Zonebincriteria zonebincriteria)
      {   
         var result = new AstwlinquiryGetZoneBinsResponseAPI();
         
         var pdszonebincriteria = new pdszonebincriteriaDataSet();
            
         var pdszonebins = new pdszonebinsDataSet();
            
         DataRow ttblzonebincriteriaCriteria = pdszonebincriteria.ttblzonebincriteria.NewttblzonebincriteriaRow();
         Zonebincriteria.UpdateRowFromZonebincriteria(ref ttblzonebincriteriaCriteria, zonebincriteria);
         pdszonebincriteria.ttblzonebincriteria.AddttblzonebincriteriaRow((pdszonebincriteriaDataSet.ttblzonebincriteriaRow)ttblzonebincriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetZoneBins - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetZoneBins(ref pdsContext,  pdszonebincriteria, out pdszonebins, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetZoneBins - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdszonebincriteria); 
    
         foreach (DataRow row in pdszonebins.ttblzonebins)
         {
            result.zonebins.Add(Zonebins.BuildZonebinsFromRow(row));
         }     
         if (pdszonebins.ttblzonebinsummary.Count > 0)
         {
            result.zonebinsummary = Zonebinsummary.BuildZonebinsummaryFromRow(pdszonebins.ttblzonebinsummary[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Zoneinventory> GetZoneInventory(Zoneinventorycriteria zoneinventorycriteria)
      {   
         var results = new List<Zoneinventory>();
         
         var pdszoneinventorycriteria = new pdszoneinventorycriteriaDataSet();
            
         var pdszoneinventory = new pdszoneinventoryDataSet();
            
         DataRow ttblzoneinventorycriteriaCriteria = pdszoneinventorycriteria.ttblzoneinventorycriteria.NewttblzoneinventorycriteriaRow();
         Zoneinventorycriteria.UpdateRowFromZoneinventorycriteria(ref ttblzoneinventorycriteriaCriteria, zoneinventorycriteria);
         pdszoneinventorycriteria.ttblzoneinventorycriteria.AddttblzoneinventorycriteriaRow((pdszoneinventorycriteriaDataSet.ttblzoneinventorycriteriaRow)ttblzoneinventorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetZoneInventory - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetZoneInventory(ref pdsContext,  pdszoneinventorycriteria, out pdszoneinventory, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetZoneInventory - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdszoneinventorycriteria); 
    
            foreach (DataRow row in pdszoneinventory.ttblzoneinventory)
            {
                results.Add(Zoneinventory.BuildZoneinventoryFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Zonereplenishments> GetZoneReplenishments(Zonereplenishmentcriteria zonereplenishmentcriteria)
      {   
         var results = new List<Zonereplenishments>();
         
         var pdszonereplenishmentcriteria = new pdszonereplenishmentcriteriaDataSet();
            
         var pdszonereplenishments = new pdszonereplenishmentsDataSet();
            
         DataRow ttblzonereplenishmentcriteriaCriteria = pdszonereplenishmentcriteria.ttblzonereplenishmentcriteria.NewttblzonereplenishmentcriteriaRow();
         Zonereplenishmentcriteria.UpdateRowFromZonereplenishmentcriteria(ref ttblzonereplenishmentcriteriaCriteria, zonereplenishmentcriteria);
         pdszonereplenishmentcriteria.ttblzonereplenishmentcriteria.AddttblzonereplenishmentcriteriaRow((pdszonereplenishmentcriteriaDataSet.ttblzonereplenishmentcriteriaRow)ttblzonereplenishmentcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetZoneReplenishments - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetZoneReplenishments(ref pdsContext,  pdszonereplenishmentcriteria, out pdszonereplenishments, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetZoneReplenishments - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdszonereplenishmentcriteria); 
    
            foreach (DataRow row in pdszonereplenishments.ttblzonereplenishments)
            {
                results.Add(Zonereplenishments.BuildZonereplenishmentsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Invtrans> GetInvTransactions(Invtranscriteria invtranscriteria)
      {   
         var results = new List<Invtrans>();
         
         var pdsinvtranscriteria = new pdsinvtranscriteriaDataSet();
            
         var pdsinvtrans = new pdsinvtransDataSet();
            
         DataRow ttblinvtranscriteriaCriteria = pdsinvtranscriteria.ttblinvtranscriteria.NewttblinvtranscriteriaRow();
         Invtranscriteria.UpdateRowFromInvtranscriteria(ref ttblinvtranscriteriaCriteria, invtranscriteria);
         pdsinvtranscriteria.ttblinvtranscriteria.AddttblinvtranscriteriaRow((pdsinvtranscriteriaDataSet.ttblinvtranscriteriaRow)ttblinvtranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvTransactions - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInvTransactions(ref pdsContext,  pdsinvtranscriteria, out pdsinvtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvTransactions - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvtranscriteria); 
    
            foreach (DataRow row in pdsinvtrans.ttblinvtrans)
            {
                results.Add(Invtrans.BuildInvtransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Invmovement> GetInvPendingMovement(Invmovementcriteria invmovementcriteria)
      {   
         var results = new List<Invmovement>();
         
         var pdsinvmovementcriteria = new pdsinvmovementcriteriaDataSet();
            
         var pdsinvmovement = new pdsinvmovementDataSet();
            
         DataRow ttblinvmovementcriteriaCriteria = pdsinvmovementcriteria.ttblinvmovementcriteria.NewttblinvmovementcriteriaRow();
         Invmovementcriteria.UpdateRowFromInvmovementcriteria(ref ttblinvmovementcriteriaCriteria, invmovementcriteria);
         pdsinvmovementcriteria.ttblinvmovementcriteria.AddttblinvmovementcriteriaRow((pdsinvmovementcriteriaDataSet.ttblinvmovementcriteriaRow)ttblinvmovementcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvPendingMovement - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInvPendingMovement(ref pdsContext,  pdsinvmovementcriteria, out pdsinvmovement, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvPendingMovement - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvmovementcriteria); 
    
            foreach (DataRow row in pdsinvmovement.ttblinvmovement)
            {
                results.Add(Invmovement.BuildInvmovementFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetInvPendingPicksResponseAPI GetInvPendingPicks(Invpickscriteria invpickscriteria)
      {   
         var result = new AstwlinquiryGetInvPendingPicksResponseAPI();
         
         var pdsinvpickscriteria = new pdsinvpickscriteriaDataSet();
            
         var pdsinvpicks = new pdsinvpicksDataSet();
            
         DataRow ttblinvpickscriteriaCriteria = pdsinvpickscriteria.ttblinvpickscriteria.NewttblinvpickscriteriaRow();
         Invpickscriteria.UpdateRowFromInvpickscriteria(ref ttblinvpickscriteriaCriteria, invpickscriteria);
         pdsinvpickscriteria.ttblinvpickscriteria.AddttblinvpickscriteriaRow((pdsinvpickscriteriaDataSet.ttblinvpickscriteriaRow)ttblinvpickscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvPendingPicks - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInvPendingPicks(ref pdsContext,  pdsinvpickscriteria, out pdsinvpicks, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvPendingPicks - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvpickscriteria); 
    
         foreach (DataRow row in pdsinvpicks.ttblinvpicks)
         {
            result.invpicks.Add(Invpicks.BuildInvpicksFromRow(row));
         }     
         if (pdsinvpicks.ttblinvpickssummary.Count > 0)
         {
            result.invpickssummary = Invpickssummary.BuildInvpickssummaryFromRow(pdsinvpicks.ttblinvpickssummary[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Invrepl> GetInvPendingRepl(Invreplcriteria invreplcriteria)
      {   
         var results = new List<Invrepl>();
         
         var pdsinvreplcriteria = new pdsinvreplcriteriaDataSet();
            
         var pdsinvrepl = new pdsinvreplDataSet();
            
         DataRow ttblinvreplcriteriaCriteria = pdsinvreplcriteria.ttblinvreplcriteria.NewttblinvreplcriteriaRow();
         Invreplcriteria.UpdateRowFromInvreplcriteria(ref ttblinvreplcriteriaCriteria, invreplcriteria);
         pdsinvreplcriteria.ttblinvreplcriteria.AddttblinvreplcriteriaRow((pdsinvreplcriteriaDataSet.ttblinvreplcriteriaRow)ttblinvreplcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvPendingRepl - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInvPendingRepl(ref pdsContext,  pdsinvreplcriteria, out pdsinvrepl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvPendingRepl - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvreplcriteria); 
    
            foreach (DataRow row in pdsinvrepl.ttblinvrepl)
            {
                results.Add(Invrepl.BuildInvreplFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Invserials> GetInvSerialNumbers(Invserialscriteria invserialscriteria)
      {   
         var results = new List<Invserials>();
         
         var pdsinvserialscriteria = new pdsinvserialscriteriaDataSet();
            
         var pdsinvserials = new pdsinvserialsDataSet();
            
         DataRow ttblinvserialscriteriaCriteria = pdsinvserialscriteria.ttblinvserialscriteria.NewttblinvserialscriteriaRow();
         Invserialscriteria.UpdateRowFromInvserialscriteria(ref ttblinvserialscriteriaCriteria, invserialscriteria);
         pdsinvserialscriteria.ttblinvserialscriteria.AddttblinvserialscriteriaRow((pdsinvserialscriteriaDataSet.ttblinvserialscriteriaRow)ttblinvserialscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetInvSerialNumbers - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetInvSerialNumbers(ref pdsContext,  pdsinvserialscriteria, out pdsinvserials, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetInvSerialNumbers - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsinvserialscriteria); 
    
            foreach (DataRow row in pdsinvserials.ttblinvserials)
            {
                results.Add(Invserials.BuildInvserialsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetCCWaveDetailResponseAPI GetCCWaveDetail(Ccinquirycriteria ccinquirycriteria)
      {   
         var result = new AstwlinquiryGetCCWaveDetailResponseAPI();
         
         var pdsccinquirycriteria = new pdsccinquirycriteriaDataSet();
            
         var pdsccinquirysummary = new pdsccinquirysummaryDataSet();
            
         var pdsinventorylistresults = new pdsinventorylistresultsDataSet();
            
         DataRow ttblccinquirycriteriaCriteria = pdsccinquirycriteria.ttblccinquirycriteria.NewttblccinquirycriteriaRow();
         Ccinquirycriteria.UpdateRowFromCcinquirycriteria(ref ttblccinquirycriteriaCriteria, ccinquirycriteria);
         pdsccinquirycriteria.ttblccinquirycriteria.AddttblccinquirycriteriaRow((pdsccinquirycriteriaDataSet.ttblccinquirycriteriaRow)ttblccinquirycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCWaveDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCCWaveDetail(ref pdsContext,  pdsccinquirycriteria, out pdsccinquirysummary, out pdsinventorylistresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCWaveDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccinquirycriteria); 
    
         if (pdsccinquirysummary.ttblccinquirysummary.Count > 0)
         {
            result.ccinquirysummary = Ccinquirysummary.BuildCcinquirysummaryFromRow(pdsccinquirysummary.ttblccinquirysummary[0]);
         }
                    
         foreach (DataRow row in pdsinventorylistresults.ttblinventorylistresults)
         {
            result.inventorylistresults.Add(Inventorylistresults.BuildInventorylistresultsFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Ccwavelist> GetCCWaveList(Ccwavelistcriteria ccwavelistcriteria)
      {   
         var results = new List<Ccwavelist>();
         
         var pdsccwavelistcriteria = new pdsccwavelistcriteriaDataSet();
            
         var pdsccwavelist = new pdsccwavelistDataSet();
            
         DataRow ttblccwavelistcriteriaCriteria = pdsccwavelistcriteria.ttblccwavelistcriteria.NewttblccwavelistcriteriaRow();
         Ccwavelistcriteria.UpdateRowFromCcwavelistcriteria(ref ttblccwavelistcriteriaCriteria, ccwavelistcriteria);
         pdsccwavelistcriteria.ttblccwavelistcriteria.AddttblccwavelistcriteriaRow((pdsccwavelistcriteriaDataSet.ttblccwavelistcriteriaRow)ttblccwavelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCWaveList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCCWaveList(ref pdsContext,  pdsccwavelistcriteria, out pdsccwavelist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCWaveList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccwavelistcriteria); 
    
            foreach (DataRow row in pdsccwavelist.ttblccwavelist)
            {
                results.Add(Ccwavelist.BuildCcwavelistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Ccinvdisc> GetCCInvDiscrepancies(Ccinvdisccriteria ccinvdisccriteria)
      {   
         var results = new List<Ccinvdisc>();
         
         var pdsccinvdisccriteria = new pdsccinvdisccriteriaDataSet();
            
         var pdsccinvdisc = new pdsccinvdiscDataSet();
            
         DataRow ttblccinvdisccriteriaCriteria = pdsccinvdisccriteria.ttblccinvdisccriteria.NewttblccinvdisccriteriaRow();
         Ccinvdisccriteria.UpdateRowFromCcinvdisccriteria(ref ttblccinvdisccriteriaCriteria, ccinvdisccriteria);
         pdsccinvdisccriteria.ttblccinvdisccriteria.AddttblccinvdisccriteriaRow((pdsccinvdisccriteriaDataSet.ttblccinvdisccriteriaRow)ttblccinvdisccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCInvDiscrepancies - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCCInvDiscrepancies(ref pdsContext,  pdsccinvdisccriteria, out pdsccinvdisc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCInvDiscrepancies - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccinvdisccriteria); 
    
            foreach (DataRow row in pdsccinvdisc.ttblccinvdisc)
            {
                results.Add(Ccinvdisc.BuildCcinvdiscFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetCCTransactionsResponseAPI GetCCTransactions(Ccinvtranscriteria ccinvtranscriteria)
      {   
         var result = new AstwlinquiryGetCCTransactionsResponseAPI();
         
         var pdsccinvtranscriteria = new pdsccinvtranscriteriaDataSet();
            
         var pdsccinvtrans = new pdsccinvtransDataSet();
            
         DataRow ttblccinvtranscriteriaCriteria = pdsccinvtranscriteria.ttblccinvtranscriteria.NewttblccinvtranscriteriaRow();
         Ccinvtranscriteria.UpdateRowFromCcinvtranscriteria(ref ttblccinvtranscriteriaCriteria, ccinvtranscriteria);
         pdsccinvtranscriteria.ttblccinvtranscriteria.AddttblccinvtranscriteriaRow((pdsccinvtranscriteriaDataSet.ttblccinvtranscriteriaRow)ttblccinvtranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCTransactions - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCCTransactions(ref pdsContext,  pdsccinvtranscriteria, out pdsccinvtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCTransactions - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccinvtranscriteria); 
    
         foreach (DataRow row in pdsccinvtrans.ttblccinvtrans)
         {
            result.ccinvtrans.Add(Ccinvtrans.BuildCcinvtransFromRow(row));
         }     
         if (pdsccinvtrans.ttblccinvtranssummary.Count > 0)
         {
            result.ccinvtranssummary = Ccinvtranssummary.BuildCcinvtranssummaryFromRow(pdsccinvtrans.ttblccinvtranssummary[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Carrierlist> GetCarrierList(Carriercriteria carriercriteria)
      {   
         var results = new List<Carrierlist>();
         
         var pdscarriercriteria = new pdscarriercriteriaDataSet();
            
         var pdscarrierlist = new pdscarrierlistDataSet();
            
         DataRow ttblcarriercriteriaCriteria = pdscarriercriteria.ttblcarriercriteria.NewttblcarriercriteriaRow();
         Carriercriteria.UpdateRowFromCarriercriteria(ref ttblcarriercriteriaCriteria, carriercriteria);
         pdscarriercriteria.ttblcarriercriteria.AddttblcarriercriteriaRow((pdscarriercriteriaDataSet.ttblcarriercriteriaRow)ttblcarriercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCarrierList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetCarrierList(ref pdsContext,  pdscarriercriteria, out pdscarrierlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCarrierList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscarriercriteria); 
    
            foreach (DataRow row in pdscarrierlist.ttblcarrierlist)
            {
                results.Add(Carrierlist.BuildCarrierlistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Emptransdetail> GetEmpTransDetail(Emptransdetailcriteria emptransdetailcriteria)
      {   
         var results = new List<Emptransdetail>();
         
         var pdsemptransdetailcriteria = new pdsemptransdetailcriteriaDataSet();
            
         var pdsemptransdetail = new pdsemptransdetailDataSet();
            
         DataRow ttblemptransdetailcriteriaCriteria = pdsemptransdetailcriteria.ttblemptransdetailcriteria.NewttblemptransdetailcriteriaRow();
         Emptransdetailcriteria.UpdateRowFromEmptransdetailcriteria(ref ttblemptransdetailcriteriaCriteria, emptransdetailcriteria);
         pdsemptransdetailcriteria.ttblemptransdetailcriteria.AddttblemptransdetailcriteriaRow((pdsemptransdetailcriteriaDataSet.ttblemptransdetailcriteriaRow)ttblemptransdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetEmpTransDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetEmpTransDetail(ref pdsContext,  pdsemptransdetailcriteria, out pdsemptransdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetEmpTransDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsemptransdetailcriteria); 
    
            foreach (DataRow row in pdsemptransdetail.ttblemptransdetail)
            {
                results.Add(Emptransdetail.BuildEmptransdetailFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Ordertransdetail> GetOrderTransDetail(Ordertransdetailcriteria ordertransdetailcriteria)
      {   
         var results = new List<Ordertransdetail>();
         
         var pdsordertransdetailcriteria = new pdsordertransdetailcriteriaDataSet();
            
         var pdsordertransdetail = new pdsordertransdetailDataSet();
            
         DataRow ttblordertransdetailcriteriaCriteria = pdsordertransdetailcriteria.ttblordertransdetailcriteria.NewttblordertransdetailcriteriaRow();
         Ordertransdetailcriteria.UpdateRowFromOrdertransdetailcriteria(ref ttblordertransdetailcriteriaCriteria, ordertransdetailcriteria);
         pdsordertransdetailcriteria.ttblordertransdetailcriteria.AddttblordertransdetailcriteriaRow((pdsordertransdetailcriteriaDataSet.ttblordertransdetailcriteriaRow)ttblordertransdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderTransDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderTransDetail(ref pdsContext,  pdsordertransdetailcriteria, out pdsordertransdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderTransDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsordertransdetailcriteria); 
    
            foreach (DataRow row in pdsordertransdetail.ttblordertransdetail)
            {
                results.Add(Ordertransdetail.BuildOrdertransdetailFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetEmpTransSummaryResponseAPI GetEmpTransSummary(Emptranssummarycriteria emptranssummarycriteria)
      {   
         var result = new AstwlinquiryGetEmpTransSummaryResponseAPI();
         
         var pdsemptranssummarycriteria = new pdsemptranssummarycriteriaDataSet();
            
         var pdsemptranssummary = new pdsemptranssummaryDataSet();
            
         DataRow ttblemptranssummarycriteriaCriteria = pdsemptranssummarycriteria.ttblemptranssummarycriteria.NewttblemptranssummarycriteriaRow();
         Emptranssummarycriteria.UpdateRowFromEmptranssummarycriteria(ref ttblemptranssummarycriteriaCriteria, emptranssummarycriteria);
         pdsemptranssummarycriteria.ttblemptranssummarycriteria.AddttblemptranssummarycriteriaRow((pdsemptranssummarycriteriaDataSet.ttblemptranssummarycriteriaRow)ttblemptranssummarycriteriaCriteria);
            
         int iTotalTransactions = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetEmpTransSummary - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetEmpTransSummary(ref pdsContext,  pdsemptranssummarycriteria, out iTotalTransactions, out pdsemptranssummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetEmpTransSummary - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsemptranssummarycriteria); 
    
         foreach (DataRow row in pdsemptranssummary.ttblemptranssummary)
         {
            result.emptranssummary.Add(Emptranssummary.BuildEmptranssummaryFromRow(row));
         }     
         result.iTotalTransactions = iTotalTransactions;
          
         return result;
          
      }

      public IEnumerable<Eodrunhist> GetEodRunHistory()
      {   
         var results = new List<Eodrunhist>();
         
         var pdseodrunhist = new pdseodrunhistDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetEodRunHistory - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetEodRunHistory(ref pdsContext, out pdseodrunhist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetEodRunHistory - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdseodrunhist); 
    
            foreach (DataRow row in pdseodrunhist.ttbleodrunhist)
            {
                results.Add(Eodrunhist.BuildEodrunhistFromRow(row));
            }
            return results;
        
      }

      public Omwaveinfo GetOMWaveInfo(Omwaveinfocriteria omwaveinfocriteria)
      {   
         var result = new Omwaveinfo();
         
         var pdsomwaveinfocriteria = new pdsomwaveinfocriteriaDataSet();
            
         var pdsomwaveinfo = new pdsomwaveinfoDataSet();
            
         DataRow ttblomwaveinfocriteriaCriteria = pdsomwaveinfocriteria.ttblomwaveinfocriteria.NewttblomwaveinfocriteriaRow();
         Omwaveinfocriteria.UpdateRowFromOmwaveinfocriteria(ref ttblomwaveinfocriteriaCriteria, omwaveinfocriteria);
         pdsomwaveinfocriteria.ttblomwaveinfocriteria.AddttblomwaveinfocriteriaRow((pdsomwaveinfocriteriaDataSet.ttblomwaveinfocriteriaRow)ttblomwaveinfocriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOMWaveInfo - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOMWaveInfo(ref pdsContext,  pdsomwaveinfocriteria, out pdsomwaveinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOMWaveInfo - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomwaveinfocriteria); 
    
         if (pdsomwaveinfo.ttblomwaveinfo.Count > 0) 
         { 
             result = Omwaveinfo.BuildOmwaveinfoFromRow(pdsomwaveinfo.ttblomwaveinfo[0]);
         } 
              
          
         return result;
          
      }

      public AstwlinquiryGetOMOrderListResponseAPI GetOMOrderList(Omorderlistcriteria omorderlistcriteria)
      {   
         var result = new AstwlinquiryGetOMOrderListResponseAPI();
         
         var pdsomorderlistcriteria = new pdsomorderlistcriteriaDataSet();
            
         var pdsomorderlist = new pdsomorderlistDataSet();
            
         var pdsomordersummary = new pdsomordersummaryDataSet();
            
         DataRow ttblomorderlistcriteriaCriteria = pdsomorderlistcriteria.ttblomorderlistcriteria.NewttblomorderlistcriteriaRow();
         Omorderlistcriteria.UpdateRowFromOmorderlistcriteria(ref ttblomorderlistcriteriaCriteria, omorderlistcriteria);
         pdsomorderlistcriteria.ttblomorderlistcriteria.AddttblomorderlistcriteriaRow((pdsomorderlistcriteriaDataSet.ttblomorderlistcriteriaRow)ttblomorderlistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOMOrderList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOMOrderList(ref pdsContext,  pdsomorderlistcriteria, out pdsomorderlist, out pdsomordersummary, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOMOrderList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderlistcriteria); 
    
         foreach (DataRow row in pdsomorderlist.ttblomorderlist)
         {
            result.omorderlist.Add(Omorderlist.BuildOmorderlistFromRow(row));
         }     
         if (pdsomordersummary.ttblomordersummary.Count > 0)
         {
            result.omordersummary = Omordersummary.BuildOmordersummaryFromRow(pdsomordersummary.ttblomordersummary[0]);
         }
                    
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetOMOrderExceptionListResponseAPI GetOMOrderExceptionList(Omorderexceptionlistcriteria omorderexceptionlistcriteria)
      {   
         var result = new AstwlinquiryGetOMOrderExceptionListResponseAPI();
         
         var pdsomorderexceptionlistcriteria = new pdsomorderexceptionlistcriteriaDataSet();
            
         var pdsomorderexceptionlist = new pdsomorderexceptionlistDataSet();
            
         DataRow ttblomorderexceptionlistcriteriaCriteria = pdsomorderexceptionlistcriteria.ttblomorderexceptionlistcriteria.NewttblomorderexceptionlistcriteriaRow();
         Omorderexceptionlistcriteria.UpdateRowFromOmorderexceptionlistcriteria(ref ttblomorderexceptionlistcriteriaCriteria, omorderexceptionlistcriteria);
         pdsomorderexceptionlistcriteria.ttblomorderexceptionlistcriteria.AddttblomorderexceptionlistcriteriaRow((pdsomorderexceptionlistcriteriaDataSet.ttblomorderexceptionlistcriteriaRow)ttblomorderexceptionlistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOMOrderExceptionList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOMOrderExceptionList(ref pdsContext,  pdsomorderexceptionlistcriteria, out pdsomorderexceptionlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOMOrderExceptionList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderexceptionlistcriteria); 
    
         foreach (DataRow row in pdsomorderexceptionlist.ttblomorderexceptionlist)
         {
            result.omorderexceptionlist.Add(Omorderexceptionlist.BuildOmorderexceptionlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetOMOrderExceptionHoldLinesResponseAPI GetOMOrderExceptionHoldLines(Omorderkey omorderkey)
      {   
         var result = new AstwlinquiryGetOMOrderExceptionHoldLinesResponseAPI();
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsomorderexceptionholdlines = new pdsomorderexceptionholdlinesDataSet();
            
         DataRow ttblomorderkeyCriteria = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
         Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyCriteria, omorderkey);
         pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOMOrderExceptionHoldLines - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOMOrderExceptionHoldLines(ref pdsContext,  pdsomorderkey, out pdsomorderexceptionholdlines, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOMOrderExceptionHoldLines - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
         foreach (DataRow row in pdsomorderexceptionholdlines.ttblomorderexceptionholdlines)
         {
            result.omorderexceptionholdlines.Add(Omorderexceptionholdlines.BuildOmorderexceptionholdlinesFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetDbConnectionsResponseAPI GetDbConnections()
      {   
         var result = new AstwlinquiryGetDbConnectionsResponseAPI();
         
         var pdsdbconnectsum = new pdsdbconnectsumDataSet();
            
         var pdsdbconnectdtl = new pdsdbconnectdtlDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetDbConnections - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetDbConnections(ref pdsContext, out pdsdbconnectsum, out pdsdbconnectdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetDbConnections - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdbconnectsum); 
    
         foreach (DataRow row in pdsdbconnectdtl.ttbldbconnectdtl)
         {
            result.dbconnectdtl.Add(Dbconnectdtl.BuildDbconnectdtlFromRow(row));
         }     
         if (pdsdbconnectsum.ttbldbconnectsum.Count > 0)
         {
            result.dbconnectsum = Dbconnectsum.BuildDbconnectsumFromRow(pdsdbconnectsum.ttbldbconnectsum[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Dbfieldnameresults> GetDbFieldNames(Dbfieldnamecriteria dbfieldnamecriteria)
      {   
         var results = new List<Dbfieldnameresults>();
         
         var pdsdbfieldnamecriteria = new pdsdbfieldnamecriteriaDataSet();
            
         var pdsdbfieldnameresults = new pdsdbfieldnameresultsDataSet();
            
         DataRow ttbldbfieldnamecriteriaCriteria = pdsdbfieldnamecriteria.ttbldbfieldnamecriteria.NewttbldbfieldnamecriteriaRow();
         Dbfieldnamecriteria.UpdateRowFromDbfieldnamecriteria(ref ttbldbfieldnamecriteriaCriteria, dbfieldnamecriteria);
         pdsdbfieldnamecriteria.ttbldbfieldnamecriteria.AddttbldbfieldnamecriteriaRow((pdsdbfieldnamecriteriaDataSet.ttbldbfieldnamecriteriaRow)ttbldbfieldnamecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetDbFieldNames - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetDbFieldNames(ref pdsContext,  pdsdbfieldnamecriteria, out pdsdbfieldnameresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetDbFieldNames - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdbfieldnamecriteria); 
    
            foreach (DataRow row in pdsdbfieldnameresults.ttbldbfieldnameresults)
            {
                results.Add(Dbfieldnameresults.BuildDbfieldnameresultsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetItemAltWhseDetailResponseAPI GetItemAltWhseDetail(Itemaltwhsecriteria itemaltwhsecriteria)
      {   
         var result = new AstwlinquiryGetItemAltWhseDetailResponseAPI();
         
         var pdsitemaltwhsecriteria = new pdsitemaltwhsecriteriaDataSet();
            
         var pdsitemaltwhsetot = new pdsitemaltwhsetotDataSet();
            
         var pdsitemaltwhse = new pdsitemaltwhseDataSet();
            
         DataRow ttblitemaltwhsecriteriaCriteria = pdsitemaltwhsecriteria.ttblitemaltwhsecriteria.NewttblitemaltwhsecriteriaRow();
         Itemaltwhsecriteria.UpdateRowFromItemaltwhsecriteria(ref ttblitemaltwhsecriteriaCriteria, itemaltwhsecriteria);
         pdsitemaltwhsecriteria.ttblitemaltwhsecriteria.AddttblitemaltwhsecriteriaRow((pdsitemaltwhsecriteriaDataSet.ttblitemaltwhsecriteriaRow)ttblitemaltwhsecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemAltWhseDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemAltWhseDetail(ref pdsContext,  pdsitemaltwhsecriteria, out pdsitemaltwhsetot, out pdsitemaltwhse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemAltWhseDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemaltwhsecriteria); 
    
         foreach (DataRow row in pdsitemaltwhse.ttblitemaltwhse)
         {
            result.itemaltwhse.Add(Itemaltwhse.BuildItemaltwhseFromRow(row));
         }     
         if (pdsitemaltwhsetot.ttblitemaltwhsetot.Count > 0)
         {
            result.itemaltwhsetot = Itemaltwhsetot.BuildItemaltwhsetotFromRow(pdsitemaltwhsetot.ttblitemaltwhsetot[0]);
         }
                    
          
         return result;
          
      }

      public AstwlinquiryGetItemAvailDetailResponseAPI GetItemAvailDetail(Itemavailcriteria itemavailcriteria)
      {   
         var result = new AstwlinquiryGetItemAvailDetailResponseAPI();
         
         var pdsitemavailcriteria = new pdsitemavailcriteriaDataSet();
            
         var pdsitemavailprime = new pdsitemavailprimeDataSet();
            
         var pdsitemavail = new pdsitemavailDataSet();
            
         DataRow ttblitemavailcriteriaCriteria = pdsitemavailcriteria.ttblitemavailcriteria.NewttblitemavailcriteriaRow();
         Itemavailcriteria.UpdateRowFromItemavailcriteria(ref ttblitemavailcriteriaCriteria, itemavailcriteria);
         pdsitemavailcriteria.ttblitemavailcriteria.AddttblitemavailcriteriaRow((pdsitemavailcriteriaDataSet.ttblitemavailcriteriaRow)ttblitemavailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemAvailDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemAvailDetail(ref pdsContext,  pdsitemavailcriteria, out pdsitemavailprime, out pdsitemavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemAvailDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemavailcriteria); 
    
         foreach (DataRow row in pdsitemavail.ttblitemavail)
         {
            result.itemavail.Add(Itemavail.BuildItemavailFromRow(row));
         }     
         if (pdsitemavailprime.ttblitemavailprime.Count > 0)
         {
            result.itemavailprime = Itemavailprime.BuildItemavailprimeFromRow(pdsitemavailprime.ttblitemavailprime[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Itemintrans> GetItemIntransDetail(Itemintranscriteria itemintranscriteria)
      {   
         var results = new List<Itemintrans>();
         
         var pdsitemintranscriteria = new pdsitemintranscriteriaDataSet();
            
         var pdsitemintrans = new pdsitemintransDataSet();
            
         DataRow ttblitemintranscriteriaCriteria = pdsitemintranscriteria.ttblitemintranscriteria.NewttblitemintranscriteriaRow();
         Itemintranscriteria.UpdateRowFromItemintranscriteria(ref ttblitemintranscriteriaCriteria, itemintranscriteria);
         pdsitemintranscriteria.ttblitemintranscriteria.AddttblitemintranscriteriaRow((pdsitemintranscriteriaDataSet.ttblitemintranscriteriaRow)ttblitemintranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemIntransDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemIntransDetail(ref pdsContext,  pdsitemintranscriteria, out pdsitemintrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemIntransDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemintranscriteria); 
    
            foreach (DataRow row in pdsitemintrans.ttblitemintrans)
            {
                results.Add(Itemintrans.BuildItemintransFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Itemoutord> GetItemOutOrdDetail(Itemoutordcriteria itemoutordcriteria)
      {   
         var results = new List<Itemoutord>();
         
         var pdsitemoutordcriteria = new pdsitemoutordcriteriaDataSet();
            
         var pdsitemoutord = new pdsitemoutordDataSet();
            
         DataRow ttblitemoutordcriteriaCriteria = pdsitemoutordcriteria.ttblitemoutordcriteria.NewttblitemoutordcriteriaRow();
         Itemoutordcriteria.UpdateRowFromItemoutordcriteria(ref ttblitemoutordcriteriaCriteria, itemoutordcriteria);
         pdsitemoutordcriteria.ttblitemoutordcriteria.AddttblitemoutordcriteriaRow((pdsitemoutordcriteriaDataSet.ttblitemoutordcriteriaRow)ttblitemoutordcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemOutOrdDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemOutOrdDetail(ref pdsContext,  pdsitemoutordcriteria, out pdsitemoutord, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemOutOrdDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemoutordcriteria); 
    
            foreach (DataRow row in pdsitemoutord.ttblitemoutord)
            {
                results.Add(Itemoutord.BuildItemoutordFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Itemresv> GetItemResvDetail(Itemresvcriteria itemresvcriteria)
      {   
         var results = new List<Itemresv>();
         
         var pdsitemresvcriteria = new pdsitemresvcriteriaDataSet();
            
         var pdsitemresv = new pdsitemresvDataSet();
            
         DataRow ttblitemresvcriteriaCriteria = pdsitemresvcriteria.ttblitemresvcriteria.NewttblitemresvcriteriaRow();
         Itemresvcriteria.UpdateRowFromItemresvcriteria(ref ttblitemresvcriteriaCriteria, itemresvcriteria);
         pdsitemresvcriteria.ttblitemresvcriteria.AddttblitemresvcriteriaRow((pdsitemresvcriteriaDataSet.ttblitemresvcriteriaRow)ttblitemresvcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemResvDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemResvDetail(ref pdsContext,  pdsitemresvcriteria, out pdsitemresv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemResvDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemresvcriteria); 
    
            foreach (DataRow row in pdsitemresv.ttblitemresv)
            {
                results.Add(Itemresv.BuildItemresvFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetItemTransDetailResponseAPI GetItemTransDetail(Itemtranscriteria itemtranscriteria)
      {   
         var result = new AstwlinquiryGetItemTransDetailResponseAPI();
         
         var pdsitemtranscriteria = new pdsitemtranscriteriaDataSet();
            
         var pdsitemtrans = new pdsitemtransDataSet();
            
         DataRow ttblitemtranscriteriaCriteria = pdsitemtranscriteria.ttblitemtranscriteria.NewttblitemtranscriteriaRow();
         Itemtranscriteria.UpdateRowFromItemtranscriteria(ref ttblitemtranscriteriaCriteria, itemtranscriteria);
         pdsitemtranscriteria.ttblitemtranscriteria.AddttblitemtranscriteriaRow((pdsitemtranscriteriaDataSet.ttblitemtranscriteriaRow)ttblitemtranscriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemTransDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemTransDetail(ref pdsContext,  pdsitemtranscriteria, out pdsitemtrans, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemTransDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemtranscriteria); 
    
         foreach (DataRow row in pdsitemtrans.ttblitemtrans)
         {
            result.itemtrans.Add(Itemtrans.BuildItemtransFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Itemunavail> GetItemUnavailDetail(Itemunavailcriteria itemunavailcriteria)
      {   
         var results = new List<Itemunavail>();
         
         var pdsitemunavailcriteria = new pdsitemunavailcriteriaDataSet();
            
         var pdsitemunavail = new pdsitemunavailDataSet();
            
         DataRow ttblitemunavailcriteriaCriteria = pdsitemunavailcriteria.ttblitemunavailcriteria.NewttblitemunavailcriteriaRow();
         Itemunavailcriteria.UpdateRowFromItemunavailcriteria(ref ttblitemunavailcriteriaCriteria, itemunavailcriteria);
         pdsitemunavailcriteria.ttblitemunavailcriteria.AddttblitemunavailcriteriaRow((pdsitemunavailcriteriaDataSet.ttblitemunavailcriteriaRow)ttblitemunavailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemUnavailDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemUnavailDetail(ref pdsContext,  pdsitemunavailcriteria, out pdsitemunavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemUnavailDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemunavailcriteria); 
    
            foreach (DataRow row in pdsitemunavail.ttblitemunavail)
            {
                results.Add(Itemunavail.BuildItemunavailFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetItemListResponseAPI GetItemList(Itemlistcriteria itemlistcriteria)
      {   
         var result = new AstwlinquiryGetItemListResponseAPI();
         
         var pdsitemlistcriteria = new pdsitemlistcriteriaDataSet();
            
         var pdsitemlist = new pdsitemlistDataSet();
            
         DataRow ttblitemlistcriteriaCriteria = pdsitemlistcriteria.ttblitemlistcriteria.NewttblitemlistcriteriaRow();
         Itemlistcriteria.UpdateRowFromItemlistcriteria(ref ttblitemlistcriteriaCriteria, itemlistcriteria);
         pdsitemlistcriteria.ttblitemlistcriteria.AddttblitemlistcriteriaRow((pdsitemlistcriteriaDataSet.ttblitemlistcriteriaRow)ttblitemlistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemList(ref pdsContext,  pdsitemlistcriteria, out pdsitemlist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemlistcriteria); 
    
         foreach (DataRow row in pdsitemlist.ttblitemlist)
         {
            result.itemlist.Add(Itemlist.BuildItemlistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Itemdetail GetItemDetail(Itemdetailcriteria itemdetailcriteria)
      {   
         var result = new Itemdetail();
         
         var pdsitemdetailcriteria = new pdsitemdetailcriteriaDataSet();
            
         var pdsitemdetail = new pdsitemdetailDataSet();
            
         DataRow ttblitemdetailcriteriaCriteria = pdsitemdetailcriteria.ttblitemdetailcriteria.NewttblitemdetailcriteriaRow();
         Itemdetailcriteria.UpdateRowFromItemdetailcriteria(ref ttblitemdetailcriteriaCriteria, itemdetailcriteria);
         pdsitemdetailcriteria.ttblitemdetailcriteria.AddttblitemdetailcriteriaRow((pdsitemdetailcriteriaDataSet.ttblitemdetailcriteriaRow)ttblitemdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemDetail(ref pdsContext,  pdsitemdetailcriteria, out pdsitemdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemdetailcriteria); 
    
         if (pdsitemdetail.ttblitemdetail.Count > 0) 
         { 
             result = Itemdetail.BuildItemdetailFromRow(pdsitemdetail.ttblitemdetail[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Itemhistdtl> GetItemHistoryDetail(Itemhistdtlcriteria itemhistdtlcriteria)
      {   
         var results = new List<Itemhistdtl>();
         
         var pdsitemhistdtlcriteria = new pdsitemhistdtlcriteriaDataSet();
            
         var pdsitemhistdtl = new pdsitemhistdtlDataSet();
            
         DataRow ttblitemhistdtlcriteriaCriteria = pdsitemhistdtlcriteria.ttblitemhistdtlcriteria.NewttblitemhistdtlcriteriaRow();
         Itemhistdtlcriteria.UpdateRowFromItemhistdtlcriteria(ref ttblitemhistdtlcriteriaCriteria, itemhistdtlcriteria);
         pdsitemhistdtlcriteria.ttblitemhistdtlcriteria.AddttblitemhistdtlcriteriaRow((pdsitemhistdtlcriteriaDataSet.ttblitemhistdtlcriteriaRow)ttblitemhistdtlcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemHistoryDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemHistoryDetail(ref pdsContext,  pdsitemhistdtlcriteria, out pdsitemhistdtl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemHistoryDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemhistdtlcriteria); 
    
            foreach (DataRow row in pdsitemhistdtl.ttblitemhistdtl)
            {
                results.Add(Itemhistdtl.BuildItemhistdtlFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetOrderInquiryListResponseAPI GetOrderInquiryList(Orderinquirylistcriteria orderinquirylistcriteria)
      {   
         var result = new AstwlinquiryGetOrderInquiryListResponseAPI();
         
         var pdsorderinquirylistcriteria = new pdsorderinquirylistcriteriaDataSet();
            
         var pdsorderinquirylist = new pdsorderinquirylistDataSet();
            
         DataRow ttblorderinquirylistcriteriaCriteria = pdsorderinquirylistcriteria.ttblorderinquirylistcriteria.NewttblorderinquirylistcriteriaRow();
         Orderinquirylistcriteria.UpdateRowFromOrderinquirylistcriteria(ref ttblorderinquirylistcriteriaCriteria, orderinquirylistcriteria);
         pdsorderinquirylistcriteria.ttblorderinquirylistcriteria.AddttblorderinquirylistcriteriaRow((pdsorderinquirylistcriteriaDataSet.ttblorderinquirylistcriteriaRow)ttblorderinquirylistcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderInquiryList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderInquiryList(ref pdsContext,  pdsorderinquirylistcriteria, out pdsorderinquirylist, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderInquiryList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsorderinquirylistcriteria); 
    
         foreach (DataRow row in pdsorderinquirylist.ttblorderinquirylist)
         {
            result.orderinquirylist.Add(Orderinquirylist.BuildOrderinquirylistFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetOrderDetailResponseAPI GetOrderDetail(Omorderkey omorderkey)
      {   
         var result = new AstwlinquiryGetOrderDetailResponseAPI();
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsorderdetail = new pdsorderdetailDataSet();
            
         DataRow ttblomorderkeyCriteria = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
         Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyCriteria, omorderkey);
         pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderDetail - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderDetail(ref pdsContext,  pdsomorderkey, out pdsorderdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderDetail - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
         if (pdsorderdetail.ttblorder.Count > 0)
         {
            result.order = Order.BuildOrderFromRow(pdsorderdetail.ttblorder[0]);
         }
                    
         foreach (DataRow row in pdsorderdetail.ttblorderlines)
         {
            result.orderlines.Add(Orderlines.BuildOrderlinesFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Serialhistorylist> GetSerialHistory(Serialhistorycriteria serialhistorycriteria)
      {   
         var results = new List<Serialhistorylist>();
         
         var pdsserialhistorycriteria = new pdsserialhistorycriteriaDataSet();
            
         var pdsserialhistorylist = new pdsserialhistorylistDataSet();
            
         DataRow ttblserialhistorycriteriaCriteria = pdsserialhistorycriteria.ttblserialhistorycriteria.NewttblserialhistorycriteriaRow();
         Serialhistorycriteria.UpdateRowFromSerialhistorycriteria(ref ttblserialhistorycriteriaCriteria, serialhistorycriteria);
         pdsserialhistorycriteria.ttblserialhistorycriteria.AddttblserialhistorycriteriaRow((pdsserialhistorycriteriaDataSet.ttblserialhistorycriteriaRow)ttblserialhistorycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSerialHistory - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetSerialHistory(ref pdsContext,  pdsserialhistorycriteria, out pdsserialhistorylist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSerialHistory - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsserialhistorycriteria); 
    
            foreach (DataRow row in pdsserialhistorylist.ttblserialhistorylist)
            {
                results.Add(Serialhistorylist.BuildSerialhistorylistFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetOrderCartonResponseAPI GetOrderCarton(Ordercartoncriteria ordercartoncriteria)
      {   
         var result = new AstwlinquiryGetOrderCartonResponseAPI();
         
         var pdsordercartoncriteria = new pdsordercartoncriteriaDataSet();
            
         var pdsordercartonresults = new pdsordercartonresultsDataSet();
            
         DataRow ttblordercartoncriteriaCriteria = pdsordercartoncriteria.ttblordercartoncriteria.NewttblordercartoncriteriaRow();
         Ordercartoncriteria.UpdateRowFromOrdercartoncriteria(ref ttblordercartoncriteriaCriteria, ordercartoncriteria);
         pdsordercartoncriteria.ttblordercartoncriteria.AddttblordercartoncriteriaRow((pdsordercartoncriteriaDataSet.ttblordercartoncriteriaRow)ttblordercartoncriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderCarton - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderCarton(ref pdsContext,  pdsordercartoncriteria, out pdsordercartonresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderCarton - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsordercartoncriteria); 
    
         foreach (DataRow row in pdsordercartonresults.ttblordercartonresults)
         {
            result.ordercartonresults.Add(Ordercartonresults.BuildOrdercartonresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetOpenCountsResponseAPI GetOpenCounts(Opencountcriteria opencountcriteria)
      {   
         var result = new AstwlinquiryGetOpenCountsResponseAPI();
         
         var pdsomopencountcriteria = new pdsomopencountcriteriaDataSet();
            
         var pdsomopencounts = new pdsomopencountsDataSet();
            
         DataRow ttblopencountcriteriaCriteria = pdsomopencountcriteria.ttblopencountcriteria.NewttblopencountcriteriaRow();
         Opencountcriteria.UpdateRowFromOpencountcriteria(ref ttblopencountcriteriaCriteria, opencountcriteria);
         pdsomopencountcriteria.ttblopencountcriteria.AddttblopencountcriteriaRow((pdsomopencountcriteriaDataSet.ttblopencountcriteriaRow)ttblopencountcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOpenCounts - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOpenCounts(ref pdsContext,  pdsomopencountcriteria, out pdsomopencounts, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOpenCounts - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomopencountcriteria); 
    
         foreach (DataRow row in pdsomopencounts.ttblopencountscarrier)
         {
            result.opencountscarrier.Add(Opencountscarrier.BuildOpencountscarrierFromRow(row));
         }     
         foreach (DataRow row in pdsomopencounts.ttblopencountscustomer)
         {
            result.opencountscustomer.Add(Opencountscustomer.BuildOpencountscustomerFromRow(row));
         }     
         foreach (DataRow row in pdsomopencounts.ttblopencountscustomer2)
         {
            result.opencountscustomer2.Add(Opencountscustomer2.BuildOpencountscustomer2FromRow(row));
         }     
         foreach (DataRow row in pdsomopencounts.ttblopencountspriority)
         {
            result.opencountspriority.Add(Opencountspriority.BuildOpencountspriorityFromRow(row));
         }     
         foreach (DataRow row in pdsomopencounts.ttblopencountsshipdate)
         {
            result.opencountsshipdate.Add(Opencountsshipdate.BuildOpencountsshipdateFromRow(row));
         }     
         if (pdsomopencounts.ttblopencountsummary.Count > 0)
         {
            result.opencountsummary = Opencountsummary.BuildOpencountsummaryFromRow(pdsomopencounts.ttblopencountsummary[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Commentresults> GetComments(Commentcriteria commentcriteria)
      {   
         var results = new List<Commentresults>();
         
         var pdscommentcriteria = new pdscommentcriteriaDataSet();
            
         var pdscommentresults = new pdscommentresultsDataSet();
            
         DataRow ttblcommentcriteriaCriteria = pdscommentcriteria.ttblcommentcriteria.NewttblcommentcriteriaRow();
         Commentcriteria.UpdateRowFromCommentcriteria(ref ttblcommentcriteriaCriteria, commentcriteria);
         pdscommentcriteria.ttblcommentcriteria.AddttblcommentcriteriaRow((pdscommentcriteriaDataSet.ttblcommentcriteriaRow)ttblcommentcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetComments - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetComments(ref pdsContext,  pdscommentcriteria, out pdscommentresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetComments - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscommentcriteria); 
    
            foreach (DataRow row in pdscommentresults.ttblcommentresults)
            {
                results.Add(Commentresults.BuildCommentresultsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetWaveSummaryResponseAPI GetWaveSummary(Wavesummarycriteria wavesummarycriteria)
      {   
         var result = new AstwlinquiryGetWaveSummaryResponseAPI();
         
         var pdswavesummary = new pdswavesummaryDataSet();
            
         DataRow ttblwavesummarycriteriaCriteria = pdswavesummary.ttblwavesummarycriteria.NewttblwavesummarycriteriaRow();
         Wavesummarycriteria.UpdateRowFromWavesummarycriteria(ref ttblwavesummarycriteriaCriteria, wavesummarycriteria);
         pdswavesummary.ttblwavesummarycriteria.AddttblwavesummarycriteriaRow((pdswavesummaryDataSet.ttblwavesummarycriteriaRow)ttblwavesummarycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetWaveSummary - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetWaveSummary(ref pdsContext, ref pdswavesummary, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetWaveSummary - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdswavesummary); 
    
         if (pdswavesummary.ttblwavesummary.Count > 0)
         {
            result.wavesummary = Wavesummary.BuildWavesummaryFromRow(pdswavesummary.ttblwavesummary[0]);
         }
                    
         foreach (DataRow row in pdswavesummary.ttblwavesummarycartons)
         {
            result.wavesummarycartons.Add(Wavesummarycartons.BuildWavesummarycartonsFromRow(row));
         }     
         foreach (DataRow row in pdswavesummary.ttblwavesummarypicks)
         {
            result.wavesummarypicks.Add(Wavesummarypicks.BuildWavesummarypicksFromRow(row));
         }     
         foreach (DataRow row in pdswavesummary.ttblwavesummaryshipments)
         {
            result.wavesummaryshipments.Add(Wavesummaryshipments.BuildWavesummaryshipmentsFromRow(row));
         }     
         foreach (DataRow row in pdswavesummary.ttblwavesummaryzones)
         {
            result.wavesummaryzones.Add(Wavesummaryzones.BuildWavesummaryzonesFromRow(row));
         }     
          
         return result;
          
      }

      public AstwlinquiryGetPOListResponseAPI GetPOList(Getpocriteria getpocriteria)
      {   
         var result = new AstwlinquiryGetPOListResponseAPI();
         
         var pdsgetpocriteria = new pdsgetpocriteriaDataSet();
            
         var pdsgetporesults = new pdsgetporesultsDataSet();
            
         DataRow ttblgetpocriteriaCriteria = pdsgetpocriteria.ttblgetpocriteria.NewttblgetpocriteriaRow();
         Getpocriteria.UpdateRowFromGetpocriteria(ref ttblgetpocriteriaCriteria, getpocriteria);
         pdsgetpocriteria.ttblgetpocriteria.AddttblgetpocriteriaRow((pdsgetpocriteriaDataSet.ttblgetpocriteriaRow)ttblgetpocriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetPOList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetPOList(ref pdsContext,  pdsgetpocriteria, out pdsgetporesults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetPOList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetpocriteria); 
    
         foreach (DataRow row in pdsgetporesults.ttblgetporesults)
         {
            result.getporesults.Add(Getporesults.BuildGetporesultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlinquiryGetVendorListResponseAPI GetVendorList(Getvendorcriteria getvendorcriteria)
      {   
         var result = new AstwlinquiryGetVendorListResponseAPI();
         
         var pdsgetvendorcriteria = new pdsgetvendorcriteriaDataSet();
            
         var pdsgetvendorresults = new pdsgetvendorresultsDataSet();
            
         DataRow ttblgetvendorcriteriaCriteria = pdsgetvendorcriteria.ttblgetvendorcriteria.NewttblgetvendorcriteriaRow();
         Getvendorcriteria.UpdateRowFromGetvendorcriteria(ref ttblgetvendorcriteriaCriteria, getvendorcriteria);
         pdsgetvendorcriteria.ttblgetvendorcriteria.AddttblgetvendorcriteriaRow((pdsgetvendorcriteriaDataSet.ttblgetvendorcriteriaRow)ttblgetvendorcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetVendorList - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetVendorList(ref pdsContext,  pdsgetvendorcriteria, out pdsgetvendorresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetVendorList - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetvendorcriteria); 
    
         foreach (DataRow row in pdsgetvendorresults.ttblgetvendorresults)
         {
            result.getvendorresults.Add(Getvendorresults.BuildGetvendorresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Ordermanifests> GetOrderManifests(Omorderkey omorderkey)
      {   
         var results = new List<Ordermanifests>();
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsordermanifests = new pdsordermanifestsDataSet();
            
         DataRow ttblomorderkeyCriteria = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
         Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyCriteria, omorderkey);
         pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderManifests - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderManifests(ref pdsContext,  pdsomorderkey, out pdsordermanifests, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderManifests - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
            foreach (DataRow row in pdsordermanifests.ttblordermanifests)
            {
                results.Add(Ordermanifests.BuildOrdermanifestsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetOrderAvailabilityResponseAPI GetOrderAvailability(Omorderkey omorderkey)
      {   
         var result = new AstwlinquiryGetOrderAvailabilityResponseAPI();
         
         var pdsomorderkey = new pdsomorderkeyDataSet();
            
         var pdsorderavailsummary = new pdsorderavailsummaryDataSet();
            
         var pdsorderavail = new pdsorderavailDataSet();
            
         DataRow ttblomorderkeyCriteria = pdsomorderkey.ttblomorderkey.NewttblomorderkeyRow();
         Omorderkey.UpdateRowFromOmorderkey(ref ttblomorderkeyCriteria, omorderkey);
         pdsomorderkey.ttblomorderkey.AddttblomorderkeyRow((pdsomorderkeyDataSet.ttblomorderkeyRow)ttblomorderkeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderAvailability - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderAvailability(ref pdsContext,  pdsomorderkey, out pdsorderavailsummary, out pdsorderavail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderAvailability - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderkey); 
    
         foreach (DataRow row in pdsorderavail.ttblorderavail)
         {
            result.orderavail.Add(Orderavail.BuildOrderavailFromRow(row));
         }     
         if (pdsorderavailsummary.ttblorderavailsummary.Count > 0)
         {
            result.orderavailsummary = Orderavailsummary.BuildOrderavailsummaryFromRow(pdsorderavailsummary.ttblorderavailsummary[0]);
         }
                    
          
         return result;
          
      }

      public Orderlinetransinfo GetOrderLineTransInfo(Omorderlinekey omorderlinekey)
      {   
         var result = new Orderlinetransinfo();
         
         var pdsomorderlinekey = new pdsomorderlinekeyDataSet();
            
         var pdsorderlinetransinfo = new pdsorderlinetransinfoDataSet();
            
         DataRow ttblomorderlinekeyCriteria = pdsomorderlinekey.ttblomorderlinekey.NewttblomorderlinekeyRow();
         Omorderlinekey.UpdateRowFromOmorderlinekey(ref ttblomorderlinekeyCriteria, omorderlinekey);
         pdsomorderlinekey.ttblomorderlinekey.AddttblomorderlinekeyRow((pdsomorderlinekeyDataSet.ttblomorderlinekeyRow)ttblomorderlinekeyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetOrderLineTransInfo - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetOrderLineTransInfo(ref pdsContext,  pdsomorderlinekey, out pdsorderlinetransinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetOrderLineTransInfo - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsomorderlinekey); 
    
         if (pdsorderlinetransinfo.ttblorderlinetransinfo.Count > 0) 
         { 
             result = Orderlinetransinfo.BuildOrderlinetransinfoFromRow(pdsorderlinetransinfo.ttblorderlinetransinfo[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Manifestresults> GetShippingManifests(Manifestcriteria manifestcriteria)
      {   
         var results = new List<Manifestresults>();
         
         var pdsmanifestcriteria = new pdsmanifestcriteriaDataSet();
            
         var pdsmanifestresults = new pdsmanifestresultsDataSet();
            
         DataRow ttblmanifestcriteriaCriteria = pdsmanifestcriteria.ttblmanifestcriteria.NewttblmanifestcriteriaRow();
         Manifestcriteria.UpdateRowFromManifestcriteria(ref ttblmanifestcriteriaCriteria, manifestcriteria);
         pdsmanifestcriteria.ttblmanifestcriteria.AddttblmanifestcriteriaRow((pdsmanifestcriteriaDataSet.ttblmanifestcriteriaRow)ttblmanifestcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetShippingManifests - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetShippingManifests(ref pdsContext,  pdsmanifestcriteria, out pdsmanifestresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetShippingManifests - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsmanifestcriteria); 
    
            foreach (DataRow row in pdsmanifestresults.ttblmanifestresults)
            {
                results.Add(Manifestresults.BuildManifestresultsFromRow(row));
            }
            return results;
        
      }

      public AstwlinquiryGetItemLotSummaryResponseAPI GetItemLotSummary(Itemlotcriteria itemlotcriteria)
      {   
         var result = new AstwlinquiryGetItemLotSummaryResponseAPI();
         
         var pdsitemlotcriteria = new pdsitemlotcriteriaDataSet();
            
         var pdsitemlottotals = new pdsitemlottotalsDataSet();
            
         var pdsitemlotsummary = new pdsitemlotsummaryDataSet();
            
         var pdsitemlotexpiration = new pdsitemlotexpirationDataSet();
            
         DataRow ttblitemlotcriteriaCriteria = pdsitemlotcriteria.ttblitemlotcriteria.NewttblitemlotcriteriaRow();
         Itemlotcriteria.UpdateRowFromItemlotcriteria(ref ttblitemlotcriteriaCriteria, itemlotcriteria);
         pdsitemlotcriteria.ttblitemlotcriteria.AddttblitemlotcriteriaRow((pdsitemlotcriteriaDataSet.ttblitemlotcriteriaRow)ttblitemlotcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetItemLotSummary - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetItemLotSummary(ref pdsContext,  pdsitemlotcriteria, out pdsitemlottotals, out pdsitemlotsummary, out pdsitemlotexpiration, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetItemLotSummary - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemlotcriteria); 
    
         foreach (DataRow row in pdsitemlotexpiration.ttblitemlotexpiration)
         {
            result.itemlotexpiration.Add(Itemlotexpiration.BuildItemlotexpirationFromRow(row));
         }     
         foreach (DataRow row in pdsitemlotsummary.ttblitemlotsummary)
         {
            result.itemlotsummary.Add(Itemlotsummary.BuildItemlotsummaryFromRow(row));
         }     
         if (pdsitemlottotals.ttblitemlottotals.Count > 0)
         {
            result.itemlottotals = Itemlottotals.BuildItemlottotalsFromRow(pdsitemlottotals.ttblitemlottotals[0]);
         }
                    
          
         return result;
          
      }

      public AstwlinquiryGetDrpLogResponseAPI GetDrpLog(Drplogcriteria drplogcriteria)
      {   
         var result = new AstwlinquiryGetDrpLogResponseAPI();
         
         var pdsdrplogcriteria = new pdsdrplogcriteriaDataSet();
            
         var pdsdrplogresults = new pdsdrplogresultsDataSet();
            
         DataRow ttbldrplogcriteriaCriteria = pdsdrplogcriteria.ttbldrplogcriteria.NewttbldrplogcriteriaRow();
         Drplogcriteria.UpdateRowFromDrplogcriteria(ref ttbldrplogcriteriaCriteria, drplogcriteria);
         pdsdrplogcriteria.ttbldrplogcriteria.AddttbldrplogcriteriaRow((pdsdrplogcriteriaDataSet.ttbldrplogcriteriaRow)ttbldrplogcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetDrpLog - Astwlinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlinquiryproxy = this.proxyAppObject.CreatePO_astwlinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlinquiryproxy.GetDrpLog(ref pdsContext,  pdsdrplogcriteria, out pdsdrplogresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetDrpLog - Astwlinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdrplogcriteria); 
    
         foreach (DataRow row in pdsdrplogresults.ttbldrplogresults)
         {
            result.drplogresults.Add(Drplogresults.BuildDrplogresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  