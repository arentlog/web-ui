//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Adapters
{
   using com.infor.sxproxy.twlproxy;
   using com.infor.sxproxy.twlproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsaltloc;
   using Models.Pdsaltloccriteria;
   using Models.Pdsabcclasscriteria;
   using Models.Pdsabcclass;
   using Models.Pdsabcapplycriteria;
   using Models.Pdsccsetupcriteria;
   using Models.Pdsccsetup;
   using Models.Pdsempmstcopycriteria;
   using Models.Pdsempmstcopy;
   using Models.Pdsitemdetail;
   using Models.Pdsitemdetailupdresponse;
   using Models.Pdsitemdetailcriteria;
   using Models.Pdsitemprimeupd;
   using Models.Pdsitemkitupd;
   using Models.Pdsseqcontrolcriteria;
   using Models.Pdsseqcontrollist;
   using Models.Pdslocationcriteria;
   using Models.Pdslocationresults;
   using Models.Pdsuserspecificcriteria;
   using Models.Pdsuserspecificresults;
   using Models.Pdscopyuserspecific;
   using Models.Pdsgetcrossrefcriteria;
   using Models.Pdsgetcrossrefresults;
   using Models.Pdsvendorshipfromcriteria;
   using Models.Pdsvendorshipfromresults;
   using Models.Pdsbarcodeidcriteria;
   using Models.Pdsbarcodeidresults;
   using Models.Pdsbarcodedetailcriteria;
   using Models.Pdsbarcodedetailresults;
   using Models.Pdsautodroprule;
   using Models.PdsdrpRules;
   using Models.Pdsbinlocationcriteria;
   using Models.Pdsbinlocationresults;
   using Models.Complex;

   public partial class AstwlsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private TWLProxyAppObject proxyAppObject;
      
      public AstwlsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new TWLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AstwlsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void CreateAltLoc(Altloc altloc)
      {   
         
         var pdsaltloc = new pdsaltlocDataSet();
            
         DataRow ttblaltlocCriteria = pdsaltloc.ttblaltloc.NewttblaltlocRow();
         Altloc.UpdateRowFromAltloc(ref ttblaltlocCriteria, altloc);
         pdsaltloc.ttblaltloc.AddttblaltlocRow((pdsaltlocDataSet.ttblaltlocRow)ttblaltlocCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateAltLoc - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.CreateAltLoc(ref pdsContext, ref pdsaltloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateAltLoc - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaltloc);
      }

      public void DeleteAltLoc(Altloccriteria altloccriteria)
      {   
         
         var pdsaltloccriteria = new pdsaltloccriteriaDataSet();
            
         DataRow ttblaltloccriteriaCriteria = pdsaltloccriteria.ttblaltloccriteria.NewttblaltloccriteriaRow();
         Altloccriteria.UpdateRowFromAltloccriteria(ref ttblaltloccriteriaCriteria, altloccriteria);
         pdsaltloccriteria.ttblaltloccriteria.AddttblaltloccriteriaRow((pdsaltloccriteriaDataSet.ttblaltloccriteriaRow)ttblaltloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteAltLoc - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.DeleteAltLoc(ref pdsContext,  pdsaltloccriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteAltLoc - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaltloccriteria);
      }

      public Altloc GetAltLoc(Altloccriteria altloccriteria)
      {   
         var result = new Altloc();
         
         var pdsaltloccriteria = new pdsaltloccriteriaDataSet();
            
         var pdsaltloc = new pdsaltlocDataSet();
            
         DataRow ttblaltloccriteriaCriteria = pdsaltloccriteria.ttblaltloccriteria.NewttblaltloccriteriaRow();
         Altloccriteria.UpdateRowFromAltloccriteria(ref ttblaltloccriteriaCriteria, altloccriteria);
         pdsaltloccriteria.ttblaltloccriteria.AddttblaltloccriteriaRow((pdsaltloccriteriaDataSet.ttblaltloccriteriaRow)ttblaltloccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetAltLoc - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetAltLoc(ref pdsContext,  pdsaltloccriteria, out pdsaltloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetAltLoc - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaltloccriteria); 
    
         if (pdsaltloc.ttblaltloc.Count > 0) 
         { 
             result = Altloc.BuildAltlocFromRow(pdsaltloc.ttblaltloc[0]);
         } 
              
          
         return result;
          
      }

      public void UpdateAltLoc(Altloc altloc)
      {   
         
         var pdsaltloc = new pdsaltlocDataSet();
            
         DataRow ttblaltlocCriteria = pdsaltloc.ttblaltloc.NewttblaltlocRow();
         Altloc.UpdateRowFromAltloc(ref ttblaltlocCriteria, altloc);
         pdsaltloc.ttblaltloc.AddttblaltlocRow((pdsaltlocDataSet.ttblaltlocRow)ttblaltlocCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateAltLoc - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateAltLoc(ref pdsContext,  pdsaltloc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateAltLoc - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsaltloc);
      }

      public Abcclass GetABCClassification(Abcclasscriteria abcclasscriteria)
      {   
         var result = new Abcclass();
         
         var pdsabcclasscriteria = new pdsabcclasscriteriaDataSet();
            
         var pdsabcclass = new pdsabcclassDataSet();
            
         DataRow ttblabcclasscriteriaCriteria = pdsabcclasscriteria.ttblabcclasscriteria.NewttblabcclasscriteriaRow();
         Abcclasscriteria.UpdateRowFromAbcclasscriteria(ref ttblabcclasscriteriaCriteria, abcclasscriteria);
         pdsabcclasscriteria.ttblabcclasscriteria.AddttblabcclasscriteriaRow((pdsabcclasscriteriaDataSet.ttblabcclasscriteriaRow)ttblabcclasscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetABCClassification - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetABCClassification(ref pdsContext,  pdsabcclasscriteria, out pdsabcclass, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetABCClassification - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsabcclasscriteria); 
    
         if (pdsabcclass.ttblabcclass.Count > 0) 
         { 
             result = Abcclass.BuildAbcclassFromRow(pdsabcclass.ttblabcclass[0]);
         } 
              
          
         return result;
          
      }

      public void UpdateABCClassification(Abcclass abcclass)
      {   
         
         var pdsabcclass = new pdsabcclassDataSet();
            
         DataRow ttblabcclassCriteria = pdsabcclass.ttblabcclass.NewttblabcclassRow();
         Abcclass.UpdateRowFromAbcclass(ref ttblabcclassCriteria, abcclass);
         pdsabcclass.ttblabcclass.AddttblabcclassRow((pdsabcclassDataSet.ttblabcclassRow)ttblabcclassCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateABCClassification - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateABCClassification(ref pdsContext,  pdsabcclass, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateABCClassification - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsabcclass);
      }

      public Abcclass SetABCRunDate(Abcclass abcclass)
      {   
         var result = new Abcclass();
         
         var pdsabcclass = new pdsabcclassDataSet();
            
         DataRow ttblabcclassCriteria = pdsabcclass.ttblabcclass.NewttblabcclassRow();
         Abcclass.UpdateRowFromAbcclass(ref ttblabcclassCriteria, abcclass);
         pdsabcclass.ttblabcclass.AddttblabcclassRow((pdsabcclassDataSet.ttblabcclassRow)ttblabcclassCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SetABCRunDate - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.SetABCRunDate(ref pdsContext, ref pdsabcclass, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SetABCRunDate - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsabcclass); 
    
         if (pdsabcclass.ttblabcclass.Count > 0) 
         { 
             result = Abcclass.BuildAbcclassFromRow(pdsabcclass.ttblabcclass[0]);
         } 
              
          
         return result;
          
      }

      public void ABCApplyPending(Abcapplycriteria abcapplycriteria)
      {   
         
         var pdsabcapplycriteria = new pdsabcapplycriteriaDataSet();
            
         DataRow ttblabcapplycriteriaCriteria = pdsabcapplycriteria.ttblabcapplycriteria.NewttblabcapplycriteriaRow();
         Abcapplycriteria.UpdateRowFromAbcapplycriteria(ref ttblabcapplycriteriaCriteria, abcapplycriteria);
         pdsabcapplycriteria.ttblabcapplycriteria.AddttblabcapplycriteriaRow((pdsabcapplycriteriaDataSet.ttblabcapplycriteriaRow)ttblabcapplycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ABCApplyPending - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.ABCApplyPending(ref pdsContext,  pdsabcapplycriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ABCApplyPending - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsabcapplycriteria);
      }

      public Ccsetup GetCCSetup(Ccsetupcriteria ccsetupcriteria)
      {   
         var result = new Ccsetup();
         
         var pdsccsetupcriteria = new pdsccsetupcriteriaDataSet();
            
         var pdsccsetup = new pdsccsetupDataSet();
            
         DataRow ttblccsetupcriteriaCriteria = pdsccsetupcriteria.ttblccsetupcriteria.NewttblccsetupcriteriaRow();
         Ccsetupcriteria.UpdateRowFromCcsetupcriteria(ref ttblccsetupcriteriaCriteria, ccsetupcriteria);
         pdsccsetupcriteria.ttblccsetupcriteria.AddttblccsetupcriteriaRow((pdsccsetupcriteriaDataSet.ttblccsetupcriteriaRow)ttblccsetupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCCSetup - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetCCSetup(ref pdsContext,  pdsccsetupcriteria, out pdsccsetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCCSetup - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccsetupcriteria); 
    
         if (pdsccsetup.ttblccsetup.Count > 0) 
         { 
             result = Ccsetup.BuildCcsetupFromRow(pdsccsetup.ttblccsetup[0]);
         } 
              
          
         return result;
          
      }

      public void UpdateCCSetup(Ccsetup ccsetup)
      {   
         
         var pdsccsetup = new pdsccsetupDataSet();
            
         DataRow ttblccsetupCriteria = pdsccsetup.ttblccsetup.NewttblccsetupRow();
         Ccsetup.UpdateRowFromCcsetup(ref ttblccsetupCriteria, ccsetup);
         pdsccsetup.ttblccsetup.AddttblccsetupRow((pdsccsetupDataSet.ttblccsetupRow)ttblccsetupCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateCCSetup - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateCCSetup(ref pdsContext,  pdsccsetup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateCCSetup - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsccsetup);
      }

      public Empmstcopy EmpmstCopy(Empmstcopycriteria empmstcopycriteria)
      {   
         var result = new Empmstcopy();
         
         var pdsempmstcopycriteria = new pdsempmstcopycriteriaDataSet();
            
         var pdsempmstcopy = new pdsempmstcopyDataSet();
            
         DataRow ttblempmstcopycriteriaCriteria = pdsempmstcopycriteria.ttblempmstcopycriteria.NewttblempmstcopycriteriaRow();
         Empmstcopycriteria.UpdateRowFromEmpmstcopycriteria(ref ttblempmstcopycriteriaCriteria, empmstcopycriteria);
         pdsempmstcopycriteria.ttblempmstcopycriteria.AddttblempmstcopycriteriaRow((pdsempmstcopycriteriaDataSet.ttblempmstcopycriteriaRow)ttblempmstcopycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("EmpmstCopy - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.EmpmstCopy(ref pdsContext,  pdsempmstcopycriteria, out pdsempmstcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("EmpmstCopy - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsempmstcopycriteria); 
    
         if (pdsempmstcopy.ttblempmstcopy.Count > 0) 
         { 
             result = Empmstcopy.BuildEmpmstcopyFromRow(pdsempmstcopy.ttblempmstcopy[0]);
         } 
              
          
         return result;
          
      }

      public Itemdetail CreateItemDetail(Itemdetail itemdetail)
      {   
         var result = new Itemdetail();
         
         var pdsitemdetail = new pdsitemdetailDataSet();
            
         DataRow ttblitemdetailCriteria = pdsitemdetail.ttblitemdetail.NewttblitemdetailRow();
         Itemdetail.UpdateRowFromItemdetail(ref ttblitemdetailCriteria, itemdetail);
         pdsitemdetail.ttblitemdetail.AddttblitemdetailRow((pdsitemdetailDataSet.ttblitemdetailRow)ttblitemdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateItemDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.CreateItemDetail(ref pdsContext, ref pdsitemdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateItemDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemdetail); 
    
         if (pdsitemdetail.ttblitemdetail.Count > 0) 
         { 
             result = Itemdetail.BuildItemdetailFromRow(pdsitemdetail.ttblitemdetail[0]);
         } 
              
          
         return result;
          
      }

      public Itemdetailupdresponse UpdateItemDetail(Itemdetail itemdetail)
      {   
         var result = new Itemdetailupdresponse();
         
         var pdsitemdetail = new pdsitemdetailDataSet();
            
         var pdsitemdetailupdresponse = new pdsitemdetailupdresponseDataSet();
            
         DataRow ttblitemdetailCriteria = pdsitemdetail.ttblitemdetail.NewttblitemdetailRow();
         Itemdetail.UpdateRowFromItemdetail(ref ttblitemdetailCriteria, itemdetail);
         pdsitemdetail.ttblitemdetail.AddttblitemdetailRow((pdsitemdetailDataSet.ttblitemdetailRow)ttblitemdetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateItemDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateItemDetail(ref pdsContext,  pdsitemdetail, out pdsitemdetailupdresponse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateItemDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemdetail); 
    
         if (pdsitemdetailupdresponse.ttblitemdetailupdresponse.Count > 0) 
         { 
             result = Itemdetailupdresponse.BuildItemdetailupdresponseFromRow(pdsitemdetailupdresponse.ttblitemdetailupdresponse[0]);
         } 
              
          
         return result;
          
      }

      public void DeleteItemDetail(Itemdetailcriteria itemdetailcriteria)
      {   
         
         var pdsitemdetailcriteria = new pdsitemdetailcriteriaDataSet();
            
         DataRow ttblitemdetailcriteriaCriteria = pdsitemdetailcriteria.ttblitemdetailcriteria.NewttblitemdetailcriteriaRow();
         Itemdetailcriteria.UpdateRowFromItemdetailcriteria(ref ttblitemdetailcriteriaCriteria, itemdetailcriteria);
         pdsitemdetailcriteria.ttblitemdetailcriteria.AddttblitemdetailcriteriaRow((pdsitemdetailcriteriaDataSet.ttblitemdetailcriteriaRow)ttblitemdetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteItemDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.DeleteItemDetail(ref pdsContext,  pdsitemdetailcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteItemDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemdetailcriteria);
      }

      public void UpdateItemPrime(Itemprimeupd itemprimeupd)
      {   
         
         var pdsitemprimeupd = new pdsitemprimeupdDataSet();
            
         DataRow ttblitemprimeupdCriteria = pdsitemprimeupd.ttblitemprimeupd.NewttblitemprimeupdRow();
         Itemprimeupd.UpdateRowFromItemprimeupd(ref ttblitemprimeupdCriteria, itemprimeupd);
         pdsitemprimeupd.ttblitemprimeupd.AddttblitemprimeupdRow((pdsitemprimeupdDataSet.ttblitemprimeupdRow)ttblitemprimeupdCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateItemPrime - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateItemPrime(ref pdsContext,  pdsitemprimeupd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateItemPrime - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemprimeupd);
      }

      public void UpdateItemKit(Itemkitupd itemkitupd)
      {   
         
         var pdsitemkitupd = new pdsitemkitupdDataSet();
            
         DataRow ttblitemkitupdCriteria = pdsitemkitupd.ttblitemkitupd.NewttblitemkitupdRow();
         Itemkitupd.UpdateRowFromItemkitupd(ref ttblitemkitupdCriteria, itemkitupd);
         pdsitemkitupd.ttblitemkitupd.AddttblitemkitupdRow((pdsitemkitupdDataSet.ttblitemkitupdRow)ttblitemkitupdCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateItemKit - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateItemKit(ref pdsContext,  pdsitemkitupd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateItemKit - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsitemkitupd);
      }

      public AstwlsetupGetSeqControlsResponseAPI GetSeqControls(Seqcontrolcriteria seqcontrolcriteria)
      {   
         var result = new AstwlsetupGetSeqControlsResponseAPI();
         
         var pdsseqcontrolcriteria = new pdsseqcontrolcriteriaDataSet();
            
         var pdsseqcontrollist = new pdsseqcontrollistDataSet();
            
         DataRow ttblseqcontrolcriteriaCriteria = pdsseqcontrolcriteria.ttblseqcontrolcriteria.NewttblseqcontrolcriteriaRow();
         Seqcontrolcriteria.UpdateRowFromSeqcontrolcriteria(ref ttblseqcontrolcriteriaCriteria, seqcontrolcriteria);
         pdsseqcontrolcriteria.ttblseqcontrolcriteria.AddttblseqcontrolcriteriaRow((pdsseqcontrolcriteriaDataSet.ttblseqcontrolcriteriaRow)ttblseqcontrolcriteriaCriteria);
            
         string defaultSequence = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetSeqControls - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetSeqControls(ref pdsContext,  pdsseqcontrolcriteria, out pdsseqcontrollist, out defaultSequence, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetSeqControls - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsseqcontrolcriteria); 
    
         foreach (DataRow row in pdsseqcontrollist.ttblseqcontrollist)
         {
            result.seqcontrollist.Add(Seqcontrollist.BuildSeqcontrollistFromRow(row));
         }     
         result.defaultSequence = defaultSequence;
          
         return result;
          
      }

      public void UpdateSeqControls(IEnumerable<Seqcontrollist> seqcontrollist)
      {   
         
         var pdsseqcontrollist = new pdsseqcontrollistDataSet();
            
         foreach (var obj in seqcontrollist)
         {
             DataRow row = pdsseqcontrollist.ttblseqcontrollist.NewttblseqcontrollistRow();
             Seqcontrollist.UpdateRowFromSeqcontrollist(ref row, obj);
             pdsseqcontrollist.ttblseqcontrollist.AddttblseqcontrollistRow((pdsseqcontrollistDataSet.ttblseqcontrollistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UpdateSeqControls - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UpdateSeqControls(ref pdsContext,  pdsseqcontrollist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UpdateSeqControls - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsseqcontrollist);
      }

      public void DeleteLocation(Locationcriteria locationcriteria)
      {   
         
         var pdslocationcriteria = new pdslocationcriteriaDataSet();
            
         DataRow ttbllocationcriteriaCriteria = pdslocationcriteria.ttbllocationcriteria.NewttbllocationcriteriaRow();
         Locationcriteria.UpdateRowFromLocationcriteria(ref ttbllocationcriteriaCriteria, locationcriteria);
         pdslocationcriteria.ttbllocationcriteria.AddttbllocationcriteriaRow((pdslocationcriteriaDataSet.ttbllocationcriteriaRow)ttbllocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("DeleteLocation - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.DeleteLocation(ref pdsContext,  pdslocationcriteria, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("DeleteLocation - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocationcriteria);
      }

      public IEnumerable<Locationresults> GetLocations(Locationcriteria locationcriteria)
      {   
         var results = new List<Locationresults>();
         
         var pdslocationcriteria = new pdslocationcriteriaDataSet();
            
         var pdslocationresults = new pdslocationresultsDataSet();
            
         DataRow ttbllocationcriteriaCriteria = pdslocationcriteria.ttbllocationcriteria.NewttbllocationcriteriaRow();
         Locationcriteria.UpdateRowFromLocationcriteria(ref ttbllocationcriteriaCriteria, locationcriteria);
         pdslocationcriteria.ttbllocationcriteria.AddttbllocationcriteriaRow((pdslocationcriteriaDataSet.ttbllocationcriteriaRow)ttbllocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLocations - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetLocations(ref pdsContext,  pdslocationcriteria, out pdslocationresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLocations - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocationcriteria); 
    
            foreach (DataRow row in pdslocationresults.ttbllocationresults)
            {
                results.Add(Locationresults.BuildLocationresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Locationresults> GetLocationsWithAlternates(Locationcriteria locationcriteria)
      {   
         var results = new List<Locationresults>();
         
         var pdslocationcriteria = new pdslocationcriteriaDataSet();
            
         var pdslocationresults = new pdslocationresultsDataSet();
            
         DataRow ttbllocationcriteriaCriteria = pdslocationcriteria.ttbllocationcriteria.NewttbllocationcriteriaRow();
         Locationcriteria.UpdateRowFromLocationcriteria(ref ttbllocationcriteriaCriteria, locationcriteria);
         pdslocationcriteria.ttbllocationcriteria.AddttbllocationcriteriaRow((pdslocationcriteriaDataSet.ttbllocationcriteriaRow)ttbllocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLocationsWithAlternates - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetLocationsWithAlternates(ref pdsContext,  pdslocationcriteria, out pdslocationresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLocationsWithAlternates - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocationcriteria); 
    
            foreach (DataRow row in pdslocationresults.ttbllocationresults)
            {
                results.Add(Locationresults.BuildLocationresultsFromRow(row));
            }
            return results;
        
      }

      public Locationresults GetLocationDetail(Locationcriteria locationcriteria)
      {   
         var result = new Locationresults();
         
         var pdslocationcriteria = new pdslocationcriteriaDataSet();
            
         var pdslocationresults = new pdslocationresultsDataSet();
            
         DataRow ttbllocationcriteriaCriteria = pdslocationcriteria.ttbllocationcriteria.NewttbllocationcriteriaRow();
         Locationcriteria.UpdateRowFromLocationcriteria(ref ttbllocationcriteriaCriteria, locationcriteria);
         pdslocationcriteria.ttbllocationcriteria.AddttbllocationcriteriaRow((pdslocationcriteriaDataSet.ttbllocationcriteriaRow)ttbllocationcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetLocationDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetLocationDetail(ref pdsContext,  pdslocationcriteria, out pdslocationresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetLocationDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocationcriteria); 
    
         if (pdslocationresults.ttbllocationresults.Count > 0) 
         { 
             result = Locationresults.BuildLocationresultsFromRow(pdslocationresults.ttbllocationresults[0]);
         } 
              
          
         return result;
          
      }

      public void ValidateLocationDetail(Locationresults locationresults)
      {   
         
         var pdslocationresults = new pdslocationresultsDataSet();
            
         DataRow ttbllocationresultsCriteria = pdslocationresults.ttbllocationresults.NewttbllocationresultsRow();
         Locationresults.UpdateRowFromLocationresults(ref ttbllocationresultsCriteria, locationresults);
         pdslocationresults.ttbllocationresults.AddttbllocationresultsRow((pdslocationresultsDataSet.ttbllocationresultsRow)ttbllocationresultsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateLocationDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.ValidateLocationDetail(ref pdsContext,  pdslocationresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ValidateLocationDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdslocationresults);
      }

      public AstwlsetupGetUserSpecificResponseAPI GetUserSpecific(Userspecificcriteria userspecificcriteria)
      {   
         var result = new AstwlsetupGetUserSpecificResponseAPI();
         
         var pdsuserspecificcriteria = new pdsuserspecificcriteriaDataSet();
            
         var pdsuserspecificresults = new pdsuserspecificresultsDataSet();
            
         DataRow ttbluserspecificcriteriaCriteria = pdsuserspecificcriteria.ttbluserspecificcriteria.NewttbluserspecificcriteriaRow();
         Userspecificcriteria.UpdateRowFromUserspecificcriteria(ref ttbluserspecificcriteriaCriteria, userspecificcriteria);
         pdsuserspecificcriteria.ttbluserspecificcriteria.AddttbluserspecificcriteriaRow((pdsuserspecificcriteriaDataSet.ttbluserspecificcriteriaRow)ttbluserspecificcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetUserSpecific - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetUserSpecific(ref pdsContext,  pdsuserspecificcriteria, out pdsuserspecificresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetUserSpecific - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsuserspecificcriteria); 
    
         foreach (DataRow row in pdsuserspecificresults.ttbluserspecificresults)
         {
            result.userspecificresults.Add(Userspecificresults.BuildUserspecificresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public string UserSpecificCopy(IEnumerable<Copyuserspecific> copyuserspecific)
      {   
          
         var pdscopyuserspecific = new pdscopyuserspecificDataSet();
            
         foreach (var obj in copyuserspecific)
         {
             DataRow row = pdscopyuserspecific.ttblcopyuserspecific.NewttblcopyuserspecificRow();
             Copyuserspecific.UpdateRowFromCopyuserspecific(ref row, obj);
             pdscopyuserspecific.ttblcopyuserspecific.AddttblcopyuserspecificRow((pdscopyuserspecificDataSet.ttblcopyuserspecificRow)row);
         }
        
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("UserSpecificCopy - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.UserSpecificCopy(ref pdsContext,  pdscopyuserspecific, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("UserSpecificCopy - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdscopyuserspecific); 
    
         return cWarningMessage;
      
      }

      public AstwlsetupGetCrossReferenceListResponseAPI GetCrossReferenceList(Getcrossrefcriteria getcrossrefcriteria)
      {   
         var result = new AstwlsetupGetCrossReferenceListResponseAPI();
         
         var pdsgetcrossrefcriteria = new pdsgetcrossrefcriteriaDataSet();
            
         var pdsgetcrossrefresults = new pdsgetcrossrefresultsDataSet();
            
         DataRow ttblgetcrossrefcriteriaCriteria = pdsgetcrossrefcriteria.ttblgetcrossrefcriteria.NewttblgetcrossrefcriteriaRow();
         Getcrossrefcriteria.UpdateRowFromGetcrossrefcriteria(ref ttblgetcrossrefcriteriaCriteria, getcrossrefcriteria);
         pdsgetcrossrefcriteria.ttblgetcrossrefcriteria.AddttblgetcrossrefcriteriaRow((pdsgetcrossrefcriteriaDataSet.ttblgetcrossrefcriteriaRow)ttblgetcrossrefcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetCrossReferenceList - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetCrossReferenceList(ref pdsContext,  pdsgetcrossrefcriteria, out pdsgetcrossrefresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetCrossReferenceList - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgetcrossrefcriteria); 
    
         foreach (DataRow row in pdsgetcrossrefresults.ttblgetcrossrefresults)
         {
            result.getcrossrefresults.Add(Getcrossrefresults.BuildGetcrossrefresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlsetupGetVendorShipFromResponseAPI GetVendorShipFrom(Vendorshipfromcriteria vendorshipfromcriteria)
      {   
         var result = new AstwlsetupGetVendorShipFromResponseAPI();
         
         var pdsvendorshipfromcriteria = new pdsvendorshipfromcriteriaDataSet();
            
         var pdsvendorshipfromresults = new pdsvendorshipfromresultsDataSet();
            
         DataRow ttblvendorshipfromcriteriaCriteria = pdsvendorshipfromcriteria.ttblvendorshipfromcriteria.NewttblvendorshipfromcriteriaRow();
         Vendorshipfromcriteria.UpdateRowFromVendorshipfromcriteria(ref ttblvendorshipfromcriteriaCriteria, vendorshipfromcriteria);
         pdsvendorshipfromcriteria.ttblvendorshipfromcriteria.AddttblvendorshipfromcriteriaRow((pdsvendorshipfromcriteriaDataSet.ttblvendorshipfromcriteriaRow)ttblvendorshipfromcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetVendorShipFrom - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetVendorShipFrom(ref pdsContext,  pdsvendorshipfromcriteria, out pdsvendorshipfromresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetVendorShipFrom - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvendorshipfromcriteria); 
    
         foreach (DataRow row in pdsvendorshipfromresults.ttblvendorshipfromresults)
         {
            result.vendorshipfromresults.Add(Vendorshipfromresults.BuildVendorshipfromresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Barcodeidresults> GetBarcodeId(Barcodeidcriteria barcodeidcriteria)
      {   
         var results = new List<Barcodeidresults>();
         
         var pdsbarcodeidcriteria = new pdsbarcodeidcriteriaDataSet();
            
         var pdsbarcodeidresults = new pdsbarcodeidresultsDataSet();
            
         DataRow ttblbarcodeidcriteriaCriteria = pdsbarcodeidcriteria.ttblbarcodeidcriteria.NewttblbarcodeidcriteriaRow();
         Barcodeidcriteria.UpdateRowFromBarcodeidcriteria(ref ttblbarcodeidcriteriaCriteria, barcodeidcriteria);
         pdsbarcodeidcriteria.ttblbarcodeidcriteria.AddttblbarcodeidcriteriaRow((pdsbarcodeidcriteriaDataSet.ttblbarcodeidcriteriaRow)ttblbarcodeidcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetBarcodeId - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetBarcodeId(ref pdsContext,  pdsbarcodeidcriteria, out pdsbarcodeidresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetBarcodeId - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbarcodeidcriteria); 
    
            foreach (DataRow row in pdsbarcodeidresults.ttblbarcodeidresults)
            {
                results.Add(Barcodeidresults.BuildBarcodeidresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Barcodedetailresults> GetBarcodeDetail(Barcodedetailcriteria barcodedetailcriteria)
      {   
         var results = new List<Barcodedetailresults>();
         
         var pdsbarcodedetailcriteria = new pdsbarcodedetailcriteriaDataSet();
            
         var pdsbarcodedetailresults = new pdsbarcodedetailresultsDataSet();
            
         DataRow ttblbarcodedetailcriteriaCriteria = pdsbarcodedetailcriteria.ttblbarcodedetailcriteria.NewttblbarcodedetailcriteriaRow();
         Barcodedetailcriteria.UpdateRowFromBarcodedetailcriteria(ref ttblbarcodedetailcriteriaCriteria, barcodedetailcriteria);
         pdsbarcodedetailcriteria.ttblbarcodedetailcriteria.AddttblbarcodedetailcriteriaRow((pdsbarcodedetailcriteriaDataSet.ttblbarcodedetailcriteriaRow)ttblbarcodedetailcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetBarcodeDetail - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetBarcodeDetail(ref pdsContext,  pdsbarcodedetailcriteria, out pdsbarcodedetailresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetBarcodeDetail - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbarcodedetailcriteria); 
    
            foreach (DataRow row in pdsbarcodedetailresults.ttblbarcodedetailresults)
            {
                results.Add(Barcodedetailresults.BuildBarcodedetailresultsFromRow(row));
            }
            return results;
        
      }

      public Autodroprule TestAutoDropRule(Autodroprule autodroprule)
      {   
         var result = new Autodroprule();
         
         var pdsautodroprule = new pdsautodropruleDataSet();
            
         DataRow ttblautodropruleCriteria = pdsautodroprule.ttblautodroprule.NewttblautodropruleRow();
         Autodroprule.UpdateRowFromAutodroprule(ref ttblautodropruleCriteria, autodroprule);
         pdsautodroprule.ttblautodroprule.AddttblautodropruleRow((pdsautodropruleDataSet.ttblautodropruleRow)ttblautodropruleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TestAutoDropRule - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.TestAutoDropRule(ref pdsContext, ref pdsautodroprule, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TestAutoDropRule - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsautodroprule); 
    
         if (pdsautodroprule.ttblautodroprule.Count > 0) 
         { 
             result = Autodroprule.BuildAutodropruleFromRow(pdsautodroprule.ttblautodroprule[0]);
         } 
              
          
         return result;
          
      }

      public DrpRules ValidateAutoDropRule(DrpRules drp_rules)
      {   
         var result = new DrpRules();
         
         var pdsdrp_rules = new pdsdrp_rulesDataSet();
            
         DataRow ttbldrp_rulesCriteria = pdsdrp_rules.ttbldrp_rules.Newttbldrp_rulesRow();
         DrpRules.UpdateRowFromDrpRules(ref ttbldrp_rulesCriteria, drp_rules);
         pdsdrp_rules.ttbldrp_rules.Addttbldrp_rulesRow((pdsdrp_rulesDataSet.ttbldrp_rulesRow)ttbldrp_rulesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("ValidateAutoDropRule - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.ValidateAutoDropRule(ref pdsContext, ref pdsdrp_rules, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("ValidateAutoDropRule - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsdrp_rules); 
    
         if (pdsdrp_rules.ttbldrp_rules.Count > 0) 
         { 
             result = DrpRules.BuildDrpRulesFromRow(pdsdrp_rules.ttbldrp_rules[0]);
         } 
              
          
         return result;
          
      }

      public AstwlsetupGetBinLocationListResponseAPI GetBinLocationList(Binlocationcriteria binlocationcriteria)
      {   
         var result = new AstwlsetupGetBinLocationListResponseAPI();
         
         var pdsbinlocationcriteria = new pdsbinlocationcriteriaDataSet();
            
         var pdsbinlocationresults = new pdsbinlocationresultsDataSet();
            
         DataRow ttblbinlocationcriteriaCriteria = pdsbinlocationcriteria.ttblbinlocationcriteria.NewttblbinlocationcriteriaRow();
         Binlocationcriteria.UpdateRowFromBinlocationcriteria(ref ttblbinlocationcriteriaCriteria, binlocationcriteria);
         pdsbinlocationcriteria.ttblbinlocationcriteria.AddttblbinlocationcriteriaRow((pdsbinlocationcriteriaDataSet.ttblbinlocationcriteriaRow)ttblbinlocationcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetBinLocationList - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetBinLocationList(ref pdsContext,  pdsbinlocationcriteria, out pdsbinlocationresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetBinLocationList - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbinlocationcriteria); 
    
         foreach (DataRow row in pdsbinlocationresults.ttblbinlocationresults)
         {
            result.binlocationresults.Add(Binlocationresults.BuildBinlocationresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AstwlsetupGetBinLocationListWithAlternatesResponseAPI GetBinLocationListWithAlternates(Binlocationcriteria binlocationcriteria)
      {   
         var result = new AstwlsetupGetBinLocationListWithAlternatesResponseAPI();
         
         var pdsbinlocationcriteria = new pdsbinlocationcriteriaDataSet();
            
         var pdsbinlocationresults = new pdsbinlocationresultsDataSet();
            
         DataRow ttblbinlocationcriteriaCriteria = pdsbinlocationcriteria.ttblbinlocationcriteria.NewttblbinlocationcriteriaRow();
         Binlocationcriteria.UpdateRowFromBinlocationcriteria(ref ttblbinlocationcriteriaCriteria, binlocationcriteria);
         pdsbinlocationcriteria.ttblbinlocationcriteria.AddttblbinlocationcriteriaRow((pdsbinlocationcriteriaDataSet.ttblbinlocationcriteriaRow)ttblbinlocationcriteriaCriteria);
            
         bool lMoreRecords = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetBinLocationListWithAlternates - Astwlsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAstwlsetupproxy = this.proxyAppObject.CreatePO_astwlsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAstwlsetupproxy.GetBinLocationListWithAlternates(ref pdsContext,  pdsbinlocationcriteria, out pdsbinlocationresults, out lMoreRecords, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetBinLocationListWithAlternates - Astwlsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsbinlocationcriteria); 
    
         foreach (DataRow row in pdsbinlocationresults.ttblbinlocationresults)
         {
            result.binlocationresults.Add(Binlocationresults.BuildBinlocationresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  