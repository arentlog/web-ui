//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.TWL.Data.Adapters
{
   using com.infor.sxproxy.twlproxy;
   using com.infor.sxproxy.twlproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdstransactions;

   public partial class TransactionsAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdstransactions";
      private TWLProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> transactionsTableControlKey;
		
      private pdstransactionsDataSet dataSet;
        
      public TransactionsAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new TWLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdstransactionsDataSet() { DataSetName = DataSetName };
            this.transactionsTableControlKey = this.dataSet.ttbltransactions.GetTableControlParametersKey();
            
            if (!this.tempTableControlParameters.ContainsKey(this.transactionsTableControlKey))
            {
               this.CreateTableControlParameters(this.transactionsTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in TransactionsAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Transactionsproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poTransactionsproxy = this.proxyAppObject.CreatePO_transactionsproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poTransactionsproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Transactionsproxy - After Call");
      }
      
      private void SetAndFetch(string where, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.transactionsTableControlKey, where, batchsize, fldList);
         this.SetTableParametersOnContext(this.transactionsTableControlKey, true);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Transactionsproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poTransactionsproxy = this.proxyAppObject.CreatePO_transactionsproxy())
               {
                  this.SetRequiredContextParameters();
                  poTransactionsproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Transactionsproxy - After Call");
      }
   

      public Transactions GetByRowId(string rowId, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fldList);
         Transactions transactions = null;
         if (row != null)
         {
             transactions = this.BuildFromRow(row);
         }
         return transactions;
      }
   
      private DataRow GetRowByRowId(string rowId, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(transactions) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttbltransactions.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Transactions> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(transactions)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), batchsize, fldList);
      }

      protected Transactions Fetch(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         var row = this.dataSet.ttbltransactions.AsEnumerable().SingleOrDefault();
         Transactions transactions = null;
         if (row != null)
         {
             transactions = this.BuildFromRow(row);
         }
         return transactions;
      }
	  
	  

      public IEnumerable<Transactions> GetList(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttbltransactions.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Transactions Get(string coNum, string whNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.Fetch(where, batchsize, fldList);
      }
  
      public IEnumerable<Transactions> GetListByCargocontrol(string cargoControl, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(cargoControl)) 
         {
             sb.AppendFormatWithEscape("transactions.cargo_control = '{0}'", cargoControl);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhAbsTime(string coNum, string whNum, string absNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.abs_num = '{0}'", absNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhBatch(string coNum, string whNum, int batch, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (batch != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.batch = {0}", batch);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhBinTime(string coNum, string whNum, string binNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(binNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.bin_num = '{0}'", binNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhCartonId(string coNum, string whNum, string cartonId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(cartonId)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.carton_id = '{0}'", cartonId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhCcid(string coNum, string whNum, int ccId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (ccId != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.cc_id = {0}", ccId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhCctype(string coNum, string whNum, string ccType, string ccString, int ccId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(ccType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.cc_type = '{0}'", ccType);
         }
         if (!string.IsNullOrEmpty(ccString)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.cc_string = '{0}'", ccString);
         }
         if (ccId != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.cc_id = {0}", ccId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhDeptTypeTime(string coNum, string whNum, int deptNum, string transType, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (deptNum != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.dept_num = {0}", deptNum);
         }
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_type = '{0}'", transType);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhDocid(string coNum, string whNum, string docId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(docId)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.doc_id = '{0}'", docId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhEmpTime(string coNum, string whNum, string empNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(empNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.emp_num = '{0}'", empNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhLotDatetime(string coNum, string whNum, string lot, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(lot)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.lot = '{0}'", lot);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhPalletfromAbs(string coNum, string whNum, string palletIdFrom, string absNum, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(palletIdFrom)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.pallet_id_from = '{0}'", palletIdFrom);
         }
         if (!string.IsNullOrEmpty(absNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.abs_num = '{0}'", absNum);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhPalletTime(string coNum, string whNum, string palletId, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(palletId)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.pallet_id = '{0}'", palletId);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhPoSufTime(string coNum, string whNum, string poNumber, string poSuffix, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(poNumber)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.po_number = '{0}'", poNumber);
         }
         if (!string.IsNullOrEmpty(poSuffix)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.po_suffix = '{0}'", poSuffix);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhRtTime(string coNum, string whNum, string rtNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(rtNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.rt_num = '{0}'", rtNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhSerialNumDatetime(string coNum, string whNum, string serialNum, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(serialNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.serial_num = '{0}'", serialNum);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhShfTypeTime(string coNum, string whNum, int shfNum, string transType, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (shfNum != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.shf_num = {0}", shfNum);
         }
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_type = '{0}'", transType);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhTaskDatetime(string coNum, string whNum, int taskId, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (taskId != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.task_id = {0}", taskId);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhTypeStatus(string coNum, string whNum, string transType, string rowStatus, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_type = '{0}'", transType);
         }
         if (!string.IsNullOrEmpty(rowStatus)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.row_status = '{0}'", rowStatus);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByCoWhTypeTime(string coNum, string whNum, string transType, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(coNum)) 
         {
             sb.AppendFormatWithEscape("transactions.co_num = '{0}'", coNum);
         }
         if (!string.IsNullOrEmpty(whNum)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.wh_num = '{0}'", whNum);
         }
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_type = '{0}'", transType);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByReleaseid(string releaseId, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(releaseId)) 
         {
             sb.AppendFormatWithEscape("transactions.release_id = '{0}'", releaseId);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByStatusChrono(string rowStatus, string dateTime, int transSecTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowStatus)) 
         {
             sb.AppendFormatWithEscape("transactions.row_status = '{0}'", rowStatus);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         if (transSecTime != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_sec_time = {0}", transSecTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByStatusTypeTime(string rowStatus, string transType, string dateTime, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowStatus)) 
         {
             sb.AppendFormatWithEscape("transactions.row_status = '{0}'", rowStatus);
         }
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.trans_type = '{0}'", transType);
         }
         if (!string.IsNullOrEmpty(dateTime)) 
         {
             sb.AppendFormatWithEscape(" AND transactions.date_time = '{0}'", dateTime);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByTlink(int transLink, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transLink != int.MinValue) 
         {
             sb.AppendFormatWithEscape("transactions.trans_link = {0}", transLink);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByTransNum(int transNum, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transNum != int.MinValue) 
         {
             sb.AppendFormatWithEscape("transactions.trans_num = {0}", transNum);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Transactions> GetListByTypeTransmission(string transType, int transmission, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(transType)) 
         {
             sb.AppendFormatWithEscape("transactions.trans_type = '{0}'", transType);
         }
         if (transmission != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND transactions.transmission = {0}", transmission);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Transactions BuildFromRow(DataRow row)
      {
         var returnRecord = Transactions.BuildTransactionsFromRow(row);
         returnRecord = this.BuildExtraFromRow<Transactions>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Transactions record)
      {
         Transactions.UpdateRowFromTransactions(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Transactions Insert(Transactions record)
      {
         DataRow row = this.dataSet.ttbltransactions.NewttbltransactionsRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttbltransactions.AddttbltransactionsRow((pdstransactionsDataSet.ttbltransactionsRow)row);
         this.SaveChanges();
         return this.dataSet.ttbltransactions.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttbltransactions.Rows[0]) : null;
      }
  

      public Transactions Update(Transactions record)
      {
        var row = this.GetRowByRowId(record.rowID, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttbltransactions.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttbltransactions.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Transactions record)
      {
         var row = this.GetRowByRowId(record.rowID, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttbltransactions.NewttbltransactionsRow();
            Transactions.BuildMinimalRow(ref row, record);
            this.dataSet.ttbltransactions.AddttbltransactionsRow((pdstransactionsDataSet.ttbltransactionsRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Transactions() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }
	  

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  