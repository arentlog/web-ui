//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.GL.Data.Adapters
{
   using com.infor.sxproxy.glproxy;
   using com.infor.sxproxy.glproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsgldisplayjournal;
   using Models.Pdsglopenjournal;
   using Models.Pdsgletioffsetaccts;
   using Models.Pdsmessaging;
   using Models.Pdsglembsearchupdate;
   using Models.Pdsgletgrp;
   using Models.Pdsgletresults;
   using Models.Pdsgletentry;
   using Models.Pdsgletbrowse;
   using Models.Pdsgletfinupdrept;
   using Models.Pdsprintersettings;
   using Models.Pdsgleta;
   using Models.Pdsgletainitiatepd;
   using Models.Pdsgletaparam;
   using Models.Pdsglupdate;
   using Models.Complex;

   public partial class AsglentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private GLProxyAppObject proxyAppObject;
      
      public AsglentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new GLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsglentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public void GLCloseJournal(int iJrnlno)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLCloseJournal - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLCloseJournal(ref pdsContext,  iJrnlno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLCloseJournal - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Gldisplayjournalresults GLDisplayJournal(Gldisplayjournalcriteria gldisplayjournalcriteria)
      {   
         var result = new Gldisplayjournalresults();
         
         var pdsgldisplayjournal = new pdsgldisplayjournalDataSet();
            
         DataRow ttblgldisplayjournalcriteriaCriteria = pdsgldisplayjournal.ttblgldisplayjournalcriteria.NewttblgldisplayjournalcriteriaRow();
         Gldisplayjournalcriteria.UpdateRowFromGldisplayjournalcriteria(ref ttblgldisplayjournalcriteriaCriteria, gldisplayjournalcriteria);
         pdsgldisplayjournal.ttblgldisplayjournalcriteria.AddttblgldisplayjournalcriteriaRow((pdsgldisplayjournalDataSet.ttblgldisplayjournalcriteriaRow)ttblgldisplayjournalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLDisplayJournal - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLDisplayJournal(ref pdsContext, ref pdsgldisplayjournal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLDisplayJournal - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgldisplayjournal); 
    
         if (pdsgldisplayjournal.ttblgldisplayjournalresults.Count > 0) 
         { 
             result = Gldisplayjournalresults.BuildGldisplayjournalresultsFromRow(pdsgldisplayjournal.ttblgldisplayjournalresults[0]);
         } 
              
          
         return result;
          
      }

      public AsglentryGLOpenJournalResponseAPI GLOpenJournal(Glopenjournalcriteria glopenjournalcriteria)
      {   
         var result = new AsglentryGLOpenJournalResponseAPI();
         
         var pdsglopenjournal = new pdsglopenjournalDataSet();
            
         DataRow ttblglopenjournalcriteriaCriteria = pdsglopenjournal.ttblglopenjournalcriteria.NewttblglopenjournalcriteriaRow();
         Glopenjournalcriteria.UpdateRowFromGlopenjournalcriteria(ref ttblglopenjournalcriteriaCriteria, glopenjournalcriteria);
         pdsglopenjournal.ttblglopenjournalcriteria.AddttblglopenjournalcriteriaRow((pdsglopenjournalDataSet.ttblglopenjournalcriteriaRow)ttblglopenjournalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLOpenJournal - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLOpenJournal(ref pdsContext, ref pdsglopenjournal, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("GLOpenJournal - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglopenjournal); 
    
         if (pdsglopenjournal.ttblglopenjournalresults.Count > 0)
         {
            result.glopenjournalresults = Glopenjournalresults.BuildGlopenjournalresultsFromRow(pdsglopenjournal.ttblglopenjournalresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsglentryGLReOpenJournalResponseAPI GLReOpenJournal(Glopenjournalcriteria glopenjournalcriteria)
      {   
         var result = new AsglentryGLReOpenJournalResponseAPI();
         
         var pdsglopenjournal = new pdsglopenjournalDataSet();
            
         DataRow ttblglopenjournalcriteriaCriteria = pdsglopenjournal.ttblglopenjournalcriteria.NewttblglopenjournalcriteriaRow();
         Glopenjournalcriteria.UpdateRowFromGlopenjournalcriteria(ref ttblglopenjournalcriteriaCriteria, glopenjournalcriteria);
         pdsglopenjournal.ttblglopenjournalcriteria.AddttblglopenjournalcriteriaRow((pdsglopenjournalDataSet.ttblglopenjournalcriteriaRow)ttblglopenjournalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLReOpenJournal - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLReOpenJournal(ref pdsContext, ref pdsglopenjournal, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("GLReOpenJournal - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglopenjournal); 
    
         if (pdsglopenjournal.ttblglopenjournalresults.Count > 0)
         {
            result.glopenjournalresults = Glopenjournalresults.BuildGlopenjournalresultsFromRow(pdsglopenjournal.ttblglopenjournalresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public AsglentrySetDefaultPeriodsResponseAPI SetDefaultPeriods()
      {   
         var result = new AsglentrySetDefaultPeriodsResponseAPI();
         
         bool lGl13PerFl = false;
         int iGlDefPer = 0;
         int iGlBegPer = 0;
         int iGlEndPer = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("SetDefaultPeriods - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.SetDefaultPeriods(ref pdsContext, out lGl13PerFl, out iGlDefPer, out iGlBegPer, out iGlEndPer, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("SetDefaultPeriods - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.lGl13PerFl = lGl13PerFl;
         result.iGlDefPer = iGlDefPer;
         result.iGlBegPer = iGlBegPer;
         result.iGlEndPer = iGlEndPer;
          
         return result;
          
      }

      public IEnumerable<Messaging> GLETIValidateOffsetAccounts(AsglentryGLETIValidateOffsetAccountsRequestAPI AsglentryGLETIValidateOffsetAccountsRequestAPI)
      {   
         var results = new List<Messaging>();
         
         var pdsgletioffsetaccts = new pdsgletioffsetacctsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletioffsetacctinfoRow = pdsgletioffsetaccts.ttblgletioffsetacctinfo.NewttblgletioffsetacctinfoRow();
         Gletioffsetacctinfo.UpdateRowFromGletioffsetacctinfo(ref ttblgletioffsetacctinfoRow, AsglentryGLETIValidateOffsetAccountsRequestAPI.gletioffsetacctinfo);
         pdsgletioffsetaccts.ttblgletioffsetacctinfo.AddttblgletioffsetacctinfoRow((pdsgletioffsetacctsDataSet.ttblgletioffsetacctinfoRow)ttblgletioffsetacctinfoRow);
          
         foreach (var obj in AsglentryGLETIValidateOffsetAccountsRequestAPI.gletioffsetaccts)
         {
            DataRow ttblgletioffsetacctsRow = pdsgletioffsetaccts.ttblgletioffsetaccts.NewttblgletioffsetacctsRow();
            Gletioffsetaccts.UpdateRowFromGletioffsetaccts(ref ttblgletioffsetacctsRow, obj);
            pdsgletioffsetaccts.ttblgletioffsetaccts.AddttblgletioffsetacctsRow((pdsgletioffsetacctsDataSet.ttblgletioffsetacctsRow)ttblgletioffsetacctsRow);
         }
          
         
         NLogLoggerP.Trace("GLETIValidateOffsetAccounts - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETIValidateOffsetAccounts(ref pdsContext,  pdsgletioffsetaccts, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETIValidateOffsetAccounts - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletioffsetaccts); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public AsglentryGLEMBSearchResponseAPI GLEMBSearch(Glembcriteria glembcriteria)
      {   
         var result = new AsglentryGLEMBSearchResponseAPI();
         
         var pdsglembsearchupdate = new pdsglembsearchupdateDataSet();
            
         DataRow ttblglembcriteriaCriteria = pdsglembsearchupdate.ttblglembcriteria.NewttblglembcriteriaRow();
         Glembcriteria.UpdateRowFromGlembcriteria(ref ttblglembcriteriaCriteria, glembcriteria);
         pdsglembsearchupdate.ttblglembcriteria.AddttblglembcriteriaRow((pdsglembsearchupdateDataSet.ttblglembcriteriaRow)ttblglembcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLEMBSearch - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLEMBSearch(ref pdsContext, ref pdsglembsearchupdate, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLEMBSearch - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglembsearchupdate); 
    
         foreach (DataRow row in pdsglembsearchupdate.ttblglembresults)
         {
            result.glembresults.Add(Glembresults.BuildGlembresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglentryGLEMBUpdateResponseAPI GLEMBUpdate(Glembcriteria glembcriteria)
      {   
         var result = new AsglentryGLEMBUpdateResponseAPI();
         
         var pdsglembsearchupdate = new pdsglembsearchupdateDataSet();
            
         DataRow ttblglembcriteriaCriteria = pdsglembsearchupdate.ttblglembcriteria.NewttblglembcriteriaRow();
         Glembcriteria.UpdateRowFromGlembcriteria(ref ttblglembcriteriaCriteria, glembcriteria);
         pdsglembsearchupdate.ttblglembcriteria.AddttblglembcriteriaRow((pdsglembsearchupdateDataSet.ttblglembcriteriaRow)ttblglembcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLEMBUpdate - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLEMBUpdate(ref pdsContext, ref pdsglembsearchupdate, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLEMBUpdate - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglembsearchupdate); 
    
         foreach (DataRow row in pdsglembsearchupdate.ttblglembresults)
         {
            result.glembresults.Add(Glembresults.BuildGlembresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglentryFetchGrpDetailResponseAPI FetchGrpDetail(Gletgrpcriteria gletgrpcriteria)
      {   
         var result = new AsglentryFetchGrpDetailResponseAPI();
         
         var pdsgletgrp = new pdsgletgrpDataSet();
            
         var pdsgletresults = new pdsgletresultsDataSet();
            
         DataRow ttblgletgrpcriteriaCriteria = pdsgletgrp.ttblgletgrpcriteria.NewttblgletgrpcriteriaRow();
         Gletgrpcriteria.UpdateRowFromGletgrpcriteria(ref ttblgletgrpcriteriaCriteria, gletgrpcriteria);
         pdsgletgrp.ttblgletgrpcriteria.AddttblgletgrpcriteriaRow((pdsgletgrpDataSet.ttblgletgrpcriteriaRow)ttblgletgrpcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchGrpDetail - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.FetchGrpDetail(ref pdsContext,  pdsgletgrp, out pdsgletresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchGrpDetail - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletgrp); 
    
         foreach (DataRow row in pdsgletresults.ttblgletacctresults)
         {
            result.gletacctresults.Add(Gletacctresults.BuildGletacctresultsFromRow(row));
         }     
         if (pdsgletresults.ttblgletamtresults.Count > 0)
         {
            result.gletamtresults = Gletamtresults.BuildGletamtresultsFromRow(pdsgletresults.ttblgletamtresults[0]);
         }
                    
          
         return result;
          
      }

      public string CreateNewGroup()
      {   
          
         string cNewGroup = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("CreateNewGroup - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.CreateNewGroup(ref pdsContext, out cNewGroup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("CreateNewGroup - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return cNewGroup;
      
      }

      public AsglentryEntryGLETUpdResponseAPI EntryGLETUpd(Gletentrycriteria gletentrycriteria)
      {   
         var result = new AsglentryEntryGLETUpdResponseAPI();
         
         var pdsgletentry = new pdsgletentryDataSet();
            
         var pdsgletresults = new pdsgletresultsDataSet();
            
         DataRow ttblgletentrycriteriaCriteria = pdsgletentry.ttblgletentrycriteria.NewttblgletentrycriteriaRow();
         Gletentrycriteria.UpdateRowFromGletentrycriteria(ref ttblgletentrycriteriaCriteria, gletentrycriteria);
         pdsgletentry.ttblgletentrycriteria.AddttblgletentrycriteriaRow((pdsgletentryDataSet.ttblgletentrycriteriaRow)ttblgletentrycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMessage = string.Empty;
   
         
         NLogLoggerP.Trace("EntryGLETUpd - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.EntryGLETUpd(ref pdsContext,  pdsgletentry, out pdsgletresults, out cErrorMessage, out cWarningMessage);
               }
            });
         NLogLoggerP.Info("EntryGLETUpd - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletentry); 
    
         if (pdsgletresults.ttblgletacctresults.Count > 0)
         {
            result.gletacctresults = Gletacctresults.BuildGletacctresultsFromRow(pdsgletresults.ttblgletacctresults[0]);
         }
                    
         if (pdsgletresults.ttblgletamtresults.Count > 0)
         {
            result.gletamtresults = Gletamtresults.BuildGletamtresultsFromRow(pdsgletresults.ttblgletamtresults[0]);
         }
                    
         result.cWarningMessage = cWarningMessage;
          
         return result;
          
      }

      public bool GLETHistVisible(string cGlno)
      {   
          
         bool lvisible = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLETHistVisible - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETHistVisible(ref pdsContext,  cGlno, out lvisible, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETHistVisible - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         return lvisible;
      
      }

      public Gletamtresults TransbrowseGLET(Gletbrowsecriteria gletbrowsecriteria)
      {   
         var result = new Gletamtresults();
         
         var pdsgletbrowse = new pdsgletbrowseDataSet();
            
         var pdsgletresults = new pdsgletresultsDataSet();
            
         DataRow ttblgletbrowsecriteriaCriteria = pdsgletbrowse.ttblgletbrowsecriteria.NewttblgletbrowsecriteriaRow();
         Gletbrowsecriteria.UpdateRowFromGletbrowsecriteria(ref ttblgletbrowsecriteriaCriteria, gletbrowsecriteria);
         pdsgletbrowse.ttblgletbrowsecriteria.AddttblgletbrowsecriteriaRow((pdsgletbrowseDataSet.ttblgletbrowsecriteriaRow)ttblgletbrowsecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("TransbrowseGLET - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.TransbrowseGLET(ref pdsContext,  pdsgletbrowse, out pdsgletresults, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("TransbrowseGLET - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletbrowse); 
    
         if (pdsgletresults.ttblgletamtresults.Count > 0) 
         { 
             result = Gletamtresults.BuildGletamtresultsFromRow(pdsgletresults.ttblgletamtresults[0]);
         } 
              
          
         return result;
          
      }

      public void FinalUpdateGLET(string cGroupName, int iJrnlno)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FinalUpdateGLET - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.FinalUpdateGLET(ref pdsContext,  cGroupName,  iJrnlno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FinalUpdateGLET - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public Gletfinupdrept GLETFinUpdReptInit(string cGroupName)
      {   
         var result = new Gletfinupdrept();
         
         var pdsgletfinupdrept = new pdsgletfinupdreptDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLETFinUpdReptInit - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETFinUpdReptInit(ref pdsContext,  cGroupName, out pdsgletfinupdrept, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETFinUpdReptInit - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletfinupdrept); 
    
         if (pdsgletfinupdrept.ttblgletfinupdrept.Count > 0) 
         { 
             result = Gletfinupdrept.BuildGletfinupdreptFromRow(pdsgletfinupdrept.ttblgletfinupdrept[0]);
         } 
              
          
         return result;
          
      }

      public void GLETFinUpdReptRun(AsglentryGLETFinUpdReptRunRequestAPI AsglentryGLETFinUpdReptRunRequestAPI)
      {   
         
         var pdsgletfinupdrept = new pdsgletfinupdreptDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletfinupdreptRow = pdsgletfinupdrept.ttblgletfinupdrept.NewttblgletfinupdreptRow();
         Gletfinupdrept.UpdateRowFromGletfinupdrept(ref ttblgletfinupdreptRow, AsglentryGLETFinUpdReptRunRequestAPI.gletfinupdrept);
         pdsgletfinupdrept.ttblgletfinupdrept.AddttblgletfinupdreptRow((pdsgletfinupdreptDataSet.ttblgletfinupdreptRow)ttblgletfinupdreptRow);
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsglentryGLETFinUpdReptRunRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("GLETFinUpdReptRun - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETFinUpdReptRun(ref pdsContext,  pdsgletfinupdrept,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETFinUpdReptRun - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletfinupdrept);
      }

      public AsglentryGLEMBFieldChangeResponseAPI GLEMBFieldChange()
      {   
         var result = new AsglentryGLEMBFieldChangeResponseAPI();
         
         string cFieldchange = string.Empty;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLEMBFieldChange - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLEMBFieldChange(ref pdsContext, out cFieldchange, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLEMBFieldChange - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.cFieldchange = cFieldchange;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglentryGLEMBValueResponseAPI GLEMBValue(Glembcriteria glembcriteria)
      {   
         var result = new AsglentryGLEMBValueResponseAPI();
         
         var pdsglembsearchupdate = new pdsglembsearchupdateDataSet();
            
         DataRow ttblglembcriteriaCriteria = pdsglembsearchupdate.ttblglembcriteria.NewttblglembcriteriaRow();
         Glembcriteria.UpdateRowFromGlembcriteria(ref ttblglembcriteriaCriteria, glembcriteria);
         pdsglembsearchupdate.ttblglembcriteria.AddttblglembcriteriaRow((pdsglembsearchupdateDataSet.ttblglembcriteriaRow)ttblglembcriteriaCriteria);
            
         decimal dOldValue = 0;
         decimal dNewValue = 0;
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLEMBValue - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLEMBValue(ref pdsContext,  pdsglembsearchupdate, out dOldValue, out dNewValue, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLEMBValue - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglembsearchupdate); 
    
         result.dOldValue = dOldValue;
         result.dNewValue = dNewValue;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglentryGLETAInitiateARResponseAPI GLETAInitiateAR(AsglentryGLETAInitiateARRequestAPI AsglentryGLETAInitiateARRequestAPI)
      {   
         var result = new AsglentryGLETAInitiateARResponseAPI();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletacriteriaRow = pdsgleta.ttblgletacriteria.NewttblgletacriteriaRow();
         Gletacriteria.UpdateRowFromGletacriteria(ref ttblgletacriteriaRow, AsglentryGLETAInitiateARRequestAPI.gletacriteria);
         pdsgleta.ttblgletacriteria.AddttblgletacriteriaRow((pdsgletaDataSet.ttblgletacriteriaRow)ttblgletacriteriaRow);
          
         var  iJrnlno = AsglentryGLETAInitiateARRequestAPI.iJrnlno;
            
         
         NLogLoggerP.Trace("GLETAInitiateAR - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETAInitiateAR(ref pdsContext,  iJrnlno, ref pdsgleta, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETAInitiateAR - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
         foreach (DataRow row in pdsgleta.ttblgleta)
         {
            result.gleta.Add(Gleta.BuildGletaFromRow(row));
         }     
         if (pdsgleta.ttblgletaheader.Count > 0)
         {
            result.gletaheader = Gletaheader.BuildGletaheaderFromRow(pdsgleta.ttblgletaheader[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglentryGLETAInitiatePDResponseAPI GLETAInitiatePD(Gletainitiatepd gletainitiatepd)
      {   
         var result = new AsglentryGLETAInitiatePDResponseAPI();
         
         var pdsgletainitiatepd = new pdsgletainitiatepdDataSet();
            
         var pdsgleta = new pdsgletaDataSet();
            
         DataRow ttblgletainitiatepdCriteria = pdsgletainitiatepd.ttblgletainitiatepd.NewttblgletainitiatepdRow();
         Gletainitiatepd.UpdateRowFromGletainitiatepd(ref ttblgletainitiatepdCriteria, gletainitiatepd);
         pdsgletainitiatepd.ttblgletainitiatepd.AddttblgletainitiatepdRow((pdsgletainitiatepdDataSet.ttblgletainitiatepdRow)ttblgletainitiatepdCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLETAInitiatePD - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETAInitiatePD(ref pdsContext,  pdsgletainitiatepd, out pdsgleta, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETAInitiatePD - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgletainitiatepd); 
    
         foreach (DataRow row in pdsgleta.ttblgleta)
         {
            result.gleta.Add(Gleta.BuildGletaFromRow(row));
         }     
         if (pdsgleta.ttblgletacriteria.Count > 0)
         {
            result.gletacriteria = Gletacriteria.BuildGletacriteriaFromRow(pdsgleta.ttblgletacriteria[0]);
         }
                    
         if (pdsgleta.ttblgletaheader.Count > 0)
         {
            result.gletaheader = Gletaheader.BuildGletaheaderFromRow(pdsgleta.ttblgletaheader[0]);
         }
                    
          
         return result;
          
      }

      public AsglentryGLETAFieldLeaveResponseAPI GLETAFieldLeave(AsglentryGLETAFieldLeaveRequestAPI AsglentryGLETAFieldLeaveRequestAPI)
      {   
         var result = new AsglentryGLETAFieldLeaveResponseAPI();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
         Gleta.UpdateRowFromGleta(ref ttblgletaRow, AsglentryGLETAFieldLeaveRequestAPI.gleta);
         pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AsglentryGLETAFieldLeaveRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         var  cFieldName = AsglentryGLETAFieldLeaveRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLETAFieldLeave - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETAFieldLeave(ref pdsContext,  cFieldName, ref pdsgleta, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETAFieldLeave - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
         if (pdsgleta.ttblgleta.Count > 0)
         {
            result.gleta = Gleta.BuildGletaFromRow(pdsgleta.ttblgleta[0]);
         }
                    
         if (pdsgleta.ttblgletaheader.Count > 0)
         {
            result.gletaheader = Gletaheader.BuildGletaheaderFromRow(pdsgleta.ttblgletaheader[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglentryGLETASetAmountToProofResponseAPI GLETASetAmountToProof(AsglentryGLETASetAmountToProofRequestAPI AsglentryGLETASetAmountToProofRequestAPI)
      {   
         var result = new AsglentryGLETASetAmountToProofResponseAPI();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
         Gleta.UpdateRowFromGleta(ref ttblgletaRow, AsglentryGLETASetAmountToProofRequestAPI.gleta);
         pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AsglentryGLETASetAmountToProofRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         var  cFieldName = AsglentryGLETASetAmountToProofRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLETASetAmountToProof - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETASetAmountToProof(ref pdsContext,  cFieldName, ref pdsgleta, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETASetAmountToProof - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
         if (pdsgleta.ttblgleta.Count > 0)
         {
            result.gleta = Gleta.BuildGletaFromRow(pdsgleta.ttblgleta[0]);
         }
                    
         if (pdsgleta.ttblgletaheader.Count > 0)
         {
            result.gletaheader = Gletaheader.BuildGletaheaderFromRow(pdsgleta.ttblgletaheader[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglentryGLETAConvertPercentToAmountResponseAPI GLETAConvertPercentToAmount(AsglentryGLETAConvertPercentToAmountRequestAPI AsglentryGLETAConvertPercentToAmountRequestAPI)
      {   
         var result = new AsglentryGLETAConvertPercentToAmountResponseAPI();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
         Gleta.UpdateRowFromGleta(ref ttblgletaRow, AsglentryGLETAConvertPercentToAmountRequestAPI.gleta);
         pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AsglentryGLETAConvertPercentToAmountRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         var  cFieldName = AsglentryGLETAConvertPercentToAmountRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLETAConvertPercentToAmount - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETAConvertPercentToAmount(ref pdsContext,  cFieldName, ref pdsgleta, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETAConvertPercentToAmount - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
         if (pdsgleta.ttblgleta.Count > 0)
         {
            result.gleta = Gleta.BuildGletaFromRow(pdsgleta.ttblgleta[0]);
         }
                    
         if (pdsgleta.ttblgletaheader.Count > 0)
         {
            result.gletaheader = Gletaheader.BuildGletaheaderFromRow(pdsgleta.ttblgletaheader[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Glupdate> GLETAGetUpdateData(AsglentryGLETAGetUpdateDataRequestAPI AsglentryGLETAGetUpdateDataRequestAPI)
      {   
         var results = new List<Glupdate>();
         
         var pdsgleta = new pdsgletaDataSet();
            
         var pdsgletaparam = new pdsgletaparamDataSet();
            
         var pdsglupdate = new pdsglupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsglentryGLETAGetUpdateDataRequestAPI.gleta)
         {
            DataRow ttblgletaRow = pdsgleta.ttblgleta.NewttblgletaRow();
            Gleta.UpdateRowFromGleta(ref ttblgletaRow, obj);
            pdsgleta.ttblgleta.AddttblgletaRow((pdsgletaDataSet.ttblgletaRow)ttblgletaRow);
         }
          
         DataRow ttblgletaheaderRow = pdsgleta.ttblgletaheader.NewttblgletaheaderRow();
         Gletaheader.UpdateRowFromGletaheader(ref ttblgletaheaderRow, AsglentryGLETAGetUpdateDataRequestAPI.gletaheader);
         pdsgleta.ttblgletaheader.AddttblgletaheaderRow((pdsgletaDataSet.ttblgletaheaderRow)ttblgletaheaderRow);
          
         DataRow ttblgletaparamRow = pdsgletaparam.ttblgletaparam.NewttblgletaparamRow();
         Gletaparam.UpdateRowFromGletaparam(ref ttblgletaparamRow, AsglentryGLETAGetUpdateDataRequestAPI.gletaparam);
         pdsgletaparam.ttblgletaparam.AddttblgletaparamRow((pdsgletaparamDataSet.ttblgletaparamRow)ttblgletaparamRow);
          
         var  iJrnlno = AsglentryGLETAGetUpdateDataRequestAPI.iJrnlno;
            
         
         NLogLoggerP.Trace("GLETAGetUpdateData - Asglentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglentryproxy = this.proxyAppObject.CreatePO_asglentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglentryproxy.GLETAGetUpdateData(ref pdsContext,  iJrnlno,  pdsgleta,  pdsgletaparam, out pdsglupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLETAGetUpdateData - Asglentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgleta); 
    
            foreach (DataRow row in pdsglupdate.ttblglupdate)
            {
                results.Add(Glupdate.BuildGlupdateFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  