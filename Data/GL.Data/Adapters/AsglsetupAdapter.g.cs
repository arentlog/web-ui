//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.GL.Data.Adapters
{
   using com.infor.sxproxy.glproxy;
   using com.infor.sxproxy.glproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsglaccountcreate;
   using Models.Pdsglaccountcopy;
   using Models.Pdsgldivisioncreate;
   using Models.Pdsmessaging;
   using Models.Pdsglbuildacctno;
   using Models.Pdsglsbreqinit;
   using Models.Pdsglsbreqcalc;
   using Models.Pdsglsbreqrecalc;
   using Models.Pdsglsbdivcreate;
   using Models.Pdsglsbsavechanges;
   using Models.Pdsglsbcreate;
   using Models.Pdsglsbcopy;
   using Models.Pdsglsdtrans;
   using Models.Pdsglsdloadtt;
   using Models.Pdsglsdtransloadtt;
   using Models.Pdsglsfadddesign;
   using Models.Pdsglsfdesign;
   using Models.Pdsglsfdeletedesign;
   using Models.Pdsglsfdelete;
   using Models.Pdsglsfdesigndesc;
   using Models.Pdsglsfduplicate;
   using Models.Pdsglsfgetdesign;
   using Models.Pdsglsfinsert;
   using Models.Pdsglsfmove;
   using Models.Pdsglsfrenumberdesign;
   using Models.Pdsglsfsetup;
   using Models.Pdsglsfsetupa;
   using Models.Pdsglsfsetupc;
   using Models.Pdsglsfsetupf;
   using Models.Pdsglsfsetuph;
   using Models.Pdsglsfsetupm;
   using Models.Pdsglsfsetupp;
   using Models.Pdsglsfsetups;
   using Models.Pdsglsfsetupslist;
   using Models.Pdsglsfsetupt;
   using Models.Pdsglsfsetupu;
   using Models.Pdsglsfsetupz;
   using Models.Pdsglsa;
   using Models.Pdsglvalidateparse;
   using Models.Complex;

   public partial class AsglsetupAdapter : AdapterBase<pdsContextDataSet>
   {
      private GLProxyAppObject proxyAppObject;
      
      public AsglsetupAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new GLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsglsetupAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Glaccountcreate GLAccountCreate(Glaccountcreate glaccountcreate)
      {   
         var result = new Glaccountcreate();
         
         var pdsglaccountcreate = new pdsglaccountcreateDataSet();
            
         DataRow ttblglaccountcreateCriteria = pdsglaccountcreate.ttblglaccountcreate.NewttblglaccountcreateRow();
         Glaccountcreate.UpdateRowFromGlaccountcreate(ref ttblglaccountcreateCriteria, glaccountcreate);
         pdsglaccountcreate.ttblglaccountcreate.AddttblglaccountcreateRow((pdsglaccountcreateDataSet.ttblglaccountcreateRow)ttblglaccountcreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLAccountCreate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLAccountCreate(ref pdsContext, ref pdsglaccountcreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLAccountCreate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglaccountcreate); 
    
         if (pdsglaccountcreate.ttblglaccountcreate.Count > 0) 
         { 
             result = Glaccountcreate.BuildGlaccountcreateFromRow(pdsglaccountcreate.ttblglaccountcreate[0]);
         } 
              
          
         return result;
          
      }

      public Glaccountcopy GLAccountCopy(Glaccountcopy glaccountcopy)
      {   
         var result = new Glaccountcopy();
         
         var pdsglaccountcopy = new pdsglaccountcopyDataSet();
            
         DataRow ttblglaccountcopyCriteria = pdsglaccountcopy.ttblglaccountcopy.NewttblglaccountcopyRow();
         Glaccountcopy.UpdateRowFromGlaccountcopy(ref ttblglaccountcopyCriteria, glaccountcopy);
         pdsglaccountcopy.ttblglaccountcopy.AddttblglaccountcopyRow((pdsglaccountcopyDataSet.ttblglaccountcopyRow)ttblglaccountcopyCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLAccountCopy - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLAccountCopy(ref pdsContext, ref pdsglaccountcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLAccountCopy - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglaccountcopy); 
    
         if (pdsglaccountcopy.ttblglaccountcopy.Count > 0) 
         { 
             result = Glaccountcopy.BuildGlaccountcopyFromRow(pdsglaccountcopy.ttblglaccountcopy[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Messaging> GLDivisionCreate(Gldivisioncreate gldivisioncreate)
      {   
         var results = new List<Messaging>();
         
         var pdsgldivisioncreate = new pdsgldivisioncreateDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblgldivisioncreateCriteria = pdsgldivisioncreate.ttblgldivisioncreate.NewttblgldivisioncreateRow();
         Gldivisioncreate.UpdateRowFromGldivisioncreate(ref ttblgldivisioncreateCriteria, gldivisioncreate);
         pdsgldivisioncreate.ttblgldivisioncreate.AddttblgldivisioncreateRow((pdsgldivisioncreateDataSet.ttblgldivisioncreateRow)ttblgldivisioncreateCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLDivisionCreate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLDivisionCreate(ref pdsContext,  pdsgldivisioncreate, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLDivisionCreate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgldivisioncreate); 
    
            foreach (DataRow row in pdsmessaging.ttblmessaging)
            {
                results.Add(Messaging.BuildMessagingFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Glbuildacctno> GLBuildAcctNo(IEnumerable<Glbuildacctno> glbuildacctno)
      {   
         var results = new List<Glbuildacctno>();
         
         var pdsglbuildacctno = new pdsglbuildacctnoDataSet();
            
         foreach (var obj in glbuildacctno)
         {
             DataRow row = pdsglbuildacctno.ttblglbuildacctno.NewttblglbuildacctnoRow();
             Glbuildacctno.UpdateRowFromGlbuildacctno(ref row, obj);
             pdsglbuildacctno.ttblglbuildacctno.AddttblglbuildacctnoRow((pdsglbuildacctnoDataSet.ttblglbuildacctnoRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLBuildAcctNo - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLBuildAcctNo(ref pdsContext, ref pdsglbuildacctno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLBuildAcctNo - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglbuildacctno); 
    
            foreach (DataRow row in pdsglbuildacctno.ttblglbuildacctno)
            {
                results.Add(Glbuildacctno.BuildGlbuildacctnoFromRow(row));
            }
            return results;
        
      }

      public Glsbreqinitresults GLSBReqInit(Glsbreqinitcriteria glsbreqinitcriteria)
      {   
         var result = new Glsbreqinitresults();
         
         var pdsglsbreqinit = new pdsglsbreqinitDataSet();
            
         DataRow ttblglsbreqinitcriteriaCriteria = pdsglsbreqinit.ttblglsbreqinitcriteria.NewttblglsbreqinitcriteriaRow();
         Glsbreqinitcriteria.UpdateRowFromGlsbreqinitcriteria(ref ttblglsbreqinitcriteriaCriteria, glsbreqinitcriteria);
         pdsglsbreqinit.ttblglsbreqinitcriteria.AddttblglsbreqinitcriteriaRow((pdsglsbreqinitDataSet.ttblglsbreqinitcriteriaRow)ttblglsbreqinitcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBReqInit - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBReqInit(ref pdsContext, ref pdsglsbreqinit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBReqInit - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbreqinit); 
    
         if (pdsglsbreqinit.ttblglsbreqinitresults.Count > 0) 
         { 
             result = Glsbreqinitresults.BuildGlsbreqinitresultsFromRow(pdsglsbreqinit.ttblglsbreqinitresults[0]);
         } 
              
          
         return result;
          
      }

      public Glsbreqcalcresults GLSBReqCalc(Glsbreqcalccriteria glsbreqcalccriteria)
      {   
         var result = new Glsbreqcalcresults();
         
         var pdsglsbreqcalc = new pdsglsbreqcalcDataSet();
            
         DataRow ttblglsbreqcalccriteriaCriteria = pdsglsbreqcalc.ttblglsbreqcalccriteria.NewttblglsbreqcalccriteriaRow();
         Glsbreqcalccriteria.UpdateRowFromGlsbreqcalccriteria(ref ttblglsbreqcalccriteriaCriteria, glsbreqcalccriteria);
         pdsglsbreqcalc.ttblglsbreqcalccriteria.AddttblglsbreqcalccriteriaRow((pdsglsbreqcalcDataSet.ttblglsbreqcalccriteriaRow)ttblglsbreqcalccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBReqCalc - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBReqCalc(ref pdsContext, ref pdsglsbreqcalc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBReqCalc - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbreqcalc); 
    
         if (pdsglsbreqcalc.ttblglsbreqcalcresults.Count > 0) 
         { 
             result = Glsbreqcalcresults.BuildGlsbreqcalcresultsFromRow(pdsglsbreqcalc.ttblglsbreqcalcresults[0]);
         } 
              
          
         return result;
          
      }

      public Glsbreqrecalcresults GLSBReqRecalc(Glsbreqrecalccriteria glsbreqrecalccriteria)
      {   
         var result = new Glsbreqrecalcresults();
         
         var pdsglsbreqrecalc = new pdsglsbreqrecalcDataSet();
            
         DataRow ttblglsbreqrecalccriteriaCriteria = pdsglsbreqrecalc.ttblglsbreqrecalccriteria.NewttblglsbreqrecalccriteriaRow();
         Glsbreqrecalccriteria.UpdateRowFromGlsbreqrecalccriteria(ref ttblglsbreqrecalccriteriaCriteria, glsbreqrecalccriteria);
         pdsglsbreqrecalc.ttblglsbreqrecalccriteria.AddttblglsbreqrecalccriteriaRow((pdsglsbreqrecalcDataSet.ttblglsbreqrecalccriteriaRow)ttblglsbreqrecalccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBReqRecalc - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBReqRecalc(ref pdsContext, ref pdsglsbreqrecalc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBReqRecalc - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbreqrecalc); 
    
         if (pdsglsbreqrecalc.ttblglsbreqrecalcresults.Count > 0) 
         { 
             result = Glsbreqrecalcresults.BuildGlsbreqrecalcresultsFromRow(pdsglsbreqrecalc.ttblglsbreqrecalcresults[0]);
         } 
              
          
         return result;
          
      }

      public string GLSBDivCreate(Glsbdivcreate glsbdivcreate)
      {   
          
         var pdsglsbdivcreate = new pdsglsbdivcreateDataSet();
            
         DataRow ttblglsbdivcreateCriteria = pdsglsbdivcreate.ttblglsbdivcreate.NewttblglsbdivcreateRow();
         Glsbdivcreate.UpdateRowFromGlsbdivcreate(ref ttblglsbdivcreateCriteria, glsbdivcreate);
         pdsglsbdivcreate.ttblglsbdivcreate.AddttblglsbdivcreateRow((pdsglsbdivcreateDataSet.ttblglsbdivcreateRow)ttblglsbdivcreateCriteria);
            
         string cErrorMessage = string.Empty;
         string cMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBDivCreate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBDivCreate(ref pdsContext,  pdsglsbdivcreate, out cErrorMessage, out cMessage);
               }
            });
         NLogLoggerP.Info("GLSBDivCreate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbdivcreate); 
    
         return cMessage;
      
      }

      public void GLSBSaveChanges(Glsbsavechanges glsbsavechanges)
      {   
         
         var pdsglsbsavechanges = new pdsglsbsavechangesDataSet();
            
         DataRow ttblglsbsavechangesCriteria = pdsglsbsavechanges.ttblglsbsavechanges.NewttblglsbsavechangesRow();
         Glsbsavechanges.UpdateRowFromGlsbsavechanges(ref ttblglsbsavechangesCriteria, glsbsavechanges);
         pdsglsbsavechanges.ttblglsbsavechanges.AddttblglsbsavechangesRow((pdsglsbsavechangesDataSet.ttblglsbsavechangesRow)ttblglsbsavechangesCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBSaveChanges - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBSaveChanges(ref pdsContext,  pdsglsbsavechanges, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBSaveChanges - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbsavechanges);
      }

      public Glsbcreateresults GLSBCreate(Glsbcreatecriteria glsbcreatecriteria)
      {   
         var result = new Glsbcreateresults();
         
         var pdsglsbcreate = new pdsglsbcreateDataSet();
            
         DataRow ttblglsbcreatecriteriaCriteria = pdsglsbcreate.ttblglsbcreatecriteria.NewttblglsbcreatecriteriaRow();
         Glsbcreatecriteria.UpdateRowFromGlsbcreatecriteria(ref ttblglsbcreatecriteriaCriteria, glsbcreatecriteria);
         pdsglsbcreate.ttblglsbcreatecriteria.AddttblglsbcreatecriteriaRow((pdsglsbcreateDataSet.ttblglsbcreatecriteriaRow)ttblglsbcreatecriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBCreate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBCreate(ref pdsContext, ref pdsglsbcreate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBCreate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbcreate); 
    
         if (pdsglsbcreate.ttblglsbcreateresults.Count > 0) 
         { 
             result = Glsbcreateresults.BuildGlsbcreateresultsFromRow(pdsglsbcreate.ttblglsbcreateresults[0]);
         } 
              
          
         return result;
          
      }

      public Glsbcopyresults GLSBCopy(Glsbcopycriteria glsbcopycriteria)
      {   
         var result = new Glsbcopyresults();
         
         var pdsglsbcopy = new pdsglsbcopyDataSet();
            
         DataRow ttblglsbcopycriteriaCriteria = pdsglsbcopy.ttblglsbcopycriteria.NewttblglsbcopycriteriaRow();
         Glsbcopycriteria.UpdateRowFromGlsbcopycriteria(ref ttblglsbcopycriteriaCriteria, glsbcopycriteria);
         pdsglsbcopy.ttblglsbcopycriteria.AddttblglsbcopycriteriaRow((pdsglsbcopyDataSet.ttblglsbcopycriteriaRow)ttblglsbcopycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSBCopy - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBCopy(ref pdsContext, ref pdsglsbcopy, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBCopy - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbcopy); 
    
         if (pdsglsbcopy.ttblglsbcopyresults.Count > 0) 
         { 
             result = Glsbcopyresults.BuildGlsbcopyresultsFromRow(pdsglsbcopy.ttblglsbcopyresults[0]);
         } 
              
          
         return result;
          
      }

      public void GLSBDelete(AsglsetupGLSBDeleteRequestAPI AsglsetupGLSBDeleteRequestAPI)
      {   
         
         var pdsglsbdivcreate = new pdsglsbdivcreateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsbdivcreateRow = pdsglsbdivcreate.ttblglsbdivcreate.NewttblglsbdivcreateRow();
         Glsbdivcreate.UpdateRowFromGlsbdivcreate(ref ttblglsbdivcreateRow, AsglsetupGLSBDeleteRequestAPI.glsbdivcreate);
         pdsglsbdivcreate.ttblglsbdivcreate.AddttblglsbdivcreateRow((pdsglsbdivcreateDataSet.ttblglsbdivcreateRow)ttblglsbdivcreateRow);
          
         var  lConfirm = AsglsetupGLSBDeleteRequestAPI.lConfirm;
            
         
         NLogLoggerP.Trace("GLSBDelete - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSBDelete(ref pdsContext,  pdsglsbdivcreate,  lConfirm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSBDelete - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsbdivcreate);
      }

      public Glsdtrans GLSDCopy(AsglsetupGLSDCopyRequestAPI AsglsetupGLSDCopyRequestAPI)
      {   
         var result = new Glsdtrans();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsdtransRow = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransRow, AsglsetupGLSDCopyRequestAPI.glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransRow);
          
         var  iNewSetNo = AsglsetupGLSDCopyRequestAPI.iNewSetNo;
            
         
         NLogLoggerP.Trace("GLSDCopy - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDCopy(ref pdsContext,  iNewSetNo, ref pdsglsdtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDCopy - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0) 
         { 
             result = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         } 
              
          
         return result;
          
      }

      public AsglsetupGLSDCreateResponseAPI GLSDCreate(Glsdloadttcriteria glsdloadttcriteria)
      {   
         var result = new AsglsetupGLSDCreateResponseAPI();
         
         var pdsglsdloadtt = new pdsglsdloadttDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblglsdloadttcriteriaCriteria = pdsglsdloadtt.ttblglsdloadttcriteria.NewttblglsdloadttcriteriaRow();
         Glsdloadttcriteria.UpdateRowFromGlsdloadttcriteria(ref ttblglsdloadttcriteriaCriteria, glsdloadttcriteria);
         pdsglsdloadtt.ttblglsdloadttcriteria.AddttblglsdloadttcriteriaRow((pdsglsdloadttDataSet.ttblglsdloadttcriteriaRow)ttblglsdloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDCreate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDCreate(ref pdsContext, ref pdsglsdloadtt, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDCreate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdloadtt); 
    
         if (pdsglsdloadtt.ttblglsdloadttresults.Count > 0)
         {
            result.glsdloadttresults = Glsdloadttresults.BuildGlsdloadttresultsFromRow(pdsglsdloadtt.ttblglsdloadttresults[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Glsdtrans GLSDLeaveField(AsglsetupGLSDLeaveFieldRequestAPI AsglsetupGLSDLeaveFieldRequestAPI)
      {   
         var result = new Glsdtrans();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsdtransRow = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransRow, AsglsetupGLSDLeaveFieldRequestAPI.glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransRow);
          
         var  cFieldName = AsglsetupGLSDLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLSDLeaveField - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDLeaveField(ref pdsContext,  cFieldName, ref pdsglsdtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDLeaveField - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0) 
         { 
             result = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         } 
              
          
         return result;
          
      }

      public AsglsetupGLSDLoadTTResponseAPI GLSDLoadTT(Glsdloadttcriteria glsdloadttcriteria)
      {   
         var result = new AsglsetupGLSDLoadTTResponseAPI();
         
         var pdsglsdloadtt = new pdsglsdloadttDataSet();
            
         DataRow ttblglsdloadttcriteriaCriteria = pdsglsdloadtt.ttblglsdloadttcriteria.NewttblglsdloadttcriteriaRow();
         Glsdloadttcriteria.UpdateRowFromGlsdloadttcriteria(ref ttblglsdloadttcriteriaCriteria, glsdloadttcriteria);
         pdsglsdloadtt.ttblglsdloadttcriteria.AddttblglsdloadttcriteriaRow((pdsglsdloadttDataSet.ttblglsdloadttcriteriaRow)ttblglsdloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLSDLoadTT - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDLoadTT(ref pdsContext, ref pdsglsdloadtt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLSDLoadTT - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdloadtt); 
    
         foreach (DataRow row in pdsglsdloadtt.ttblglsdloadttresults)
         {
            result.glsdloadttresults.Add(Glsdloadttresults.BuildGlsdloadttresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglsetupGLSDSaveResponseAPI GLSDSave(Glsdtrans glsdtrans)
      {   
         var result = new AsglsetupGLSDSaveResponseAPI();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblglsdtransCriteria = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransCriteria, glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDSave - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDSave(ref pdsContext, ref pdsglsdtrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDSave - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0)
         {
            result.glsdtrans = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSDTransAddResponseAPI GLSDTransAdd(Glsdtrans glsdtrans)
      {   
         var result = new AsglsetupGLSDTransAddResponseAPI();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblglsdtransCriteria = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransCriteria, glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDTransAdd - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransAdd(ref pdsContext, ref pdsglsdtrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransAdd - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0)
         {
            result.glsdtrans = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Glsdtrans GLSDTransAddLeaveField(AsglsetupGLSDTransAddLeaveFieldRequestAPI AsglsetupGLSDTransAddLeaveFieldRequestAPI)
      {   
         var result = new Glsdtrans();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsdtransRow = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransRow, AsglsetupGLSDTransAddLeaveFieldRequestAPI.glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransRow);
          
         var  cFieldName = AsglsetupGLSDTransAddLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLSDTransAddLeaveField - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransAddLeaveField(ref pdsContext,  cFieldName, ref pdsglsdtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransAddLeaveField - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0) 
         { 
             result = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Glsdtrans> GLSDTransCancel(IEnumerable<Glsdtrans> glsdtrans)
      {   
         var results = new List<Glsdtrans>();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         foreach (var obj in glsdtrans)
         {
             DataRow row = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
             Glsdtrans.UpdateRowFromGlsdtrans(ref row, obj);
             pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDTransCancel - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransCancel(ref pdsContext, ref pdsglsdtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransCancel - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
            foreach (DataRow row in pdsglsdtrans.ttblglsdtrans)
            {
                results.Add(Glsdtrans.BuildGlsdtransFromRow(row));
            }
            return results;
        
      }

      public AsglsetupGLSDTransDeleteResponseAPI GLSDTransDelete(Glsdtrans glsdtrans)
      {   
         var result = new AsglsetupGLSDTransDeleteResponseAPI();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblglsdtransCriteria = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransCriteria, glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDTransDelete - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransDelete(ref pdsContext, ref pdsglsdtrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransDelete - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0)
         {
            result.glsdtrans = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public Glsdtrans GLSDTransLeaveField(AsglsetupGLSDTransLeaveFieldRequestAPI AsglsetupGLSDTransLeaveFieldRequestAPI)
      {   
         var result = new Glsdtrans();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsdtransRow = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransRow, AsglsetupGLSDTransLeaveFieldRequestAPI.glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransRow);
          
         var  cFieldName = AsglsetupGLSDTransLeaveFieldRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("GLSDTransLeaveField - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransLeaveField(ref pdsContext,  cFieldName, ref pdsglsdtrans, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransLeaveField - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0) 
         { 
             result = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         } 
              
          
         return result;
          
      }

      public AsglsetupGLSDTransLoadTTResponseAPI GLSDTransLoadTT(Glsdtransloadttcriteria glsdtransloadttcriteria)
      {   
         var result = new AsglsetupGLSDTransLoadTTResponseAPI();
         
         var pdsglsdtransloadtt = new pdsglsdtransloadttDataSet();
            
         DataRow ttblglsdtransloadttcriteriaCriteria = pdsglsdtransloadtt.ttblglsdtransloadttcriteria.NewttblglsdtransloadttcriteriaRow();
         Glsdtransloadttcriteria.UpdateRowFromGlsdtransloadttcriteria(ref ttblglsdtransloadttcriteriaCriteria, glsdtransloadttcriteria);
         pdsglsdtransloadtt.ttblglsdtransloadttcriteria.AddttblglsdtransloadttcriteriaRow((pdsglsdtransloadttDataSet.ttblglsdtransloadttcriteriaRow)ttblglsdtransloadttcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("GLSDTransLoadTT - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransLoadTT(ref pdsContext, ref pdsglsdtransloadtt, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("GLSDTransLoadTT - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtransloadtt); 
    
         foreach (DataRow row in pdsglsdtransloadtt.ttblglsdtransloadttresults)
         {
            result.glsdtransloadttresults.Add(Glsdtransloadttresults.BuildGlsdtransloadttresultsFromRow(row));
         }     
         if (pdsglsdtransloadtt.ttblglsdtransloadttsingle.Count > 0)
         {
            result.glsdtransloadttsingle = Glsdtransloadttsingle.BuildGlsdtransloadttsingleFromRow(pdsglsdtransloadtt.ttblglsdtransloadttsingle[0]);
         }
                    
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public AsglsetupGLSDTransUpdateResponseAPI GLSDTransUpdate(Glsdtrans glsdtrans)
      {   
         var result = new AsglsetupGLSDTransUpdateResponseAPI();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblglsdtransCriteria = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransCriteria, glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSDTransUpdate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDTransUpdate(ref pdsContext, ref pdsglsdtrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDTransUpdate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0)
         {
            result.glsdtrans = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSDValidateResponseAPI GLSDValidate(AsglsetupGLSDValidateRequestAPI AsglsetupGLSDValidateRequestAPI)
      {   
         var result = new AsglsetupGLSDValidateResponseAPI();
         
         var pdsglsdtrans = new pdsglsdtransDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsdtransRow = pdsglsdtrans.ttblglsdtrans.NewttblglsdtransRow();
         Glsdtrans.UpdateRowFromGlsdtrans(ref ttblglsdtransRow, AsglsetupGLSDValidateRequestAPI.glsdtrans);
         pdsglsdtrans.ttblglsdtrans.AddttblglsdtransRow((pdsglsdtransDataSet.ttblglsdtransRow)ttblglsdtransRow);
          
         var  cFieldList = AsglsetupGLSDValidateRequestAPI.cFieldList;
            
         
         NLogLoggerP.Trace("GLSDValidate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSDValidate(ref pdsContext,  cFieldList, ref pdsglsdtrans, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSDValidate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsdtrans); 
    
         if (pdsglsdtrans.ttblglsdtrans.Count > 0)
         {
            result.glsdtrans = Glsdtrans.BuildGlsdtransFromRow(pdsglsdtrans.ttblglsdtrans[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFAddDesignResponseAPI GLSFAddDesign(Glsfadddesigncriteria glsfadddesigncriteria)
      {   
         var result = new AsglsetupGLSFAddDesignResponseAPI();
         
         var pdsglsfadddesign = new pdsglsfadddesignDataSet();
            
         var pdsglsfdesign = new pdsglsfdesignDataSet();
            
         DataRow ttblglsfadddesigncriteriaCriteria = pdsglsfadddesign.ttblglsfadddesigncriteria.NewttblglsfadddesigncriteriaRow();
         Glsfadddesigncriteria.UpdateRowFromGlsfadddesigncriteria(ref ttblglsfadddesigncriteriaCriteria, glsfadddesigncriteria);
         pdsglsfadddesign.ttblglsfadddesigncriteria.AddttblglsfadddesigncriteriaRow((pdsglsfadddesignDataSet.ttblglsfadddesigncriteriaRow)ttblglsfadddesigncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFAddDesign - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFAddDesign(ref pdsContext,  pdsglsfadddesign, out pdsglsfdesign, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFAddDesign - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfadddesign); 
    
         if (pdsglsfdesign.ttblglsfdesignhdr.Count > 0)
         {
            result.glsfdesignhdr = Glsfdesignhdr.BuildGlsfdesignhdrFromRow(pdsglsfdesign.ttblglsfdesignhdr[0]);
         }
                    
         foreach (DataRow row in pdsglsfdesign.ttblglsfdesignsummary)
         {
            result.glsfdesignsummary.Add(Glsfdesignsummary.BuildGlsfdesignsummaryFromRow(row));
         }     
          
         return result;
          
      }

      public void GLSFDeleteDesign(IEnumerable<Glsfdeletedesigncriteria> glsfdeletedesigncriteria)
      {   
         
         var pdsglsfdeletedesign = new pdsglsfdeletedesignDataSet();
            
         foreach (var obj in glsfdeletedesigncriteria)
         {
             DataRow row = pdsglsfdeletedesign.ttblglsfdeletedesigncriteria.NewttblglsfdeletedesigncriteriaRow();
             Glsfdeletedesigncriteria.UpdateRowFromGlsfdeletedesigncriteria(ref row, obj);
             pdsglsfdeletedesign.ttblglsfdeletedesigncriteria.AddttblglsfdeletedesigncriteriaRow((pdsglsfdeletedesignDataSet.ttblglsfdeletedesigncriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFDeleteDesign - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFDeleteDesign(ref pdsContext,  pdsglsfdeletedesign, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFDeleteDesign - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfdeletedesign);
      }

      public void GLSFDelete(IEnumerable<Glsfdeletecriteria> glsfdeletecriteria)
      {   
         
         var pdsglsfdelete = new pdsglsfdeleteDataSet();
            
         foreach (var obj in glsfdeletecriteria)
         {
             DataRow row = pdsglsfdelete.ttblglsfdeletecriteria.NewttblglsfdeletecriteriaRow();
             Glsfdeletecriteria.UpdateRowFromGlsfdeletecriteria(ref row, obj);
             pdsglsfdelete.ttblglsfdeletecriteria.AddttblglsfdeletecriteriaRow((pdsglsfdeleteDataSet.ttblglsfdeletecriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFDelete - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFDelete(ref pdsContext,  pdsglsfdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFDelete - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfdelete);
      }

      public void GLSFDesignDesc(Glsfdesigndesccriteria glsfdesigndesccriteria)
      {   
         
         var pdsglsfdesigndesc = new pdsglsfdesigndescDataSet();
            
         DataRow ttblglsfdesigndesccriteriaCriteria = pdsglsfdesigndesc.ttblglsfdesigndesccriteria.NewttblglsfdesigndesccriteriaRow();
         Glsfdesigndesccriteria.UpdateRowFromGlsfdesigndesccriteria(ref ttblglsfdesigndesccriteriaCriteria, glsfdesigndesccriteria);
         pdsglsfdesigndesc.ttblglsfdesigndesccriteria.AddttblglsfdesigndesccriteriaRow((pdsglsfdesigndescDataSet.ttblglsfdesigndesccriteriaRow)ttblglsfdesigndesccriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFDesignDesc - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFDesignDesc(ref pdsContext,  pdsglsfdesigndesc, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFDesignDesc - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfdesigndesc);
      }

      public AsglsetupGLSFDuplicateResponseAPI GLSFDuplicate(AsglsetupGLSFDuplicateRequestAPI AsglsetupGLSFDuplicateRequestAPI)
      {   
         var result = new AsglsetupGLSFDuplicateResponseAPI();
         
         var pdsglsfduplicate = new pdsglsfduplicateDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfduplicatecriteriaRow = pdsglsfduplicate.ttblglsfduplicatecriteria.NewttblglsfduplicatecriteriaRow();
         Glsfduplicatecriteria.UpdateRowFromGlsfduplicatecriteria(ref ttblglsfduplicatecriteriaRow, AsglsetupGLSFDuplicateRequestAPI.glsfduplicatecriteria);
         pdsglsfduplicate.ttblglsfduplicatecriteria.AddttblglsfduplicatecriteriaRow((pdsglsfduplicateDataSet.ttblglsfduplicatecriteriaRow)ttblglsfduplicatecriteriaRow);
          
         foreach (var obj in AsglsetupGLSFDuplicateRequestAPI.glsfduplicatetargetlist)
         {
            DataRow ttblglsfduplicatetargetlistRow = pdsglsfduplicate.ttblglsfduplicatetargetlist.NewttblglsfduplicatetargetlistRow();
            Glsfduplicatetargetlist.UpdateRowFromGlsfduplicatetargetlist(ref ttblglsfduplicatetargetlistRow, obj);
            pdsglsfduplicate.ttblglsfduplicatetargetlist.AddttblglsfduplicatetargetlistRow((pdsglsfduplicateDataSet.ttblglsfduplicatetargetlistRow)ttblglsfduplicatetargetlistRow);
         }
          
         
         NLogLoggerP.Trace("GLSFDuplicate - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFDuplicate(ref pdsContext, ref pdsglsfduplicate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFDuplicate - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfduplicate); 
    
         foreach (DataRow row in pdsglsfduplicate.ttblglsfduplicatesourcelist)
         {
            result.glsfduplicatesourcelist.Add(Glsfduplicatesourcelist.BuildGlsfduplicatesourcelistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfduplicate.ttblglsfduplicatetargetlist)
         {
            result.glsfduplicatetargetlist.Add(Glsfduplicatetargetlist.BuildGlsfduplicatetargetlistFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFGetDesignResponseAPI GLSFGetDesign(Glsfgetdesigncriteria glsfgetdesigncriteria)
      {   
         var result = new AsglsetupGLSFGetDesignResponseAPI();
         
         var pdsglsfgetdesign = new pdsglsfgetdesignDataSet();
            
         var pdsglsfdesign = new pdsglsfdesignDataSet();
            
         DataRow ttblglsfgetdesigncriteriaCriteria = pdsglsfgetdesign.ttblglsfgetdesigncriteria.NewttblglsfgetdesigncriteriaRow();
         Glsfgetdesigncriteria.UpdateRowFromGlsfgetdesigncriteria(ref ttblglsfgetdesigncriteriaCriteria, glsfgetdesigncriteria);
         pdsglsfgetdesign.ttblglsfgetdesigncriteria.AddttblglsfgetdesigncriteriaRow((pdsglsfgetdesignDataSet.ttblglsfgetdesigncriteriaRow)ttblglsfgetdesigncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFGetDesign - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFGetDesign(ref pdsContext,  pdsglsfgetdesign, out pdsglsfdesign, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFGetDesign - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfgetdesign); 
    
         if (pdsglsfdesign.ttblglsfdesignhdr.Count > 0)
         {
            result.glsfdesignhdr = Glsfdesignhdr.BuildGlsfdesignhdrFromRow(pdsglsfdesign.ttblglsfdesignhdr[0]);
         }
                    
         foreach (DataRow row in pdsglsfdesign.ttblglsfdesignsummary)
         {
            result.glsfdesignsummary.Add(Glsfdesignsummary.BuildGlsfdesignsummaryFromRow(row));
         }     
          
         return result;
          
      }

      public void GLSFInsert(Glsfinsertcriteria glsfinsertcriteria)
      {   
         
         var pdsglsfinsert = new pdsglsfinsertDataSet();
            
         DataRow ttblglsfinsertcriteriaCriteria = pdsglsfinsert.ttblglsfinsertcriteria.NewttblglsfinsertcriteriaRow();
         Glsfinsertcriteria.UpdateRowFromGlsfinsertcriteria(ref ttblglsfinsertcriteriaCriteria, glsfinsertcriteria);
         pdsglsfinsert.ttblglsfinsertcriteria.AddttblglsfinsertcriteriaRow((pdsglsfinsertDataSet.ttblglsfinsertcriteriaRow)ttblglsfinsertcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFInsert - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFInsert(ref pdsContext,  pdsglsfinsert, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFInsert - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfinsert);
      }

      public void GLSFMove(IEnumerable<Glsfmovecriteria> glsfmovecriteria)
      {   
         
         var pdsglsfmove = new pdsglsfmoveDataSet();
            
         foreach (var obj in glsfmovecriteria)
         {
             DataRow row = pdsglsfmove.ttblglsfmovecriteria.NewttblglsfmovecriteriaRow();
             Glsfmovecriteria.UpdateRowFromGlsfmovecriteria(ref row, obj);
             pdsglsfmove.ttblglsfmovecriteria.AddttblglsfmovecriteriaRow((pdsglsfmoveDataSet.ttblglsfmovecriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFMove - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFMove(ref pdsContext,  pdsglsfmove, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFMove - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfmove);
      }

      public void GLSFRenumberDesign(IEnumerable<Glsfrenumberdesigncriteria> glsfrenumberdesigncriteria)
      {   
         
         var pdsglsfrenumberdesign = new pdsglsfrenumberdesignDataSet();
            
         foreach (var obj in glsfrenumberdesigncriteria)
         {
             DataRow row = pdsglsfrenumberdesign.ttblglsfrenumberdesigncriteria.NewttblglsfrenumberdesigncriteriaRow();
             Glsfrenumberdesigncriteria.UpdateRowFromGlsfrenumberdesigncriteria(ref row, obj);
             pdsglsfrenumberdesign.ttblglsfrenumberdesigncriteria.AddttblglsfrenumberdesigncriteriaRow((pdsglsfrenumberdesignDataSet.ttblglsfrenumberdesigncriteriaRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFRenumberDesign - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFRenumberDesign(ref pdsContext,  pdsglsfrenumberdesign, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFRenumberDesign - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfrenumberdesign);
      }

      public AsglsetupGLSFParseAccountResponseAPI GLSFParseAccount(string cGLString)
      {   
         var result = new AsglsetupGLSFParseAccountResponseAPI();
         
         int iGLAcctno = 0;
         string cGLDelim = string.Empty;
         int iGLSubno = 0;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSFParseAccount - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFParseAccount(ref pdsContext,  cGLString, out iGLAcctno, out cGLDelim, out iGLSubno, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFParseAccount - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.iGLAcctno = iGLAcctno;
         result.cGLDelim = cGLDelim;
         result.iGLSubno = iGLSubno;
          
         return result;
          
      }

      public AsglsetupGLSFSetupAResponseAPI GLSFSetupA(AsglsetupGLSFSetupARequestAPI AsglsetupGLSFSetupARequestAPI)
      {   
         var result = new AsglsetupGLSFSetupAResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupa = new pdsglsfsetupaDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupaRow = pdsglsfsetupa.ttblglsfsetupa.NewttblglsfsetupaRow();
         Glsfsetupa.UpdateRowFromGlsfsetupa(ref ttblglsfsetupaRow, AsglsetupGLSFSetupARequestAPI.glsfsetupa);
         pdsglsfsetupa.ttblglsfsetupa.AddttblglsfsetupaRow((pdsglsfsetupaDataSet.ttblglsfsetupaRow)ttblglsfsetupaRow);
          
         foreach (var obj in AsglsetupGLSFSetupARequestAPI.glsfsetupaacct)
         {
            DataRow ttblglsfsetupaacctRow = pdsglsfsetupa.ttblglsfsetupaacct.NewttblglsfsetupaacctRow();
            Glsfsetupaacct.UpdateRowFromGlsfsetupaacct(ref ttblglsfsetupaacctRow, obj);
            pdsglsfsetupa.ttblglsfsetupaacct.AddttblglsfsetupaacctRow((pdsglsfsetupaDataSet.ttblglsfsetupaacctRow)ttblglsfsetupaacctRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupARequestAPI.glsfsetupacol)
         {
            DataRow ttblglsfsetupacolRow = pdsglsfsetupa.ttblglsfsetupacol.NewttblglsfsetupacolRow();
            Glsfsetupacol.UpdateRowFromGlsfsetupacol(ref ttblglsfsetupacolRow, obj);
            pdsglsfsetupa.ttblglsfsetupacol.AddttblglsfsetupacolRow((pdsglsfsetupaDataSet.ttblglsfsetupacolRow)ttblglsfsetupacolRow);
         }
          
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupARequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         
         NLogLoggerP.Trace("GLSFSetupA - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupA(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupa, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupA - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetupa.ttblglsfsetupa.Count > 0)
         {
            result.glsfsetupa = Glsfsetupa.BuildGlsfsetupaFromRow(pdsglsfsetupa.ttblglsfsetupa[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetupa.ttblglsfsetupaacct)
         {
            result.glsfsetupaacct.Add(Glsfsetupaacct.BuildGlsfsetupaacctFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupa.ttblglsfsetupacol)
         {
            result.glsfsetupacol.Add(Glsfsetupacol.BuildGlsfsetupacolFromRow(row));
         }     
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
          
         return result;
          
      }

      public AsglsetupGLSFSetupCResponseAPI GLSFSetupC(AsglsetupGLSFSetupCRequestAPI AsglsetupGLSFSetupCRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupCResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupc = new pdsglsfsetupcDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsglsetupGLSFSetupCRequestAPI.glsfsetupc)
         {
            DataRow ttblglsfsetupcRow = pdsglsfsetupc.ttblglsfsetupc.NewttblglsfsetupcRow();
            Glsfsetupc.UpdateRowFromGlsfsetupc(ref ttblglsfsetupcRow, obj);
            pdsglsfsetupc.ttblglsfsetupc.AddttblglsfsetupcRow((pdsglsfsetupcDataSet.ttblglsfsetupcRow)ttblglsfsetupcRow);
         }
          
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupCRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         var  cComment = AsglsetupGLSFSetupCRequestAPI.cComment;
            
         
         NLogLoggerP.Trace("GLSFSetupC - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupC(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupc, ref cComment, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupC - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         foreach (DataRow row in pdsglsfsetupc.ttblglsfsetupc)
         {
            result.glsfsetupc.Add(Glsfsetupc.BuildGlsfsetupcFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupc.ttblglsfsetupcfield)
         {
            result.glsfsetupcfield.Add(Glsfsetupcfield.BuildGlsfsetupcfieldFromRow(row));
         }     
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         result.cComment = cComment;
          
         return result;
          
      }

      public AsglsetupGLSFSetupFResponseAPI GLSFSetupF(AsglsetupGLSFSetupFRequestAPI AsglsetupGLSFSetupFRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupFResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupf = new pdsglsfsetupfDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupFRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetupfRow = pdsglsfsetupf.ttblglsfsetupf.NewttblglsfsetupfRow();
         Glsfsetupf.UpdateRowFromGlsfsetupf(ref ttblglsfsetupfRow, AsglsetupGLSFSetupFRequestAPI.glsfsetupf);
         pdsglsfsetupf.ttblglsfsetupf.AddttblglsfsetupfRow((pdsglsfsetupfDataSet.ttblglsfsetupfRow)ttblglsfsetupfRow);
          
         foreach (var obj in AsglsetupGLSFSetupFRequestAPI.glsfsetupfbudgetno)
         {
            DataRow ttblglsfsetupfbudgetnoRow = pdsglsfsetupf.ttblglsfsetupfbudgetno.NewttblglsfsetupfbudgetnoRow();
            Glsfsetupfbudgetno.UpdateRowFromGlsfsetupfbudgetno(ref ttblglsfsetupfbudgetnoRow, obj);
            pdsglsfsetupf.ttblglsfsetupfbudgetno.AddttblglsfsetupfbudgetnoRow((pdsglsfsetupfDataSet.ttblglsfsetupfbudgetnoRow)ttblglsfsetupfbudgetnoRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupFRequestAPI.glsfsetupfcono)
         {
            DataRow ttblglsfsetupfconoRow = pdsglsfsetupf.ttblglsfsetupfcono.NewttblglsfsetupfconoRow();
            Glsfsetupfcono.UpdateRowFromGlsfsetupfcono(ref ttblglsfsetupfconoRow, obj);
            pdsglsfsetupf.ttblglsfsetupfcono.AddttblglsfsetupfconoRow((pdsglsfsetupfDataSet.ttblglsfsetupfconoRow)ttblglsfsetupfconoRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupFRequestAPI.glsfsetupfdeptno)
         {
            DataRow ttblglsfsetupfdeptnoRow = pdsglsfsetupf.ttblglsfsetupfdeptno.NewttblglsfsetupfdeptnoRow();
            Glsfsetupfdeptno.UpdateRowFromGlsfsetupfdeptno(ref ttblglsfsetupfdeptnoRow, obj);
            pdsglsfsetupf.ttblglsfsetupfdeptno.AddttblglsfsetupfdeptnoRow((pdsglsfsetupfDataSet.ttblglsfsetupfdeptnoRow)ttblglsfsetupfdeptnoRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupFRequestAPI.glsfsetupfdivno)
         {
            DataRow ttblglsfsetupfdivnoRow = pdsglsfsetupf.ttblglsfsetupfdivno.NewttblglsfsetupfdivnoRow();
            Glsfsetupfdivno.UpdateRowFromGlsfsetupfdivno(ref ttblglsfsetupfdivnoRow, obj);
            pdsglsfsetupf.ttblglsfsetupfdivno.AddttblglsfsetupfdivnoRow((pdsglsfsetupfDataSet.ttblglsfsetupfdivnoRow)ttblglsfsetupfdivnoRow);
         }
          
         
         NLogLoggerP.Trace("GLSFSetupF - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupF(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupf, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupF - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupf.ttblglsfsetupf.Count > 0)
         {
            result.glsfsetupf = Glsfsetupf.BuildGlsfsetupfFromRow(pdsglsfsetupf.ttblglsfsetupf[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfbudgetno)
         {
            result.glsfsetupfbudgetno.Add(Glsfsetupfbudgetno.BuildGlsfsetupfbudgetnoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfcolist)
         {
            result.glsfsetupfcolist.Add(Glsfsetupfcolist.BuildGlsfsetupfcolistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfcono)
         {
            result.glsfsetupfcono.Add(Glsfsetupfcono.BuildGlsfsetupfconoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfdeptlist)
         {
            result.glsfsetupfdeptlist.Add(Glsfsetupfdeptlist.BuildGlsfsetupfdeptlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfdeptno)
         {
            result.glsfsetupfdeptno.Add(Glsfsetupfdeptno.BuildGlsfsetupfdeptnoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfdivlist)
         {
            result.glsfsetupfdivlist.Add(Glsfsetupfdivlist.BuildGlsfsetupfdivlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupf.ttblglsfsetupfdivno)
         {
            result.glsfsetupfdivno.Add(Glsfsetupfdivno.BuildGlsfsetupfdivnoFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFSetupHResponseAPI GLSFSetupH(AsglsetupGLSFSetupHRequestAPI AsglsetupGLSFSetupHRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupHResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetuph = new pdsglsfsetuphDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupHRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetuphRow = pdsglsfsetuph.ttblglsfsetuph.NewttblglsfsetuphRow();
         Glsfsetuph.UpdateRowFromGlsfsetuph(ref ttblglsfsetuphRow, AsglsetupGLSFSetupHRequestAPI.glsfsetuph);
         pdsglsfsetuph.ttblglsfsetuph.AddttblglsfsetuphRow((pdsglsfsetuphDataSet.ttblglsfsetuphRow)ttblglsfsetuphRow);
          
         
         NLogLoggerP.Trace("GLSFSetupH - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupH(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetuph, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupH - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetuph.ttblglsfsetuph.Count > 0)
         {
            result.glsfsetuph = Glsfsetuph.BuildGlsfsetuphFromRow(pdsglsfsetuph.ttblglsfsetuph[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetuph.ttblglsfsetuphtype)
         {
            result.glsfsetuphtype.Add(Glsfsetuphtype.BuildGlsfsetuphtypeFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFSetupMResponseAPI GLSFSetupM(AsglsetupGLSFSetupMRequestAPI AsglsetupGLSFSetupMRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupMResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupm = new pdsglsfsetupmDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupMRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetupmRow = pdsglsfsetupm.ttblglsfsetupm.NewttblglsfsetupmRow();
         Glsfsetupm.UpdateRowFromGlsfsetupm(ref ttblglsfsetupmRow, AsglsetupGLSFSetupMRequestAPI.glsfsetupm);
         pdsglsfsetupm.ttblglsfsetupm.AddttblglsfsetupmRow((pdsglsfsetupmDataSet.ttblglsfsetupmRow)ttblglsfsetupmRow);
          
         
         NLogLoggerP.Trace("GLSFSetupM - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupM(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupM - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupm.ttblglsfsetupm.Count > 0)
         {
            result.glsfsetupm = Glsfsetupm.BuildGlsfsetupmFromRow(pdsglsfsetupm.ttblglsfsetupm[0]);
         }
                    
          
         return result;
          
      }

      public AsglsetupGLSFSetupPResponseAPI GLSFSetupP(AsglsetupGLSFSetupPRequestAPI AsglsetupGLSFSetupPRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupPResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupp = new pdsglsfsetuppDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupPRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetuppRow = pdsglsfsetupp.ttblglsfsetupp.NewttblglsfsetuppRow();
         Glsfsetupp.UpdateRowFromGlsfsetupp(ref ttblglsfsetuppRow, AsglsetupGLSFSetupPRequestAPI.glsfsetupp);
         pdsglsfsetupp.ttblglsfsetupp.AddttblglsfsetuppRow((pdsglsfsetuppDataSet.ttblglsfsetuppRow)ttblglsfsetuppRow);
          
         
         NLogLoggerP.Trace("GLSFSetupP - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupP(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupP - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupp.ttblglsfsetupp.Count > 0)
         {
            result.glsfsetupp = Glsfsetupp.BuildGlsfsetuppFromRow(pdsglsfsetupp.ttblglsfsetupp[0]);
         }
                    
          
         return result;
          
      }

      public AsglsetupGLSFSetupSResponseAPI GLSFSetupS(AsglsetupGLSFSetupSRequestAPI AsglsetupGLSFSetupSRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupSResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetups = new pdsglsfsetupsDataSet();
            
         var pdsglsfsetupslist = new pdsglsfsetupslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupSRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetupsRow = pdsglsfsetups.ttblglsfsetups.NewttblglsfsetupsRow();
         Glsfsetups.UpdateRowFromGlsfsetups(ref ttblglsfsetupsRow, AsglsetupGLSFSetupSRequestAPI.glsfsetups);
         pdsglsfsetups.ttblglsfsetups.AddttblglsfsetupsRow((pdsglsfsetupsDataSet.ttblglsfsetupsRow)ttblglsfsetupsRow);
          
         foreach (var obj in AsglsetupGLSFSetupSRequestAPI.glsfsetupscono)
         {
            DataRow ttblglsfsetupsconoRow = pdsglsfsetups.ttblglsfsetupscono.NewttblglsfsetupsconoRow();
            Glsfsetupscono.UpdateRowFromGlsfsetupscono(ref ttblglsfsetupsconoRow, obj);
            pdsglsfsetups.ttblglsfsetupscono.AddttblglsfsetupsconoRow((pdsglsfsetupsDataSet.ttblglsfsetupsconoRow)ttblglsfsetupsconoRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupSRequestAPI.glsfsetupsdeptno)
         {
            DataRow ttblglsfsetupsdeptnoRow = pdsglsfsetups.ttblglsfsetupsdeptno.NewttblglsfsetupsdeptnoRow();
            Glsfsetupsdeptno.UpdateRowFromGlsfsetupsdeptno(ref ttblglsfsetupsdeptnoRow, obj);
            pdsglsfsetups.ttblglsfsetupsdeptno.AddttblglsfsetupsdeptnoRow((pdsglsfsetupsDataSet.ttblglsfsetupsdeptnoRow)ttblglsfsetupsdeptnoRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupSRequestAPI.glsfsetupsdivno)
         {
            DataRow ttblglsfsetupsdivnoRow = pdsglsfsetups.ttblglsfsetupsdivno.NewttblglsfsetupsdivnoRow();
            Glsfsetupsdivno.UpdateRowFromGlsfsetupsdivno(ref ttblglsfsetupsdivnoRow, obj);
            pdsglsfsetups.ttblglsfsetupsdivno.AddttblglsfsetupsdivnoRow((pdsglsfsetupsDataSet.ttblglsfsetupsdivnoRow)ttblglsfsetupsdivnoRow);
         }
          
         
         NLogLoggerP.Trace("GLSFSetupS - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupS(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetups, out pdsglsfsetupslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupS - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetups.ttblglsfsetups.Count > 0)
         {
            result.glsfsetups = Glsfsetups.BuildGlsfsetupsFromRow(pdsglsfsetups.ttblglsfsetups[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupscolist)
         {
            result.glsfsetupscolist.Add(Glsfsetupscolist.BuildGlsfsetupscolistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupscono)
         {
            result.glsfsetupscono.Add(Glsfsetupscono.BuildGlsfsetupsconoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupsdeptno)
         {
            result.glsfsetupsdeptno.Add(Glsfsetupsdeptno.BuildGlsfsetupsdeptnoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupsdivno)
         {
            result.glsfsetupsdivno.Add(Glsfsetupsdivno.BuildGlsfsetupsdivnoFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupssort)
         {
            result.glsfsetupssort.Add(Glsfsetupssort.BuildGlsfsetupssortFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetups.ttblglsfsetupsvalid)
         {
            result.glsfsetupsvalid.Add(Glsfsetupsvalid.BuildGlsfsetupsvalidFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupsdeptlist)
         {
            result.glsfsetupsdeptlist.Add(Glsfsetupsdeptlist.BuildGlsfsetupsdeptlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupsdivlist)
         {
            result.glsfsetupsdivlist.Add(Glsfsetupsdivlist.BuildGlsfsetupsdivlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupslistcono)
         {
            result.glsfsetupslistcono.Add(Glsfsetupslistcono.BuildGlsfsetupslistconoFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFSetupSListResponseAPI GLSFSetupSList(AsglsetupGLSFSetupSListRequestAPI AsglsetupGLSFSetupSListRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupSListResponseAPI();
         
         var pdsglsfsetupslist = new pdsglsfsetupslistDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsglsetupGLSFSetupSListRequestAPI.glsfsetupslistcono)
         {
            DataRow ttblglsfsetupslistconoRow = pdsglsfsetupslist.ttblglsfsetupslistcono.NewttblglsfsetupslistconoRow();
            Glsfsetupslistcono.UpdateRowFromGlsfsetupslistcono(ref ttblglsfsetupslistconoRow, obj);
            pdsglsfsetupslist.ttblglsfsetupslistcono.AddttblglsfsetupslistconoRow((pdsglsfsetupslistDataSet.ttblglsfsetupslistconoRow)ttblglsfsetupslistconoRow);
         }
          
         DataRow ttblglsfsetupslistcriteriaRow = pdsglsfsetupslist.ttblglsfsetupslistcriteria.NewttblglsfsetupslistcriteriaRow();
         Glsfsetupslistcriteria.UpdateRowFromGlsfsetupslistcriteria(ref ttblglsfsetupslistcriteriaRow, AsglsetupGLSFSetupSListRequestAPI.glsfsetupslistcriteria);
         pdsglsfsetupslist.ttblglsfsetupslistcriteria.AddttblglsfsetupslistcriteriaRow((pdsglsfsetupslistDataSet.ttblglsfsetupslistcriteriaRow)ttblglsfsetupslistcriteriaRow);
          
         
         NLogLoggerP.Trace("GLSFSetupSList - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupSList(ref pdsContext, ref pdsglsfsetupslist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupSList - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetupslist); 
    
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupsdeptlist)
         {
            result.glsfsetupsdeptlist.Add(Glsfsetupsdeptlist.BuildGlsfsetupsdeptlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupsdivlist)
         {
            result.glsfsetupsdivlist.Add(Glsfsetupsdivlist.BuildGlsfsetupsdivlistFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupslist.ttblglsfsetupslistcono)
         {
            result.glsfsetupslistcono.Add(Glsfsetupslistcono.BuildGlsfsetupslistconoFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFSetupTResponseAPI GLSFSetupT(AsglsetupGLSFSetupTRequestAPI AsglsetupGLSFSetupTRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupTResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupt = new pdsglsfsetuptDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupTRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetuptRow = pdsglsfsetupt.ttblglsfsetupt.NewttblglsfsetuptRow();
         Glsfsetupt.UpdateRowFromGlsfsetupt(ref ttblglsfsetuptRow, AsglsetupGLSFSetupTRequestAPI.glsfsetupt);
         pdsglsfsetupt.ttblglsfsetupt.AddttblglsfsetuptRow((pdsglsfsetuptDataSet.ttblglsfsetuptRow)ttblglsfsetuptRow);
          
         foreach (var obj in AsglsetupGLSFSetupTRequestAPI.glsfsetuptcol)
         {
            DataRow ttblglsfsetuptcolRow = pdsglsfsetupt.ttblglsfsetuptcol.NewttblglsfsetuptcolRow();
            Glsfsetuptcol.UpdateRowFromGlsfsetuptcol(ref ttblglsfsetuptcolRow, obj);
            pdsglsfsetupt.ttblglsfsetuptcol.AddttblglsfsetuptcolRow((pdsglsfsetuptDataSet.ttblglsfsetuptcolRow)ttblglsfsetuptcolRow);
         }
          
         
         NLogLoggerP.Trace("GLSFSetupT - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupT(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupT - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupt.ttblglsfsetupt.Count > 0)
         {
            result.glsfsetupt = Glsfsetupt.BuildGlsfsetuptFromRow(pdsglsfsetupt.ttblglsfsetupt[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetupt.ttblglsfsetuptcol)
         {
            result.glsfsetuptcol.Add(Glsfsetuptcol.BuildGlsfsetuptcolFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSFSetupUResponseAPI GLSFSetupU(AsglsetupGLSFSetupURequestAPI AsglsetupGLSFSetupURequestAPI)
      {   
         var result = new AsglsetupGLSFSetupUResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupu = new pdsglsfsetupuDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupURequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetupuRow = pdsglsfsetupu.ttblglsfsetupu.NewttblglsfsetupuRow();
         Glsfsetupu.UpdateRowFromGlsfsetupu(ref ttblglsfsetupuRow, AsglsetupGLSFSetupURequestAPI.glsfsetupu);
         pdsglsfsetupu.ttblglsfsetupu.AddttblglsfsetupuRow((pdsglsfsetupuDataSet.ttblglsfsetupuRow)ttblglsfsetupuRow);
          
         
         NLogLoggerP.Trace("GLSFSetupU - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupU(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupu, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupU - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupu.ttblglsfsetupu.Count > 0)
         {
            result.glsfsetupu = Glsfsetupu.BuildGlsfsetupuFromRow(pdsglsfsetupu.ttblglsfsetupu[0]);
         }
                    
          
         return result;
          
      }

      public AsglsetupGLSFSetupZResponseAPI GLSFSetupZ(AsglsetupGLSFSetupZRequestAPI AsglsetupGLSFSetupZRequestAPI)
      {   
         var result = new AsglsetupGLSFSetupZResponseAPI();
         
         var pdsglsfsetup = new pdsglsfsetupDataSet();
            
         var pdsglsfsetupz = new pdsglsfsetupzDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblglsfsetupcriteriaRow = pdsglsfsetup.ttblglsfsetupcriteria.NewttblglsfsetupcriteriaRow();
         Glsfsetupcriteria.UpdateRowFromGlsfsetupcriteria(ref ttblglsfsetupcriteriaRow, AsglsetupGLSFSetupZRequestAPI.glsfsetupcriteria);
         pdsglsfsetup.ttblglsfsetupcriteria.AddttblglsfsetupcriteriaRow((pdsglsfsetupDataSet.ttblglsfsetupcriteriaRow)ttblglsfsetupcriteriaRow);
          
         DataRow ttblglsfsetupzRow = pdsglsfsetupz.ttblglsfsetupz.NewttblglsfsetupzRow();
         Glsfsetupz.UpdateRowFromGlsfsetupz(ref ttblglsfsetupzRow, AsglsetupGLSFSetupZRequestAPI.glsfsetupz);
         pdsglsfsetupz.ttblglsfsetupz.AddttblglsfsetupzRow((pdsglsfsetupzDataSet.ttblglsfsetupzRow)ttblglsfsetupzRow);
          
         foreach (var obj in AsglsetupGLSFSetupZRequestAPI.glsfsetupzacct)
         {
            DataRow ttblglsfsetupzacctRow = pdsglsfsetupz.ttblglsfsetupzacct.NewttblglsfsetupzacctRow();
            Glsfsetupzacct.UpdateRowFromGlsfsetupzacct(ref ttblglsfsetupzacctRow, obj);
            pdsglsfsetupz.ttblglsfsetupzacct.AddttblglsfsetupzacctRow((pdsglsfsetupzDataSet.ttblglsfsetupzacctRow)ttblglsfsetupzacctRow);
         }
          
         foreach (var obj in AsglsetupGLSFSetupZRequestAPI.glsfsetupzcol)
         {
            DataRow ttblglsfsetupzcolRow = pdsglsfsetupz.ttblglsfsetupzcol.NewttblglsfsetupzcolRow();
            Glsfsetupzcol.UpdateRowFromGlsfsetupzcol(ref ttblglsfsetupzcolRow, obj);
            pdsglsfsetupz.ttblglsfsetupzcol.AddttblglsfsetupzcolRow((pdsglsfsetupzDataSet.ttblglsfsetupzcolRow)ttblglsfsetupzcolRow);
         }
          
         
         NLogLoggerP.Trace("GLSFSetupZ - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSFSetupZ(ref pdsContext, ref pdsglsfsetup, ref pdsglsfsetupz, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSFSetupZ - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsfsetup); 
    
         if (pdsglsfsetup.ttblglsfsetupresults.Count > 0)
         {
            result.glsfsetupresults = Glsfsetupresults.BuildGlsfsetupresultsFromRow(pdsglsfsetup.ttblglsfsetupresults[0]);
         }
                    
         if (pdsglsfsetupz.ttblglsfsetupz.Count > 0)
         {
            result.glsfsetupz = Glsfsetupz.BuildGlsfsetupzFromRow(pdsglsfsetupz.ttblglsfsetupz[0]);
         }
                    
         foreach (DataRow row in pdsglsfsetupz.ttblglsfsetupzacct)
         {
            result.glsfsetupzacct.Add(Glsfsetupzacct.BuildGlsfsetupzacctFromRow(row));
         }     
         foreach (DataRow row in pdsglsfsetupz.ttblglsfsetupzcol)
         {
            result.glsfsetupzcol.Add(Glsfsetupzcol.BuildGlsfsetupzcolFromRow(row));
         }     
          
         return result;
          
      }

      public AsglsetupGLSASearchWordIndexResponseAPI GLSASearchWordIndex(int pvBatchsize, string pvSearchstring)
      {   
         var result = new AsglsetupGLSASearchWordIndexResponseAPI();
         
         var pdsglsa = new pdsglsaDataSet();
            
         string cErrorMessage = string.Empty;
         bool pvMorerecords = false;
   
         
         NLogLoggerP.Trace("GLSASearchWordIndex - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLSASearchWordIndex(ref pdsContext,  pvBatchsize,  pvSearchstring, out pdsglsa, out cErrorMessage, out pvMorerecords);
               }
            });
         NLogLoggerP.Info("GLSASearchWordIndex - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsa); 
    
         foreach (DataRow row in pdsglsa.ttblglsa)
         {
            result.glsa.Add(Glsa.BuildGlsaFromRow(row));
         }     
         result.pvMorerecords = pvMorerecords;
          
         return result;
          
      }

      public Glvalidateparse GLValidateParse(Glvalidateparse glvalidateparse)
      {   
         var result = new Glvalidateparse();
         
         var pdsglvalidateparse = new pdsglvalidateparseDataSet();
            
         DataRow ttblglvalidateparseCriteria = pdsglvalidateparse.ttblglvalidateparse.NewttblglvalidateparseRow();
         Glvalidateparse.UpdateRowFromGlvalidateparse(ref ttblglvalidateparseCriteria, glvalidateparse);
         pdsglvalidateparse.ttblglvalidateparse.AddttblglvalidateparseRow((pdsglvalidateparseDataSet.ttblglvalidateparseRow)ttblglvalidateparseCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLValidateParse - Asglsetup - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglsetupproxy = this.proxyAppObject.CreatePO_asglsetupproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglsetupproxy.GLValidateParse(ref pdsContext, ref pdsglvalidateparse, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLValidateParse - Asglsetup - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglvalidateparse); 
    
         if (pdsglvalidateparse.ttblglvalidateparse.Count > 0) 
         { 
             result = Glvalidateparse.BuildGlvalidateparseFromRow(pdsglvalidateparse.ttblglvalidateparse[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  