//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.GL.Data.Adapters
{
   using com.infor.sxproxy.glproxy;
   using com.infor.sxproxy.glproxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsgldistribution;
   using Models.Pdsglperiodranges;
   using Models.Pdsglinquiryjournal;
   using Models.Pdsglinquiryreval;
   using Models.Pdsglinquiryrevalsubdetail;
   using Models.Pdsglacctloaddata;
   using Models.Pdsglinquiryaccount;
   using Models.Pdsgliatrans;
   using Models.Pdsgliatransrev;
   using Models.Pdsgliahistbal;
   using Models.Pdsgliabdgcmp;
   using Models.Pdsgliayrcmp;
   using Models.Pdsglifsearch;
   using Models.Pdsglifdetailbanner;
   using Models.Pdsglif;
   using Models.Pdsglifdetailbrowser;
   using Models.Pdsglifdetailhist;
   using Models.Pdsglacctauthinfo;
   using Models.Pdsgldivauthinfo;
   using Models.Pdsglsacheckfornull;
   using Models.Complex;

   public partial class AsglinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private GLProxyAppObject proxyAppObject;
      
      public AsglinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new GLProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsglinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public IEnumerable<Gldistributionresults> GLDistribution(Gldistributioncriteria gldistributioncriteria)
      {   
         var results = new List<Gldistributionresults>();
         
         var pdsgldistribution = new pdsgldistributionDataSet();
            
         DataRow ttblgldistributioncriteriaCriteria = pdsgldistribution.ttblgldistributioncriteria.NewttblgldistributioncriteriaRow();
         Gldistributioncriteria.UpdateRowFromGldistributioncriteria(ref ttblgldistributioncriteriaCriteria, gldistributioncriteria);
         pdsgldistribution.ttblgldistributioncriteria.AddttblgldistributioncriteriaRow((pdsgldistributionDataSet.ttblgldistributioncriteriaRow)ttblgldistributioncriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLDistribution - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLDistribution(ref pdsContext, ref pdsgldistribution, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLDistribution - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgldistribution); 
    
            foreach (DataRow row in pdsgldistribution.ttblgldistributionresults)
            {
                results.Add(Gldistributionresults.BuildGldistributionresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Glperiodrangesresults> GetGLPeriodRanges(Glperiodrangescriteria glperiodrangescriteria)
      {   
         var results = new List<Glperiodrangesresults>();
         
         var pdsglperiodranges = new pdsglperiodrangesDataSet();
            
         DataRow ttblglperiodrangescriteriaCriteria = pdsglperiodranges.ttblglperiodrangescriteria.NewttblglperiodrangescriteriaRow();
         Glperiodrangescriteria.UpdateRowFromGlperiodrangescriteria(ref ttblglperiodrangescriteriaCriteria, glperiodrangescriteria);
         pdsglperiodranges.ttblglperiodrangescriteria.AddttblglperiodrangescriteriaRow((pdsglperiodrangesDataSet.ttblglperiodrangescriteriaRow)ttblglperiodrangescriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GetGLPeriodRanges - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GetGLPeriodRanges(ref pdsContext, ref pdsglperiodranges, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GetGLPeriodRanges - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglperiodranges); 
    
            foreach (DataRow row in pdsglperiodranges.ttblglperiodrangesresults)
            {
                results.Add(Glperiodrangesresults.BuildGlperiodrangesresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Glinquiryjournalresults> FetchGLDetail(Glinquiryjournalcriteria glinquiryjournalcriteria)
      {   
         var results = new List<Glinquiryjournalresults>();
         
         var pdsglinquiryjournal = new pdsglinquiryjournalDataSet();
            
         DataRow ttblglinquiryjournalcriteriaCriteria = pdsglinquiryjournal.ttblglinquiryjournalcriteria.NewttblglinquiryjournalcriteriaRow();
         Glinquiryjournalcriteria.UpdateRowFromGlinquiryjournalcriteria(ref ttblglinquiryjournalcriteriaCriteria, glinquiryjournalcriteria);
         pdsglinquiryjournal.ttblglinquiryjournalcriteria.AddttblglinquiryjournalcriteriaRow((pdsglinquiryjournalDataSet.ttblglinquiryjournalcriteriaRow)ttblglinquiryjournalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchGLDetail - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchGLDetail(ref pdsContext, ref pdsglinquiryjournal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchGLDetail - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglinquiryjournal); 
    
            foreach (DataRow row in pdsglinquiryjournal.ttblglinquiryjournalresults)
            {
                results.Add(Glinquiryjournalresults.BuildGlinquiryjournalresultsFromRow(row));
            }
            return results;
        
      }

      public AsglinquiryFetchRVDetailResponseAPI FetchRVDetail(Glinquiryrevalcriteria glinquiryrevalcriteria)
      {   
         var result = new AsglinquiryFetchRVDetailResponseAPI();
         
         var pdsglinquiryreval = new pdsglinquiryrevalDataSet();
            
         DataRow ttblglinquiryrevalcriteriaCriteria = pdsglinquiryreval.ttblglinquiryrevalcriteria.NewttblglinquiryrevalcriteriaRow();
         Glinquiryrevalcriteria.UpdateRowFromGlinquiryrevalcriteria(ref ttblglinquiryrevalcriteriaCriteria, glinquiryrevalcriteria);
         pdsglinquiryreval.ttblglinquiryrevalcriteria.AddttblglinquiryrevalcriteriaRow((pdsglinquiryrevalDataSet.ttblglinquiryrevalcriteriaRow)ttblglinquiryrevalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         string cWarningMess = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("FetchRVDetail - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchRVDetail(ref pdsContext, ref pdsglinquiryreval, out cErrorMessage, out cWarningMess, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("FetchRVDetail - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglinquiryreval); 
    
         foreach (DataRow row in pdsglinquiryreval.ttblglinquiryrevalresults)
         {
            result.glinquiryrevalresults.Add(Glinquiryrevalresults.BuildGlinquiryrevalresultsFromRow(row));
         }     
         result.cWarningMess = cWarningMess;
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Glinquiryrevalsubresults FetchRVSubDetail(Glinquiryrevalsubcriteria glinquiryrevalsubcriteria)
      {   
         var result = new Glinquiryrevalsubresults();
         
         var pdsglinquiryrevalsubdetail = new pdsglinquiryrevalsubdetailDataSet();
            
         DataRow ttblglinquiryrevalsubcriteriaCriteria = pdsglinquiryrevalsubdetail.ttblglinquiryrevalsubcriteria.NewttblglinquiryrevalsubcriteriaRow();
         Glinquiryrevalsubcriteria.UpdateRowFromGlinquiryrevalsubcriteria(ref ttblglinquiryrevalsubcriteriaCriteria, glinquiryrevalsubcriteria);
         pdsglinquiryrevalsubdetail.ttblglinquiryrevalsubcriteria.AddttblglinquiryrevalsubcriteriaRow((pdsglinquiryrevalsubdetailDataSet.ttblglinquiryrevalsubcriteriaRow)ttblglinquiryrevalsubcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchRVSubDetail - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchRVSubDetail(ref pdsContext, ref pdsglinquiryrevalsubdetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchRVSubDetail - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglinquiryrevalsubdetail); 
    
         if (pdsglinquiryrevalsubdetail.ttblglinquiryrevalsubresults.Count > 0) 
         { 
             result = Glinquiryrevalsubresults.BuildGlinquiryrevalsubresultsFromRow(pdsglinquiryrevalsubdetail.ttblglinquiryrevalsubresults[0]);
         } 
              
          
         return result;
          
      }

      public Glacctloaddataresults FetchAcctDataForDisplay(Glacctloaddatacriteria glacctloaddatacriteria)
      {   
         var result = new Glacctloaddataresults();
         
         var pdsglacctloaddata = new pdsglacctloaddataDataSet();
            
         DataRow ttblglacctloaddatacriteriaCriteria = pdsglacctloaddata.ttblglacctloaddatacriteria.NewttblglacctloaddatacriteriaRow();
         Glacctloaddatacriteria.UpdateRowFromGlacctloaddatacriteria(ref ttblglacctloaddatacriteriaCriteria, glacctloaddatacriteria);
         pdsglacctloaddata.ttblglacctloaddatacriteria.AddttblglacctloaddatacriteriaRow((pdsglacctloaddataDataSet.ttblglacctloaddatacriteriaRow)ttblglacctloaddatacriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchAcctDataForDisplay - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchAcctDataForDisplay(ref pdsContext, ref pdsglacctloaddata, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchAcctDataForDisplay - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglacctloaddata); 
    
         if (pdsglacctloaddata.ttblglacctloaddataresults.Count > 0) 
         { 
             result = Glacctloaddataresults.BuildGlacctloaddataresultsFromRow(pdsglacctloaddata.ttblglacctloaddataresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Glinquiryaccountresults> FetchAcctDetail(Glinquiryaccountcriteria glinquiryaccountcriteria)
      {   
         var results = new List<Glinquiryaccountresults>();
         
         var pdsglinquiryaccount = new pdsglinquiryaccountDataSet();
            
         DataRow ttblglinquiryaccountcriteriaCriteria = pdsglinquiryaccount.ttblglinquiryaccountcriteria.NewttblglinquiryaccountcriteriaRow();
         Glinquiryaccountcriteria.UpdateRowFromGlinquiryaccountcriteria(ref ttblglinquiryaccountcriteriaCriteria, glinquiryaccountcriteria);
         pdsglinquiryaccount.ttblglinquiryaccountcriteria.AddttblglinquiryaccountcriteriaRow((pdsglinquiryaccountDataSet.ttblglinquiryaccountcriteriaRow)ttblglinquiryaccountcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchAcctDetail - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchAcctDetail(ref pdsContext, ref pdsglinquiryaccount, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchAcctDetail - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglinquiryaccount); 
    
            foreach (DataRow row in pdsglinquiryaccount.ttblglinquiryaccountresults)
            {
                results.Add(Glinquiryaccountresults.BuildGlinquiryaccountresultsFromRow(row));
            }
            return results;
        
      }

      public AsglinquiryFetchAcctTransResponseAPI FetchAcctTrans(Gliatranscriteria gliatranscriteria)
      {   
         var result = new AsglinquiryFetchAcctTransResponseAPI();
         
         var pdsgliatrans = new pdsgliatransDataSet();
            
         DataRow ttblgliatranscriteriaCriteria = pdsgliatrans.ttblgliatranscriteria.NewttblgliatranscriteriaRow();
         Gliatranscriteria.UpdateRowFromGliatranscriteria(ref ttblgliatranscriteriaCriteria, gliatranscriteria);
         pdsgliatrans.ttblgliatranscriteria.AddttblgliatranscriteriaRow((pdsgliatransDataSet.ttblgliatranscriteriaRow)ttblgliatranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("FetchAcctTrans - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchAcctTrans(ref pdsContext, ref pdsgliatrans, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("FetchAcctTrans - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgliatrans); 
    
         foreach (DataRow row in pdsgliatrans.ttblgliatransresults)
         {
            result.gliatransresults.Add(Gliatransresults.BuildGliatransresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Gliatransrevresults> FetchAcctTransRev(Gliatransrevcriteria gliatransrevcriteria)
      {   
         var results = new List<Gliatransrevresults>();
         
         var pdsgliatransrev = new pdsgliatransrevDataSet();
            
         DataRow ttblgliatransrevcriteriaCriteria = pdsgliatransrev.ttblgliatransrevcriteria.NewttblgliatransrevcriteriaRow();
         Gliatransrevcriteria.UpdateRowFromGliatransrevcriteria(ref ttblgliatransrevcriteriaCriteria, gliatransrevcriteria);
         pdsgliatransrev.ttblgliatransrevcriteria.AddttblgliatransrevcriteriaRow((pdsgliatransrevDataSet.ttblgliatransrevcriteriaRow)ttblgliatransrevcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchAcctTransRev - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchAcctTransRev(ref pdsContext, ref pdsgliatransrev, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchAcctTransRev - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgliatransrev); 
    
            foreach (DataRow row in pdsgliatransrev.ttblgliatransrevresults)
            {
                results.Add(Gliatransrevresults.BuildGliatransrevresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Gliahistbalresults> FetchHistBal(Gliahistbalcriteria gliahistbalcriteria)
      {   
         var results = new List<Gliahistbalresults>();
         
         var pdsgliahistbal = new pdsgliahistbalDataSet();
            
         DataRow ttblgliahistbalcriteriaCriteria = pdsgliahistbal.ttblgliahistbalcriteria.NewttblgliahistbalcriteriaRow();
         Gliahistbalcriteria.UpdateRowFromGliahistbalcriteria(ref ttblgliahistbalcriteriaCriteria, gliahistbalcriteria);
         pdsgliahistbal.ttblgliahistbalcriteria.AddttblgliahistbalcriteriaRow((pdsgliahistbalDataSet.ttblgliahistbalcriteriaRow)ttblgliahistbalcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("FetchHistBal - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.FetchHistBal(ref pdsContext, ref pdsgliahistbal, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("FetchHistBal - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgliahistbal); 
    
            foreach (DataRow row in pdsgliahistbal.ttblgliahistbalresults)
            {
                results.Add(Gliahistbalresults.BuildGliahistbalresultsFromRow(row));
            }
            return results;
        
      }

      public Gliabdgcmpresults GLBdgCmp(Gliabdgcmpcriteria gliabdgcmpcriteria)
      {   
         var result = new Gliabdgcmpresults();
         
         var pdsgliabdgcmp = new pdsgliabdgcmpDataSet();
            
         DataRow ttblgliabdgcmpcriteriaCriteria = pdsgliabdgcmp.ttblgliabdgcmpcriteria.NewttblgliabdgcmpcriteriaRow();
         Gliabdgcmpcriteria.UpdateRowFromGliabdgcmpcriteria(ref ttblgliabdgcmpcriteriaCriteria, gliabdgcmpcriteria);
         pdsgliabdgcmp.ttblgliabdgcmpcriteria.AddttblgliabdgcmpcriteriaRow((pdsgliabdgcmpDataSet.ttblgliabdgcmpcriteriaRow)ttblgliabdgcmpcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLBdgCmp - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLBdgCmp(ref pdsContext, ref pdsgliabdgcmp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLBdgCmp - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgliabdgcmp); 
    
         if (pdsgliabdgcmp.ttblgliabdgcmpresults.Count > 0) 
         { 
             result = Gliabdgcmpresults.BuildGliabdgcmpresultsFromRow(pdsgliabdgcmp.ttblgliabdgcmpresults[0]);
         } 
              
          
         return result;
          
      }

      public Gliayrcmpresults GLYrCmp(Gliayrcmpcriteria gliayrcmpcriteria)
      {   
         var result = new Gliayrcmpresults();
         
         var pdsgliayrcmp = new pdsgliayrcmpDataSet();
            
         DataRow ttblgliayrcmpcriteriaCriteria = pdsgliayrcmp.ttblgliayrcmpcriteria.NewttblgliayrcmpcriteriaRow();
         Gliayrcmpcriteria.UpdateRowFromGliayrcmpcriteria(ref ttblgliayrcmpcriteriaCriteria, gliayrcmpcriteria);
         pdsgliayrcmp.ttblgliayrcmpcriteria.AddttblgliayrcmpcriteriaRow((pdsgliayrcmpDataSet.ttblgliayrcmpcriteriaRow)ttblgliayrcmpcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLYrCmp - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLYrCmp(ref pdsContext, ref pdsgliayrcmp, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLYrCmp - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgliayrcmp); 
    
         if (pdsgliayrcmp.ttblgliayrcmpresults.Count > 0) 
         { 
             result = Gliayrcmpresults.BuildGliayrcmpresultsFromRow(pdsgliayrcmp.ttblgliayrcmpresults[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Glifresults> GLIFSearch(Glifcriteria glifcriteria)
      {   
         var results = new List<Glifresults>();
         
         var pdsglifsearch = new pdsglifsearchDataSet();
            
         DataRow ttblglifcriteriaCriteria = pdsglifsearch.ttblglifcriteria.NewttblglifcriteriaRow();
         Glifcriteria.UpdateRowFromGlifcriteria(ref ttblglifcriteriaCriteria, glifcriteria);
         pdsglifsearch.ttblglifcriteria.AddttblglifcriteriaRow((pdsglifsearchDataSet.ttblglifcriteriaRow)ttblglifcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLIFSearch - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLIFSearch(ref pdsContext, ref pdsglifsearch, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLIFSearch - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglifsearch); 
    
            foreach (DataRow row in pdsglifsearch.ttblglifresults)
            {
                results.Add(Glifresults.BuildGlifresultsFromRow(row));
            }
            return results;
        
      }

      public AsglinquiryGLIFDetailBannerResponseAPI GLIFDetailBanner(Glifdetailbannercriteria glifdetailbannercriteria)
      {   
         var result = new AsglinquiryGLIFDetailBannerResponseAPI();
         
         var pdsglifdetailbanner = new pdsglifdetailbannerDataSet();
            
         var pdsglif = new pdsglifDataSet();
            
         DataRow ttblglifdetailbannercriteriaCriteria = pdsglifdetailbanner.ttblglifdetailbannercriteria.NewttblglifdetailbannercriteriaRow();
         Glifdetailbannercriteria.UpdateRowFromGlifdetailbannercriteria(ref ttblglifdetailbannercriteriaCriteria, glifdetailbannercriteria);
         pdsglifdetailbanner.ttblglifdetailbannercriteria.AddttblglifdetailbannercriteriaRow((pdsglifdetailbannerDataSet.ttblglifdetailbannercriteriaRow)ttblglifdetailbannercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLIFDetailBanner - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLIFDetailBanner(ref pdsContext, ref pdsglifdetailbanner, out pdsglif, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLIFDetailBanner - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglifdetailbanner); 
    
         if (pdsglif.ttblglif.Count > 0)
         {
            result.glif = Glif.BuildGlifFromRow(pdsglif.ttblglif[0]);
         }
                    
         if (pdsglifdetailbanner.ttblglifdetailbannerresults.Count > 0)
         {
            result.glifdetailbannerresults = Glifdetailbannerresults.BuildGlifdetailbannerresultsFromRow(pdsglifdetailbanner.ttblglifdetailbannerresults[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Glifdetailbrowserresults> GLIFDetailBrowser(Glifdetailbrowsercriteria glifdetailbrowsercriteria)
      {   
         var results = new List<Glifdetailbrowserresults>();
         
         var pdsglifdetailbrowser = new pdsglifdetailbrowserDataSet();
            
         DataRow ttblglifdetailbrowsercriteriaCriteria = pdsglifdetailbrowser.ttblglifdetailbrowsercriteria.NewttblglifdetailbrowsercriteriaRow();
         Glifdetailbrowsercriteria.UpdateRowFromGlifdetailbrowsercriteria(ref ttblglifdetailbrowsercriteriaCriteria, glifdetailbrowsercriteria);
         pdsglifdetailbrowser.ttblglifdetailbrowsercriteria.AddttblglifdetailbrowsercriteriaRow((pdsglifdetailbrowserDataSet.ttblglifdetailbrowsercriteriaRow)ttblglifdetailbrowsercriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLIFDetailBrowser - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLIFDetailBrowser(ref pdsContext, ref pdsglifdetailbrowser, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLIFDetailBrowser - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglifdetailbrowser); 
    
            foreach (DataRow row in pdsglifdetailbrowser.ttblglifdetailbrowserresults)
            {
                results.Add(Glifdetailbrowserresults.BuildGlifdetailbrowserresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Glifdetailhistresults> GLIFDetailHist(Glifdetailhistcriteria glifdetailhistcriteria)
      {   
         var results = new List<Glifdetailhistresults>();
         
         var pdsglifdetailhist = new pdsglifdetailhistDataSet();
            
         DataRow ttblglifdetailhistcriteriaCriteria = pdsglifdetailhist.ttblglifdetailhistcriteria.NewttblglifdetailhistcriteriaRow();
         Glifdetailhistcriteria.UpdateRowFromGlifdetailhistcriteria(ref ttblglifdetailhistcriteriaCriteria, glifdetailhistcriteria);
         pdsglifdetailhist.ttblglifdetailhistcriteria.AddttblglifdetailhistcriteriaRow((pdsglifdetailhistDataSet.ttblglifdetailhistcriteriaRow)ttblglifdetailhistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLIFDetailHist - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLIFDetailHist(ref pdsContext, ref pdsglifdetailhist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLIFDetailHist - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglifdetailhist); 
    
            foreach (DataRow row in pdsglifdetailhist.ttblglifdetailhistresults)
            {
                results.Add(Glifdetailhistresults.BuildGlifdetailhistresultsFromRow(row));
            }
            return results;
        
      }

      public Glacctauthinfo GLAccountAuthorizationInfo(Glacctauthcriteria glacctauthcriteria)
      {   
         var result = new Glacctauthinfo();
         
         var pdsglacctauthinfo = new pdsglacctauthinfoDataSet();
            
         DataRow ttblglacctauthcriteriaCriteria = pdsglacctauthinfo.ttblglacctauthcriteria.NewttblglacctauthcriteriaRow();
         Glacctauthcriteria.UpdateRowFromGlacctauthcriteria(ref ttblglacctauthcriteriaCriteria, glacctauthcriteria);
         pdsglacctauthinfo.ttblglacctauthcriteria.AddttblglacctauthcriteriaRow((pdsglacctauthinfoDataSet.ttblglacctauthcriteriaRow)ttblglacctauthcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLAccountAuthorizationInfo - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLAccountAuthorizationInfo(ref pdsContext, ref pdsglacctauthinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLAccountAuthorizationInfo - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglacctauthinfo); 
    
         if (pdsglacctauthinfo.ttblglacctauthinfo.Count > 0) 
         { 
             result = Glacctauthinfo.BuildGlacctauthinfoFromRow(pdsglacctauthinfo.ttblglacctauthinfo[0]);
         } 
              
          
         return result;
          
      }

      public Gldivauthinfo GLDivisionAuthorizationInfo(int iDivno)
      {   
         var result = new Gldivauthinfo();
         
         var pdsgldivauthinfo = new pdsgldivauthinfoDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLDivisionAuthorizationInfo - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLDivisionAuthorizationInfo(ref pdsContext,  iDivno, out pdsgldivauthinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLDivisionAuthorizationInfo - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsgldivauthinfo); 
    
         if (pdsgldivauthinfo.ttblgldivauthinfo.Count > 0) 
         { 
             result = Gldivauthinfo.BuildGldivauthinfoFromRow(pdsgldivauthinfo.ttblgldivauthinfo[0]);
         } 
              
          
         return result;
          
      }

      public Glsacheckfornull GLSACheckForNull(Glsacheckfornull glsacheckfornull)
      {   
         var result = new Glsacheckfornull();
         
         var pdsglsacheckfornull = new pdsglsacheckfornullDataSet();
            
         DataRow ttblglsacheckfornullCriteria = pdsglsacheckfornull.ttblglsacheckfornull.NewttblglsacheckfornullRow();
         Glsacheckfornull.UpdateRowFromGlsacheckfornull(ref ttblglsacheckfornullCriteria, glsacheckfornull);
         pdsglsacheckfornull.ttblglsacheckfornull.AddttblglsacheckfornullRow((pdsglsacheckfornullDataSet.ttblglsacheckfornullRow)ttblglsacheckfornullCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("GLSACheckForNull - Asglinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsglinquiryproxy = this.proxyAppObject.CreatePO_asglinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsglinquiryproxy.GLSACheckForNull(ref pdsContext, ref pdsglsacheckfornull, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("GLSACheckForNull - Asglinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsglsacheckfornull); 
    
         if (pdsglsacheckfornull.ttblglsacheckfornull.Count > 0) 
         { 
             result = Glsacheckfornull.BuildGlsacheckfornullFromRow(pdsglsacheckfornull.ttblglsacheckfornull[0]);
         } 
              
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  