//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Interfaces;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.GL.Data.Repositories
{
   using Infor.Sxe.GL.Data.Adapters;
   
   using Models.PdsContext;
   using Models.Pdsgldisplayjournal;
   using Models.Pdsglopenjournal;
   using Models.Pdsgletioffsetaccts;
   using Models.Pdsmessaging;
   using Models.Pdsglembsearchupdate;
   using Models.Pdsgletgrp;
   using Models.Pdsgletresults;
   using Models.Pdsgletentry;
   using Models.Pdsgletbrowse;
   using Models.Pdsgletfinupdrept;
   using Models.Pdsprintersettings;
   using Models.Pdsgleta;
   using Models.Pdsgletainitiatepd;
   using Models.Pdsgletaparam;
   using Models.Pdsglupdate;
   using Models.Complex;

   public partial class AsglentryRepository : RepositoryBase
   {
      private AsglentryAdapter adapter;
  
      public AsglentryRepository(IProgressConnection connection)
      {
         this.adapter = new AsglentryAdapter(connection);
         this.Cono = this.adapter.Cono;
         this.OnCreated();
      }
  
      partial void OnCreated();
      
      public void GLCloseJournal(int iJrnlno)
      {
         this.adapter.GLCloseJournal(iJrnlno);
      }
  
      public Gldisplayjournalresults GLDisplayJournal(Gldisplayjournalcriteria gldisplayjournalcriteria)
      {
         return this.adapter.GLDisplayJournal(gldisplayjournalcriteria);
      }
  
      public AsglentryGLOpenJournalResponseAPI GLOpenJournal(Glopenjournalcriteria glopenjournalcriteria)
      {
         return this.adapter.GLOpenJournal(glopenjournalcriteria);
      }
  
      public AsglentryGLReOpenJournalResponseAPI GLReOpenJournal(Glopenjournalcriteria glopenjournalcriteria)
      {
         return this.adapter.GLReOpenJournal(glopenjournalcriteria);
      }
  
      public AsglentrySetDefaultPeriodsResponseAPI SetDefaultPeriods()
      {
         return this.adapter.SetDefaultPeriods();
      }
  
      public IEnumerable<Messaging> GLETIValidateOffsetAccounts(AsglentryGLETIValidateOffsetAccountsRequestAPI AsglentryGLETIValidateOffsetAccountsRequestAPI)
      {
         return this.adapter.GLETIValidateOffsetAccounts(AsglentryGLETIValidateOffsetAccountsRequestAPI);
      }
  
      public AsglentryGLEMBSearchResponseAPI GLEMBSearch(Glembcriteria glembcriteria)
      {
         return this.adapter.GLEMBSearch(glembcriteria);
      }
  
      public AsglentryGLEMBUpdateResponseAPI GLEMBUpdate(Glembcriteria glembcriteria)
      {
         return this.adapter.GLEMBUpdate(glembcriteria);
      }
  
      public AsglentryFetchGrpDetailResponseAPI FetchGrpDetail(Gletgrpcriteria gletgrpcriteria)
      {
         return this.adapter.FetchGrpDetail(gletgrpcriteria);
      }
  
      public string CreateNewGroup()
      {
         return this.adapter.CreateNewGroup();
      }
  
      public AsglentryEntryGLETUpdResponseAPI EntryGLETUpd(Gletentrycriteria gletentrycriteria)
      {
         return this.adapter.EntryGLETUpd(gletentrycriteria);
      }
  
      public bool GLETHistVisible(string cGlno)
      {
         return this.adapter.GLETHistVisible(cGlno);
      }
  
      public Gletamtresults TransbrowseGLET(Gletbrowsecriteria gletbrowsecriteria)
      {
         return this.adapter.TransbrowseGLET(gletbrowsecriteria);
      }
  
      public void FinalUpdateGLET(string cGroupName, int iJrnlno)
      {
         this.adapter.FinalUpdateGLET(cGroupName, iJrnlno);
      }
  
      public Gletfinupdrept GLETFinUpdReptInit(string cGroupName)
      {
         return this.adapter.GLETFinUpdReptInit(cGroupName);
      }
  
      public void GLETFinUpdReptRun(AsglentryGLETFinUpdReptRunRequestAPI AsglentryGLETFinUpdReptRunRequestAPI)
      {
         this.adapter.GLETFinUpdReptRun(AsglentryGLETFinUpdReptRunRequestAPI);
      }
  
      public AsglentryGLEMBFieldChangeResponseAPI GLEMBFieldChange()
      {
         return this.adapter.GLEMBFieldChange();
      }
  
      public AsglentryGLEMBValueResponseAPI GLEMBValue(Glembcriteria glembcriteria)
      {
         return this.adapter.GLEMBValue(glembcriteria);
      }
  
      public AsglentryGLETAInitiateARResponseAPI GLETAInitiateAR(AsglentryGLETAInitiateARRequestAPI AsglentryGLETAInitiateARRequestAPI)
      {
         return this.adapter.GLETAInitiateAR(AsglentryGLETAInitiateARRequestAPI);
      }
  
      public AsglentryGLETAInitiatePDResponseAPI GLETAInitiatePD(Gletainitiatepd gletainitiatepd)
      {
         return this.adapter.GLETAInitiatePD(gletainitiatepd);
      }
  
      public AsglentryGLETAFieldLeaveResponseAPI GLETAFieldLeave(AsglentryGLETAFieldLeaveRequestAPI AsglentryGLETAFieldLeaveRequestAPI)
      {
         return this.adapter.GLETAFieldLeave(AsglentryGLETAFieldLeaveRequestAPI);
      }
  
      public AsglentryGLETASetAmountToProofResponseAPI GLETASetAmountToProof(AsglentryGLETASetAmountToProofRequestAPI AsglentryGLETASetAmountToProofRequestAPI)
      {
         return this.adapter.GLETASetAmountToProof(AsglentryGLETASetAmountToProofRequestAPI);
      }
  
      public AsglentryGLETAConvertPercentToAmountResponseAPI GLETAConvertPercentToAmount(AsglentryGLETAConvertPercentToAmountRequestAPI AsglentryGLETAConvertPercentToAmountRequestAPI)
      {
         return this.adapter.GLETAConvertPercentToAmount(AsglentryGLETAConvertPercentToAmountRequestAPI);
      }
  
      public IEnumerable<Glupdate> GLETAGetUpdateData(AsglentryGLETAGetUpdateDataRequestAPI AsglentryGLETAGetUpdateDataRequestAPI)
      {
         return this.adapter.GLETAGetUpdateData(AsglentryGLETAGetUpdateDataRequestAPI);
      }
  
      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }
         this.adapter?.Dispose();	
         this.adapter = null;
         base.Dispose(true);
      }
   }
}
#pragma warning restore 1591
  