//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AP.Data.Adapters
{
   using com.infor.sxproxy.approxy;
   using com.infor.sxproxy.approxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsapivcreatetrans;
   using Models.Pdsappurchasehist;
   using Models.Pdsappocosting;
   using Models.Pdsvendorbaldisplay;
   using Models.Pdsapetalookup;
   using Models.Complex;

   public partial class AsapinquiryAdapter : AdapterBase<pdsContextDataSet>
   {
      private APProxyAppObject proxyAppObject;
      
      public AsapinquiryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new APProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsapinquiryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public AsapinquiryAPIVCreateTransactionsResponseAPI APIVCreateTransactions(Apivcreatetranscriteria apivcreatetranscriteria)
      {   
         var result = new AsapinquiryAPIVCreateTransactionsResponseAPI();
         
         var pdsapivcreatetrans = new pdsapivcreatetransDataSet();
            
         DataRow ttblapivcreatetranscriteriaCriteria = pdsapivcreatetrans.ttblapivcreatetranscriteria.NewttblapivcreatetranscriteriaRow();
         Apivcreatetranscriteria.UpdateRowFromApivcreatetranscriteria(ref ttblapivcreatetranscriteriaCriteria, apivcreatetranscriteria);
         pdsapivcreatetrans.ttblapivcreatetranscriteria.AddttblapivcreatetranscriteriaRow((pdsapivcreatetransDataSet.ttblapivcreatetranscriteriaRow)ttblapivcreatetranscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("APIVCreateTransactions - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APIVCreateTransactions(ref pdsContext, ref pdsapivcreatetrans, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("APIVCreateTransactions - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapivcreatetrans); 
    
         foreach (DataRow row in pdsapivcreatetrans.ttblapivcreatetransresults)
         {
            result.apivcreatetransresults.Add(Apivcreatetransresults.BuildApivcreatetransresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public IEnumerable<Appurchasehistresults> APPurchaseHistory(Appurchasehistcriteria appurchasehistcriteria)
      {   
         var results = new List<Appurchasehistresults>();
         
         var pdsappurchasehist = new pdsappurchasehistDataSet();
            
         DataRow ttblappurchasehistcriteriaCriteria = pdsappurchasehist.ttblappurchasehistcriteria.NewttblappurchasehistcriteriaRow();
         Appurchasehistcriteria.UpdateRowFromAppurchasehistcriteria(ref ttblappurchasehistcriteriaCriteria, appurchasehistcriteria);
         pdsappurchasehist.ttblappurchasehistcriteria.AddttblappurchasehistcriteriaRow((pdsappurchasehistDataSet.ttblappurchasehistcriteriaRow)ttblappurchasehistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APPurchaseHistory - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APPurchaseHistory(ref pdsContext, ref pdsappurchasehist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APPurchaseHistory - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsappurchasehist); 
    
            foreach (DataRow row in pdsappurchasehist.ttblappurchasehistresults)
            {
                results.Add(Appurchasehistresults.BuildAppurchasehistresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Appocostingresults> APPOCosting(Appocostingcriteria appocostingcriteria)
      {   
         var results = new List<Appocostingresults>();
         
         var pdsappocosting = new pdsappocostingDataSet();
            
         DataRow ttblappocostingcriteriaCriteria = pdsappocosting.ttblappocostingcriteria.NewttblappocostingcriteriaRow();
         Appocostingcriteria.UpdateRowFromAppocostingcriteria(ref ttblappocostingcriteriaCriteria, appocostingcriteria);
         pdsappocosting.ttblappocostingcriteria.AddttblappocostingcriteriaRow((pdsappocostingDataSet.ttblappocostingcriteriaRow)ttblappocostingcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APPOCosting - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APPOCosting(ref pdsContext, ref pdsappocosting, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APPOCosting - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsappocosting); 
    
            foreach (DataRow row in pdsappocosting.ttblappocostingresults)
            {
                results.Add(Appocostingresults.BuildAppocostingresultsFromRow(row));
            }
            return results;
        
      }

      public AsapinquiryAPETAuthPointInfoResponseAPI APETAuthPointInfo(AsapinquiryAPETAuthPointInfoRequestAPI AsapinquiryAPETAuthPointInfoRequestAPI)
      {   
         var result = new AsapinquiryAPETAuthPointInfoResponseAPI();
         
         bool pvVendallowsdups = false;
         bool pvDupinvnofl = false;
         string cErrorMessage = string.Empty;
   
         var  pvApinvno = AsapinquiryAPETAuthPointInfoRequestAPI.pvApinvno;
            
         var  pvVendno = AsapinquiryAPETAuthPointInfoRequestAPI.pvVendno;
            
         var  pvTranscd = AsapinquiryAPETAuthPointInfoRequestAPI.pvTranscd;
            
         
         NLogLoggerP.Trace("APETAuthPointInfo - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APETAuthPointInfo(ref pdsContext,  pvApinvno,  pvVendno,  pvTranscd, out pvVendallowsdups, out pvDupinvnofl, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APETAuthPointInfo - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
          
    
         result.pvVendallowsdups = pvVendallowsdups;
         result.pvDupinvnofl = pvDupinvnofl;
          
         return result;
          
      }

      public IEnumerable<Vendorbaldisplayresults> VendorBalDisplay(Vendorbaldisplaycriteria vendorbaldisplaycriteria)
      {   
         var results = new List<Vendorbaldisplayresults>();
         
         var pdsvendorbaldisplay = new pdsvendorbaldisplayDataSet();
            
         DataRow ttblvendorbaldisplaycriteriaCriteria = pdsvendorbaldisplay.ttblvendorbaldisplaycriteria.NewttblvendorbaldisplaycriteriaRow();
         Vendorbaldisplaycriteria.UpdateRowFromVendorbaldisplaycriteria(ref ttblvendorbaldisplaycriteriaCriteria, vendorbaldisplaycriteria);
         pdsvendorbaldisplay.ttblvendorbaldisplaycriteria.AddttblvendorbaldisplaycriteriaRow((pdsvendorbaldisplayDataSet.ttblvendorbaldisplaycriteriaRow)ttblvendorbaldisplaycriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("VendorBalDisplay - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.VendorBalDisplay(ref pdsContext, ref pdsvendorbaldisplay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("VendorBalDisplay - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsvendorbaldisplay); 
    
            foreach (DataRow row in pdsvendorbaldisplay.ttblvendorbaldisplayresults)
            {
                results.Add(Vendorbaldisplayresults.BuildVendorbaldisplayresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apetalookupresults> APIVApetaLookup(Apetalookupcriteria apetalookupcriteria)
      {   
         var results = new List<Apetalookupresults>();
         
         var pdsapetalookup = new pdsapetalookupDataSet();
            
         DataRow ttblapetalookupcriteriaCriteria = pdsapetalookup.ttblapetalookupcriteria.NewttblapetalookupcriteriaRow();
         Apetalookupcriteria.UpdateRowFromApetalookupcriteria(ref ttblapetalookupcriteriaCriteria, apetalookupcriteria);
         pdsapetalookup.ttblapetalookupcriteria.AddttblapetalookupcriteriaRow((pdsapetalookupDataSet.ttblapetalookupcriteriaRow)ttblapetalookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APIVApetaLookup - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APIVApetaLookup(ref pdsContext, ref pdsapetalookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APIVApetaLookup - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapetalookup); 
    
            foreach (DataRow row in pdsapetalookup.ttblapetalookupresults)
            {
                results.Add(Apetalookupresults.BuildApetalookupresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apetalookupresults> APETAReprocess(Apetalookupcriteria apetalookupcriteria)
      {   
         var results = new List<Apetalookupresults>();
         
         var pdsapetalookup = new pdsapetalookupDataSet();
            
         DataRow ttblapetalookupcriteriaCriteria = pdsapetalookup.ttblapetalookupcriteria.NewttblapetalookupcriteriaRow();
         Apetalookupcriteria.UpdateRowFromApetalookupcriteria(ref ttblapetalookupcriteriaCriteria, apetalookupcriteria);
         pdsapetalookup.ttblapetalookupcriteria.AddttblapetalookupcriteriaRow((pdsapetalookupDataSet.ttblapetalookupcriteriaRow)ttblapetalookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APETAReprocess - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APETAReprocess(ref pdsContext, ref pdsapetalookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APETAReprocess - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapetalookup); 
    
            foreach (DataRow row in pdsapetalookup.ttblapetalookupresults)
            {
                results.Add(Apetalookupresults.BuildApetalookupresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apetalookupresults> APIVApetaSingleLookup(Apetalookupcriteria apetalookupcriteria)
      {   
         var results = new List<Apetalookupresults>();
         
         var pdsapetalookup = new pdsapetalookupDataSet();
            
         DataRow ttblapetalookupcriteriaCriteria = pdsapetalookup.ttblapetalookupcriteria.NewttblapetalookupcriteriaRow();
         Apetalookupcriteria.UpdateRowFromApetalookupcriteria(ref ttblapetalookupcriteriaCriteria, apetalookupcriteria);
         pdsapetalookup.ttblapetalookupcriteria.AddttblapetalookupcriteriaRow((pdsapetalookupDataSet.ttblapetalookupcriteriaRow)ttblapetalookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APIVApetaSingleLookup - Asapinquiry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapinquiryproxy = this.proxyAppObject.CreatePO_asapinquiryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapinquiryproxy.APIVApetaSingleLookup(ref pdsContext, ref pdsapetalookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APIVApetaSingleLookup - Asapinquiry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapetalookup); 
    
            foreach (DataRow row in pdsapetalookup.ttblapetalookupresults)
            {
                results.Add(Apetalookupresults.BuildApetalookupresultsFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  