//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AP.Data.Adapters
{
   using com.infor.sxproxy.approxy;
   using com.infor.sxproxy.approxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsapeiinvdetaddlinfo;
   using Models.Pdsapeirowids;
   using Models.Pdsapeiinvdetmanpyappinv;
   using Models.Pdsapeiinvdetmanpyopninv;
   using Models.Pdsapeiinvdetcmappinv;
   using Models.Pdsapeiinvdetcmopninv;
   using Models.Pdsapeiinvdetpolnaddonslct;
   using Models.Pdsapeiinvdetaddonpoaddons;
   using Models.Pdsapeiinvdetbanner;
   using Models.Pdsapeiinvdettaxes;
   using Models.Pdsapeiinvdettaxjur;
   using Models.Pdsapeceserial;
   using Models.Pdsapeceserialview;
   using Models.Pdsapeiinvoicelist;
   using Models.Pdsapeiinvdetdropdowns;
   using Models.Pdsapeiinvoicedetail;
   using Models.Pdsmessaging;
   using Models.Pdsapeiinvoicetotals;
   using Models.Pdsapeiinvdetgldist;
   using Models.Pdsapeiinvdetgldistproof;
   using Models.Pdsapeelookup;
   using Models.Pdsapeetotlookup;
   using Models.Pdsapeemaint;
   using Models.Pdsapeesplitpayrowids;
   using Models.Pdsapeesplitpay;
   using Models.Pdsprintersettings;
   using Models.Pdsapemb;
   using Models.Pdsapems;
   using Models.Pdsapeiinvdetdelete;
   using Models.Pdsapeiinvdetfinalupdt;
   using Models.Pdsapeiinvdeterrors;
   using Models.Pdsapeiinvdetpohdrlist;
   using Models.Pdsapeiinvdetpohdr;
   using Models.Pdsapeiinvdetpolnproof;
   using Models.Pdsapeiinvdetpoln;
   using Models.Pdsapeiinvdetpolnlist;
   using Models.Pdsapeiinvdetpolntally;
   using Models.Pdsapeiinvdetpolnmanadd;
   using Models.Pdsapemacredits;
   using Models.Pdsapemainvoices;
   using Models.Pdsapemaupdate;
   using Models.Pdsapeiinvdetaddon;
   using Models.Pdsapeiinvdetaddontotals;
   using Models.Pdsapeiinvdetterms;
   using Models.Pdsapeiinvdettermstotals;
   using Models.Pdsapeiinvdettermssplit;
   using Models.Pdsapeiinvoicedetailflags;
   using Models.Complex;

   public partial class AsapentryAdapter : AdapterBase<pdsContextDataSet>
   {
      private APProxyAppObject proxyAppObject;
      
      public AsapentryAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new APProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in AsapentryAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      public Apeiinvdetaddlinfo APEIInvDetAddlInfoRetrieve(AsapentryAPEIInvDetAddlInfoRetrieveRequestAPI AsapentryAPEIInvDetAddlInfoRetrieveRequestAPI)
      {   
         var result = new Apeiinvdetaddlinfo();
         
         var pdsapeiinvdetaddlinfo = new pdsapeiinvdetaddlinfoDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetaddlinfoRow = pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.NewttblapeiinvdetaddlinfoRow();
         Apeiinvdetaddlinfo.UpdateRowFromApeiinvdetaddlinfo(ref ttblapeiinvdetaddlinfoRow, AsapentryAPEIInvDetAddlInfoRetrieveRequestAPI.apeiinvdetaddlinfo);
         pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.AddttblapeiinvdetaddlinfoRow((pdsapeiinvdetaddlinfoDataSet.ttblapeiinvdetaddlinfoRow)ttblapeiinvdetaddlinfoRow);
          
         var  lChangeMode = AsapentryAPEIInvDetAddlInfoRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetAddlInfoRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddlInfoRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvdetaddlinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddlInfoRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddlinfo); 
    
         if (pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.Count > 0) 
         { 
             result = Apeiinvdetaddlinfo.BuildApeiinvdetaddlinfoFromRow(pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetaddlinfo APEIInvDetAddlInfoUpdate(Apeiinvdetaddlinfo apeiinvdetaddlinfo)
      {   
         var result = new Apeiinvdetaddlinfo();
         
         var pdsapeiinvdetaddlinfo = new pdsapeiinvdetaddlinfoDataSet();
            
         DataRow ttblapeiinvdetaddlinfoCriteria = pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.NewttblapeiinvdetaddlinfoRow();
         Apeiinvdetaddlinfo.UpdateRowFromApeiinvdetaddlinfo(ref ttblapeiinvdetaddlinfoCriteria, apeiinvdetaddlinfo);
         pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.AddttblapeiinvdetaddlinfoRow((pdsapeiinvdetaddlinfoDataSet.ttblapeiinvdetaddlinfoRow)ttblapeiinvdetaddlinfoCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddlInfoUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddlInfoUpdate(ref pdsContext, ref pdsapeiinvdetaddlinfo, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddlInfoUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddlinfo); 
    
         if (pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo.Count > 0) 
         { 
             result = Apeiinvdetaddlinfo.BuildApeiinvdetaddlinfoFromRow(pdsapeiinvdetaddlinfo.ttblapeiinvdetaddlinfo[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetManPayAppliedInvListResponseAPI APEIInvDetManPayAppliedInvList(Apeirowids apeirowids)
      {   
         var result = new AsapentryAPEIInvDetManPayAppliedInvListResponseAPI();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
         decimal dProof = 0;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedInvList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedInvList(ref pdsContext,  pdsapeirowids, out pdsapeiinvdetmanpyappinv, out cErrorMessage, out dProof);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedInvList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         foreach (DataRow row in pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv)
         {
            result.apeiinvdetmanpyappinv.Add(Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(row));
         }     
         result.dProof = dProof;
          
         return result;
          
      }

      public IEnumerable<Apeiinvdetmanpyopninv> APEIInvDetManPayOpenInvList(Apeirowids apeirowids)
      {   
         var results = new List<Apeiinvdetmanpyopninv>();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetmanpyopninv = new pdsapeiinvdetmanpyopninvDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayOpenInvList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayOpenInvList(ref pdsContext,  pdsapeirowids, out pdsapeiinvdetmanpyopninv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayOpenInvList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
            foreach (DataRow row in pdsapeiinvdetmanpyopninv.ttblapeiinvdetmanpyopninv)
            {
                results.Add(Apeiinvdetmanpyopninv.BuildApeiinvdetmanpyopninvFromRow(row));
            }
            return results;
        
      }

      public bool APEIInvDetManPayOpenInvSelect(AsapentryAPEIInvDetManPayOpenInvSelectRequestAPI AsapentryAPEIInvDetManPayOpenInvSelectRequestAPI)
      {   
          
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetmanpyopninv = new pdsapeiinvdetmanpyopninvDataSet();
            
         string cErrorMessage = string.Empty;
         bool lUpdateSuccess = false;
   
         foreach (var obj in AsapentryAPEIInvDetManPayOpenInvSelectRequestAPI.apeiinvdetmanpyopninv)
         {
            DataRow ttblapeiinvdetmanpyopninvRow = pdsapeiinvdetmanpyopninv.ttblapeiinvdetmanpyopninv.NewttblapeiinvdetmanpyopninvRow();
            Apeiinvdetmanpyopninv.UpdateRowFromApeiinvdetmanpyopninv(ref ttblapeiinvdetmanpyopninvRow, obj);
            pdsapeiinvdetmanpyopninv.ttblapeiinvdetmanpyopninv.AddttblapeiinvdetmanpyopninvRow((pdsapeiinvdetmanpyopninvDataSet.ttblapeiinvdetmanpyopninvRow)ttblapeiinvdetmanpyopninvRow);
         }
          
         DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, AsapentryAPEIInvDetManPayOpenInvSelectRequestAPI.apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
          
         
         NLogLoggerP.Trace("APEIInvDetManPayOpenInvSelect - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayOpenInvSelect(ref pdsContext,  pdsapeirowids,  pdsapeiinvdetmanpyopninv, out cErrorMessage, out lUpdateSuccess);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayOpenInvSelect - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         return lUpdateSuccess;
      
      }

      public decimal APEIInvDetManPayAppliedInvDelete(AsapentryAPEIInvDetManPayAppliedInvDeleteRequestAPI AsapentryAPEIInvDetManPayAppliedInvDeleteRequestAPI)
      {   
          
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         string cErrorMessage = string.Empty;
         decimal dProof = 0;
   
         foreach (var obj in AsapentryAPEIInvDetManPayAppliedInvDeleteRequestAPI.apeiinvdetmanpyappinv)
         {
            DataRow ttblapeiinvdetmanpyappinvRow = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
            Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvRow, obj);
            pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvRow);
         }
          
         DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, AsapentryAPEIInvDetManPayAppliedInvDeleteRequestAPI.apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
          
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedInvDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedInvDelete(ref pdsContext,  pdsapeirowids,  pdsapeiinvdetmanpyappinv, out cErrorMessage, out dProof);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedInvDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         return dProof;
      
      }

      public Apeiinvdetmanpyappinv APEIInvDetManPayAppliedInvInit(Apeiinvdetmanpyappinv apeiinvdetmanpyappinv)
      {   
         var result = new Apeiinvdetmanpyappinv();
         
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         DataRow ttblapeiinvdetmanpyappinvCriteria = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
         Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvCriteria, apeiinvdetmanpyappinv);
         pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedInvInit - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedInvInit(ref pdsContext, ref pdsapeiinvdetmanpyappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedInvInit - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetmanpyappinv); 
    
         if (pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.Count > 0) 
         { 
             result = Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetmanpyappinv APEIInvDetManPayAppliedAddPrep(Apeiinvdetmanpyappinv apeiinvdetmanpyappinv)
      {   
         var result = new Apeiinvdetmanpyappinv();
         
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         DataRow ttblapeiinvdetmanpyappinvCriteria = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
         Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvCriteria, apeiinvdetmanpyappinv);
         pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedAddPrep - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedAddPrep(ref pdsContext, ref pdsapeiinvdetmanpyappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedAddPrep - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetmanpyappinv); 
    
         if (pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.Count > 0) 
         { 
             result = Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetmanpyappinv APEIInvDetManPayAppliedAddUpdt(Apeiinvdetmanpyappinv apeiinvdetmanpyappinv)
      {   
         var result = new Apeiinvdetmanpyappinv();
         
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         DataRow ttblapeiinvdetmanpyappinvCriteria = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
         Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvCriteria, apeiinvdetmanpyappinv);
         pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedAddUpdt - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedAddUpdt(ref pdsContext, ref pdsapeiinvdetmanpyappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedAddUpdt - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetmanpyappinv); 
    
         if (pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.Count > 0) 
         { 
             result = Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetmanpyappinv APEIInvDetManPayAppliedChgRetr(AsapentryAPEIInvDetManPayAppliedChgRetrRequestAPI AsapentryAPEIInvDetManPayAppliedChgRetrRequestAPI)
      {   
         var result = new Apeiinvdetmanpyappinv();
         
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetmanpyappinvRow = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
         Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvRow, AsapentryAPEIInvDetManPayAppliedChgRetrRequestAPI.apeiinvdetmanpyappinv);
         pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvRow);
          
         var  lChangeMode = AsapentryAPEIInvDetManPayAppliedChgRetrRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedChgRetr - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedChgRetr(ref pdsContext,  lChangeMode, ref pdsapeiinvdetmanpyappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedChgRetr - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetmanpyappinv); 
    
         if (pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.Count > 0) 
         { 
             result = Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetmanpyappinv APEIInvDetManPayAppliedChgUpdt(Apeiinvdetmanpyappinv apeiinvdetmanpyappinv)
      {   
         var result = new Apeiinvdetmanpyappinv();
         
         var pdsapeiinvdetmanpyappinv = new pdsapeiinvdetmanpyappinvDataSet();
            
         DataRow ttblapeiinvdetmanpyappinvCriteria = pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.NewttblapeiinvdetmanpyappinvRow();
         Apeiinvdetmanpyappinv.UpdateRowFromApeiinvdetmanpyappinv(ref ttblapeiinvdetmanpyappinvCriteria, apeiinvdetmanpyappinv);
         pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.AddttblapeiinvdetmanpyappinvRow((pdsapeiinvdetmanpyappinvDataSet.ttblapeiinvdetmanpyappinvRow)ttblapeiinvdetmanpyappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetManPayAppliedChgUpdt - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetManPayAppliedChgUpdt(ref pdsContext, ref pdsapeiinvdetmanpyappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetManPayAppliedChgUpdt - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetmanpyappinv); 
    
         if (pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv.Count > 0) 
         { 
             result = Apeiinvdetmanpyappinv.BuildApeiinvdetmanpyappinvFromRow(pdsapeiinvdetmanpyappinv.ttblapeiinvdetmanpyappinv[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetCreditMemoAppliedInvListResponseAPI APEIInvDetCreditMemoAppliedInvList(Apeirowids apeirowids)
      {   
         var result = new AsapentryAPEIInvDetCreditMemoAppliedInvListResponseAPI();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
         decimal dProof = 0;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedInvList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedInvList(ref pdsContext,  pdsapeirowids, out pdsapeiinvdetcmappinv, out cErrorMessage, out dProof);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedInvList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         foreach (DataRow row in pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv)
         {
            result.apeiinvdetcmappinv.Add(Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(row));
         }     
         result.dProof = dProof;
          
         return result;
          
      }

      public IEnumerable<Apeiinvdetcmopninv> APEIInvDetCreditMemoOpenInvList(Apeirowids apeirowids)
      {   
         var results = new List<Apeiinvdetcmopninv>();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetcmopninv = new pdsapeiinvdetcmopninvDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoOpenInvList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoOpenInvList(ref pdsContext,  pdsapeirowids, out pdsapeiinvdetcmopninv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoOpenInvList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
            foreach (DataRow row in pdsapeiinvdetcmopninv.ttblapeiinvdetcmopninv)
            {
                results.Add(Apeiinvdetcmopninv.BuildApeiinvdetcmopninvFromRow(row));
            }
            return results;
        
      }

      public decimal APEIInvDetCreditMemoAppliedInvDelete(AsapentryAPEIInvDetCreditMemoAppliedInvDeleteRequestAPI AsapentryAPEIInvDetCreditMemoAppliedInvDeleteRequestAPI)
      {   
          
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         string cErrorMessage = string.Empty;
         decimal dProof = 0;
   
         foreach (var obj in AsapentryAPEIInvDetCreditMemoAppliedInvDeleteRequestAPI.apeiinvdetcmappinv)
         {
            DataRow ttblapeiinvdetcmappinvRow = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
            Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvRow, obj);
            pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvRow);
         }
          
         DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, AsapentryAPEIInvDetCreditMemoAppliedInvDeleteRequestAPI.apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
          
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedInvDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedInvDelete(ref pdsContext,  pdsapeirowids,  pdsapeiinvdetcmappinv, out cErrorMessage, out dProof);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedInvDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         return dProof;
      
      }

      public bool APEIInvDetCreditMemoOpenInvSelect(AsapentryAPEIInvDetCreditMemoOpenInvSelectRequestAPI AsapentryAPEIInvDetCreditMemoOpenInvSelectRequestAPI)
      {   
          
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetcmopninv = new pdsapeiinvdetcmopninvDataSet();
            
         string cErrorMessage = string.Empty;
         bool lUpdateSuccess = false;
   
         foreach (var obj in AsapentryAPEIInvDetCreditMemoOpenInvSelectRequestAPI.apeiinvdetcmopninv)
         {
            DataRow ttblapeiinvdetcmopninvRow = pdsapeiinvdetcmopninv.ttblapeiinvdetcmopninv.NewttblapeiinvdetcmopninvRow();
            Apeiinvdetcmopninv.UpdateRowFromApeiinvdetcmopninv(ref ttblapeiinvdetcmopninvRow, obj);
            pdsapeiinvdetcmopninv.ttblapeiinvdetcmopninv.AddttblapeiinvdetcmopninvRow((pdsapeiinvdetcmopninvDataSet.ttblapeiinvdetcmopninvRow)ttblapeiinvdetcmopninvRow);
         }
          
         DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, AsapentryAPEIInvDetCreditMemoOpenInvSelectRequestAPI.apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
          
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoOpenInvSelect - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoOpenInvSelect(ref pdsContext,  pdsapeirowids,  pdsapeiinvdetcmopninv, out cErrorMessage, out lUpdateSuccess);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoOpenInvSelect - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         return lUpdateSuccess;
      
      }

      public Apeiinvdetcmappinv APEIInvDetCreditMemoAppliedInvInit(Apeiinvdetcmappinv apeiinvdetcmappinv)
      {   
         var result = new Apeiinvdetcmappinv();
         
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         DataRow ttblapeiinvdetcmappinvCriteria = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
         Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvCriteria, apeiinvdetcmappinv);
         pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedInvInit - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedInvInit(ref pdsContext, ref pdsapeiinvdetcmappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedInvInit - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetcmappinv); 
    
         if (pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.Count > 0) 
         { 
             result = Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetcmappinv APEIInvDetCreditMemoAppliedAddPrep(Apeiinvdetcmappinv apeiinvdetcmappinv)
      {   
         var result = new Apeiinvdetcmappinv();
         
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         DataRow ttblapeiinvdetcmappinvCriteria = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
         Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvCriteria, apeiinvdetcmappinv);
         pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedAddPrep - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedAddPrep(ref pdsContext, ref pdsapeiinvdetcmappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedAddPrep - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetcmappinv); 
    
         if (pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.Count > 0) 
         { 
             result = Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetcmappinv APEIInvDetCreditMemoAppliedAddUpdt(Apeiinvdetcmappinv apeiinvdetcmappinv)
      {   
         var result = new Apeiinvdetcmappinv();
         
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         DataRow ttblapeiinvdetcmappinvCriteria = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
         Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvCriteria, apeiinvdetcmappinv);
         pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedAddUpdt - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedAddUpdt(ref pdsContext, ref pdsapeiinvdetcmappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedAddUpdt - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetcmappinv); 
    
         if (pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.Count > 0) 
         { 
             result = Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetcmappinv APEIInvDetCreditMemoAppliedChgRetr(AsapentryAPEIInvDetCreditMemoAppliedChgRetrRequestAPI AsapentryAPEIInvDetCreditMemoAppliedChgRetrRequestAPI)
      {   
         var result = new Apeiinvdetcmappinv();
         
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetcmappinvRow = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
         Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvRow, AsapentryAPEIInvDetCreditMemoAppliedChgRetrRequestAPI.apeiinvdetcmappinv);
         pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvRow);
          
         var  lChangeMode = AsapentryAPEIInvDetCreditMemoAppliedChgRetrRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedChgRetr - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedChgRetr(ref pdsContext,  lChangeMode, ref pdsapeiinvdetcmappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedChgRetr - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetcmappinv); 
    
         if (pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.Count > 0) 
         { 
             result = Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetcmappinv APEIInvDetCreditMemoAppliedChgUpdt(Apeiinvdetcmappinv apeiinvdetcmappinv)
      {   
         var result = new Apeiinvdetcmappinv();
         
         var pdsapeiinvdetcmappinv = new pdsapeiinvdetcmappinvDataSet();
            
         DataRow ttblapeiinvdetcmappinvCriteria = pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.NewttblapeiinvdetcmappinvRow();
         Apeiinvdetcmappinv.UpdateRowFromApeiinvdetcmappinv(ref ttblapeiinvdetcmappinvCriteria, apeiinvdetcmappinv);
         pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.AddttblapeiinvdetcmappinvRow((pdsapeiinvdetcmappinvDataSet.ttblapeiinvdetcmappinvRow)ttblapeiinvdetcmappinvCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCreditMemoAppliedChgUpdt - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCreditMemoAppliedChgUpdt(ref pdsContext, ref pdsapeiinvdetcmappinv, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCreditMemoAppliedChgUpdt - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetcmappinv); 
    
         if (pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv.Count > 0) 
         { 
             result = Apeiinvdetcmappinv.BuildApeiinvdetcmappinvFromRow(pdsapeiinvdetcmappinv.ttblapeiinvdetcmappinv[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apeiinvdetpolnaddonslct> APEIInvDetPOLineAddonSelect(int iPONo, int iPOSuf)
      {   
         var results = new List<Apeiinvdetpolnaddonslct>();
         
         var pdsapeiinvdetpolnaddonslct = new pdsapeiinvdetpolnaddonslctDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineAddonSelect - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineAddonSelect(ref pdsContext,  iPONo,  iPOSuf, out pdsapeiinvdetpolnaddonslct, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineAddonSelect - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpolnaddonslct); 
    
            foreach (DataRow row in pdsapeiinvdetpolnaddonslct.ttblapeiinvdetpolnaddonslct)
            {
                results.Add(Apeiinvdetpolnaddonslct.BuildApeiinvdetpolnaddonslctFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apeiinvdetaddonpoaddons> APEIInvDetAddonPOAddonGet(int iPONo, int iPOSuf)
      {   
         var results = new List<Apeiinvdetaddonpoaddons>();
         
         var pdsapeiinvdetaddonpoaddons = new pdsapeiinvdetaddonpoaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonPOAddonGet - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonPOAddonGet(ref pdsContext,  iPONo,  iPOSuf, out pdsapeiinvdetaddonpoaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonPOAddonGet - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddonpoaddons); 
    
            foreach (DataRow row in pdsapeiinvdetaddonpoaddons.ttblapeiinvdetaddonpoaddons)
            {
                results.Add(Apeiinvdetaddonpoaddons.BuildApeiinvdetaddonpoaddonsFromRow(row));
            }
            return results;
        
      }

      public void APEIInvDetAddonPOAddonUpdt(AsapentryAPEIInvDetAddonPOAddonUpdtRequestAPI AsapentryAPEIInvDetAddonPOAddonUpdtRequestAPI)
      {   
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvdetaddonpoaddons = new pdsapeiinvdetaddonpoaddonsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEIInvDetAddonPOAddonUpdtRequestAPI.apeiinvdetaddonpoaddons)
         {
            DataRow ttblapeiinvdetaddonpoaddonsRow = pdsapeiinvdetaddonpoaddons.ttblapeiinvdetaddonpoaddons.NewttblapeiinvdetaddonpoaddonsRow();
            Apeiinvdetaddonpoaddons.UpdateRowFromApeiinvdetaddonpoaddons(ref ttblapeiinvdetaddonpoaddonsRow, obj);
            pdsapeiinvdetaddonpoaddons.ttblapeiinvdetaddonpoaddons.AddttblapeiinvdetaddonpoaddonsRow((pdsapeiinvdetaddonpoaddonsDataSet.ttblapeiinvdetaddonpoaddonsRow)ttblapeiinvdetaddonpoaddonsRow);
         }
          
         DataRow ttblapeiinvdetbannerRow = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerRow, AsapentryAPEIInvDetAddonPOAddonUpdtRequestAPI.apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerRow);
          
         
         NLogLoggerP.Trace("APEIInvDetAddonPOAddonUpdt - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonPOAddonUpdt(ref pdsContext,  pdsapeiinvdetbanner,  pdsapeiinvdetaddonpoaddons, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonPOAddonUpdt - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner);
      }

      public AsapentryAPEIInvDetTaxesListResponseAPI APEIInvDetTaxesList(Apeiinvdetbanner apeiinvdetbanner)
      {   
         var result = new AsapentryAPEIInvDetTaxesListResponseAPI();
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvdettaxes = new pdsapeiinvdettaxesDataSet();
            
         var pdsapeiinvdettaxjur = new pdsapeiinvdettaxjurDataSet();
            
         DataRow ttblapeiinvdetbannerCriteria = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerCriteria, apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTaxesList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTaxesList(ref pdsContext,  pdsapeiinvdetbanner, out pdsapeiinvdettaxes, out pdsapeiinvdettaxjur, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTaxesList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner); 
    
         if (pdsapeiinvdettaxes.ttblapeiinvdettaxes.Count > 0)
         {
            result.apeiinvdettaxes = Apeiinvdettaxes.BuildApeiinvdettaxesFromRow(pdsapeiinvdettaxes.ttblapeiinvdettaxes[0]);
         }
                    
         foreach (DataRow row in pdsapeiinvdettaxjur.ttblapeiinvdettaxjur)
         {
            result.apeiinvdettaxjur.Add(Apeiinvdettaxjur.BuildApeiinvdettaxjurFromRow(row));
         }     
          
         return result;
          
      }

      public Apeiinvdettaxes APEIInvDetTaxesFieldChange(AsapentryAPEIInvDetTaxesFieldChangeRequestAPI AsapentryAPEIInvDetTaxesFieldChangeRequestAPI)
      {   
         var result = new Apeiinvdettaxes();
         
         var pdsapeiinvdettaxes = new pdsapeiinvdettaxesDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdettaxesRow = pdsapeiinvdettaxes.ttblapeiinvdettaxes.NewttblapeiinvdettaxesRow();
         Apeiinvdettaxes.UpdateRowFromApeiinvdettaxes(ref ttblapeiinvdettaxesRow, AsapentryAPEIInvDetTaxesFieldChangeRequestAPI.apeiinvdettaxes);
         pdsapeiinvdettaxes.ttblapeiinvdettaxes.AddttblapeiinvdettaxesRow((pdsapeiinvdettaxesDataSet.ttblapeiinvdettaxesRow)ttblapeiinvdettaxesRow);
          
         var  cFieldNm = AsapentryAPEIInvDetTaxesFieldChangeRequestAPI.cFieldNm;
            
         
         NLogLoggerP.Trace("APEIInvDetTaxesFieldChange - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTaxesFieldChange(ref pdsContext,  cFieldNm, ref pdsapeiinvdettaxes, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTaxesFieldChange - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdettaxes); 
    
         if (pdsapeiinvdettaxes.ttblapeiinvdettaxes.Count > 0) 
         { 
             result = Apeiinvdettaxes.BuildApeiinvdettaxesFromRow(pdsapeiinvdettaxes.ttblapeiinvdettaxes[0]);
         } 
              
          
         return result;
          
      }

      public string APEIInvDetTaxesUpdate(Apeiinvdettaxes apeiinvdettaxes)
      {   
          
         var pdsapeiinvdettaxes = new pdsapeiinvdettaxesDataSet();
            
         DataRow ttblapeiinvdettaxesCriteria = pdsapeiinvdettaxes.ttblapeiinvdettaxes.NewttblapeiinvdettaxesRow();
         Apeiinvdettaxes.UpdateRowFromApeiinvdettaxes(ref ttblapeiinvdettaxesCriteria, apeiinvdettaxes);
         pdsapeiinvdettaxes.ttblapeiinvdettaxes.AddttblapeiinvdettaxesRow((pdsapeiinvdettaxesDataSet.ttblapeiinvdettaxesRow)ttblapeiinvdettaxesCriteria);
            
         string cWarningMessage = string.Empty;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTaxesUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTaxesUpdate(ref pdsContext,  pdsapeiinvdettaxes, out cWarningMessage, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTaxesUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdettaxes); 
    
         return cWarningMessage;
      
      }

      public IEnumerable<Apeceserialresult> apeceserialpopup(Apeceserialcriteria apeceserialcriteria)
      {   
         var results = new List<Apeceserialresult>();
         
         var pdsapeceserial = new pdsapeceserialDataSet();
            
         DataRow ttblapeceserialcriteriaCriteria = pdsapeceserial.ttblapeceserialcriteria.NewttblapeceserialcriteriaRow();
         Apeceserialcriteria.UpdateRowFromApeceserialcriteria(ref ttblapeceserialcriteriaCriteria, apeceserialcriteria);
         pdsapeceserial.ttblapeceserialcriteria.AddttblapeceserialcriteriaRow((pdsapeceserialDataSet.ttblapeceserialcriteriaRow)ttblapeceserialcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("apeceserialpopup - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.apeceserialpopup(ref pdsContext, ref pdsapeceserial, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("apeceserialpopup - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeceserial); 
    
            foreach (DataRow row in pdsapeceserial.ttblapeceserialresult)
            {
                results.Add(Apeceserialresult.BuildApeceserialresultFromRow(row));
            }
            return results;
        
      }

      public AsapentryapeceserialviewResponseAPI apeceserialview(Apeceserialviewcriteria apeceserialviewcriteria)
      {   
         var result = new AsapentryapeceserialviewResponseAPI();
         
         var pdsapeceserialview = new pdsapeceserialviewDataSet();
            
         var pdsapeceserial = new pdsapeceserialDataSet();
            
         DataRow ttblapeceserialviewcriteriaCriteria = pdsapeceserialview.ttblapeceserialviewcriteria.NewttblapeceserialviewcriteriaRow();
         Apeceserialviewcriteria.UpdateRowFromApeceserialviewcriteria(ref ttblapeceserialviewcriteriaCriteria, apeceserialviewcriteria);
         pdsapeceserialview.ttblapeceserialviewcriteria.AddttblapeceserialviewcriteriaRow((pdsapeceserialviewDataSet.ttblapeceserialviewcriteriaRow)ttblapeceserialviewcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("apeceserialview - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.apeceserialview(ref pdsContext, ref pdsapeceserialview, out pdsapeceserial, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("apeceserialview - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeceserialview); 
    
         if (pdsapeceserial.ttblapeceserialcriteria.Count > 0)
         {
            result.apeceserialcriteria = Apeceserialcriteria.BuildApeceserialcriteriaFromRow(pdsapeceserial.ttblapeceserialcriteria[0]);
         }
                    
         foreach (DataRow row in pdsapeceserial.ttblapeceserialresult)
         {
            result.apeceserialresult.Add(Apeceserialresult.BuildApeceserialresultFromRow(row));
         }     
         foreach (DataRow row in pdsapeceserialview.ttblapeceserialviewresult)
         {
            result.apeceserialviewresult.Add(Apeceserialviewresult.BuildApeceserialviewresultFromRow(row));
         }     
          
         return result;
          
      }

      public AsapentryAPEIInvoiceListResponseAPI APEIInvoiceList(Apeiinvoicelistcriteria apeiinvoicelistcriteria)
      {   
         var result = new AsapentryAPEIInvoiceListResponseAPI();
         
         var pdsapeiinvoicelist = new pdsapeiinvoicelistDataSet();
            
         DataRow ttblapeiinvoicelistcriteriaCriteria = pdsapeiinvoicelist.ttblapeiinvoicelistcriteria.NewttblapeiinvoicelistcriteriaRow();
         Apeiinvoicelistcriteria.UpdateRowFromApeiinvoicelistcriteria(ref ttblapeiinvoicelistcriteriaCriteria, apeiinvoicelistcriteria);
         pdsapeiinvoicelist.ttblapeiinvoicelistcriteria.AddttblapeiinvoicelistcriteriaRow((pdsapeiinvoicelistDataSet.ttblapeiinvoicelistcriteriaRow)ttblapeiinvoicelistcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("APEIInvoiceList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvoiceList(ref pdsContext, ref pdsapeiinvoicelist, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("APEIInvoiceList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicelist); 
    
         foreach (DataRow row in pdsapeiinvoicelist.ttblapeiinvoicelistresults)
         {
            result.apeiinvoicelistresults.Add(Apeiinvoicelistresults.BuildApeiinvoicelistresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      public Apeiinvdetdropdowns APEIInvDetDropDown(Apeiinvdetdropdowns apeiinvdetdropdowns)
      {   
         var result = new Apeiinvdetdropdowns();
         
         var pdsapeiinvdetdropdowns = new pdsapeiinvdetdropdownsDataSet();
            
         DataRow ttblapeiinvdetdropdownsCriteria = pdsapeiinvdetdropdowns.ttblapeiinvdetdropdowns.NewttblapeiinvdetdropdownsRow();
         Apeiinvdetdropdowns.UpdateRowFromApeiinvdetdropdowns(ref ttblapeiinvdetdropdownsCriteria, apeiinvdetdropdowns);
         pdsapeiinvdetdropdowns.ttblapeiinvdetdropdowns.AddttblapeiinvdetdropdownsRow((pdsapeiinvdetdropdownsDataSet.ttblapeiinvdetdropdownsRow)ttblapeiinvdetdropdownsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetDropDown - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetDropDown(ref pdsContext, ref pdsapeiinvdetdropdowns, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetDropDown - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetdropdowns); 
    
         if (pdsapeiinvdetdropdowns.ttblapeiinvdetdropdowns.Count > 0) 
         { 
             result = Apeiinvdetdropdowns.BuildApeiinvdetdropdownsFromRow(pdsapeiinvdetdropdowns.ttblapeiinvdetdropdowns[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvoicedetail APEIInvDetInitialize(Apeiinvoicedetail apeiinvoicedetail)
      {   
         var result = new Apeiinvoicedetail();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         DataRow ttblapeiinvoicedetailCriteria = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailCriteria, apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetInitialize(ref pdsContext, ref pdsapeiinvoicedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0) 
         { 
             result = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvoicedetail APEIInvDetAddPrepare(Apeiinvoicedetail apeiinvoicedetail)
      {   
         var result = new Apeiinvoicedetail();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         DataRow ttblapeiinvoicedetailCriteria = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailCriteria, apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddPrepare - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddPrepare(ref pdsContext, ref pdsapeiinvoicedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddPrepare - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0) 
         { 
             result = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetAddUpdateResponseAPI APEIInvDetAddUpdate(Apeiinvoicedetail apeiinvoicedetail)
      {   
         var result = new AsapentryAPEIInvDetAddUpdateResponseAPI();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblapeiinvoicedetailCriteria = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailCriteria, apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddUpdate(ref pdsContext, ref pdsapeiinvoicedetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0)
         {
            result.apeiinvoicedetail = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsapentryAPEIInvDetChangeRetrieveResponseAPI APEIInvDetChangeRetrieve(AsapentryAPEIInvDetChangeRetrieveRequestAPI AsapentryAPEIInvDetChangeRetrieveRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetChangeRetrieveResponseAPI();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         var pdsapeiinvoicetotals = new pdsapeiinvoicetotalsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvoicedetailRow = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailRow, AsapentryAPEIInvDetChangeRetrieveRequestAPI.apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailRow);
          
         var  lChangeMode = AsapentryAPEIInvDetChangeRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetChangeRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetChangeRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvoicedetail, out pdsapeiinvoicetotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetChangeRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0)
         {
            result.apeiinvoicedetail = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         }
                    
         if (pdsapeiinvoicetotals.ttblapeiinvoicetotals.Count > 0)
         {
            result.apeiinvoicetotals = Apeiinvoicetotals.BuildApeiinvoicetotalsFromRow(pdsapeiinvoicetotals.ttblapeiinvoicetotals[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetChangeUpdateResponseAPI APEIInvDetChangeUpdate(Apeiinvoicedetail apeiinvoicedetail)
      {   
         var result = new AsapentryAPEIInvDetChangeUpdateResponseAPI();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblapeiinvoicedetailCriteria = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailCriteria, apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetChangeUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetChangeUpdate(ref pdsContext, ref pdsapeiinvoicedetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetChangeUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0)
         {
            result.apeiinvoicedetail = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsapentryAPEIInvDetFieldChangeResponseAPI APEIInvDetFieldChange(AsapentryAPEIInvDetFieldChangeRequestAPI AsapentryAPEIInvDetFieldChangeRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetFieldChangeResponseAPI();
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvoicedetailRow = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailRow, AsapentryAPEIInvDetFieldChangeRequestAPI.apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailRow);
          
         var  cFieldName = AsapentryAPEIInvDetFieldChangeRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("APEIInvDetFieldChange - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetFieldChange(ref pdsContext,  cFieldName, ref pdsapeiinvoicedetail, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetFieldChange - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail); 
    
         if (pdsapeiinvoicedetail.ttblapeiinvoicedetail.Count > 0)
         {
            result.apeiinvoicedetail = Apeiinvoicedetail.BuildApeiinvoicedetailFromRow(pdsapeiinvoicedetail.ttblapeiinvoicedetail[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public void APEIInvDetCheckDrilldownAccess(Apeiinvoicedetail apeiinvoicedetail)
      {   
         
         var pdsapeiinvoicedetail = new pdsapeiinvoicedetailDataSet();
            
         DataRow ttblapeiinvoicedetailCriteria = pdsapeiinvoicedetail.ttblapeiinvoicedetail.NewttblapeiinvoicedetailRow();
         Apeiinvoicedetail.UpdateRowFromApeiinvoicedetail(ref ttblapeiinvoicedetailCriteria, apeiinvoicedetail);
         pdsapeiinvoicedetail.ttblapeiinvoicedetail.AddttblapeiinvoicedetailRow((pdsapeiinvoicedetailDataSet.ttblapeiinvoicedetailRow)ttblapeiinvoicedetailCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetCheckDrilldownAccess - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetCheckDrilldownAccess(ref pdsContext,  pdsapeiinvoicedetail, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetCheckDrilldownAccess - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetail);
      }

      public void APEIInvDetUnlockSoftLock(Apeiinvdetbanner apeiinvdetbanner)
      {   
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         DataRow ttblapeiinvdetbannerCriteria = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerCriteria, apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetUnlockSoftLock - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetUnlockSoftLock(ref pdsContext,  pdsapeiinvdetbanner, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetUnlockSoftLock - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner);
      }

      public AsapentryAPEIInvDetBannerResponseAPI APEIInvDetBanner(Apeiinvdetbanner apeiinvdetbanner)
      {   
         var result = new AsapentryAPEIInvDetBannerResponseAPI();
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvoicetotals = new pdsapeiinvoicetotalsDataSet();
            
         DataRow ttblapeiinvdetbannerCriteria = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerCriteria, apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetBanner - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetBanner(ref pdsContext, ref pdsapeiinvdetbanner, out pdsapeiinvoicetotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetBanner - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner); 
    
         if (pdsapeiinvdetbanner.ttblapeiinvdetbanner.Count > 0)
         {
            result.apeiinvdetbanner = Apeiinvdetbanner.BuildApeiinvdetbannerFromRow(pdsapeiinvdetbanner.ttblapeiinvdetbanner[0]);
         }
                    
         if (pdsapeiinvoicetotals.ttblapeiinvoicetotals.Count > 0)
         {
            result.apeiinvoicetotals = Apeiinvoicetotals.BuildApeiinvoicetotalsFromRow(pdsapeiinvoicetotals.ttblapeiinvoicetotals[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetGLDistListResponseAPI APEIInvDetGLDistList(AsapentryAPEIInvDetGLDistListRequestAPI AsapentryAPEIInvDetGLDistListRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetGLDistListResponseAPI();
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetbannerRow = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerRow, AsapentryAPEIInvDetGLDistListRequestAPI.apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerRow);
          
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistListRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         
         NLogLoggerP.Trace("APEIInvDetGLDistList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistList(ref pdsContext,  pdsapeiinvdetbanner, out pdsapeiinvdetgldist, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner); 
    
         foreach (DataRow row in pdsapeiinvdetgldist.ttblapeiinvdetgldist)
         {
            result.apeiinvdetgldist.Add(Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(row));
         }     
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0)
         {
            result.apeiinvdetgldistproof = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetgldist APEIInvDetGLDistInitialize(Apeiinvdetgldist apeiinvdetgldist)
      {   
         var result = new Apeiinvdetgldist();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         DataRow ttblapeiinvdetgldistCriteria = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistCriteria, apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetGLDistInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistInitialize(ref pdsContext, ref pdsapeiinvdetgldist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0) 
         { 
             result = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetgldist APEIInvDetGLDistAddPrepare(Apeiinvdetgldist apeiinvdetgldist)
      {   
         var result = new Apeiinvdetgldist();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         DataRow ttblapeiinvdetgldistCriteria = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistCriteria, apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetGLDistAddPrepare - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistAddPrepare(ref pdsContext, ref pdsapeiinvdetgldist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistAddPrepare - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0) 
         { 
             result = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetGLDistAddUpdateResponseAPI APEIInvDetGLDistAddUpdate(AsapentryAPEIInvDetGLDistAddUpdateRequestAPI AsapentryAPEIInvDetGLDistAddUpdateRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetGLDistAddUpdateResponseAPI();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetgldistRow = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistRow, AsapentryAPEIInvDetGLDistAddUpdateRequestAPI.apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistRow);
          
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistAddUpdateRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         
         NLogLoggerP.Trace("APEIInvDetGLDistAddUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistAddUpdate(ref pdsContext, ref pdsapeiinvdetgldist, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistAddUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0)
         {
            result.apeiinvdetgldist = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         }
                    
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0)
         {
            result.apeiinvdetgldistproof = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetGLDistChgRetrieveResponseAPI APEIInvDetGLDistChgRetrieve(AsapentryAPEIInvDetGLDistChgRetrieveRequestAPI AsapentryAPEIInvDetGLDistChgRetrieveRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetGLDistChgRetrieveResponseAPI();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetgldistRow = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistRow, AsapentryAPEIInvDetGLDistChgRetrieveRequestAPI.apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistRow);
          
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistChgRetrieveRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         var  lChangeMode = AsapentryAPEIInvDetGLDistChgRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetGLDistChgRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistChgRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvdetgldist, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistChgRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0)
         {
            result.apeiinvdetgldist = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         }
                    
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0)
         {
            result.apeiinvdetgldistproof = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetGLDistChgUpdateResponseAPI APEIInvDetGLDistChgUpdate(AsapentryAPEIInvDetGLDistChgUpdateRequestAPI AsapentryAPEIInvDetGLDistChgUpdateRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetGLDistChgUpdateResponseAPI();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetgldistRow = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistRow, AsapentryAPEIInvDetGLDistChgUpdateRequestAPI.apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistRow);
          
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistChgUpdateRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         
         NLogLoggerP.Trace("APEIInvDetGLDistChgUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistChgUpdate(ref pdsContext, ref pdsapeiinvdetgldist, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistChgUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0)
         {
            result.apeiinvdetgldist = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         }
                    
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0)
         {
            result.apeiinvdetgldistproof = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetGLDistFieldChangeResponseAPI APEIInvDetGLDistFieldChange(AsapentryAPEIInvDetGLDistFieldChangeRequestAPI AsapentryAPEIInvDetGLDistFieldChangeRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetGLDistFieldChangeResponseAPI();
         
         var pdsapeiinvdetgldist = new pdsapeiinvdetgldistDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetgldistRow = pdsapeiinvdetgldist.ttblapeiinvdetgldist.NewttblapeiinvdetgldistRow();
         Apeiinvdetgldist.UpdateRowFromApeiinvdetgldist(ref ttblapeiinvdetgldistRow, AsapentryAPEIInvDetGLDistFieldChangeRequestAPI.apeiinvdetgldist);
         pdsapeiinvdetgldist.ttblapeiinvdetgldist.AddttblapeiinvdetgldistRow((pdsapeiinvdetgldistDataSet.ttblapeiinvdetgldistRow)ttblapeiinvdetgldistRow);
          
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistFieldChangeRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         var  cFieldName = AsapentryAPEIInvDetGLDistFieldChangeRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("APEIInvDetGLDistFieldChange - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistFieldChange(ref pdsContext,  cFieldName, ref pdsapeiinvdetgldist, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistFieldChange - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetgldist); 
    
         if (pdsapeiinvdetgldist.ttblapeiinvdetgldist.Count > 0)
         {
            result.apeiinvdetgldist = Apeiinvdetgldist.BuildApeiinvdetgldistFromRow(pdsapeiinvdetgldist.ttblapeiinvdetgldist[0]);
         }
                    
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0)
         {
            result.apeiinvdetgldistproof = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetgldistproof APEIInvDetGLDistDelete(AsapentryAPEIInvDetGLDistDeleteRequestAPI AsapentryAPEIInvDetGLDistDeleteRequestAPI)
      {   
         var result = new Apeiinvdetgldistproof();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetgldistproof = new pdsapeiinvdetgldistproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetgldistproofRow = pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.NewttblapeiinvdetgldistproofRow();
         Apeiinvdetgldistproof.UpdateRowFromApeiinvdetgldistproof(ref ttblapeiinvdetgldistproofRow, AsapentryAPEIInvDetGLDistDeleteRequestAPI.apeiinvdetgldistproof);
         pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.AddttblapeiinvdetgldistproofRow((pdsapeiinvdetgldistproofDataSet.ttblapeiinvdetgldistproofRow)ttblapeiinvdetgldistproofRow);
          
         foreach (var obj in AsapentryAPEIInvDetGLDistDeleteRequestAPI.apeirowids)
         {
            DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
            Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, obj);
            pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
         }
          
         
         NLogLoggerP.Trace("APEIInvDetGLDistDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGLDistDelete(ref pdsContext,  pdsapeirowids, ref pdsapeiinvdetgldistproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGLDistDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
         if (pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof.Count > 0) 
         { 
             result = Apeiinvdetgldistproof.BuildApeiinvdetgldistproofFromRow(pdsapeiinvdetgldistproof.ttblapeiinvdetgldistproof[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apeelookupresults> APEntryEditBrowseLoad(Apeelookupcriteria apeelookupcriteria)
      {   
         var results = new List<Apeelookupresults>();
         
         var pdsapeelookup = new pdsapeelookupDataSet();
            
         DataRow ttblapeelookupcriteriaCriteria = pdsapeelookup.ttblapeelookupcriteria.NewttblapeelookupcriteriaRow();
         Apeelookupcriteria.UpdateRowFromApeelookupcriteria(ref ttblapeelookupcriteriaCriteria, apeelookupcriteria);
         pdsapeelookup.ttblapeelookupcriteria.AddttblapeelookupcriteriaRow((pdsapeelookupDataSet.ttblapeelookupcriteriaRow)ttblapeelookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEntryEditBrowseLoad - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditBrowseLoad(ref pdsContext, ref pdsapeelookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditBrowseLoad - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeelookup); 
    
            foreach (DataRow row in pdsapeelookup.ttblapeelookupresults)
            {
                results.Add(Apeelookupresults.BuildApeelookupresultsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apeetotlookupresults> APEntryEditTotalsLoad(Apeetotlookupcriteria apeetotlookupcriteria)
      {   
         var results = new List<Apeetotlookupresults>();
         
         var pdsapeetotlookup = new pdsapeetotlookupDataSet();
            
         DataRow ttblapeetotlookupcriteriaCriteria = pdsapeetotlookup.ttblapeetotlookupcriteria.NewttblapeetotlookupcriteriaRow();
         Apeetotlookupcriteria.UpdateRowFromApeetotlookupcriteria(ref ttblapeetotlookupcriteriaCriteria, apeetotlookupcriteria);
         pdsapeetotlookup.ttblapeetotlookupcriteria.AddttblapeetotlookupcriteriaRow((pdsapeetotlookupDataSet.ttblapeetotlookupcriteriaRow)ttblapeetotlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEntryEditTotalsLoad - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditTotalsLoad(ref pdsContext, ref pdsapeetotlookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditTotalsLoad - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeetotlookup); 
    
            foreach (DataRow row in pdsapeetotlookup.ttblapeetotlookupresults)
            {
                results.Add(Apeetotlookupresults.BuildApeetotlookupresultsFromRow(row));
            }
            return results;
        
      }

      public Apeemaint APEntryEditMaintLoad(Apeemaint apeemaint)
      {   
         var result = new Apeemaint();
         
         var pdsapeemaint = new pdsapeemaintDataSet();
            
         DataRow ttblapeemaintCriteria = pdsapeemaint.ttblapeemaint.NewttblapeemaintRow();
         Apeemaint.UpdateRowFromApeemaint(ref ttblapeemaintCriteria, apeemaint);
         pdsapeemaint.ttblapeemaint.AddttblapeemaintRow((pdsapeemaintDataSet.ttblapeemaintRow)ttblapeemaintCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEntryEditMaintLoad - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditMaintLoad(ref pdsContext, ref pdsapeemaint, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditMaintLoad - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeemaint); 
    
         if (pdsapeemaint.ttblapeemaint.Count > 0) 
         { 
             result = Apeemaint.BuildApeemaintFromRow(pdsapeemaint.ttblapeemaint[0]);
         } 
              
          
         return result;
          
      }

      public void APEntryEditMaintSave(AsapentryAPEntryEditMaintSaveRequestAPI AsapentryAPEntryEditMaintSaveRequestAPI)
      {   
         
         var pdsapeemaint = new pdsapeemaintDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeemaintRow = pdsapeemaint.ttblapeemaint.NewttblapeemaintRow();
         Apeemaint.UpdateRowFromApeemaint(ref ttblapeemaintRow, AsapentryAPEntryEditMaintSaveRequestAPI.apeemaint);
         pdsapeemaint.ttblapeemaint.AddttblapeemaintRow((pdsapeemaintDataSet.ttblapeemaintRow)ttblapeemaintRow);
          
         var  cReportNm = AsapentryAPEntryEditMaintSaveRequestAPI.cReportNm;
            
         
         NLogLoggerP.Trace("APEntryEditMaintSave - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditMaintSave(ref pdsContext,  pdsapeemaint,  cReportNm, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditMaintSave - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeemaint);
      }

      public bool APEntryEditSplitPayPreValidate(Apeesplitpayrowids apeesplitpayrowids)
      {   
          
         var pdsapeesplitpayrowids = new pdsapeesplitpayrowidsDataSet();
            
         DataRow ttblapeesplitpayrowidsCriteria = pdsapeesplitpayrowids.ttblapeesplitpayrowids.NewttblapeesplitpayrowidsRow();
         Apeesplitpayrowids.UpdateRowFromApeesplitpayrowids(ref ttblapeesplitpayrowidsCriteria, apeesplitpayrowids);
         pdsapeesplitpayrowids.ttblapeesplitpayrowids.AddttblapeesplitpayrowidsRow((pdsapeesplitpayrowidsDataSet.ttblapeesplitpayrowidsRow)ttblapeesplitpayrowidsCriteria);
            
         bool lEnableDays = false;
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEntryEditSplitPayPreValidate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditSplitPayPreValidate(ref pdsContext,  pdsapeesplitpayrowids, out lEnableDays, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditSplitPayPreValidate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeesplitpayrowids); 
    
         return lEnableDays;
      
      }

      public IEnumerable<Apeesplitpay> APEntryEditSplitPayLoad(AsapentryAPEntryEditSplitPayLoadRequestAPI AsapentryAPEntryEditSplitPayLoadRequestAPI)
      {   
         var results = new List<Apeesplitpay>();
         
         var pdsapeesplitpayrowids = new pdsapeesplitpayrowidsDataSet();
            
         var pdsapeesplitpay = new pdsapeesplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeesplitpayrowidsRow = pdsapeesplitpayrowids.ttblapeesplitpayrowids.NewttblapeesplitpayrowidsRow();
         Apeesplitpayrowids.UpdateRowFromApeesplitpayrowids(ref ttblapeesplitpayrowidsRow, AsapentryAPEntryEditSplitPayLoadRequestAPI.apeesplitpayrowids);
         pdsapeesplitpayrowids.ttblapeesplitpayrowids.AddttblapeesplitpayrowidsRow((pdsapeesplitpayrowidsDataSet.ttblapeesplitpayrowidsRow)ttblapeesplitpayrowidsRow);
          
         var  iPayments = AsapentryAPEntryEditSplitPayLoadRequestAPI.iPayments;
            
         var  iDays = AsapentryAPEntryEditSplitPayLoadRequestAPI.iDays;
            
         
         NLogLoggerP.Trace("APEntryEditSplitPayLoad - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditSplitPayLoad(ref pdsContext,  iPayments,  iDays,  pdsapeesplitpayrowids, out pdsapeesplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditSplitPayLoad - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeesplitpayrowids); 
    
            foreach (DataRow row in pdsapeesplitpay.ttblapeesplitpay)
            {
                results.Add(Apeesplitpay.BuildApeesplitpayFromRow(row));
            }
            return results;
        
      }

      public void APEntryEditSplitPayValidate(AsapentryAPEntryEditSplitPayValidateRequestAPI AsapentryAPEntryEditSplitPayValidateRequestAPI)
      {   
         
         var pdsapeesplitpayrowids = new pdsapeesplitpayrowidsDataSet();
            
         var pdsapeesplitpay = new pdsapeesplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEntryEditSplitPayValidateRequestAPI.apeesplitpay)
         {
            DataRow ttblapeesplitpayRow = pdsapeesplitpay.ttblapeesplitpay.NewttblapeesplitpayRow();
            Apeesplitpay.UpdateRowFromApeesplitpay(ref ttblapeesplitpayRow, obj);
            pdsapeesplitpay.ttblapeesplitpay.AddttblapeesplitpayRow((pdsapeesplitpayDataSet.ttblapeesplitpayRow)ttblapeesplitpayRow);
         }
          
         DataRow ttblapeesplitpayrowidsRow = pdsapeesplitpayrowids.ttblapeesplitpayrowids.NewttblapeesplitpayrowidsRow();
         Apeesplitpayrowids.UpdateRowFromApeesplitpayrowids(ref ttblapeesplitpayrowidsRow, AsapentryAPEntryEditSplitPayValidateRequestAPI.apeesplitpayrowids);
         pdsapeesplitpayrowids.ttblapeesplitpayrowids.AddttblapeesplitpayrowidsRow((pdsapeesplitpayrowidsDataSet.ttblapeesplitpayrowidsRow)ttblapeesplitpayrowidsRow);
          
         
         NLogLoggerP.Trace("APEntryEditSplitPayValidate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditSplitPayValidate(ref pdsContext,  pdsapeesplitpayrowids,  pdsapeesplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditSplitPayValidate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeesplitpayrowids);
      }

      public void APEntryEditSplitPayUpdate(AsapentryAPEntryEditSplitPayUpdateRequestAPI AsapentryAPEntryEditSplitPayUpdateRequestAPI)
      {   
         
         var pdsapeesplitpayrowids = new pdsapeesplitpayrowidsDataSet();
            
         var pdsapeesplitpay = new pdsapeesplitpayDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEntryEditSplitPayUpdateRequestAPI.apeesplitpay)
         {
            DataRow ttblapeesplitpayRow = pdsapeesplitpay.ttblapeesplitpay.NewttblapeesplitpayRow();
            Apeesplitpay.UpdateRowFromApeesplitpay(ref ttblapeesplitpayRow, obj);
            pdsapeesplitpay.ttblapeesplitpay.AddttblapeesplitpayRow((pdsapeesplitpayDataSet.ttblapeesplitpayRow)ttblapeesplitpayRow);
         }
          
         DataRow ttblapeesplitpayrowidsRow = pdsapeesplitpayrowids.ttblapeesplitpayrowids.NewttblapeesplitpayrowidsRow();
         Apeesplitpayrowids.UpdateRowFromApeesplitpayrowids(ref ttblapeesplitpayrowidsRow, AsapentryAPEntryEditSplitPayUpdateRequestAPI.apeesplitpayrowids);
         pdsapeesplitpayrowids.ttblapeesplitpayrowids.AddttblapeesplitpayrowidsRow((pdsapeesplitpayrowidsDataSet.ttblapeesplitpayrowidsRow)ttblapeesplitpayrowidsRow);
          
         
         NLogLoggerP.Trace("APEntryEditSplitPayUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditSplitPayUpdate(ref pdsContext,  pdsapeesplitpayrowids,  pdsapeesplitpay, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditSplitPayUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeesplitpayrowids);
      }

      public void APEntryEditUpdate(AsapentryAPEntryEditUpdateRequestAPI AsapentryAPEntryEditUpdateRequestAPI)
      {   
         
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEntryEditUpdateRequestAPI.printersettings)
         {
            DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
            Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, obj);
            pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
         }
          
         var  cReportNm = AsapentryAPEntryEditUpdateRequestAPI.cReportNm;
            
         
         NLogLoggerP.Trace("APEntryEditUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditUpdate(ref pdsContext,  cReportNm,  pdsprintersettings, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsprintersettings);
      }

      public IEnumerable<Apeelookupresults> APEntryEditUpdateNotFinal(AsapentryAPEntryEditUpdateNotFinalRequestAPI AsapentryAPEntryEditUpdateNotFinalRequestAPI)
      {   
         var results = new List<Apeelookupresults>();
         
         var pdsapeelookup = new pdsapeelookupDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeelookupcriteriaRow = pdsapeelookup.ttblapeelookupcriteria.NewttblapeelookupcriteriaRow();
         Apeelookupcriteria.UpdateRowFromApeelookupcriteria(ref ttblapeelookupcriteriaRow, AsapentryAPEntryEditUpdateNotFinalRequestAPI.apeelookupcriteria);
         pdsapeelookup.ttblapeelookupcriteria.AddttblapeelookupcriteriaRow((pdsapeelookupDataSet.ttblapeelookupcriteriaRow)ttblapeelookupcriteriaRow);
          
         foreach (var obj in AsapentryAPEntryEditUpdateNotFinalRequestAPI.apeelookupresults)
         {
            DataRow ttblapeelookupresultsRow = pdsapeelookup.ttblapeelookupresults.NewttblapeelookupresultsRow();
            Apeelookupresults.UpdateRowFromApeelookupresults(ref ttblapeelookupresultsRow, obj);
            pdsapeelookup.ttblapeelookupresults.AddttblapeelookupresultsRow((pdsapeelookupDataSet.ttblapeelookupresultsRow)ttblapeelookupresultsRow);
         }
          
         var  cNewApStatus = AsapentryAPEntryEditUpdateNotFinalRequestAPI.cNewApStatus;
            
         
         NLogLoggerP.Trace("APEntryEditUpdateNotFinal - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEntryEditUpdateNotFinal(ref pdsContext,  cNewApStatus, ref pdsapeelookup, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEntryEditUpdateNotFinal - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeelookup); 
    
            foreach (DataRow row in pdsapeelookup.ttblapeelookupresults)
            {
                results.Add(Apeelookupresults.BuildApeelookupresultsFromRow(row));
            }
            return results;
        
      }

      public Apembsingle APEMBApply(Apembsingle apembsingle)
      {   
         var result = new Apembsingle();
         
         var pdsapemb = new pdsapembDataSet();
            
         DataRow ttblapembsingleCriteria = pdsapemb.ttblapembsingle.NewttblapembsingleRow();
         Apembsingle.UpdateRowFromApembsingle(ref ttblapembsingleCriteria, apembsingle);
         pdsapemb.ttblapembsingle.AddttblapembsingleRow((pdsapembDataSet.ttblapembsingleRow)ttblapembsingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEMBApply - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMBApply(ref pdsContext, ref pdsapemb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMBApply - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemb); 
    
         if (pdsapemb.ttblapembsingle.Count > 0) 
         { 
             result = Apembsingle.BuildApembsingleFromRow(pdsapemb.ttblapembsingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apembsingle> APEMBRetrieve(AsapentryAPEMBRetrieveRequestAPI AsapentryAPEMBRetrieveRequestAPI)
      {   
         var results = new List<Apembsingle>();
         
         var pdsapemb = new pdsapembDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  dVendno = AsapentryAPEMBRetrieveRequestAPI.dVendno;
            
         var  cFieldName = AsapentryAPEMBRetrieveRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("APEMBRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMBRetrieve(ref pdsContext,  dVendno,  cFieldName, out pdsapemb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMBRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemb); 
    
            foreach (DataRow row in pdsapemb.ttblapembsingle)
            {
                results.Add(Apembsingle.BuildApembsingleFromRow(row));
            }
            return results;
        
      }

      public Apembsingle APEMBUpdate(Apembsingle apembsingle)
      {   
         var result = new Apembsingle();
         
         var pdsapemb = new pdsapembDataSet();
            
         DataRow ttblapembsingleCriteria = pdsapemb.ttblapembsingle.NewttblapembsingleRow();
         Apembsingle.UpdateRowFromApembsingle(ref ttblapembsingleCriteria, apembsingle);
         pdsapemb.ttblapembsingle.AddttblapembsingleRow((pdsapembDataSet.ttblapembsingleRow)ttblapembsingleCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEMBUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMBUpdate(ref pdsContext, ref pdsapemb, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMBUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemb); 
    
         if (pdsapemb.ttblapembsingle.Count > 0) 
         { 
             result = Apembsingle.BuildApembsingleFromRow(pdsapemb.ttblapembsingle[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apemsresults> APEMSRetrieve(Apemscriteria apemscriteria)
      {   
         var results = new List<Apemsresults>();
         
         var pdsapems = new pdsapemsDataSet();
            
         DataRow ttblapemscriteriaCriteria = pdsapems.ttblapemscriteria.NewttblapemscriteriaRow();
         Apemscriteria.UpdateRowFromApemscriteria(ref ttblapemscriteriaCriteria, apemscriteria);
         pdsapems.ttblapemscriteria.AddttblapemscriteriaRow((pdsapemsDataSet.ttblapemscriteriaRow)ttblapemscriteriaCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEMSRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMSRetrieve(ref pdsContext, ref pdsapems, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMSRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapems); 
    
            foreach (DataRow row in pdsapems.ttblapemsresults)
            {
                results.Add(Apemsresults.BuildApemsresultsFromRow(row));
            }
            return results;
        
      }

      public void APEMSChg(AsapentryAPEMSChgRequestAPI AsapentryAPEMSChgRequestAPI)
      {   
         
         var pdsapems = new pdsapemsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEMSChgRequestAPI.apemschg)
         {
            DataRow ttblapemschgRow = pdsapems.ttblapemschg.NewttblapemschgRow();
            Apemschg.UpdateRowFromApemschg(ref ttblapemschgRow, obj);
            pdsapems.ttblapemschg.AddttblapemschgRow((pdsapemsDataSet.ttblapemschgRow)ttblapemschgRow);
         }
          
         var  istagecd = AsapentryAPEMSChgRequestAPI.istagecd;
            
         
         NLogLoggerP.Trace("APEMSChg - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMSChg(ref pdsContext,  istagecd, ref pdsapems, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMSChg - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapems);
      }

      public void APEIInvDetDelete(IEnumerable<Apeiinvdetdelete> apeiinvdetdelete)
      {   
         
         var pdsapeiinvdetdelete = new pdsapeiinvdetdeleteDataSet();
            
         foreach (var obj in apeiinvdetdelete)
         {
             DataRow row = pdsapeiinvdetdelete.ttblapeiinvdetdelete.NewttblapeiinvdetdeleteRow();
             Apeiinvdetdelete.UpdateRowFromApeiinvdetdelete(ref row, obj);
             pdsapeiinvdetdelete.ttblapeiinvdetdelete.AddttblapeiinvdetdeleteRow((pdsapeiinvdetdeleteDataSet.ttblapeiinvdetdeleteRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetDelete(ref pdsContext,  pdsapeiinvdetdelete, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetdelete);
      }

      public AsapentryAPEIInvDetFinalUpdateResponseAPI APEIInvDetFinalUpdate(AsapentryAPEIInvDetFinalUpdateRequestAPI AsapentryAPEIInvDetFinalUpdateRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetFinalUpdateResponseAPI();
         
         var pdsapeiinvdetfinalupdt = new pdsapeiinvdetfinalupdtDataSet();
            
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsprintersettings = new pdsprintersettingsDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetfinalupdtRow = pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.NewttblapeiinvdetfinalupdtRow();
         Apeiinvdetfinalupdt.UpdateRowFromApeiinvdetfinalupdt(ref ttblapeiinvdetfinalupdtRow, AsapentryAPEIInvDetFinalUpdateRequestAPI.apeiinvdetfinalupdt);
         pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.AddttblapeiinvdetfinalupdtRow((pdsapeiinvdetfinalupdtDataSet.ttblapeiinvdetfinalupdtRow)ttblapeiinvdetfinalupdtRow);
          
         foreach (var obj in AsapentryAPEIInvDetFinalUpdateRequestAPI.apeirowids)
         {
            DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
            Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, obj);
            pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
         }
          
         DataRow ttblprintersettingsRow = pdsprintersettings.ttblprintersettings.NewttblprintersettingsRow();
         Printersettings.UpdateRowFromPrintersettings(ref ttblprintersettingsRow, AsapentryAPEIInvDetFinalUpdateRequestAPI.printersettings);
         pdsprintersettings.ttblprintersettings.AddttblprintersettingsRow((pdsprintersettingsDataSet.ttblprintersettingsRow)ttblprintersettingsRow);
          
         
         NLogLoggerP.Trace("APEIInvDetFinalUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetFinalUpdate(ref pdsContext,  pdsapeiinvdetfinalupdt, ref pdsapeirowids,  pdsprintersettings, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetFinalUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetfinalupdt); 
    
         foreach (DataRow row in pdsapeirowids.ttblapeirowids)
         {
            result.apeirowids.Add(Apeirowids.BuildApeirowidsFromRow(row));
         }     
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public IEnumerable<Apeiinvdeterrors> APEIInvDetGetErrors(Apeirowids apeirowids)
      {   
         var results = new List<Apeiinvdeterrors>();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdeterrors = new pdsapeiinvdeterrorsDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetGetErrors - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetGetErrors(ref pdsContext,  pdsapeirowids, out pdsapeiinvdeterrors, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetGetErrors - Asapentry - After Call");

         
         this.ReportErrors(pdsapeiinvdeterrors);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
            foreach (DataRow row in pdsapeiinvdeterrors.ttblapeiinvdeterrors)
            {
                results.Add(Apeiinvdeterrors.BuildApeiinvdeterrorsFromRow(row));
            }
            return results;
        
      }

      public Apeiinvdetfinalupdt APEIInvDetFinalUpdateInitialize(Apeiinvdetfinalupdt apeiinvdetfinalupdt)
      {   
         var result = new Apeiinvdetfinalupdt();
         
         var pdsapeiinvdetfinalupdt = new pdsapeiinvdetfinalupdtDataSet();
            
         DataRow ttblapeiinvdetfinalupdtCriteria = pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.NewttblapeiinvdetfinalupdtRow();
         Apeiinvdetfinalupdt.UpdateRowFromApeiinvdetfinalupdt(ref ttblapeiinvdetfinalupdtCriteria, apeiinvdetfinalupdt);
         pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.AddttblapeiinvdetfinalupdtRow((pdsapeiinvdetfinalupdtDataSet.ttblapeiinvdetfinalupdtRow)ttblapeiinvdetfinalupdtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetFinalUpdateInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetFinalUpdateInitialize(ref pdsContext, ref pdsapeiinvdetfinalupdt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetFinalUpdateInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetfinalupdt); 
    
         if (pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.Count > 0) 
         { 
             result = Apeiinvdetfinalupdt.BuildApeiinvdetfinalupdtFromRow(pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetfinalupdt APEIInvDetFinalUpdateValidate(Apeiinvdetfinalupdt apeiinvdetfinalupdt)
      {   
         var result = new Apeiinvdetfinalupdt();
         
         var pdsapeiinvdetfinalupdt = new pdsapeiinvdetfinalupdtDataSet();
            
         DataRow ttblapeiinvdetfinalupdtCriteria = pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.NewttblapeiinvdetfinalupdtRow();
         Apeiinvdetfinalupdt.UpdateRowFromApeiinvdetfinalupdt(ref ttblapeiinvdetfinalupdtCriteria, apeiinvdetfinalupdt);
         pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.AddttblapeiinvdetfinalupdtRow((pdsapeiinvdetfinalupdtDataSet.ttblapeiinvdetfinalupdtRow)ttblapeiinvdetfinalupdtCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetFinalUpdateValidate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetFinalUpdateValidate(ref pdsContext, ref pdsapeiinvdetfinalupdt, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetFinalUpdateValidate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetfinalupdt); 
    
         if (pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt.Count > 0) 
         { 
             result = Apeiinvdetfinalupdt.BuildApeiinvdetfinalupdtFromRow(pdsapeiinvdetfinalupdt.ttblapeiinvdetfinalupdt[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apeiinvdetpohdrlist> APEIInvDetPOHeaderList(AsapentryAPEIInvDetPOHeaderListRequestAPI AsapentryAPEIInvDetPOHeaderListRequestAPI)
      {   
         var results = new List<Apeiinvdetpohdrlist>();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetpohdrlist = new pdsapeiinvdetpohdrlistDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeirowidsRow = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsRow, AsapentryAPEIInvDetPOHeaderListRequestAPI.apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsRow);
          
         var  iAddonSeqNo = AsapentryAPEIInvDetPOHeaderListRequestAPI.iAddonSeqNo;
            
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderList(ref pdsContext,  pdsapeirowids,  iAddonSeqNo, out pdsapeiinvdetpohdrlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
            foreach (DataRow row in pdsapeiinvdetpohdrlist.ttblapeiinvdetpohdrlist)
            {
                results.Add(Apeiinvdetpohdrlist.BuildApeiinvdetpohdrlistFromRow(row));
            }
            return results;
        
      }

      public AsapentryAPEIInvDetPOHeaderInitializeResponseAPI APEIInvDetPOHeaderInitialize(Apeiinvdetpohdr apeiinvdetpohdr)
      {   
         var result = new AsapentryAPEIInvDetPOHeaderInitializeResponseAPI();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         var pdsapeiinvdetpolnproof = new pdsapeiinvdetpolnproofDataSet();
            
         DataRow ttblapeiinvdetpohdrCriteria = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrCriteria, apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderInitialize(ref pdsContext, ref pdsapeiinvdetpohdr, out pdsapeiinvdetpolnproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0)
         {
            result.apeiinvdetpohdr = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         }
                    
         if (pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof.Count > 0)
         {
            result.apeiinvdetpolnproof = Apeiinvdetpolnproof.BuildApeiinvdetpolnproofFromRow(pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetpohdr APEIInvDetPOHeaderAddPrepare(Apeiinvdetpohdr apeiinvdetpohdr)
      {   
         var result = new Apeiinvdetpohdr();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         DataRow ttblapeiinvdetpohdrCriteria = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrCriteria, apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderAddPrepare - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderAddPrepare(ref pdsContext, ref pdsapeiinvdetpohdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderAddPrepare - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0) 
         { 
             result = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetpohdr APEIInvDetPOHeaderFieldChange(AsapentryAPEIInvDetPOHeaderFieldChangeRequestAPI AsapentryAPEIInvDetPOHeaderFieldChangeRequestAPI)
      {   
         var result = new Apeiinvdetpohdr();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetpohdrRow = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrRow, AsapentryAPEIInvDetPOHeaderFieldChangeRequestAPI.apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrRow);
          
         var  cFieldName = AsapentryAPEIInvDetPOHeaderFieldChangeRequestAPI.cFieldName;
            
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderFieldChange - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderFieldChange(ref pdsContext,  cFieldName, ref pdsapeiinvdetpohdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderFieldChange - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0) 
         { 
             result = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetPOHeaderAddUpdateResponseAPI APEIInvDetPOHeaderAddUpdate(Apeiinvdetpohdr apeiinvdetpohdr)
      {   
         var result = new AsapentryAPEIInvDetPOHeaderAddUpdateResponseAPI();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         var pdsapeiinvdetpolnproof = new pdsapeiinvdetpolnproofDataSet();
            
         var pdsmessaging = new pdsmessagingDataSet();
            
         DataRow ttblapeiinvdetpohdrCriteria = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrCriteria, apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderAddUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderAddUpdate(ref pdsContext, ref pdsapeiinvdetpohdr, out pdsapeiinvdetpolnproof, out pdsmessaging, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderAddUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0)
         {
            result.apeiinvdetpohdr = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         }
                    
         if (pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof.Count > 0)
         {
            result.apeiinvdetpolnproof = Apeiinvdetpolnproof.BuildApeiinvdetpolnproofFromRow(pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof[0]);
         }
                    
         foreach (DataRow row in pdsmessaging.ttblmessaging)
         {
            result.messaging.Add(Messaging.BuildMessagingFromRow(row));
         }     
          
         return result;
          
      }

      public AsapentryAPEIInvDetPOHeaderChgRetrieveResponseAPI APEIInvDetPOHeaderChgRetrieve(AsapentryAPEIInvDetPOHeaderChgRetrieveRequestAPI AsapentryAPEIInvDetPOHeaderChgRetrieveRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetPOHeaderChgRetrieveResponseAPI();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         var pdsapeiinvdetpolnproof = new pdsapeiinvdetpolnproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetpohdrRow = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrRow, AsapentryAPEIInvDetPOHeaderChgRetrieveRequestAPI.apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrRow);
          
         var  lChangeMode = AsapentryAPEIInvDetPOHeaderChgRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderChgRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderChgRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvdetpohdr, out pdsapeiinvdetpolnproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderChgRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0)
         {
            result.apeiinvdetpohdr = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         }
                    
         if (pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof.Count > 0)
         {
            result.apeiinvdetpolnproof = Apeiinvdetpolnproof.BuildApeiinvdetpolnproofFromRow(pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetpohdr APEIInvDetPOHeaderChgUpdate(Apeiinvdetpohdr apeiinvdetpohdr)
      {   
         var result = new Apeiinvdetpohdr();
         
         var pdsapeiinvdetpohdr = new pdsapeiinvdetpohdrDataSet();
            
         DataRow ttblapeiinvdetpohdrCriteria = pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.NewttblapeiinvdetpohdrRow();
         Apeiinvdetpohdr.UpdateRowFromApeiinvdetpohdr(ref ttblapeiinvdetpohdrCriteria, apeiinvdetpohdr);
         pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.AddttblapeiinvdetpohdrRow((pdsapeiinvdetpohdrDataSet.ttblapeiinvdetpohdrRow)ttblapeiinvdetpohdrCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderChgUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderChgUpdate(ref pdsContext, ref pdsapeiinvdetpohdr, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderChgUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpohdr); 
    
         if (pdsapeiinvdetpohdr.ttblapeiinvdetpohdr.Count > 0) 
         { 
             result = Apeiinvdetpohdr.BuildApeiinvdetpohdrFromRow(pdsapeiinvdetpohdr.ttblapeiinvdetpohdr[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetpoln APEIInvDetPOLineInitialize(Apeiinvdetpoln apeiinvdetpoln)
      {   
         var result = new Apeiinvdetpoln();
         
         var pdsapeiinvdetpoln = new pdsapeiinvdetpolnDataSet();
            
         DataRow ttblapeiinvdetpolnCriteria = pdsapeiinvdetpoln.ttblapeiinvdetpoln.NewttblapeiinvdetpolnRow();
         Apeiinvdetpoln.UpdateRowFromApeiinvdetpoln(ref ttblapeiinvdetpolnCriteria, apeiinvdetpoln);
         pdsapeiinvdetpoln.ttblapeiinvdetpoln.AddttblapeiinvdetpolnRow((pdsapeiinvdetpolnDataSet.ttblapeiinvdetpolnRow)ttblapeiinvdetpolnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineInitialize(ref pdsContext, ref pdsapeiinvdetpoln, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpoln); 
    
         if (pdsapeiinvdetpoln.ttblapeiinvdetpoln.Count > 0) 
         { 
             result = Apeiinvdetpoln.BuildApeiinvdetpolnFromRow(pdsapeiinvdetpoln.ttblapeiinvdetpoln[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetPOLineChgRetrieveResponseAPI APEIInvDetPOLineChgRetrieve(AsapentryAPEIInvDetPOLineChgRetrieveRequestAPI AsapentryAPEIInvDetPOLineChgRetrieveRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetPOLineChgRetrieveResponseAPI();
         
         var pdsapeiinvdetpolnlist = new pdsapeiinvdetpolnlistDataSet();
            
         var pdsapeiinvdetpoln = new pdsapeiinvdetpolnDataSet();
            
         var pdsapeiinvdetpolntally = new pdsapeiinvdetpolntallyDataSet();
            
         var pdsapeiinvdetpolnproof = new pdsapeiinvdetpolnproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetpolnRow = pdsapeiinvdetpoln.ttblapeiinvdetpoln.NewttblapeiinvdetpolnRow();
         Apeiinvdetpoln.UpdateRowFromApeiinvdetpoln(ref ttblapeiinvdetpolnRow, AsapentryAPEIInvDetPOLineChgRetrieveRequestAPI.apeiinvdetpoln);
         pdsapeiinvdetpoln.ttblapeiinvdetpoln.AddttblapeiinvdetpolnRow((pdsapeiinvdetpolnDataSet.ttblapeiinvdetpolnRow)ttblapeiinvdetpolnRow);
          
         DataRow ttblapeiinvdetpolnlistRow = pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist.NewttblapeiinvdetpolnlistRow();
         Apeiinvdetpolnlist.UpdateRowFromApeiinvdetpolnlist(ref ttblapeiinvdetpolnlistRow, AsapentryAPEIInvDetPOLineChgRetrieveRequestAPI.apeiinvdetpolnlist);
         pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist.AddttblapeiinvdetpolnlistRow((pdsapeiinvdetpolnlistDataSet.ttblapeiinvdetpolnlistRow)ttblapeiinvdetpolnlistRow);
          
         var  lChangeMode = AsapentryAPEIInvDetPOLineChgRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetPOLineChgRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineChgRetrieve(ref pdsContext,  lChangeMode,  pdsapeiinvdetpolnlist, ref pdsapeiinvdetpoln, out pdsapeiinvdetpolntally, out pdsapeiinvdetpolnproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineChgRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpolnlist); 
    
         if (pdsapeiinvdetpoln.ttblapeiinvdetpoln.Count > 0)
         {
            result.apeiinvdetpoln = Apeiinvdetpoln.BuildApeiinvdetpolnFromRow(pdsapeiinvdetpoln.ttblapeiinvdetpoln[0]);
         }
                    
         if (pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof.Count > 0)
         {
            result.apeiinvdetpolnproof = Apeiinvdetpolnproof.BuildApeiinvdetpolnproofFromRow(pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof[0]);
         }
                    
         foreach (DataRow row in pdsapeiinvdetpolntally.ttblapeiinvdetpolntally)
         {
            result.apeiinvdetpolntally.Add(Apeiinvdetpolntally.BuildApeiinvdetpolntallyFromRow(row));
         }     
          
         return result;
          
      }

      public AsapentryAPEIInvDetPOLineChgUpdateResponseAPI APEIInvDetPOLineChgUpdate(AsapentryAPEIInvDetPOLineChgUpdateRequestAPI AsapentryAPEIInvDetPOLineChgUpdateRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetPOLineChgUpdateResponseAPI();
         
         var pdsapeiinvdetpoln = new pdsapeiinvdetpolnDataSet();
            
         var pdsapeiinvdetpolnmanadd = new pdsapeiinvdetpolnmanaddDataSet();
            
         var pdsapeiinvdetpolntally = new pdsapeiinvdetpolntallyDataSet();
            
         var pdsapeiinvdetpolnproof = new pdsapeiinvdetpolnproofDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetpolnRow = pdsapeiinvdetpoln.ttblapeiinvdetpoln.NewttblapeiinvdetpolnRow();
         Apeiinvdetpoln.UpdateRowFromApeiinvdetpoln(ref ttblapeiinvdetpolnRow, AsapentryAPEIInvDetPOLineChgUpdateRequestAPI.apeiinvdetpoln);
         pdsapeiinvdetpoln.ttblapeiinvdetpoln.AddttblapeiinvdetpolnRow((pdsapeiinvdetpolnDataSet.ttblapeiinvdetpolnRow)ttblapeiinvdetpolnRow);
          
         foreach (var obj in AsapentryAPEIInvDetPOLineChgUpdateRequestAPI.apeiinvdetpolnmanadd)
         {
            DataRow ttblapeiinvdetpolnmanaddRow = pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd.NewttblapeiinvdetpolnmanaddRow();
            Apeiinvdetpolnmanadd.UpdateRowFromApeiinvdetpolnmanadd(ref ttblapeiinvdetpolnmanaddRow, obj);
            pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd.AddttblapeiinvdetpolnmanaddRow((pdsapeiinvdetpolnmanaddDataSet.ttblapeiinvdetpolnmanaddRow)ttblapeiinvdetpolnmanaddRow);
         }
          
         foreach (var obj in AsapentryAPEIInvDetPOLineChgUpdateRequestAPI.apeiinvdetpolntally)
         {
            DataRow ttblapeiinvdetpolntallyRow = pdsapeiinvdetpolntally.ttblapeiinvdetpolntally.NewttblapeiinvdetpolntallyRow();
            Apeiinvdetpolntally.UpdateRowFromApeiinvdetpolntally(ref ttblapeiinvdetpolntallyRow, obj);
            pdsapeiinvdetpolntally.ttblapeiinvdetpolntally.AddttblapeiinvdetpolntallyRow((pdsapeiinvdetpolntallyDataSet.ttblapeiinvdetpolntallyRow)ttblapeiinvdetpolntallyRow);
         }
          
         
         NLogLoggerP.Trace("APEIInvDetPOLineChgUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineChgUpdate(ref pdsContext, ref pdsapeiinvdetpoln,  pdsapeiinvdetpolnmanadd,  pdsapeiinvdetpolntally, out pdsapeiinvdetpolnproof, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineChgUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpoln); 
    
         if (pdsapeiinvdetpoln.ttblapeiinvdetpoln.Count > 0)
         {
            result.apeiinvdetpoln = Apeiinvdetpoln.BuildApeiinvdetpolnFromRow(pdsapeiinvdetpoln.ttblapeiinvdetpoln[0]);
         }
                    
         if (pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof.Count > 0)
         {
            result.apeiinvdetpolnproof = Apeiinvdetpolnproof.BuildApeiinvdetpolnproofFromRow(pdsapeiinvdetpolnproof.ttblapeiinvdetpolnproof[0]);
         }
                    
          
         return result;
          
      }

      public AsapentryAPEIInvDetPOLineFieldChangeResponseAPI APEIInvDetPOLineFieldChange(AsapentryAPEIInvDetPOLineFieldChangeRequestAPI AsapentryAPEIInvDetPOLineFieldChangeRequestAPI)
      {   
         var result = new AsapentryAPEIInvDetPOLineFieldChangeResponseAPI();
         
         var pdsapeiinvdetpoln = new pdsapeiinvdetpolnDataSet();
            
         var pdsapeiinvdetpolntally = new pdsapeiinvdetpolntallyDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetpolnRow = pdsapeiinvdetpoln.ttblapeiinvdetpoln.NewttblapeiinvdetpolnRow();
         Apeiinvdetpoln.UpdateRowFromApeiinvdetpoln(ref ttblapeiinvdetpolnRow, AsapentryAPEIInvDetPOLineFieldChangeRequestAPI.apeiinvdetpoln);
         pdsapeiinvdetpoln.ttblapeiinvdetpoln.AddttblapeiinvdetpolnRow((pdsapeiinvdetpolnDataSet.ttblapeiinvdetpolnRow)ttblapeiinvdetpolnRow);
          
         foreach (var obj in AsapentryAPEIInvDetPOLineFieldChangeRequestAPI.apeiinvdetpolntally)
         {
            DataRow ttblapeiinvdetpolntallyRow = pdsapeiinvdetpolntally.ttblapeiinvdetpolntally.NewttblapeiinvdetpolntallyRow();
            Apeiinvdetpolntally.UpdateRowFromApeiinvdetpolntally(ref ttblapeiinvdetpolntallyRow, obj);
            pdsapeiinvdetpolntally.ttblapeiinvdetpolntally.AddttblapeiinvdetpolntallyRow((pdsapeiinvdetpolntallyDataSet.ttblapeiinvdetpolntallyRow)ttblapeiinvdetpolntallyRow);
         }
          
         var  cFieldNm = AsapentryAPEIInvDetPOLineFieldChangeRequestAPI.cFieldNm;
            
         
         NLogLoggerP.Trace("APEIInvDetPOLineFieldChange - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineFieldChange(ref pdsContext,  cFieldNm, ref pdsapeiinvdetpoln, ref pdsapeiinvdetpolntally, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineFieldChange - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpoln); 
    
         if (pdsapeiinvdetpoln.ttblapeiinvdetpoln.Count > 0)
         {
            result.apeiinvdetpoln = Apeiinvdetpoln.BuildApeiinvdetpolnFromRow(pdsapeiinvdetpoln.ttblapeiinvdetpoln[0]);
         }
                    
         foreach (DataRow row in pdsapeiinvdetpolntally.ttblapeiinvdetpolntally)
         {
            result.apeiinvdetpolntally.Add(Apeiinvdetpolntally.BuildApeiinvdetpolntallyFromRow(row));
         }     
          
         return result;
          
      }

      public void APEIInvDetPOLineDelete(IEnumerable<Apeirowids> apeirowids)
      {   
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         foreach (var obj in apeirowids)
         {
             DataRow row = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
             Apeirowids.UpdateRowFromApeirowids(ref row, obj);
             pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineDelete(ref pdsContext,  pdsapeirowids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids);
      }

      public IEnumerable<Apeiinvdetpolnmanadd> APEIInvDetPOLineLoadManAddon(Apeiinvdetpoln apeiinvdetpoln)
      {   
         var results = new List<Apeiinvdetpolnmanadd>();
         
         var pdsapeiinvdetpoln = new pdsapeiinvdetpolnDataSet();
            
         var pdsapeiinvdetpolnmanadd = new pdsapeiinvdetpolnmanaddDataSet();
            
         DataRow ttblapeiinvdetpolnCriteria = pdsapeiinvdetpoln.ttblapeiinvdetpoln.NewttblapeiinvdetpolnRow();
         Apeiinvdetpoln.UpdateRowFromApeiinvdetpoln(ref ttblapeiinvdetpolnCriteria, apeiinvdetpoln);
         pdsapeiinvdetpoln.ttblapeiinvdetpoln.AddttblapeiinvdetpolnRow((pdsapeiinvdetpolnDataSet.ttblapeiinvdetpolnRow)ttblapeiinvdetpolnCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineLoadManAddon - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineLoadManAddon(ref pdsContext,  pdsapeiinvdetpoln, out pdsapeiinvdetpolnmanadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineLoadManAddon - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpoln); 
    
            foreach (DataRow row in pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd)
            {
                results.Add(Apeiinvdetpolnmanadd.BuildApeiinvdetpolnmanaddFromRow(row));
            }
            return results;
        
      }

      public Apeiinvdetpolnmanadd APEIInvDetPOLineChgManAddon(Apeiinvdetpolnmanadd apeiinvdetpolnmanadd)
      {   
         var result = new Apeiinvdetpolnmanadd();
         
         var pdsapeiinvdetpolnmanadd = new pdsapeiinvdetpolnmanaddDataSet();
            
         DataRow ttblapeiinvdetpolnmanaddCriteria = pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd.NewttblapeiinvdetpolnmanaddRow();
         Apeiinvdetpolnmanadd.UpdateRowFromApeiinvdetpolnmanadd(ref ttblapeiinvdetpolnmanaddCriteria, apeiinvdetpolnmanadd);
         pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd.AddttblapeiinvdetpolnmanaddRow((pdsapeiinvdetpolnmanaddDataSet.ttblapeiinvdetpolnmanaddRow)ttblapeiinvdetpolnmanaddCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineChgManAddon - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineChgManAddon(ref pdsContext, ref pdsapeiinvdetpolnmanadd, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineChgManAddon - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpolnmanadd); 
    
         if (pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd.Count > 0) 
         { 
             result = Apeiinvdetpolnmanadd.BuildApeiinvdetpolnmanaddFromRow(pdsapeiinvdetpolnmanadd.ttblapeiinvdetpolnmanadd[0]);
         } 
              
          
         return result;
          
      }

      public IEnumerable<Apeiinvdetpolnlist> APEIInvDetPOLineUncost(IEnumerable<Apeiinvdetpolnlist> apeiinvdetpolnlist)
      {   
         var results = new List<Apeiinvdetpolnlist>();
         
         var pdsapeiinvdetpolnlist = new pdsapeiinvdetpolnlistDataSet();
            
         foreach (var obj in apeiinvdetpolnlist)
         {
             DataRow row = pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist.NewttblapeiinvdetpolnlistRow();
             Apeiinvdetpolnlist.UpdateRowFromApeiinvdetpolnlist(ref row, obj);
             pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist.AddttblapeiinvdetpolnlistRow((pdsapeiinvdetpolnlistDataSet.ttblapeiinvdetpolnlistRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineUncost - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineUncost(ref pdsContext, ref pdsapeiinvdetpolnlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineUncost - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetpolnlist); 
    
            foreach (DataRow row in pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist)
            {
                results.Add(Apeiinvdetpolnlist.BuildApeiinvdetpolnlistFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apemacredits> APEMAGetCredits(AsapentryAPEMAGetCreditsRequestAPI AsapentryAPEMAGetCreditsRequestAPI)
      {   
         var results = new List<Apemacredits>();
         
         var pdsapemacredits = new pdsapemacreditsDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  dVendno = AsapentryAPEMAGetCreditsRequestAPI.dVendno;
            
         var  dPostdt = AsapentryAPEMAGetCreditsRequestAPI.dPostdt;
            
         
         NLogLoggerP.Trace("APEMAGetCredits - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMAGetCredits(ref pdsContext,  dVendno,  dPostdt ?? DateTime.MinValue, out pdsapemacredits, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMAGetCredits - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemacredits); 
    
            foreach (DataRow row in pdsapemacredits.ttblapemacredits)
            {
                results.Add(Apemacredits.BuildApemacreditsFromRow(row));
            }
            return results;
        
      }

      public IEnumerable<Apemainvoices> APEMAGetInvoices(AsapentryAPEMAGetInvoicesRequestAPI AsapentryAPEMAGetInvoicesRequestAPI)
      {   
         var results = new List<Apemainvoices>();
         
         var pdsapemainvoices = new pdsapemainvoicesDataSet();
            
         string cErrorMessage = string.Empty;
   
         var  dVendno = AsapentryAPEMAGetInvoicesRequestAPI.dVendno;
            
         var  dPostdt = AsapentryAPEMAGetInvoicesRequestAPI.dPostdt;
            
         
         NLogLoggerP.Trace("APEMAGetInvoices - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMAGetInvoices(ref pdsContext,  dVendno,  dPostdt ?? DateTime.MinValue, out pdsapemainvoices, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMAGetInvoices - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemainvoices); 
    
            foreach (DataRow row in pdsapemainvoices.ttblapemainvoices)
            {
                results.Add(Apemainvoices.BuildApemainvoicesFromRow(row));
            }
            return results;
        
      }

      public Apemaupdate APEMAPreUpdate(AsapentryAPEMAPreUpdateRequestAPI AsapentryAPEMAPreUpdateRequestAPI)
      {   
         var result = new Apemaupdate();
         
         var pdsapemacredits = new pdsapemacreditsDataSet();
            
         var pdsapemainvoices = new pdsapemainvoicesDataSet();
            
         var pdsapemaupdate = new pdsapemaupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEMAPreUpdateRequestAPI.apemacredits)
         {
            DataRow ttblapemacreditsRow = pdsapemacredits.ttblapemacredits.NewttblapemacreditsRow();
            Apemacredits.UpdateRowFromApemacredits(ref ttblapemacreditsRow, obj);
            pdsapemacredits.ttblapemacredits.AddttblapemacreditsRow((pdsapemacreditsDataSet.ttblapemacreditsRow)ttblapemacreditsRow);
         }
          
         foreach (var obj in AsapentryAPEMAPreUpdateRequestAPI.apemainvoices)
         {
            DataRow ttblapemainvoicesRow = pdsapemainvoices.ttblapemainvoices.NewttblapemainvoicesRow();
            Apemainvoices.UpdateRowFromApemainvoices(ref ttblapemainvoicesRow, obj);
            pdsapemainvoices.ttblapemainvoices.AddttblapemainvoicesRow((pdsapemainvoicesDataSet.ttblapemainvoicesRow)ttblapemainvoicesRow);
         }
          
         var  dVendno = AsapentryAPEMAPreUpdateRequestAPI.dVendno;
            
         var  dPostdt = AsapentryAPEMAPreUpdateRequestAPI.dPostdt;
            
         var  iJrnlno = AsapentryAPEMAPreUpdateRequestAPI.iJrnlno;
            
         
         NLogLoggerP.Trace("APEMAPreUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMAPreUpdate(ref pdsContext,  dVendno,  dPostdt ?? DateTime.MinValue,  iJrnlno,  pdsapemacredits,  pdsapemainvoices, out pdsapemaupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMAPreUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemacredits); 
    
         if (pdsapemaupdate.ttblapemaupdate.Count > 0) 
         { 
             result = Apemaupdate.BuildApemaupdateFromRow(pdsapemaupdate.ttblapemaupdate[0]);
         } 
              
          
         return result;
          
      }

      public void APEMAUpdate(AsapentryAPEMAUpdateRequestAPI AsapentryAPEMAUpdateRequestAPI)
      {   
         
         var pdsapemacredits = new pdsapemacreditsDataSet();
            
         var pdsapemainvoices = new pdsapemainvoicesDataSet();
            
         var pdsapemaupdate = new pdsapemaupdateDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEMAUpdateRequestAPI.apemacredits)
         {
            DataRow ttblapemacreditsRow = pdsapemacredits.ttblapemacredits.NewttblapemacreditsRow();
            Apemacredits.UpdateRowFromApemacredits(ref ttblapemacreditsRow, obj);
            pdsapemacredits.ttblapemacredits.AddttblapemacreditsRow((pdsapemacreditsDataSet.ttblapemacreditsRow)ttblapemacreditsRow);
         }
          
         foreach (var obj in AsapentryAPEMAUpdateRequestAPI.apemainvoices)
         {
            DataRow ttblapemainvoicesRow = pdsapemainvoices.ttblapemainvoices.NewttblapemainvoicesRow();
            Apemainvoices.UpdateRowFromApemainvoices(ref ttblapemainvoicesRow, obj);
            pdsapemainvoices.ttblapemainvoices.AddttblapemainvoicesRow((pdsapemainvoicesDataSet.ttblapemainvoicesRow)ttblapemainvoicesRow);
         }
          
         DataRow ttblapemaupdateRow = pdsapemaupdate.ttblapemaupdate.NewttblapemaupdateRow();
         Apemaupdate.UpdateRowFromApemaupdate(ref ttblapemaupdateRow, AsapentryAPEMAUpdateRequestAPI.apemaupdate);
         pdsapemaupdate.ttblapemaupdate.AddttblapemaupdateRow((pdsapemaupdateDataSet.ttblapemaupdateRow)ttblapemaupdateRow);
          
         
         NLogLoggerP.Trace("APEMAUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEMAUpdate(ref pdsContext,  pdsapemacredits,  pdsapemainvoices,  pdsapemaupdate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEMAUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapemacredits);
      }

      public void APExchangeRateUpdate(string cCurrencyty, bool lUpdate, decimal dVouchexrate)
      {   
         
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APExchangeRateUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APExchangeRateUpdate(ref pdsContext,  cCurrencyty,  lUpdate,  dVouchexrate, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APExchangeRateUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         
      }

      public IEnumerable<Apeiinvdetpolnlist> APEIInvDetPOLineList(Apeirowids apeirowids)
      {   
         var results = new List<Apeiinvdetpolnlist>();
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         var pdsapeiinvdetpolnlist = new pdsapeiinvdetpolnlistDataSet();
            
         DataRow ttblapeirowidsCriteria = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
         Apeirowids.UpdateRowFromApeirowids(ref ttblapeirowidsCriteria, apeirowids);
         pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)ttblapeirowidsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOLineList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOLineList(ref pdsContext,  pdsapeirowids, out pdsapeiinvdetpolnlist, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOLineList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids); 
    
            foreach (DataRow row in pdsapeiinvdetpolnlist.ttblapeiinvdetpolnlist)
            {
                results.Add(Apeiinvdetpolnlist.BuildApeiinvdetpolnlistFromRow(row));
            }
            return results;
        
      }

      public void APEIInvDetPOHeaderDelete(IEnumerable<Apeirowids> apeirowids)
      {   
         
         var pdsapeirowids = new pdsapeirowidsDataSet();
            
         foreach (var obj in apeirowids)
         {
             DataRow row = pdsapeirowids.ttblapeirowids.NewttblapeirowidsRow();
             Apeirowids.UpdateRowFromApeirowids(ref row, obj);
             pdsapeirowids.ttblapeirowids.AddttblapeirowidsRow((pdsapeirowidsDataSet.ttblapeirowidsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetPOHeaderDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetPOHeaderDelete(ref pdsContext,  pdsapeirowids, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetPOHeaderDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeirowids);
      }

      public AsapentryAPEIInvDetAddonListResponseAPI APEIInvDetAddonList(Apeiinvdetbanner apeiinvdetbanner)
      {   
         var result = new AsapentryAPEIInvDetAddonListResponseAPI();
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         var pdsapeiinvdetaddontotals = new pdsapeiinvdetaddontotalsDataSet();
            
         DataRow ttblapeiinvdetbannerCriteria = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerCriteria, apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonList(ref pdsContext,  pdsapeiinvdetbanner, out pdsapeiinvdetaddon, out pdsapeiinvdetaddontotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner); 
    
         foreach (DataRow row in pdsapeiinvdetaddon.ttblapeiinvdetaddon)
         {
            result.apeiinvdetaddon.Add(Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(row));
         }     
         if (pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals.Count > 0)
         {
            result.apeiinvdetaddontotals = Apeiinvdetaddontotals.BuildApeiinvdetaddontotalsFromRow(pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetaddon APEIInvDetAddonInitialize(Apeiinvdetaddon apeiinvdetaddon)
      {   
         var result = new Apeiinvdetaddon();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         DataRow ttblapeiinvdetaddonCriteria = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
         Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref ttblapeiinvdetaddonCriteria, apeiinvdetaddon);
         pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)ttblapeiinvdetaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonInitialize(ref pdsContext, ref pdsapeiinvdetaddon, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddon.ttblapeiinvdetaddon.Count > 0) 
         { 
             result = Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(pdsapeiinvdetaddon.ttblapeiinvdetaddon[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetaddon APEIInvDetAddonAddPrepare(Apeiinvdetaddon apeiinvdetaddon)
      {   
         var result = new Apeiinvdetaddon();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         DataRow ttblapeiinvdetaddonCriteria = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
         Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref ttblapeiinvdetaddonCriteria, apeiinvdetaddon);
         pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)ttblapeiinvdetaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonAddPrepare - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonAddPrepare(ref pdsContext, ref pdsapeiinvdetaddon, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonAddPrepare - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddon.ttblapeiinvdetaddon.Count > 0) 
         { 
             result = Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(pdsapeiinvdetaddon.ttblapeiinvdetaddon[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetAddonAddUpdateResponseAPI APEIInvDetAddonAddUpdate(Apeiinvdetaddon apeiinvdetaddon)
      {   
         var result = new AsapentryAPEIInvDetAddonAddUpdateResponseAPI();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         var pdsapeiinvdetaddontotals = new pdsapeiinvdetaddontotalsDataSet();
            
         DataRow ttblapeiinvdetaddonCriteria = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
         Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref ttblapeiinvdetaddonCriteria, apeiinvdetaddon);
         pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)ttblapeiinvdetaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonAddUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonAddUpdate(ref pdsContext, ref pdsapeiinvdetaddon, out pdsapeiinvdetaddontotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonAddUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddon.ttblapeiinvdetaddon.Count > 0)
         {
            result.apeiinvdetaddon = Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(pdsapeiinvdetaddon.ttblapeiinvdetaddon[0]);
         }
                    
         if (pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals.Count > 0)
         {
            result.apeiinvdetaddontotals = Apeiinvdetaddontotals.BuildApeiinvdetaddontotalsFromRow(pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetaddon APEIInvDetAddonChgRetrieve(AsapentryAPEIInvDetAddonChgRetrieveRequestAPI AsapentryAPEIInvDetAddonChgRetrieveRequestAPI)
      {   
         var result = new Apeiinvdetaddon();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdetaddonRow = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
         Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref ttblapeiinvdetaddonRow, AsapentryAPEIInvDetAddonChgRetrieveRequestAPI.apeiinvdetaddon);
         pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)ttblapeiinvdetaddonRow);
          
         var  lChangeMode = AsapentryAPEIInvDetAddonChgRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetAddonChgRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonChgRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvdetaddon, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonChgRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddon.ttblapeiinvdetaddon.Count > 0) 
         { 
             result = Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(pdsapeiinvdetaddon.ttblapeiinvdetaddon[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetAddonChgUpdateResponseAPI APEIInvDetAddonChgUpdate(Apeiinvdetaddon apeiinvdetaddon)
      {   
         var result = new AsapentryAPEIInvDetAddonChgUpdateResponseAPI();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         var pdsapeiinvdetaddontotals = new pdsapeiinvdetaddontotalsDataSet();
            
         DataRow ttblapeiinvdetaddonCriteria = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
         Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref ttblapeiinvdetaddonCriteria, apeiinvdetaddon);
         pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)ttblapeiinvdetaddonCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonChgUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonChgUpdate(ref pdsContext, ref pdsapeiinvdetaddon, out pdsapeiinvdetaddontotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonChgUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddon.ttblapeiinvdetaddon.Count > 0)
         {
            result.apeiinvdetaddon = Apeiinvdetaddon.BuildApeiinvdetaddonFromRow(pdsapeiinvdetaddon.ttblapeiinvdetaddon[0]);
         }
                    
         if (pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals.Count > 0)
         {
            result.apeiinvdetaddontotals = Apeiinvdetaddontotals.BuildApeiinvdetaddontotalsFromRow(pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetaddontotals APEIInvDetAddonDelete(IEnumerable<Apeiinvdetaddon> apeiinvdetaddon)
      {   
         var result = new Apeiinvdetaddontotals();
         
         var pdsapeiinvdetaddon = new pdsapeiinvdetaddonDataSet();
            
         var pdsapeiinvdetaddontotals = new pdsapeiinvdetaddontotalsDataSet();
            
         foreach (var obj in apeiinvdetaddon)
         {
             DataRow row = pdsapeiinvdetaddon.ttblapeiinvdetaddon.NewttblapeiinvdetaddonRow();
             Apeiinvdetaddon.UpdateRowFromApeiinvdetaddon(ref row, obj);
             pdsapeiinvdetaddon.ttblapeiinvdetaddon.AddttblapeiinvdetaddonRow((pdsapeiinvdetaddonDataSet.ttblapeiinvdetaddonRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetAddonDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetAddonDelete(ref pdsContext,  pdsapeiinvdetaddon, out pdsapeiinvdetaddontotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetAddonDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetaddon); 
    
         if (pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals.Count > 0) 
         { 
             result = Apeiinvdetaddontotals.BuildApeiinvdetaddontotalsFromRow(pdsapeiinvdetaddontotals.ttblapeiinvdetaddontotals[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetTermsListResponseAPI APEIInvDetTermsList(Apeiinvdetbanner apeiinvdetbanner)
      {   
         var result = new AsapentryAPEIInvDetTermsListResponseAPI();
         
         var pdsapeiinvdetbanner = new pdsapeiinvdetbannerDataSet();
            
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         var pdsapeiinvdettermstotals = new pdsapeiinvdettermstotalsDataSet();
            
         DataRow ttblapeiinvdetbannerCriteria = pdsapeiinvdetbanner.ttblapeiinvdetbanner.NewttblapeiinvdetbannerRow();
         Apeiinvdetbanner.UpdateRowFromApeiinvdetbanner(ref ttblapeiinvdetbannerCriteria, apeiinvdetbanner);
         pdsapeiinvdetbanner.ttblapeiinvdetbanner.AddttblapeiinvdetbannerRow((pdsapeiinvdetbannerDataSet.ttblapeiinvdetbannerRow)ttblapeiinvdetbannerCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsList - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsList(ref pdsContext,  pdsapeiinvdetbanner, out pdsapeiinvdetterms, out pdsapeiinvdettermstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsList - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetbanner); 
    
         foreach (DataRow row in pdsapeiinvdetterms.ttblapeiinvdetterms)
         {
            result.apeiinvdetterms.Add(Apeiinvdetterms.BuildApeiinvdettermsFromRow(row));
         }     
         if (pdsapeiinvdettermstotals.ttblapeiinvdettermstotals.Count > 0)
         {
            result.apeiinvdettermstotals = Apeiinvdettermstotals.BuildApeiinvdettermstotalsFromRow(pdsapeiinvdettermstotals.ttblapeiinvdettermstotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdetterms APEIInvDetTermsInitialize(Apeiinvdetterms apeiinvdetterms)
      {   
         var result = new Apeiinvdetterms();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         DataRow ttblapeiinvdettermsCriteria = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
         Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref ttblapeiinvdettermsCriteria, apeiinvdetterms);
         pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)ttblapeiinvdettermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsInitialize - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsInitialize(ref pdsContext, ref pdsapeiinvdetterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsInitialize - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdetterms.ttblapeiinvdetterms.Count > 0) 
         { 
             result = Apeiinvdetterms.BuildApeiinvdettermsFromRow(pdsapeiinvdetterms.ttblapeiinvdetterms[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetterms APEIInvDetTermsAddPrepare(Apeiinvdetterms apeiinvdetterms)
      {   
         var result = new Apeiinvdetterms();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         DataRow ttblapeiinvdettermsCriteria = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
         Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref ttblapeiinvdettermsCriteria, apeiinvdetterms);
         pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)ttblapeiinvdettermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsAddPrepare - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsAddPrepare(ref pdsContext, ref pdsapeiinvdetterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsAddPrepare - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdetterms.ttblapeiinvdetterms.Count > 0) 
         { 
             result = Apeiinvdetterms.BuildApeiinvdettermsFromRow(pdsapeiinvdetterms.ttblapeiinvdetterms[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetTermsAddUpdateResponseAPI APEIInvDetTermsAddUpdate(Apeiinvdetterms apeiinvdetterms)
      {   
         var result = new AsapentryAPEIInvDetTermsAddUpdateResponseAPI();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         var pdsapeiinvdettermstotals = new pdsapeiinvdettermstotalsDataSet();
            
         DataRow ttblapeiinvdettermsCriteria = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
         Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref ttblapeiinvdettermsCriteria, apeiinvdetterms);
         pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)ttblapeiinvdettermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsAddUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsAddUpdate(ref pdsContext, ref pdsapeiinvdetterms, out pdsapeiinvdettermstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsAddUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdetterms.ttblapeiinvdetterms.Count > 0)
         {
            result.apeiinvdetterms = Apeiinvdetterms.BuildApeiinvdettermsFromRow(pdsapeiinvdetterms.ttblapeiinvdetterms[0]);
         }
                    
         if (pdsapeiinvdettermstotals.ttblapeiinvdettermstotals.Count > 0)
         {
            result.apeiinvdettermstotals = Apeiinvdettermstotals.BuildApeiinvdettermstotalsFromRow(pdsapeiinvdettermstotals.ttblapeiinvdettermstotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdettermstotals APEIInvDetTermsDelete(IEnumerable<Apeiinvdetterms> apeiinvdetterms)
      {   
         var result = new Apeiinvdettermstotals();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         var pdsapeiinvdettermstotals = new pdsapeiinvdettermstotalsDataSet();
            
         foreach (var obj in apeiinvdetterms)
         {
             DataRow row = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
             Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref row, obj);
             pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)row);
         }
        
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsDelete - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsDelete(ref pdsContext,  pdsapeiinvdetterms, out pdsapeiinvdettermstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsDelete - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdettermstotals.ttblapeiinvdettermstotals.Count > 0) 
         { 
             result = Apeiinvdettermstotals.BuildApeiinvdettermstotalsFromRow(pdsapeiinvdettermstotals.ttblapeiinvdettermstotals[0]);
         } 
              
          
         return result;
          
      }

      public Apeiinvdetterms APEIInvDetTermsChgRetrieve(AsapentryAPEIInvDetTermsChgRetrieveRequestAPI AsapentryAPEIInvDetTermsChgRetrieveRequestAPI)
      {   
         var result = new Apeiinvdetterms();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         string cErrorMessage = string.Empty;
   
         DataRow ttblapeiinvdettermsRow = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
         Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref ttblapeiinvdettermsRow, AsapentryAPEIInvDetTermsChgRetrieveRequestAPI.apeiinvdetterms);
         pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)ttblapeiinvdettermsRow);
          
         var  lChangeMode = AsapentryAPEIInvDetTermsChgRetrieveRequestAPI.lChangeMode;
            
         
         NLogLoggerP.Trace("APEIInvDetTermsChgRetrieve - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsChgRetrieve(ref pdsContext,  lChangeMode, ref pdsapeiinvdetterms, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsChgRetrieve - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdetterms.ttblapeiinvdetterms.Count > 0) 
         { 
             result = Apeiinvdetterms.BuildApeiinvdettermsFromRow(pdsapeiinvdetterms.ttblapeiinvdetterms[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetTermsChgUpdateResponseAPI APEIInvDetTermsChgUpdate(Apeiinvdetterms apeiinvdetterms)
      {   
         var result = new AsapentryAPEIInvDetTermsChgUpdateResponseAPI();
         
         var pdsapeiinvdetterms = new pdsapeiinvdettermsDataSet();
            
         var pdsapeiinvdettermstotals = new pdsapeiinvdettermstotalsDataSet();
            
         DataRow ttblapeiinvdettermsCriteria = pdsapeiinvdetterms.ttblapeiinvdetterms.NewttblapeiinvdettermsRow();
         Apeiinvdetterms.UpdateRowFromApeiinvdetterms(ref ttblapeiinvdettermsCriteria, apeiinvdetterms);
         pdsapeiinvdetterms.ttblapeiinvdetterms.AddttblapeiinvdettermsRow((pdsapeiinvdettermsDataSet.ttblapeiinvdettermsRow)ttblapeiinvdettermsCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsChgUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsChgUpdate(ref pdsContext, ref pdsapeiinvdetterms, out pdsapeiinvdettermstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsChgUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdetterms); 
    
         if (pdsapeiinvdetterms.ttblapeiinvdetterms.Count > 0)
         {
            result.apeiinvdetterms = Apeiinvdetterms.BuildApeiinvdettermsFromRow(pdsapeiinvdetterms.ttblapeiinvdetterms[0]);
         }
                    
         if (pdsapeiinvdettermstotals.ttblapeiinvdettermstotals.Count > 0)
         {
            result.apeiinvdettermstotals = Apeiinvdettermstotals.BuildApeiinvdettermstotalsFromRow(pdsapeiinvdettermstotals.ttblapeiinvdettermstotals[0]);
         }
                    
          
         return result;
          
      }

      public Apeiinvdettermssplit APEIInvDetTermsSplitInit(Apeiinvdettermssplit apeiinvdettermssplit)
      {   
         var result = new Apeiinvdettermssplit();
         
         var pdsapeiinvdettermssplit = new pdsapeiinvdettermssplitDataSet();
            
         DataRow ttblapeiinvdettermssplitCriteria = pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.NewttblapeiinvdettermssplitRow();
         Apeiinvdettermssplit.UpdateRowFromApeiinvdettermssplit(ref ttblapeiinvdettermssplitCriteria, apeiinvdettermssplit);
         pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.AddttblapeiinvdettermssplitRow((pdsapeiinvdettermssplitDataSet.ttblapeiinvdettermssplitRow)ttblapeiinvdettermssplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsSplitInit - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsSplitInit(ref pdsContext, ref pdsapeiinvdettermssplit, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsSplitInit - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdettermssplit); 
    
         if (pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.Count > 0) 
         { 
             result = Apeiinvdettermssplit.BuildApeiinvdettermssplitFromRow(pdsapeiinvdettermssplit.ttblapeiinvdettermssplit[0]);
         } 
              
          
         return result;
          
      }

      public AsapentryAPEIInvDetTermsSplitUpdateResponseAPI APEIInvDetTermsSplitUpdate(Apeiinvdettermssplit apeiinvdettermssplit)
      {   
         var result = new AsapentryAPEIInvDetTermsSplitUpdateResponseAPI();
         
         var pdsapeiinvdettermssplit = new pdsapeiinvdettermssplitDataSet();
            
         var pdsapeiinvdettermstotals = new pdsapeiinvdettermstotalsDataSet();
            
         DataRow ttblapeiinvdettermssplitCriteria = pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.NewttblapeiinvdettermssplitRow();
         Apeiinvdettermssplit.UpdateRowFromApeiinvdettermssplit(ref ttblapeiinvdettermssplitCriteria, apeiinvdettermssplit);
         pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.AddttblapeiinvdettermssplitRow((pdsapeiinvdettermssplitDataSet.ttblapeiinvdettermssplitRow)ttblapeiinvdettermssplitCriteria);
            
         string cErrorMessage = string.Empty;
   
         
         NLogLoggerP.Trace("APEIInvDetTermsSplitUpdate - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvDetTermsSplitUpdate(ref pdsContext, ref pdsapeiinvdettermssplit, out pdsapeiinvdettermstotals, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvDetTermsSplitUpdate - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvdettermssplit); 
    
         if (pdsapeiinvdettermssplit.ttblapeiinvdettermssplit.Count > 0)
         {
            result.apeiinvdettermssplit = Apeiinvdettermssplit.BuildApeiinvdettermssplitFromRow(pdsapeiinvdettermssplit.ttblapeiinvdettermssplit[0]);
         }
                    
         if (pdsapeiinvdettermstotals.ttblapeiinvdettermstotals.Count > 0)
         {
            result.apeiinvdettermstotals = Apeiinvdettermstotals.BuildApeiinvdettermstotalsFromRow(pdsapeiinvdettermstotals.ttblapeiinvdettermstotals[0]);
         }
                    
          
         return result;
          
      }

      public IEnumerable<Apeiinvoicedetailflags> APEIInvoiceDetailToggleFlags(AsapentryAPEIInvoiceDetailToggleFlagsRequestAPI AsapentryAPEIInvoiceDetailToggleFlagsRequestAPI)
      {   
         var results = new List<Apeiinvoicedetailflags>();
         
         var pdsapeiinvoicedetailflags = new pdsapeiinvoicedetailflagsDataSet();
            
         string cErrorMessage = string.Empty;
   
         foreach (var obj in AsapentryAPEIInvoiceDetailToggleFlagsRequestAPI.apeiinvoicedetailflags)
         {
            DataRow ttblapeiinvoicedetailflagsRow = pdsapeiinvoicedetailflags.ttblapeiinvoicedetailflags.NewttblapeiinvoicedetailflagsRow();
            Apeiinvoicedetailflags.UpdateRowFromApeiinvoicedetailflags(ref ttblapeiinvoicedetailflagsRow, obj);
            pdsapeiinvoicedetailflags.ttblapeiinvoicedetailflags.AddttblapeiinvoicedetailflagsRow((pdsapeiinvoicedetailflagsDataSet.ttblapeiinvoicedetailflagsRow)ttblapeiinvoicedetailflagsRow);
         }
          
         var  cType = AsapentryAPEIInvoiceDetailToggleFlagsRequestAPI.cType;
            
         var  lFlagValue = AsapentryAPEIInvoiceDetailToggleFlagsRequestAPI.lFlagValue;
            
         
         NLogLoggerP.Trace("APEIInvoiceDetailToggleFlags - Asapentry - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poAsapentryproxy = this.proxyAppObject.CreatePO_asapentryproxy())
               {
                   this.SetRequiredContextParameters();
                   poAsapentryproxy.APEIInvoiceDetailToggleFlags(ref pdsContext,  cType,  lFlagValue, ref pdsapeiinvoicedetailflags, out cErrorMessage);
               }
            });
         NLogLoggerP.Info("APEIInvoiceDetailToggleFlags - Asapentry - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapeiinvoicedetailflags); 
    
            foreach (DataRow row in pdsapeiinvoicedetailflags.ttblapeiinvoicedetailflags)
            {
                results.Add(Apeiinvoicedetailflags.BuildApeiinvoicedetailflagsFromRow(row));
            }
            return results;
        
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  