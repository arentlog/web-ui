//------------------------------------------------------------------------------
// 
//     This code was generated by a tool.
//     Template version $Rev: 21496 $
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     (c) Infor Global Solutions 2018
// 
//------------------------------------------------------------------------------

#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using NLog;
using ServiceInterfaceClient.BaseClasses;
using ServiceInterfaceClient.Extensions;
using ServiceInterfaceClient.Helpers;
using ServiceInterfaceClient.Progress;
    
namespace Infor.Sxe.AP.Data.Adapters
{
   using com.infor.sxproxy.approxy;
   using com.infor.sxproxy.approxy.StrongTypesNS;
    
   using Models.PdsContext;
   using Models.Pdsapet;
   using Models.Pdsapetlookup;
   using Models.Complex;

   public partial class ApetAdapter : AdapterBase<pdsContextDataSet>
   {
      private const string DataSetName = "pdsapet";
      private APProxyAppObject proxyAppObject;
      private readonly Tuple<string, string> apetTableControlKey;
		
      private pdsapetDataSet dataSet;
        
      public ApetAdapter(IProgressConnection connection) : base(connection)
      {
         try 
         {
            this.proxyAppObject = new APProxyAppObject(connection.Connection);
            this.pdsContext = new pdsContextDataSet();
            this.dataSet = new pdsapetDataSet() { DataSetName = DataSetName };
            this.apetTableControlKey = this.dataSet.ttblapet.GetTableControlParametersKey();
            
            if (!this.tempTableControlParameters.ContainsKey(this.apetTableControlKey))
            {
               this.CreateTableControlParameters(this.apetTableControlKey);
            }
            this.OnCreated();
         }
         catch (Exception ex)
         {
            NLogLogger.ErrorException("Failed in adapter ", ex);
            ErrorReportingHelper.ReportProgramErrors($"Error in ApetAdapter constructor - {ex.Message}");
         }
      }
  
      partial void OnCreated();
    
      protected void FetchWhere(string where, int batchsize, string fldList)
      {
         NLogLoggerP.Trace("Fetchwhere - Apetproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               this.SetAndFetch(where, batchsize == 0 ? DefaultFetchWhereRowCount : batchsize, fldList);
               using (var poApetproxy = this.proxyAppObject.CreatePO_apetproxy())
               {
                  var cErrorMessage = string.Empty;
                  this.SetRequiredContextParameters();
                  poApetproxy.FetchWhere(ref this.pdsContext, out this.dataSet, out cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("Fetchwhere - Apetproxy - After Call");
      }
      
      private void SetAndFetch(string where, int batchsize, string fldList)
      {
         MappedDiagnosticsContext.Set("where", where);
         this.SetFetchWhereParameters(this.apetTableControlKey, where, batchsize, fldList);
         this.SetTableParametersOnContext(this.apetTableControlKey, true);
      }
  
      protected void SaveChanges()
      {
         NLogLoggerP.Trace("SaveChanges - Apetproxy - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poApetproxy = this.proxyAppObject.CreatePO_apetproxy())
               {
                  this.SetRequiredContextParameters();
                  poApetproxy.SaveChanges(ref this.pdsContext, ref this.dataSet, out string cErrorMessage);
                  ErrorReportingHelper.ReportErrors(cErrorMessage);
                  this.ReportErrors(this.pdsContext);
                  this.ReportErrors(this.dataSet);
               }
            });
         NLogLoggerP.Info("SaveChanges - Apetproxy - After Call");
      }
   

      public Apet GetByRowId(string rowId, string fldList)
      {
         var row = this.GetRowByRowId(rowId, fldList);
         Apet apet = null;
         if (row != null)
         {
             apet = this.BuildFromRow(row);
         }
         return apet;
      }
   
      private DataRow GetRowByRowId(string rowId, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("rowid(apet) = to-rowid('0x{0}')", rowId.ToClauseString());
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttblapet.AsEnumerable().SingleOrDefault();
      }
        
      public IEnumerable<Apet> GetListByRowIdList(List<string> rowIds, int batchsize, string fldList)
      {
         var where = new StringBuilder();
         if (rowIds != null && rowIds.Count > 0)
         {
           foreach (var rowId in rowIds)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("rowid(apet)=to-rowid('0x{0}')", rowId.ToClauseString());
           }
         }
         return this.GetList(where.ToString(), batchsize, fldList);
      }

      protected Apet Fetch(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         var row = this.dataSet.ttblapet.AsEnumerable().SingleOrDefault();
         Apet apet = null;
         if (row != null)
         {
             apet = this.BuildFromRow(row);
         }
         return apet;
      }
	  
	  
	  public IEnumerable<Apet> GetListByRowpointers(List<string> rowpointers, string fldList)
      {
         var where = new StringBuilder();
         if (rowpointers != null && rowpointers.Count > 0)
         {
           foreach (var rowpointer in rowpointers)
           {
              if (where.ToString().Length > 0)
              {
                 where.Append(" OR ");
              }
              where.AppendFormat("apet.rowpointer='{0}'", rowpointer);
           }
         }
         return this.GetList(where.ToString(), rowpointers.Count, fldList);
      }
	  
	  private DataRow GetRowByRowpointer(string rowpointer, string fldList)
      {
         var where = new StringBuilder();
         where.AppendFormat("apet.rowpointer = '{0}'", rowpointer);
         this.FetchWhere(where.ToString(), 1, fldList);
         return this.dataSet.ttblapet.AsEnumerable().SingleOrDefault();
      }
      public IEnumerable<Apet> GetListAllByCono(int cono, int batchsize, string fldList)
      {   
         cono = cono == 0 ? this.connection.CompanyNumber : cono;
         var sb = new StringBuilder();
         sb.AppendFormat("apet.cono = {0}", cono);
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetList(string where, int batchsize, string fldList)
      {
         this.FetchWhere(where, batchsize, fldList);
         return (from DataRow row in this.dataSet.ttblapet.Rows where row != null select this.BuildFromRow(row)).ToList();
      }

      public Apet Get(int cono, int jrnlno, int setno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (jrnlno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.jrnlno = {0}", jrnlno);
         }
         if (setno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.setno = {0}", setno);
         }
         var where = sb.ToString();
         return this.Fetch(where, batchsize, fldList);
      }
  
      public IEnumerable<Apet> GetListByApinvno(int cono, decimal vendno, string apinvno, int transcd, bool statustype, int seqno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (vendno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.vendno = {0}", vendno);
         }
         if (!string.IsNullOrEmpty(apinvno)) 
         {
             sb.AppendFormatWithEscape(" AND apet.apinvno = '{0}'", apinvno);
         }
         if (transcd != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.transcd = {0}", transcd);
         }
         sb.AppendFormatWithEscape(" AND apet.statustype = {0}", statustype);
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByInq(int cono, decimal vendno, DateTime? invdt, string apinvno, int transcd, int seqno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (vendno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.vendno = {0}", vendno);
         }
         if (invdt != null) 
         {
             sb.AppendFormatWithEscape(" AND apet.invdt = '{0}'", invdt);
         }
         if (!string.IsNullOrEmpty(apinvno)) 
         {
             sb.AppendFormatWithEscape(" AND apet.apinvno = '{0}'", apinvno);
         }
         if (transcd != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.transcd = {0}", transcd);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.seqno = {0}", seqno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByInvdt(int cono, decimal vendno, string apinvno, int seqno, DateTime? invdt, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (vendno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.vendno = {0}", vendno);
         }
         if (!string.IsNullOrEmpty(apinvno)) 
         {
             sb.AppendFormatWithEscape(" AND apet.apinvno = '{0}'", apinvno);
         }
         if (seqno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.seqno = {0}", seqno);
         }
         if (invdt != null) 
         {
             sb.AppendFormatWithEscape(" AND apet.invdt = '{0}'", invdt);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByNovend(int cono, string apinvno, int transcd, bool statustype, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(apinvno)) 
         {
             sb.AppendFormatWithEscape(" AND apet.apinvno = '{0}'", apinvno);
         }
         if (transcd != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.transcd = {0}", transcd);
         }
         sb.AppendFormatWithEscape(" AND apet.statustype = {0}", statustype);
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByPidjrnl(int cono, int pidjrnlno, int transcd, int pidsetno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (pidjrnlno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.pidjrnlno = {0}", pidjrnlno);
         }
         if (transcd != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.transcd = {0}", transcd);
         }
         if (pidsetno != int.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.pidsetno = {0}", pidsetno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Apet GetByRowpointer(string rowpointer, string fldList)
      {   
         var sb = new StringBuilder();
         if (!string.IsNullOrEmpty(rowpointer)) 
         {
             sb.AppendFormatWithEscape("apet.rowpointer = '{0}'", rowpointer);
         }
         var where = sb.ToString();
         return this.Fetch(where, 1, fldList);
      }

      public IEnumerable<Apet> GetListByStatus(int cono, decimal vendno, bool statustype, string apinvno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (vendno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.vendno = {0}", vendno);
         }
         sb.AppendFormatWithEscape(" AND apet.statustype = {0}", statustype);
         if (!string.IsNullOrEmpty(apinvno)) 
         {
             sb.AppendFormatWithEscape(" AND apet.apinvno = '{0}'", apinvno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByTransdttmz(DateTime? transdttmz, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         if (transdttmz != null) 
         {
             sb.AppendFormatWithEscape("apet.transdttmz = '{0}'", transdttmz);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public IEnumerable<Apet> GetListByUdnet(int cono, string location, decimal urecno, int batchsize, string fldList)
      {   
         var sb = new StringBuilder();
         sb.AppendFormatWithEscape("apet.cono = {0}", cono == 0 ? this.connection.CompanyNumber : cono);
         if (!string.IsNullOrEmpty(location)) 
         {
             sb.AppendFormatWithEscape(" AND apet.location = '{0}'", location);
         }
         if (urecno != decimal.MinValue) 
         {
             sb.AppendFormatWithEscape(" AND apet.urecno = {0}", urecno);
         }
         var where = sb.ToString();
         return this.GetList(where, batchsize, fldList);
      }

      public Apet BuildFromRow(DataRow row)
      {
         var returnRecord = Apet.BuildApetFromRow(row);
         returnRecord = this.BuildExtraFromRow<Apet>(returnRecord, row);
         return returnRecord;
      }
      
      public void UpdateToRow(ref DataRow row, Apet record)
      {
         Apet.UpdateRowFromApet(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
      }
      
      public Apet Insert(Apet record)
      {
         DataRow row = this.dataSet.ttblapet.NewttblapetRow();
         this.UpdateToRow(ref row, record);
         this.ExtraUpdateToRow(ref row, record);
         this.dataSet.ttblapet.AddttblapetRow((pdsapetDataSet.ttblapetRow)row);
         this.SaveChanges();
         return this.dataSet.ttblapet.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblapet.Rows[0]) : null;
      }
  

      public Apet Update(Apet record)
      {
        var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);
         if (row != null)
         {
            this.UpdateToRow(ref row, record);
            this.ExtraUpdateToRow(ref row, record);
            this.SaveChanges();
            return this.dataSet.ttblapet.Rows.Count > 0 ? this.BuildFromRow(this.dataSet.ttblapet.Rows[0]) : null;
         }
         ErrorReportingHelper.ReportErrors("global.update.doesnotexist", 421);
         return null;
      }
  
      public void Delete(Apet record)
      {
         var row = this.GetRowByRowpointer(record.rowpointer, string.Empty);         
         if (row == null)
         {
            row = this.dataSet.ttblapet.NewttblapetRow();
            Apet.BuildMinimalRow(ref row, record);
            this.dataSet.ttblapet.AddttblapetRow((pdsapetDataSet.ttblapetRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }
 
      private void DeleteUseRowID(Apet record)
      {
         var row = this.GetRowByRowId(record.rowID, string.Empty);
         if (row == null)
         {
            row = this.dataSet.ttblapet.NewttblapetRow();
            Apet.BuildMinimalRow(ref row, record);
            this.dataSet.ttblapet.AddttblapetRow((pdsapetDataSet.ttblapetRow)row);
         }
         row.Delete();
         this.SaveChanges();
      }

      public void DeleteListByRowIds(List<string> rowIds)
      {
         if (rowIds != null)
         {
            var recList = rowIds.Select(selectRowId => new Apet() { rowID = selectRowId }).ToList();
            foreach (var rec in recList)
            {
               this.DeleteUseRowID(rec);
            }
         }
      }
	  
 
      public void DeleteListByRowPointers(List<string> rowpointers)
      {
         if (rowpointers != null)
         {
            var recList = rowpointers.Select(selectRowpointer => new Apet() { rowpointer = selectRowpointer }).ToList();
            foreach (var rec in recList)
            {
               this.Delete(rec);
            }
         }
      }

      public ApetLookupResponseAPI Lookup(Apetlookupcriteria apetlookupcriteria)
      {   
         var result = new ApetLookupResponseAPI();
         
         var pdsapetlookup = new pdsapetlookupDataSet();
            
         DataRow ttblapetlookupcriteriaCriteria = pdsapetlookup.ttblapetlookupcriteria.NewttblapetlookupcriteriaRow();
         Apetlookupcriteria.UpdateRowFromApetlookupcriteria(ref ttblapetlookupcriteriaCriteria, apetlookupcriteria);
         pdsapetlookup.ttblapetlookupcriteria.AddttblapetlookupcriteriaRow((pdsapetlookupDataSet.ttblapetlookupcriteriaRow)ttblapetlookupcriteriaCriteria);
            
         string cErrorMessage = string.Empty;
         bool lMoreRecords = false;
   
         
         NLogLoggerP.Trace("Lookup - Apet - Before Call");
         StopwatchUtil.Time(
         () =>
            {
               using (var poApetproxy = this.proxyAppObject.CreatePO_apetproxy())
               {
                   this.SetRequiredContextParameters();
                   poApetproxy.Lookup(ref pdsContext, ref pdsapetlookup, out cErrorMessage, out lMoreRecords);
               }
            });
         NLogLoggerP.Info("Lookup - Apet - After Call");

         
         this.ReportErrors(cErrorMessage);
         this.ReportErrors(this.pdsContext);
         this.ReportErrors(pdsapetlookup); 
    
         foreach (DataRow row in pdsapetlookup.ttblapetlookupresults)
         {
            result.apetlookupresults.Add(Apetlookupresults.BuildApetlookupresultsFromRow(row));
         }     
         result.lMoreRecords = lMoreRecords;
          
         return result;
          
      }

      protected override void Dispose(bool disposing)
      {
         if (this.disposed) { return; }
         if (!disposing)
         {
            return;
         }	
         this.proxyAppObject?.Dispose();

         this.dataSet?.Dispose();
         base.Dispose(true);
      }
  
   }
}
#pragma warning restore 1591
  